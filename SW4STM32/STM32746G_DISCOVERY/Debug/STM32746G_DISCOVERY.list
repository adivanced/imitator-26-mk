
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010390  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000073b4  08010560  08010560  00020560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017914  08017914  00027914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801791c  0801791c  0002791c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017920  08017920  00027920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001ad0  20000000  08017924  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 000000a0  20001ad0  080193f4  00031ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00012550  20001b70  08019494  00031b70  2**2
                  ALLOC
  9 ._user_heap_stack 00000660  200140c0  08019494  000340c0  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00031b70  2**0
                  CONTENTS, READONLY
 11 .debug_line   0004acdc  00000000  00000000  00031ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   0004c856  00000000  00000000  0007c87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b279  00000000  00000000  000c90d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002630  00000000  00000000  000d4350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001202da  00000000  00000000  000d6980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004040  00000000  00000000  001f6c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0002c0a5  00000000  00000000  001faca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000386c9  00000000  00000000  00226d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025f40e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081f0  00000000  00000000  0025f460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 000000a0  2004c000  2004c000  0003c000  2**2
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001b70 	.word	0x20001b70
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010548 	.word	0x08010548

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001b74 	.word	0x20001b74
 800020c:	08010548 	.word	0x08010548

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ca:	e003      	b.n	80005d4 <LoopCopyDataInit>

080005cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005d2:	3104      	adds	r1, #4

080005d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005dc:	d3f6      	bcc.n	80005cc <CopyDataInit>
  ldr  r2, =_sbss
 80005de:	4a0b      	ldr	r2, [pc, #44]	; (800060c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005e0:	e002      	b.n	80005e8 <LoopFillZerobss>

080005e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005e4:	f842 3b04 	str.w	r3, [r2], #4

080005e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005ec:	d3f9      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ee:	f002 fc2f 	bl	8002e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f00e fe91 	bl	800f318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f6:	f001 fc2b 	bl	8001e50 <main>
  bx  lr    
 80005fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000600:	08017924 	.word	0x08017924
  ldr  r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000608:	20001ad0 	.word	0x20001ad0
  ldr  r2, =_sbss
 800060c:	20001b70 	.word	0x20001b70
  ldr  r3, = _ebss
 8000610:	200140c0 	.word	0x200140c0

08000614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC_IRQHandler>
	...

08000618 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <_sbrk+0x38>)
 800061a:	6811      	ldr	r1, [r2, #0]
{
 800061c:	b508      	push	{r3, lr}
 800061e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000620:	b909      	cbnz	r1, 8000626 <_sbrk+0xe>
		heap_end = &end;
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <_sbrk+0x3c>)
 8000624:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000626:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	prev_heap_end = heap_end;
 800062a:	6810      	ldr	r0, [r2, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800062c:	f8d1 1d08 	ldr.w	r1, [r1, #3336]	; 0xd08
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000630:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000632:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000634:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000638:	428b      	cmp	r3, r1
 800063a:	d906      	bls.n	800064a <_sbrk+0x32>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800063c:	f00e fe66 	bl	800f30c <__errno>
 8000640:	230c      	movs	r3, #12
 8000642:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000648:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800064a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800064c:	e7fc      	b.n	8000648 <_sbrk+0x30>
 800064e:	bf00      	nop
 8000650:	20001b8c 	.word	0x20001b8c
 8000654:	200140c0 	.word	0x200140c0

08000658 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000658:	2001      	movs	r0, #1
 800065a:	4770      	bx	lr

0800065c <_kill>:

int _kill(int pid, int sig)
{
 800065c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800065e:	f00e fe55 	bl	800f30c <__errno>
 8000662:	2316      	movs	r3, #22
 8000664:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066a:	bd08      	pop	{r3, pc}

0800066c <_exit>:

void _exit (int status)
{
 800066c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800066e:	f00e fe4d 	bl	800f30c <__errno>
 8000672:	2316      	movs	r3, #22
 8000674:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000676:	e7fe      	b.n	8000676 <_exit+0xa>

08000678 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	460d      	mov	r5, r1
 800067c:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	460e      	mov	r6, r1
 8000680:	1b73      	subs	r3, r6, r5
 8000682:	429c      	cmp	r4, r3
 8000684:	dc01      	bgt.n	800068a <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000686:	4620      	mov	r0, r4
 8000688:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 800068a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800068e:	f001 fe6f 	bl	8002370 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	e7f5      	b.n	8000680 <_write+0x8>

08000694 <_close>:

int _close(int file)
{
	return -1;
}
 8000694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000698:	4770      	bx	lr

0800069a <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800069a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800069e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80006a0:	604b      	str	r3, [r1, #4]
}
 80006a2:	4770      	bx	lr

080006a4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006a4:	2001      	movs	r0, #1
 80006a6:	4770      	bx	lr

080006a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006a8:	2000      	movs	r0, #0
 80006aa:	4770      	bx	lr

080006ac <_read>:

int _read(int file, char *ptr, int len)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	460d      	mov	r5, r1
 80006b0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	460e      	mov	r6, r1
 80006b4:	1b73      	subs	r3, r6, r5
 80006b6:	429c      	cmp	r4, r3
 80006b8:	dc01      	bgt.n	80006be <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80006ba:	4620      	mov	r0, r4
 80006bc:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80006be:	f3af 8000 	nop.w
 80006c2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	e7f5      	b.n	80006b4 <_read+0x8>

080006c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 80006c8:	b510      	push	{r4, lr}
  if (netif_is_up(netif))
 80006ca:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
 80006ce:	b086      	sub	sp, #24
 80006d0:	4c0d      	ldr	r4, [pc, #52]	; (8000708 <ethernet_link_status_updated+0x40>)
  if (netif_is_up(netif))
 80006d2:	f013 0f01 	tst.w	r3, #1
 80006d6:	d00e      	beq.n	80006f6 <ethernet_link_status_updated+0x2e>
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#elif defined(USE_LCD)
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
 80006d8:	3004      	adds	r0, #4
 80006da:	f009 fb77 	bl	8009dcc <ip4addr_ntoa>
 80006de:	4601      	mov	r1, r0
 80006e0:	a801      	add	r0, sp, #4
 80006e2:	f00e ff2f 	bl	800f544 <strcpy>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <ethernet_link_status_updated+0x44>)
 80006e8:	a901      	add	r1, sp, #4
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <ethernet_link_status_updated+0x48>)
 80006ec:	6023      	str	r3, [r4, #0]
 80006ee:	f00e fe5d 	bl	800f3ac <iprintf>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  }
}
 80006f2:	b006      	add	sp, #24
 80006f4:	bd10      	pop	{r4, pc}
    LCD_UsrLog ("The network cable is not connected \n");
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <ethernet_link_status_updated+0x44>)
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <ethernet_link_status_updated+0x4c>)
 80006fa:	6023      	str	r3, [r4, #0]
}
 80006fc:	b006      	add	sp, #24
 80006fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LCD_UsrLog ("The network cable is not connected \n");
 8000702:	f00e bed9 	b.w	800f4b8 <puts>
 8000706:	bf00      	nop
 8000708:	20005c74 	.word	0x20005c74
 800070c:	ff000080 	.word	0xff000080
 8000710:	08014458 	.word	0x08014458
 8000714:	0801446f 	.word	0x0801446f

08000718 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8000718:	2000      	movs	r0, #0
 800071a:	4770      	bx	lr

0800071c <low_level_output>:
{
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4668      	mov	r0, sp
 8000728:	f00e fe38 	bl	800f39c <memset>
  for(q = p; q != NULL; q = q->next)
 800072c:	466a      	mov	r2, sp
 800072e:	4623      	mov	r3, r4
  uint32_t i = 0U;
 8000730:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 8000732:	b9f3      	cbnz	r3, 8000772 <low_level_output+0x56>
  TxConfig.Length = p->tot_len;
 8000734:	4d1a      	ldr	r5, [pc, #104]	; (80007a0 <low_level_output+0x84>)
  pbuf_ref(p);
 8000736:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8000738:	8923      	ldrh	r3, [r4, #8]
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 800073a:	f105 0638 	add.w	r6, r5, #56	; 0x38
  TxConfig.TxBuffer = Txbuffer;
 800073e:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.Length = p->tot_len;
 8000742:	606b      	str	r3, [r5, #4]
  TxConfig.pData = p;
 8000744:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 8000746:	f00a fe25 	bl	800b394 <pbuf_ref>
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 800074a:	4629      	mov	r1, r5
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <low_level_output+0x88>)
 800074e:	f003 fa0a 	bl	8003b66 <HAL_ETH_Transmit_IT>
 8000752:	b310      	cbz	r0, 800079a <low_level_output+0x7e>
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8000754:	4630      	mov	r0, r6
 8000756:	f003 fc35 	bl	8003fc4 <HAL_ETH_GetError>
 800075a:	0783      	lsls	r3, r0, #30
 800075c:	d518      	bpl.n	8000790 <low_level_output+0x74>
        osSemaphoreWait( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800075e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000762:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000766:	f006 f8be 	bl	80068e6 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&EthHandle);
 800076a:	4630      	mov	r0, r6
 800076c:	f003 faa1 	bl	8003cb2 <HAL_ETH_ReleaseTxPacket>
  }while(errval == ERR_BUF);
 8000770:	e7eb      	b.n	800074a <low_level_output+0x2e>
    if(i >= ETH_TX_DESC_CNT)
 8000772:	2904      	cmp	r1, #4
 8000774:	d00f      	beq.n	8000796 <low_level_output+0x7a>
    Txbuffer[i].buffer = q->payload;
 8000776:	6858      	ldr	r0, [r3, #4]
 8000778:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 800077a:	8958      	ldrh	r0, [r3, #10]
 800077c:	6050      	str	r0, [r2, #4]
    if(i>0)
 800077e:	b109      	cbz	r1, 8000784 <low_level_output+0x68>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000780:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	b903      	cbnz	r3, 800078a <low_level_output+0x6e>
      Txbuffer[i].next = NULL;
 8000788:	6093      	str	r3, [r2, #8]
    i++;
 800078a:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 800078c:	320c      	adds	r2, #12
 800078e:	e7d0      	b.n	8000732 <low_level_output+0x16>
        pbuf_free(p);
 8000790:	4620      	mov	r0, r4
 8000792:	f00a fcbb 	bl	800b10c <pbuf_free>
      return ERR_IF;
 8000796:	f06f 000b 	mvn.w	r0, #11
}
 800079a:	b00c      	add	sp, #48	; 0x30
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	bf00      	nop
 80007a0:	20001b90 	.word	0x20001b90
 80007a4:	20001bc8 	.word	0x20001bc8

080007a8 <RMII_Thread>:
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 80007a8:	4d10      	ldr	r5, [pc, #64]	; (80007ec <RMII_Thread+0x44>)
      osThreadTerminate(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80007aa:	4c11      	ldr	r4, [pc, #68]	; (80007f0 <RMII_Thread+0x48>)
{
 80007ac:	b508      	push	{r3, lr}
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 80007ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80007b0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80007b4:	b11a      	cbz	r2, 80007be <RMII_Thread+0x16>
      osThreadTerminate(NULL);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f006 f81e 	bl	80067f8 <osThreadTerminate>
 80007bc:	e7f7      	b.n	80007ae <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 80007be:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 80007c2:	2a0a      	cmp	r2, #10
 80007c4:	d90e      	bls.n	80007e4 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80007c6:	6862      	ldr	r2, [r4, #4]
 80007c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007cc:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80007ce:	6862      	ldr	r2, [r4, #4]
 80007d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007d4:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 80007d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80007e2:	e7e4      	b.n	80007ae <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80007e4:	20c8      	movs	r0, #200	; 0xc8
 80007e6:	f006 f80c 	bl	8006802 <osDelay>
 80007ea:	e7e0      	b.n	80007ae <RMII_Thread+0x6>
 80007ec:	20001b90 	.word	0x20001b90
 80007f0:	40013800 	.word	0x40013800

080007f4 <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 80007f4:	f002 bb72 	b.w	8002edc <HAL_GetTick>

080007f8 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <ETH_PHY_IO_Init+0xc>)
{
 80007fa:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80007fc:	f003 fbb8 	bl	8003f70 <HAL_ETH_SetMDIOClockRange>
}
 8000800:	2000      	movs	r0, #0
 8000802:	bd08      	pop	{r3, pc}
 8000804:	20001bc8 	.word	0x20001bc8

08000808 <ETH_PHY_IO_ReadReg>:
{
 8000808:	b508      	push	{r3, lr}
 800080a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800080c:	460a      	mov	r2, r1
 800080e:	4601      	mov	r1, r0
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <ETH_PHY_IO_ReadReg+0x18>)
 8000812:	f003 faed 	bl	8003df0 <HAL_ETH_ReadPHYRegister>
 8000816:	3800      	subs	r0, #0
 8000818:	bf18      	it	ne
 800081a:	2001      	movne	r0, #1
}
 800081c:	4240      	negs	r0, r0
 800081e:	bd08      	pop	{r3, pc}
 8000820:	20001bc8 	.word	0x20001bc8

08000824 <ETH_PHY_IO_WriteReg>:
{
 8000824:	b508      	push	{r3, lr}
 8000826:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000828:	460a      	mov	r2, r1
 800082a:	4601      	mov	r1, r0
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <ETH_PHY_IO_WriteReg+0x18>)
 800082e:	f003 fb07 	bl	8003e40 <HAL_ETH_WritePHYRegister>
 8000832:	3800      	subs	r0, #0
 8000834:	bf18      	it	ne
 8000836:	2001      	movne	r0, #1
}
 8000838:	4240      	negs	r0, r0
 800083a:	bd08      	pop	{r3, pc}
 800083c:	20001bc8 	.word	0x20001bc8

08000840 <pbuf_free_custom>:
{
 8000840:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <pbuf_free_custom+0x28>)
{
 8000844:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000846:	f00a f9ed 	bl	800ac24 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <pbuf_free_custom+0x2c>)
 800084c:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 8000850:	2a01      	cmp	r2, #1
 8000852:	d108      	bne.n	8000866 <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 8000854:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8000856:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    RxAllocStatus = RX_ALLOC_OK;
 800085a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
 800085e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8000862:	f006 b865 	b.w	8006930 <osSemaphoreRelease>
}
 8000866:	bd08      	pop	{r3, pc}
 8000868:	08010560 	.word	0x08010560
 800086c:	20001b90 	.word	0x20001b90

08000870 <ethernetif_input>:
{
 8000870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000874:	4e11      	ldr	r6, [pc, #68]	; (80008bc <ethernetif_input+0x4c>)
{
 8000876:	4604      	mov	r4, r0
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000878:	f106 0738 	add.w	r7, r6, #56	; 0x38
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800087c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000880:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
 8000884:	f006 f82f 	bl	80068e6 <osSemaphoreWait>
 8000888:	2800      	cmp	r0, #0
 800088a:	d1f7      	bne.n	800087c <ethernetif_input+0xc>
  struct pbuf *p = NULL;
 800088c:	f04f 0800 	mov.w	r8, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000890:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
  struct pbuf *p = NULL;
 8000894:	f8cd 8004 	str.w	r8, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8000898:	b91b      	cbnz	r3, 80008a2 <ethernetif_input+0x32>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800089a:	a901      	add	r1, sp, #4
 800089c:	4638      	mov	r0, r7
 800089e:	f003 f994 	bl	8003bca <HAL_ETH_ReadData>
  return p;
 80008a2:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d0e9      	beq.n	800087c <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 80008a8:	6923      	ldr	r3, [r4, #16]
 80008aa:	4621      	mov	r1, r4
 80008ac:	4628      	mov	r0, r5
 80008ae:	4798      	blx	r3
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d0ed      	beq.n	8000890 <ethernetif_input+0x20>
            pbuf_free(p);
 80008b4:	4628      	mov	r0, r5
 80008b6:	f00a fc29 	bl	800b10c <pbuf_free>
 80008ba:	e7e7      	b.n	800088c <ethernetif_input+0x1c>
 80008bc:	20001b90 	.word	0x20001b90

080008c0 <ethernetif_init>:
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008c2:	4604      	mov	r4, r0
{
 80008c4:	b0a7      	sub	sp, #156	; 0x9c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008c6:	b930      	cbnz	r0, 80008d6 <ethernetif_init+0x16>
 80008c8:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <ethernetif_init+0x168>)
 80008ca:	f240 1295 	movw	r2, #405	; 0x195
 80008ce:	4957      	ldr	r1, [pc, #348]	; (8000a2c <ethernetif_init+0x16c>)
 80008d0:	4857      	ldr	r0, [pc, #348]	; (8000a30 <ethernetif_init+0x170>)
 80008d2:	f00e fd6b 	bl	800f3ac <iprintf>
  netif->name[0] = IFNAME0;
 80008d6:	f247 4373 	movw	r3, #29811	; 0x7473
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008da:	4e56      	ldr	r6, [pc, #344]	; (8000a34 <ethernetif_init+0x174>)
  ETH_MACConfigTypeDef MACConf = {0};
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	2100      	movs	r1, #0
  netif->name[0] = IFNAME0;
 80008e0:	8663      	strh	r3, [r4, #50]	; 0x32
  ETH_MACConfigTypeDef MACConf = {0};
 80008e2:	a80d      	add	r0, sp, #52	; 0x34
  netif->output = etharp_output;
 80008e4:	4b54      	ldr	r3, [pc, #336]	; (8000a38 <ethernetif_init+0x178>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80008e6:	af03      	add	r7, sp, #12
  EthHandle.Instance = ETH;
 80008e8:	4d54      	ldr	r5, [pc, #336]	; (8000a3c <ethernetif_init+0x17c>)
  netif->output = etharp_output;
 80008ea:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <ethernetif_init+0x180>)
 80008ee:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 80008f0:	f00e fd54 	bl	800f39c <memset>
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008f4:	8a33      	ldrh	r3, [r6, #16]
 80008f6:	68f0      	ldr	r0, [r6, #12]
 80008f8:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;
 80008fc:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <ethernetif_init+0x184>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008fe:	9001      	str	r0, [sp, #4]
  HAL_ETH_Init(&EthHandle);
 8000900:	f105 0038 	add.w	r0, r5, #56	; 0x38
  EthHandle.Instance = ETH;
 8000904:	63ab      	str	r3, [r5, #56]	; 0x38
  EthHandle.Init.MACAddr = macaddress;
 8000906:	ab01      	add	r3, sp, #4
 8000908:	63eb      	str	r3, [r5, #60]	; 0x3c
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800090a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800090e:	642b      	str	r3, [r5, #64]	; 0x40
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000910:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <ethernetif_init+0x188>)
 8000912:	64ab      	str	r3, [r5, #72]	; 0x48
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <ethernetif_init+0x18c>)
 8000916:	646b      	str	r3, [r5, #68]	; 0x44
  EthHandle.Init.RxBuffLen = ETH_RX_BUF_SIZE;
 8000918:	f44f 63bf 	mov.w	r3, #1528	; 0x5f8
 800091c:	64eb      	str	r3, [r5, #76]	; 0x4c
  HAL_ETH_Init(&EthHandle);
 800091e:	f002 ffa1 	bl	8003864 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000922:	2100      	movs	r1, #0
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <ethernetif_init+0x190>)
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000926:	4630      	mov	r0, r6
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000928:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800092c:	2306      	movs	r3, #6
 800092e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000932:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8000936:	f043 030a 	orr.w	r3, r3, #10
 800093a:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  LWIP_MEMPOOL_INIT(RX_POOL);
 800093e:	f00a f91d 	bl	800ab7c <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000942:	2234      	movs	r2, #52	; 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	1d28      	adds	r0, r5, #4
 8000948:	f00e fd28 	bl	800f39c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800094c:	2321      	movs	r3, #33	; 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 800094e:	2203      	movs	r2, #3
 8000950:	2100      	movs	r1, #0
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000952:	602b      	str	r3, [r5, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000954:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000958:	2001      	movs	r0, #1
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800095a:	616b      	str	r3, [r5, #20]
  RxPktSemaphore = xSemaphoreCreateBinary();
 800095c:	f004 fe61 	bl	8005622 <xQueueGenericCreate>
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000960:	2203      	movs	r2, #3
 8000962:	2100      	movs	r1, #0
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000964:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000968:	2001      	movs	r0, #1
 800096a:	f004 fe5a 	bl	8005622 <xQueueGenericCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800096e:	f106 0c14 	add.w	ip, r6, #20
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000972:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000976:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800097a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800097c:	f8dc 3000 	ldr.w	r3, [ip]
  osThreadCreate (osThread(EthIf), netif);
 8000980:	4621      	mov	r1, r4
 8000982:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000984:	603b      	str	r3, [r7, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000986:	f005 ff1f 	bl	80067c8 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800098a:	4932      	ldr	r1, [pc, #200]	; (8000a54 <ethernetif_init+0x194>)
 800098c:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000990:	f001 fd64 	bl	800245c <LAN8742_RegisterBusIO>
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000994:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000998:	f001 fd74 	bl	8002484 <LAN8742_Init>
 800099c:	b140      	cbz	r0, 80009b0 <ethernetif_init+0xf0>
    netif_set_link_down(netif);
 800099e:	4620      	mov	r0, r4
 80009a0:	f00a fadc 	bl	800af5c <netif_set_link_down>
    netif_set_down(netif);
 80009a4:	4620      	mov	r0, r4
 80009a6:	f00a fa95 	bl	800aed4 <netif_set_down>
}
 80009aa:	2000      	movs	r0, #0
 80009ac:	b027      	add	sp, #156	; 0x9c
 80009ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80009b0:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 80009b4:	f001 fd93 	bl	80024de <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80009b8:	2801      	cmp	r0, #1
 80009ba:	dc15      	bgt.n	80009e8 <ethernetif_init+0x128>
    netif_set_link_down(netif);
 80009bc:	4620      	mov	r0, r4
 80009be:	f00a facd 	bl	800af5c <netif_set_link_down>
    netif_set_down(netif);
 80009c2:	4620      	mov	r0, r4
 80009c4:	f00a fa86 	bl	800aed4 <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 80009c8:	f002 faa0 	bl	8002f0c <HAL_GetREVID>
 80009cc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80009d0:	d1eb      	bne.n	80009aa <ethernetif_init+0xea>
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80009d2:	4d21      	ldr	r5, [pc, #132]	; (8000a58 <ethernetif_init+0x198>)
 80009d4:	ac08      	add	r4, sp, #32
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	682b      	ldr	r3, [r5, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80009dc:	2100      	movs	r1, #0
 80009de:	a808      	add	r0, sp, #32
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80009e0:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80009e2:	f005 fef1 	bl	80067c8 <osThreadCreate>
 80009e6:	e7e0      	b.n	80009aa <ethernetif_init+0xea>
    switch (PHYLinkState)
 80009e8:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80009ea:	a90d      	add	r1, sp, #52	; 0x34
 80009ec:	2802      	cmp	r0, #2
 80009ee:	bf92      	itee	ls
 80009f0:	eb06 0640 	addls.w	r6, r6, r0, lsl #1
    switch (PHYLinkState)
 80009f4:	f44f 4580 	movhi.w	r5, #16384	; 0x4000
 80009f8:	f44f 6700 	movhi.w	r7, #2048	; 0x800
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <ethernetif_init+0x19c>)
 80009fe:	bf9c      	itt	ls
 8000a00:	8d37      	ldrhls	r7, [r6, #40]	; 0x28
 8000a02:	8df5      	ldrhls	r5, [r6, #46]	; 0x2e
 8000a04:	f003 fa41 	bl	8003e8a <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000a08:	a90d      	add	r1, sp, #52	; 0x34
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <ethernetif_init+0x19c>)
    MACConf.Speed = speed;
 8000a0c:	e9cd 5712 	strd	r5, r7, [sp, #72]	; 0x48
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000a10:	f003 faa1 	bl	8003f56 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <ethernetif_init+0x19c>)
 8000a16:	f003 f821 	bl	8003a5c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f00a fa40 	bl	800aea0 <netif_set_up>
    netif_set_link_up(netif);
 8000a20:	4620      	mov	r0, r4
 8000a22:	f00a fa73 	bl	800af0c <netif_set_link_up>
 8000a26:	e7cf      	b.n	80009c8 <ethernetif_init+0x108>
 8000a28:	080144a7 	.word	0x080144a7
 8000a2c:	080150b3 	.word	0x080150b3
 8000a30:	080144fe 	.word	0x080144fe
 8000a34:	08010560 	.word	0x08010560
 8000a38:	080096bd 	.word	0x080096bd
 8000a3c:	20001b90 	.word	0x20001b90
 8000a40:	0800071d 	.word	0x0800071d
 8000a44:	40028000 	.word	0x40028000
 8000a48:	2004c000 	.word	0x2004c000
 8000a4c:	20001ad0 	.word	0x20001ad0
 8000a50:	000205dc 	.word	0x000205dc
 8000a54:	20000000 	.word	0x20000000
 8000a58:	08010594 	.word	0x08010594
 8000a5c:	20001bc8 	.word	0x20001bc8

08000a60 <sys_now>:
  return HAL_GetTick();
 8000a60:	f002 ba3c 	b.w	8002edc <HAL_GetTick>

08000a64 <HAL_ETH_MspInit>:
{
 8000a64:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4c2e      	ldr	r4, [pc, #184]	; (8000b20 <HAL_ETH_MspInit+0xbc>)
{
 8000a68:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a6a:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a6c:	482d      	ldr	r0, [pc, #180]	; (8000b24 <HAL_ETH_MspInit+0xc0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a70:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6323      	str	r3, [r4, #48]	; 0x30
 8000a78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6323      	str	r3, [r4, #48]	; 0x30
 8000a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	9303      	str	r3, [sp, #12]
 8000aa4:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000ab4:	2386      	movs	r3, #134	; 0x86
 8000ab6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ab8:	f003 fa8a 	bl	8003fd0 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000abc:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000abe:	a907      	add	r1, sp, #28
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <HAL_ETH_MspInit+0xc4>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000ac2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ac4:	f003 fa84 	bl	8003fd0 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000ac8:	f646 0304 	movw	r3, #26628	; 0x6804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000acc:	a907      	add	r1, sp, #28
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000ad0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ad2:	f003 fa7d 	bl	8003fd0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000ad6:	462a      	mov	r2, r5
 8000ad8:	2107      	movs	r1, #7
 8000ada:	203d      	movs	r0, #61	; 0x3d
 8000adc:	f002 fa2e 	bl	8002f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000ae0:	203d      	movs	r0, #61	; 0x3d
 8000ae2:	f002 fa5d 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aec:	6323      	str	r3, [r4, #48]	; 0x30
 8000aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	9304      	str	r3, [sp, #16]
 8000af6:	9b04      	ldr	r3, [sp, #16]
 8000af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000afe:	6323      	str	r3, [r4, #48]	; 0x30
 8000b00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	9b05      	ldr	r3, [sp, #20]
 8000b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b10:	6323      	str	r3, [r4, #48]	; 0x30
 8000b12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b18:	9306      	str	r3, [sp, #24]
 8000b1a:	9b06      	ldr	r3, [sp, #24]
}
 8000b1c:	b00d      	add	sp, #52	; 0x34
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40021800 	.word	0x40021800

08000b30 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_ETH_RxCpltCallback+0xc>)
 8000b32:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8000b36:	f005 befb 	b.w	8006930 <osSemaphoreRelease>
 8000b3a:	bf00      	nop
 8000b3c:	20001b90 	.word	0x20001b90

08000b40 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_ETH_TxCpltCallback+0xc>)
 8000b42:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8000b46:	f005 bef3 	b.w	8006930 <osSemaphoreRelease>
 8000b4a:	bf00      	nop
 8000b4c:	20001b90 	.word	0x20001b90

08000b50 <HAL_ETH_ErrorCallback>:
{
 8000b50:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8000b52:	f003 fa3a 	bl	8003fca <HAL_ETH_GetDMAError>
 8000b56:	0603      	lsls	r3, r0, #24
 8000b58:	d506      	bpl.n	8000b68 <HAL_ETH_ErrorCallback+0x18>
     osSemaphoreRelease(RxPktSemaphore);
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_ETH_ErrorCallback+0x1c>)
 8000b5c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8000b64:	f005 bee4 	b.w	8006930 <osSemaphoreRelease>
}
 8000b68:	bd08      	pop	{r3, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001b90 	.word	0x20001b90

08000b70 <ethernet_link_thread>:
{
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b74:	2500      	movs	r5, #0
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b76:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000c30 <ethernet_link_thread+0xc0>
{
 8000b7a:	b09a      	sub	sp, #104	; 0x68
        netifapi_netif_set_up(netif);
 8000b7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8000c34 <ethernet_link_thread+0xc4>
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b80:	46a8      	mov	r8, r5
 8000b82:	462f      	mov	r7, r5
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000b84:	f1a9 06bc 	sub.w	r6, r9, #188	; 0xbc
{
 8000b88:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8000b8a:	2264      	movs	r2, #100	; 0x64
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	a801      	add	r0, sp, #4
 8000b90:	f00e fc04 	bl	800f39c <memset>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b94:	4648      	mov	r0, r9
 8000b96:	f001 fca2 	bl	80024de <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b9a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b9e:	4603      	mov	r3, r0
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000ba0:	0751      	lsls	r1, r2, #29
 8000ba2:	d514      	bpl.n	8000bce <ethernet_link_thread+0x5e>
 8000ba4:	2801      	cmp	r0, #1
 8000ba6:	dc10      	bgt.n	8000bca <ethernet_link_thread+0x5a>
      HAL_ETH_Stop_IT(&EthHandle);
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f002 ff97 	bl	8003adc <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	491b      	ldr	r1, [pc, #108]	; (8000c20 <ethernet_link_thread+0xb0>)
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f007 f8b8 	bl	8007d28 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	491a      	ldr	r1, [pc, #104]	; (8000c24 <ethernet_link_thread+0xb4>)
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f007 f8b3 	bl	8007d28 <netifapi_netif_common>
    osDelay(100);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f005 fe1d 	bl	8006802 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000bc8:	e7e4      	b.n	8000b94 <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000bca:	0752      	lsls	r2, r2, #29
 8000bcc:	d4f9      	bmi.n	8000bc2 <ethernet_link_thread+0x52>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	ddf7      	ble.n	8000bc2 <ethernet_link_thread+0x52>
      switch (PHYLinkState)
 8000bd2:	3b02      	subs	r3, #2
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d81f      	bhi.n	8000c18 <ethernet_link_thread+0xa8>
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <ethernet_link_thread+0xb8>)
 8000bda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bde:	f8b3 8048 	ldrh.w	r8, [r3, #72]	; 0x48
 8000be2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000be6:	a901      	add	r1, sp, #4
 8000be8:	4630      	mov	r0, r6
 8000bea:	f003 f94e 	bl	8003e8a <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000bee:	a901      	add	r1, sp, #4
 8000bf0:	4630      	mov	r0, r6
        netifapi_netif_set_link_up(netif);
 8000bf2:	2701      	movs	r7, #1
        MACConf.Speed = speed;
 8000bf4:	e9cd 8506 	strd	r8, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000bf8:	f003 f9ad 	bl	8003f56 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f002 ff2d 	bl	8003a5c <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 8000c02:	2200      	movs	r2, #0
 8000c04:	4651      	mov	r1, sl
 8000c06:	4620      	mov	r0, r4
 8000c08:	f007 f88e 	bl	8007d28 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4907      	ldr	r1, [pc, #28]	; (8000c2c <ethernet_link_thread+0xbc>)
 8000c10:	4620      	mov	r0, r4
 8000c12:	f007 f889 	bl	8007d28 <netifapi_netif_common>
 8000c16:	e7d4      	b.n	8000bc2 <ethernet_link_thread+0x52>
      if(linkchanged)
 8000c18:	2f00      	cmp	r7, #0
 8000c1a:	d0d2      	beq.n	8000bc2 <ethernet_link_thread+0x52>
 8000c1c:	e7e3      	b.n	8000be6 <ethernet_link_thread+0x76>
 8000c1e:	bf00      	nop
 8000c20:	0800aed5 	.word	0x0800aed5
 8000c24:	0800af5d 	.word	0x0800af5d
 8000c28:	08010560 	.word	0x08010560
 8000c2c:	0800af0d 	.word	0x0800af0d
 8000c30:	20001c84 	.word	0x20001c84
 8000c34:	0800aea1 	.word	0x0800aea1

08000c38 <HAL_ETH_RxAllocateCallback>:
{
 8000c38:	b513      	push	{r0, r1, r4, lr}
 8000c3a:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <HAL_ETH_RxAllocateCallback+0x3c>)
 8000c3e:	f009 ffbf 	bl	800abc0 <memp_malloc_pool>
  if (p)
 8000c42:	4603      	mov	r3, r0
 8000c44:	b178      	cbz	r0, 8000c66 <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000c46:	f100 0214 	add.w	r2, r0, #20
    p->custom_free_function = pbuf_free_custom;
 8000c4a:	490b      	ldr	r1, [pc, #44]	; (8000c78 <HAL_ETH_RxAllocateCallback+0x40>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000c4c:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8000c4e:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8000c50:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
 8000c54:	e9cd 2100 	strd	r2, r1, [sp]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2241      	movs	r2, #65	; 0x41
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	f00a fa03 	bl	800b068 <pbuf_alloced_custom>
}
 8000c62:	b002      	add	sp, #8
 8000c64:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_ETH_RxAllocateCallback+0x44>)
 8000c68:	2101      	movs	r1, #1
    *buff = NULL;
 8000c6a:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8000c6c:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
}
 8000c70:	e7f7      	b.n	8000c62 <HAL_ETH_RxAllocateCallback+0x2a>
 8000c72:	bf00      	nop
 8000c74:	08010560 	.word	0x08010560
 8000c78:	08000841 	.word	0x08000841
 8000c7c:	20001b90 	.word	0x20001b90

08000c80 <HAL_ETH_RxLinkCallback>:
{
 8000c80:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 8000c82:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8000c84:	f1a2 0414 	sub.w	r4, r2, #20
  p->len = Length;
 8000c88:	f822 3c0a 	strh.w	r3, [r2, #-10]
  p->next = NULL;
 8000c8c:	f842 5c14 	str.w	r5, [r2, #-20]
  p->tot_len = 0;
 8000c90:	f822 5c0c 	strh.w	r5, [r2, #-12]
  if (!*ppStart)
 8000c94:	6802      	ldr	r2, [r0, #0]
 8000c96:	b922      	cbnz	r2, 8000ca2 <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 8000c98:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 8000c9a:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 8000c9c:	6802      	ldr	r2, [r0, #0]
 8000c9e:	b91a      	cbnz	r2, 8000ca8 <HAL_ETH_RxLinkCallback+0x28>
}
 8000ca0:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8000ca2:	680a      	ldr	r2, [r1, #0]
 8000ca4:	6014      	str	r4, [r2, #0]
 8000ca6:	e7f8      	b.n	8000c9a <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8000ca8:	8911      	ldrh	r1, [r2, #8]
 8000caa:	4419      	add	r1, r3
 8000cac:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	e7f5      	b.n	8000c9e <HAL_ETH_RxLinkCallback+0x1e>

08000cb2 <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 8000cb2:	f00a ba2b 	b.w	800b10c <pbuf_free>

08000cb6 <print_rectangle>:
			BSP_LCD_DrawPixel(j, i, color);
		}
	}
}

void print_rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint32_t color){
 8000cb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cba:	4605      	mov	r5, r0
	for(uint32_t i = y; i < y+h; i++){
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	18cf      	adds	r7, r1, r3
		for(uint32_t j = x; j < x+w; j++){
 8000cc0:	eb00 0802 	add.w	r8, r0, r2
	for(uint32_t i = y; i < y+h; i++){
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d80b      	bhi.n	8000ce0 <print_rectangle+0x2a>
			//framebuf[i*SCRWIDTH+j] = color;
			BSP_LCD_DrawPixel(j, i, color);
		}
	}
}
 8000cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			BSP_LCD_DrawPixel(j, i, color);
 8000ccc:	b2b0      	uxth	r0, r6
		for(uint32_t j = x; j < x+w; j++){
 8000cce:	3601      	adds	r6, #1
			BSP_LCD_DrawPixel(j, i, color);
 8000cd0:	9a08      	ldr	r2, [sp, #32]
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	f001 fd30 	bl	8002738 <BSP_LCD_DrawPixel>
		for(uint32_t j = x; j < x+w; j++){
 8000cd8:	45b0      	cmp	r8, r6
 8000cda:	d8f7      	bhi.n	8000ccc <print_rectangle+0x16>
	for(uint32_t i = y; i < y+h; i++){
 8000cdc:	3401      	adds	r4, #1
 8000cde:	e7f1      	b.n	8000cc4 <print_rectangle+0xe>
		for(uint32_t j = x; j < x+w; j++){
 8000ce0:	462e      	mov	r6, r5
			BSP_LCD_DrawPixel(j, i, color);
 8000ce2:	fa1f f984 	uxth.w	r9, r4
 8000ce6:	e7f7      	b.n	8000cd8 <print_rectangle+0x22>

08000ce8 <print_rectangle_empty>:

void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint32_t color){
 8000ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint32_t i = y; i < y+h; i++){
 8000cec:	18cf      	adds	r7, r1, r3
void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint32_t color){
 8000cee:	4605      	mov	r5, r0
 8000cf0:	460e      	mov	r6, r1
 8000cf2:	4690      	mov	r8, r2
 8000cf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	for(uint32_t i = y; i < y+h; i++){
 8000cf8:	460c      	mov	r4, r1
		for(uint32_t j = x; j < x+w; j++){
			if(i != y && i != y+h-1){
 8000cfa:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
	for(uint32_t i = y; i < y+h; i++){
 8000cfe:	42a7      	cmp	r7, r4
 8000d00:	d824      	bhi.n	8000d4c <print_rectangle_empty+0x64>
			}
			//framebuf[i*SCRWIDTH+j] = color;
			BSP_LCD_DrawPixel(j, i, color);
		}
	}
}
 8000d02:	b003      	add	sp, #12
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			BSP_LCD_DrawPixel(j, i, color);
 8000d08:	fa1f f089 	uxth.w	r0, r9
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	9301      	str	r3, [sp, #4]
		for(uint32_t j = x; j < x+w; j++){
 8000d10:	f109 0901 	add.w	r9, r9, #1
			BSP_LCD_DrawPixel(j, i, color);
 8000d14:	9100      	str	r1, [sp, #0]
 8000d16:	f001 fd0f 	bl	8002738 <BSP_LCD_DrawPixel>
		for(uint32_t j = x; j < x+w; j++){
 8000d1a:	e9dd 1300 	ldrd	r1, r3, [sp]
 8000d1e:	454b      	cmp	r3, r9
 8000d20:	d912      	bls.n	8000d48 <print_rectangle_empty+0x60>
			if(i != y && i != y+h-1){
 8000d22:	42b4      	cmp	r4, r6
 8000d24:	d0f0      	beq.n	8000d08 <print_rectangle_empty+0x20>
 8000d26:	45a3      	cmp	fp, r4
 8000d28:	d0ee      	beq.n	8000d08 <print_rectangle_empty+0x20>
				BSP_LCD_DrawPixel(x, i, color);
 8000d2a:	fa1f f985 	uxth.w	r9, r5
 8000d2e:	4652      	mov	r2, sl
 8000d30:	9100      	str	r1, [sp, #0]
 8000d32:	4648      	mov	r0, r9
 8000d34:	f001 fd00 	bl	8002738 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(x+w-1, i, color);
 8000d38:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d3c:	4652      	mov	r2, sl
 8000d3e:	9900      	ldr	r1, [sp, #0]
 8000d40:	4448      	add	r0, r9
 8000d42:	b280      	uxth	r0, r0
 8000d44:	f001 fcf8 	bl	8002738 <BSP_LCD_DrawPixel>
	for(uint32_t i = y; i < y+h; i++){
 8000d48:	3401      	adds	r4, #1
 8000d4a:	e7d8      	b.n	8000cfe <print_rectangle_empty+0x16>
		for(uint32_t j = x; j < x+w; j++){
 8000d4c:	46a9      	mov	r9, r5
 8000d4e:	eb05 0308 	add.w	r3, r5, r8
 8000d52:	b2a1      	uxth	r1, r4
 8000d54:	e7e3      	b.n	8000d1e <print_rectangle_empty+0x36>
	...

08000d58 <print_char>:


void print_char(uint32_t x, uint32_t y, uint8_t index, uint32_t color){
 8000d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d60:	4c26      	ldr	r4, [pc, #152]	; (8000dfc <print_char+0xa4>)
void print_char(uint32_t x, uint32_t y, uint8_t index, uint32_t color){
 8000d62:	4605      	mov	r5, r0
 8000d64:	460e      	mov	r6, r1
 8000d66:	4699      	mov	r9, r3
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000d68:	eb04 04c2 	add.w	r4, r4, r2, lsl #3

	uint32_t xiter = x;
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	f101 0a08 	add.w	sl, r1, #8
 8000d72:	2f0c      	cmp	r7, #12
 8000d74:	f104 080c 	add.w	r8, r4, #12
 8000d78:	d107      	bne.n	8000d8a <print_char+0x32>
 8000d7a:	3418      	adds	r4, #24
 8000d7c:	f106 0b10 	add.w	fp, r6, #16
			yiter++;
		}
		xiter++;
	}
	xiter = x;
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000d80:	4544      	cmp	r4, r8
 8000d82:	d11e      	bne.n	8000dc2 <print_char+0x6a>
			yiter++;
		}
		xiter++;
	}

}
 8000d84:	b003      	add	sp, #12
 8000d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8a:	1978      	adds	r0, r7, r5
		uint32_t yiter = y;
 8000d8c:	46b3      	mov	fp, r6
		uint8_t mask = 0b00000001;
 8000d8e:	f04f 0801 	mov.w	r8, #1
 8000d92:	b280      	uxth	r0, r0
			if(*fptr & mask){
 8000d94:	5de3      	ldrb	r3, [r4, r7]
 8000d96:	fa1f f18b 	uxth.w	r1, fp
			yiter++;
 8000d9a:	f10b 0b01 	add.w	fp, fp, #1
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000d9e:	9001      	str	r0, [sp, #4]
			if(*fptr & mask){
 8000da0:	ea18 0f03 	tst.w	r8, r3
			mask = mask << 1;
 8000da4:	ea4f 0848 	mov.w	r8, r8, lsl #1
				BSP_LCD_DrawPixel(xiter, yiter, color);
 8000da8:	bf14      	ite	ne
 8000daa:	464a      	movne	r2, r9
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000dac:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8000db0:	f001 fcc2 	bl	8002738 <BSP_LCD_DrawPixel>
		for(uint32_t i = 0; i < 8; i++){
 8000db4:	45d3      	cmp	fp, sl
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000db6:	9801      	ldr	r0, [sp, #4]
			mask = mask << 1;
 8000db8:	fa5f f888 	uxtb.w	r8, r8
		for(uint32_t i = 0; i < 8; i++){
 8000dbc:	d1ea      	bne.n	8000d94 <print_char+0x3c>
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000dbe:	3701      	adds	r7, #1
 8000dc0:	e7d7      	b.n	8000d72 <print_char+0x1a>
		uint32_t yiter = y+8;
 8000dc2:	f106 0a08 	add.w	sl, r6, #8
		uint8_t mask = 0b00000001;
 8000dc6:	2701      	movs	r7, #1
 8000dc8:	b2a8      	uxth	r0, r5
			if(*fptr & mask){
 8000dca:	f898 3000 	ldrb.w	r3, [r8]
 8000dce:	fa1f f18a 	uxth.w	r1, sl
			yiter++;
 8000dd2:	f10a 0a01 	add.w	sl, sl, #1
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000dd6:	9001      	str	r0, [sp, #4]
			if(*fptr & mask){
 8000dd8:	421f      	tst	r7, r3
			mask = mask << 1;
 8000dda:	ea4f 0747 	mov.w	r7, r7, lsl #1
				BSP_LCD_DrawPixel(xiter, yiter, color);
 8000dde:	bf14      	ite	ne
 8000de0:	464a      	movne	r2, r9
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000de2:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8000de6:	f001 fca7 	bl	8002738 <BSP_LCD_DrawPixel>
		for(uint32_t i = 0; i < 8; i++){
 8000dea:	45d3      	cmp	fp, sl
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000dec:	9801      	ldr	r0, [sp, #4]
			mask = mask << 1;
 8000dee:	b2ff      	uxtb	r7, r7
		for(uint32_t i = 0; i < 8; i++){
 8000df0:	d1eb      	bne.n	8000dca <print_char+0x72>
		xiter++;
 8000df2:	3501      	adds	r5, #1
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000df4:	f108 0801 	add.w	r8, r8, #1
 8000df8:	e7c2      	b.n	8000d80 <print_char+0x28>
 8000dfa:	bf00      	nop
 8000dfc:	20000224 	.word	0x20000224

08000e00 <print_char_scaled>:


void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e04:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	uint32_t xiter = x;
 8000e08:	4606      	mov	r6, r0
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e0a:	ed2d 8b02 	vpush	{d8}
 8000e0e:	ee08 3a10 	vmov	s16, r3
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e12:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <print_char_scaled+0x168>)
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e14:	b089      	sub	sp, #36	; 0x24
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8000e1c:	f103 020c 	add.w	r2, r3, #12
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000e20:	461f      	mov	r7, r3
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e22:	9001      	str	r0, [sp, #4]
 8000e24:	9104      	str	r1, [sp, #16]
 8000e26:	9202      	str	r2, [sp, #8]
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000e28:	9a02      	ldr	r2, [sp, #8]
 8000e2a:	4297      	cmp	r7, r2
 8000e2c:	d10d      	bne.n	8000e4a <print_char_scaled+0x4a>
		}
		xiter+=scale;
	}
	xiter = x;
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
		uint32_t yiter = y+8*scale;
 8000e2e:	9a04      	ldr	r2, [sp, #16]
 8000e30:	3318      	adds	r3, #24
 8000e32:	eb02 0bc4 	add.w	fp, r2, r4, lsl #3
 8000e36:	9303      	str	r3, [sp, #12]
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d14d      	bne.n	8000edc <print_char_scaled+0xdc>
			mask = mask << 1;
			yiter+=scale;
		}
		xiter+=scale;
	}
}
 8000e40:	b009      	add	sp, #36	; 0x24
 8000e42:	ecbd 8b02 	vpop	{d8}
 8000e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e4a:	2208      	movs	r2, #8
		uint32_t yiter = y;
 8000e4c:	9d04      	ldr	r5, [sp, #16]
		uint8_t mask = 0b00000001;
 8000e4e:	f04f 0b01 	mov.w	fp, #1
 8000e52:	9203      	str	r2, [sp, #12]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e54:	1932      	adds	r2, r6, r4
 8000e56:	9205      	str	r2, [sp, #20]
			if(*fptr & mask){
 8000e58:	783a      	ldrb	r2, [r7, #0]
 8000e5a:	46a8      	mov	r8, r5
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000e5c:	eb04 0a05 	add.w	sl, r4, r5
			if(*fptr & mask){
 8000e60:	ea1b 0f02 	tst.w	fp, r2
 8000e64:	d116      	bne.n	8000e94 <print_char_scaled+0x94>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000e66:	45d0      	cmp	r8, sl
 8000e68:	d216      	bcs.n	8000e98 <print_char_scaled+0x98>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e6a:	46b1      	mov	r9, r6
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000e6c:	fa1f f188 	uxth.w	r1, r8
 8000e70:	e02e      	b.n	8000ed0 <print_char_scaled+0xd0>
						BSP_LCD_DrawPixel(ix, iy, color);
 8000e72:	fa1f f089 	uxth.w	r0, r9
 8000e76:	ee18 2a10 	vmov	r2, s16
 8000e7a:	9307      	str	r3, [sp, #28]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e7c:	f109 0901 	add.w	r9, r9, #1
						BSP_LCD_DrawPixel(ix, iy, color);
 8000e80:	9106      	str	r1, [sp, #24]
 8000e82:	f001 fc59 	bl	8002738 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e86:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8000e8a:	9a05      	ldr	r2, [sp, #20]
 8000e8c:	4591      	cmp	r9, r2
 8000e8e:	d3f0      	bcc.n	8000e72 <print_char_scaled+0x72>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000e90:	f108 0801 	add.w	r8, r8, #1
 8000e94:	45d0      	cmp	r8, sl
 8000e96:	d30b      	bcc.n	8000eb0 <print_char_scaled+0xb0>
		for(uint32_t i = 0; i < 8; i++){
 8000e98:	9a03      	ldr	r2, [sp, #12]
			mask = mask << 1;
 8000e9a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
			yiter+=scale;
 8000e9e:	4425      	add	r5, r4
		for(uint32_t i = 0; i < 8; i++){
 8000ea0:	3a01      	subs	r2, #1
			mask = mask << 1;
 8000ea2:	fa5f fb8b 	uxtb.w	fp, fp
		for(uint32_t i = 0; i < 8; i++){
 8000ea6:	9203      	str	r2, [sp, #12]
 8000ea8:	d1d6      	bne.n	8000e58 <print_char_scaled+0x58>
		xiter+=scale;
 8000eaa:	4426      	add	r6, r4
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000eac:	3701      	adds	r7, #1
 8000eae:	e7bb      	b.n	8000e28 <print_char_scaled+0x28>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000eb0:	46b1      	mov	r9, r6
						BSP_LCD_DrawPixel(ix, iy, color);
 8000eb2:	fa1f f188 	uxth.w	r1, r8
 8000eb6:	e7e8      	b.n	8000e8a <print_char_scaled+0x8a>
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000eb8:	fa1f f089 	uxth.w	r0, r9
 8000ebc:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ec0:	9307      	str	r3, [sp, #28]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000ec2:	f109 0901 	add.w	r9, r9, #1
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000ec6:	9106      	str	r1, [sp, #24]
 8000ec8:	f001 fc36 	bl	8002738 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000ecc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8000ed0:	9a05      	ldr	r2, [sp, #20]
 8000ed2:	4591      	cmp	r9, r2
 8000ed4:	d3f0      	bcc.n	8000eb8 <print_char_scaled+0xb8>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ed6:	f108 0801 	add.w	r8, r8, #1
 8000eda:	e7c4      	b.n	8000e66 <print_char_scaled+0x66>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000edc:	9b01      	ldr	r3, [sp, #4]
		uint32_t yiter = y+8*scale;
 8000ede:	465d      	mov	r5, fp
 8000ee0:	f04f 0908 	mov.w	r9, #8
		uint8_t mask = 0b00000001;
 8000ee4:	2601      	movs	r6, #1
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000ee6:	eb03 0a04 	add.w	sl, r3, r4
			if(*fptr & mask){
 8000eea:	9b02      	ldr	r3, [sp, #8]
 8000eec:	462f      	mov	r7, r5
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	421e      	tst	r6, r3
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ef2:	eb04 0305 	add.w	r3, r4, r5
			if(*fptr & mask){
 8000ef6:	d114      	bne.n	8000f22 <print_char_scaled+0x122>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ef8:	42bb      	cmp	r3, r7
 8000efa:	d914      	bls.n	8000f26 <print_char_scaled+0x126>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000efc:	f8dd 8004 	ldr.w	r8, [sp, #4]
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000f00:	b2b9      	uxth	r1, r7
 8000f02:	e02d      	b.n	8000f60 <print_char_scaled+0x160>
						BSP_LCD_DrawPixel(ix, iy, color);
 8000f04:	fa1f f088 	uxth.w	r0, r8
 8000f08:	ee18 2a10 	vmov	r2, s16
 8000f0c:	9305      	str	r3, [sp, #20]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f0e:	f108 0801 	add.w	r8, r8, #1
						BSP_LCD_DrawPixel(ix, iy, color);
 8000f12:	9104      	str	r1, [sp, #16]
 8000f14:	f001 fc10 	bl	8002738 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f18:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8000f1c:	45d0      	cmp	r8, sl
 8000f1e:	d3f1      	bcc.n	8000f04 <print_char_scaled+0x104>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000f20:	3701      	adds	r7, #1
 8000f22:	429f      	cmp	r7, r3
 8000f24:	d30c      	bcc.n	8000f40 <print_char_scaled+0x140>
			mask = mask << 1;
 8000f26:	0076      	lsls	r6, r6, #1
		for(uint32_t i = 0; i < 8; i++){
 8000f28:	f1b9 0901 	subs.w	r9, r9, #1
			yiter+=scale;
 8000f2c:	4425      	add	r5, r4
			mask = mask << 1;
 8000f2e:	b2f6      	uxtb	r6, r6
		for(uint32_t i = 0; i < 8; i++){
 8000f30:	d1db      	bne.n	8000eea <print_char_scaled+0xea>
		xiter+=scale;
 8000f32:	9b01      	ldr	r3, [sp, #4]
 8000f34:	4423      	add	r3, r4
 8000f36:	9301      	str	r3, [sp, #4]
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000f38:	9b02      	ldr	r3, [sp, #8]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	e77b      	b.n	8000e38 <print_char_scaled+0x38>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f40:	f8dd 8004 	ldr.w	r8, [sp, #4]
						BSP_LCD_DrawPixel(ix, iy, color);
 8000f44:	b2b9      	uxth	r1, r7
 8000f46:	e7e9      	b.n	8000f1c <print_char_scaled+0x11c>
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000f48:	fa1f f088 	uxth.w	r0, r8
 8000f4c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f50:	9305      	str	r3, [sp, #20]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f52:	f108 0801 	add.w	r8, r8, #1
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000f56:	9104      	str	r1, [sp, #16]
 8000f58:	f001 fbee 	bl	8002738 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f5c:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8000f60:	45c2      	cmp	sl, r8
 8000f62:	d8f1      	bhi.n	8000f48 <print_char_scaled+0x148>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000f64:	3701      	adds	r7, #1
 8000f66:	e7c7      	b.n	8000ef8 <print_char_scaled+0xf8>
 8000f68:	20000224 	.word	0x20000224

08000f6c <print_char_scaled_y>:


void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f74:	4698      	mov	r8, r3
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <print_char_scaled_y+0xf8>)
void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f78:	b087      	sub	sp, #28
 8000f7a:	4604      	mov	r4, r0
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f7c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f80:	9103      	str	r1, [sp, #12]

	uint32_t xiter = x;
 8000f82:	9001      	str	r0, [sp, #4]
 8000f84:	f10b 060c 	add.w	r6, fp, #12
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000f88:	46d9      	mov	r9, fp
 8000f8a:	45b1      	cmp	r9, r6
 8000f8c:	d10b      	bne.n	8000fa6 <print_char_scaled_y+0x3a>
		}
		xiter++;
	}
	xiter = x;
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
		uint32_t yiter = y+8*scale;
 8000f8e:	9b03      	ldr	r3, [sp, #12]
 8000f90:	f10b 0b18 	add.w	fp, fp, #24
 8000f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f9a:	9301      	str	r3, [sp, #4]
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000f9c:	455e      	cmp	r6, fp
 8000f9e:	d139      	bne.n	8001014 <print_char_scaled_y+0xa8>
			mask = mask << 1;
			yiter+=scale;
		}
		xiter++;
	}
}
 8000fa0:	b007      	add	sp, #28
 8000fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa6:	2308      	movs	r3, #8
		uint32_t yiter = y;
 8000fa8:	9d03      	ldr	r5, [sp, #12]
		uint8_t mask = 0b00000001;
 8000faa:	2701      	movs	r7, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 8000fac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8000fb0:	9302      	str	r3, [sp, #8]
			if(*fptr & mask){
 8000fb2:	f899 3000 	ldrb.w	r3, [r9]
 8000fb6:	46aa      	mov	sl, r5
 8000fb8:	421f      	tst	r7, r3
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000fbc:	442b      	add	r3, r5
			if(*fptr & mask){
 8000fbe:	d119      	bne.n	8000ff4 <print_char_scaled_y+0x88>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fc0:	459a      	cmp	sl, r3
 8000fc2:	d219      	bcs.n	8000ff8 <print_char_scaled_y+0x8c>
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 8000fc4:	fa1f f18a 	uxth.w	r1, sl
 8000fc8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000fcc:	9305      	str	r3, [sp, #20]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fce:	f10a 0a01 	add.w	sl, sl, #1
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 8000fd2:	9004      	str	r0, [sp, #16]
 8000fd4:	f001 fbb0 	bl	8002738 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fd8:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8000fdc:	e7f0      	b.n	8000fc0 <print_char_scaled_y+0x54>
					BSP_LCD_DrawPixel(xiter, iy, color);
 8000fde:	fa1f f18a 	uxth.w	r1, sl
 8000fe2:	4642      	mov	r2, r8
 8000fe4:	9305      	str	r3, [sp, #20]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fe6:	f10a 0a01 	add.w	sl, sl, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 8000fea:	9004      	str	r0, [sp, #16]
 8000fec:	f001 fba4 	bl	8002738 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ff0:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8000ff4:	459a      	cmp	sl, r3
 8000ff6:	d3f2      	bcc.n	8000fde <print_char_scaled_y+0x72>
			yiter+=scale;
 8000ff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
			mask = mask << 1;
 8000ffa:	007f      	lsls	r7, r7, #1
			yiter+=scale;
 8000ffc:	441d      	add	r5, r3
		for(uint32_t i = 0; i < 8; i++){
 8000ffe:	9b02      	ldr	r3, [sp, #8]
			mask = mask << 1;
 8001000:	b2ff      	uxtb	r7, r7
		for(uint32_t i = 0; i < 8; i++){
 8001002:	3b01      	subs	r3, #1
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	d1d4      	bne.n	8000fb2 <print_char_scaled_y+0x46>
		xiter++;
 8001008:	9b01      	ldr	r3, [sp, #4]
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 800100a:	f109 0901 	add.w	r9, r9, #1
		xiter++;
 800100e:	3301      	adds	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001012:	e7ba      	b.n	8000f8a <print_char_scaled_y+0x1e>
		uint32_t yiter = y+8*scale;
 8001014:	9d01      	ldr	r5, [sp, #4]
 8001016:	f04f 0908 	mov.w	r9, #8
		uint8_t mask = 0b00000001;
 800101a:	2701      	movs	r7, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 800101c:	b2a0      	uxth	r0, r4
			if(*fptr & mask){
 800101e:	7833      	ldrb	r3, [r6, #0]
 8001020:	421f      	tst	r7, r3
 8001022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001024:	eb03 0a05 	add.w	sl, r3, r5
 8001028:	d111      	bne.n	800104e <print_char_scaled_y+0xe2>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800102a:	4555      	cmp	r5, sl
 800102c:	d211      	bcs.n	8001052 <print_char_scaled_y+0xe6>
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 800102e:	b2a9      	uxth	r1, r5
 8001030:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001034:	9002      	str	r0, [sp, #8]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001036:	3501      	adds	r5, #1
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 8001038:	f001 fb7e 	bl	8002738 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800103c:	9802      	ldr	r0, [sp, #8]
 800103e:	e7f4      	b.n	800102a <print_char_scaled_y+0xbe>
					BSP_LCD_DrawPixel(xiter, iy, color);
 8001040:	b2a9      	uxth	r1, r5
 8001042:	4642      	mov	r2, r8
 8001044:	9002      	str	r0, [sp, #8]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001046:	3501      	adds	r5, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 8001048:	f001 fb76 	bl	8002738 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800104c:	9802      	ldr	r0, [sp, #8]
 800104e:	4555      	cmp	r5, sl
 8001050:	d3f6      	bcc.n	8001040 <print_char_scaled_y+0xd4>
			mask = mask << 1;
 8001052:	007f      	lsls	r7, r7, #1
		for(uint32_t i = 0; i < 8; i++){
 8001054:	f1b9 0901 	subs.w	r9, r9, #1
			yiter+=scale;
 8001058:	4655      	mov	r5, sl
			mask = mask << 1;
 800105a:	b2ff      	uxtb	r7, r7
		for(uint32_t i = 0; i < 8; i++){
 800105c:	d1df      	bne.n	800101e <print_char_scaled_y+0xb2>
		xiter++;
 800105e:	3401      	adds	r4, #1
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001060:	3601      	adds	r6, #1
 8001062:	e79b      	b.n	8000f9c <print_char_scaled_y+0x30>
 8001064:	20000224 	.word	0x20000224

08001068 <print_string>:
// . . . . .     . . . . . .    . . . . .
// 0 0 0 0 0     1 1 1 1 0 0    1 0 1 1 1    
// ARGB - 0xFF00FFFF


void print_string(uint32_t x, uint32_t y, char* string, uint32_t color){
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106c:	4614      	mov	r4, r2
 800106e:	4605      	mov	r5, r0
	uint32_t len = strlen(string);
 8001070:	4610      	mov	r0, r2
void print_string(uint32_t x, uint32_t y, char* string, uint32_t color){
 8001072:	460f      	mov	r7, r1
 8001074:	4698      	mov	r8, r3
	uint32_t len = strlen(string);
 8001076:	f7ff f8cb 	bl	8000210 <strlen>
	for(char* i = string; i < string+len; i++){
 800107a:	1826      	adds	r6, r4, r0
 800107c:	42b4      	cmp	r4, r6
 800107e:	d301      	bcc.n	8001084 <print_string+0x1c>
		print_char(x, y, *i, color);
		x += 12;
		//y += 16;
	}
}
 8001080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		print_char(x, y, *i, color);
 8001084:	4628      	mov	r0, r5
 8001086:	4643      	mov	r3, r8
 8001088:	f814 2b01 	ldrb.w	r2, [r4], #1
 800108c:	4639      	mov	r1, r7
		x += 12;
 800108e:	350c      	adds	r5, #12
		print_char(x, y, *i, color);
 8001090:	f7ff fe62 	bl	8000d58 <print_char>
	for(char* i = string; i < string+len; i++){
 8001094:	e7f2      	b.n	800107c <print_string+0x14>

08001096 <print_string_scaled>:

void print_string_scaled(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 8001096:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800109a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800109e:	4614      	mov	r4, r2
	uint32_t len = strlen(string);
	for(char* i = string; i < string+len; i++){
		print_char_scaled(x, y, *i, color, scale);
		x += 12*scale;
 80010a0:	270c      	movs	r7, #12
void print_string_scaled(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010a2:	4605      	mov	r5, r0
	uint32_t len = strlen(string);
 80010a4:	4610      	mov	r0, r2
void print_string_scaled(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010a6:	4688      	mov	r8, r1
 80010a8:	469a      	mov	sl, r3
		x += 12*scale;
 80010aa:	fb07 f709 	mul.w	r7, r7, r9
	uint32_t len = strlen(string);
 80010ae:	f7ff f8af 	bl	8000210 <strlen>
	for(char* i = string; i < string+len; i++){
 80010b2:	1826      	adds	r6, r4, r0
 80010b4:	42b4      	cmp	r4, r6
 80010b6:	d302      	bcc.n	80010be <print_string_scaled+0x28>
		//y += 16*scale;
	}
}
 80010b8:	b002      	add	sp, #8
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_char_scaled(x, y, *i, color, scale);
 80010be:	4628      	mov	r0, r5
 80010c0:	4653      	mov	r3, sl
 80010c2:	f814 2b01 	ldrb.w	r2, [r4], #1
 80010c6:	4641      	mov	r1, r8
 80010c8:	f8cd 9000 	str.w	r9, [sp]
		x += 12*scale;
 80010cc:	443d      	add	r5, r7
		print_char_scaled(x, y, *i, color, scale);
 80010ce:	f7ff fe97 	bl	8000e00 <print_char_scaled>
	for(char* i = string; i < string+len; i++){
 80010d2:	e7ef      	b.n	80010b4 <print_string_scaled+0x1e>

080010d4 <print_string_scaled_y>:

void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010d8:	4614      	mov	r4, r2
 80010da:	4605      	mov	r5, r0
	uint32_t len = strlen(string);
 80010dc:	4610      	mov	r0, r2
void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010de:	4688      	mov	r8, r1
 80010e0:	4699      	mov	r9, r3
 80010e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	uint32_t len = strlen(string);
 80010e4:	f7ff f894 	bl	8000210 <strlen>
	for(char* i = string; i < string+len; i++){
 80010e8:	1827      	adds	r7, r4, r0
 80010ea:	42bc      	cmp	r4, r7
 80010ec:	d302      	bcc.n	80010f4 <print_string_scaled_y+0x20>
		print_char_scaled_y(x, y, *i, color, scale);
		x += 12;
		//y += 16*scale;
	}
}
 80010ee:	b003      	add	sp, #12
 80010f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		print_char_scaled_y(x, y, *i, color, scale);
 80010f4:	4628      	mov	r0, r5
 80010f6:	464b      	mov	r3, r9
 80010f8:	f814 2b01 	ldrb.w	r2, [r4], #1
 80010fc:	4641      	mov	r1, r8
 80010fe:	9600      	str	r6, [sp, #0]
		x += 12;
 8001100:	350c      	adds	r5, #12
		print_char_scaled_y(x, y, *i, color, scale);
 8001102:	f7ff ff33 	bl	8000f6c <print_char_scaled_y>
	for(char* i = string; i < string+len; i++){
 8001106:	e7f0      	b.n	80010ea <print_string_scaled_y+0x16>

08001108 <fill_screen>:
// 16
// 12
// 272
// 4

void fill_screen(uint32_t color){
 8001108:	b507      	push	{r0, r1, r2, lr}
	//for(uint16_t* i = framebuf; i < framebuf+SCRWIDTH*SCRHEIGHT; i++){
	//	*i = color;
	//}
	print_rectangle(0, 0, SCRWIDTH, SCRHEIGHT, color);
 800110a:	2100      	movs	r1, #0
 800110c:	9000      	str	r0, [sp, #0]
 800110e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001112:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001116:	4608      	mov	r0, r1
 8001118:	f7ff fdcd 	bl	8000cb6 <print_rectangle>
}
 800111c:	b003      	add	sp, #12
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4

08001122 <print_number>:


void print_number(uint32_t x, uint32_t y, uint32_t number, uint32_t color, uint32_t scale){
 8001122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001126:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	if(!number){
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 800112a:	260c      	movs	r6, #12
void print_number(uint32_t x, uint32_t y, uint32_t number, uint32_t color, uint32_t scale){
 800112c:	4605      	mov	r5, r0
 800112e:	460f      	mov	r7, r1
 8001130:	4698      	mov	r8, r3
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 8001132:	fb06 f609 	mul.w	r6, r6, r9
	if(!number){
 8001136:	4614      	mov	r4, r2
 8001138:	b972      	cbnz	r2, 8001158 <print_number+0x36>
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 800113a:	4430      	add	r0, r6
 800113c:	2230      	movs	r2, #48	; 0x30
 800113e:	f8cd 9000 	str.w	r9, [sp]
 8001142:	f7ff fe5d 	bl	8000e00 <print_char_scaled>
	}

	uint32_t numlen = 0;
 8001146:	4620      	mov	r0, r4
	while(num_cp){
		numlen++;
		num_cp /= 10;
	}

	x += numlen * scale * 12;
 8001148:	fb06 5500 	mla	r5, r6, r0, r5
	while(number){
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 800114c:	f04f 0a0a 	mov.w	sl, #10
	while(number){
 8001150:	b964      	cbnz	r4, 800116c <print_number+0x4a>
		x -= scale * 12;
		number /= 10;
	}
}
 8001152:	b003      	add	sp, #12
 8001154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001158:	4613      	mov	r3, r2
	uint32_t numlen = 0;
 800115a:	2000      	movs	r0, #0
		num_cp /= 10;
 800115c:	210a      	movs	r1, #10
		numlen++;
 800115e:	461a      	mov	r2, r3
 8001160:	3001      	adds	r0, #1
	while(num_cp){
 8001162:	2a09      	cmp	r2, #9
		num_cp /= 10;
 8001164:	fbb3 f3f1 	udiv	r3, r3, r1
	while(num_cp){
 8001168:	d8f9      	bhi.n	800115e <print_number+0x3c>
 800116a:	e7ed      	b.n	8001148 <print_number+0x26>
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 800116c:	fbb4 fbfa 	udiv	fp, r4, sl
 8001170:	fb0a 421b 	mls	r2, sl, fp, r4
 8001174:	4628      	mov	r0, r5
 8001176:	4643      	mov	r3, r8
 8001178:	4639      	mov	r1, r7
 800117a:	3230      	adds	r2, #48	; 0x30
 800117c:	f8cd 9000 	str.w	r9, [sp]
		x -= scale * 12;
 8001180:	1bad      	subs	r5, r5, r6
		number /= 10;
 8001182:	465c      	mov	r4, fp
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f7ff fe3b 	bl	8000e00 <print_char_scaled>
		number /= 10;
 800118a:	e7e1      	b.n	8001150 <print_number+0x2e>

0800118c <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 800118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001190:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001192:	4d24      	ldr	r5, [pc, #144]	; (8001224 <keyboard_GPIO_init+0x98>)
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8001194:	4f24      	ldr	r7, [pc, #144]	; (8001228 <keyboard_GPIO_init+0x9c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	2214      	movs	r2, #20
 8001198:	2100      	movs	r1, #0
 800119a:	a801      	add	r0, sp, #4
 800119c:	f00e f8fe 	bl	800f39c <memset>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80011a0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001230 <keyboard_GPIO_init+0xa4>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011a4:	4628      	mov	r0, r5
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ac:	f002 fffa 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80011b0:	4638      	mov	r0, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	f002 fff5 	bl	80041a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	4640      	mov	r0, r8
 80011be:	21c0      	movs	r1, #192	; 0xc0
 80011c0:	f002 fff0 	bl	80041a4 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2601      	movs	r6, #1
 80011c6:	2310      	movs	r3, #16
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	a901      	add	r1, sp, #4
 80011ca:	4628      	mov	r0, r5

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	2502      	movs	r5, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	e9cd 3601 	strd	r3, r6, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	e9cd 4403 	strd	r4, r4, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f002 fefb 	bl	8003fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80011da:	230c      	movs	r3, #12
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011dc:	a901      	add	r1, sp, #4
 80011de:	4638      	mov	r0, r7
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e0:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011e6:	f002 fef3 	bl	8003fd0 <HAL_GPIO_Init>
	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011ea:	a901      	add	r1, sp, #4
 80011ec:	4638      	mov	r0, r7
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	e9cd 6601 	strd	r6, r6, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	e9cd 5403 	strd	r5, r4, [sp, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011f6:	f002 feeb 	bl	8003fd0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80011fa:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fc:	a901      	add	r1, sp, #4
 80011fe:	4640      	mov	r0, r8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	e9cd 3601 	strd	r3, r6, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	e9cd 5403 	strd	r5, r4, [sp, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001208:	f002 fee2 	bl	8003fd0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800120c:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120e:	a901      	add	r1, sp, #4
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <keyboard_GPIO_init+0xa0>)
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001212:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001218:	f002 feda 	bl	8003fd0 <HAL_GPIO_Init>
}
 800121c:	b006      	add	sp, #24
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001222:	bf00      	nop
 8001224:	40020400 	.word	0x40020400
 8001228:	40022000 	.word	0x40022000
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40021800 	.word	0x40021800

08001234 <get_current_keyboard_state>:

void get_current_keyboard_state(){
 8001234:	b510      	push	{r4, lr}
	stage = (stage+1)%8;
 8001236:	4c99      	ldr	r4, [pc, #612]	; (800149c <get_current_keyboard_state+0x268>)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	6023      	str	r3, [r4, #0]
	switch(stage){
 8001242:	3b01      	subs	r3, #1
 8001244:	2b06      	cmp	r3, #6
 8001246:	d808      	bhi.n	800125a <get_current_keyboard_state+0x26>
 8001248:	e8df f013 	tbh	[pc, r3, lsl #1]
 800124c:	0061001a 	.word	0x0061001a
 8001250:	00bd0077 	.word	0x00bd0077
 8001254:	011500cf 	.word	0x011500cf
 8001258:	0132      	.short	0x0132
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4890      	ldr	r0, [pc, #576]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001260:	f002 ffa0 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 8001264:	2200      	movs	r2, #0
 8001266:	2110      	movs	r1, #16
 8001268:	488e      	ldr	r0, [pc, #568]	; (80014a4 <get_current_keyboard_state+0x270>)
 800126a:	f002 ff9b 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	488d      	ldr	r0, [pc, #564]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001274:	f002 ff96 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2140      	movs	r1, #64	; 0x40
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 800127c:	4888      	ldr	r0, [pc, #544]	; (80014a0 <get_current_keyboard_state+0x26c>)
 800127e:	e058      	b.n	8001332 <get_current_keyboard_state+0xfe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	488a      	ldr	r0, [pc, #552]	; (80014ac <get_current_keyboard_state+0x278>)
 8001284:	f002 ff88 	bl	8004198 <HAL_GPIO_ReadPin>
 8001288:	2801      	cmp	r0, #1
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	d133      	bne.n	80012f6 <get_current_keyboard_state+0xc2>
 800128e:	2b15      	cmp	r3, #21
 8001290:	d801      	bhi.n	8001296 <get_current_keyboard_state+0x62>
 8001292:	3301      	adds	r3, #1
 8001294:	6063      	str	r3, [r4, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 8001296:	2108      	movs	r1, #8
 8001298:	4883      	ldr	r0, [pc, #524]	; (80014a8 <get_current_keyboard_state+0x274>)
 800129a:	f002 ff7d 	bl	8004198 <HAL_GPIO_ReadPin>
 800129e:	2801      	cmp	r0, #1
 80012a0:	68a3      	ldr	r3, [r4, #8]
 80012a2:	d12c      	bne.n	80012fe <get_current_keyboard_state+0xca>
 80012a4:	2b15      	cmp	r3, #21
 80012a6:	d801      	bhi.n	80012ac <get_current_keyboard_state+0x78>
 80012a8:	3301      	adds	r3, #1
 80012aa:	60a3      	str	r3, [r4, #8]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 80012ac:	2104      	movs	r1, #4
 80012ae:	487e      	ldr	r0, [pc, #504]	; (80014a8 <get_current_keyboard_state+0x274>)
 80012b0:	f002 ff72 	bl	8004198 <HAL_GPIO_ReadPin>
 80012b4:	2801      	cmp	r0, #1
 80012b6:	68e3      	ldr	r3, [r4, #12]
 80012b8:	d125      	bne.n	8001306 <get_current_keyboard_state+0xd2>
 80012ba:	2b15      	cmp	r3, #21
 80012bc:	d801      	bhi.n	80012c2 <get_current_keyboard_state+0x8e>
 80012be:	3301      	adds	r3, #1
 80012c0:	60e3      	str	r3, [r4, #12]
			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 80012c2:	6862      	ldr	r2, [r4, #4]
 80012c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80012c6:	2a0e      	cmp	r2, #14
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80012c8:	68a2      	ldr	r2, [r4, #8]
			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 80012ca:	bf96      	itet	ls
 80012cc:	f023 0301 	bicls.w	r3, r3, #1
 80012d0:	f043 0301 	orrhi.w	r3, r3, #1
 80012d4:	b29b      	uxthls	r3, r3
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80012d6:	2a0e      	cmp	r2, #14
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80012d8:	68e2      	ldr	r2, [r4, #12]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80012da:	bf96      	itet	ls
 80012dc:	f023 0302 	bicls.w	r3, r3, #2
 80012e0:	f043 0302 	orrhi.w	r3, r3, #2
 80012e4:	b29b      	uxthls	r3, r3
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80012e6:	2a0e      	cmp	r2, #14
 80012e8:	bf8c      	ite	hi
 80012ea:	f043 0304 	orrhi.w	r3, r3, #4
 80012ee:	f023 0304 	bicls.w	r3, r3, #4
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 80012f2:	86a3      	strh	r3, [r4, #52]	; 0x34
			break;
		}

	}
}
 80012f4:	bd10      	pop	{r4, pc}
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0cd      	beq.n	8001296 <get_current_keyboard_state+0x62>
 80012fa:	3b01      	subs	r3, #1
 80012fc:	e7ca      	b.n	8001294 <get_current_keyboard_state+0x60>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0d4      	beq.n	80012ac <get_current_keyboard_state+0x78>
 8001302:	3b01      	subs	r3, #1
 8001304:	e7d1      	b.n	80012aa <get_current_keyboard_state+0x76>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0db      	beq.n	80012c2 <get_current_keyboard_state+0x8e>
 800130a:	3b01      	subs	r3, #1
 800130c:	e7d8      	b.n	80012c0 <get_current_keyboard_state+0x8c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4863      	ldr	r0, [pc, #396]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001314:	f002 ff46 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4860      	ldr	r0, [pc, #384]	; (80014a0 <get_current_keyboard_state+0x26c>)
 800131e:	f002 ff41 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 8001322:	2200      	movs	r2, #0
 8001324:	2101      	movs	r1, #1
 8001326:	4860      	ldr	r0, [pc, #384]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001328:	f002 ff3c 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 800132c:	2201      	movs	r2, #1
 800132e:	2110      	movs	r1, #16
 8001330:	485c      	ldr	r0, [pc, #368]	; (80014a4 <get_current_keyboard_state+0x270>)
}
 8001332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8001336:	f002 bf35 	b.w	80041a4 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	485b      	ldr	r0, [pc, #364]	; (80014ac <get_current_keyboard_state+0x278>)
 800133e:	f002 ff2b 	bl	8004198 <HAL_GPIO_ReadPin>
 8001342:	2801      	cmp	r0, #1
 8001344:	6923      	ldr	r3, [r4, #16]
 8001346:	d132      	bne.n	80013ae <get_current_keyboard_state+0x17a>
 8001348:	2b15      	cmp	r3, #21
 800134a:	d801      	bhi.n	8001350 <get_current_keyboard_state+0x11c>
 800134c:	3301      	adds	r3, #1
 800134e:	6123      	str	r3, [r4, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 8001350:	2108      	movs	r1, #8
 8001352:	4855      	ldr	r0, [pc, #340]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001354:	f002 ff20 	bl	8004198 <HAL_GPIO_ReadPin>
 8001358:	2801      	cmp	r0, #1
 800135a:	6963      	ldr	r3, [r4, #20]
 800135c:	d12b      	bne.n	80013b6 <get_current_keyboard_state+0x182>
 800135e:	2b15      	cmp	r3, #21
 8001360:	d801      	bhi.n	8001366 <get_current_keyboard_state+0x132>
 8001362:	3301      	adds	r3, #1
 8001364:	6163      	str	r3, [r4, #20]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 8001366:	2104      	movs	r1, #4
 8001368:	484f      	ldr	r0, [pc, #316]	; (80014a8 <get_current_keyboard_state+0x274>)
 800136a:	f002 ff15 	bl	8004198 <HAL_GPIO_ReadPin>
 800136e:	2801      	cmp	r0, #1
 8001370:	69a3      	ldr	r3, [r4, #24]
 8001372:	d124      	bne.n	80013be <get_current_keyboard_state+0x18a>
 8001374:	2b15      	cmp	r3, #21
 8001376:	d801      	bhi.n	800137c <get_current_keyboard_state+0x148>
 8001378:	3301      	adds	r3, #1
 800137a:	61a3      	str	r3, [r4, #24]
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 800137c:	6922      	ldr	r2, [r4, #16]
 800137e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8001380:	2a0e      	cmp	r2, #14
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8001382:	6962      	ldr	r2, [r4, #20]
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 8001384:	bf96      	itet	ls
 8001386:	f023 0308 	bicls.w	r3, r3, #8
 800138a:	f043 0308 	orrhi.w	r3, r3, #8
 800138e:	b29b      	uxthls	r3, r3
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8001390:	2a0e      	cmp	r2, #14
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8001392:	69a2      	ldr	r2, [r4, #24]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8001394:	bf96      	itet	ls
 8001396:	f023 0310 	bicls.w	r3, r3, #16
 800139a:	f043 0310 	orrhi.w	r3, r3, #16
 800139e:	b29b      	uxthls	r3, r3
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 80013a0:	2a0e      	cmp	r2, #14
 80013a2:	bf8c      	ite	hi
 80013a4:	f043 0320 	orrhi.w	r3, r3, #32
 80013a8:	f023 0320 	bicls.w	r3, r3, #32
 80013ac:	e7a1      	b.n	80012f2 <get_current_keyboard_state+0xbe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ce      	beq.n	8001350 <get_current_keyboard_state+0x11c>
 80013b2:	3b01      	subs	r3, #1
 80013b4:	e7cb      	b.n	800134e <get_current_keyboard_state+0x11a>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0d5      	beq.n	8001366 <get_current_keyboard_state+0x132>
 80013ba:	3b01      	subs	r3, #1
 80013bc:	e7d2      	b.n	8001364 <get_current_keyboard_state+0x130>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0dc      	beq.n	800137c <get_current_keyboard_state+0x148>
 80013c2:	3b01      	subs	r3, #1
 80013c4:	e7d9      	b.n	800137a <get_current_keyboard_state+0x146>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2110      	movs	r1, #16
 80013ca:	4836      	ldr	r0, [pc, #216]	; (80014a4 <get_current_keyboard_state+0x270>)
 80013cc:	f002 feea 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2140      	movs	r1, #64	; 0x40
 80013d4:	4832      	ldr	r0, [pc, #200]	; (80014a0 <get_current_keyboard_state+0x26c>)
 80013d6:	f002 fee5 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2101      	movs	r1, #1
 80013de:	4832      	ldr	r0, [pc, #200]	; (80014a8 <get_current_keyboard_state+0x274>)
 80013e0:	f002 fee0 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 80013e4:	2201      	movs	r2, #1
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	e748      	b.n	800127c <get_current_keyboard_state+0x48>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <get_current_keyboard_state+0x278>)
 80013ee:	f002 fed3 	bl	8004198 <HAL_GPIO_ReadPin>
 80013f2:	2801      	cmp	r0, #1
 80013f4:	69e3      	ldr	r3, [r4, #28]
 80013f6:	d132      	bne.n	800145e <get_current_keyboard_state+0x22a>
 80013f8:	2b15      	cmp	r3, #21
 80013fa:	d801      	bhi.n	8001400 <get_current_keyboard_state+0x1cc>
 80013fc:	3301      	adds	r3, #1
 80013fe:	61e3      	str	r3, [r4, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 8001400:	2108      	movs	r1, #8
 8001402:	4829      	ldr	r0, [pc, #164]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001404:	f002 fec8 	bl	8004198 <HAL_GPIO_ReadPin>
 8001408:	2801      	cmp	r0, #1
 800140a:	6a23      	ldr	r3, [r4, #32]
 800140c:	d12b      	bne.n	8001466 <get_current_keyboard_state+0x232>
 800140e:	2b15      	cmp	r3, #21
 8001410:	d801      	bhi.n	8001416 <get_current_keyboard_state+0x1e2>
 8001412:	3301      	adds	r3, #1
 8001414:	6223      	str	r3, [r4, #32]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 8001416:	2104      	movs	r1, #4
 8001418:	4823      	ldr	r0, [pc, #140]	; (80014a8 <get_current_keyboard_state+0x274>)
 800141a:	f002 febd 	bl	8004198 <HAL_GPIO_ReadPin>
 800141e:	2801      	cmp	r0, #1
 8001420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001422:	d124      	bne.n	800146e <get_current_keyboard_state+0x23a>
 8001424:	2b15      	cmp	r3, #21
 8001426:	d801      	bhi.n	800142c <get_current_keyboard_state+0x1f8>
 8001428:	3301      	adds	r3, #1
 800142a:	6263      	str	r3, [r4, #36]	; 0x24
			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 800142c:	69e2      	ldr	r2, [r4, #28]
 800142e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8001430:	2a0e      	cmp	r2, #14
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8001432:	6a22      	ldr	r2, [r4, #32]
			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 8001434:	bf96      	itet	ls
 8001436:	f023 0340 	bicls.w	r3, r3, #64	; 0x40
 800143a:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800143e:	b29b      	uxthls	r3, r3
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8001440:	2a0e      	cmp	r2, #14
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8001442:	6a62      	ldr	r2, [r4, #36]	; 0x24
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8001444:	bf96      	itet	ls
 8001446:	f023 0380 	bicls.w	r3, r3, #128	; 0x80
 800144a:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
 800144e:	b29b      	uxthls	r3, r3
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8001450:	2a0e      	cmp	r2, #14
 8001452:	bf8c      	ite	hi
 8001454:	f443 7380 	orrhi.w	r3, r3, #256	; 0x100
 8001458:	f423 7380 	bicls.w	r3, r3, #256	; 0x100
 800145c:	e749      	b.n	80012f2 <get_current_keyboard_state+0xbe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ce      	beq.n	8001400 <get_current_keyboard_state+0x1cc>
 8001462:	3b01      	subs	r3, #1
 8001464:	e7cb      	b.n	80013fe <get_current_keyboard_state+0x1ca>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0d5      	beq.n	8001416 <get_current_keyboard_state+0x1e2>
 800146a:	3b01      	subs	r3, #1
 800146c:	e7d2      	b.n	8001414 <get_current_keyboard_state+0x1e0>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0dc      	beq.n	800142c <get_current_keyboard_state+0x1f8>
 8001472:	3b01      	subs	r3, #1
 8001474:	e7d9      	b.n	800142a <get_current_keyboard_state+0x1f6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2110      	movs	r1, #16
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <get_current_keyboard_state+0x270>)
 800147c:	f002 fe92 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001486:	f002 fe8d 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001490:	f002 fe88 	bl	80041a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8001494:	2201      	movs	r2, #1
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001498:	4611      	mov	r1, r2
 800149a:	e74a      	b.n	8001332 <get_current_keyboard_state+0xfe>
 800149c:	20005978 	.word	0x20005978
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40021c00 	.word	0x40021c00
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	4822      	ldr	r0, [pc, #136]	; (800153c <get_current_keyboard_state+0x308>)
 80014b4:	f002 fe70 	bl	8004198 <HAL_GPIO_ReadPin>
 80014b8:	2801      	cmp	r0, #1
 80014ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014bc:	d132      	bne.n	8001524 <get_current_keyboard_state+0x2f0>
 80014be:	2b15      	cmp	r3, #21
 80014c0:	d801      	bhi.n	80014c6 <get_current_keyboard_state+0x292>
 80014c2:	3301      	adds	r3, #1
 80014c4:	62a3      	str	r3, [r4, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 80014c6:	2108      	movs	r1, #8
 80014c8:	481d      	ldr	r0, [pc, #116]	; (8001540 <get_current_keyboard_state+0x30c>)
 80014ca:	f002 fe65 	bl	8004198 <HAL_GPIO_ReadPin>
 80014ce:	2801      	cmp	r0, #1
 80014d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014d2:	d12b      	bne.n	800152c <get_current_keyboard_state+0x2f8>
 80014d4:	2b15      	cmp	r3, #21
 80014d6:	d801      	bhi.n	80014dc <get_current_keyboard_state+0x2a8>
 80014d8:	3301      	adds	r3, #1
 80014da:	62e3      	str	r3, [r4, #44]	; 0x2c
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 80014dc:	2104      	movs	r1, #4
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <get_current_keyboard_state+0x30c>)
 80014e0:	f002 fe5a 	bl	8004198 <HAL_GPIO_ReadPin>
 80014e4:	2801      	cmp	r0, #1
 80014e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014e8:	d124      	bne.n	8001534 <get_current_keyboard_state+0x300>
 80014ea:	2b15      	cmp	r3, #21
 80014ec:	d801      	bhi.n	80014f2 <get_current_keyboard_state+0x2be>
 80014ee:	3301      	adds	r3, #1
 80014f0:	6323      	str	r3, [r4, #48]	; 0x30
			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 80014f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80014f6:	2a0e      	cmp	r2, #14
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 80014f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 80014fa:	bf96      	itet	ls
 80014fc:	f423 7300 	bicls.w	r3, r3, #512	; 0x200
 8001500:	f443 7300 	orrhi.w	r3, r3, #512	; 0x200
 8001504:	b29b      	uxthls	r3, r3
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8001506:	2a0e      	cmp	r2, #14
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8001508:	6b22      	ldr	r2, [r4, #48]	; 0x30
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 800150a:	bf96      	itet	ls
 800150c:	f423 6380 	bicls.w	r3, r3, #1024	; 0x400
 8001510:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
 8001514:	b29b      	uxthls	r3, r3
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8001516:	2a0e      	cmp	r2, #14
 8001518:	bf8c      	ite	hi
 800151a:	f443 6300 	orrhi.w	r3, r3, #2048	; 0x800
 800151e:	f423 6300 	bicls.w	r3, r3, #2048	; 0x800
 8001522:	e6e6      	b.n	80012f2 <get_current_keyboard_state+0xbe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ce      	beq.n	80014c6 <get_current_keyboard_state+0x292>
 8001528:	3b01      	subs	r3, #1
 800152a:	e7cb      	b.n	80014c4 <get_current_keyboard_state+0x290>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0d5      	beq.n	80014dc <get_current_keyboard_state+0x2a8>
 8001530:	3b01      	subs	r3, #1
 8001532:	e7d2      	b.n	80014da <get_current_keyboard_state+0x2a6>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0dc      	beq.n	80014f2 <get_current_keyboard_state+0x2be>
 8001538:	3b01      	subs	r3, #1
 800153a:	e7d9      	b.n	80014f0 <get_current_keyboard_state+0x2bc>
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40022000 	.word	0x40022000

08001544 <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8001544:	b510      	push	{r4, lr}
 8001546:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	2210      	movs	r2, #16
 800154a:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2400      	movs	r4, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	a802      	add	r0, sp, #8
 8001550:	f00d ff24 	bl	800f39c <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001554:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001558:	a901      	add	r1, sp, #4
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <spinner_GPIO_init+0x44>)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155e:	f002 fd37 	bl	8003fd0 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	a901      	add	r1, sp, #4
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <spinner_GPIO_init+0x48>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f002 fd2f 	bl	8003fd0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001572:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8001574:	a901      	add	r1, sp, #4
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <spinner_GPIO_init+0x48>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 800157e:	f002 fd27 	bl	8003fd0 <HAL_GPIO_Init>
}
 8001582:	b006      	add	sp, #24
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	40021400 	.word	0x40021400
 800158c:	40020800 	.word	0x40020800

08001590 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8001590:	b508      	push	{r3, lr}
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <get_current_spinner_button_state+0x30>)
 8001598:	f002 fdfe 	bl	8004198 <HAL_GPIO_ReadPin>
	if(val == GPIO_PIN_RESET){
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <get_current_spinner_button_state+0x34>)
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 800159e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	if(val == GPIO_PIN_RESET){
 80015a0:	b950      	cbnz	r0, 80015b8 <get_current_spinner_button_state+0x28>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 80015a2:	2a3b      	cmp	r2, #59	; 0x3b
 80015a4:	d801      	bhi.n	80015aa <get_current_spinner_button_state+0x1a>
				spinner_button_count++;
 80015a6:	3201      	adds	r2, #1
		}
	}else{
		if(spinner_button_count >= 3){
			spinner_button_count-=3;
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 80015aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ac:	2a27      	cmp	r2, #39	; 0x27
 80015ae:	bf94      	ite	ls
 80015b0:	2200      	movls	r2, #0
 80015b2:	2201      	movhi	r2, #1
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c
		spinner_button_state=1;
	}else{
		spinner_button_state=0;
	}
}
 80015b6:	bd08      	pop	{r3, pc}
		if(spinner_button_count >= 3){
 80015b8:	2a02      	cmp	r2, #2
 80015ba:	d9f6      	bls.n	80015aa <get_current_spinner_button_state+0x1a>
			spinner_button_count-=3;
 80015bc:	3a03      	subs	r2, #3
 80015be:	e7f3      	b.n	80015a8 <get_current_spinner_button_state+0x18>
 80015c0:	40021400 	.word	0x40021400
 80015c4:	20005978 	.word	0x20005978

080015c8 <get_spinner_position_change>:


void get_spinner_position_change(){
 80015c8:	b510      	push	{r4, lr}
	switch(spinner_stage){
 80015ca:	4c2a      	ldr	r4, [pc, #168]	; (8001674 <get_spinner_position_change+0xac>)
 80015cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d813      	bhi.n	80015fa <get_spinner_position_change+0x32>
 80015d2:	e8df f003 	tbb	[pc, r3]
 80015d6:	1503      	.short	0x1503
 80015d8:	4c443129 	.word	0x4c443129
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	4826      	ldr	r0, [pc, #152]	; (8001678 <get_spinner_position_change+0xb0>)
 80015e0:	f002 fdda 	bl	8004198 <HAL_GPIO_ReadPin>
 80015e4:	b948      	cbnz	r0, 80015fa <get_spinner_position_change+0x32>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 80015e6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80015f0:	f002 fdd2 	bl	8004198 <HAL_GPIO_ReadPin>
 80015f4:	b910      	cbnz	r0, 80015fc <get_spinner_position_change+0x34>
					spinner_stage = 1;
 80015f6:	2301      	movs	r3, #1
			}
			break;			
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
				spinner_stage = 5;
 80015f8:	6423      	str	r3, [r4, #64]	; 0x40
				spinner_stage = 0;
			}
			break;
		}
	}
}
 80015fa:	bd10      	pop	{r4, pc}
					spinner_stage = 3;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e7fb      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <get_spinner_position_change+0xb0>)
 8001604:	f002 fdc8 	bl	8004198 <HAL_GPIO_ReadPin>
 8001608:	2801      	cmp	r0, #1
 800160a:	d1f6      	bne.n	80015fa <get_spinner_position_change+0x32>
				minuscnt++;
 800160c:	6c63      	ldr	r3, [r4, #68]	; 0x44
				pluscnt=0;
 800160e:	2200      	movs	r2, #0
				minuscnt++;
 8001610:	3301      	adds	r3, #1
				pluscnt=0;
 8001612:	64a2      	str	r2, [r4, #72]	; 0x48
				if(minuscnt >= 4){
 8001614:	2b03      	cmp	r3, #3
				minuscnt++;
 8001616:	6463      	str	r3, [r4, #68]	; 0x44
				if(minuscnt >= 4){
 8001618:	d904      	bls.n	8001624 <get_spinner_position_change+0x5c>
					spinner_position--;
 800161a:	4918      	ldr	r1, [pc, #96]	; (800167c <get_spinner_position_change+0xb4>)
					minuscnt=0;
 800161c:	6462      	str	r2, [r4, #68]	; 0x44
					spinner_position--;
 800161e:	680b      	ldr	r3, [r1, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	600b      	str	r3, [r1, #0]
				spinner_stage = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	e7e7      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <get_spinner_position_change+0xb0>)
 800162c:	f002 fdb4 	bl	8004198 <HAL_GPIO_ReadPin>
 8001630:	2801      	cmp	r0, #1
 8001632:	d1e2      	bne.n	80015fa <get_spinner_position_change+0x32>
				spinner_stage = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e7df      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <get_spinner_position_change+0xb0>)
 800163c:	f002 fdac 	bl	8004198 <HAL_GPIO_ReadPin>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1da      	bne.n	80015fa <get_spinner_position_change+0x32>
				pluscnt++;
 8001644:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001646:	3301      	adds	r3, #1
				if(pluscnt>=2){
 8001648:	2b01      	cmp	r3, #1
				minuscnt=0;
 800164a:	e9c4 0311 	strd	r0, r3, [r4, #68]	; 0x44
				if(pluscnt>=2){
 800164e:	d904      	bls.n	800165a <get_spinner_position_change+0x92>
					spinner_position++;
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <get_spinner_position_change+0xb4>)
					pluscnt=0;
 8001652:	64a0      	str	r0, [r4, #72]	; 0x48
					spinner_position++;
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	6013      	str	r3, [r2, #0]
				spinner_stage = 4;
 800165a:	2304      	movs	r3, #4
 800165c:	e7cc      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <get_spinner_position_change+0xb0>)
 8001662:	f002 fd99 	bl	8004198 <HAL_GPIO_ReadPin>
 8001666:	2801      	cmp	r0, #1
 8001668:	d1c7      	bne.n	80015fa <get_spinner_position_change+0x32>
				spinner_stage = 5;
 800166a:	2305      	movs	r3, #5
 800166c:	e7c4      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	e7db      	b.n	800162a <get_spinner_position_change+0x62>
 8001672:	bf00      	nop
 8001674:	20005978 	.word	0x20005978
 8001678:	40020800 	.word	0x40020800
 800167c:	20000014 	.word	0x20000014

08001680 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8001680:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	a802      	add	r0, sp, #8
 8001688:	f00d fe88 	bl	800f39c <memset>

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001690:	a901      	add	r1, sp, #4
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <switch_GPIO_init+0x20>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001694:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001696:	f002 fc9b 	bl	8003fd0 <HAL_GPIO_Init>
}
 800169a:	b007      	add	sp, #28
 800169c:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a0:	40021400 	.word	0x40021400

080016a4 <get_current_switch_state>:

void get_current_switch_state(){
 80016a4:	b508      	push	{r3, lr}
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 80016a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <get_current_switch_state+0x18>)
 80016ac:	f002 fd74 	bl	8004198 <HAL_GPIO_ReadPin>
	if(val == GPIO_PIN_SET){
 80016b0:	3801      	subs	r0, #1
 80016b2:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <get_current_switch_state+0x1c>)
 80016b4:	bf18      	it	ne
 80016b6:	2001      	movne	r0, #1
 80016b8:	64d8      	str	r0, [r3, #76]	; 0x4c
		switch_state = 0;
	}else{
		switch_state = 1;
	}
}
 80016ba:	bd08      	pop	{r3, pc}
 80016bc:	40021400 	.word	0x40021400
 80016c0:	20005978 	.word	0x20005978

080016c4 <print_fat_rectangle>:

uint32_t state_progress = 0;
uint32_t mem_sp_st = 0; // memorized spinner position for diff
uint32_t system_angle = 180;

void print_fat_rectangle(){
 80016c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t x = 80;
	uint32_t y = 80;
	uint32_t width = 320;
 80016c6:	f44f 75a0 	mov.w	r5, #320	; 0x140
	uint32_t x = 80;
 80016ca:	2450      	movs	r4, #80	; 0x50
	uint32_t height = 100;
	for(uint8_t i = 0; i < 6; i++){
		print_rectangle_empty(x, y, width, height, 0xFF00FFFF);
 80016cc:	f46f 067f 	mvn.w	r6, #16711680	; 0xff0000
 80016d0:	4621      	mov	r1, r4
 80016d2:	4620      	mov	r0, r4
		x++;
 80016d4:	3401      	adds	r4, #1
		print_rectangle_empty(x, y, width, height, 0xFF00FFFF);
 80016d6:	f1a5 03dc 	sub.w	r3, r5, #220	; 0xdc
 80016da:	462a      	mov	r2, r5
 80016dc:	9600      	str	r6, [sp, #0]
 80016de:	f7ff fb03 	bl	8000ce8 <print_rectangle_empty>
	for(uint8_t i = 0; i < 6; i++){
 80016e2:	2c56      	cmp	r4, #86	; 0x56
		y++;
		width -= 2;
 80016e4:	f1a5 0502 	sub.w	r5, r5, #2
	for(uint8_t i = 0; i < 6; i++){
 80016e8:	d1f2      	bne.n	80016d0 <print_fat_rectangle+0xc>
		height -= 2;
	}
}
 80016ea:	b002      	add	sp, #8
 80016ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080016f0 <state_machine>:


void state_machine(){
 80016f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t kbd_st = keyboard_state;
 80016f4:	4c8f      	ldr	r4, [pc, #572]	; (8001934 <state_machine+0x244>)

	//char tststr[] = {0xc0 ,0x0};
	//tststr[0] += system_state;
	//print_string_scaled_y(115, 120, tststr, 0xFF00FFFF, 2);

	switch(system_state){
 80016f6:	e9d4 7313 	ldrd	r7, r3, [r4, #76]	; 0x4c
	uint32_t kbd_st = keyboard_state;
 80016fa:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
	switch(system_state){
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d823      	bhi.n	8001748 <state_machine+0x58>
 8001700:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001704:	00250012 	.word	0x00250012
 8001708:	008b0068 	.word	0x008b0068
 800170c:	00f700aa 	.word	0x00f700aa
 8001710:	016c0120 	.word	0x016c0120
 8001714:	021801cc 	.word	0x021801cc
 8001718:	024f0234 	.word	0x024f0234
 800171c:	02980266 	.word	0x02980266
 8001720:	02c702af 	.word	0x02c702af
 8001724:	02f702df 	.word	0x02f702df
		case 0:{
			if(need_out){
 8001728:	4d83      	ldr	r5, [pc, #524]	; (8001938 <state_machine+0x248>)
 800172a:	686b      	ldr	r3, [r5, #4]
 800172c:	b12b      	cbz	r3, 800173a <state_machine+0x4a>
				fill_screen(0xFF000000);
 800172e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001732:	f7ff fce9 	bl	8001108 <fill_screen>
				need_out = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	606b      	str	r3, [r5, #4]
			}

			if(sw_st){
 800173a:	b12f      	cbz	r7, 8001748 <state_machine+0x58>
				system_state = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 8001740:	606b      	str	r3, [r5, #4]

				state_time = tick_fun();
 8001742:	f004 fd27 	bl	8006194 <xTaskGetTickCount>
 8001746:	6560      	str	r0, [r4, #84]	; 0x54
			check_brightness();
			check_switch();
			break;			
		}																				
	}
}
 8001748:	b002      	add	sp, #8
 800174a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(need_out){
 800174e:	4e7a      	ldr	r6, [pc, #488]	; (8001938 <state_machine+0x248>)
 8001750:	6873      	ldr	r3, [r6, #4]
 8001752:	b18b      	cbz	r3, 8001778 <state_machine+0x88>
				fill_screen(0xFF000000);
 8001754:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001758:	f7ff fcd6 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 800175c:	f7ff ffb2 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state1_string, 0xFF00FFFF, 2);
 8001760:	2302      	movs	r3, #2
 8001762:	f106 0208 	add.w	r2, r6, #8
 8001766:	2178      	movs	r1, #120	; 0x78
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2073      	movs	r0, #115	; 0x73
 800176c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001770:	f7ff fcb0 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	6073      	str	r3, [r6, #4]
			if(tick_fun() - state_time >= 1000){
 8001778:	f004 fd0c 	bl	8006194 <xTaskGetTickCount>
 800177c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800177e:	1ac0      	subs	r0, r0, r3
 8001780:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001784:	d306      	bcc.n	8001794 <state_machine+0xa4>
				system_state = 2;
 8001786:	2302      	movs	r3, #2
 8001788:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	6073      	str	r3, [r6, #4]
				state_time = tick_fun();
 800178e:	f004 fd01 	bl	8006194 <xTaskGetTickCount>
 8001792:	6560      	str	r0, [r4, #84]	; 0x54
			check_brightness();
 8001794:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001796:	b98b      	cbnz	r3, 80017bc <state_machine+0xcc>
 8001798:	2201      	movs	r2, #1
 800179a:	65a2      	str	r2, [r4, #88]	; 0x58
 800179c:	066a      	lsls	r2, r5, #25
 800179e:	d50f      	bpl.n	80017c0 <state_machine+0xd0>
 80017a0:	69f2      	ldr	r2, [r6, #28]
 80017a2:	4866      	ldr	r0, [pc, #408]	; (800193c <state_machine+0x24c>)
 80017a4:	2a02      	cmp	r2, #2
 80017a6:	bf18      	it	ne
 80017a8:	1c53      	addne	r3, r2, #1
 80017aa:	61f3      	str	r3, [r6, #28]
 80017ac:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80017b0:	4b63      	ldr	r3, [pc, #396]	; (8001940 <state_machine+0x250>)
 80017b2:	6a31      	ldr	r1, [r6, #32]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f002 fe1a 	bl	80043ee <HAL_LTDC_SetAlpha>
 80017ba:	e001      	b.n	80017c0 <state_machine+0xd0>
			check_brightness();
 80017bc:	2300      	movs	r3, #0
 80017be:	65a3      	str	r3, [r4, #88]	; 0x58
			check_switch();
 80017c0:	2f00      	cmp	r7, #0
 80017c2:	d1c1      	bne.n	8001748 <state_machine+0x58>
 80017c4:	2300      	movs	r3, #0
 80017c6:	22b4      	movs	r2, #180	; 0xb4
 80017c8:	6523      	str	r3, [r4, #80]	; 0x50
 80017ca:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <state_machine+0x248>)
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ce:	2201      	movs	r2, #1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e7b9      	b.n	8001748 <state_machine+0x58>
			if(need_out){
 80017d4:	4e58      	ldr	r6, [pc, #352]	; (8001938 <state_machine+0x248>)
 80017d6:	6873      	ldr	r3, [r6, #4]
 80017d8:	b18b      	cbz	r3, 80017fe <state_machine+0x10e>
				fill_screen(0xFF000000);
 80017da:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017de:	f7ff fc93 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 80017e2:	f7ff ff6f 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state2_string, 0xFF00FFFF, 2);
 80017e6:	2302      	movs	r3, #2
 80017e8:	f106 0230 	add.w	r2, r6, #48	; 0x30
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2073      	movs	r0, #115	; 0x73
 80017f2:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 80017f6:	f7ff fc6d 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	6073      	str	r3, [r6, #4]
			if(tick_fun() - state_time >= 1000){
 80017fe:	f004 fcc9 	bl	8006194 <xTaskGetTickCount>
 8001802:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001804:	1ac0      	subs	r0, r0, r3
 8001806:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800180a:	d3c3      	bcc.n	8001794 <state_machine+0xa4>
				system_state = 3;
 800180c:	2303      	movs	r3, #3
 800180e:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	6073      	str	r3, [r6, #4]
				state_time = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	6563      	str	r3, [r4, #84]	; 0x54
			check_brightness();
 8001818:	e7bc      	b.n	8001794 <state_machine+0xa4>
			if(need_out){
 800181a:	4e47      	ldr	r6, [pc, #284]	; (8001938 <state_machine+0x248>)
 800181c:	6873      	ldr	r3, [r6, #4]
 800181e:	b18b      	cbz	r3, 8001844 <state_machine+0x154>
				fill_screen(0xFF000000);
 8001820:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001824:	f7ff fc70 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001828:	f7ff ff4c 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(90, 120, state3_string, 0xFF00FFFF, 2);
 800182c:	2302      	movs	r3, #2
 800182e:	f106 0246 	add.w	r2, r6, #70	; 0x46
 8001832:	2178      	movs	r1, #120	; 0x78
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	205a      	movs	r0, #90	; 0x5a
 8001838:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 800183c:	f7ff fc4a 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	6073      	str	r3, [r6, #4]
			if(kbd_st & BUTTON_TEST){
 8001844:	07e8      	lsls	r0, r5, #31
 8001846:	d5a5      	bpl.n	8001794 <state_machine+0xa4>
				state_progress = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 800184c:	6563      	str	r3, [r4, #84]	; 0x54
				system_state = 4;
 800184e:	2304      	movs	r3, #4
 8001850:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 8001852:	2301      	movs	r3, #1
 8001854:	6073      	str	r3, [r6, #4]
			check_brightness();
 8001856:	e79d      	b.n	8001794 <state_machine+0xa4>
			if(need_out){
 8001858:	4e37      	ldr	r6, [pc, #220]	; (8001938 <state_machine+0x248>)
 800185a:	6873      	ldr	r3, [r6, #4]
 800185c:	b1db      	cbz	r3, 8001896 <state_machine+0x1a6>
				fill_screen(0xFF000000);
 800185e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001862:	f7ff fc51 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001866:	f7ff ff2d 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled(185, 105, state4_string, 0xFF00FFFF, 2);
 800186a:	2302      	movs	r3, #2
 800186c:	f106 0260 	add.w	r2, r6, #96	; 0x60
 8001870:	2169      	movs	r1, #105	; 0x69
 8001872:	20b9      	movs	r0, #185	; 0xb9
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 800187a:	f7ff fc0c 	bl	8001096 <print_string_scaled>
				print_rectangle_empty(100, 150, 280, 10, 0xFF00FFFF);
 800187e:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001882:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001886:	2196      	movs	r1, #150	; 0x96
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2064      	movs	r0, #100	; 0x64
 800188c:	230a      	movs	r3, #10
 800188e:	f7ff fa2b 	bl	8000ce8 <print_rectangle_empty>
				need_out = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	6073      	str	r3, [r6, #4]
			if(!state_time){state_time = tick_fun();}else{
 8001896:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001898:	b9f3      	cbnz	r3, 80018d8 <state_machine+0x1e8>
 800189a:	f004 fc7b 	bl	8006194 <xTaskGetTickCount>
 800189e:	6560      	str	r0, [r4, #84]	; 0x54
			if(state_progress){
 80018a0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	f43f af76 	beq.w	8001794 <state_machine+0xa4>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0xFF00FFFF);
 80018a8:	230a      	movs	r3, #10
 80018aa:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 80018ae:	2064      	movs	r0, #100	; 0x64
 80018b0:	9100      	str	r1, [sp, #0]
 80018b2:	211c      	movs	r1, #28
 80018b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80018b8:	434a      	muls	r2, r1
 80018ba:	2196      	movs	r1, #150	; 0x96
 80018bc:	f7ff f9fb 	bl	8000cb6 <print_rectangle>
			if(state_progress == 100){
 80018c0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	f47f af66 	bne.w	8001794 <state_machine+0xa4>
				state_progress = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 80018cc:	6563      	str	r3, [r4, #84]	; 0x54
				need_out = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	6073      	str	r3, [r6, #4]
				system_state = 5;
 80018d2:	2305      	movs	r3, #5
			check_data();
 80018d4:	6523      	str	r3, [r4, #80]	; 0x50
 80018d6:	e75d      	b.n	8001794 <state_machine+0xa4>
				if(tick_fun() - state_time >= 300){
 80018d8:	f004 fc5c 	bl	8006194 <xTaskGetTickCount>
 80018dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018de:	1ac0      	subs	r0, r0, r3
 80018e0:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80018e4:	d3dc      	bcc.n	80018a0 <state_machine+0x1b0>
					state_time = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	6563      	str	r3, [r4, #84]	; 0x54
					state_progress += 10;
 80018ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018ec:	330a      	adds	r3, #10
 80018ee:	65e3      	str	r3, [r4, #92]	; 0x5c
 80018f0:	e7d6      	b.n	80018a0 <state_machine+0x1b0>
			if(need_out){
 80018f2:	4e11      	ldr	r6, [pc, #68]	; (8001938 <state_machine+0x248>)
 80018f4:	6873      	ldr	r3, [r6, #4]
 80018f6:	b18b      	cbz	r3, 800191c <state_machine+0x22c>
				fill_screen(0xFF000000);
 80018f8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80018fc:	f7ff fc04 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001900:	f7ff fee0 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(120, 120, state5_string, 0xFF00FFFF, 2);
 8001904:	2302      	movs	r3, #2
 8001906:	2178      	movs	r1, #120	; 0x78
 8001908:	f106 0265 	add.w	r2, r6, #101	; 0x65
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001912:	4608      	mov	r0, r1
 8001914:	f7ff fbde 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	6073      	str	r3, [r6, #4]
			if(kbd_st & BUTTON_CALIBRATION){
 800191c:	0729      	lsls	r1, r5, #28
 800191e:	f57f af39 	bpl.w	8001794 <state_machine+0xa4>
				system_state = 6;
 8001922:	2306      	movs	r3, #6
 8001924:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	6073      	str	r3, [r6, #4]
				state_time = 0;
 800192a:	2300      	movs	r3, #0
 800192c:	6563      	str	r3, [r4, #84]	; 0x54
				state_progress = 0;
 800192e:	65e3      	str	r3, [r4, #92]	; 0x5c
			check_brightness();
 8001930:	e730      	b.n	8001794 <state_machine+0xa4>
 8001932:	bf00      	nop
 8001934:	20005978 	.word	0x20005978
 8001938:	20000014 	.word	0x20000014
 800193c:	2000991c 	.word	0x2000991c
 8001940:	200099c4 	.word	0x200099c4
			if(need_out){
 8001944:	4eba      	ldr	r6, [pc, #744]	; (8001c30 <state_machine+0x540>)
 8001946:	6873      	ldr	r3, [r6, #4]
 8001948:	b1db      	cbz	r3, 8001982 <state_machine+0x292>
				fill_screen(0xFF000000);
 800194a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800194e:	f7ff fbdb 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001952:	f7ff feb7 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state6_string, 0xFF00FFFF, 2);
 8001956:	2302      	movs	r3, #2
 8001958:	f106 027a 	add.w	r2, r6, #122	; 0x7a
 800195c:	2164      	movs	r1, #100	; 0x64
 800195e:	20b4      	movs	r0, #180	; 0xb4
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001966:	f7ff fbb5 	bl	80010d4 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0xFF00FFFF);
 800196a:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 800196e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001972:	2196      	movs	r1, #150	; 0x96
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2064      	movs	r0, #100	; 0x64
 8001978:	230a      	movs	r3, #10
 800197a:	f7ff f9b5 	bl	8000ce8 <print_rectangle_empty>
				need_out = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	6073      	str	r3, [r6, #4]
			if(!state_time){state_time = tick_fun();}else{
 8001982:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001984:	b9eb      	cbnz	r3, 80019c2 <state_machine+0x2d2>
 8001986:	f004 fc05 	bl	8006194 <xTaskGetTickCount>
 800198a:	6560      	str	r0, [r4, #84]	; 0x54
			if(state_progress){
 800198c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800198e:	2a00      	cmp	r2, #0
 8001990:	f43f af00 	beq.w	8001794 <state_machine+0xa4>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0xFF00FFFF);
 8001994:	230a      	movs	r3, #10
 8001996:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 800199a:	2064      	movs	r0, #100	; 0x64
 800199c:	9100      	str	r1, [sp, #0]
 800199e:	211c      	movs	r1, #28
 80019a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a4:	434a      	muls	r2, r1
 80019a6:	2196      	movs	r1, #150	; 0x96
 80019a8:	f7ff f985 	bl	8000cb6 <print_rectangle>
			if(state_progress == 100){
 80019ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	f47f aef0 	bne.w	8001794 <state_machine+0xa4>
				state_progress = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 80019b8:	6563      	str	r3, [r4, #84]	; 0x54
				need_out = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	6073      	str	r3, [r6, #4]
				system_state = 7;
 80019be:	2307      	movs	r3, #7
 80019c0:	e788      	b.n	80018d4 <state_machine+0x1e4>
				if(tick_fun() - state_time >= 300){
 80019c2:	f004 fbe7 	bl	8006194 <xTaskGetTickCount>
 80019c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019c8:	1ac0      	subs	r0, r0, r3
 80019ca:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80019ce:	d3dd      	bcc.n	800198c <state_machine+0x29c>
					state_time = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	6563      	str	r3, [r4, #84]	; 0x54
					state_progress += 10;
 80019d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019d6:	330a      	adds	r3, #10
 80019d8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80019da:	e7d7      	b.n	800198c <state_machine+0x29c>
	uint32_t sp_st = spinner_position;
 80019dc:	4e94      	ldr	r6, [pc, #592]	; (8001c30 <state_machine+0x540>)
	uint32_t spb_st = spinner_button_state;
 80019de:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
			if(need_out){
 80019e2:	e9d6 8300 	ldrd	r8, r3, [r6]
 80019e6:	b1e3      	cbz	r3, 8001a22 <state_machine+0x332>
				print_string_scaled_y(110, 90, state7_string, 0xFF00FFFF, 2);	
 80019e8:	f04f 0a02 	mov.w	sl, #2
				fill_screen(0xFF000000);
 80019ec:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80019f0:	f7ff fb8a 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 80019f4:	f7ff fe66 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(110, 90, state7_string, 0xFF00FFFF, 2);	
 80019f8:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 80019fc:	f106 0285 	add.w	r2, r6, #133	; 0x85
 8001a00:	215a      	movs	r1, #90	; 0x5a
 8001a02:	206e      	movs	r0, #110	; 0x6e
 8001a04:	f8cd a000 	str.w	sl, [sp]
 8001a08:	f7ff fb64 	bl	80010d4 <print_string_scaled_y>
				print_number(180, 130, system_angle, 0xFF00FFFF, 2);
 8001a0c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001a10:	f8cd a000 	str.w	sl, [sp]
 8001a14:	2182      	movs	r1, #130	; 0x82
 8001a16:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a18:	20b4      	movs	r0, #180	; 0xb4
 8001a1a:	f7ff fb82 	bl	8001122 <print_number>
				need_out = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6073      	str	r3, [r6, #4]
			if(!mem_sp_st){
 8001a22:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a24:	b95b      	cbnz	r3, 8001a3e <state_machine+0x34e>
					mem_sp_st = 0;
 8001a26:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
			if(spb_st){
 8001a2a:	f1b9 0f00 	cmp.w	r9, #0
 8001a2e:	f43f aeb1 	beq.w	8001794 <state_machine+0xa4>
				mem_sp_st = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	6623      	str	r3, [r4, #96]	; 0x60
				need_out = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	6073      	str	r3, [r6, #4]
				system_state = 8;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	e74a      	b.n	80018d4 <state_machine+0x1e4>
				if(mem_sp_st > sp_st){
 8001a3e:	4543      	cmp	r3, r8
 8001a40:	d91b      	bls.n	8001a7a <state_machine+0x38a>
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001a42:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a44:	eba3 0308 	sub.w	r3, r3, r8
					print_rectangle(180, 130, 100, 40, 0);
 8001a48:	f04f 0800 	mov.w	r8, #0
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001a4c:	ebb2 0343 	subs.w	r3, r2, r3, lsl #1
					print_rectangle(180, 130, 100, 40, 0);
 8001a50:	f04f 0264 	mov.w	r2, #100	; 0x64
						system_angle -= (mem_sp_st - sp_st)*2;
 8001a54:	bf58      	it	pl
 8001a56:	62f3      	strpl	r3, [r6, #44]	; 0x2c
					print_rectangle(180, 130, 100, 40, 0);
 8001a58:	2328      	movs	r3, #40	; 0x28
 8001a5a:	f8cd 8000 	str.w	r8, [sp]
					print_rectangle(180, 130, 20, 20, 0);
 8001a5e:	2182      	movs	r1, #130	; 0x82
 8001a60:	20b4      	movs	r0, #180	; 0xb4
 8001a62:	f7ff f928 	bl	8000cb6 <print_rectangle>
					print_number(180, 130, system_angle, 0xFF00FFFF, 2);
 8001a66:	2302      	movs	r3, #2
 8001a68:	2182      	movs	r1, #130	; 0x82
 8001a6a:	20b4      	movs	r0, #180	; 0xb4
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001a72:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a74:	f7ff fb55 	bl	8001122 <print_number>
 8001a78:	e7d5      	b.n	8001a26 <state_machine+0x336>
				}else if(mem_sp_st < sp_st){
 8001a7a:	d2d6      	bcs.n	8001a2a <state_machine+0x33a>
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001a7c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a7e:	eba8 0303 	sub.w	r3, r8, r3
					print_rectangle(180, 130, 20, 20, 0);
 8001a82:	f04f 0800 	mov.w	r8, #0
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001a86:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001a8a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
						system_angle += (sp_st - mem_sp_st)*2;
 8001a8e:	bf98      	it	ls
 8001a90:	62f3      	strls	r3, [r6, #44]	; 0x2c
					print_rectangle(180, 130, 20, 20, 0);
 8001a92:	2314      	movs	r3, #20
 8001a94:	f8cd 8000 	str.w	r8, [sp]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	e7e0      	b.n	8001a5e <state_machine+0x36e>
			if(need_out){
 8001a9c:	4e64      	ldr	r6, [pc, #400]	; (8001c30 <state_machine+0x540>)
 8001a9e:	6873      	ldr	r3, [r6, #4]
 8001aa0:	b1db      	cbz	r3, 8001ada <state_machine+0x3ea>
				fill_screen(0xFF000000);
 8001aa2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001aa6:	f7ff fb2f 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001aaa:	f7ff fe0b 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state8_string, 0xFF00FFFF, 2);
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f106 029c 	add.w	r2, r6, #156	; 0x9c
 8001ab4:	2164      	movs	r1, #100	; 0x64
 8001ab6:	20b4      	movs	r0, #180	; 0xb4
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001abe:	f7ff fb09 	bl	80010d4 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0xFF00FFFF);
 8001ac2:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ac6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001aca:	2196      	movs	r1, #150	; 0x96
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2064      	movs	r0, #100	; 0x64
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	f7ff f909 	bl	8000ce8 <print_rectangle_empty>
				need_out = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	6073      	str	r3, [r6, #4]
			if(!state_time){state_time = tick_fun();}else{
 8001ada:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001adc:	b9eb      	cbnz	r3, 8001b1a <state_machine+0x42a>
 8001ade:	f004 fb59 	bl	8006194 <xTaskGetTickCount>
 8001ae2:	6560      	str	r0, [r4, #84]	; 0x54
			if(state_progress){
 8001ae4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ae6:	2a00      	cmp	r2, #0
 8001ae8:	f43f ae54 	beq.w	8001794 <state_machine+0xa4>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0xFF00FFFF);
 8001aec:	230a      	movs	r3, #10
 8001aee:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 8001af2:	2064      	movs	r0, #100	; 0x64
 8001af4:	9100      	str	r1, [sp, #0]
 8001af6:	211c      	movs	r1, #28
 8001af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001afc:	434a      	muls	r2, r1
 8001afe:	2196      	movs	r1, #150	; 0x96
 8001b00:	f7ff f8d9 	bl	8000cb6 <print_rectangle>
			if(state_progress == 100){
 8001b04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	f47f ae44 	bne.w	8001794 <state_machine+0xa4>
				state_progress = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 8001b10:	6563      	str	r3, [r4, #84]	; 0x54
				need_out = 1;
 8001b12:	2301      	movs	r3, #1
 8001b14:	6073      	str	r3, [r6, #4]
				system_state = 9;
 8001b16:	2309      	movs	r3, #9
 8001b18:	e6dc      	b.n	80018d4 <state_machine+0x1e4>
				if(tick_fun() - state_time >= 300){
 8001b1a:	f004 fb3b 	bl	8006194 <xTaskGetTickCount>
 8001b1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b20:	1ac0      	subs	r0, r0, r3
 8001b22:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8001b26:	d3dd      	bcc.n	8001ae4 <state_machine+0x3f4>
					state_time = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	6563      	str	r3, [r4, #84]	; 0x54
					state_progress += 10;
 8001b2c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b2e:	330a      	adds	r3, #10
 8001b30:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001b32:	e7d7      	b.n	8001ae4 <state_machine+0x3f4>
			if(need_out){
 8001b34:	4e3e      	ldr	r6, [pc, #248]	; (8001c30 <state_machine+0x540>)
 8001b36:	6873      	ldr	r3, [r6, #4]
 8001b38:	b18b      	cbz	r3, 8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001b3a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b3e:	f7ff fae3 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001b42:	f7ff fdbf 	bl	80016c4 <print_fat_rectangle>
				print_string_scaled_y(165, 105, state9_string, 0xFF00FFFF, 2);
 8001b46:	2302      	movs	r3, #2
 8001b48:	f106 02a6 	add.w	r2, r6, #166	; 0xa6
 8001b4c:	2169      	movs	r1, #105	; 0x69
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	20a5      	movs	r0, #165	; 0xa5
 8001b52:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
				print_string_scaled_y(50, 180, state12_string_4, 0xFF00FFFF, 2);
 8001b56:	f7ff fabd 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	6073      	str	r3, [r6, #4]
			check_data();
 8001b5e:	07aa      	lsls	r2, r5, #30
 8001b60:	f140 80df 	bpl.w	8001d22 <state_machine+0x632>
 8001b64:	2301      	movs	r3, #1
 8001b66:	6073      	str	r3, [r6, #4]
 8001b68:	230a      	movs	r3, #10
 8001b6a:	e6b3      	b.n	80018d4 <state_machine+0x1e4>
			if(need_out){
 8001b6c:	4e30      	ldr	r6, [pc, #192]	; (8001c30 <state_machine+0x540>)
 8001b6e:	6873      	ldr	r3, [r6, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f4      	beq.n	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001b74:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001b78:	f7ff fac6 	bl	8001108 <fill_screen>
				print_string(10, 40, state10_string, 0xFF00FFFF);
 8001b7c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001b80:	f106 02b4 	add.w	r2, r6, #180	; 0xb4
 8001b84:	2128      	movs	r1, #40	; 0x28
 8001b86:	200a      	movs	r0, #10
 8001b88:	f7ff fa6e 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state10_string_2, 0xFF00FFFF, 3);
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	f106 02c8 	add.w	r2, r6, #200	; 0xc8
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
				print_string_scaled(10, 100, state17_string_2, 0xFF00FFFF, 3);
 8001b98:	2164      	movs	r1, #100	; 0x64
 8001b9a:	200a      	movs	r0, #10
 8001b9c:	f7ff fa7b 	bl	8001096 <print_string_scaled>
 8001ba0:	e7db      	b.n	8001b5a <state_machine+0x46a>
			if(need_out){
 8001ba2:	4e23      	ldr	r6, [pc, #140]	; (8001c30 <state_machine+0x540>)
 8001ba4:	6873      	ldr	r3, [r6, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0d9      	beq.n	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001baa:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001bae:	f7ff faab 	bl	8001108 <fill_screen>
				print_string(10, 40, state11_string, 0xFF00FFFF);
 8001bb2:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001bb6:	f106 02d1 	add.w	r2, r6, #209	; 0xd1
 8001bba:	2128      	movs	r1, #40	; 0x28
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f7ff fa53 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state11_string_2, 0xFF00FFFF, 3);
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001bce:	e7e3      	b.n	8001b98 <state_machine+0x4a8>
			if(need_out){
 8001bd0:	4e17      	ldr	r6, [pc, #92]	; (8001c30 <state_machine+0x540>)
 8001bd2:	6873      	ldr	r3, [r6, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0c2      	beq.n	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001bd8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
				print_string_scaled_y(10, 145, state12_string_3, 0xFF00FFFF, 2);
 8001bdc:	f04f 0802 	mov.w	r8, #2
				fill_screen(0xFF000000);
 8001be0:	f7ff fa92 	bl	8001108 <fill_screen>
				print_string(10, 40, state12_string, 0xFF00FFFF);
 8001be4:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001be8:	f106 02f9 	add.w	r2, r6, #249	; 0xf9
 8001bec:	2128      	movs	r1, #40	; 0x28
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f7ff fa3a 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state12_string_2, 0xFF00FFFF, 3);
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	f206 121b 	addw	r2, r6, #283	; 0x11b
 8001bfa:	2164      	movs	r1, #100	; 0x64
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c04:	f7ff fa47 	bl	8001096 <print_string_scaled>
				print_string_scaled_y(10, 145, state12_string_3, 0xFF00FFFF, 2);
 8001c08:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c0c:	f506 7294 	add.w	r2, r6, #296	; 0x128
 8001c10:	2191      	movs	r1, #145	; 0x91
 8001c12:	200a      	movs	r0, #10
 8001c14:	f8cd 8000 	str.w	r8, [sp]
 8001c18:	f7ff fa5c 	bl	80010d4 <print_string_scaled_y>
				print_string_scaled_y(50, 180, state12_string_4, 0xFF00FFFF, 2);
 8001c1c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c20:	f206 123f 	addw	r2, r6, #319	; 0x13f
 8001c24:	21b4      	movs	r1, #180	; 0xb4
 8001c26:	2032      	movs	r0, #50	; 0x32
 8001c28:	f8cd 8000 	str.w	r8, [sp]
 8001c2c:	e793      	b.n	8001b56 <state_machine+0x466>
 8001c2e:	bf00      	nop
 8001c30:	20000014 	.word	0x20000014
			if(need_out){
 8001c34:	4e50      	ldr	r6, [pc, #320]	; (8001d78 <state_machine+0x688>)
 8001c36:	6873      	ldr	r3, [r6, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d090      	beq.n	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001c3c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c40:	f7ff fa62 	bl	8001108 <fill_screen>
				print_string(10, 40, state13_string, 0xFF00FFFF);
 8001c44:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c48:	f506 72aa 	add.w	r2, r6, #340	; 0x154
 8001c4c:	2128      	movs	r1, #40	; 0x28
 8001c4e:	200a      	movs	r0, #10
 8001c50:	f7ff fa0a 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state13_string_2, 0xFF00FFFF, 3);
 8001c54:	2303      	movs	r3, #3
 8001c56:	f206 1271 	addw	r2, r6, #369	; 0x171
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c60:	e79a      	b.n	8001b98 <state_machine+0x4a8>
			if(need_out){
 8001c62:	4e45      	ldr	r6, [pc, #276]	; (8001d78 <state_machine+0x688>)
 8001c64:	6873      	ldr	r3, [r6, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f43f af79 	beq.w	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001c6c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c70:	f7ff fa4a 	bl	8001108 <fill_screen>
				print_string(10, 40, state14_string, 0xFF00FFFF);
 8001c74:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c78:	f506 72bd 	add.w	r2, r6, #378	; 0x17a
 8001c7c:	2128      	movs	r1, #40	; 0x28
 8001c7e:	200a      	movs	r0, #10
 8001c80:	f7ff f9f2 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state14_string_2, 0xFF00FFFF, 3);
 8001c84:	2303      	movs	r3, #3
 8001c86:	f506 72c6 	add.w	r2, r6, #396	; 0x18c
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c90:	e782      	b.n	8001b98 <state_machine+0x4a8>
			if(need_out){
 8001c92:	4e39      	ldr	r6, [pc, #228]	; (8001d78 <state_machine+0x688>)
 8001c94:	6873      	ldr	r3, [r6, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f43f af61 	beq.w	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001c9c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ca0:	f7ff fa32 	bl	8001108 <fill_screen>
				print_string(10, 40, state15_string, 0xFF00FFFF);
 8001ca4:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ca8:	f506 72ca 	add.w	r2, r6, #404	; 0x194
 8001cac:	2128      	movs	r1, #40	; 0x28
 8001cae:	200a      	movs	r0, #10
 8001cb0:	f7ff f9da 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state15_string_2, 0xFF00FFFF, 2);
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f206 12a9 	addw	r2, r6, #425	; 0x1a9
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001cc0:	e76a      	b.n	8001b98 <state_machine+0x4a8>
			if(need_out){
 8001cc2:	4e2d      	ldr	r6, [pc, #180]	; (8001d78 <state_machine+0x688>)
 8001cc4:	6873      	ldr	r3, [r6, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f43f af49 	beq.w	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001ccc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cd0:	f7ff fa1a 	bl	8001108 <fill_screen>
				print_string(10, 40, state16_string, 0xFF00FFFF);
 8001cd4:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001cd8:	f206 12b9 	addw	r2, r6, #441	; 0x1b9
 8001cdc:	2128      	movs	r1, #40	; 0x28
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f7ff f9c2 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state16_string_2, 0xFF00FFFF, 3);
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	f206 12cd 	addw	r2, r6, #461	; 0x1cd
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001cf0:	e752      	b.n	8001b98 <state_machine+0x4a8>
			if(need_out){
 8001cf2:	4e21      	ldr	r6, [pc, #132]	; (8001d78 <state_machine+0x688>)
 8001cf4:	6873      	ldr	r3, [r6, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f43f af31 	beq.w	8001b5e <state_machine+0x46e>
				fill_screen(0xFF000000);
 8001cfc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001d00:	f7ff fa02 	bl	8001108 <fill_screen>
				print_string(10, 40, state17_string, 0xFF00FFFF);
 8001d04:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001d08:	f206 12d5 	addw	r2, r6, #469	; 0x1d5
 8001d0c:	2128      	movs	r1, #40	; 0x28
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f7ff f9aa 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state17_string_2, 0xFF00FFFF, 3);
 8001d14:	2303      	movs	r3, #3
 8001d16:	f206 12f7 	addw	r2, r6, #503	; 0x1f7
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001d20:	e73a      	b.n	8001b98 <state_machine+0x4a8>
			check_data();
 8001d22:	06eb      	lsls	r3, r5, #27
 8001d24:	d503      	bpl.n	8001d2e <state_machine+0x63e>
 8001d26:	2301      	movs	r3, #1
 8001d28:	6073      	str	r3, [r6, #4]
 8001d2a:	230b      	movs	r3, #11
 8001d2c:	e5d2      	b.n	80018d4 <state_machine+0x1e4>
 8001d2e:	0628      	lsls	r0, r5, #24
 8001d30:	d503      	bpl.n	8001d3a <state_machine+0x64a>
 8001d32:	2301      	movs	r3, #1
 8001d34:	6073      	str	r3, [r6, #4]
 8001d36:	230c      	movs	r3, #12
 8001d38:	e5cc      	b.n	80018d4 <state_machine+0x1e4>
 8001d3a:	0569      	lsls	r1, r5, #21
 8001d3c:	d503      	bpl.n	8001d46 <state_machine+0x656>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	6073      	str	r3, [r6, #4]
 8001d42:	230d      	movs	r3, #13
 8001d44:	e5c6      	b.n	80018d4 <state_machine+0x1e4>
 8001d46:	076a      	lsls	r2, r5, #29
 8001d48:	d503      	bpl.n	8001d52 <state_machine+0x662>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	6073      	str	r3, [r6, #4]
 8001d4e:	230e      	movs	r3, #14
 8001d50:	e5c0      	b.n	80018d4 <state_machine+0x1e4>
 8001d52:	06ab      	lsls	r3, r5, #26
 8001d54:	d503      	bpl.n	8001d5e <state_machine+0x66e>
 8001d56:	2301      	movs	r3, #1
 8001d58:	6073      	str	r3, [r6, #4]
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	e5ba      	b.n	80018d4 <state_machine+0x1e4>
 8001d5e:	05e8      	lsls	r0, r5, #23
 8001d60:	d503      	bpl.n	8001d6a <state_machine+0x67a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	6073      	str	r3, [r6, #4]
 8001d66:	2310      	movs	r3, #16
 8001d68:	e5b4      	b.n	80018d4 <state_machine+0x1e4>
 8001d6a:	0529      	lsls	r1, r5, #20
 8001d6c:	f57f ad12 	bpl.w	8001794 <state_machine+0xa4>
 8001d70:	2301      	movs	r3, #1
 8001d72:	6073      	str	r3, [r6, #4]
 8001d74:	2311      	movs	r3, #17
 8001d76:	e5ad      	b.n	80018d4 <state_machine+0x1e4>
 8001d78:	20000014 	.word	0x20000014

08001d7c <tcp_ether_init>:
char mb_repl_buf[MB_ADU_MAXSIZE];



int tcp_ether_init(){
	conn = netconn_new(NETCONN_TCP);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2010      	movs	r0, #16
int tcp_ether_init(){
 8001d80:	b538      	push	{r3, r4, r5, lr}
	conn = netconn_new(NETCONN_TCP);
 8001d82:	4c0f      	ldr	r4, [pc, #60]	; (8001dc0 <tcp_ether_init+0x44>)
 8001d84:	4611      	mov	r1, r2
 8001d86:	f005 f8c9 	bl	8006f1c <netconn_new_with_proto_and_callback>
 8001d8a:	6660      	str	r0, [r4, #100]	; 0x64
	if(conn == NULL){return -1;}
 8001d8c:	b190      	cbz	r0, 8001db4 <tcp_ether_init+0x38>
	if(netconn_bind(conn, IP_ADDR_ANY, 502) == ERR_OK){
 8001d8e:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001d92:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <tcp_ether_init+0x48>)
 8001d94:	f005 f91c 	bl	8006fd0 <netconn_bind>
 8001d98:	b978      	cbnz	r0, 8001dba <tcp_ether_init+0x3e>
		netconn_listen(conn);
		for(;;){
			int stt = 228;
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8001d9a:	f104 0568 	add.w	r5, r4, #104	; 0x68
		netconn_listen(conn);
 8001d9e:	21ff      	movs	r1, #255	; 0xff
 8001da0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001da2:	f005 f93b 	bl	800701c <netconn_listen_with_backlog>
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8001da6:	4629      	mov	r1, r5
 8001da8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001daa:	f005 f965 	bl	8007078 <netconn_accept>
 8001dae:	2800      	cmp	r0, #0
 8001db0:	d1f9      	bne.n	8001da6 <tcp_ether_init+0x2a>
			}
		}
	}else{
		return -2;
	}
}
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
	if(conn == NULL){return -1;}
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001db8:	e7fb      	b.n	8001db2 <tcp_ether_init+0x36>
		return -2;
 8001dba:	f06f 0001 	mvn.w	r0, #1
 8001dbe:	e7f8      	b.n	8001db2 <tcp_ether_init+0x36>
 8001dc0:	20005978 	.word	0x20005978
 8001dc4:	080142f8 	.word	0x080142f8

08001dc8 <StartThread>:
  */

static void StartThread(void const * argument)
{
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001dc8:	2100      	movs	r1, #0
  ethernet_link_status_updated(&gnetif);

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);

  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001dca:	4d1b      	ldr	r5, [pc, #108]	; (8001e38 <StartThread+0x70>)
{
 8001dcc:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8001dce:	4608      	mov	r0, r1
{
 8001dd0:	b08d      	sub	sp, #52	; 0x34
  tcpip_init(NULL, NULL);
 8001dd2:	f006 f875 	bl	8007ec0 <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <StartThread+0x74>)
 8001dd8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001ddc:	a904      	add	r1, sp, #16
 8001dde:	4818      	ldr	r0, [pc, #96]	; (8001e40 <StartThread+0x78>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001de0:	ac07      	add	r4, sp, #28
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001de2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001de6:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001dea:	aa05      	add	r2, sp, #20
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001dec:	33c1      	adds	r3, #193	; 0xc1
 8001dee:	9306      	str	r3, [sp, #24]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <StartThread+0x7c>)
 8001df2:	9302      	str	r3, [sp, #8]
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <StartThread+0x80>)
 8001df6:	9301      	str	r3, [sp, #4]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	ab06      	add	r3, sp, #24
 8001dfe:	f008 ffb9 	bl	800ad74 <netif_add>
  netif_set_default(&gnetif);
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <StartThread+0x78>)
 8001e04:	f009 f846 	bl	800ae94 <netif_set_default>
  ethernet_link_status_updated(&gnetif);
 8001e08:	480d      	ldr	r0, [pc, #52]	; (8001e40 <StartThread+0x78>)
 8001e0a:	f7fe fc5d 	bl	80006c8 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001e0e:	490f      	ldr	r1, [pc, #60]	; (8001e4c <StartThread+0x84>)
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <StartThread+0x78>)
 8001e12:	f009 f8bd 	bl	800af90 <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1a:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8001e1c:	a807      	add	r0, sp, #28
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <StartThread+0x78>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001e20:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8001e22:	f004 fcd1 	bl	80067c8 <osThreadCreate>
  tcp_ether_init();
 8001e26:	f7ff ffa9 	bl	8001d7c <tcp_ether_init>
    state_machine();
 8001e2a:	f7ff fc61 	bl	80016f0 <state_machine>
    osDelay(10);
 8001e2e:	200a      	movs	r0, #10
 8001e30:	f004 fce7 	bl	8006802 <osDelay>
  for(;;){
 8001e34:	e7f9      	b.n	8001e2a <StartThread+0x62>
 8001e36:	bf00      	nop
 8001e38:	080105b8 	.word	0x080105b8
 8001e3c:	7b01a8c0 	.word	0x7b01a8c0
 8001e40:	200059e4 	.word	0x200059e4
 8001e44:	08007e61 	.word	0x08007e61
 8001e48:	080008c1 	.word	0x080008c1
 8001e4c:	080006c9 	.word	0x080006c9

08001e50 <main>:
{
 8001e50:	b500      	push	{lr}
 8001e52:	b09b      	sub	sp, #108	; 0x6c
  HAL_MPU_Disable();
  
  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e54:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8001e56:	f001 f8b1 	bl	8002fbc <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e5a:	2301      	movs	r3, #1
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e5c:	f240 1501 	movw	r5, #257	; 0x101

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e60:	a80e      	add	r0, sp, #56	; 0x38
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e62:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e66:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e6a:	9511      	str	r5, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001e6c:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001e70:	e9cd 430f 	strd	r4, r3, [sp, #60]	; 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e74:	f001 f8c0 	bl	8002ff8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001e78:	4b90      	ldr	r3, [pc, #576]	; (80020bc <main+0x26c>)
 8001e7a:	4891      	ldr	r0, [pc, #580]	; (80020c0 <main+0x270>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e7c:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001e80:	9411      	str	r4, [sp, #68]	; 0x44
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001e82:	4d90      	ldr	r5, [pc, #576]	; (80020c4 <main+0x274>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001e84:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e88:	a80e      	add	r0, sp, #56	; 0x38
 8001e8a:	f001 f8b5 	bl	8002ff8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e8e:	f240 2301 	movw	r3, #513	; 0x201
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e92:	a80e      	add	r0, sp, #56	; 0x38
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e94:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001e98:	4b8b      	ldr	r3, [pc, #556]	; (80020c8 <main+0x278>)
 8001e9a:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001e9e:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8001ea2:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ea4:	f001 f8a8 	bl	8002ff8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ea8:	f240 3301 	movw	r3, #769	; 0x301
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001eac:	a80e      	add	r0, sp, #56	; 0x38
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001eae:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001eb2:	4b86      	ldr	r3, [pc, #536]	; (80020cc <main+0x27c>)
 8001eb4:	e9cd 630f 	strd	r6, r3, [sp, #60]	; 0x3c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebc:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ebe:	f001 f89b 	bl	8002ff8 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ec2:	f240 4301 	movw	r3, #1025	; 0x401
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001ec6:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001eca:	a80e      	add	r0, sp, #56	; 0x38
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ecc:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001ed0:	4b7f      	ldr	r3, [pc, #508]	; (80020d0 <main+0x280>)
 8001ed2:	e9cd c30f 	strd	ip, r3, [sp, #60]	; 0x3c
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ed6:	4b7f      	ldr	r3, [pc, #508]	; (80020d4 <main+0x284>)
 8001ed8:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001eda:	f001 f88d 	bl	8002ff8 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001ede:	2004      	movs	r0, #4
 8001ee0:	f001 f87a 	bl	8002fd8 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ee4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ee8:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001eec:	4a7a      	ldr	r2, [pc, #488]	; (80020d8 <main+0x288>)
 8001eee:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ef2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001ef6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001efa:	6953      	ldr	r3, [r2, #20]
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f06:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001f0a:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f0e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f12:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f16:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f1a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f1e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001f22:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f24:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f28:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f2a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001f2e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f30:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8001f34:	d2f9      	bcs.n	8001f2a <main+0xda>
    } while(sets-- != 0U);
 8001f36:	3b20      	subs	r3, #32
 8001f38:	f113 0f20 	cmn.w	r3, #32
 8001f3c:	d1f2      	bne.n	8001f24 <main+0xd4>
 8001f3e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f42:	6953      	ldr	r3, [r2, #20]
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f48:	6153      	str	r3, [r2, #20]
 8001f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f4e:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8001f52:	f000 ffa5 	bl	8002ea0 <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f56:	2401      	movs	r4, #1
 8001f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f5c:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f5e:	2119      	movs	r1, #25
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f60:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f62:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f64:	e9cd 430e 	strd	r4, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f70:	e9cd 5314 	strd	r5, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f74:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f78:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	9319      	str	r3, [sp, #100]	; 0x64
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f80:	f002 fa90 	bl	80044a4 <HAL_RCC_OscConfig>
 8001f84:	b100      	cbz	r0, 8001f88 <main+0x138>
  while(1)
 8001f86:	e7fe      	b.n	8001f86 <main+0x136>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f88:	f002 fa54 	bl	8004434 <HAL_PWREx_EnableOverDrive>
 8001f8c:	b100      	cbz	r0, 8001f90 <main+0x140>
  while(1)
 8001f8e:	e7fe      	b.n	8001f8e <main+0x13e>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001f90:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001f92:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f96:	900b      	str	r0, [sp, #44]	; 0x2c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f98:	2107      	movs	r1, #7
 8001f9a:	a809      	add	r0, sp, #36	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8001fa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001fa8:	f002 fc68 	bl	800487c <HAL_RCC_ClockConfig>
 8001fac:	4606      	mov	r6, r0
 8001fae:	b100      	cbz	r0, 8001fb2 <main+0x162>
  while(1)
 8001fb0:	e7fe      	b.n	8001fb0 <main+0x160>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <main+0x28c>)
  LCD_UsrLog ((char *)"  Waiting ethernet connection...\n");
 8001fb4:	4d4a      	ldr	r5, [pc, #296]	; (80020e0 <main+0x290>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc0:	f002 0201 	and.w	r2, r2, #1
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fca:	f042 0202 	orr.w	r2, r2, #2
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd2:	f002 0202 	and.w	r2, r2, #2
 8001fd6:	9201      	str	r2, [sp, #4]
 8001fd8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	f042 0204 	orr.w	r2, r2, #4
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	f002 0204 	and.w	r2, r2, #4
 8001fe8:	9202      	str	r2, [sp, #8]
 8001fea:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	f042 0208 	orr.w	r2, r2, #8
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff6:	f002 0208 	and.w	r2, r2, #8
 8001ffa:	9203      	str	r2, [sp, #12]
 8001ffc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	f042 0210 	orr.w	r2, r2, #16
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	f002 0210 	and.w	r2, r2, #16
 800200c:	9204      	str	r2, [sp, #16]
 800200e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	f042 0220 	orr.w	r2, r2, #32
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
 8002018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201a:	f002 0220 	and.w	r2, r2, #32
 800201e:	9205      	str	r2, [sp, #20]
 8002020:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002028:	631a      	str	r2, [r3, #48]	; 0x30
 800202a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800202c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002030:	9206      	str	r2, [sp, #24]
 8002032:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002034:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
 800203c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002042:	9207      	str	r2, [sp, #28]
 8002044:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	9308      	str	r3, [sp, #32]
 8002056:	9b08      	ldr	r3, [sp, #32]
  BSP_LCD_Init();
 8002058:	f000 fd5e 	bl	8002b18 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 800205c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002060:	4620      	mov	r0, r4
 8002062:	f000 fadb 	bl	800261c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8002066:	4620      	mov	r0, r4
 8002068:	f000 fb14 	bl	8002694 <BSP_LCD_SelectLayer>
  LCD_UsrLog ((char *)"  Waiting ethernet connection...\n");
 800206c:	4c1d      	ldr	r4, [pc, #116]	; (80020e4 <main+0x294>)
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800206e:	481e      	ldr	r0, [pc, #120]	; (80020e8 <main+0x298>)
 8002070:	f000 fb2e 	bl	80026d0 <BSP_LCD_SetFont>
  LCD_LOG_Init();
 8002074:	f000 f8bc 	bl	80021f0 <LCD_LOG_Init>
  LCD_UsrLog ((char *)"  Waiting ethernet connection...\n");
 8002078:	481c      	ldr	r0, [pc, #112]	; (80020ec <main+0x29c>)
 800207a:	6025      	str	r5, [r4, #0]
 800207c:	f00d fa1c 	bl	800f4b8 <puts>
 LCD_LOG_SetHeader((uint8_t *)"Webserver Application Netconn API");
 8002080:	481b      	ldr	r0, [pc, #108]	; (80020f0 <main+0x2a0>)
 8002082:	f000 f8bf 	bl	8002204 <LCD_LOG_SetHeader>
 LCD_LOG_SetFooter((uint8_t *)"STM32746G-DISCO board");
 8002086:	481b      	ldr	r0, [pc, #108]	; (80020f4 <main+0x2a4>)
 8002088:	f000 f8f2 	bl	8002270 <LCD_LOG_SetFooter>
 LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 800208c:	6025      	str	r5, [r4, #0]
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 800208e:	4d1a      	ldr	r5, [pc, #104]	; (80020f8 <main+0x2a8>)
 8002090:	ac0e      	add	r4, sp, #56	; 0x38
 LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 8002092:	481a      	ldr	r0, [pc, #104]	; (80020fc <main+0x2ac>)
 8002094:	f00d fa10 	bl	800f4b8 <puts>
  spinner_GPIO_init();
 8002098:	f7ff fa54 	bl	8001544 <spinner_GPIO_init>
  switch_GPIO_init();
 800209c:	f7ff faf0 	bl	8001680 <switch_GPIO_init>
  keyboard_GPIO_init();
 80020a0:	f7ff f874 	bl	800118c <keyboard_GPIO_init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 80020a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a8:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 80020aa:	4631      	mov	r1, r6
 80020ac:	a80e      	add	r0, sp, #56	; 0x38
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 80020ae:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 80020b0:	f004 fb8a 	bl	80067c8 <osThreadCreate>
  osKernelStart();
 80020b4:	f004 fb7c 	bl	80067b0 <osKernelStart>
  for( ;; );
 80020b8:	e7fe      	b.n	80020b8 <main+0x268>
 80020ba:	bf00      	nop
 80020bc:	0301000d 	.word	0x0301000d
 80020c0:	20048000 	.word	0x20048000
 80020c4:	2004c000 	.word	0x2004c000
 80020c8:	03000009 	.word	0x03000009
 80020cc:	03000018 	.word	0x03000018
 80020d0:	0300000c 	.word	0x0300000c
 80020d4:	01000101 	.word	0x01000101
 80020d8:	e000ed00 	.word	0xe000ed00
 80020dc:	40023800 	.word	0x40023800
 80020e0:	ff000080 	.word	0xff000080
 80020e4:	20005c74 	.word	0x20005c74
 80020e8:	20001a24 	.word	0x20001a24
 80020ec:	08014534 	.word	0x08014534
 80020f0:	08014555 	.word	0x08014555
 80020f4:	08014577 	.word	0x08014577
 80020f8:	080105cc 	.word	0x080105cc
 80020fc:	0801458d 	.word	0x0801458d

08002100 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8002100:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002102:	2200      	movs	r2, #0
 8002104:	2036      	movs	r0, #54	; 0x36
{
 8002106:	b510      	push	{r4, lr}
 8002108:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800210a:	f000 ff17 	bl	8002f3c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800210e:	2036      	movs	r0, #54	; 0x36
 8002110:	f000 ff46 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002116:	a901      	add	r1, sp, #4
 8002118:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800211a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800211c:	f042 0210 	orr.w	r2, r2, #16
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800212c:	f002 fc5c 	bl	80049e8 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8002130:	9b06      	ldr	r3, [sp, #24]
 8002132:	b9c3      	cbnz	r3, 8002166 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002134:	f002 fc48 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8002138:	4c0f      	ldr	r4, [pc, #60]	; (8002178 <HAL_InitTick+0x78>)
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <HAL_InitTick+0x7c>)
 800213c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800213e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002142:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_InitTick+0x80>)
 8002146:	fbb0 f0f3 	udiv	r0, r0, r3
 800214a:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 800214c:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800214e:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8002150:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8002152:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8002156:	f003 f895 	bl	8005284 <HAL_TIM_Base_Init>
 800215a:	b940      	cbnz	r0, 800216e <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800215c:	4620      	mov	r0, r4
 800215e:	f002 ff43 	bl	8004fe8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002162:	b008      	add	sp, #32
 8002164:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002166:	f002 fc2f 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 800216a:	0040      	lsls	r0, r0, #1
 800216c:	e7e4      	b.n	8002138 <HAL_InitTick+0x38>
  return HAL_ERROR;
 800216e:	2001      	movs	r0, #1
 8002170:	e7f7      	b.n	8002162 <HAL_InitTick+0x62>
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	20005c28 	.word	0x20005c28
 800217c:	40001000 	.word	0x40001000
 8002180:	000f4240 	.word	0x000f4240

08002184 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8002184:	f000 be9e 	b.w	8002ec4 <HAL_IncTick>

08002188 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8002188:	4801      	ldr	r0, [pc, #4]	; (8002190 <TIM6_DAC_IRQHandler+0x8>)
 800218a:	f002 bf6f 	b.w	800506c <HAL_TIM_IRQHandler>
 800218e:	bf00      	nop
 8002190:	20005c28 	.word	0x20005c28

08002194 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002194:	4770      	bx	lr

08002196 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler>

08002198 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002198:	e7fe      	b.n	8002198 <MemManage_Handler>

0800219a <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler>

0800219c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800219c:	e7fe      	b.n	800219c <UsageFault_Handler>

0800219e <DebugMon_Handler>:
 800219e:	4770      	bx	lr

080021a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80021a0:	b508      	push	{r3, lr}
  get_current_keyboard_state();
 80021a2:	f7ff f847 	bl	8001234 <get_current_keyboard_state>
  get_current_spinner_button_state();
 80021a6:	f7ff f9f3 	bl	8001590 <get_current_spinner_button_state>
  get_spinner_position_change();
 80021aa:	f7ff fa0d 	bl	80015c8 <get_spinner_position_change>
  get_current_switch_state();
 80021ae:	f7ff fa79 	bl	80016a4 <get_current_switch_state>
  osSystickHandler();
}
 80021b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80021b6:	f004 bc24 	b.w	8006a02 <osSystickHandler>
	...

080021bc <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <ETH_IRQHandler+0x8>)
 80021be:	f001 bda9 	b.w	8003d14 <HAL_ETH_IRQHandler>
 80021c2:	bf00      	nop
 80021c4:	20001bc8 	.word	0x20001bc8

080021c8 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <LCD_LOG_DeInit+0x20>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 80021ca:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <LCD_LOG_DeInit+0x24>)
  LCD_CacheBuffer_yptr_invert= ENABLE;
 80021ce:	7399      	strb	r1, [r3, #14]
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 80021d0:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 80021d2:	2200      	movs	r2, #0
 80021d4:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
 80021d6:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
 80021d8:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
 80021da:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 80021dc:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
 80021de:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
 80021e0:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
 80021e2:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
 80021e4:	825a      	strh	r2, [r3, #18]
}
 80021e6:	4770      	bx	lr
 80021e8:	20005c74 	.word	0x20005c74
 80021ec:	ff000080 	.word	0xff000080

080021f0 <LCD_LOG_Init>:
{
 80021f0:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 80021f2:	f7ff ffe9 	bl	80021c8 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80021f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80021fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 80021fe:	f000 ba7f 	b.w	8002700 <BSP_LCD_Clear>
	...

08002204 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8002204:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8002206:	4c16      	ldr	r4, [pc, #88]	; (8002260 <LCD_LOG_SetHeader+0x5c>)
{
 8002208:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800220a:	4e16      	ldr	r6, [pc, #88]	; (8002264 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 800220c:	4620      	mov	r0, r4
 800220e:	f000 fa5f 	bl	80026d0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8002212:	4630      	mov	r0, r6
 8002214:	f000 fa44 	bl	80026a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 8002218:	f000 f9e8 	bl	80025ec <BSP_LCD_GetXSize>
 800221c:	88e3      	ldrh	r3, [r4, #6]
 800221e:	2100      	movs	r1, #0
 8002220:	b282      	uxth	r2, r0
 8002222:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002226:	4608      	mov	r0, r1
 8002228:	b29b      	uxth	r3, r3
 800222a:	f000 fb81 	bl	8002930 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 800222e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002232:	f000 fa35 	bl	80026a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8002236:	4630      	mov	r0, r6
 8002238:	f000 fa3e 	bl	80026b8 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 800223c:	462a      	mov	r2, r5
 800223e:	88e1      	ldrh	r1, [r4, #6]
 8002240:	2301      	movs	r3, #1
 8002242:	2000      	movs	r0, #0
 8002244:	f000 fb00 	bl	8002848 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8002248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800224c:	f000 fa34 	bl	80026b8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <LCD_LOG_SetHeader+0x64>)
 8002252:	f000 fa25 	bl	80026a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <LCD_LOG_SetHeader+0x68>)
}
 8002258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800225c:	f000 ba38 	b.w	80026d0 <BSP_LCD_SetFont>
 8002260:	20001a3c 	.word	0x20001a3c
 8002264:	ff0000ff 	.word	0xff0000ff
 8002268:	ff000080 	.word	0xff000080
 800226c:	20001a34 	.word	0x20001a34

08002270 <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 8002270:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8002272:	4c1d      	ldr	r4, [pc, #116]	; (80022e8 <LCD_LOG_SetFooter+0x78>)
{
 8002274:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8002276:	4e1d      	ldr	r6, [pc, #116]	; (80022ec <LCD_LOG_SetFooter+0x7c>)
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8002278:	4620      	mov	r0, r4
 800227a:	f000 fa29 	bl	80026d0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800227e:	4630      	mov	r0, r6
 8002280:	f000 fa0e 	bl	80026a0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8002284:	f000 f9be 	bl	8002604 <BSP_LCD_GetYSize>
 8002288:	88e1      	ldrh	r1, [r4, #6]
 800228a:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 800228e:	31fc      	adds	r1, #252	; 0xfc
 8002290:	4401      	add	r1, r0
 8002292:	b289      	uxth	r1, r1
 8002294:	9101      	str	r1, [sp, #4]
 8002296:	f000 f9a9 	bl	80025ec <BSP_LCD_GetXSize>
 800229a:	88e3      	ldrh	r3, [r4, #6]
 800229c:	b282      	uxth	r2, r0
 800229e:	9901      	ldr	r1, [sp, #4]
 80022a0:	2000      	movs	r0, #0
 80022a2:	3304      	adds	r3, #4
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	f000 fb43 	bl	8002930 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80022aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ae:	f000 f9f7 	bl	80026a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80022b2:	4630      	mov	r0, r6
 80022b4:	f000 fa00 	bl	80026b8 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 80022b8:	f000 f9a4 	bl	8002604 <BSP_LCD_GetYSize>
 80022bc:	88e1      	ldrh	r1, [r4, #6]
 80022be:	2301      	movs	r3, #1
 80022c0:	462a      	mov	r2, r5
 80022c2:	1a41      	subs	r1, r0, r1
 80022c4:	2000      	movs	r0, #0
 80022c6:	b289      	uxth	r1, r1
 80022c8:	f000 fabe 	bl	8002848 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d0:	f000 f9f2 	bl	80026b8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80022d4:	4806      	ldr	r0, [pc, #24]	; (80022f0 <LCD_LOG_SetFooter+0x80>)
 80022d6:	f000 f9e3 	bl	80026a0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80022da:	4620      	mov	r0, r4
}
 80022dc:	b002      	add	sp, #8
 80022de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80022e2:	f000 b9f5 	b.w	80026d0 <BSP_LCD_SetFont>
 80022e6:	bf00      	nop
 80022e8:	20001a34 	.word	0x20001a34
 80022ec:	ff0000ff 	.word	0xff0000ff
 80022f0:	ff000080 	.word	0xff000080

080022f4 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 80022f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 80022f8:	4c1b      	ldr	r4, [pc, #108]	; (8002368 <LCD_LOG_UpdateDisplay+0x74>)
 80022fa:	4f1c      	ldr	r7, [pc, #112]	; (800236c <LCD_LOG_UpdateDisplay+0x78>)
 80022fc:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 80022fe:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d811      	bhi.n	8002328 <LCD_LOG_UpdateDisplay+0x34>
 8002304:	4293      	cmp	r3, r2
 8002306:	d311      	bcc.n	800232c <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8002308:	2584      	movs	r5, #132	; 0x84
 800230a:	fb05 7303 	mla	r3, r5, r3, r7
 800230e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002312:	f000 f9c5 	bl	80026a0 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8002316:	8921      	ldrh	r1, [r4, #8]
 8002318:	1d08      	adds	r0, r1, #4
 800231a:	fb05 7101 	mla	r1, r5, r1, r7
 800231e:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8002320:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 8002324:	f000 baf2 	b.w	800290c <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8002328:	4293      	cmp	r3, r2
 800232a:	d201      	bcs.n	8002330 <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 800232c:	3375      	adds	r3, #117	; 0x75
 800232e:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 8002330:	3b10      	subs	r3, #16
 8002332:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 8002334:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8002338:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 800233c:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 800233e:	19a5      	adds	r5, r4, r6
 8002340:	fbb5 f1f8 	udiv	r1, r5, r8
 8002344:	fb08 5511 	mls	r5, r8, r1, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8002348:	fb09 7505 	mla	r5, r9, r5, r7
 800234c:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 8002350:	f000 f9a6 	bl	80026a0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8002354:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8002356:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 8002358:	4629      	mov	r1, r5
 800235a:	b280      	uxth	r0, r0
 800235c:	f000 fad6 	bl	800290c <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8002360:	2e11      	cmp	r6, #17
 8002362:	d1ec      	bne.n	800233e <LCD_LOG_UpdateDisplay+0x4a>
}
 8002364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002368:	20005c74 	.word	0x20005c74
 800236c:	20005c88 	.word	0x20005c88

08002370 <__io_putchar>:
{
 8002370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 8002374:	4c37      	ldr	r4, [pc, #220]	; (8002454 <__io_putchar+0xe4>)
{
 8002376:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8002378:	f000 f9b6 	bl	80026e8 <BSP_LCD_GetFont>
 800237c:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 800237e:	7c23      	ldrb	r3, [r4, #16]
 8002380:	b9e3      	cbnz	r3, 80023bc <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 8002382:	7be2      	ldrb	r2, [r4, #15]
 8002384:	2a01      	cmp	r2, #1
 8002386:	d106      	bne.n	8002396 <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8002388:	89a2      	ldrh	r2, [r4, #12]
      LCD_ScrollActive = DISABLE;
 800238a:	73e3      	strb	r3, [r4, #15]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800238c:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800238e:	8962      	ldrh	r2, [r4, #10]
      LCD_Scrolled = DISABLE;
 8002390:	7463      	strb	r3, [r4, #17]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8002392:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollBackStep = 0;
 8002394:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8002396:	88a6      	ldrh	r6, [r4, #4]
 8002398:	f000 f928 	bl	80025ec <BSP_LCD_GetXSize>
 800239c:	88bb      	ldrh	r3, [r7, #4]
 800239e:	fbb0 f0f3 	udiv	r0, r0, r3
 80023a2:	4286      	cmp	r6, r0
 80023a4:	4e2c      	ldr	r6, [pc, #176]	; (8002458 <__io_putchar+0xe8>)
 80023a6:	d20c      	bcs.n	80023c2 <__io_putchar+0x52>
 80023a8:	2d0a      	cmp	r5, #10
 80023aa:	d00a      	beq.n	80023c2 <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80023ac:	88a2      	ldrh	r2, [r4, #4]
 80023ae:	8923      	ldrh	r3, [r4, #8]
 80023b0:	1c51      	adds	r1, r2, #1
 80023b2:	80a1      	strh	r1, [r4, #4]
 80023b4:	2184      	movs	r1, #132	; 0x84
 80023b6:	fb01 6603 	mla	r6, r1, r3, r6
 80023ba:	54b5      	strb	r5, [r6, r2]
}
 80023bc:	4628      	mov	r0, r5
 80023be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 80023c2:	88e3      	ldrh	r3, [r4, #6]
 80023c4:	8922      	ldrh	r2, [r4, #8]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d808      	bhi.n	80023dc <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 80023ca:	7ba2      	ldrb	r2, [r4, #14]
 80023cc:	2a00      	cmp	r2, #0
 80023ce:	d133      	bne.n	8002438 <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 80023d0:	3301      	adds	r3, #1
 80023d2:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 80023d4:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 80023d6:	bf14      	ite	ne
 80023d8:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 80023da:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80023dc:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80023e0:	f04f 0984 	mov.w	r9, #132	; 0x84
 80023e4:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80023e8:	f000 f900 	bl	80025ec <BSP_LCD_GetXSize>
 80023ec:	88bb      	ldrh	r3, [r7, #4]
 80023ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80023f2:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80023f4:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80023f6:	d822      	bhi.n	800243e <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80023f8:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 80023fa:	2700      	movs	r7, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80023fc:	fb02 6303 	mla	r3, r2, r3, r6
 8002400:	6822      	ldr	r2, [r4, #0]
      LCD_CacheBuffer_xptr = 0;
 8002402:	80a7      	strh	r7, [r4, #4]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8002404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 8002408:	f7ff ff74 	bl	80022f4 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 800240c:	8923      	ldrh	r3, [r4, #8]
 800240e:	3301      	adds	r3, #1
 8002410:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8002412:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 8002414:	bf09      	itett	eq
 8002416:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 8002418:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 800241a:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 800241c:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800241e:	bf08      	it	eq
 8002420:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 8002422:	2d0a      	cmp	r5, #10
 8002424:	d0ca      	beq.n	80023bc <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8002426:	88a3      	ldrh	r3, [r4, #4]
 8002428:	8922      	ldrh	r2, [r4, #8]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	80a1      	strh	r1, [r4, #4]
 800242e:	2184      	movs	r1, #132	; 0x84
 8002430:	fb01 6602 	mla	r6, r1, r2, r6
 8002434:	54f5      	strb	r5, [r6, r3]
 8002436:	e7c1      	b.n	80023bc <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	73a3      	strb	r3, [r4, #14]
 800243c:	e7ce      	b.n	80023dc <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800243e:	88a2      	ldrh	r2, [r4, #4]
 8002440:	fb09 6303 	mla	r3, r9, r3, r6
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8002444:	f108 0801 	add.w	r8, r8, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8002448:	1c51      	adds	r1, r2, #1
 800244a:	f803 a002 	strb.w	sl, [r3, r2]
 800244e:	80a1      	strh	r1, [r4, #4]
 8002450:	e7ca      	b.n	80023e8 <__io_putchar+0x78>
 8002452:	bf00      	nop
 8002454:	20005c74 	.word	0x20005c74
 8002458:	20005c88 	.word	0x20005c88

0800245c <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800245c:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800245e:	b170      	cbz	r0, 800247e <LAN8742_RegisterBusIO+0x22>
 8002460:	68cc      	ldr	r4, [r1, #12]
 8002462:	b164      	cbz	r4, 800247e <LAN8742_RegisterBusIO+0x22>
 8002464:	688a      	ldr	r2, [r1, #8]
 8002466:	b152      	cbz	r2, 800247e <LAN8742_RegisterBusIO+0x22>
 8002468:	690b      	ldr	r3, [r1, #16]
 800246a:	b143      	cbz	r3, 800247e <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 800246c:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 800246e:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8002470:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002472:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 8002474:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002476:	e9c0 2404 	strd	r2, r4, [r0, #16]

  return LAN8742_STATUS_OK;
 800247a:	2000      	movs	r0, #0
}
 800247c:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 800247e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002482:	e7fb      	b.n	800247c <LAN8742_RegisterBusIO+0x20>

08002484 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002484:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8002486:	2400      	movs	r4, #0
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 8002488:	6846      	ldr	r6, [r0, #4]
 {
 800248a:	4605      	mov	r5, r0
   uint32_t regvalue = 0, addr = 0;
 800248c:	9401      	str	r4, [sp, #4]
   if(pObj->Is_Initialized == 0)
 800248e:	bb06      	cbnz	r6, 80024d2 <LAN8742_Init+0x4e>
   {
     if(pObj->IO.Init != 0)
 8002490:	6883      	ldr	r3, [r0, #8]
 8002492:	b103      	cbz	r3, 8002496 <LAN8742_Init+0x12>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002494:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002496:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8002498:	2400      	movs	r4, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800249a:	602b      	str	r3, [r5, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800249c:	696b      	ldr	r3, [r5, #20]
 800249e:	aa01      	add	r2, sp, #4
 80024a0:	2112      	movs	r1, #18
 80024a2:	4630      	mov	r0, r6
 80024a4:	4798      	blx	r3
 80024a6:	2800      	cmp	r0, #0
 80024a8:	db09      	blt.n	80024be <LAN8742_Init+0x3a>
         /* Can't read from this device address
            continue with next address */
         continue;
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80024aa:	9b01      	ldr	r3, [sp, #4]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	42b3      	cmp	r3, r6
 80024b2:	d106      	bne.n	80024c2 <LAN8742_Init+0x3e>
       {
         pObj->DevAddr = addr;
 80024b4:	602e      	str	r6, [r5, #0]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       pObj->Is_Initialized = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	2400      	movs	r4, #0
 80024ba:	606b      	str	r3, [r5, #4]
 80024bc:	e009      	b.n	80024d2 <LAN8742_Init+0x4e>
         status = LAN8742_STATUS_READ_ERROR;
 80024be:	f06f 0404 	mvn.w	r4, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024c2:	3601      	adds	r6, #1
 80024c4:	2e20      	cmp	r6, #32
 80024c6:	d1e9      	bne.n	800249c <LAN8742_Init+0x18>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	2b1f      	cmp	r3, #31
 80024cc:	d804      	bhi.n	80024d8 <LAN8742_Init+0x54>
     if(status == LAN8742_STATUS_OK)
 80024ce:	2c00      	cmp	r4, #0
 80024d0:	d0f1      	beq.n	80024b6 <LAN8742_Init+0x32>
     }
   }

   return status;
 }
 80024d2:	4620      	mov	r0, r4
 80024d4:	b002      	add	sp, #8
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024d8:	f06f 0402 	mvn.w	r4, #2
   return status;
 80024dc:	e7f9      	b.n	80024d2 <LAN8742_Init+0x4e>

080024de <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80024de:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 80024e0:	2500      	movs	r5, #0

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024e2:	6943      	ldr	r3, [r0, #20]
{
 80024e4:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024e6:	aa01      	add	r2, sp, #4
 80024e8:	2101      	movs	r1, #1
 80024ea:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 80024ec:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024ee:	4798      	blx	r3
 80024f0:	42a8      	cmp	r0, r5
 80024f2:	da03      	bge.n	80024fc <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80024f4:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 80024f8:	b003      	add	sp, #12
 80024fa:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80024fc:	6963      	ldr	r3, [r4, #20]
 80024fe:	aa01      	add	r2, sp, #4
 8002500:	2101      	movs	r1, #1
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	4798      	blx	r3
 8002506:	2800      	cmp	r0, #0
 8002508:	dbf4      	blt.n	80024f4 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800250a:	9b01      	ldr	r3, [sp, #4]
 800250c:	075b      	lsls	r3, r3, #29
 800250e:	d52c      	bpl.n	800256a <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002510:	6963      	ldr	r3, [r4, #20]
 8002512:	aa01      	add	r2, sp, #4
 8002514:	4629      	mov	r1, r5
 8002516:	6820      	ldr	r0, [r4, #0]
 8002518:	4798      	blx	r3
 800251a:	2800      	cmp	r0, #0
 800251c:	dbea      	blt.n	80024f4 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	04dd      	lsls	r5, r3, #19
 8002522:	d40e      	bmi.n	8002542 <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002524:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8002528:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 800252c:	d101      	bne.n	8002532 <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800252e:	2002      	movs	r0, #2
 8002530:	e7e2      	b.n	80024f8 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002532:	0498      	lsls	r0, r3, #18
 8002534:	d501      	bpl.n	800253a <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002536:	2003      	movs	r0, #3
 8002538:	e7de      	b.n	80024f8 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800253a:	05d9      	lsls	r1, r3, #23
 800253c:	d513      	bpl.n	8002566 <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800253e:	2004      	movs	r0, #4
 8002540:	e7da      	b.n	80024f8 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002542:	6963      	ldr	r3, [r4, #20]
 8002544:	aa01      	add	r2, sp, #4
 8002546:	211f      	movs	r1, #31
 8002548:	6820      	ldr	r0, [r4, #0]
 800254a:	4798      	blx	r3
 800254c:	2800      	cmp	r0, #0
 800254e:	dbd1      	blt.n	80024f4 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002550:	9b01      	ldr	r3, [sp, #4]
 8002552:	04da      	lsls	r2, r3, #19
 8002554:	d50b      	bpl.n	800256e <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002556:	f003 031c 	and.w	r3, r3, #28
 800255a:	2b18      	cmp	r3, #24
 800255c:	d0e7      	beq.n	800252e <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800255e:	2b08      	cmp	r3, #8
 8002560:	d0e9      	beq.n	8002536 <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002562:	2b14      	cmp	r3, #20
 8002564:	d0eb      	beq.n	800253e <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002566:	2005      	movs	r0, #5
 8002568:	e7c6      	b.n	80024f8 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;
 800256a:	2001      	movs	r0, #1
 800256c:	e7c4      	b.n	80024f8 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800256e:	2006      	movs	r0, #6
 8002570:	e7c2      	b.n	80024f8 <LAN8742_GetLinkState+0x1a>
	...

08002574 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002574:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002578:	4c1a      	ldr	r4, [pc, #104]	; (80025e4 <LL_FillBuffer+0x70>)
{
 800257a:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800257c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 8002580:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002582:	2234      	movs	r2, #52	; 0x34
{
 8002584:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002586:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002588:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800258a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
 800258e:	460e      	mov	r6, r1
 8002590:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002594:	fb02 4303 	mla	r3, r2, r3, r4
 8002598:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800259c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800259e:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80025a0:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80025a2:	bf18      	it	ne
 80025a4:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <LL_FillBuffer+0x74>)
 80025a8:	60a5      	str	r5, [r4, #8]
 80025aa:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80025ac:	f000 fe53 	bl	8003256 <HAL_DMA2D_Init>
 80025b0:	b9a0      	cbnz	r0, 80025dc <LL_FillBuffer+0x68>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80025b2:	4649      	mov	r1, r9
 80025b4:	4620      	mov	r0, r4
 80025b6:	f000 ff15 	bl	80033e4 <HAL_DMA2D_ConfigLayer>
 80025ba:	b978      	cbnz	r0, 80025dc <LL_FillBuffer+0x68>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80025bc:	463b      	mov	r3, r7
 80025be:	4632      	mov	r2, r6
 80025c0:	4651      	mov	r1, sl
 80025c2:	4620      	mov	r0, r4
 80025c4:	f8cd 8000 	str.w	r8, [sp]
 80025c8:	f000 fe71 	bl	80032ae <HAL_DMA2D_Start>
 80025cc:	b930      	cbnz	r0, 80025dc <LL_FillBuffer+0x68>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80025ce:	210a      	movs	r1, #10
 80025d0:	4620      	mov	r0, r4
      }
    }
  } 
}
 80025d2:	b002      	add	sp, #8
 80025d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80025d8:	f000 be83 	b.w	80032e2 <HAL_DMA2D_PollForTransfer>
}
 80025dc:	b002      	add	sp, #8
 80025de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025e2:	bf00      	nop
 80025e4:	200098dc 	.word	0x200098dc
 80025e8:	4002b000 	.word	0x4002b000

080025ec <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <BSP_LCD_GetXSize+0x14>)
 80025ee:	2134      	movs	r1, #52	; 0x34
 80025f0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80025f4:	fb01 3302 	mla	r3, r1, r2, r3
}
 80025f8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	200098dc 	.word	0x200098dc

08002604 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <BSP_LCD_GetYSize+0x14>)
 8002606:	2134      	movs	r1, #52	; 0x34
 8002608:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800260c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002610:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	200098dc 	.word	0x200098dc

0800261c <BSP_LCD_LayerDefaultInit>:
{     
 800261c:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 800261e:	2400      	movs	r4, #0
{     
 8002620:	b08e      	sub	sp, #56	; 0x38
 8002622:	460e      	mov	r6, r1
 8002624:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 8002626:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002628:	f7ff ffe0 	bl	80025ec <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 800262c:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002630:	f7ff ffe8 	bl	8002604 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 8002634:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002636:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
 800263a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 800263e:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
 8002642:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
 8002644:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002648:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800264c:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800264e:	4c0f      	ldr	r4, [pc, #60]	; (800268c <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002650:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002654:	f7ff ffca 	bl	80025ec <BSP_LCD_GetXSize>
 8002658:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800265a:	f7ff ffd3 	bl	8002604 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800265e:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002660:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002662:	a901      	add	r1, sp, #4
 8002664:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002668:	f001 fe94 	bl	8004394 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800266c:	200c      	movs	r0, #12
 800266e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002672:	fb00 4005 	mla	r0, r0, r5, r4
 8002676:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <BSP_LCD_LayerDefaultInit+0x74>)
 800267c:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002680:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002684:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
 8002688:	b00e      	add	sp, #56	; 0x38
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	200098dc 	.word	0x200098dc
 8002690:	20001a24 	.word	0x20001a24

08002694 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8002694:	4b01      	ldr	r3, [pc, #4]	; (800269c <BSP_LCD_SelectLayer+0x8>)
 8002696:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
 800269a:	4770      	bx	lr
 800269c:	200098dc 	.word	0x200098dc

080026a0 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <BSP_LCD_SetTextColor+0x14>)
 80026a2:	210c      	movs	r1, #12
 80026a4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80026a8:	fb01 3302 	mla	r3, r1, r2, r3
 80026ac:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	200098dc 	.word	0x200098dc

080026b8 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 80026b8:	4b04      	ldr	r3, [pc, #16]	; (80026cc <BSP_LCD_SetBackColor+0x14>)
 80026ba:	210c      	movs	r1, #12
 80026bc:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80026c0:	fb01 3302 	mla	r3, r1, r2, r3
 80026c4:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	200098dc 	.word	0x200098dc

080026d0 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <BSP_LCD_SetFont+0x14>)
 80026d2:	210c      	movs	r1, #12
 80026d4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80026d8:	fb01 3302 	mla	r3, r1, r2, r3
 80026dc:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	200098dc 	.word	0x200098dc

080026e8 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <BSP_LCD_GetFont+0x14>)
 80026ea:	210c      	movs	r1, #12
 80026ec:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80026f0:	fb01 3302 	mla	r3, r1, r2, r3
}
 80026f4:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	200098dc 	.word	0x200098dc

08002700 <BSP_LCD_Clear>:
{ 
 8002700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002702:	4c0c      	ldr	r4, [pc, #48]	; (8002734 <BSP_LCD_Clear+0x34>)
{ 
 8002704:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002706:	f7ff ff71 	bl	80025ec <BSP_LCD_GetXSize>
 800270a:	9003      	str	r0, [sp, #12]
 800270c:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
 8002710:	f7ff ff78 	bl	8002604 <BSP_LCD_GetYSize>
 8002714:	2134      	movs	r1, #52	; 0x34
 8002716:	4603      	mov	r3, r0
 8002718:	9501      	str	r5, [sp, #4]
 800271a:	4630      	mov	r0, r6
 800271c:	fb01 4406 	mla	r4, r1, r6, r4
 8002720:	2100      	movs	r1, #0
 8002722:	9a03      	ldr	r2, [sp, #12]
 8002724:	9100      	str	r1, [sp, #0]
 8002726:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800272a:	f7ff ff23 	bl	8002574 <LL_FillBuffer>
}
 800272e:	b004      	add	sp, #16
 8002730:	bd70      	pop	{r4, r5, r6, pc}
 8002732:	bf00      	nop
 8002734:	200098dc 	.word	0x200098dc

08002738 <BSP_LCD_DrawPixel>:
{
 8002738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800273c:	4d0d      	ldr	r5, [pc, #52]	; (8002774 <BSP_LCD_DrawPixel+0x3c>)
{
 800273e:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002740:	2234      	movs	r2, #52	; 0x34
{
 8002742:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002744:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
 8002748:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800274a:	fb02 5503 	mla	r5, r2, r3, r5
 800274e:	f7ff ff4d 	bl	80025ec <BSP_LCD_GetXSize>
 8002752:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002756:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800275a:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800275e:	2b02      	cmp	r3, #2
 8002760:	d104      	bne.n	800276c <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002762:	b2a4      	uxth	r4, r4
 8002764:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
 8002768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800276c:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
 8002770:	e7fa      	b.n	8002768 <BSP_LCD_DrawPixel+0x30>
 8002772:	bf00      	nop
 8002774:	200098dc 	.word	0x200098dc

08002778 <BSP_LCD_DisplayChar>:
{
 8002778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800277c:	4f31      	ldr	r7, [pc, #196]	; (8002844 <BSP_LCD_DisplayChar+0xcc>)
{
 800277e:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002780:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 8002782:	f04f 0900 	mov.w	r9, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002786:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
{
 800278a:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800278e:	210c      	movs	r1, #12
 8002790:	fb01 7303 	mla	r3, r1, r3, r7
 8002794:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002798:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 800279c:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 80027a0:	f10b 0607 	add.w	r6, fp, #7
 80027a4:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80027a6:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80027aa:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 80027ac:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 80027b0:	fb06 5502 	mla	r5, r6, r2, r5
 80027b4:	b2c3      	uxtb	r3, r0
 80027b6:	9300      	str	r3, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 80027b8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80027bc:	9304      	str	r3, [sp, #16]
 80027be:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 80027c0:	45d1      	cmp	r9, sl
 80027c2:	eb03 0109 	add.w	r1, r3, r9
 80027c6:	b289      	uxth	r1, r1
 80027c8:	d302      	bcc.n	80027d0 <BSP_LCD_DisplayChar+0x58>
}
 80027ca:	b007      	add	sp, #28
 80027cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80027d0:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 80027d2:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 80027d4:	d004      	beq.n	80027e0 <BSP_LCD_DisplayChar+0x68>
 80027d6:	2e02      	cmp	r6, #2
 80027d8:	d10e      	bne.n	80027f8 <BSP_LCD_DisplayChar+0x80>
      line =  (pchar[0]<< 8) | pchar[1];      
 80027da:	882c      	ldrh	r4, [r5, #0]
 80027dc:	ba64      	rev16	r4, r4
 80027de:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 80027e0:	9b04      	ldr	r3, [sp, #16]
    for (j = 0; j < width; j++)
 80027e2:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 80027e6:	9a00      	ldr	r2, [sp, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 80027ec:	45c3      	cmp	fp, r8
 80027ee:	d80a      	bhi.n	8002806 <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 80027f0:	f109 0901 	add.w	r9, r9, #1
 80027f4:	4435      	add	r5, r6
 80027f6:	e7e2      	b.n	80027be <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80027f8:	786a      	ldrb	r2, [r5, #1]
 80027fa:	0424      	lsls	r4, r4, #16
 80027fc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8002800:	78aa      	ldrb	r2, [r5, #2]
 8002802:	4314      	orrs	r4, r2
      break;
 8002804:	e7ec      	b.n	80027e0 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8002806:	9b01      	ldr	r3, [sp, #4]
 8002808:	f04f 0c01 	mov.w	ip, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800280c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002810:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 8002814:	9b03      	ldr	r3, [sp, #12]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002816:	9105      	str	r1, [sp, #20]
      if(line & (1 << (width- j + offset- 1))) 
 8002818:	eba3 0e08 	sub.w	lr, r3, r8
 800281c:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 800281e:	f108 0801 	add.w	r8, r8, #1
      if(line & (1 << (width- j + offset- 1))) 
 8002822:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002826:	ea1c 0f04 	tst.w	ip, r4
 800282a:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800282e:	fb0c 7202 	mla	r2, ip, r2, r7
 8002832:	bf14      	ite	ne
 8002834:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002838:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 800283c:	f7ff ff7c 	bl	8002738 <BSP_LCD_DrawPixel>
 8002840:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8002842:	e7d3      	b.n	80027ec <BSP_LCD_DisplayChar+0x74>
 8002844:	200098dc 	.word	0x200098dc

08002848 <BSP_LCD_DisplayStringAt>:
{
 8002848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800284c:	4699      	mov	r9, r3
 800284e:	4605      	mov	r5, r0
 8002850:	460f      	mov	r7, r1
 8002852:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
 8002854:	4613      	mov	r3, r2
 8002856:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8002858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800285c:	2a00      	cmp	r2, #0
 800285e:	d1fa      	bne.n	8002856 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002860:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002908 <BSP_LCD_DisplayStringAt+0xc0>
 8002864:	f7ff fec2 	bl	80025ec <BSP_LCD_GetXSize>
 8002868:	220c      	movs	r2, #12
  switch (Mode)
 800286a:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800286e:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
 8002872:	fb02 8303 	mla	r3, r2, r3, r8
 8002876:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800287a:	889b      	ldrh	r3, [r3, #4]
 800287c:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 8002880:	d026      	beq.n	80028d0 <BSP_LCD_DisplayStringAt+0x88>
 8002882:	f1b9 0f02 	cmp.w	r9, #2
 8002886:	d02a      	beq.n	80028de <BSP_LCD_DisplayStringAt+0x96>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002888:	b22b      	sxth	r3, r5
    ref_column = 1;
 800288a:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800288e:	240c      	movs	r4, #12
    ref_column = 1;
 8002890:	2b00      	cmp	r3, #0
 8002892:	bfd8      	it	le
 8002894:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002896:	f7ff fea9 	bl	80025ec <BSP_LCD_GetXSize>
 800289a:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
 800289e:	fa1f f289 	uxth.w	r2, r9
 80028a2:	f816 a009 	ldrb.w	sl, [r6, r9]
 80028a6:	fb04 8303 	mla	r3, r4, r3, r8
 80028aa:	f109 0901 	add.w	r9, r9, #1
 80028ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	fb03 0012 	mls	r0, r3, r2, r0
 80028b8:	b280      	uxth	r0, r0
 80028ba:	4298      	cmp	r0, r3
 80028bc:	bf34      	ite	cc
 80028be:	2000      	movcc	r0, #0
 80028c0:	2001      	movcs	r0, #1
 80028c2:	f1ba 0f00 	cmp.w	sl, #0
 80028c6:	bf08      	it	eq
 80028c8:	2000      	moveq	r0, #0
 80028ca:	b970      	cbnz	r0, 80028ea <BSP_LCD_DisplayStringAt+0xa2>
}
 80028cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80028d0:	1b34      	subs	r4, r6, r4
 80028d2:	4420      	add	r0, r4
 80028d4:	4358      	muls	r0, r3
 80028d6:	eb05 0050 	add.w	r0, r5, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80028da:	b285      	uxth	r5, r0
      break;
 80028dc:	e7d4      	b.n	8002888 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80028de:	1b34      	subs	r4, r6, r4
 80028e0:	4404      	add	r4, r0
 80028e2:	fb14 f403 	smulbb	r4, r4, r3
 80028e6:	1b60      	subs	r0, r4, r5
 80028e8:	e7f7      	b.n	80028da <BSP_LCD_DisplayStringAt+0x92>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80028ea:	4628      	mov	r0, r5
 80028ec:	4652      	mov	r2, sl
 80028ee:	4639      	mov	r1, r7
 80028f0:	f7ff ff42 	bl	8002778 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80028f4:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
 80028f8:	fb04 8303 	mla	r3, r4, r3, r8
 80028fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002900:	8898      	ldrh	r0, [r3, #4]
 8002902:	4428      	add	r0, r5
 8002904:	b285      	uxth	r5, r0
    i++;
 8002906:	e7c6      	b.n	8002896 <BSP_LCD_DisplayStringAt+0x4e>
 8002908:	200098dc 	.word	0x200098dc

0800290c <BSP_LCD_DisplayStringAtLine>:
{  
 800290c:	b513      	push	{r0, r1, r4, lr}
 800290e:	4604      	mov	r4, r0
 8002910:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002912:	f7ff fee9 	bl	80026e8 <BSP_LCD_GetFont>
 8002916:	88c3      	ldrh	r3, [r0, #6]
 8002918:	9a01      	ldr	r2, [sp, #4]
 800291a:	2000      	movs	r0, #0
 800291c:	fb13 f104 	smulbb	r1, r3, r4
 8002920:	2303      	movs	r3, #3
 8002922:	b289      	uxth	r1, r1
}
 8002924:	b002      	add	sp, #8
 8002926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800292a:	f7ff bf8d 	b.w	8002848 <BSP_LCD_DisplayStringAt>
	...

08002930 <BSP_LCD_FillRect>:
{
 8002930:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002934:	4d1c      	ldr	r5, [pc, #112]	; (80029a8 <BSP_LCD_FillRect+0x78>)
{
 8002936:	4616      	mov	r6, r2
 8002938:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800293a:	220c      	movs	r2, #12
 800293c:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
 8002940:	4604      	mov	r4, r0
 8002942:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002944:	fb02 5303 	mla	r3, r2, r3, r5
 8002948:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800294c:	f7ff fea8 	bl	80026a0 <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002950:	f8d5 70e8 	ldr.w	r7, [r5, #232]	; 0xe8
 8002954:	2334      	movs	r3, #52	; 0x34
 8002956:	fb03 5307 	mla	r3, r3, r7, r5
 800295a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800295e:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
 8002962:	2a02      	cmp	r2, #2
 8002964:	d118      	bne.n	8002998 <BSP_LCD_FillRect+0x68>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002966:	f7ff fe41 	bl	80025ec <BSP_LCD_GetXSize>
 800296a:	fb09 4000 	mla	r0, r9, r0, r4
 800296e:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002972:	f7ff fe3b 	bl	80025ec <BSP_LCD_GetXSize>
 8002976:	210c      	movs	r1, #12
 8002978:	1b80      	subs	r0, r0, r6
 800297a:	4632      	mov	r2, r6
 800297c:	fb01 5107 	mla	r1, r1, r7, r5
 8002980:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
 8002984:	4651      	mov	r1, sl
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	4638      	mov	r0, r7
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	4643      	mov	r3, r8
 800298e:	f7ff fdf1 	bl	8002574 <LL_FillBuffer>
}
 8002992:	b002      	add	sp, #8
 8002994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002998:	f7ff fe28 	bl	80025ec <BSP_LCD_GetXSize>
 800299c:	fb09 4000 	mla	r0, r9, r0, r4
 80029a0:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 80029a4:	e7e5      	b.n	8002972 <BSP_LCD_FillRect+0x42>
 80029a6:	bf00      	nop
 80029a8:	200098dc 	.word	0x200098dc

080029ac <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029ac:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029ae:	484c      	ldr	r0, [pc, #304]	; (8002ae0 <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029b2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 80029b6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029b8:	645a      	str	r2, [r3, #68]	; 0x44
{
 80029ba:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029be:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80029c0:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029c2:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029c4:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80029c8:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80029cc:	4e45      	ldr	r6, [pc, #276]	; (8002ae4 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80029ce:	9200      	str	r2, [sp, #0]
 80029d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80029d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029d4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80029d8:	631a      	str	r2, [r3, #48]	; 0x30
 80029da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029dc:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80029e0:	9201      	str	r2, [sp, #4]
 80029e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029e6:	f042 0210 	orr.w	r2, r2, #16
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
 80029ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ee:	f002 0210 	and.w	r2, r2, #16
 80029f2:	9202      	str	r2, [sp, #8]
 80029f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029fc:	631a      	str	r2, [r3, #48]	; 0x30
 80029fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a00:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002a04:	9203      	str	r2, [sp, #12]
 8002a06:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a12:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002a16:	9204      	str	r2, [sp, #16]
 8002a18:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
 8002a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a24:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002a28:	9205      	str	r2, [sp, #20]
 8002a2a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
 8002a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a36:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002a3a:	9206      	str	r2, [sp, #24]
 8002a3c:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
 8002a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a48:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002a4c:	9207      	str	r2, [sp, #28]
 8002a4e:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a5a:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	9308      	str	r3, [sp, #32]
 8002a62:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a64:	2310      	movs	r3, #16
 8002a66:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002a6c:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a70:	f001 faae 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002a74:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a76:	a909      	add	r1, sp, #36	; 0x24
 8002a78:	481b      	ldr	r0, [pc, #108]	; (8002ae8 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002a7a:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a7c:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a80:	f001 faa6 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002a84:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a88:	a909      	add	r1, sp, #36	; 0x24
 8002a8a:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002a8c:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a8e:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a92:	f001 fa9d 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002a96:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002a9a:	a909      	add	r1, sp, #36	; 0x24
 8002a9c:	4813      	ldr	r0, [pc, #76]	; (8002aec <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002a9e:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002aa0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002aa4:	f001 fa94 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002aa8:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002aaa:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002aac:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002aae:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ab0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002ab4:	4c0e      	ldr	r4, [pc, #56]	; (8002af0 <BSP_LCD_MspInit+0x144>)
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f001 fa8a 	bl	8003fd0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002abc:	a909      	add	r1, sp, #36	; 0x24
 8002abe:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002ac0:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ac2:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002ac4:	f001 fa84 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002ac8:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002aca:	a909      	add	r1, sp, #36	; 0x24
 8002acc:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002ace:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002ad2:	f001 fa7d 	bl	8003fd0 <HAL_GPIO_Init>
}
 8002ad6:	b00f      	add	sp, #60	; 0x3c
 8002ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40021800 	.word	0x40021800
 8002aec:	40022400 	.word	0x40022400
 8002af0:	40022800 	.word	0x40022800

08002af4 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002af4:	4807      	ldr	r0, [pc, #28]	; (8002b14 <BSP_LCD_ClockConfig+0x20>)
 8002af6:	2308      	movs	r3, #8
 8002af8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002afc:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002afe:	f500 7082 	add.w	r0, r0, #260	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b02:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002b04:	2305      	movs	r3, #5
 8002b06:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002b08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0c:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b0e:	f001 bf89 	b.w	8004a24 <HAL_RCCEx_PeriphCLKConfig>
 8002b12:	bf00      	nop
 8002b14:	200098dc 	.word	0x200098dc

08002b18 <BSP_LCD_Init>:
{    
 8002b18:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b1a:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002b1c:	4c24      	ldr	r4, [pc, #144]	; (8002bb0 <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b1e:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b20:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b22:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b26:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002b2a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002b2e:	230b      	movs	r3, #11
 8002b30:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b34:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b38:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002b3a:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b3e:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b42:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002b46:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002b4a:	f7ff ffd3 	bl	8002af4 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b4e:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8002b52:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8002b56:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002b58:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002b62:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002b66:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b6a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
 8002b6e:	4b11      	ldr	r3, [pc, #68]	; (8002bb4 <BSP_LCD_Init+0x9c>)
 8002b70:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002b74:	f001 fc5b 	bl	800442e <HAL_LTDC_GetState>
 8002b78:	4601      	mov	r1, r0
 8002b7a:	b918      	cbnz	r0, 8002b84 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002b7c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002b80:	f7ff ff14 	bl	80029ac <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002b84:	480c      	ldr	r0, [pc, #48]	; (8002bb8 <BSP_LCD_Init+0xa0>)
 8002b86:	f001 fb99 	bl	80042bc <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b90:	480a      	ldr	r0, [pc, #40]	; (8002bbc <BSP_LCD_Init+0xa4>)
 8002b92:	f001 fb07 	bl	80041a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002b96:	2201      	movs	r2, #1
 8002b98:	2108      	movs	r1, #8
 8002b9a:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <BSP_LCD_Init+0xa8>)
 8002b9c:	f001 fb02 	bl	80041a4 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002ba0:	f000 f918 	bl	8002dd4 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ba4:	4807      	ldr	r0, [pc, #28]	; (8002bc4 <BSP_LCD_Init+0xac>)
 8002ba6:	f7ff fd93 	bl	80026d0 <BSP_LCD_SetFont>
}
 8002baa:	2000      	movs	r0, #0
 8002bac:	bd10      	pop	{r4, pc}
 8002bae:	bf00      	nop
 8002bb0:	200098dc 	.word	0x200098dc
 8002bb4:	40016800 	.word	0x40016800
 8002bb8:	2000991c 	.word	0x2000991c
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40022800 	.word	0x40022800
 8002bc4:	20001a24 	.word	0x20001a24

08002bc8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002bc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bcc:	4c21      	ldr	r4, [pc, #132]	; (8002c54 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002bce:	2710      	movs	r7, #16
 8002bd0:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8002bd2:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bd6:	19e5      	adds	r5, r4, r7
 8002bd8:	4621      	mov	r1, r4
{
 8002bda:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be0:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8002be2:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002be6:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002bea:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bee:	f002 f9c2 	bl	8004f76 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	f000 f978 	bl	8002ee8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002bf8:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c00:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c02:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002c06:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c0a:	f002 f9b4 	bl	8004f76 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c0e:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c10:	4621      	mov	r1, r4
 8002c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c16:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c18:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8002c1c:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8002c1e:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c22:	f002 f9a8 	bl	8004f76 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002c26:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002c30:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002c32:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c34:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8002c36:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c38:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8002c3c:	9b01      	ldr	r3, [sp, #4]
 8002c3e:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c40:	f002 f999 	bl	8004f76 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c44:	4649      	mov	r1, r9
 8002c46:	4628      	mov	r0, r5
}
 8002c48:	b003      	add	sp, #12
 8002c4a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c4e:	f002 b9b1 	b.w	8004fb4 <HAL_SDRAM_ProgramRefreshRate>
 8002c52:	bf00      	nop
 8002c54:	20009a64 	.word	0x20009a64

08002c58 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c58:	4b55      	ldr	r3, [pc, #340]	; (8002db0 <BSP_SDRAM_MspInit+0x158>)
 8002c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
{  
 8002c60:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8002c64:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8002c68:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002c6a:	a909      	add	r1, sp, #36	; 0x24
 8002c6c:	4851      	ldr	r0, [pc, #324]	; (8002db4 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c6e:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002c72:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c74:	9201      	str	r2, [sp, #4]
 8002c76:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8002c78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c82:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c86:	9202      	str	r2, [sp, #8]
 8002c88:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8c:	f042 0204 	orr.w	r2, r2, #4
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
 8002c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c94:	f002 0204 	and.w	r2, r2, #4
 8002c98:	9203      	str	r2, [sp, #12]
 8002c9a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9e:	f042 0208 	orr.w	r2, r2, #8
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca6:	f002 0208 	and.w	r2, r2, #8
 8002caa:	9204      	str	r2, [sp, #16]
 8002cac:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb0:	f042 0210 	orr.w	r2, r2, #16
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb8:	f002 0210 	and.w	r2, r2, #16
 8002cbc:	9205      	str	r2, [sp, #20]
 8002cbe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc2:	f042 0220 	orr.w	r2, r2, #32
 8002cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cca:	f002 0220 	and.w	r2, r2, #32
 8002cce:	9206      	str	r2, [sp, #24]
 8002cd0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cdc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002ce0:	9207      	str	r2, [sp, #28]
 8002ce2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ce4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002cec:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	9308      	str	r3, [sp, #32]
 8002cf6:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002cfe:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d00:	230c      	movs	r3, #12
 8002d02:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002d04:	2308      	movs	r3, #8
 8002d06:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002d08:	f001 f962 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002d0c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d10:	a909      	add	r1, sp, #36	; 0x24
 8002d12:	4829      	ldr	r0, [pc, #164]	; (8002db8 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002d14:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d16:	f001 f95b 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d1a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d1e:	a909      	add	r1, sp, #36	; 0x24
 8002d20:	4826      	ldr	r0, [pc, #152]	; (8002dbc <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d22:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d24:	f001 f954 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d28:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d2c:	a909      	add	r1, sp, #36	; 0x24
 8002d2e:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d30:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d32:	f001 f94d 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d36:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d3a:	a909      	add	r1, sp, #36	; 0x24
 8002d3c:	4821      	ldr	r0, [pc, #132]	; (8002dc4 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d3e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d40:	f001 f946 	bl	8003fd0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002d44:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002d46:	a909      	add	r1, sp, #36	; 0x24
 8002d48:	481f      	ldr	r0, [pc, #124]	; (8002dc8 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002d4a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002d4c:	f001 f940 	bl	8003fd0 <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002d50:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d52:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d54:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d58:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d5c:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002d5e:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002d60:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002d62:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d6a:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d72:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002d76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002d7a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002d7e:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002d80:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002d84:	4a12      	ldr	r2, [pc, #72]	; (8002dd0 <BSP_SDRAM_MspInit+0x178>)
 8002d86:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002d8a:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002d8c:	6335      	str	r5, [r6, #48]	; 0x30
 8002d8e:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8002d90:	f000 f9f4 	bl	800317c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002d94:	4628      	mov	r0, r5
 8002d96:	f000 f971 	bl	800307c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002d9a:	4622      	mov	r2, r4
 8002d9c:	210f      	movs	r1, #15
 8002d9e:	2038      	movs	r0, #56	; 0x38
 8002da0:	f000 f8cc 	bl	8002f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002da4:	2038      	movs	r0, #56	; 0x38
 8002da6:	f000 f8fb 	bl	8002fa0 <HAL_NVIC_EnableIRQ>
}
 8002daa:	b00e      	add	sp, #56	; 0x38
 8002dac:	bd70      	pop	{r4, r5, r6, pc}
 8002dae:	bf00      	nop
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020800 	.word	0x40020800
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	40021400 	.word	0x40021400
 8002dc4:	40021800 	.word	0x40021800
 8002dc8:	40021c00 	.word	0x40021c00
 8002dcc:	20009a64 	.word	0x20009a64
 8002dd0:	40026410 	.word	0x40026410

08002dd4 <BSP_SDRAM_Init>:
{ 
 8002dd4:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8002dd8:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002dda:	4c1b      	ldr	r4, [pc, #108]	; (8002e48 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8002ddc:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002dde:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002de0:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002de4:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8002de6:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002de8:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8002dea:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8002dee:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8002df2:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002df6:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 8002df8:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002dfc:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002e00:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002e02:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002e06:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002e0a:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e0c:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002e14:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002e18:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002e1c:	f7ff ff1c 	bl	8002c58 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002e20:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8002e24:	4c09      	ldr	r4, [pc, #36]	; (8002e4c <BSP_SDRAM_Init+0x78>)
 8002e26:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8002e2a:	f002 f884 	bl	8004f36 <HAL_SDRAM_Init>
 8002e2e:	3800      	subs	r0, #0
 8002e30:	bf18      	it	ne
 8002e32:	2001      	movne	r0, #1
 8002e34:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002e36:	f240 6003 	movw	r0, #1539	; 0x603
 8002e3a:	f7ff fec5 	bl	8002bc8 <BSP_SDRAM_Initialization_sequence>
}
 8002e3e:	7820      	ldrb	r0, [r4, #0]
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	bf00      	nop
 8002e44:	a0000140 	.word	0xa0000140
 8002e48:	20009a64 	.word	0x20009a64
 8002e4c:	20001a4c 	.word	0x20001a4c

08002e50 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e50:	490f      	ldr	r1, [pc, #60]	; (8002e90 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e52:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e54:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002e60:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <SystemInit+0x44>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	f042 0201 	orr.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002e6a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e76:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e78:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <SystemInit+0x48>)
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e82:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e84:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e8a:	608b      	str	r3, [r1, #8]
#endif
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	40023800 	.word	0x40023800
 8002e98:	24003010 	.word	0x24003010

08002e9c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea2:	2003      	movs	r0, #3
{
 8002ea4:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eac:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eae:	f000 f833 	bl	8002f18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eb2:	200f      	movs	r0, #15
 8002eb4:	f7ff f924 	bl	8002100 <HAL_InitTick>
  HAL_MspInit();
 8002eb8:	f7ff fff0 	bl	8002e9c <HAL_MspInit>
}
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	bd08      	pop	{r3, pc}
 8002ec0:	40023c00 	.word	0x40023c00

08002ec4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002ec4:	4a03      	ldr	r2, [pc, #12]	; (8002ed4 <HAL_IncTick+0x10>)
 8002ec6:	4b04      	ldr	r3, [pc, #16]	; (8002ed8 <HAL_IncTick+0x14>)
 8002ec8:	6811      	ldr	r1, [r2, #0]
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	440b      	add	r3, r1
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20009b84 	.word	0x20009b84
 8002ed8:	20001a54 	.word	0x20001a54

08002edc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002edc:	4b01      	ldr	r3, [pc, #4]	; (8002ee4 <HAL_GetTick+0x8>)
 8002ede:	6818      	ldr	r0, [r3, #0]
}
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20009b84 	.word	0x20009b84

08002ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002eec:	f7ff fff6 	bl	8002edc <HAL_GetTick>
 8002ef0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002ef4:	bf1e      	ittt	ne
 8002ef6:	4b04      	ldrne	r3, [pc, #16]	; (8002f08 <HAL_Delay+0x20>)
 8002ef8:	781b      	ldrbne	r3, [r3, #0]
 8002efa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002efc:	f7ff ffee 	bl	8002edc <HAL_GetTick>
 8002f00:	1b43      	subs	r3, r0, r5
 8002f02:	42a3      	cmp	r3, r4
 8002f04:	d3fa      	bcc.n	8002efc <HAL_Delay+0x14>
  {
  }
}
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	20001a54 	.word	0x20001a54

08002f0c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8002f0c:	4b01      	ldr	r3, [pc, #4]	; (8002f14 <HAL_GetREVID+0x8>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
}
 8002f10:	0c00      	lsrs	r0, r0, #16
 8002f12:	4770      	bx	lr
 8002f14:	e0042000 	.word	0xe0042000

08002f18 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f18:	4907      	ldr	r1, [pc, #28]	; (8002f38 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f26:	0412      	lsls	r2, r2, #16
 8002f28:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002f34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f36:	4770      	bx	lr
 8002f38:	e000ed00 	.word	0xe000ed00

08002f3c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3e:	b530      	push	{r4, r5, lr}
 8002f40:	68dc      	ldr	r4, [r3, #12]
 8002f42:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f46:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f4c:	2d04      	cmp	r5, #4
 8002f4e:	bf28      	it	cs
 8002f50:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f52:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f58:	bf8c      	ite	hi
 8002f5a:	3c03      	subhi	r4, #3
 8002f5c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002f62:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f64:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f68:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f6c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f70:	fa01 f104 	lsl.w	r1, r1, r4
 8002f74:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002f7c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002f7e:	db06      	blt.n	8002f8e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f80:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002f84:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002f88:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002f8c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	f000 000f 	and.w	r0, r0, #15
 8002f92:	4a02      	ldr	r2, [pc, #8]	; (8002f9c <HAL_NVIC_SetPriority+0x60>)
 8002f94:	5413      	strb	r3, [r2, r0]
 8002f96:	e7f9      	b.n	8002f8c <HAL_NVIC_SetPriority+0x50>
 8002f98:	e000ed00 	.word	0xe000ed00
 8002f9c:	e000ed14 	.word	0xe000ed14

08002fa0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	db08      	blt.n	8002fb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fa4:	0942      	lsrs	r2, r0, #5
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f000 001f 	and.w	r0, r0, #31
 8002fac:	fa03 f000 	lsl.w	r0, r3, r0
 8002fb0:	4b01      	ldr	r3, [pc, #4]	; (8002fb8 <HAL_NVIC_EnableIRQ+0x18>)
 8002fb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002fb6:	4770      	bx	lr
 8002fb8:	e000e100 	.word	0xe000e100

08002fbc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002fbc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <HAL_MPU_Disable+0x18>)
 8002fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_MPU_Enable+0x1c>)
 8002fda:	f040 0001 	orr.w	r0, r0, #1
 8002fde:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002fea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002fee:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002ff8:	7843      	ldrb	r3, [r0, #1]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <HAL_MPU_ConfigRegion+0x54>)
 8002ffc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003000:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800300c:	6843      	ldr	r3, [r0, #4]
 800300e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003012:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003014:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003016:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003018:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800301c:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800301e:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003020:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003022:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003026:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003028:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800302c:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800302e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003032:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003034:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003038:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800303a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800303e:	7a01      	ldrb	r1, [r0, #8]
 8003040:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003044:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003050:	6803      	ldr	r3, [r0, #0]
{
 8003052:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003054:	2018      	movs	r0, #24
 8003056:	b2d9      	uxtb	r1, r3
 8003058:	3910      	subs	r1, #16
 800305a:	fbb1 f0f0 	udiv	r0, r1, r0
{
 800305e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003060:	4c05      	ldr	r4, [pc, #20]	; (8003078 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8003062:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003064:	5c20      	ldrb	r0, [r4, r0]
 8003066:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003068:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 800306c:	f020 0003 	bic.w	r0, r0, #3
 8003070:	bf88      	it	hi
 8003072:	3004      	addhi	r0, #4
 8003074:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003076:	bd10      	pop	{r4, pc}
 8003078:	080142d4 	.word	0x080142d4

0800307c <HAL_DMA_Init>:
{
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003080:	f7ff ff2c 	bl	8002edc <HAL_GetTick>
 8003084:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003086:	2c00      	cmp	r4, #0
 8003088:	d062      	beq.n	8003150 <HAL_DMA_Init+0xd4>
  hdma->State = HAL_DMA_STATE_BUSY;
 800308a:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 800308c:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800308e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8003092:	2300      	movs	r3, #0
 8003094:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003098:	6813      	ldr	r3, [r2, #0]
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030a0:	6821      	ldr	r1, [r4, #0]
 80030a2:	680b      	ldr	r3, [r1, #0]
 80030a4:	07d8      	lsls	r0, r3, #31
 80030a6:	d42f      	bmi.n	8003108 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80030a8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030aa:	4d33      	ldr	r5, [pc, #204]	; (8003178 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ac:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030ae:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030b0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	68e2      	ldr	r2, [r4, #12]
 80030b8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030ba:	6922      	ldr	r2, [r4, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	6962      	ldr	r2, [r4, #20]
 80030c0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c2:	69e2      	ldr	r2, [r4, #28]
 80030c4:	4303      	orrs	r3, r0
 80030c6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80030c8:	6a22      	ldr	r2, [r4, #32]
 80030ca:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80030ce:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030d4:	bf02      	ittt	eq
 80030d6:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80030da:	4335      	orreq	r5, r6
 80030dc:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030de:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 80030e0:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80030e2:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030e4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80030e8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ec:	d136      	bne.n	800315c <HAL_DMA_Init+0xe0>
    tmp |= hdma->Init.FIFOThreshold;
 80030ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80030f2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030f4:	b395      	cbz	r5, 800315c <HAL_DMA_Init+0xe0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030f6:	b990      	cbnz	r0, 800311e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80030f8:	2a01      	cmp	r2, #1
 80030fa:	d021      	beq.n	8003140 <HAL_DMA_Init+0xc4>
 80030fc:	f032 0202 	bics.w	r2, r2, #2
 8003100:	d12c      	bne.n	800315c <HAL_DMA_Init+0xe0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003102:	01ea      	lsls	r2, r5, #7
 8003104:	d52a      	bpl.n	800315c <HAL_DMA_Init+0xe0>
 8003106:	e01e      	b.n	8003146 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003108:	f7ff fee8 	bl	8002edc <HAL_GetTick>
 800310c:	1b40      	subs	r0, r0, r5
 800310e:	2805      	cmp	r0, #5
 8003110:	d9c6      	bls.n	80030a0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003112:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003114:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003116:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003118:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800311c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800311e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8003122:	d117      	bne.n	8003154 <HAL_DMA_Init+0xd8>
    switch (tmp)
 8003124:	2a03      	cmp	r2, #3
 8003126:	d819      	bhi.n	800315c <HAL_DMA_Init+0xe0>
 8003128:	a001      	add	r0, pc, #4	; (adr r0, 8003130 <HAL_DMA_Init+0xb4>)
 800312a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003147 	.word	0x08003147
 8003134:	08003103 	.word	0x08003103
 8003138:	08003147 	.word	0x08003147
 800313c:	08003141 	.word	0x08003141
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003140:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003144:	d10a      	bne.n	800315c <HAL_DMA_Init+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003146:	2340      	movs	r3, #64	; 0x40
 8003148:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8003150:	2001      	movs	r0, #1
 8003152:	e7e3      	b.n	800311c <HAL_DMA_Init+0xa0>
    switch (tmp)
 8003154:	2a02      	cmp	r2, #2
 8003156:	d9f6      	bls.n	8003146 <HAL_DMA_Init+0xca>
 8003158:	2a03      	cmp	r2, #3
 800315a:	d0d2      	beq.n	8003102 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800315c:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315e:	4620      	mov	r0, r4
 8003160:	f7ff ff76 	bl	8003050 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003166:	233f      	movs	r3, #63	; 0x3f
 8003168:	4093      	lsls	r3, r2
 800316a:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800316e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003172:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003176:	e7d1      	b.n	800311c <HAL_DMA_Init+0xa0>
 8003178:	f010803f 	.word	0xf010803f

0800317c <HAL_DMA_DeInit>:
{
 800317c:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800317e:	4605      	mov	r5, r0
 8003180:	b320      	cbz	r0, 80031cc <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003182:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003186:	2b02      	cmp	r3, #2
 8003188:	b2dc      	uxtb	r4, r3
 800318a:	d01d      	beq.n	80031c8 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 800318c:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800318e:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003198:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800319a:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 800319c:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800319e:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80031a0:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80031a2:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80031a4:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a6:	f7ff ff53 	bl	8003050 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031aa:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80031ac:	233f      	movs	r3, #63	; 0x3f
 80031ae:	4093      	lsls	r3, r2
 80031b0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031b2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80031b4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80031b8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80031bc:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80031c0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80031c4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 80031c8:	4620      	mov	r0, r4
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80031cc:	2401      	movs	r4, #1
 80031ce:	e7fb      	b.n	80031c8 <HAL_DMA_DeInit+0x4c>

080031d0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80031d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80031d2:	6804      	ldr	r4, [r0, #0]
 80031d4:	9d04      	ldr	r5, [sp, #16]
 80031d6:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80031d8:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80031dc:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80031e0:	4333      	orrs	r3, r6
 80031e2:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80031e4:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80031e6:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80031e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031ec:	d130      	bne.n	8003250 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80031ee:	6886      	ldr	r6, [r0, #8]
 80031f0:	b11e      	cbz	r6, 80031fa <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80031f2:	2e01      	cmp	r6, #1
 80031f4:	d103      	bne.n	80031fe <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80031f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80031fa:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80031fe:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003200:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003204:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003208:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800320a:	d107      	bne.n	800321c <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 800320c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800320e:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003210:	02db      	lsls	r3, r3, #11
 8003212:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8003216:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 800321a:	e7ee      	b.n	80031fa <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800321c:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800321e:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003222:	d10a      	bne.n	800323a <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8003224:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8003226:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003228:	0289      	lsls	r1, r1, #10
      tmp1 = (tmp1 >> 31U);
 800322a:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800322c:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8003230:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8003234:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8003238:	e7df      	b.n	80031fa <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 800323a:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 800323c:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800323e:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8003240:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003242:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8003246:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 800324a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800324e:	e7d4      	b.n	80031fa <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003250:	60e1      	str	r1, [r4, #12]
}
 8003252:	e7d3      	b.n	80031fc <DMA2D_SetConfig+0x2c>

08003254 <HAL_DMA2D_MspInit>:
}
 8003254:	4770      	bx	lr

08003256 <HAL_DMA2D_Init>:
{
 8003256:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8003258:	4604      	mov	r4, r0
 800325a:	b330      	cbz	r0, 80032aa <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800325c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003260:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003264:	b91b      	cbnz	r3, 800326e <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8003266:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 800326a:	f7ff fff3 	bl	8003254 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800326e:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003270:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003272:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003274:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003276:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003280:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003282:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003284:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003286:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003288:	f023 0307 	bic.w	r3, r3, #7
 800328c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800328e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003290:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003292:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003294:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800329c:	430b      	orrs	r3, r1
 800329e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032a0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80032a2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80032a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80032a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
 80032ac:	e7fc      	b.n	80032a8 <HAL_DMA2D_Init+0x52>

080032ae <HAL_DMA2D_Start>:
{
 80032ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80032b0:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 80032b4:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 80032b6:	2d01      	cmp	r5, #1
 80032b8:	f04f 0502 	mov.w	r5, #2
 80032bc:	d00f      	beq.n	80032de <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032be:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80032c2:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80032c4:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80032c6:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80032ca:	9500      	str	r5, [sp, #0]
 80032cc:	f7ff ff80 	bl	80031d0 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80032d0:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 80032d2:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80032d4:	6813      	ldr	r3, [r2, #0]
 80032d6:	4333      	orrs	r3, r6
 80032d8:	6013      	str	r3, [r2, #0]
}
 80032da:	b002      	add	sp, #8
 80032dc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80032de:	4628      	mov	r0, r5
 80032e0:	e7fb      	b.n	80032da <HAL_DMA2D_Start+0x2c>

080032e2 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80032e2:	2300      	movs	r3, #0
{
 80032e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80032e6:	9301      	str	r3, [sp, #4]
{
 80032e8:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80032ea:	6803      	ldr	r3, [r0, #0]
{
 80032ec:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	07db      	lsls	r3, r3, #31
 80032f2:	d417      	bmi.n	8003324 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80032f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fa:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80032fc:	069e      	lsls	r6, r3, #26
 80032fe:	d506      	bpl.n	800330e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8003300:	f7ff fdec 	bl	8002edc <HAL_GetTick>
 8003304:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003306:	6823      	ldr	r3, [r4, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	06d2      	lsls	r2, r2, #27
 800330c:	d543      	bpl.n	8003396 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800330e:	6823      	ldr	r3, [r4, #0]
 8003310:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8003312:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003314:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003316:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8003318:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800331c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003320:	b002      	add	sp, #8
 8003322:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8003324:	f7ff fdda 	bl	8002edc <HAL_GetTick>
 8003328:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	0792      	lsls	r2, r2, #30
 8003330:	d4e0      	bmi.n	80032f4 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003336:	9a01      	ldr	r2, [sp, #4]
 8003338:	f012 0f21 	tst.w	r2, #33	; 0x21
 800333c:	d017      	beq.n	800336e <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800333e:	9a01      	ldr	r2, [sp, #4]
 8003340:	0695      	lsls	r5, r2, #26
 8003342:	d503      	bpl.n	800334c <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003344:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003346:	f042 0202 	orr.w	r2, r2, #2
 800334a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800334c:	9a01      	ldr	r2, [sp, #4]
 800334e:	07d0      	lsls	r0, r2, #31
 8003350:	d503      	bpl.n	800335a <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003352:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003354:	f042 0201 	orr.w	r2, r2, #1
 8003358:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800335a:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800335c:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800335e:	2304      	movs	r3, #4
        return HAL_ERROR;
 8003360:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003362:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8003366:	2300      	movs	r3, #0
 8003368:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 800336c:	e7d8      	b.n	8003320 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 800336e:	1c69      	adds	r1, r5, #1
 8003370:	d0dc      	beq.n	800332c <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7ff fdb3 	bl	8002edc <HAL_GetTick>
 8003376:	1b80      	subs	r0, r0, r6
 8003378:	42a8      	cmp	r0, r5
 800337a:	d801      	bhi.n	8003380 <HAL_DMA2D_PollForTransfer+0x9e>
 800337c:	2d00      	cmp	r5, #0
 800337e:	d1d4      	bne.n	800332a <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003382:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003384:	f043 0320 	orr.w	r3, r3, #32
 8003388:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 800338a:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800338c:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8003390:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003394:	e7c4      	b.n	8003320 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800339a:	9a01      	ldr	r2, [sp, #4]
 800339c:	f012 0f29 	tst.w	r2, #41	; 0x29
 80033a0:	d016      	beq.n	80033d0 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80033a2:	9a01      	ldr	r2, [sp, #4]
 80033a4:	0716      	lsls	r6, r2, #28
 80033a6:	d503      	bpl.n	80033b0 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80033a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033aa:	f042 0204 	orr.w	r2, r2, #4
 80033ae:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80033b0:	9a01      	ldr	r2, [sp, #4]
 80033b2:	0695      	lsls	r5, r2, #26
 80033b4:	d503      	bpl.n	80033be <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033b8:	f042 0202 	orr.w	r2, r2, #2
 80033bc:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033be:	9a01      	ldr	r2, [sp, #4]
 80033c0:	07d0      	lsls	r0, r2, #31
 80033c2:	d503      	bpl.n	80033cc <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033c4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033cc:	2229      	movs	r2, #41	; 0x29
 80033ce:	e7c5      	b.n	800335c <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 80033d0:	1c69      	adds	r1, r5, #1
 80033d2:	d099      	beq.n	8003308 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033d4:	f7ff fd82 	bl	8002edc <HAL_GetTick>
 80033d8:	1b80      	subs	r0, r0, r6
 80033da:	42a8      	cmp	r0, r5
 80033dc:	d8d0      	bhi.n	8003380 <HAL_DMA2D_PollForTransfer+0x9e>
 80033de:	2d00      	cmp	r5, #0
 80033e0:	d191      	bne.n	8003306 <HAL_DMA2D_PollForTransfer+0x24>
 80033e2:	e7cd      	b.n	8003380 <HAL_DMA2D_PollForTransfer+0x9e>

080033e4 <HAL_DMA2D_ConfigLayer>:
{
 80033e4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80033e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	f04f 0302 	mov.w	r3, #2
 80033f0:	d02b      	beq.n	800344a <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80033f2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80033f6:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80033f8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80033fc:	4f1c      	ldr	r7, [pc, #112]	; (8003470 <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 80033fe:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003402:	010e      	lsls	r6, r1, #4
 8003404:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003406:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800340a:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800340e:	3c09      	subs	r4, #9
 8003410:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003412:	bf96      	itet	ls
 8003414:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003418:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800341c:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800341e:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003420:	b9a9      	cbnz	r1, 800344e <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003422:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003424:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003426:	ea01 0107 	and.w	r1, r1, r7
 800342a:	ea42 0201 	orr.w	r2, r2, r1
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003430:	6982      	ldr	r2, [r0, #24]
 8003432:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003434:	d803      	bhi.n	800343e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003436:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003438:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800343e:	2301      	movs	r3, #1
 8003440:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8003444:	2300      	movs	r3, #0
 8003446:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800344a:	4618      	mov	r0, r3
}
 800344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800344e:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003450:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003452:	ea01 0107 	and.w	r1, r1, r7
 8003456:	ea42 0201 	orr.w	r2, r2, r1
 800345a:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800345c:	eb00 0206 	add.w	r2, r0, r6
 8003460:	6992      	ldr	r2, [r2, #24]
 8003462:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003464:	d8eb      	bhi.n	800343e <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003466:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 800346a:	621d      	str	r5, [r3, #32]
 800346c:	e7e7      	b.n	800343e <HAL_DMA2D_ConfigLayer+0x5a>
 800346e:	bf00      	nop
 8003470:	00fcfff0 	.word	0x00fcfff0

08003474 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003478:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 800347a:	4691      	mov	r9, r2
 800347c:	eb00 0786 	add.w	r7, r0, r6, lsl #2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003480:	69bb      	ldr	r3, [r7, #24]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003482:	681c      	ldr	r4, [r3, #0]
 8003484:	2c00      	cmp	r4, #0
 8003486:	da02      	bge.n	800348e <ETH_Prepare_Tx_Descriptors+0x1a>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 8003488:	2002      	movs	r0, #2
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 800348a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800348e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003490:	2c00      	cmp	r4, #0
 8003492:	d1f9      	bne.n	8003488 <ETH_Prepare_Tx_Descriptors+0x14>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003494:	688c      	ldr	r4, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003496:	f8d1 e000 	ldr.w	lr, [r1]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800349a:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800349c:	6862      	ldr	r2, [r4, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800349e:	f01e 0f01 	tst.w	lr, #1
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034a2:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034a4:	685d      	ldr	r5, [r3, #4]
 80034a6:	f425 55ff 	bic.w	r5, r5, #8160	; 0x1fe0
 80034aa:	f025 051f 	bic.w	r5, r5, #31
 80034ae:	ea45 0502 	orr.w	r5, r5, r2
 80034b2:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80034b4:	d006      	beq.n	80034c4 <ETH_Prepare_Tx_Descriptors+0x50>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80034b6:	681d      	ldr	r5, [r3, #0]
 80034b8:	f425 0c40 	bic.w	ip, r5, #12582912	; 0xc00000
 80034bc:	694d      	ldr	r5, [r1, #20]
 80034be:	ea4c 0505 	orr.w	r5, ip, r5
 80034c2:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80034c4:	f01e 0f20 	tst.w	lr, #32
 80034c8:	d005      	beq.n	80034d6 <ETH_Prepare_Tx_Descriptors+0x62>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80034ca:	681d      	ldr	r5, [r3, #0]
 80034cc:	6909      	ldr	r1, [r1, #16]
 80034ce:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
 80034d2:	4329      	orrs	r1, r5
 80034d4:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034d6:	f01e 0f04 	tst.w	lr, #4
 80034da:	d003      	beq.n	80034e4 <ETH_Prepare_Tx_Descriptors+0x70>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80034e2:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034e4:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 80034e6:	2500      	movs	r5, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034e8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 80035d8 <ETH_Prepare_Tx_Descriptors+0x164>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80034f0:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80034f2:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 80034f4:	68a4      	ldr	r4, [r4, #8]
 80034f6:	f105 0e01 	add.w	lr, r5, #1
 80034fa:	bb1c      	cbnz	r4, 8003544 <ETH_Prepare_Tx_Descriptors+0xd0>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034fc:	681a      	ldr	r2, [r3, #0]
  if (ItMode != ((uint32_t)RESET))
 80034fe:	f1b9 0f00 	cmp.w	r9, #0
 8003502:	d066      	beq.n	80035d2 <ETH_Prepare_Tx_Descriptors+0x15e>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003508:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003510:	601a      	str	r2, [r3, #0]
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003512:	69ba      	ldr	r2, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8003514:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003518:	6813      	ldr	r3, [r2, #0]
 800351a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800351e:	6013      	str	r3, [r2, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003520:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003524:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003526:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 8003528:	6281      	str	r1, [r0, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352e:	2301      	movs	r3, #1
 8003530:	f383 8810 	msr	PRIMASK, r3
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003534:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003536:	3301      	adds	r3, #1
 8003538:	442b      	add	r3, r5
 800353a:	6403      	str	r3, [r0, #64]	; 0x40
 800353c:	f382 8810 	msr	PRIMASK, r2
  return HAL_ETH_ERROR_NONE;
 8003540:	2000      	movs	r0, #0
 8003542:	e7a2      	b.n	800348a <ETH_Prepare_Tx_Descriptors+0x16>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 800354a:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800354c:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800354e:	f1b9 0f00 	cmp.w	r9, #0
 8003552:	d023      	beq.n	800359c <ETH_Prepare_Tx_Descriptors+0x128>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003554:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003558:	f101 0c01 	add.w	ip, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800355c:	601d      	str	r5, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800355e:	f1bc 0f03 	cmp.w	ip, #3
 8003562:	bf88      	it	hi
 8003564:	f1a1 0c03 	subhi.w	ip, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003568:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 800356c:	698b      	ldr	r3, [r1, #24]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800356e:	681d      	ldr	r5, [r3, #0]
 8003570:	2d00      	cmp	r5, #0
 8003572:	da16      	bge.n	80035a2 <ETH_Prepare_Tx_Descriptors+0x12e>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003574:	69b9      	ldr	r1, [r7, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8003576:	2200      	movs	r2, #0
 8003578:	4572      	cmp	r2, lr
 800357a:	d085      	beq.n	8003488 <ETH_Prepare_Tx_Descriptors+0x14>
  __ASM volatile ("dmb 0xF":::"memory");
 800357c:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003580:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 8003582:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003588:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800358a:	1c73      	adds	r3, r6, #1
 800358c:	2b03      	cmp	r3, #3
 800358e:	bf88      	it	hi
 8003590:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003592:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8003596:	461e      	mov	r6, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003598:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800359a:	e7ed      	b.n	8003578 <ETH_Prepare_Tx_Descriptors+0x104>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800359c:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 80035a0:	e7da      	b.n	8003558 <ETH_Prepare_Tx_Descriptors+0xe4>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80035a2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80035a4:	2900      	cmp	r1, #0
 80035a6:	d1e5      	bne.n	8003574 <ETH_Prepare_Tx_Descriptors+0x100>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035a8:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035aa:	6865      	ldr	r5, [r4, #4]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80035ac:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80035b0:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80035b2:	6821      	ldr	r1, [r4, #0]
 80035b4:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	ea01 0108 	and.w	r1, r1, r8
 80035bc:	4329      	orrs	r1, r5
 80035be:	6059      	str	r1, [r3, #4]
 80035c0:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	4675      	mov	r5, lr
 80035c8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80035cc:	6019      	str	r1, [r3, #0]
 80035ce:	4661      	mov	r1, ip
 80035d0:	e790      	b.n	80034f4 <ETH_Prepare_Tx_Descriptors+0x80>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035d2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80035d6:	e797      	b.n	8003508 <ETH_Prepare_Tx_Descriptors+0x94>
 80035d8:	ffffe000 	.word	0xffffe000

080035dc <ETH_SetMACConfig>:
  tmpreg1 = (heth->Instance)->MACCR;
 80035dc:	6802      	ldr	r2, [r0, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80035de:	f8df c108 	ldr.w	ip, [pc, #264]	; 80036e8 <ETH_SetMACConfig+0x10c>
{
 80035e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tmpreg1 = (heth->Instance)->MACCR;
 80035e6:	6813      	ldr	r3, [r2, #0]
{
 80035e8:	460d      	mov	r5, r1
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035ea:	f891 e01f 	ldrb.w	lr, [r1, #31]
{
 80035ee:	4604      	mov	r4, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80035f0:	ea03 0c0c 	and.w	ip, r3, ip
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035f4:	7c0b      	ldrb	r3, [r1, #16]
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80035f6:	f891 800e 	ldrb.w	r8, [r1, #14]
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035fa:	2b00      	cmp	r3, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035fc:	7c4b      	ldrb	r3, [r1, #17]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035fe:	f895 a01c 	ldrb.w	sl, [r5, #28]
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003602:	bf0c      	ite	eq
 8003604:	f44f 0700 	moveq.w	r7, #8388608	; 0x800000
 8003608:	2700      	movne	r7, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800360a:	2b00      	cmp	r3, #0
 800360c:	688b      	ldr	r3, [r1, #8]
 800360e:	6949      	ldr	r1, [r1, #20]
 8003610:	bf0c      	ite	eq
 8003612:	f44f 0680 	moveq.w	r6, #4194304	; 0x400000
 8003616:	2600      	movne	r6, #0
 8003618:	430b      	orrs	r3, r1
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800361a:	7fa9      	ldrb	r1, [r5, #30]
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800361c:	f895 9004 	ldrb.w	r9, [r5, #4]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003620:	2900      	cmp	r1, #0
 8003622:	69a9      	ldr	r1, [r5, #24]
 8003624:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003628:	f895 1020 	ldrb.w	r1, [r5, #32]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800362c:	bf0c      	ite	eq
 800362e:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8003632:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003634:	2900      	cmp	r1, #0
 8003636:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8003638:	ea43 0301 	orr.w	r3, r3, r1
 800363c:	bf0c      	ite	eq
 800363e:	f44f 7b00 	moveq.w	fp, #512	; 0x200
 8003642:	f04f 0b00 	movne.w	fp, #0
 8003646:	ea43 6348 	orr.w	r3, r3, r8, lsl #25
 800364a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800364e:	f895 e00f 	ldrb.w	lr, [r5, #15]
 8003652:	ea43 330a 	orr.w	r3, r3, sl, lsl #12
 8003656:	ea43 2389 	orr.w	r3, r3, r9, lsl #10
 800365a:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800365e:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 8003662:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 8003666:	ea43 030c 	orr.w	r3, r3, ip
 800366a:	433b      	orrs	r3, r7
 800366c:	4333      	orrs	r3, r6
 800366e:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003670:	2001      	movs	r0, #1
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003672:	ea43 030b 	orr.w	r3, r3, fp
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003676:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8003678:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800367a:	f7ff fc35 	bl	8002ee8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800367e:	6821      	ldr	r1, [r4, #0]
 8003680:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8003682:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8003684:	6988      	ldr	r0, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003686:	6cae      	ldr	r6, [r5, #72]	; 0x48
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003688:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800368c:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 8003690:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003694:	0400      	lsls	r0, r0, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003696:	2b00      	cmp	r3, #0
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003698:	ea4f 4010 	mov.w	r0, r0, lsr #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800369c:	bf0c      	ite	eq
 800369e:	2380      	moveq	r3, #128	; 0x80
 80036a0:	2300      	movne	r3, #0
 80036a2:	4302      	orrs	r2, r0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036a4:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
 80036a8:	2801      	cmp	r0, #1
 80036aa:	ea42 0203 	orr.w	r2, r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036ae:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80036b2:	bf0c      	ite	eq
 80036b4:	2008      	moveq	r0, #8
 80036b6:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	ea42 0200 	orr.w	r2, r2, r0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80036be:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80036c2:	bf0c      	ite	eq
 80036c4:	2304      	moveq	r3, #4
 80036c6:	2300      	movne	r3, #0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80036c8:	2801      	cmp	r0, #1
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036ca:	ea43 0302 	orr.w	r3, r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80036ce:	bf0c      	ite	eq
 80036d0:	2002      	moveq	r0, #2
 80036d2:	2000      	movne	r0, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80036d4:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036d6:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80036d8:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80036da:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036dc:	f7ff fc04 	bl	8002ee8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	619d      	str	r5, [r3, #24]
}
 80036e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036e8:	fd20810f 	.word	0xfd20810f

080036ec <ETH_SetDMAConfig>:
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036ec:	6802      	ldr	r2, [r0, #0]
 80036ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 80036f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036f4:	6993      	ldr	r3, [r2, #24]
{
 80036f6:	4605      	mov	r5, r0
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80036f8:	4826      	ldr	r0, [pc, #152]	; (8003794 <ETH_SetDMAConfig+0xa8>)
{
 80036fa:	460c      	mov	r4, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036fc:	f891 c00d 	ldrb.w	ip, [r1, #13]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003700:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003702:	7b0b      	ldrb	r3, [r1, #12]
 8003704:	6a27      	ldr	r7, [r4, #32]
 8003706:	2b00      	cmp	r3, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003708:	7f4b      	ldrb	r3, [r1, #29]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800370a:	bf0c      	ite	eq
 800370c:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8003710:	2600      	movne	r6, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003712:	2b00      	cmp	r3, #0
 8003714:	6963      	ldr	r3, [r4, #20]
 8003716:	ea43 0307 	orr.w	r3, r3, r7
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800371a:	7ba7      	ldrb	r7, [r4, #14]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800371c:	bf0c      	ite	eq
 800371e:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8003722:	2100      	movne	r1, #0
 8003724:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
 8003728:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800372c:	7f27      	ldrb	r7, [r4, #28]
 800372e:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003732:	7fa7      	ldrb	r7, [r4, #30]
 8003734:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003738:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 800373c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 8003740:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003742:	2001      	movs	r0, #1
 8003744:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003746:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003748:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 800374a:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800374c:	f7ff fbcc 	bl	8002ee8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003750:	682a      	ldr	r2, [r5, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003752:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003754:	69a1      	ldr	r1, [r4, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 8003756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800375a:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 800375c:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800375e:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003760:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003764:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 8003768:	6921      	ldr	r1, [r4, #16]
 800376a:	430b      	orrs	r3, r1
 800376c:	6821      	ldr	r1, [r4, #0]
 800376e:	430b      	orrs	r3, r1
 8003770:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003772:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003776:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003778:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800377c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003780:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 8003782:	6814      	ldr	r4, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003784:	f7ff fbb0 	bl	8002ee8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378e:	601c      	str	r4, [r3, #0]
}
 8003790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003792:	bf00      	nop
 8003794:	f8de3f23 	.word	0xf8de3f23

08003798 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 8003798:	2300      	movs	r3, #0
{
 800379a:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 800379c:	9301      	str	r3, [sp, #4]
{
 800379e:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80037a0:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a2:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80037a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037a8:	699a      	ldr	r2, [r3, #24]
 80037aa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80037ae:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037b4:	f7ff fb98 	bl	8002ee8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80037b8:	6823      	ldr	r3, [r4, #0]
 80037ba:	9a01      	ldr	r2, [sp, #4]
 80037bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c0:	619a      	str	r2, [r3, #24]
}
 80037c2:	b002      	add	sp, #8
 80037c4:	bd10      	pop	{r4, pc}
	...

080037c8 <ETH_UpdateDescriptor>:
{
 80037c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 80037cc:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 80037ce:	6e86      	ldr	r6, [r0, #104]	; 0x68
{
 80037d0:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 80037d2:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  uint8_t *buff = NULL;
 80037d4:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037d6:	f106 0312 	add.w	r3, r6, #18
  uint8_t allocStatus = 1U;
 80037da:	f04f 0801 	mov.w	r8, #1
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80037de:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8003860 <ETH_UpdateDescriptor+0x98>
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037e2:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 80037e6:	b117      	cbz	r7, 80037ee <ETH_UpdateDescriptor+0x26>
 80037e8:	f1b8 0f00 	cmp.w	r8, #0
 80037ec:	d114      	bne.n	8003818 <ETH_UpdateDescriptor+0x50>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80037ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80037f0:	42bb      	cmp	r3, r7
 80037f2:	d00e      	beq.n	8003812 <ETH_UpdateDescriptor+0x4a>
 80037f4:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80037f8:	1c72      	adds	r2, r6, #1
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80037fa:	6823      	ldr	r3, [r4, #0]
 80037fc:	2028      	movs	r0, #40	; 0x28
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80037fe:	f002 0103 	and.w	r1, r2, #3
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003802:	6922      	ldr	r2, [r4, #16]
 8003804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003808:	fb00 2201 	mla	r2, r0, r1, r2
 800380c:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 800380e:	e9c4 671a 	strd	r6, r7, [r4, #104]	; 0x68
}
 8003812:	b003      	add	sp, #12
 8003814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003818:	6a2b      	ldr	r3, [r5, #32]
 800381a:	b933      	cbnz	r3, 800382a <ETH_UpdateDescriptor+0x62>
      HAL_ETH_RxAllocateCallback(&buff);
 800381c:	a801      	add	r0, sp, #4
 800381e:	f7fd fa0b 	bl	8000c38 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8003822:	9b01      	ldr	r3, [sp, #4]
 8003824:	b1cb      	cbz	r3, 800385a <ETH_UpdateDescriptor+0x92>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003826:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003828:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 800382a:	6da2      	ldr	r2, [r4, #88]	; 0x58
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800382c:	6963      	ldr	r3, [r4, #20]
      if (heth->RxDescList.ItMode == 0U)
 800382e:	b98a      	cbnz	r2, 8003854 <ETH_UpdateDescriptor+0x8c>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8003830:	ea43 0309 	orr.w	r3, r3, r9
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003834:	606b      	str	r3, [r5, #4]
      desccount--;
 8003836:	3f01      	subs	r7, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003838:	682b      	ldr	r3, [r5, #0]
 800383a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800383e:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003840:	1c73      	adds	r3, r6, #1
 8003842:	2b03      	cmp	r3, #3
 8003844:	bf88      	it	hi
 8003846:	1ef3      	subhi	r3, r6, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003848:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 800384c:	461e      	mov	r6, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800384e:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 8003852:	e7c8      	b.n	80037e6 <ETH_UpdateDescriptor+0x1e>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003858:	e7ec      	b.n	8003834 <ETH_UpdateDescriptor+0x6c>
        allocStatus = 0U;
 800385a:	4698      	mov	r8, r3
 800385c:	e7c3      	b.n	80037e6 <ETH_UpdateDescriptor+0x1e>
 800385e:	bf00      	nop
 8003860:	80004000 	.word	0x80004000

08003864 <HAL_ETH_Init>:
{
 8003864:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 8003866:	4604      	mov	r4, r0
{
 8003868:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 800386a:	2800      	cmp	r0, #0
 800386c:	f000 80e9 	beq.w	8003a42 <HAL_ETH_Init+0x1de>
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003870:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003874:	b923      	cbnz	r3, 8003880 <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8003876:	2323      	movs	r3, #35	; 0x23
 8003878:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 800387c:	f7fd f8f2 	bl	8000a64 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b73      	ldr	r3, [pc, #460]	; (8003a50 <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003882:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003896:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <HAL_ETH_Init+0x1f0>)
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800389e:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 80038a6:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	f042 0201 	orr.w	r2, r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80038b6:	f7ff fb11 	bl	8002edc <HAL_GetTick>
 80038ba:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038c2:	681d      	ldr	r5, [r3, #0]
 80038c4:	f015 0501 	ands.w	r5, r5, #1
 80038c8:	f040 80ae 	bne.w	8003a28 <HAL_ETH_Init+0x1c4>
  macDefaultConf.ChecksumOffload = ENABLE;
 80038cc:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 80038d2:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80038d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 80038da:	a90d      	add	r1, sp, #52	; 0x34
 80038dc:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 80038de:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 80038e2:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80038e6:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80038ea:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 80038ec:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 80038f0:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.Watchdog = ENABLE;
 80038f4:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80038f8:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80038fa:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80038fe:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003900:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003904:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003906:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800390a:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800390e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003912:	f7ff fe63 	bl	80035dc <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800391a:	4620      	mov	r0, r4
 800391c:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800391e:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003924:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003928:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800392c:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003930:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003934:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003936:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800393a:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800393c:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800393e:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003942:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003946:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800394c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003950:	f7ff fecc 	bl	80036ec <ETH_SetDMAConfig>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003954:	68e6      	ldr	r6, [r4, #12]
 8003956:	f104 0c18 	add.w	ip, r4, #24
 800395a:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800395c:	4628      	mov	r0, r5
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800395e:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003960:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003962:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003964:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003966:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003968:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800396a:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800396c:	f84c 3b04 	str.w	r3, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003970:	681f      	ldr	r7, [r3, #0]
 8003972:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 8003976:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800397a:	d064      	beq.n	8003a46 <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800397c:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800397e:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003980:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003982:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003986:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003988:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800398a:	460b      	mov	r3, r1
 800398c:	d1e8      	bne.n	8003960 <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800398e:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 8003990:	2100      	movs	r1, #0
 8003992:	f104 0c48 	add.w	ip, r4, #72	; 0x48
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003996:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800399a:	f502 5780 	add.w	r7, r2, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 800399e:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80039a0:	613e      	str	r6, [r7, #16]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80039a2:	6926      	ldr	r6, [r4, #16]
 80039a4:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80039a6:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039a8:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80039aa:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80039ac:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80039ae:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80039b0:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80039b4:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80039b8:	6960      	ldr	r0, [r4, #20]
 80039ba:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 80039be:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039c0:	6858      	ldr	r0, [r3, #4]
 80039c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80039c6:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039c8:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80039cc:	f84c 3b04 	str.w	r3, [ip], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80039d0:	d03b      	beq.n	8003a4a <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80039d2:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039d4:	3501      	adds	r5, #1
 80039d6:	4603      	mov	r3, r0
 80039d8:	2d04      	cmp	r5, #4
 80039da:	d1e4      	bne.n	80039a6 <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80039dc:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80039de:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80039e2:	65a0      	str	r0, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80039e4:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80039e8:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80039ec:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80039ee:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80039f0:	641d      	str	r5, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80039f2:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80039f4:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80039f6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80039f8:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 80039fc:	63d3      	str	r3, [r2, #60]	; 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80039fe:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8003a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a06:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a0a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003a0e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 8003a12:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 8003a16:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  heth->gState = HAL_ETH_STATE_READY;
 8003a1a:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a1c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003a20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003a24:	b027      	add	sp, #156	; 0x9c
 8003a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003a28:	f7ff fa58 	bl	8002edc <HAL_GetTick>
 8003a2c:	1b80      	subs	r0, r0, r6
 8003a2e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003a32:	f67f af43 	bls.w	80038bc <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003a36:	2304      	movs	r3, #4
 8003a38:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a3c:	23e0      	movs	r3, #224	; 0xe0
 8003a3e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 8003a42:	2001      	movs	r0, #1
 8003a44:	e7ee      	b.n	8003a24 <HAL_ETH_Init+0x1c0>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003a46:	60de      	str	r6, [r3, #12]
 8003a48:	e799      	b.n	800397e <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a4a:	60de      	str	r6, [r3, #12]
 8003a4c:	e7c2      	b.n	80039d4 <HAL_ETH_Init+0x170>
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40028000 	.word	0x40028000

08003a5c <HAL_ETH_Start_IT>:
{
 8003a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8003a5e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003a62:	4604      	mov	r4, r0
 8003a64:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d136      	bne.n	8003ad8 <HAL_ETH_Start_IT+0x7c>
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003a6a:	2304      	movs	r3, #4
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a6c:	2623      	movs	r6, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8003a6e:	6585      	str	r5, [r0, #88]	; 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003a70:	66c3      	str	r3, [r0, #108]	; 0x6c
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a72:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    ETH_UpdateDescriptor(heth);
 8003a76:	f7ff fea7 	bl	80037c8 <ETH_UpdateDescriptor>
    tmpreg1 = (heth->Instance)->MACCR;
 8003a7a:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a7c:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 8003a7e:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a80:	f7ff fa32 	bl	8002ee8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a84:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8003a86:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8003a88:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a94:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003a96:	699a      	ldr	r2, [r3, #24]
 8003a98:	f042 0202 	orr.w	r2, r2, #2
 8003a9c:	619a      	str	r2, [r3, #24]
    ETH_FlushTransmitFIFO(heth);
 8003a9e:	f7ff fe7b 	bl	8003798 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003aa2:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aa4:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f042 0208 	orr.w	r2, r2, #8
 8003aac:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8003aae:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ab0:	f7ff fa1a 	bl	8002ee8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ab4:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003ab6:	2000      	movs	r0, #0
    (heth->Instance)->MACCR = tmpreg1;
 8003ab8:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f042 0204 	orr.w	r2, r2, #4
 8003ac0:	601a      	str	r2, [r3, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8003acc:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 8003ad0:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8003ad2:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8003ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003ad8:	4628      	mov	r0, r5
 8003ada:	e7fc      	b.n	8003ad6 <HAL_ETH_Start_IT+0x7a>

08003adc <HAL_ETH_Stop_IT>:
{
 8003adc:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ade:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003ae2:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003ae4:	2b23      	cmp	r3, #35	; 0x23
 8003ae6:	d13c      	bne.n	8003b62 <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003ae8:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8003aea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aee:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003af0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 8003afa:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 8003afe:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b06:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	f022 0202 	bic.w	r2, r2, #2
 8003b0e:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003b10:	680b      	ldr	r3, [r1, #0]
 8003b12:	f023 0304 	bic.w	r3, r3, #4
 8003b16:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8003b18:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b1a:	f7ff f9e5 	bl	8002ee8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b1e:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8003b20:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8003b22:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8003b24:	f7ff fe38 	bl	8003798 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b28:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b2a:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	f022 0208 	bic.w	r2, r2, #8
 8003b32:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8003b34:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b36:	f7ff f9d7 	bl	8002ee8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003b40:	f853 2b48 	ldr.w	r2, [r3], #72
 8003b44:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003b46:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003b4a:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003b4c:	4298      	cmp	r0, r3
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003b4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b52:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003b54:	d1f7      	bne.n	8003b46 <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 8003b56:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8003b58:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 8003b5a:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8003b5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003b60:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
 8003b64:	e7fc      	b.n	8003b60 <HAL_ETH_Stop_IT+0x84>

08003b66 <HAL_ETH_Transmit_IT>:
{
 8003b66:	b510      	push	{r4, lr}
 8003b68:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8003b6a:	b939      	cbnz	r1, 8003b7c <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003b6c:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003b70:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b74:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_ERROR;
 8003b78:	2001      	movs	r0, #1
 8003b7a:	e025      	b.n	8003bc8 <HAL_ETH_Transmit_IT+0x62>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b7c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003b80:	2a23      	cmp	r2, #35	; 0x23
 8003b82:	d1f9      	bne.n	8003b78 <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003b84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003b86:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003b88:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003b8a:	f7ff fc73 	bl	8003474 <ETH_Prepare_Tx_Descriptors>
 8003b8e:	b120      	cbz	r0, 8003b9a <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003b90:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003b94:	f043 0302 	orr.w	r3, r3, #2
 8003b98:	e7ec      	b.n	8003b74 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b9a:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003b9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	2a03      	cmp	r2, #3
 8003ba4:	bf8c      	ite	hi
 8003ba6:	3b03      	subhi	r3, #3
 8003ba8:	62a2      	strls	r2, [r4, #40]	; 0x28
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	bf88      	it	hi
 8003bb0:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bb8:	6958      	ldr	r0, [r3, #20]
 8003bba:	f010 0004 	ands.w	r0, r0, #4
 8003bbe:	d003      	beq.n	8003bc8 <HAL_ETH_Transmit_IT+0x62>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003bc0:	2104      	movs	r1, #4
    return HAL_OK;
 8003bc2:	4610      	mov	r0, r2
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003bc4:	6159      	str	r1, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 8003bc6:	605a      	str	r2, [r3, #4]
}
 8003bc8:	bd10      	pop	{r4, pc}

08003bca <HAL_ETH_ReadData>:
{
 8003bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bce:	4604      	mov	r4, r0
 8003bd0:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8003bd2:	4689      	mov	r9, r1
 8003bd4:	b949      	cbnz	r1, 8003bea <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003bd6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8003be2:	2001      	movs	r0, #1
}
 8003be4:	b005      	add	sp, #20
 8003be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003bea:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003bee:	2b23      	cmp	r3, #35	; 0x23
 8003bf0:	d1f7      	bne.n	8003be2 <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 8003bf2:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  uint8_t rxdataready = 0U;
 8003bf6:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003bf8:	f100 0180 	add.w	r1, r0, #128	; 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003bfc:	f108 0312 	add.w	r3, r8, #18
  uint32_t desccnt = 0U;
 8003c00:	463e      	mov	r6, r7
      dmarxdesc->BackupAddr0 = 0;
 8003c02:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c04:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c08:	307c      	adds	r0, #124	; 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003c0a:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8003c0e:	f1c3 0a04 	rsb	sl, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db02      	blt.n	8003c1e <HAL_ETH_ReadData+0x54>
 8003c18:	4556      	cmp	r6, sl
 8003c1a:	d000      	beq.n	8003c1e <HAL_ETH_ReadData+0x54>
         && (rxdataready == 0U))
 8003c1c:	b187      	cbz	r7, 8003c40 <HAL_ETH_ReadData+0x76>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003c1e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003c20:	441e      	add	r6, r3
 8003c22:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003c24:	b116      	cbz	r6, 8003c2c <HAL_ETH_ReadData+0x62>
    ETH_UpdateDescriptor(heth);
 8003c26:	4620      	mov	r0, r4
 8003c28:	f7ff fdce 	bl	80037c8 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8003c2c:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8003c30:	2f00      	cmp	r7, #0
 8003c32:	d0d6      	beq.n	8003be2 <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8003c34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8003c36:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8003c38:	f8c9 3000 	str.w	r3, [r9]
    heth->RxDescList.pRxStart = NULL;
 8003c3c:	67e0      	str	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 8003c3e:	e7d1      	b.n	8003be4 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	05db      	lsls	r3, r3, #23
 8003c44:	d503      	bpl.n	8003c4e <HAL_ETH_ReadData+0x84>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003c46:	69eb      	ldr	r3, [r5, #28]
 8003c48:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003c4a:	69ab      	ldr	r3, [r5, #24]
 8003c4c:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003c4e:	682b      	ldr	r3, [r5, #0]
 8003c50:	059a      	lsls	r2, r3, #22
 8003c52:	d401      	bmi.n	8003c58 <HAL_ETH_ReadData+0x8e>
 8003c54:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003c56:	b1fb      	cbz	r3, 8003c98 <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003c58:	682b      	ldr	r3, [r5, #0]
 8003c5a:	059b      	lsls	r3, r3, #22
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003c5c:	682b      	ldr	r3, [r5, #0]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003c5e:	682a      	ldr	r2, [r5, #0]
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003c60:	f3c3 430d 	ubfx	r3, r3, #16, #14
        heth->RxDescList.RxDataLength = 0;
 8003c64:	bf48      	it	mi
 8003c66:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003c6a:	05d2      	lsls	r2, r2, #23
 8003c6c:	d502      	bpl.n	8003c74 <HAL_ETH_ReadData+0xaa>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003c6e:	682a      	ldr	r2, [r5, #0]
        rxdataready = 1;
 8003c70:	2701      	movs	r7, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003c72:	6722      	str	r2, [r4, #112]	; 0x70
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003c74:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c76:	9001      	str	r0, [sp, #4]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003c78:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c7a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8003c7e:	f7fc ffff 	bl	8000c80 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8003c82:	6e22      	ldr	r2, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003c84:	9b03      	ldr	r3, [sp, #12]
      heth->RxDescList.RxDescCnt++;
 8003c86:	3201      	adds	r2, #1
 8003c88:	6622      	str	r2, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8003c8c:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
      heth->RxDescList.RxDataLength += bufflength;
 8003c90:	4413      	add	r3, r2
 8003c92:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8003c94:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003c98:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8003c9c:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	bf88      	it	hi
 8003ca2:	f1a8 0303 	subhi.w	r3, r8, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ca6:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8003caa:	4698      	mov	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003cac:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8003cb0:	e7af      	b.n	8003c12 <HAL_ETH_ReadData+0x48>

08003cb2 <HAL_ETH_ReleaseTxPacket>:
{
 8003cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb6:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8003cb8:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003cba:	f04f 0928 	mov.w	r9, #40	; 0x28
 8003cbe:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003cc2:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003cc6:	b106      	cbz	r6, 8003cca <HAL_ETH_ReleaseTxPacket+0x18>
 8003cc8:	b917      	cbnz	r7, 8003cd0 <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8003cd0:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8003cd4:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003cd6:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8003cda:	b148      	cbz	r0, 8003cf0 <HAL_ETH_ReleaseTxPacket+0x3e>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003cdc:	fb09 f304 	mul.w	r3, r9, r4
 8003ce0:	68ea      	ldr	r2, [r5, #12]
 8003ce2:	58d3      	ldr	r3, [r2, r3]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	da08      	bge.n	8003cfa <HAL_ETH_ReleaseTxPacket+0x48>
 8003ce8:	4623      	mov	r3, r4
        pktTxStatus = 0U;
 8003cea:	2700      	movs	r7, #0
 8003cec:	461c      	mov	r4, r3
 8003cee:	e7ea      	b.n	8003cc6 <HAL_ETH_ReleaseTxPacket+0x14>
      INCR_TX_DESC_INDEX(idx, 1U);
 8003cf0:	1c63      	adds	r3, r4, #1
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d9fa      	bls.n	8003cec <HAL_ETH_ReleaseTxPacket+0x3a>
 8003cf6:	1ee3      	subs	r3, r4, #3
 8003cf8:	e7f8      	b.n	8003cec <HAL_ETH_ReleaseTxPacket+0x3a>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003cfa:	f7fc ffda 	bl	8000cb2 <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8003cfe:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003d00:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	bf88      	it	hi
 8003d08:	1ee3      	subhi	r3, r4, #3
        dmatxdesclist->releaseIndex = idx;
 8003d0a:	e9c5 6310 	strd	r6, r3, [r5, #64]	; 0x40
 8003d0e:	e7ed      	b.n	8003cec <HAL_ETH_ReleaseTxPacket+0x3a>

08003d10 <HAL_ETH_PMTCallback>:
 8003d10:	4770      	bx	lr

08003d12 <HAL_ETH_WakeUpCallback>:
 8003d12:	4770      	bx	lr

08003d14 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003d14:	6803      	ldr	r3, [r0, #0]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003d16:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_ETH_IRQHandler+0xd4>)
{
 8003d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003d1c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
{
 8003d22:	4604      	mov	r4, r0
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003d24:	695d      	ldr	r5, [r3, #20]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003d26:	f8d3 801c 	ldr.w	r8, [r3, #28]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003d2a:	6956      	ldr	r6, [r2, #20]
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003d2c:	066a      	lsls	r2, r5, #25
 8003d2e:	d506      	bpl.n	8003d3e <HAL_ETH_IRQHandler+0x2a>
 8003d30:	f018 0f40 	tst.w	r8, #64	; 0x40
 8003d34:	d003      	beq.n	8003d3e <HAL_ETH_IRQHandler+0x2a>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003d36:	4a2d      	ldr	r2, [pc, #180]	; (8003dec <HAL_ETH_IRQHandler+0xd8>)
 8003d38:	615a      	str	r2, [r3, #20]
    HAL_ETH_RxCpltCallback(heth);
 8003d3a:	f7fc fef9 	bl	8000b30 <HAL_ETH_RxCpltCallback>
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003d3e:	07e8      	lsls	r0, r5, #31
 8003d40:	d50b      	bpl.n	8003d5a <HAL_ETH_IRQHandler+0x46>
 8003d42:	f018 0f01 	tst.w	r8, #1
 8003d46:	d008      	beq.n	8003d5a <HAL_ETH_IRQHandler+0x46>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    HAL_ETH_TxCpltCallback(heth);
 8003d4e:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d54:	615a      	str	r2, [r3, #20]
    HAL_ETH_TxCpltCallback(heth);
 8003d56:	f7fc fef3 	bl	8000b40 <HAL_ETH_TxCpltCallback>
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003d5a:	0429      	lsls	r1, r5, #16
 8003d5c:	d523      	bpl.n	8003da6 <HAL_ETH_IRQHandler+0x92>
 8003d5e:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8003d62:	d020      	beq.n	8003da6 <HAL_ETH_IRQHandler+0x92>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003d64:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003d68:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003d6c:	f043 0308 	orr.w	r3, r3, #8
 8003d70:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7a:	695a      	ldr	r2, [r3, #20]
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003d7c:	d02c      	beq.n	8003dd8 <HAL_ETH_IRQHandler+0xc4>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003d7e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d82:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8003d86:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8003d8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d8e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8003d98:	61da      	str	r2, [r3, #28]
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d9a:	23e0      	movs	r3, #224	; 0xe0
 8003d9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8003da0:	4620      	mov	r0, r4
 8003da2:	f7fc fed5 	bl	8000b50 <HAL_ETH_ErrorCallback>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003da6:	073a      	lsls	r2, r7, #28
 8003da8:	d50b      	bpl.n	8003dc2 <HAL_ETH_IRQHandler+0xae>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003daa:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8003dac:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003db4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8003db8:	f7ff ffaa 	bl	8003d10 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003dc2:	0333      	lsls	r3, r6, #12
 8003dc4:	d506      	bpl.n	8003dd4 <HAL_ETH_IRQHandler+0xc0>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003dc6:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <HAL_ETH_IRQHandler+0xd4>)
 8003dc8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8003dcc:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003dce:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8003dd0:	f7ff ff9f 	bl	8003d12 <HAL_ETH_WakeUpCallback>
}
 8003dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003dd8:	f248 6180 	movw	r1, #34432	; 0x8680
 8003ddc:	400a      	ands	r2, r1
 8003dde:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003de2:	6159      	str	r1, [r3, #20]
 8003de4:	e7dc      	b.n	8003da0 <HAL_ETH_IRQHandler+0x8c>
 8003de6:	bf00      	nop
 8003de8:	40013c00 	.word	0x40013c00
 8003dec:	00010040 	.word	0x00010040

08003df0 <HAL_ETH_ReadPHYRegister>:
{
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8003df4:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003df6:	0192      	lsls	r2, r2, #6
{
 8003df8:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8003dfa:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003dfc:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e00:	f003 021c 	and.w	r2, r3, #28
 8003e04:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003e06:	02cc      	lsls	r4, r1, #11
 8003e08:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003e0a:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003e0c:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8003e10:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8003e12:	f7ff f863 	bl	8002edc <HAL_GetTick>
 8003e16:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e18:	f014 0401 	ands.w	r4, r4, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_ETH_ReadPHYRegister+0x3a>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003e1e:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;
 8003e20:	4620      	mov	r0, r4
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	6033      	str	r3, [r6, #0]
}
 8003e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003e2a:	f7ff f857 	bl	8002edc <HAL_GetTick>
 8003e2e:	1bc0      	subs	r0, r0, r7
 8003e30:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003e34:	d202      	bcs.n	8003e3c <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg1 = heth->Instance->MACMIIAR;
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	691c      	ldr	r4, [r3, #16]
 8003e3a:	e7ed      	b.n	8003e18 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8003e3c:	2001      	movs	r0, #1
 8003e3e:	e7f3      	b.n	8003e28 <HAL_ETH_ReadPHYRegister+0x38>

08003e40 <HAL_ETH_WritePHYRegister>:
{
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e44:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003e46:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e48:	6906      	ldr	r6, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e50:	f006 021c 	and.w	r2, r6, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003e54:	6143      	str	r3, [r0, #20]
 8003e56:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003e58:	02cc      	lsls	r4, r1, #11
 8003e5a:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003e5c:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003e5e:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 8003e62:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8003e64:	f7ff f83a 	bl	8002edc <HAL_GetTick>
 8003e68:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e6a:	f014 0401 	ands.w	r4, r4, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_ETH_WritePHYRegister+0x34>
  return HAL_OK;
 8003e70:	4620      	mov	r0, r4
}
 8003e72:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003e74:	f7ff f832 	bl	8002edc <HAL_GetTick>
 8003e78:	1b80      	subs	r0, r0, r6
 8003e7a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003e7e:	d202      	bcs.n	8003e86 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8003e80:	682b      	ldr	r3, [r5, #0]
 8003e82:	691c      	ldr	r4, [r3, #16]
 8003e84:	e7f1      	b.n	8003e6a <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8003e86:	2001      	movs	r0, #1
 8003e88:	e7f3      	b.n	8003e72 <HAL_ETH_WritePHYRegister+0x32>

08003e8a <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d061      	beq.n	8003f52 <HAL_ETH_GetMACConfig+0xc8>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003e8e:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8003e90:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003e98:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003ea2:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8003eaa:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8003eae:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003eb2:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8003eb4:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003eb8:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003ec0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003ec4:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003ecc:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ed4:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003edc:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8003ee4:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8003ee8:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8003ef0:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8003ef4:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003efc:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003f04:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8003f0c:	710a      	strb	r2, [r1, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8003f14:	738a      	strb	r2, [r1, #14]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003f1c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8003f26:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003f2a:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003f2e:	699a      	ldr	r2, [r3, #24]
 8003f30:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003f34:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	0c12      	lsrs	r2, r2, #16
 8003f3a:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003f42:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f46:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8003f48:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003f4c:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
  return HAL_OK;
 8003f50:	4770      	bx	lr
    return HAL_ERROR;
 8003f52:	2001      	movs	r0, #1
}
 8003f54:	4770      	bx	lr

08003f56 <HAL_ETH_SetMACConfig>:
{
 8003f56:	b508      	push	{r3, lr}
  if (macconf == NULL)
 8003f58:	b139      	cbz	r1, 8003f6a <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 8003f5a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003f5e:	2b10      	cmp	r3, #16
 8003f60:	d103      	bne.n	8003f6a <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 8003f62:	f7ff fb3b 	bl	80035dc <ETH_SetMACConfig>
    return HAL_OK;
 8003f66:	2000      	movs	r0, #0
}
 8003f68:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	e7fc      	b.n	8003f68 <HAL_ETH_SetMACConfig+0x12>
	...

08003f70 <HAL_ETH_SetMDIOClockRange>:
{
 8003f70:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 8003f72:	6803      	ldr	r3, [r0, #0]
{
 8003f74:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8003f76:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8003f78:	f000 fd20 	bl	80049bc <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8003f7c:	4b0d      	ldr	r3, [pc, #52]	; (8003fb4 <HAL_ETH_SetMDIOClockRange+0x44>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003f7e:	f024 041c 	bic.w	r4, r4, #28
  if (hclk < 35000000U)
 8003f82:	4298      	cmp	r0, r3
 8003f84:	d804      	bhi.n	8003f90 <HAL_ETH_SetMDIOClockRange+0x20>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003f86:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	611c      	str	r4, [r3, #16]
}
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_ETH_SetMDIOClockRange+0x48>)
 8003f92:	4298      	cmp	r0, r3
 8003f94:	d202      	bcs.n	8003f9c <HAL_ETH_SetMDIOClockRange+0x2c>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003f96:	f044 040c 	orr.w	r4, r4, #12
 8003f9a:	e7f6      	b.n	8003f8a <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 100000000U)
 8003f9c:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <HAL_ETH_SetMDIOClockRange+0x4c>)
 8003f9e:	4298      	cmp	r0, r3
 8003fa0:	d9f3      	bls.n	8003f8a <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 150000000U)
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <HAL_ETH_SetMDIOClockRange+0x50>)
 8003fa4:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003fa6:	bf94      	ite	ls
 8003fa8:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003fac:	f044 0410 	orrhi.w	r4, r4, #16
 8003fb0:	e7eb      	b.n	8003f8a <HAL_ETH_SetMDIOClockRange+0x1a>
 8003fb2:	bf00      	nop
 8003fb4:	02160ebf 	.word	0x02160ebf
 8003fb8:	03938700 	.word	0x03938700
 8003fbc:	05f5e0ff 	.word	0x05f5e0ff
 8003fc0:	08f0d17f 	.word	0x08f0d17f

08003fc4 <HAL_ETH_GetError>:
  return heth->ErrorCode;
 8003fc4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
 8003fc8:	4770      	bx	lr

08003fca <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8003fca:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003fd4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd6:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004194 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fda:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8003fdc:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fde:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8003fe0:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fe2:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8003fe6:	43ac      	bics	r4, r5
 8003fe8:	f040 80b6 	bne.w	8004158 <HAL_GPIO_Init+0x188>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fec:	684d      	ldr	r5, [r1, #4]
 8003fee:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ff2:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ff4:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ff8:	fa06 f608 	lsl.w	r6, r6, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ffc:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ffe:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004000:	2f01      	cmp	r7, #1
 8004002:	d834      	bhi.n	800406e <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8004004:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004006:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800400a:	68cf      	ldr	r7, [r1, #12]
 800400c:	fa07 f708 	lsl.w	r7, r7, r8
 8004010:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004014:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004016:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004018:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800401c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004020:	409f      	lsls	r7, r3
 8004022:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004026:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004028:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402a:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800402c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004030:	688f      	ldr	r7, [r1, #8]
 8004032:	fa07 f708 	lsl.w	r7, r7, r8
 8004036:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800403a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403c:	d119      	bne.n	8004072 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800403e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004042:	f003 0b07 	and.w	fp, r3, #7
 8004046:	f04f 0e0f 	mov.w	lr, #15
 800404a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800404e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8004052:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004056:	fa0e fe0b 	lsl.w	lr, lr, fp
 800405a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800405e:	690f      	ldr	r7, [r1, #16]
 8004060:	fa07 f70b 	lsl.w	r7, r7, fp
 8004064:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8004068:	f8ca 7020 	str.w	r7, [sl, #32]
 800406c:	e001      	b.n	8004072 <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800406e:	2c03      	cmp	r4, #3
 8004070:	d1da      	bne.n	8004028 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 8004072:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004074:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004078:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800407c:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004080:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004084:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004086:	d067      	beq.n	8004158 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004088:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800408c:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004090:	f003 0703 	and.w	r7, r3, #3
 8004094:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004098:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800409c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040a0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80040a6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80040aa:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80040ae:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80040b2:	9401      	str	r4, [sp, #4]
 80040b4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040b6:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80040ba:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040be:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040c2:	4c33      	ldr	r4, [pc, #204]	; (8004190 <HAL_GPIO_Init+0x1c0>)
 80040c4:	42a0      	cmp	r0, r4
 80040c6:	d04e      	beq.n	8004166 <HAL_GPIO_Init+0x196>
 80040c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d04c      	beq.n	800416a <HAL_GPIO_Init+0x19a>
 80040d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040d4:	42a0      	cmp	r0, r4
 80040d6:	d04a      	beq.n	800416e <HAL_GPIO_Init+0x19e>
 80040d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040dc:	42a0      	cmp	r0, r4
 80040de:	d048      	beq.n	8004172 <HAL_GPIO_Init+0x1a2>
 80040e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d046      	beq.n	8004176 <HAL_GPIO_Init+0x1a6>
 80040e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d044      	beq.n	800417a <HAL_GPIO_Init+0x1aa>
 80040f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040f4:	42a0      	cmp	r0, r4
 80040f6:	d042      	beq.n	800417e <HAL_GPIO_Init+0x1ae>
 80040f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80040fc:	42a0      	cmp	r0, r4
 80040fe:	d040      	beq.n	8004182 <HAL_GPIO_Init+0x1b2>
 8004100:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004104:	42a0      	cmp	r0, r4
 8004106:	d03e      	beq.n	8004186 <HAL_GPIO_Init+0x1b6>
 8004108:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800410c:	42a0      	cmp	r0, r4
 800410e:	bf0c      	ite	eq
 8004110:	2409      	moveq	r4, #9
 8004112:	240a      	movne	r4, #10
 8004114:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004116:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004118:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800411c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800411e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8004122:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004124:	bf54      	ite	pl
 8004126:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004128:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800412c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800412e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8004130:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8004132:	bf54      	ite	pl
 8004134:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004136:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800413a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800413c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800413e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8004140:	bf54      	ite	pl
 8004142:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004144:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004148:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800414a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800414c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800414e:	bf54      	ite	pl
 8004150:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004152:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8004156:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8004158:	3301      	adds	r3, #1
 800415a:	2b10      	cmp	r3, #16
 800415c:	f47f af3e 	bne.w	8003fdc <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004160:	b003      	add	sp, #12
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004166:	2400      	movs	r4, #0
 8004168:	e7d4      	b.n	8004114 <HAL_GPIO_Init+0x144>
 800416a:	2401      	movs	r4, #1
 800416c:	e7d2      	b.n	8004114 <HAL_GPIO_Init+0x144>
 800416e:	2402      	movs	r4, #2
 8004170:	e7d0      	b.n	8004114 <HAL_GPIO_Init+0x144>
 8004172:	2403      	movs	r4, #3
 8004174:	e7ce      	b.n	8004114 <HAL_GPIO_Init+0x144>
 8004176:	2404      	movs	r4, #4
 8004178:	e7cc      	b.n	8004114 <HAL_GPIO_Init+0x144>
 800417a:	2405      	movs	r4, #5
 800417c:	e7ca      	b.n	8004114 <HAL_GPIO_Init+0x144>
 800417e:	2406      	movs	r4, #6
 8004180:	e7c8      	b.n	8004114 <HAL_GPIO_Init+0x144>
 8004182:	2407      	movs	r4, #7
 8004184:	e7c6      	b.n	8004114 <HAL_GPIO_Init+0x144>
 8004186:	2408      	movs	r4, #8
 8004188:	e7c4      	b.n	8004114 <HAL_GPIO_Init+0x144>
 800418a:	bf00      	nop
 800418c:	40013c00 	.word	0x40013c00
 8004190:	40020000 	.word	0x40020000
 8004194:	40023800 	.word	0x40023800

08004198 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004198:	6903      	ldr	r3, [r0, #16]
 800419a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800419c:	bf14      	ite	ne
 800419e:	2001      	movne	r0, #1
 80041a0:	2000      	moveq	r0, #0
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a4:	b10a      	cbz	r2, 80041aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041a6:	6181      	str	r1, [r0, #24]
  }
}
 80041a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041aa:	0409      	lsls	r1, r1, #16
 80041ac:	e7fb      	b.n	80041a6 <HAL_GPIO_WritePin+0x2>

080041ae <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041ae:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041b0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041b2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041b6:	3284      	adds	r2, #132	; 0x84
 80041b8:	1883      	adds	r3, r0, r2
{
 80041ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041be:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041c0:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041c4:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80041c6:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041ca:	684c      	ldr	r4, [r1, #4]
 80041cc:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041d0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80041d4:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041d8:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80041da:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041dc:	68c5      	ldr	r5, [r0, #12]
 80041de:	f3c5 450b 	ubfx	r5, r5, #16, #12
 80041e2:	443d      	add	r5, r7
 80041e4:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041e8:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041ea:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041ec:	68c5      	ldr	r5, [r0, #12]
 80041ee:	f3c5 050a 	ubfx	r5, r5, #0, #11
 80041f2:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041f4:	689d      	ldr	r5, [r3, #8]
 80041f6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80041fa:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041fc:	688d      	ldr	r5, [r1, #8]
 80041fe:	68c7      	ldr	r7, [r0, #12]
 8004200:	3501      	adds	r5, #1
 8004202:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004206:	443d      	add	r5, r7
 8004208:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800420c:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800420e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004210:	691d      	ldr	r5, [r3, #16]
 8004212:	f025 0507 	bic.w	r5, r5, #7
 8004216:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004218:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800421a:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800421c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004220:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004224:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004228:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 800422c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8004230:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8004234:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8004238:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800423a:	695d      	ldr	r5, [r3, #20]
 800423c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004240:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004242:	694d      	ldr	r5, [r1, #20]
 8004244:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004246:	69dd      	ldr	r5, [r3, #28]
 8004248:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 800424c:	f025 0507 	bic.w	r5, r5, #7
 8004250:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004252:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8004256:	433d      	orrs	r5, r7
 8004258:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800425a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800425c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800425e:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004262:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004264:	b31e      	cbz	r6, 80042ae <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004266:	2e01      	cmp	r6, #1
 8004268:	d023      	beq.n	80042b2 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800426a:	1eb5      	subs	r5, r6, #2
 800426c:	2d02      	cmp	r5, #2
 800426e:	d922      	bls.n	80042b6 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004270:	2e07      	cmp	r6, #7
 8004272:	bf0c      	ite	eq
 8004274:	2502      	moveq	r5, #2
 8004276:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004278:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800427a:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800427e:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004282:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004284:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004286:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004288:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800428a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800428c:	436e      	muls	r6, r5
 800428e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8004292:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004294:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004296:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 800429a:	f024 0407 	bic.w	r4, r4, #7
 800429e:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80042a0:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80042a2:	5883      	ldr	r3, [r0, r2]
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	5083      	str	r3, [r0, r2]
}
 80042aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80042ae:	2504      	movs	r5, #4
 80042b0:	e7e2      	b.n	8004278 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80042b2:	2503      	movs	r5, #3
 80042b4:	e7e0      	b.n	8004278 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80042b6:	2502      	movs	r5, #2
 80042b8:	e7de      	b.n	8004278 <LTDC_SetConfig+0xca>

080042ba <HAL_LTDC_MspInit>:
}
 80042ba:	4770      	bx	lr

080042bc <HAL_LTDC_Init>:
{
 80042bc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80042be:	4604      	mov	r4, r0
 80042c0:	2800      	cmp	r0, #0
 80042c2:	d063      	beq.n	800438c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80042c4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80042c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80042cc:	b91b      	cbnz	r3, 80042d6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80042ce:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80042d2:	f7ff fff2 	bl	80042ba <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80042d6:	2302      	movs	r3, #2
 80042d8:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	699a      	ldr	r2, [r3, #24]
 80042e0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80042e4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042e6:	6999      	ldr	r1, [r3, #24]
 80042e8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80042ec:	4302      	orrs	r2, r0
 80042ee:	68e0      	ldr	r0, [r4, #12]
 80042f0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042f2:	6920      	ldr	r0, [r4, #16]
 80042f4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042f6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042f8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042fa:	4925      	ldr	r1, [pc, #148]	; (8004390 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042fc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	400a      	ands	r2, r1
 8004302:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800430a:	69a0      	ldr	r0, [r4, #24]
 800430c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800430e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004310:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	400a      	ands	r2, r1
 8004316:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800431e:	6a20      	ldr	r0, [r4, #32]
 8004320:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004322:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004324:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	400a      	ands	r2, r1
 800432a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004332:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004334:	4302      	orrs	r2, r0
 8004336:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004338:	695a      	ldr	r2, [r3, #20]
 800433a:	4011      	ands	r1, r2
 800433c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800433e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004346:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004348:	430a      	orrs	r2, r1
 800434a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800434c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800434e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004352:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004356:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800435a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800435c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800435e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8004362:	430a      	orrs	r2, r1
 8004364:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004368:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800436c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	f042 0206 	orr.w	r2, r2, #6
 8004376:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	f042 0201 	orr.w	r2, r2, #1
 800437e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8004380:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004382:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004386:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 800438a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800438c:	2001      	movs	r0, #1
 800438e:	e7fc      	b.n	800438a <HAL_LTDC_Init+0xce>
 8004390:	f000f800 	.word	0xf000f800

08004394 <HAL_LTDC_ConfigLayer>:
{
 8004394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004398:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 800439c:	4606      	mov	r6, r0
 800439e:	460f      	mov	r7, r1
 80043a0:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	f04f 0002 	mov.w	r0, #2
 80043a8:	d01f      	beq.n	80043ea <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043aa:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 80043ac:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043b0:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043b2:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043b6:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80043ba:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043be:	3438      	adds	r4, #56	; 0x38
 80043c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043cc:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043ce:	4630      	mov	r0, r6
 80043d0:	4662      	mov	r2, ip
 80043d2:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043d4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80043d6:	f7ff feea 	bl	80041ae <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043da:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80043dc:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80043de:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80043e2:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80043e6:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80043ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080043ee <HAL_LTDC_SetAlpha>:
{
 80043ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
 80043f0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 80043f4:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	f04f 0302 	mov.w	r3, #2
 80043fc:	d015      	beq.n	800442a <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043fe:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 8004402:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8004404:	2601      	movs	r6, #1
  pLayerCfg->Alpha = Alpha;
 8004406:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8004408:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 800440c:	18c5      	adds	r5, r0, r3
 800440e:	64e9      	str	r1, [r5, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004410:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004414:	4401      	add	r1, r0
 8004416:	f7ff feca 	bl	80041ae <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800441a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800441c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800441e:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8004420:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004424:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8004428:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800442a:	4618      	mov	r0, r3
 800442c:	e7fc      	b.n	8004428 <HAL_LTDC_SetAlpha+0x3a>

0800442e <HAL_LTDC_GetState>:
  return hltdc->State;
 800442e:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 8004432:	4770      	bx	lr

08004434 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_PWREx_EnableOverDrive+0x68>)
{
 8004436:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800443a:	4c19      	ldr	r4, [pc, #100]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800443c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004440:	641a      	str	r2, [r3, #64]	; 0x40
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004452:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004454:	f7fe fd42 	bl	8002edc <HAL_GetTick>
 8004458:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800445a:	6863      	ldr	r3, [r4, #4]
 800445c:	03da      	lsls	r2, r3, #15
 800445e:	d50c      	bpl.n	800447a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004460:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004462:	4d0f      	ldr	r5, [pc, #60]	; (80044a0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004468:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800446a:	f7fe fd37 	bl	8002edc <HAL_GetTick>
 800446e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004470:	686b      	ldr	r3, [r5, #4]
 8004472:	039b      	lsls	r3, r3, #14
 8004474:	d50a      	bpl.n	800448c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004476:	2000      	movs	r0, #0
 8004478:	e006      	b.n	8004488 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800447a:	f7fe fd2f 	bl	8002edc <HAL_GetTick>
 800447e:	1b40      	subs	r0, r0, r5
 8004480:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004484:	d9e9      	bls.n	800445a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8004486:	2003      	movs	r0, #3
}
 8004488:	b003      	add	sp, #12
 800448a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800448c:	f7fe fd26 	bl	8002edc <HAL_GetTick>
 8004490:	1b00      	subs	r0, r0, r4
 8004492:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004496:	d9eb      	bls.n	8004470 <HAL_PWREx_EnableOverDrive+0x3c>
 8004498:	e7f5      	b.n	8004486 <HAL_PWREx_EnableOverDrive+0x52>
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000

080044a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a8:	4604      	mov	r4, r0
 80044aa:	b340      	cbz	r0, 80044fe <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ac:	6803      	ldr	r3, [r0, #0]
 80044ae:	07db      	lsls	r3, r3, #31
 80044b0:	d410      	bmi.n	80044d4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	079f      	lsls	r7, r3, #30
 80044b6:	d464      	bmi.n	8004582 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	0719      	lsls	r1, r3, #28
 80044bc:	f100 80aa 	bmi.w	8004614 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	075a      	lsls	r2, r3, #29
 80044c4:	f100 80cb 	bmi.w	800465e <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044c8:	69a2      	ldr	r2, [r4, #24]
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	f040 8134 	bne.w	8004738 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80044d0:	2000      	movs	r0, #0
 80044d2:	e02b      	b.n	800452c <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d4:	4b96      	ldr	r3, [pc, #600]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	f002 020c 	and.w	r2, r2, #12
 80044dc:	2a04      	cmp	r2, #4
 80044de:	d007      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	f002 020c 	and.w	r2, r2, #12
 80044e6:	2a08      	cmp	r2, #8
 80044e8:	d10b      	bne.n	8004502 <HAL_RCC_OscConfig+0x5e>
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	0256      	lsls	r6, r2, #9
 80044ee:	d508      	bpl.n	8004502 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f0:	4b8f      	ldr	r3, [pc, #572]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	039d      	lsls	r5, r3, #14
 80044f6:	d5dc      	bpl.n	80044b2 <HAL_RCC_OscConfig+0xe>
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1d9      	bne.n	80044b2 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80044fe:	2001      	movs	r0, #1
 8004500:	e014      	b.n	800452c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004502:	6862      	ldr	r2, [r4, #4]
 8004504:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004508:	d113      	bne.n	8004532 <HAL_RCC_OscConfig+0x8e>
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004510:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004512:	f7fe fce3 	bl	8002edc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	4e86      	ldr	r6, [pc, #536]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8004518:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451a:	6833      	ldr	r3, [r6, #0]
 800451c:	0398      	lsls	r0, r3, #14
 800451e:	d4c8      	bmi.n	80044b2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe fcdc 	bl	8002edc <HAL_GetTick>
 8004524:	1b40      	subs	r0, r0, r5
 8004526:	2864      	cmp	r0, #100	; 0x64
 8004528:	d9f7      	bls.n	800451a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 800452a:	2003      	movs	r0, #3
}
 800452c:	b002      	add	sp, #8
 800452e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004532:	4d7f      	ldr	r5, [pc, #508]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	b992      	cbnz	r2, 800455e <HAL_RCC_OscConfig+0xba>
 8004538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004544:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004546:	f7fe fcc9 	bl	8002edc <HAL_GetTick>
 800454a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	0399      	lsls	r1, r3, #14
 8004550:	d5af      	bpl.n	80044b2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004552:	f7fe fcc3 	bl	8002edc <HAL_GetTick>
 8004556:	1b80      	subs	r0, r0, r6
 8004558:	2864      	cmp	r0, #100	; 0x64
 800455a:	d9f7      	bls.n	800454c <HAL_RCC_OscConfig+0xa8>
 800455c:	e7e5      	b.n	800452a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8004562:	d107      	bne.n	8004574 <HAL_RCC_OscConfig+0xd0>
 8004564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	682b      	ldr	r3, [r5, #0]
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	602b      	str	r3, [r5, #0]
 8004572:	e7ce      	b.n	8004512 <HAL_RCC_OscConfig+0x6e>
 8004574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	682b      	ldr	r3, [r5, #0]
 800457c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004580:	e7f6      	b.n	8004570 <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004582:	4b6b      	ldr	r3, [pc, #428]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	f012 0f0c 	tst.w	r2, #12
 800458a:	d007      	beq.n	800459c <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	f002 020c 	and.w	r2, r2, #12
 8004592:	2a08      	cmp	r2, #8
 8004594:	d111      	bne.n	80045ba <HAL_RCC_OscConfig+0x116>
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	0252      	lsls	r2, r2, #9
 800459a:	d40e      	bmi.n	80045ba <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459c:	4a64      	ldr	r2, [pc, #400]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 800459e:	6813      	ldr	r3, [r2, #0]
 80045a0:	079b      	lsls	r3, r3, #30
 80045a2:	d502      	bpl.n	80045aa <HAL_RCC_OscConfig+0x106>
 80045a4:	68e3      	ldr	r3, [r4, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d1a9      	bne.n	80044fe <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	6921      	ldr	r1, [r4, #16]
 80045ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80045b6:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b8:	e77e      	b.n	80044b8 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045ba:	68e2      	ldr	r2, [r4, #12]
 80045bc:	b1c2      	cbz	r2, 80045f0 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 80045be:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c0:	4d5b      	ldr	r5, [pc, #364]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045c8:	f7fe fc88 	bl	8002edc <HAL_GetTick>
 80045cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	682b      	ldr	r3, [r5, #0]
 80045d0:	079f      	lsls	r7, r3, #30
 80045d2:	d507      	bpl.n	80045e4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	6922      	ldr	r2, [r4, #16]
 80045d8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80045dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80045e0:	602b      	str	r3, [r5, #0]
 80045e2:	e769      	b.n	80044b8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fe fc7a 	bl	8002edc <HAL_GetTick>
 80045e8:	1b80      	subs	r0, r0, r6
 80045ea:	2802      	cmp	r0, #2
 80045ec:	d9ef      	bls.n	80045ce <HAL_RCC_OscConfig+0x12a>
 80045ee:	e79c      	b.n	800452a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80045f0:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045f2:	4e4f      	ldr	r6, [pc, #316]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 80045f4:	f022 0201 	bic.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045fa:	f7fe fc6f 	bl	8002edc <HAL_GetTick>
 80045fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	0798      	lsls	r0, r3, #30
 8004604:	f57f af58 	bpl.w	80044b8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004608:	f7fe fc68 	bl	8002edc <HAL_GetTick>
 800460c:	1b40      	subs	r0, r0, r5
 800460e:	2802      	cmp	r0, #2
 8004610:	d9f6      	bls.n	8004600 <HAL_RCC_OscConfig+0x15c>
 8004612:	e78a      	b.n	800452a <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004614:	6963      	ldr	r3, [r4, #20]
 8004616:	4d46      	ldr	r5, [pc, #280]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 8004618:	b183      	cbz	r3, 800463c <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 800461a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004622:	f7fe fc5b 	bl	8002edc <HAL_GetTick>
 8004626:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004628:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800462a:	079b      	lsls	r3, r3, #30
 800462c:	f53f af48 	bmi.w	80044c0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004630:	f7fe fc54 	bl	8002edc <HAL_GetTick>
 8004634:	1b80      	subs	r0, r0, r6
 8004636:	2802      	cmp	r0, #2
 8004638:	d9f6      	bls.n	8004628 <HAL_RCC_OscConfig+0x184>
 800463a:	e776      	b.n	800452a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 800463c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8004644:	f7fe fc4a 	bl	8002edc <HAL_GetTick>
 8004648:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800464a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800464c:	079f      	lsls	r7, r3, #30
 800464e:	f57f af37 	bpl.w	80044c0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004652:	f7fe fc43 	bl	8002edc <HAL_GetTick>
 8004656:	1b80      	subs	r0, r0, r6
 8004658:	2802      	cmp	r0, #2
 800465a:	d9f6      	bls.n	800464a <HAL_RCC_OscConfig+0x1a6>
 800465c:	e765      	b.n	800452a <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 8004660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004662:	00d0      	lsls	r0, r2, #3
 8004664:	d427      	bmi.n	80046b6 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8004668:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467a:	4d2e      	ldr	r5, [pc, #184]	; (8004734 <HAL_RCC_OscConfig+0x290>)
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	05d9      	lsls	r1, r3, #23
 8004680:	d51b      	bpl.n	80046ba <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004682:	68a3      	ldr	r3, [r4, #8]
 8004684:	4d2a      	ldr	r5, [pc, #168]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 8004686:	2b01      	cmp	r3, #1
 8004688:	d127      	bne.n	80046da <HAL_RCC_OscConfig+0x236>
 800468a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004696:	f7fe fc21 	bl	8002edc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469a:	4e25      	ldr	r6, [pc, #148]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800469c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80046a0:	079b      	lsls	r3, r3, #30
 80046a2:	d53f      	bpl.n	8004724 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80046a4:	2f00      	cmp	r7, #0
 80046a6:	f43f af0f 	beq.w	80044c8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80046aa:	4a21      	ldr	r2, [pc, #132]	; (8004730 <HAL_RCC_OscConfig+0x28c>)
 80046ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80046ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b2:	6413      	str	r3, [r2, #64]	; 0x40
 80046b4:	e708      	b.n	80044c8 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 80046b6:	2700      	movs	r7, #0
 80046b8:	e7df      	b.n	800467a <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80046c2:	f7fe fc0b 	bl	8002edc <HAL_GetTick>
 80046c6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c8:	682b      	ldr	r3, [r5, #0]
 80046ca:	05da      	lsls	r2, r3, #23
 80046cc:	d4d9      	bmi.n	8004682 <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fe fc05 	bl	8002edc <HAL_GetTick>
 80046d2:	1b80      	subs	r0, r0, r6
 80046d4:	2864      	cmp	r0, #100	; 0x64
 80046d6:	d9f7      	bls.n	80046c8 <HAL_RCC_OscConfig+0x224>
 80046d8:	e727      	b.n	800452a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046da:	b9ab      	cbnz	r3, 8004708 <HAL_RCC_OscConfig+0x264>
 80046dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	672b      	str	r3, [r5, #112]	; 0x70
 80046e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046ea:	f023 0304 	bic.w	r3, r3, #4
 80046ee:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80046f0:	f7fe fbf4 	bl	8002edc <HAL_GetTick>
 80046f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80046f8:	0798      	lsls	r0, r3, #30
 80046fa:	d5d3      	bpl.n	80046a4 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fc:	f7fe fbee 	bl	8002edc <HAL_GetTick>
 8004700:	1b80      	subs	r0, r0, r6
 8004702:	4540      	cmp	r0, r8
 8004704:	d9f7      	bls.n	80046f6 <HAL_RCC_OscConfig+0x252>
 8004706:	e710      	b.n	800452a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004708:	2b05      	cmp	r3, #5
 800470a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800470c:	d103      	bne.n	8004716 <HAL_RCC_OscConfig+0x272>
 800470e:	f043 0304 	orr.w	r3, r3, #4
 8004712:	672b      	str	r3, [r5, #112]	; 0x70
 8004714:	e7b9      	b.n	800468a <HAL_RCC_OscConfig+0x1e6>
 8004716:	f023 0301 	bic.w	r3, r3, #1
 800471a:	672b      	str	r3, [r5, #112]	; 0x70
 800471c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800471e:	f023 0304 	bic.w	r3, r3, #4
 8004722:	e7b5      	b.n	8004690 <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004724:	f7fe fbda 	bl	8002edc <HAL_GetTick>
 8004728:	1b40      	subs	r0, r0, r5
 800472a:	4540      	cmp	r0, r8
 800472c:	d9b7      	bls.n	800469e <HAL_RCC_OscConfig+0x1fa>
 800472e:	e6fc      	b.n	800452a <HAL_RCC_OscConfig+0x86>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004738:	4d38      	ldr	r5, [pc, #224]	; (800481c <HAL_RCC_OscConfig+0x378>)
 800473a:	68ab      	ldr	r3, [r5, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d041      	beq.n	80047c8 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 8004744:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004746:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8004748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800474c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800474e:	d12e      	bne.n	80047ae <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 8004750:	f7fe fbc4 	bl	8002edc <HAL_GetTick>
 8004754:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	0199      	lsls	r1, r3, #6
 800475a:	d422      	bmi.n	80047a2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800475c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800475e:	085b      	lsrs	r3, r3, #1
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004766:	430b      	orrs	r3, r1
 8004768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800476c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800476e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004772:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004774:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800477c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800477e:	682b      	ldr	r3, [r5, #0]
 8004780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004784:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004786:	f7fe fba9 	bl	8002edc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478a:	4d24      	ldr	r5, [pc, #144]	; (800481c <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 800478c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	682b      	ldr	r3, [r5, #0]
 8004790:	019a      	lsls	r2, r3, #6
 8004792:	f53f ae9d 	bmi.w	80044d0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004796:	f7fe fba1 	bl	8002edc <HAL_GetTick>
 800479a:	1b00      	subs	r0, r0, r4
 800479c:	2802      	cmp	r0, #2
 800479e:	d9f6      	bls.n	800478e <HAL_RCC_OscConfig+0x2ea>
 80047a0:	e6c3      	b.n	800452a <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a2:	f7fe fb9b 	bl	8002edc <HAL_GetTick>
 80047a6:	1b80      	subs	r0, r0, r6
 80047a8:	2802      	cmp	r0, #2
 80047aa:	d9d4      	bls.n	8004756 <HAL_RCC_OscConfig+0x2b2>
 80047ac:	e6bd      	b.n	800452a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80047ae:	f7fe fb95 	bl	8002edc <HAL_GetTick>
 80047b2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	019b      	lsls	r3, r3, #6
 80047b8:	f57f ae8a 	bpl.w	80044d0 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047bc:	f7fe fb8e 	bl	8002edc <HAL_GetTick>
 80047c0:	1b00      	subs	r0, r0, r4
 80047c2:	2802      	cmp	r0, #2
 80047c4:	d9f6      	bls.n	80047b4 <HAL_RCC_OscConfig+0x310>
 80047c6:	e6b0      	b.n	800452a <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c8:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 80047ca:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047cc:	f43f ae97 	beq.w	80044fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047d4:	69e1      	ldr	r1, [r4, #28]
 80047d6:	428a      	cmp	r2, r1
 80047d8:	f47f ae91 	bne.w	80044fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e0:	6a21      	ldr	r1, [r4, #32]
 80047e2:	428a      	cmp	r2, r1
 80047e4:	f47f ae8b 	bne.w	80044fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047e8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047ee:	401a      	ands	r2, r3
 80047f0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80047f4:	f47f ae83 	bne.w	80044fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80047f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80047fa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80047fe:	0852      	lsrs	r2, r2, #1
 8004800:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004802:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004806:	f47f ae7a 	bne.w	80044fe <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800480a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800480e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004810:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8004814:	f43f ae5c 	beq.w	80044d0 <HAL_RCC_OscConfig+0x2c>
 8004818:	e671      	b.n	80044fe <HAL_RCC_OscConfig+0x5a>
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800

08004820 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004820:	4913      	ldr	r1, [pc, #76]	; (8004870 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8004822:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004824:	688b      	ldr	r3, [r1, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d01b      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0x46>
 800482e:	2b08      	cmp	r3, #8
 8004830:	d11b      	bne.n	800486a <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004832:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004834:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004836:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004838:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800483c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004840:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004844:	bf1a      	itte	ne
 8004846:	480b      	ldrne	r0, [pc, #44]	; (8004874 <HAL_RCC_GetSysClockFreq+0x54>)
 8004848:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484a:	480b      	ldreq	r0, [pc, #44]	; (8004878 <HAL_RCC_GetSysClockFreq+0x58>)
 800484c:	fba1 0100 	umull	r0, r1, r1, r0
 8004850:	f7fb fd36 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetSysClockFreq+0x50>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800485c:	3301      	adds	r3, #1
 800485e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8004860:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004864:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004866:	4803      	ldr	r0, [pc, #12]	; (8004874 <HAL_RCC_GetSysClockFreq+0x54>)
 8004868:	e7fc      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 800486a:	4803      	ldr	r0, [pc, #12]	; (8004878 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 800486c:	e7fa      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x44>
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800
 8004874:	017d7840 	.word	0x017d7840
 8004878:	00f42400 	.word	0x00f42400

0800487c <HAL_RCC_ClockConfig>:
{
 800487c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004880:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004882:	4604      	mov	r4, r0
 8004884:	b910      	cbnz	r0, 800488c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004886:	2001      	movs	r0, #1
}
 8004888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4a46      	ldr	r2, [pc, #280]	; (80049a8 <HAL_RCC_ClockConfig+0x12c>)
 800488e:	6813      	ldr	r3, [r2, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	428b      	cmp	r3, r1
 8004896:	d328      	bcc.n	80048ea <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	0797      	lsls	r7, r2, #30
 800489c:	d430      	bmi.n	8004900 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	07d0      	lsls	r0, r2, #31
 80048a0:	d444      	bmi.n	800492c <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a2:	4a41      	ldr	r2, [pc, #260]	; (80049a8 <HAL_RCC_ClockConfig+0x12c>)
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	42ab      	cmp	r3, r5
 80048ac:	d867      	bhi.n	800497e <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	0751      	lsls	r1, r2, #29
 80048b2:	d470      	bmi.n	8004996 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b4:	0713      	lsls	r3, r2, #28
 80048b6:	d507      	bpl.n	80048c8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048b8:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
 80048ba:	6921      	ldr	r1, [r4, #16]
 80048bc:	6893      	ldr	r3, [r2, #8]
 80048be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80048c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80048c6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048c8:	f7ff ffaa 	bl	8004820 <HAL_RCC_GetSysClockFreq>
 80048cc:	4b37      	ldr	r3, [pc, #220]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
 80048ce:	4a38      	ldr	r2, [pc, #224]	; (80049b0 <HAL_RCC_ClockConfig+0x134>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80048d6:	5cd3      	ldrb	r3, [r2, r3]
 80048d8:	40d8      	lsrs	r0, r3
 80048da:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <HAL_RCC_ClockConfig+0x138>)
 80048dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80048de:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <HAL_RCC_ClockConfig+0x13c>)
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	f7fd fc0d 	bl	8002100 <HAL_InitTick>
  return HAL_OK;
 80048e6:	2000      	movs	r0, #0
 80048e8:	e7ce      	b.n	8004888 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ea:	6813      	ldr	r3, [r2, #0]
 80048ec:	f023 030f 	bic.w	r3, r3, #15
 80048f0:	430b      	orrs	r3, r1
 80048f2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048f4:	6813      	ldr	r3, [r2, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	428b      	cmp	r3, r1
 80048fc:	d1c3      	bne.n	8004886 <HAL_RCC_ClockConfig+0xa>
 80048fe:	e7cb      	b.n	8004898 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004900:	f012 0f04 	tst.w	r2, #4
 8004904:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
 8004906:	d003      	beq.n	8004910 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004908:	6899      	ldr	r1, [r3, #8]
 800490a:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800490e:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004910:	0716      	lsls	r6, r2, #28
 8004912:	d503      	bpl.n	800491c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004914:	6899      	ldr	r1, [r3, #8]
 8004916:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800491a:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4923      	ldr	r1, [pc, #140]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
 800491e:	68a0      	ldr	r0, [r4, #8]
 8004920:	688b      	ldr	r3, [r1, #8]
 8004922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004926:	4303      	orrs	r3, r0
 8004928:	608b      	str	r3, [r1, #8]
 800492a:	e7b8      	b.n	800489e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492c:	6861      	ldr	r1, [r4, #4]
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
 8004930:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004934:	d11b      	bne.n	800496e <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493a:	d0a4      	beq.n	8004886 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800493e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	4f1a      	ldr	r7, [pc, #104]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004944:	f022 0203 	bic.w	r2, r2, #3
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800494c:	f7fe fac6 	bl	8002edc <HAL_GetTick>
 8004950:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6862      	ldr	r2, [r4, #4]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800495e:	d0a0      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004960:	f7fe fabc 	bl	8002edc <HAL_GetTick>
 8004964:	1b80      	subs	r0, r0, r6
 8004966:	4540      	cmp	r0, r8
 8004968:	d9f3      	bls.n	8004952 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800496a:	2003      	movs	r0, #3
 800496c:	e78c      	b.n	8004888 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496e:	2902      	cmp	r1, #2
 8004970:	d102      	bne.n	8004978 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004976:	e7e0      	b.n	800493a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004978:	f012 0f02 	tst.w	r2, #2
 800497c:	e7dd      	b.n	800493a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	f023 030f 	bic.w	r3, r3, #15
 8004984:	432b      	orrs	r3, r5
 8004986:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004988:	6813      	ldr	r3, [r2, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	42ab      	cmp	r3, r5
 8004990:	f47f af79 	bne.w	8004886 <HAL_RCC_ClockConfig+0xa>
 8004994:	e78b      	b.n	80048ae <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004996:	4905      	ldr	r1, [pc, #20]	; (80049ac <HAL_RCC_ClockConfig+0x130>)
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	688b      	ldr	r3, [r1, #8]
 800499c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80049a0:	4303      	orrs	r3, r0
 80049a2:	608b      	str	r3, [r1, #8]
 80049a4:	e786      	b.n	80048b4 <HAL_RCC_ClockConfig+0x38>
 80049a6:	bf00      	nop
 80049a8:	40023c00 	.word	0x40023c00
 80049ac:	40023800 	.word	0x40023800
 80049b0:	080142bc 	.word	0x080142bc
 80049b4:	20001a50 	.word	0x20001a50
 80049b8:	20001a58 	.word	0x20001a58

080049bc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80049bc:	4b01      	ldr	r3, [pc, #4]	; (80049c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20001a50 	.word	0x20001a50

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x14>)
 80049ca:	4a05      	ldr	r2, [pc, #20]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80049d2:	5cd3      	ldrb	r3, [r2, r3]
 80049d4:	4a03      	ldr	r2, [pc, #12]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80049d6:	6810      	ldr	r0, [r2, #0]
}
 80049d8:	40d8      	lsrs	r0, r3
 80049da:	4770      	bx	lr
 80049dc:	40023800 	.word	0x40023800
 80049e0:	080142cc 	.word	0x080142cc
 80049e4:	20001a50 	.word	0x20001a50

080049e8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049e8:	230f      	movs	r3, #15
 80049ea:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCC_GetClockConfig+0x34>)
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	f002 0203 	and.w	r2, r2, #3
 80049f4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80049fc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004a04:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	08db      	lsrs	r3, r3, #3
 8004a0a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a0e:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCC_GetClockConfig+0x38>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 030f 	and.w	r3, r3, #15
 8004a18:	600b      	str	r3, [r1, #0]
}
 8004a1a:	4770      	bx	lr
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	40023c00 	.word	0x40023c00

08004a24 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a24:	6803      	ldr	r3, [r0, #0]
{
 8004a26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a2a:	f013 0601 	ands.w	r6, r3, #1
{
 8004a2e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a32:	4aaa      	ldr	r2, [pc, #680]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a34:	6891      	ldr	r1, [r2, #8]
 8004a36:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004a3a:	6091      	str	r1, [r2, #8]
 8004a3c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8004a3e:	6891      	ldr	r1, [r2, #8]
 8004a40:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a42:	fab6 f686 	clz	r6, r6
 8004a46:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a48:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a4a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8004a4e:	d012      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a50:	49a2      	ldr	r1, [pc, #648]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a52:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004a54:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a58:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a5c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8004a60:	bf08      	it	eq
 8004a62:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a64:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a68:	bf16      	itet	ne
 8004a6a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004a6e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a70:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a72:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a76:	02d8      	lsls	r0, r3, #11
 8004a78:	d510      	bpl.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a7a:	4898      	ldr	r0, [pc, #608]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004a7c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004a7e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a82:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a86:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004a8a:	ea42 0201 	orr.w	r2, r2, r1
 8004a8e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a92:	f000 8184 	beq.w	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004a96:	2900      	cmp	r1, #0
 8004a98:	bf08      	it	eq
 8004a9a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004a9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004aa0:	bf18      	it	ne
 8004aa2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	d531      	bpl.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aa8:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004aaa:	4f8d      	ldr	r7, [pc, #564]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aba:	9301      	str	r3, [sp, #4]
 8004abc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fe fa09 	bl	8002edc <HAL_GetTick>
 8004aca:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	05da      	lsls	r2, r3, #23
 8004ad0:	f140 8167 	bpl.w	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ad4:	4f81      	ldr	r7, [pc, #516]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004adc:	f040 816c 	bne.w	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ae2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004ae6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004aea:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004aec:	f040 818a 	bne.w	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004af0:	6891      	ldr	r1, [r2, #8]
 8004af2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004af6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004afa:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004afe:	4301      	orrs	r1, r0
 8004b00:	6091      	str	r1, [r2, #8]
 8004b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004b08:	430b      	orrs	r3, r1
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	06d9      	lsls	r1, r3, #27
 8004b10:	d50c      	bpl.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b12:	4a72      	ldr	r2, [pc, #456]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b14:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004b18:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004b1c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004b20:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004b24:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b26:	4301      	orrs	r1, r0
 8004b28:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b2c:	045a      	lsls	r2, r3, #17
 8004b2e:	d508      	bpl.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b30:	496a      	ldr	r1, [pc, #424]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b32:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004b34:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b3c:	4302      	orrs	r2, r0
 8004b3e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b42:	041f      	lsls	r7, r3, #16
 8004b44:	d508      	bpl.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b46:	4965      	ldr	r1, [pc, #404]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b48:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004b4a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b4e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004b52:	4302      	orrs	r2, r0
 8004b54:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b58:	03d8      	lsls	r0, r3, #15
 8004b5a:	d508      	bpl.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b5c:	495f      	ldr	r1, [pc, #380]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b5e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004b60:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b64:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004b68:	4302      	orrs	r2, r0
 8004b6a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b6e:	0399      	lsls	r1, r3, #14
 8004b70:	d508      	bpl.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b72:	495a      	ldr	r1, [pc, #360]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b74:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004b76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b7a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004b7e:	4302      	orrs	r2, r0
 8004b80:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b84:	065a      	lsls	r2, r3, #25
 8004b86:	d508      	bpl.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b88:	4954      	ldr	r1, [pc, #336]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b8a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004b8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004b90:	f022 0203 	bic.w	r2, r2, #3
 8004b94:	4302      	orrs	r2, r0
 8004b96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b9a:	061f      	lsls	r7, r3, #24
 8004b9c:	d508      	bpl.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b9e:	494f      	ldr	r1, [pc, #316]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ba0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004ba2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ba6:	f022 020c 	bic.w	r2, r2, #12
 8004baa:	4302      	orrs	r2, r0
 8004bac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bb0:	05d8      	lsls	r0, r3, #23
 8004bb2:	d508      	bpl.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb4:	4949      	ldr	r1, [pc, #292]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004bb8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bbc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004bc0:	4302      	orrs	r2, r0
 8004bc2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bc6:	0599      	lsls	r1, r3, #22
 8004bc8:	d508      	bpl.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bca:	4944      	ldr	r1, [pc, #272]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bcc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004bce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bd2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004bd6:	4302      	orrs	r2, r0
 8004bd8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bdc:	055a      	lsls	r2, r3, #21
 8004bde:	d508      	bpl.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004be0:	493e      	ldr	r1, [pc, #248]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004be4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004be8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004bec:	4302      	orrs	r2, r0
 8004bee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004bf2:	051f      	lsls	r7, r3, #20
 8004bf4:	d508      	bpl.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004bf6:	4939      	ldr	r1, [pc, #228]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bfe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c02:	4302      	orrs	r2, r0
 8004c04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c08:	04d8      	lsls	r0, r3, #19
 8004c0a:	d508      	bpl.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c0c:	4933      	ldr	r1, [pc, #204]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c0e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004c10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c14:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004c18:	4302      	orrs	r2, r0
 8004c1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004c1e:	0499      	lsls	r1, r3, #18
 8004c20:	d508      	bpl.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004c22:	492e      	ldr	r1, [pc, #184]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c24:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004c26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004c2e:	4302      	orrs	r2, r0
 8004c30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c34:	025a      	lsls	r2, r3, #9
 8004c36:	d508      	bpl.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c38:	4928      	ldr	r1, [pc, #160]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004c3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c40:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004c44:	4302      	orrs	r2, r0
 8004c46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004c4a:	029f      	lsls	r7, r3, #10
 8004c4c:	d50c      	bpl.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c4e:	4823      	ldr	r0, [pc, #140]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c50:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004c52:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004c56:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c5a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8004c5e:	bf08      	it	eq
 8004c60:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004c62:	430a      	orrs	r2, r1
 8004c64:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004c68:	f013 0f08 	tst.w	r3, #8
 8004c6c:	bf18      	it	ne
 8004c6e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c70:	0358      	lsls	r0, r3, #13
 8004c72:	d508      	bpl.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c74:	4919      	ldr	r1, [pc, #100]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c76:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004c78:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c80:	4302      	orrs	r2, r0
 8004c82:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004c86:	0219      	lsls	r1, r3, #8
 8004c88:	d509      	bpl.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c8a:	4914      	ldr	r1, [pc, #80]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c8c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004c90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c94:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004c98:	4302      	orrs	r2, r0
 8004c9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c9e:	2e01      	cmp	r6, #1
 8004ca0:	f000 80b4 	beq.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004ca4:	019a      	lsls	r2, r3, #6
 8004ca6:	f100 80b1 	bmi.w	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004caa:	2d01      	cmp	r5, #1
 8004cac:	d175      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cae:	4d0b      	ldr	r5, [pc, #44]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb6:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fe f910 	bl	8002edc <HAL_GetTick>
 8004cbc:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cbe:	682b      	ldr	r3, [r5, #0]
 8004cc0:	009f      	lsls	r7, r3, #2
 8004cc2:	f100 8127 	bmi.w	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cc6:	6822      	ldr	r2, [r4, #0]
 8004cc8:	0316      	lsls	r6, r2, #12
 8004cca:	d501      	bpl.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004ccc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cce:	b14b      	cbz	r3, 8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004cd0:	02d0      	lsls	r0, r2, #11
 8004cd2:	d522      	bpl.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd6:	bb03      	cbnz	r3, 8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004cd8:	e004      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004cda:	bf00      	nop
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ce4:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ce8:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cf0:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6961      	ldr	r1, [r4, #20]
 8004cf8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004cfc:	69a1      	ldr	r1, [r4, #24]
 8004cfe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d02:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d06:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004d0a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d0c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004d10:	3901      	subs	r1, #1
 8004d12:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d16:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d1a:	0291      	lsls	r1, r2, #10
 8004d1c:	d515      	bpl.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004d1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d24:	d111      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d26:	4982      	ldr	r1, [pc, #520]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d28:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d2c:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d30:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004d34:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004d38:	4303      	orrs	r3, r0
 8004d3a:	6960      	ldr	r0, [r4, #20]
 8004d3c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004d40:	6a20      	ldr	r0, [r4, #32]
 8004d42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d4a:	0712      	lsls	r2, r2, #28
 8004d4c:	d519      	bpl.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d4e:	4a78      	ldr	r2, [pc, #480]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d50:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d54:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d58:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6961      	ldr	r1, [r4, #20]
 8004d64:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004d68:	69e1      	ldr	r1, [r4, #28]
 8004d6a:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004d6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d72:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004d76:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004d78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d82:	4c6b      	ldr	r4, [pc, #428]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d84:	6823      	ldr	r3, [r4, #0]
 8004d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8c:	f7fe f8a6 	bl	8002edc <HAL_GetTick>
 8004d90:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	f140 80c4 	bpl.w	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e009      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8004d9e:	2601      	movs	r6, #1
 8004da0:	e67c      	b.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da2:	f7fe f89b 	bl	8002edc <HAL_GetTick>
 8004da6:	eba0 0008 	sub.w	r0, r0, r8
 8004daa:	2864      	cmp	r0, #100	; 0x64
 8004dac:	f67f ae8e 	bls.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004db0:	2003      	movs	r0, #3
}
 8004db2:	b003      	add	sp, #12
 8004db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004db8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004dba:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	f43f ae8e 	beq.w	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dc6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004dd0:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004dd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004dd8:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004dda:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	f57f ae7e 	bpl.w	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004de4:	f7fe f87a 	bl	8002edc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004dec:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004df0:	0798      	lsls	r0, r3, #30
 8004df2:	f53f ae75 	bmi.w	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fe f871 	bl	8002edc <HAL_GetTick>
 8004dfa:	eba0 0008 	sub.w	r0, r0, r8
 8004dfe:	4548      	cmp	r0, r9
 8004e00:	d9f5      	bls.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004e02:	e7d5      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e04:	6891      	ldr	r1, [r2, #8]
 8004e06:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004e0a:	e679      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004e0c:	4e48      	ldr	r6, [pc, #288]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e0e:	6833      	ldr	r3, [r6, #0]
 8004e10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e14:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004e16:	f7fe f861 	bl	8002edc <HAL_GetTick>
 8004e1a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	d472      	bmi.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	07d7      	lsls	r7, r2, #31
 8004e26:	d512      	bpl.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004e28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e2a:	b983      	cbnz	r3, 8004e4e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e2c:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e30:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e38:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004e3c:	430b      	orrs	r3, r1
 8004e3e:	6861      	ldr	r1, [r4, #4]
 8004e40:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004e44:	68a1      	ldr	r1, [r4, #8]
 8004e46:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004e4a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e4e:	0316      	lsls	r6, r2, #12
 8004e50:	d503      	bpl.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004e52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e58:	d005      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004e5a:	02d0      	lsls	r0, r2, #11
 8004e5c:	d51e      	bpl.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e64:	d11a      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e66:	4932      	ldr	r1, [pc, #200]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e68:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e6c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004e70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e74:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004e78:	4303      	orrs	r3, r0
 8004e7a:	6860      	ldr	r0, [r4, #4]
 8004e7c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004e86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004e8a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e90:	f020 001f 	bic.w	r0, r0, #31
 8004e94:	3b01      	subs	r3, #1
 8004e96:	4303      	orrs	r3, r0
 8004e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e9c:	01d1      	lsls	r1, r2, #7
 8004e9e:	d511      	bpl.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ea0:	4923      	ldr	r1, [pc, #140]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ea2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ea6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004eaa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004eae:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004eb2:	4303      	orrs	r3, r0
 8004eb4:	6860      	ldr	r0, [r4, #4]
 8004eb6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004eba:	6920      	ldr	r0, [r4, #16]
 8004ebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ec4:	0192      	lsls	r2, r2, #6
 8004ec6:	d50d      	bpl.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	6862      	ldr	r2, [r4, #4]
 8004ecc:	041b      	lsls	r3, r3, #16
 8004ece:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004ed2:	68e2      	ldr	r2, [r4, #12]
 8004ed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004ed8:	68a2      	ldr	r2, [r4, #8]
 8004eda:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004ede:	4a14      	ldr	r2, [pc, #80]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ee0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004ee4:	4e12      	ldr	r6, [pc, #72]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ee6:	6833      	ldr	r3, [r6, #0]
 8004ee8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004eec:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004eee:	f7fd fff5 	bl	8002edc <HAL_GetTick>
 8004ef2:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	f53f aed7 	bmi.w	8004caa <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004efc:	f7fd ffee 	bl	8002edc <HAL_GetTick>
 8004f00:	1bc0      	subs	r0, r0, r7
 8004f02:	2864      	cmp	r0, #100	; 0x64
 8004f04:	d9f6      	bls.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f06:	e753      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f08:	f7fd ffe8 	bl	8002edc <HAL_GetTick>
 8004f0c:	1bc0      	subs	r0, r0, r7
 8004f0e:	2864      	cmp	r0, #100	; 0x64
 8004f10:	d984      	bls.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f12:	e74d      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f14:	f7fd ffe2 	bl	8002edc <HAL_GetTick>
 8004f18:	1b80      	subs	r0, r0, r6
 8004f1a:	2864      	cmp	r0, #100	; 0x64
 8004f1c:	f67f aecf 	bls.w	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004f20:	e746      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f22:	f7fd ffdb 	bl	8002edc <HAL_GetTick>
 8004f26:	1b40      	subs	r0, r0, r5
 8004f28:	2864      	cmp	r0, #100	; 0x64
 8004f2a:	f67f af32 	bls.w	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004f2e:	e73f      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004f30:	40023800 	.word	0x40023800

08004f34 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004f34:	4770      	bx	lr

08004f36 <HAL_SDRAM_Init>:
{
 8004f36:	b538      	push	{r3, r4, r5, lr}
 8004f38:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	b1c8      	cbz	r0, 8004f72 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f3e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004f42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f46:	b91b      	cbnz	r3, 8004f50 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004f48:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004f4c:	f7ff fff2 	bl	8004f34 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f50:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f52:	1d21      	adds	r1, r4, #4
 8004f54:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f5a:	f000 f9c6 	bl	80052ea <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004f5e:	6862      	ldr	r2, [r4, #4]
 8004f60:	4629      	mov	r1, r5
 8004f62:	6820      	ldr	r0, [r4, #0]
 8004f64:	f000 f9fc 	bl	8005360 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f68:	2301      	movs	r3, #1
  return HAL_OK;
 8004f6a:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004f6c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004f70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7fc      	b.n	8004f70 <HAL_SDRAM_Init+0x3a>

08004f76 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004f76:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004f78:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004f80:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004f82:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8004f84:	d010      	beq.n	8004fa8 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004f86:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8004f8a:	2c01      	cmp	r4, #1
 8004f8c:	d110      	bne.n	8004fb0 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f8e:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004f90:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f92:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004f96:	f000 fa19 	bl	80053cc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004f9a:	6833      	ldr	r3, [r6, #0]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d104      	bne.n	8004faa <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004fa0:	2305      	movs	r3, #5
 8004fa2:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004fa6:	2000      	movs	r0, #0
}
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004faa:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 8004fae:	e7fa      	b.n	8004fa6 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	e7f9      	b.n	8004fa8 <HAL_SDRAM_SendCommand+0x32>

08004fb4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004fb4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004fb6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8004fba:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	b2d8      	uxtb	r0, r3
 8004fc0:	d00d      	beq.n	8004fde <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004fc2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	b2dd      	uxtb	r5, r3
 8004fca:	d109      	bne.n	8004fe0 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fcc:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004fce:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fd0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004fd4:	f000 fa0c 	bl	80053f0 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004fd8:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004fda:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8004fde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	e7fc      	b.n	8004fde <HAL_SDRAM_ProgramRefreshRate+0x2a>

08004fe4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fe8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d133      	bne.n	8005058 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ff6:	6803      	ldr	r3, [r0, #0]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005000:	4a16      	ldr	r2, [pc, #88]	; (800505c <HAL_TIM_Base_Start_IT+0x74>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01a      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d017      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 800500c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 8005014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 800501c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 8005024:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 800502c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <HAL_TIM_Base_Start_IT+0x54>
 8005034:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005038:	4293      	cmp	r3, r2
 800503a:	d107      	bne.n	800504c <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800503c:	6899      	ldr	r1, [r3, #8]
 800503e:	4a08      	ldr	r2, [pc, #32]	; (8005060 <HAL_TIM_Base_Start_IT+0x78>)
 8005040:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005042:	2a06      	cmp	r2, #6
 8005044:	d006      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
 8005046:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800504a:	d003      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005054:	2000      	movs	r0, #0
}
 8005056:	4770      	bx	lr
    return HAL_ERROR;
 8005058:	2001      	movs	r0, #1
 800505a:	4770      	bx	lr
 800505c:	40010000 	.word	0x40010000
 8005060:	00010007 	.word	0x00010007

08005064 <HAL_TIM_OC_DelayElapsedCallback>:
 8005064:	4770      	bx	lr

08005066 <HAL_TIM_IC_CaptureCallback>:
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_TriggerCallback>:
 800506a:	4770      	bx	lr

0800506c <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 800506c:	6803      	ldr	r3, [r0, #0]
{
 800506e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8005070:	68dd      	ldr	r5, [r3, #12]
{
 8005072:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8005074:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005076:	07b2      	lsls	r2, r6, #30
 8005078:	d50d      	bpl.n	8005096 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800507a:	07a9      	lsls	r1, r5, #30
 800507c:	d50b      	bpl.n	8005096 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800507e:	f06f 0202 	mvn.w	r2, #2
 8005082:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005084:	2201      	movs	r2, #1
 8005086:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	079a      	lsls	r2, r3, #30
 800508c:	d075      	beq.n	800517a <HAL_TIM_IRQHandler+0x10e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800508e:	f7ff ffea 	bl	8005066 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	2300      	movs	r3, #0
 8005094:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005096:	0773      	lsls	r3, r6, #29
 8005098:	d510      	bpl.n	80050bc <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800509a:	0768      	lsls	r0, r5, #29
 800509c:	d50e      	bpl.n	80050bc <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050a8:	2202      	movs	r2, #2
 80050aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f413 7f40 	tst.w	r3, #768	; 0x300
 80050b2:	d068      	beq.n	8005186 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 80050b4:	f7ff ffd7 	bl	8005066 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b8:	2300      	movs	r3, #0
 80050ba:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050bc:	0731      	lsls	r1, r6, #28
 80050be:	d50f      	bpl.n	80050e0 <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050c0:	072a      	lsls	r2, r5, #28
 80050c2:	d50d      	bpl.n	80050e0 <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ce:	2204      	movs	r2, #4
 80050d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	079b      	lsls	r3, r3, #30
 80050d6:	d05c      	beq.n	8005192 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80050d8:	f7ff ffc5 	bl	8005066 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050dc:	2300      	movs	r3, #0
 80050de:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050e0:	06f1      	lsls	r1, r6, #27
 80050e2:	d510      	bpl.n	8005106 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80050e4:	06ea      	lsls	r2, r5, #27
 80050e6:	d50e      	bpl.n	8005106 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050f2:	2208      	movs	r2, #8
 80050f4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80050fc:	d04f      	beq.n	800519e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	f7ff ffb2 	bl	8005066 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005102:	2300      	movs	r3, #0
 8005104:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005106:	07f3      	lsls	r3, r6, #31
 8005108:	d508      	bpl.n	800511c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800510a:	07e8      	lsls	r0, r5, #31
 800510c:	d506      	bpl.n	800511c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005114:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005116:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005118:	f7fd f834 	bl	8002184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800511c:	f416 5f02 	tst.w	r6, #8320	; 0x2080
 8005120:	d008      	beq.n	8005134 <HAL_TIM_IRQHandler+0xc8>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005122:	0629      	lsls	r1, r5, #24
 8005124:	d506      	bpl.n	8005134 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800512c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800512e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005130:	f000 f8d9 	bl	80052e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005134:	05f2      	lsls	r2, r6, #23
 8005136:	d508      	bpl.n	800514a <HAL_TIM_IRQHandler+0xde>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005138:	062b      	lsls	r3, r5, #24
 800513a:	d506      	bpl.n	800514a <HAL_TIM_IRQHandler+0xde>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005142:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005144:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005146:	f000 f8cf 	bl	80052e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800514a:	0670      	lsls	r0, r6, #25
 800514c:	d508      	bpl.n	8005160 <HAL_TIM_IRQHandler+0xf4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800514e:	0669      	lsls	r1, r5, #25
 8005150:	d506      	bpl.n	8005160 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005158:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800515a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800515c:	f7ff ff85 	bl	800506a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005160:	06b2      	lsls	r2, r6, #26
 8005162:	d522      	bpl.n	80051aa <HAL_TIM_IRQHandler+0x13e>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005164:	06ab      	lsls	r3, r5, #26
 8005166:	d520      	bpl.n	80051aa <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800516e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005170:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005172:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005176:	f000 b8b5 	b.w	80052e4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	f7ff ff73 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517e:	4620      	mov	r0, r4
 8005180:	f7ff ff72 	bl	8005068 <HAL_TIM_PWM_PulseFinishedCallback>
 8005184:	e785      	b.n	8005092 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	f7ff ff6d 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff ff6c 	bl	8005068 <HAL_TIM_PWM_PulseFinishedCallback>
 8005190:	e792      	b.n	80050b8 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005192:	f7ff ff67 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005196:	4620      	mov	r0, r4
 8005198:	f7ff ff66 	bl	8005068 <HAL_TIM_PWM_PulseFinishedCallback>
 800519c:	e79e      	b.n	80050dc <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	f7ff ff61 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff ff60 	bl	8005068 <HAL_TIM_PWM_PulseFinishedCallback>
 80051a8:	e7ab      	b.n	8005102 <HAL_TIM_IRQHandler+0x96>
}
 80051aa:	bd70      	pop	{r4, r5, r6, pc}

080051ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ac:	4a33      	ldr	r2, [pc, #204]	; (800527c <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 80051ae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b0:	4290      	cmp	r0, r2
 80051b2:	d012      	beq.n	80051da <TIM_Base_SetConfig+0x2e>
 80051b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051b8:	d00f      	beq.n	80051da <TIM_Base_SetConfig+0x2e>
 80051ba:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80051be:	4290      	cmp	r0, r2
 80051c0:	d00b      	beq.n	80051da <TIM_Base_SetConfig+0x2e>
 80051c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051c6:	4290      	cmp	r0, r2
 80051c8:	d007      	beq.n	80051da <TIM_Base_SetConfig+0x2e>
 80051ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051ce:	4290      	cmp	r0, r2
 80051d0:	d003      	beq.n	80051da <TIM_Base_SetConfig+0x2e>
 80051d2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80051d6:	4290      	cmp	r0, r2
 80051d8:	d119      	bne.n	800520e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80051da:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80051e0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	4a26      	ldr	r2, [pc, #152]	; (800527c <TIM_Base_SetConfig+0xd0>)
 80051e4:	4290      	cmp	r0, r2
 80051e6:	d029      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 80051e8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80051ec:	d026      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 80051ee:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80051f2:	4290      	cmp	r0, r2
 80051f4:	d022      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 80051f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051fa:	4290      	cmp	r0, r2
 80051fc:	d01e      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 80051fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005202:	4290      	cmp	r0, r2
 8005204:	d01a      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 8005206:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800520a:	4290      	cmp	r0, r2
 800520c:	d016      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <TIM_Base_SetConfig+0xd4>)
 8005210:	4290      	cmp	r0, r2
 8005212:	d013      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 8005214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005218:	4290      	cmp	r0, r2
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 800521c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005220:	4290      	cmp	r0, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 8005224:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005228:	4290      	cmp	r0, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 800522c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005230:	4290      	cmp	r0, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x90>
 8005234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005238:	4290      	cmp	r0, r2
 800523a:	d103      	bne.n	8005244 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800523c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005240:	68ca      	ldr	r2, [r1, #12]
 8005242:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005244:	694a      	ldr	r2, [r1, #20]
 8005246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800524c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800524e:	688b      	ldr	r3, [r1, #8]
 8005250:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005252:	680b      	ldr	r3, [r1, #0]
 8005254:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <TIM_Base_SetConfig+0xd0>)
 8005258:	4298      	cmp	r0, r3
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xb8>
 800525c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005260:	4298      	cmp	r0, r3
 8005262:	d101      	bne.n	8005268 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	690b      	ldr	r3, [r1, #16]
 8005266:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005268:	2301      	movs	r3, #1
 800526a:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800526c:	6903      	ldr	r3, [r0, #16]
 800526e:	07db      	lsls	r3, r3, #31
 8005270:	d503      	bpl.n	800527a <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005272:	6903      	ldr	r3, [r0, #16]
 8005274:	f023 0301 	bic.w	r3, r3, #1
 8005278:	6103      	str	r3, [r0, #16]
  }
}
 800527a:	4770      	bx	lr
 800527c:	40010000 	.word	0x40010000
 8005280:	40014000 	.word	0x40014000

08005284 <HAL_TIM_Base_Init>:
{
 8005284:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005286:	4604      	mov	r4, r0
 8005288:	b350      	cbz	r0, 80052e0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800528a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800528e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005292:	b91b      	cbnz	r3, 800529c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005294:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005298:	f7ff fea4 	bl	8004fe4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529e:	6820      	ldr	r0, [r4, #0]
 80052a0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80052a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a6:	f7ff ff81 	bl	80051ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	2301      	movs	r3, #1
  return HAL_OK;
 80052ac:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ae:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80052b6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80052ba:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80052be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80052c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80052ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052d2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80052d6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80052da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80052de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80052e0:	2001      	movs	r0, #1
 80052e2:	e7fc      	b.n	80052de <HAL_TIM_Base_Init+0x5a>

080052e4 <HAL_TIMEx_CommutCallback>:
 80052e4:	4770      	bx	lr

080052e6 <HAL_TIMEx_BreakCallback>:
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIMEx_Break2Callback>:
 80052e8:	4770      	bx	lr

080052ea <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80052ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80052ee:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80052f0:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 80052f4:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80052f8:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 80052fc:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8005300:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8005304:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005306:	b9a2      	cbnz	r2, 8005332 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005308:	ea43 0209 	orr.w	r2, r3, r9
 800530c:	6801      	ldr	r1, [r0, #0]
 800530e:	432a      	orrs	r2, r5
 8005310:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8005314:	ea42 0308 	orr.w	r3, r2, r8
 8005318:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800531c:	ea43 030e 	orr.w	r3, r3, lr
 8005320:	ea43 030c 	orr.w	r3, r3, ip
 8005324:	433b      	orrs	r3, r7
 8005326:	4333      	orrs	r3, r6
 8005328:	430b      	orrs	r3, r1
 800532a:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800532c:	2000      	movs	r0, #0
 800532e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005332:	6802      	ldr	r2, [r0, #0]
 8005334:	ea43 0309 	orr.w	r3, r3, r9
 8005338:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800533c:	4313      	orrs	r3, r2
 800533e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005340:	ea45 0308 	orr.w	r3, r5, r8
 8005344:	6842      	ldr	r2, [r0, #4]
 8005346:	ea43 030e 	orr.w	r3, r3, lr
 800534a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800534e:	ea43 030c 	orr.w	r3, r3, ip
 8005352:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005356:	433b      	orrs	r3, r7
 8005358:	4333      	orrs	r3, r6
 800535a:	4313      	orrs	r3, r2
 800535c:	6043      	str	r3, [r0, #4]
 800535e:	e7e5      	b.n	800532c <FMC_SDRAM_Init+0x42>

08005360 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005360:	68cb      	ldr	r3, [r1, #12]
 8005362:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8005366:	694b      	ldr	r3, [r1, #20]
{
 8005368:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800536a:	3b01      	subs	r3, #1
 800536c:	680f      	ldr	r7, [r1, #0]
 800536e:	684c      	ldr	r4, [r1, #4]
 8005370:	688e      	ldr	r6, [r1, #8]
 8005372:	051b      	lsls	r3, r3, #20
 8005374:	690d      	ldr	r5, [r1, #16]
 8005376:	3c01      	subs	r4, #1
 8005378:	6989      	ldr	r1, [r1, #24]
 800537a:	3e01      	subs	r6, #1
 800537c:	3d01      	subs	r5, #1
 800537e:	3f01      	subs	r7, #1
 8005380:	3901      	subs	r1, #1
 8005382:	0124      	lsls	r4, r4, #4
 8005384:	0236      	lsls	r6, r6, #8
 8005386:	042d      	lsls	r5, r5, #16
 8005388:	0609      	lsls	r1, r1, #24
 800538a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800538e:	b95a      	cbnz	r2, 80053a8 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005390:	433b      	orrs	r3, r7
 8005392:	6882      	ldr	r2, [r0, #8]
 8005394:	4323      	orrs	r3, r4
 8005396:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800539a:	4333      	orrs	r3, r6
 800539c:	432b      	orrs	r3, r5
 800539e:	430b      	orrs	r3, r1
 80053a0:	4313      	orrs	r3, r2
 80053a2:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80053a4:	2000      	movs	r0, #0
 80053a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053a8:	6882      	ldr	r2, [r0, #8]
 80053aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053ae:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80053b2:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80053b4:	ea44 0306 	orr.w	r3, r4, r6
 80053b8:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053ba:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80053bc:	68c2      	ldr	r2, [r0, #12]
 80053be:	432b      	orrs	r3, r5
 80053c0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80053c4:	430b      	orrs	r3, r1
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60c3      	str	r3, [r0, #12]
 80053ca:	e7eb      	b.n	80053a4 <FMC_SDRAM_Timing_Init+0x44>

080053cc <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80053cc:	6902      	ldr	r2, [r0, #16]
{
 80053ce:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80053d0:	e9d1 3400 	ldrd	r3, r4, [r1]
 80053d4:	0d92      	lsrs	r2, r2, #22
 80053d6:	4323      	orrs	r3, r4
 80053d8:	68cc      	ldr	r4, [r1, #12]
 80053da:	0592      	lsls	r2, r2, #22
 80053dc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80053e0:	4313      	orrs	r3, r2
 80053e2:	688a      	ldr	r2, [r1, #8]
 80053e4:	3a01      	subs	r2, #1
 80053e6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80053ea:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80053ec:	2000      	movs	r0, #0
 80053ee:	bd10      	pop	{r4, pc}

080053f0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80053f0:	6943      	ldr	r3, [r0, #20]
 80053f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80053f6:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80053fa:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80053fe:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8005400:	2000      	movs	r0, #0
 8005402:	4770      	bx	lr

08005404 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005404:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800540c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800540e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005410:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005418:	4770      	bx	lr

0800541a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800541a:	2300      	movs	r3, #0
 800541c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800541e:	4770      	bx	lr

08005420 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005420:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005422:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8005424:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005426:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800542c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800542e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8005430:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005432:	3301      	adds	r3, #1
 8005434:	6003      	str	r3, [r0, #0]
}
 8005436:	4770      	bx	lr

08005438 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005438:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800543a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800543c:	1c63      	adds	r3, r4, #1
 800543e:	d10a      	bne.n	8005456 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005440:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005446:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005448:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800544a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800544c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800544e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8005450:	3301      	adds	r3, #1
 8005452:	6003      	str	r3, [r0, #0]
}
 8005454:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005456:	f100 0208 	add.w	r2, r0, #8
 800545a:	4613      	mov	r3, r2
 800545c:	6852      	ldr	r2, [r2, #4]
 800545e:	6815      	ldr	r5, [r2, #0]
 8005460:	42a5      	cmp	r5, r4
 8005462:	d9fa      	bls.n	800545a <vListInsert+0x22>
 8005464:	e7ed      	b.n	8005442 <vListInsert+0xa>

08005466 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005466:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005468:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800546c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800546e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005474:	bf08      	it	eq
 8005476:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005478:	2200      	movs	r2, #0
 800547a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	3a01      	subs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005482:	6818      	ldr	r0, [r3, #0]
}
 8005484:	4770      	bx	lr

08005486 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005486:	b510      	push	{r4, lr}
 8005488:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800548a:	f001 fc13 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800548e:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005490:	f001 fc34 	bl	8006cfc <vPortExitCritical>

	return xReturn;
}
 8005494:	fab4 f084 	clz	r0, r4
 8005498:	0940      	lsrs	r0, r0, #5
 800549a:	bd10      	pop	{r4, pc}

0800549c <prvCopyDataToQueue>:
{
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054a0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80054a2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054a4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054a6:	b952      	cbnz	r2, 80054be <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054a8:	6807      	ldr	r7, [r0, #0]
 80054aa:	bb47      	cbnz	r7, 80054fe <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054ac:	6880      	ldr	r0, [r0, #8]
 80054ae:	f001 f8c3 	bl	8006638 <xTaskPriorityDisinherit>
 80054b2:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054b4:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054b6:	3601      	adds	r6, #1
}
 80054b8:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054ba:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80054bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80054be:	b965      	cbnz	r5, 80054da <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054c0:	6840      	ldr	r0, [r0, #4]
 80054c2:	f009 ff5d 	bl	800f380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054ca:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054cc:	68a2      	ldr	r2, [r4, #8]
 80054ce:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054d0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054d2:	d3f0      	bcc.n	80054b6 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	6063      	str	r3, [r4, #4]
 80054d8:	e7ed      	b.n	80054b6 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054da:	68c0      	ldr	r0, [r0, #12]
 80054dc:	f009 ff50 	bl	800f380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054e2:	68e3      	ldr	r3, [r4, #12]
 80054e4:	4251      	negs	r1, r2
 80054e6:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054e8:	6822      	ldr	r2, [r4, #0]
 80054ea:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054ec:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80054ee:	bf3e      	ittt	cc
 80054f0:	68a3      	ldrcc	r3, [r4, #8]
 80054f2:	185b      	addcc	r3, r3, r1
 80054f4:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80054f6:	2d02      	cmp	r5, #2
 80054f8:	d101      	bne.n	80054fe <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054fa:	b116      	cbz	r6, 8005502 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80054fc:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80054fe:	2500      	movs	r5, #0
 8005500:	e7d9      	b.n	80054b6 <prvCopyDataToQueue+0x1a>
 8005502:	4635      	mov	r5, r6
 8005504:	e7d7      	b.n	80054b6 <prvCopyDataToQueue+0x1a>

08005506 <prvCopyDataFromQueue>:
{
 8005506:	4603      	mov	r3, r0
 8005508:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800550a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800550c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800550e:	b162      	cbz	r2, 800552a <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005510:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005512:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005514:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005516:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005518:	60dc      	str	r4, [r3, #12]
}
 800551a:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800551e:	bf24      	itt	cs
 8005520:	6819      	ldrcs	r1, [r3, #0]
 8005522:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005524:	68d9      	ldr	r1, [r3, #12]
 8005526:	f009 bf2b 	b.w	800f380 <memcpy>
}
 800552a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800552e:	4770      	bx	lr

08005530 <prvUnlockQueue>:
{
 8005530:	b570      	push	{r4, r5, r6, lr}
 8005532:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005534:	f001 fbbe 	bl	8006cb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005538:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800553c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8005540:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005542:	2d00      	cmp	r5, #0
 8005544:	dc14      	bgt.n	8005570 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8005546:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005548:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800554c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8005550:	f001 fbd4 	bl	8006cfc <vPortExitCritical>
	taskENTER_CRITICAL();
 8005554:	f001 fbae 	bl	8006cb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005558:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800555c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800555e:	2d00      	cmp	r5, #0
 8005560:	dc12      	bgt.n	8005588 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8005562:	23ff      	movs	r3, #255	; 0xff
 8005564:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8005568:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800556c:	f001 bbc6 	b.w	8006cfc <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0e7      	beq.n	8005546 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005576:	4630      	mov	r0, r6
 8005578:	f000 ff74 	bl	8006464 <xTaskRemoveFromEventList>
 800557c:	b108      	cbz	r0, 8005582 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800557e:	f000 fff5 	bl	800656c <vTaskMissedYield>
			--cTxLock;
 8005582:	3d01      	subs	r5, #1
 8005584:	b26d      	sxtb	r5, r5
 8005586:	e7dc      	b.n	8005542 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005588:	6923      	ldr	r3, [r4, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0e9      	beq.n	8005562 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800558e:	4630      	mov	r0, r6
 8005590:	f000 ff68 	bl	8006464 <xTaskRemoveFromEventList>
 8005594:	b108      	cbz	r0, 800559a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005596:	f000 ffe9 	bl	800656c <vTaskMissedYield>
				--cRxLock;
 800559a:	3d01      	subs	r5, #1
 800559c:	b26d      	sxtb	r5, r5
 800559e:	e7de      	b.n	800555e <prvUnlockQueue+0x2e>

080055a0 <xQueueGenericReset>:
{
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80055a4:	4604      	mov	r4, r0
 80055a6:	b950      	cbnz	r0, 80055be <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ac:	b672      	cpsid	i
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	b662      	cpsie	i
 80055bc:	e7fe      	b.n	80055bc <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80055be:	f001 fb79 	bl	8006cb4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055c8:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ca:	434b      	muls	r3, r1
 80055cc:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ce:	1a5b      	subs	r3, r3, r1
 80055d0:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d2:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055d4:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055d6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055d8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055da:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80055dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80055e4:	b9a5      	cbnz	r5, 8005610 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	b173      	cbz	r3, 8005608 <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ea:	f104 0010 	add.w	r0, r4, #16
 80055ee:	f000 ff39 	bl	8006464 <xTaskRemoveFromEventList>
 80055f2:	b148      	cbz	r0, 8005608 <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 80055f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80055f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005608:	f001 fb78 	bl	8006cfc <vPortExitCritical>
}
 800560c:	2001      	movs	r0, #1
 800560e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005610:	f104 0010 	add.w	r0, r4, #16
 8005614:	f7ff fef6 	bl	8005404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005618:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800561c:	f7ff fef2 	bl	8005404 <vListInitialise>
 8005620:	e7f2      	b.n	8005608 <xQueueGenericReset+0x68>

08005622 <xQueueGenericCreate>:
	{
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	460d      	mov	r5, r1
 8005626:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005628:	4606      	mov	r6, r0
 800562a:	b950      	cbnz	r0, 8005642 <xQueueGenericCreate+0x20>
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	b672      	cpsid	i
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	b662      	cpsie	i
 8005640:	e7fe      	b.n	8005640 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005642:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005644:	3050      	adds	r0, #80	; 0x50
 8005646:	f001 fa11 	bl	8006a6c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800564a:	4604      	mov	r4, r0
 800564c:	b158      	cbz	r0, 8005666 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800564e:	b165      	cbz	r5, 800566a <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005650:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005654:	2101      	movs	r1, #1
 8005656:	4620      	mov	r0, r4
 8005658:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800565a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800565e:	f7ff ff9f 	bl	80055a0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005662:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8005666:	4620      	mov	r0, r4
 8005668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566a:	4603      	mov	r3, r0
 800566c:	e7f2      	b.n	8005654 <xQueueGenericCreate+0x32>

0800566e <xQueueCreateCountingSemaphore>:
	{
 800566e:	b510      	push	{r4, lr}
 8005670:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8005672:	b950      	cbnz	r0, 800568a <xQueueCreateCountingSemaphore+0x1c>
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	b672      	cpsid	i
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	b662      	cpsie	i
 8005688:	e7fe      	b.n	8005688 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800568a:	4288      	cmp	r0, r1
 800568c:	d20a      	bcs.n	80056a4 <xQueueCreateCountingSemaphore+0x36>
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	b672      	cpsid	i
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	b662      	cpsie	i
 80056a2:	e7fe      	b.n	80056a2 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80056a4:	2202      	movs	r2, #2
 80056a6:	2100      	movs	r1, #0
 80056a8:	f7ff ffbb 	bl	8005622 <xQueueGenericCreate>
		if( xHandle != NULL )
 80056ac:	b100      	cbz	r0, 80056b0 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80056ae:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <xQueueGenericSend>:
{
 80056b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056b6:	b085      	sub	sp, #20
 80056b8:	4688      	mov	r8, r1
 80056ba:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80056bc:	4604      	mov	r4, r0
{
 80056be:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80056c0:	b950      	cbnz	r0, 80056d8 <xQueueGenericSend+0x26>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	b672      	cpsid	i
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	b662      	cpsie	i
 80056d6:	e7fe      	b.n	80056d6 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d8:	b961      	cbnz	r1, 80056f4 <xQueueGenericSend+0x42>
 80056da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80056dc:	b153      	cbz	r3, 80056f4 <xQueueGenericSend+0x42>
 80056de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e2:	b672      	cpsid	i
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	b662      	cpsie	i
 80056f2:	e7fe      	b.n	80056f2 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056f4:	2f02      	cmp	r7, #2
 80056f6:	d10d      	bne.n	8005714 <xQueueGenericSend+0x62>
 80056f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d00a      	beq.n	8005714 <xQueueGenericSend+0x62>
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	b672      	cpsid	i
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	b662      	cpsie	i
 8005712:	e7fe      	b.n	8005712 <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005714:	f000 ff32 	bl	800657c <xTaskGetSchedulerState>
 8005718:	4606      	mov	r6, r0
 800571a:	b960      	cbnz	r0, 8005736 <xQueueGenericSend+0x84>
 800571c:	9b01      	ldr	r3, [sp, #4]
 800571e:	b15b      	cbz	r3, 8005738 <xQueueGenericSend+0x86>
 8005720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005724:	b672      	cpsid	i
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	b662      	cpsie	i
 8005734:	e7fe      	b.n	8005734 <xQueueGenericSend+0x82>
 8005736:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005738:	f04f 0900 	mov.w	r9, #0
 800573c:	e037      	b.n	80057ae <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800573e:	9d01      	ldr	r5, [sp, #4]
 8005740:	b91d      	cbnz	r5, 800574a <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8005742:	f001 fadb 	bl	8006cfc <vPortExitCritical>
			return errQUEUE_FULL;
 8005746:	2000      	movs	r0, #0
 8005748:	e052      	b.n	80057f0 <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800574a:	b916      	cbnz	r6, 8005752 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800574c:	a802      	add	r0, sp, #8
 800574e:	f000 fec7 	bl	80064e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005752:	f001 fad3 	bl	8006cfc <vPortExitCritical>
		vTaskSuspendAll();
 8005756:	f000 fd13 	bl	8006180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800575a:	f001 faab 	bl	8006cb4 <vPortEnterCritical>
 800575e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005762:	2bff      	cmp	r3, #255	; 0xff
 8005764:	d101      	bne.n	800576a <xQueueGenericSend+0xb8>
 8005766:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800576a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800576e:	2bff      	cmp	r3, #255	; 0xff
 8005770:	d101      	bne.n	8005776 <xQueueGenericSend+0xc4>
 8005772:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8005776:	f001 fac1 	bl	8006cfc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800577a:	a901      	add	r1, sp, #4
 800577c:	a802      	add	r0, sp, #8
 800577e:	f000 feb9 	bl	80064f4 <xTaskCheckForTimeOut>
 8005782:	2800      	cmp	r0, #0
 8005784:	d14a      	bne.n	800581c <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005786:	f001 fa95 	bl	8006cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800578a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800578c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800578e:	429a      	cmp	r2, r3
 8005790:	d131      	bne.n	80057f6 <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005792:	f001 fab3 	bl	8006cfc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005796:	9901      	ldr	r1, [sp, #4]
 8005798:	f104 0010 	add.w	r0, r4, #16
 800579c:	f000 fe48 	bl	8006430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7ff fec5 	bl	8005530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057a6:	f000 fd77 	bl	8006298 <xTaskResumeAll>
 80057aa:	b360      	cbz	r0, 8005806 <xQueueGenericSend+0x154>
 80057ac:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80057ae:	f001 fa81 	bl	8006cb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80057b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d301      	bcc.n	80057be <xQueueGenericSend+0x10c>
 80057ba:	2f02      	cmp	r7, #2
 80057bc:	d1bf      	bne.n	800573e <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057be:	463a      	mov	r2, r7
 80057c0:	4641      	mov	r1, r8
 80057c2:	4620      	mov	r0, r4
 80057c4:	f7ff fe6a 	bl	800549c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057ca:	b11b      	cbz	r3, 80057d4 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80057d0:	f000 fe48 	bl	8006464 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80057d4:	b148      	cbz	r0, 80057ea <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80057d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80057da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80057ea:	f001 fa87 	bl	8006cfc <vPortExitCritical>
				return pdPASS;
 80057ee:	2001      	movs	r0, #1
}
 80057f0:	b005      	add	sp, #20
 80057f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 80057f6:	f001 fa81 	bl	8006cfc <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80057fa:	4620      	mov	r0, r4
 80057fc:	f7ff fe98 	bl	8005530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005800:	f000 fd4a 	bl	8006298 <xTaskResumeAll>
 8005804:	e7d2      	b.n	80057ac <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8005806:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	e7c7      	b.n	80057ac <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 800581c:	4620      	mov	r0, r4
 800581e:	f7ff fe87 	bl	8005530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005822:	f000 fd39 	bl	8006298 <xTaskResumeAll>
 8005826:	e78e      	b.n	8005746 <xQueueGenericSend+0x94>

08005828 <xQueueCreateMutex>:
	{
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800582c:	2050      	movs	r0, #80	; 0x50
 800582e:	f001 f91d 	bl	8006a6c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005832:	4604      	mov	r4, r0
 8005834:	b188      	cbz	r0, 800585a <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8005836:	2500      	movs	r5, #0
 8005838:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800583a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800583c:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005840:	f7ff feae 	bl	80055a0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005844:	462b      	mov	r3, r5
 8005846:	462a      	mov	r2, r5
 8005848:	4629      	mov	r1, r5
 800584a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800584c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005850:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005852:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005854:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005856:	f7ff ff2c 	bl	80056b2 <xQueueGenericSend>
	}
 800585a:	4620      	mov	r0, r4
 800585c:	bd70      	pop	{r4, r5, r6, pc}

0800585e <xQueueGenericSendFromISR>:
{
 800585e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005862:	4689      	mov	r9, r1
 8005864:	4690      	mov	r8, r2
 8005866:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005868:	4604      	mov	r4, r0
 800586a:	b950      	cbnz	r0, 8005882 <xQueueGenericSendFromISR+0x24>
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	b672      	cpsid	i
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	b662      	cpsie	i
 8005880:	e7fe      	b.n	8005880 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005882:	b961      	cbnz	r1, 800589e <xQueueGenericSendFromISR+0x40>
 8005884:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005886:	b153      	cbz	r3, 800589e <xQueueGenericSendFromISR+0x40>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	b672      	cpsid	i
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	b662      	cpsie	i
 800589c:	e7fe      	b.n	800589c <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800589e:	2f02      	cmp	r7, #2
 80058a0:	d10d      	bne.n	80058be <xQueueGenericSendFromISR+0x60>
 80058a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d00a      	beq.n	80058be <xQueueGenericSendFromISR+0x60>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	b672      	cpsid	i
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	b662      	cpsie	i
 80058bc:	e7fe      	b.n	80058bc <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058be:	f001 faf5 	bl	8006eac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80058c2:	f3ef 8611 	mrs	r6, BASEPRI
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	b672      	cpsid	i
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058de:	429a      	cmp	r2, r3
 80058e0:	d301      	bcc.n	80058e6 <xQueueGenericSendFromISR+0x88>
 80058e2:	2f02      	cmp	r7, #2
 80058e4:	d122      	bne.n	800592c <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 80058e6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058ea:	463a      	mov	r2, r7
 80058ec:	4649      	mov	r1, r9
 80058ee:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80058f0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058f2:	f7ff fdd3 	bl	800549c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80058f6:	1c6b      	adds	r3, r5, #1
 80058f8:	d113      	bne.n	8005922 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058fc:	b90b      	cbnz	r3, 8005902 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 80058fe:	2001      	movs	r0, #1
 8005900:	e00b      	b.n	800591a <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005902:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005906:	f000 fdad 	bl	8006464 <xTaskRemoveFromEventList>
 800590a:	2800      	cmp	r0, #0
 800590c:	d0f7      	beq.n	80058fe <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800590e:	f1b8 0f00 	cmp.w	r8, #0
 8005912:	d0f4      	beq.n	80058fe <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005914:	2001      	movs	r0, #1
 8005916:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800591a:	f386 8811 	msr	BASEPRI, r6
}
 800591e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005922:	3501      	adds	r5, #1
 8005924:	b26d      	sxtb	r5, r5
 8005926:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800592a:	e7e8      	b.n	80058fe <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800592c:	2000      	movs	r0, #0
 800592e:	e7f4      	b.n	800591a <xQueueGenericSendFromISR+0xbc>

08005930 <xQueueGiveFromISR>:
{
 8005930:	b570      	push	{r4, r5, r6, lr}
 8005932:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005934:	4604      	mov	r4, r0
 8005936:	b950      	cbnz	r0, 800594e <xQueueGiveFromISR+0x1e>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	b672      	cpsid	i
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	b662      	cpsie	i
 800594c:	e7fe      	b.n	800594c <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800594e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005950:	b153      	cbz	r3, 8005968 <xQueueGiveFromISR+0x38>
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
 8005966:	e7fe      	b.n	8005966 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005968:	6803      	ldr	r3, [r0, #0]
 800596a:	b963      	cbnz	r3, 8005986 <xQueueGiveFromISR+0x56>
 800596c:	6883      	ldr	r3, [r0, #8]
 800596e:	b153      	cbz	r3, 8005986 <xQueueGiveFromISR+0x56>
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	b672      	cpsid	i
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	b662      	cpsie	i
 8005984:	e7fe      	b.n	8005984 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005986:	f001 fa91 	bl	8006eac <vPortValidateInterruptPriority>
	__asm volatile
 800598a:	f3ef 8611 	mrs	r6, BASEPRI
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	b672      	cpsid	i
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80059a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d91c      	bls.n	80059e4 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 80059aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ae:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 80059b0:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 80059b2:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059b4:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80059b6:	d110      	bne.n	80059da <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059ba:	b90b      	cbnz	r3, 80059c0 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 80059bc:	2001      	movs	r0, #1
 80059be:	e009      	b.n	80059d4 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80059c4:	f000 fd4e 	bl	8006464 <xTaskRemoveFromEventList>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d0f7      	beq.n	80059bc <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 80059cc:	2d00      	cmp	r5, #0
 80059ce:	d0f5      	beq.n	80059bc <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059d0:	2001      	movs	r0, #1
 80059d2:	6028      	str	r0, [r5, #0]
	__asm volatile
 80059d4:	f386 8811 	msr	BASEPRI, r6
}
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059da:	3301      	adds	r3, #1
 80059dc:	b25b      	sxtb	r3, r3
 80059de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059e2:	e7eb      	b.n	80059bc <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 80059e4:	2000      	movs	r0, #0
 80059e6:	e7f5      	b.n	80059d4 <xQueueGiveFromISR+0xa4>

080059e8 <xQueueReceive>:
{
 80059e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80059ec:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80059ee:	4604      	mov	r4, r0
{
 80059f0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80059f2:	b950      	cbnz	r0, 8005a0a <xQueueReceive+0x22>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	b672      	cpsid	i
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	b662      	cpsie	i
 8005a08:	e7fe      	b.n	8005a08 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a0a:	b961      	cbnz	r1, 8005a26 <xQueueReceive+0x3e>
 8005a0c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a0e:	b153      	cbz	r3, 8005a26 <xQueueReceive+0x3e>
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	b672      	cpsid	i
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	b662      	cpsie	i
 8005a24:	e7fe      	b.n	8005a24 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a26:	f000 fda9 	bl	800657c <xTaskGetSchedulerState>
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	b960      	cbnz	r0, 8005a48 <xQueueReceive+0x60>
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	b15b      	cbz	r3, 8005a4a <xQueueReceive+0x62>
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	b672      	cpsid	i
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	b662      	cpsie	i
 8005a46:	e7fe      	b.n	8005a46 <xQueueReceive+0x5e>
 8005a48:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005a4a:	f04f 0800 	mov.w	r8, #0
 8005a4e:	e03d      	b.n	8005acc <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a50:	9d01      	ldr	r5, [sp, #4]
 8005a52:	b91d      	cbnz	r5, 8005a5c <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8005a54:	f001 f952 	bl	8006cfc <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e056      	b.n	8005b0a <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8005a5c:	b916      	cbnz	r6, 8005a64 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a5e:	a802      	add	r0, sp, #8
 8005a60:	f000 fd3e 	bl	80064e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005a64:	f001 f94a 	bl	8006cfc <vPortExitCritical>
		vTaskSuspendAll();
 8005a68:	f000 fb8a 	bl	8006180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a6c:	f001 f922 	bl	8006cb4 <vPortEnterCritical>
 8005a70:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005a74:	2bff      	cmp	r3, #255	; 0xff
 8005a76:	d101      	bne.n	8005a7c <xQueueReceive+0x94>
 8005a78:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8005a7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005a80:	2bff      	cmp	r3, #255	; 0xff
 8005a82:	d101      	bne.n	8005a88 <xQueueReceive+0xa0>
 8005a84:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8005a88:	f001 f938 	bl	8006cfc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a8c:	a901      	add	r1, sp, #4
 8005a8e:	a802      	add	r0, sp, #8
 8005a90:	f000 fd30 	bl	80064f4 <xTaskCheckForTimeOut>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d141      	bne.n	8005b1c <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff fcf4 	bl	8005486 <prvIsQueueEmpty>
 8005a9e:	b3b8      	cbz	r0, 8005b10 <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005aa0:	9901      	ldr	r1, [sp, #4]
 8005aa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005aa6:	f000 fcc3 	bl	8006430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f7ff fd40 	bl	8005530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ab0:	f000 fbf2 	bl	8006298 <xTaskResumeAll>
 8005ab4:	b948      	cbnz	r0, 8005aca <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8005ab6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005acc:	f001 f8f2 	bl	8006cb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	d0bc      	beq.n	8005a50 <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ad6:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ad8:	4639      	mov	r1, r7
 8005ada:	4620      	mov	r0, r4
 8005adc:	f7ff fd13 	bl	8005506 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ae0:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	b173      	cbz	r3, 8005b04 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ae6:	f104 0010 	add.w	r0, r4, #16
 8005aea:	f000 fcbb 	bl	8006464 <xTaskRemoveFromEventList>
 8005aee:	b148      	cbz	r0, 8005b04 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8005af0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005b04:	f001 f8fa 	bl	8006cfc <vPortExitCritical>
				return pdPASS;
 8005b08:	2001      	movs	r0, #1
}
 8005b0a:	b004      	add	sp, #16
 8005b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8005b10:	4620      	mov	r0, r4
 8005b12:	f7ff fd0d 	bl	8005530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b16:	f000 fbbf 	bl	8006298 <xTaskResumeAll>
 8005b1a:	e7d6      	b.n	8005aca <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff fd07 	bl	8005530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b22:	f000 fbb9 	bl	8006298 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b26:	4620      	mov	r0, r4
 8005b28:	f7ff fcad 	bl	8005486 <prvIsQueueEmpty>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d0cc      	beq.n	8005aca <xQueueReceive+0xe2>
 8005b30:	e792      	b.n	8005a58 <xQueueReceive+0x70>

08005b32 <xQueueSemaphoreTake>:
{
 8005b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b34:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8005b36:	4604      	mov	r4, r0
{
 8005b38:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b3a:	b950      	cbnz	r0, 8005b52 <xQueueSemaphoreTake+0x20>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	b672      	cpsid	i
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	b662      	cpsie	i
 8005b50:	e7fe      	b.n	8005b50 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b52:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005b54:	b155      	cbz	r5, 8005b6c <xQueueSemaphoreTake+0x3a>
 8005b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5a:	b672      	cpsid	i
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	b662      	cpsie	i
 8005b6a:	e7fe      	b.n	8005b6a <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b6c:	f000 fd06 	bl	800657c <xTaskGetSchedulerState>
 8005b70:	4606      	mov	r6, r0
 8005b72:	b960      	cbnz	r0, 8005b8e <xQueueSemaphoreTake+0x5c>
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	b16b      	cbz	r3, 8005b94 <xQueueSemaphoreTake+0x62>
 8005b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7c:	b672      	cpsid	i
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	b662      	cpsie	i
 8005b8c:	e7fe      	b.n	8005b8c <xQueueSemaphoreTake+0x5a>
 8005b8e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005b90:	2700      	movs	r7, #0
 8005b92:	e055      	b.n	8005c40 <xQueueSemaphoreTake+0x10e>
 8005b94:	4605      	mov	r5, r0
 8005b96:	e7fb      	b.n	8005b90 <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b98:	9b01      	ldr	r3, [sp, #4]
 8005b9a:	b973      	cbnz	r3, 8005bba <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005b9c:	b155      	cbz	r5, 8005bb4 <xQueueSemaphoreTake+0x82>
 8005b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba2:	b672      	cpsid	i
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	b662      	cpsie	i
 8005bb2:	e7fe      	b.n	8005bb2 <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8005bb4:	f001 f8a2 	bl	8006cfc <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005bb8:	e062      	b.n	8005c80 <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 8005bba:	b916      	cbnz	r6, 8005bc2 <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bbc:	a802      	add	r0, sp, #8
 8005bbe:	f000 fc8f 	bl	80064e0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005bc2:	f001 f89b 	bl	8006cfc <vPortExitCritical>
		vTaskSuspendAll();
 8005bc6:	f000 fadb 	bl	8006180 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bca:	f001 f873 	bl	8006cb4 <vPortEnterCritical>
 8005bce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005bd2:	2bff      	cmp	r3, #255	; 0xff
 8005bd4:	d101      	bne.n	8005bda <xQueueSemaphoreTake+0xa8>
 8005bd6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8005bda:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005bde:	2bff      	cmp	r3, #255	; 0xff
 8005be0:	d101      	bne.n	8005be6 <xQueueSemaphoreTake+0xb4>
 8005be2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005be6:	f001 f889 	bl	8006cfc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bea:	a901      	add	r1, sp, #4
 8005bec:	a802      	add	r0, sp, #8
 8005bee:	f000 fc81 	bl	80064f4 <xTaskCheckForTimeOut>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	d14d      	bne.n	8005c92 <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bf6:	4620      	mov	r0, r4
 8005bf8:	f7ff fc45 	bl	8005486 <prvIsQueueEmpty>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d042      	beq.n	8005c86 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	b93b      	cbnz	r3, 8005c14 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8005c04:	f001 f856 	bl	8006cb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c08:	68a0      	ldr	r0, [r4, #8]
 8005c0a:	f000 fcc7 	bl	800659c <xTaskPriorityInherit>
 8005c0e:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005c10:	f001 f874 	bl	8006cfc <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c14:	9901      	ldr	r1, [sp, #4]
 8005c16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c1a:	f000 fc09 	bl	8006430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c1e:	4620      	mov	r0, r4
 8005c20:	f7ff fc86 	bl	8005530 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c24:	f000 fb38 	bl	8006298 <xTaskResumeAll>
 8005c28:	b948      	cbnz	r0, 8005c3e <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8005c2a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c32:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005c40:	f001 f838 	bl	8006cb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005c44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0a6      	beq.n	8005b98 <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	b913      	cbnz	r3, 8005c58 <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005c52:	f000 fda1 	bl	8006798 <pvTaskIncrementMutexHeldCount>
 8005c56:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c58:	6923      	ldr	r3, [r4, #16]
 8005c5a:	b173      	cbz	r3, 8005c7a <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c5c:	f104 0010 	add.w	r0, r4, #16
 8005c60:	f000 fc00 	bl	8006464 <xTaskRemoveFromEventList>
 8005c64:	b148      	cbz	r0, 8005c7a <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8005c66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8005c7a:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8005c7c:	f001 f83e 	bl	8006cfc <vPortExitCritical>
}
 8005c80:	4628      	mov	r0, r5
 8005c82:	b005      	add	sp, #20
 8005c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8005c86:	4620      	mov	r0, r4
 8005c88:	f7ff fc52 	bl	8005530 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c8c:	f000 fb04 	bl	8006298 <xTaskResumeAll>
 8005c90:	e7d5      	b.n	8005c3e <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8005c92:	4620      	mov	r0, r4
 8005c94:	f7ff fc4c 	bl	8005530 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c98:	f000 fafe 	bl	8006298 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f7ff fbf2 	bl	8005486 <prvIsQueueEmpty>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d0cb      	beq.n	8005c3e <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8005ca6:	2d00      	cmp	r5, #0
 8005ca8:	d0ea      	beq.n	8005c80 <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 8005caa:	f001 f803 	bl	8006cb4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005cae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005cb0:	b119      	cbz	r1, 8005cba <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005cb2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005cb4:	6819      	ldr	r1, [r3, #0]
 8005cb6:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005cba:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8005cbc:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005cbe:	f000 fd0f 	bl	80066e0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005cc2:	f001 f81b 	bl	8006cfc <vPortExitCritical>
 8005cc6:	e7db      	b.n	8005c80 <xQueueSemaphoreTake+0x14e>

08005cc8 <xQueueReceiveFromISR>:
{
 8005cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ccc:	4689      	mov	r9, r1
 8005cce:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	b950      	cbnz	r0, 8005cea <xQueueReceiveFromISR+0x22>
 8005cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd8:	b672      	cpsid	i
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	b662      	cpsie	i
 8005ce8:	e7fe      	b.n	8005ce8 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cea:	b961      	cbnz	r1, 8005d06 <xQueueReceiveFromISR+0x3e>
 8005cec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005cee:	b153      	cbz	r3, 8005d06 <xQueueReceiveFromISR+0x3e>
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	b672      	cpsid	i
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	b662      	cpsie	i
 8005d04:	e7fe      	b.n	8005d04 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d06:	f001 f8d1 	bl	8006eac <vPortValidateInterruptPriority>
	__asm volatile
 8005d0a:	f3ef 8711 	mrs	r7, BASEPRI
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	b672      	cpsid	i
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d22:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d24:	b31c      	cbz	r4, 8005d6e <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d26:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d2e:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d30:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d32:	f7ff fbe8 	bl	8005506 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d36:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005d38:	1c73      	adds	r3, r6, #1
 8005d3a:	d113      	bne.n	8005d64 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d3c:	692b      	ldr	r3, [r5, #16]
 8005d3e:	b90b      	cbnz	r3, 8005d44 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8005d40:	2001      	movs	r0, #1
 8005d42:	e00b      	b.n	8005d5c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d44:	f105 0010 	add.w	r0, r5, #16
 8005d48:	f000 fb8c 	bl	8006464 <xTaskRemoveFromEventList>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d0f7      	beq.n	8005d40 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8005d50:	f1b8 0f00 	cmp.w	r8, #0
 8005d54:	d0f4      	beq.n	8005d40 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005d56:	2001      	movs	r0, #1
 8005d58:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8005d5c:	f387 8811 	msr	BASEPRI, r7
}
 8005d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d64:	3601      	adds	r6, #1
 8005d66:	b276      	sxtb	r6, r6
 8005d68:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8005d6c:	e7e8      	b.n	8005d40 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8005d6e:	4620      	mov	r0, r4
 8005d70:	e7f4      	b.n	8005d5c <xQueueReceiveFromISR+0x94>

08005d72 <uxQueueMessagesWaiting>:
{
 8005d72:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8005d74:	4604      	mov	r4, r0
 8005d76:	b950      	cbnz	r0, 8005d8e <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	b672      	cpsid	i
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	b662      	cpsie	i
 8005d8c:	e7fe      	b.n	8005d8c <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 8005d8e:	f000 ff91 	bl	8006cb4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d94:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005d96:	f000 ffb1 	bl	8006cfc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d9a:	9801      	ldr	r0, [sp, #4]
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd10      	pop	{r4, pc}

08005da0 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8005da0:	b950      	cbnz	r0, 8005db8 <uxQueueMessagesWaitingFromISR+0x18>
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	b672      	cpsid	i
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	b662      	cpsie	i
 8005db6:	e7fe      	b.n	8005db6 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005db8:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005dba:	4770      	bx	lr

08005dbc <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dbc:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dbe:	4a08      	ldr	r2, [pc, #32]	; (8005de0 <vQueueUnregisterQueue+0x24>)
	{
 8005dc0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dc2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005dc6:	684c      	ldr	r4, [r1, #4]
 8005dc8:	4284      	cmp	r4, r0
 8005dca:	d104      	bne.n	8005dd6 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005dd2:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005dd4:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d1f2      	bne.n	8005dc2 <vQueueUnregisterQueue+0x6>
 8005ddc:	e7fa      	b.n	8005dd4 <vQueueUnregisterQueue+0x18>
 8005dde:	bf00      	nop
 8005de0:	20009b88 	.word	0x20009b88

08005de4 <vQueueDelete>:
{
 8005de4:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8005de6:	4604      	mov	r4, r0
 8005de8:	b950      	cbnz	r0, 8005e00 <vQueueDelete+0x1c>
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	b672      	cpsid	i
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	b662      	cpsie	i
 8005dfe:	e7fe      	b.n	8005dfe <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8005e00:	f7ff ffdc 	bl	8005dbc <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8005e04:	4620      	mov	r0, r4
}
 8005e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8005e0a:	f000 beb5 	b.w	8006b78 <vPortFree>
	...

08005e10 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e10:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <prvResetNextTaskUnblockTime+0x1c>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	6812      	ldr	r2, [r2, #0]
 8005e16:	b91a      	cbnz	r2, 8005e20 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e1c:	605a      	str	r2, [r3, #4]
	}
}
 8005e1e:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e24:	68d2      	ldr	r2, [r2, #12]
 8005e26:	6852      	ldr	r2, [r2, #4]
 8005e28:	e7f8      	b.n	8005e1c <prvResetNextTaskUnblockTime+0xc>
 8005e2a:	bf00      	nop
 8005e2c:	20009bc8 	.word	0x20009bc8

08005e30 <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8005e30:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e32:	4c12      	ldr	r4, [pc, #72]	; (8005e7c <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8005e34:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8005e36:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e38:	68e0      	ldr	r0, [r4, #12]
 8005e3a:	3004      	adds	r0, #4
 8005e3c:	f7ff fb13 	bl	8005466 <uxListRemove>
 8005e40:	b938      	cbnz	r0, 8005e52 <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e42:	68e2      	ldr	r2, [r4, #12]
 8005e44:	6923      	ldr	r3, [r4, #16]
 8005e46:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	408a      	lsls	r2, r1
 8005e4c:	ea23 0302 	bic.w	r3, r3, r2
 8005e50:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8005e52:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e54:	68e3      	ldr	r3, [r4, #12]
 8005e56:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8005e58:	d306      	bcc.n	8005e68 <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e5a:	6960      	ldr	r0, [r4, #20]
 8005e5c:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e62:	3104      	adds	r1, #4
 8005e64:	f7ff bae8 	b.w	8005438 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e68:	6820      	ldr	r0, [r4, #0]
 8005e6a:	68e1      	ldr	r1, [r4, #12]
 8005e6c:	3104      	adds	r1, #4
 8005e6e:	f7ff fae3 	bl	8005438 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8005e72:	6863      	ldr	r3, [r4, #4]
 8005e74:	429d      	cmp	r5, r3
 8005e76:	d200      	bcs.n	8005e7a <prvAddCurrentTaskToDelayedList.constprop.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 8005e78:	6065      	str	r5, [r4, #4]
}
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	20009bc8 	.word	0x20009bc8

08005e80 <prvIdleTask>:
{
 8005e80:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e82:	4c13      	ldr	r4, [pc, #76]	; (8005ed0 <prvIdleTask+0x50>)
				taskYIELD();
 8005e84:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 8005e88:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005e8e:	b94b      	cbnz	r3, 8005ea4 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d9fa      	bls.n	8005e8c <prvIdleTask+0xc>
				taskYIELD();
 8005e96:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	e7f3      	b.n	8005e8c <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 8005ea4:	f000 ff06 	bl	8006cb4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eaa:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eac:	1d28      	adds	r0, r5, #4
 8005eae:	f7ff fada 	bl	8005466 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8005eb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8005ebe:	f000 ff1d 	bl	8006cfc <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8005ec2:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005ec4:	f000 fe58 	bl	8006b78 <vPortFree>
			vPortFree( pxTCB );
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 fe55 	bl	8006b78 <vPortFree>
	}
 8005ece:	e7dd      	b.n	8005e8c <prvIdleTask+0xc>
 8005ed0:	20009bc8 	.word	0x20009bc8

08005ed4 <xTaskCreate>:
	{
 8005ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ed8:	0096      	lsls	r6, r2, #2
	{
 8005eda:	4607      	mov	r7, r0
 8005edc:	460d      	mov	r5, r1
 8005ede:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f000 fdc3 	bl	8006a6c <pvPortMalloc>
			if( pxStack != NULL )
 8005ee6:	4681      	mov	r9, r0
 8005ee8:	b1a0      	cbz	r0, 8005f14 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eea:	205c      	movs	r0, #92	; 0x5c
 8005eec:	f000 fdbe 	bl	8006a6c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	b160      	cbz	r0, 8005f0e <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8005ef4:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ef8:	4632      	mov	r2, r6
 8005efa:	21a5      	movs	r1, #165	; 0xa5
 8005efc:	4648      	mov	r0, r9
 8005efe:	f009 fa4d 	bl	800f39c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f02:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 8005f06:	b945      	cbnz	r5, 8005f1a <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f08:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8005f0c:	e013      	b.n	8005f36 <xTaskCreate+0x62>
					vPortFree( pxStack );
 8005f0e:	4648      	mov	r0, r9
 8005f10:	f000 fe32 	bl	8006b78 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f14:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005f18:	e088      	b.n	800602c <xTaskCreate+0x158>
 8005f1a:	1e6b      	subs	r3, r5, #1
 8005f1c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8005f20:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f22:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005f26:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8005f2a:	b108      	cbz	r0, 8005f30 <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2c:	429d      	cmp	r5, r3
 8005f2e:	d1f8      	bne.n	8005f22 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f30:	2300      	movs	r3, #0
 8005f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8005f38:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f3c:	f104 0904 	add.w	r9, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f40:	3e04      	subs	r6, #4
 8005f42:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005f44:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f48:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f4a:	445e      	add	r6, fp
 8005f4c:	bf28      	it	cs
 8005f4e:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8005f50:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005f52:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f54:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f58:	f7ff fa5f 	bl	800541a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f5c:	f104 0018 	add.w	r0, r4, #24
 8005f60:	f7ff fa5b 	bl	800541a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005f64:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f68:	4642      	mov	r2, r8
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f70:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f72:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f74:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f76:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f7a:	f000 fe77 	bl	8006c6c <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8005f7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f80:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005f82:	b103      	cbz	r3, 8005f86 <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f84:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 8005f86:	4d30      	ldr	r5, [pc, #192]	; (8006048 <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 8005f88:	f000 fe94 	bl	8006cb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005f8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005f8e:	f105 0734 	add.w	r7, r5, #52	; 0x34
 8005f92:	3301      	adds	r3, #1
 8005f94:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8005f96:	68ee      	ldr	r6, [r5, #12]
 8005f98:	2e00      	cmp	r6, #0
 8005f9a:	d14a      	bne.n	8006032 <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 8005f9c:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f9e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d11c      	bne.n	8005fde <xTaskCreate+0x10a>
 8005fa4:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fa6:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f7ff fa2b 	bl	8005404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005fae:	f108 0814 	add.w	r8, r8, #20
 8005fb2:	2e07      	cmp	r6, #7
 8005fb4:	d1f7      	bne.n	8005fa6 <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 8005fb6:	4e25      	ldr	r6, [pc, #148]	; (800604c <xTaskCreate+0x178>)
	vListInitialise( &xDelayedTaskList2 );
 8005fb8:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f7ff fa21 	bl	8005404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	f7ff fa1e 	bl	8005404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005fc8:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8005fcc:	f7ff fa1a 	bl	8005404 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005fd0:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8005fd4:	f7ff fa16 	bl	8005404 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005fd8:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005fda:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 8005fde:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8005fe2:	2601      	movs	r6, #1
 8005fe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005fe6:	2014      	movs	r0, #20
		uxTaskNumber++;
 8005fe8:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8005fea:	6929      	ldr	r1, [r5, #16]
 8005fec:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8005ff0:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ff4:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005ff6:	fa06 f302 	lsl.w	r3, r6, r2
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	612b      	str	r3, [r5, #16]
 8006000:	f7ff fa0e 	bl	8005420 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006004:	f000 fe7a 	bl	8006cfc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006008:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800600c:	b173      	cbz	r3, 800602c <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800600e:	68eb      	ldr	r3, [r5, #12]
 8006010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006012:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006014:	429a      	cmp	r2, r3
 8006016:	d209      	bcs.n	800602c <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 8006018:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800601c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006020:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
	}
 800602c:	4630      	mov	r0, r6
 800602e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8006032:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1d1      	bne.n	8005fde <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800603a:	68eb      	ldr	r3, [r5, #12]
 800603c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	429a      	cmp	r2, r3
 8006042:	d3cc      	bcc.n	8005fde <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 8006044:	60ec      	str	r4, [r5, #12]
 8006046:	e7ca      	b.n	8005fde <xTaskCreate+0x10a>
 8006048:	20009bc8 	.word	0x20009bc8
 800604c:	20009c88 	.word	0x20009c88

08006050 <vTaskDelete>:
	{
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	4605      	mov	r5, r0
 8006054:	4c2b      	ldr	r4, [pc, #172]	; (8006104 <vTaskDelete+0xb4>)
		taskENTER_CRITICAL();
 8006056:	f000 fe2d 	bl	8006cb4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800605a:	b905      	cbnz	r5, 800605e <vTaskDelete+0xe>
 800605c:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800605e:	1d2e      	adds	r6, r5, #4
 8006060:	4630      	mov	r0, r6
 8006062:	f7ff fa00 	bl	8005466 <uxListRemove>
 8006066:	b958      	cbnz	r0, 8006080 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006068:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800606a:	2014      	movs	r0, #20
 800606c:	fb00 4001 	mla	r0, r0, r1, r4
 8006070:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006072:	b92b      	cbnz	r3, 8006080 <vTaskDelete+0x30>
 8006074:	2201      	movs	r2, #1
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	408a      	lsls	r2, r1
 800607a:	ea23 0302 	bic.w	r3, r3, r2
 800607e:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006080:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006082:	b11b      	cbz	r3, 800608c <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006084:	f105 0018 	add.w	r0, r5, #24
 8006088:	f7ff f9ed 	bl	8005466 <uxListRemove>
			uxTaskNumber++;
 800608c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006090:	3301      	adds	r3, #1
 8006092:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8006096:	68e3      	ldr	r3, [r4, #12]
 8006098:	42ab      	cmp	r3, r5
 800609a:	d11c      	bne.n	80060d6 <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800609c:	4631      	mov	r1, r6
 800609e:	481a      	ldr	r0, [pc, #104]	; (8006108 <vTaskDelete+0xb8>)
 80060a0:	f7ff f9be 	bl	8005420 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80060a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060a6:	3301      	adds	r3, #1
 80060a8:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 80060aa:	f000 fe27 	bl	8006cfc <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80060ae:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 80060b2:	b333      	cbz	r3, 8006102 <vTaskDelete+0xb2>
			if( pxTCB == pxCurrentTCB )
 80060b4:	68e3      	ldr	r3, [r4, #12]
 80060b6:	42ab      	cmp	r3, r5
 80060b8:	d123      	bne.n	8006102 <vTaskDelete+0xb2>
				configASSERT( uxSchedulerSuspended == 0 );
 80060ba:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80060be:	b1b3      	cbz	r3, 80060ee <vTaskDelete+0x9e>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	b672      	cpsid	i
 80060c6:	f383 8811 	msr	BASEPRI, r3
 80060ca:	f3bf 8f6f 	isb	sy
 80060ce:	f3bf 8f4f 	dsb	sy
 80060d2:	b662      	cpsie	i
 80060d4:	e7fe      	b.n	80060d4 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 80060d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80060d8:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 80060da:	3b01      	subs	r3, #1
 80060dc:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 80060de:	f000 fd4b 	bl	8006b78 <vPortFree>
			vPortFree( pxTCB );
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 fd48 	bl	8006b78 <vPortFree>
				prvResetNextTaskUnblockTime();
 80060e8:	f7ff fe92 	bl	8005e10 <prvResetNextTaskUnblockTime>
 80060ec:	e7dd      	b.n	80060aa <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 80060ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	f3bf 8f6f 	isb	sy
	}
 8006102:	bd70      	pop	{r4, r5, r6, pc}
 8006104:	20009bc8 	.word	0x20009bc8
 8006108:	20009be0 	.word	0x20009be0

0800610c <vTaskStartScheduler>:
{
 800610c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800610e:	4c19      	ldr	r4, [pc, #100]	; (8006174 <vTaskStartScheduler+0x68>)
 8006110:	2500      	movs	r5, #0
 8006112:	2280      	movs	r2, #128	; 0x80
 8006114:	4918      	ldr	r1, [pc, #96]	; (8006178 <vTaskStartScheduler+0x6c>)
 8006116:	f504 7384 	add.w	r3, r4, #264	; 0x108
 800611a:	4818      	ldr	r0, [pc, #96]	; (800617c <vTaskStartScheduler+0x70>)
 800611c:	9500      	str	r5, [sp, #0]
 800611e:	9301      	str	r3, [sp, #4]
 8006120:	462b      	mov	r3, r5
 8006122:	f7ff fed7 	bl	8005ed4 <xTaskCreate>
	if( xReturn == pdPASS )
 8006126:	2801      	cmp	r0, #1
 8006128:	d114      	bne.n	8006154 <vTaskStartScheduler+0x48>
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	b672      	cpsid	i
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800613e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006142:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8006144:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006148:	60a5      	str	r5, [r4, #8]
}
 800614a:	b003      	add	sp, #12
 800614c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006150:	f000 be4a 	b.w	8006de8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006154:	3001      	adds	r0, #1
 8006156:	d10a      	bne.n	800616e <vTaskStartScheduler+0x62>
 8006158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615c:	b672      	cpsid	i
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	b662      	cpsie	i
 800616c:	e7fe      	b.n	800616c <vTaskStartScheduler+0x60>
}
 800616e:	b003      	add	sp, #12
 8006170:	bd30      	pop	{r4, r5, pc}
 8006172:	bf00      	nop
 8006174:	20009bc8 	.word	0x20009bc8
 8006178:	080145b2 	.word	0x080145b2
 800617c:	08005e81 	.word	0x08005e81

08006180 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006180:	4a03      	ldr	r2, [pc, #12]	; (8006190 <vTaskSuspendAll+0x10>)
 8006182:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8006186:	3301      	adds	r3, #1
 8006188:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20009bc8 	.word	0x20009bc8

08006194 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006194:	4b01      	ldr	r3, [pc, #4]	; (800619c <xTaskGetTickCount+0x8>)
 8006196:	6898      	ldr	r0, [r3, #8]
}
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20009bc8 	.word	0x20009bc8

080061a0 <xTaskGetTickCountFromISR>:
{
 80061a0:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80061a2:	f000 fe83 	bl	8006eac <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80061a6:	4b01      	ldr	r3, [pc, #4]	; (80061ac <xTaskGetTickCountFromISR+0xc>)
 80061a8:	6898      	ldr	r0, [r3, #8]
}
 80061aa:	bd08      	pop	{r3, pc}
 80061ac:	20009bc8 	.word	0x20009bc8

080061b0 <xTaskIncrementTick>:
{
 80061b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b4:	4c36      	ldr	r4, [pc, #216]	; (8006290 <xTaskIncrementTick+0xe0>)
 80061b6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d161      	bne.n	8006282 <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061be:	68a7      	ldr	r7, [r4, #8]
 80061c0:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 80061c2:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061c4:	b9c7      	cbnz	r7, 80061f8 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	b153      	cbz	r3, 80061e2 <xTaskIncrementTick+0x32>
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	b672      	cpsid	i
 80061d2:	f383 8811 	msr	BASEPRI, r3
 80061d6:	f3bf 8f6f 	isb	sy
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	b662      	cpsie	i
 80061e0:	e7fe      	b.n	80061e0 <xTaskIncrementTick+0x30>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	6962      	ldr	r2, [r4, #20]
 80061e6:	6022      	str	r2, [r4, #0]
 80061e8:	6163      	str	r3, [r4, #20]
 80061ea:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80061ee:	3301      	adds	r3, #1
 80061f0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 80061f4:	f7ff fe0c 	bl	8005e10 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061f8:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 80061fa:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061fc:	42bb      	cmp	r3, r7
 80061fe:	d910      	bls.n	8006222 <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006200:	68e3      	ldr	r3, [r4, #12]
 8006202:	2214      	movs	r2, #20
 8006204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006206:	fb02 4303 	mla	r3, r2, r3, r4
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 800620c:	2b02      	cmp	r3, #2
 800620e:	bf28      	it	cs
 8006210:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 8006212:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 8006216:	2b00      	cmp	r3, #0
}
 8006218:	bf0c      	ite	eq
 800621a:	4628      	moveq	r0, r5
 800621c:	2001      	movne	r0, #1
 800621e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8006222:	f04f 0a01 	mov.w	sl, #1
 8006226:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006294 <xTaskIncrementTick+0xe4>
 800622a:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	b91b      	cbnz	r3, 800623c <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
						xNextTaskUnblockTime = xItemValue;
 8006238:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800623a:	e7e1      	b.n	8006200 <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006242:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8006244:	429f      	cmp	r7, r3
 8006246:	d3f7      	bcc.n	8006238 <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006248:	f106 0b04 	add.w	fp, r6, #4
 800624c:	4658      	mov	r0, fp
 800624e:	f7ff f90a 	bl	8005466 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006252:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8006254:	b11b      	cbz	r3, 800625e <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006256:	f106 0018 	add.w	r0, r6, #24
 800625a:	f7ff f904 	bl	8005466 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800625e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8006260:	4659      	mov	r1, fp
 8006262:	6922      	ldr	r2, [r4, #16]
 8006264:	fa0a f300 	lsl.w	r3, sl, r0
 8006268:	fb09 8000 	mla	r0, r9, r0, r8
 800626c:	4313      	orrs	r3, r2
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	f7ff f8d6 	bl	8005420 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006274:	68e3      	ldr	r3, [r4, #12]
 8006276:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800627a:	429a      	cmp	r2, r3
 800627c:	bf28      	it	cs
 800627e:	2501      	movcs	r5, #1
 8006280:	e7d5      	b.n	800622e <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 8006282:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8006286:	2500      	movs	r5, #0
		++uxPendedTicks;
 8006288:	3301      	adds	r3, #1
 800628a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800628e:	e7c0      	b.n	8006212 <xTaskIncrementTick+0x62>
 8006290:	20009bc8 	.word	0x20009bc8
 8006294:	20009bfc 	.word	0x20009bfc

08006298 <xTaskResumeAll>:
{
 8006298:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800629c:	4c35      	ldr	r4, [pc, #212]	; (8006374 <xTaskResumeAll+0xdc>)
 800629e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80062a2:	b953      	cbnz	r3, 80062ba <xTaskResumeAll+0x22>
 80062a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a8:	b672      	cpsid	i
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	b662      	cpsie	i
 80062b8:	e7fe      	b.n	80062b8 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 80062ba:	f000 fcfb 	bl	8006cb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80062be:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80062c2:	3b01      	subs	r3, #1
 80062c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c8:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 80062cc:	b135      	cbz	r5, 80062dc <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 80062ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80062d0:	f000 fd14 	bl	8006cfc <vPortExitCritical>
}
 80062d4:	4620      	mov	r0, r4
 80062d6:	b002      	add	sp, #8
 80062d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d0f5      	beq.n	80062ce <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 80062e2:	2601      	movs	r6, #1
 80062e4:	f104 0734 	add.w	r7, r4, #52	; 0x34
 80062e8:	f04f 0814 	mov.w	r8, #20
 80062ec:	e01d      	b.n	800632a <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80062f2:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062f4:	f105 0018 	add.w	r0, r5, #24
 80062f8:	f7ff f8b5 	bl	8005466 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062fc:	1d29      	adds	r1, r5, #4
 80062fe:	4608      	mov	r0, r1
 8006300:	9101      	str	r1, [sp, #4]
 8006302:	f7ff f8b0 	bl	8005466 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006306:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006308:	6922      	ldr	r2, [r4, #16]
 800630a:	fa06 f300 	lsl.w	r3, r6, r0
 800630e:	9901      	ldr	r1, [sp, #4]
 8006310:	fb08 7000 	mla	r0, r8, r0, r7
 8006314:	4313      	orrs	r3, r2
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	f7ff f882 	bl	8005420 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800631c:	68e3      	ldr	r3, [r4, #12]
 800631e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006322:	429a      	cmp	r2, r3
 8006324:	d301      	bcc.n	800632a <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8006326:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800632a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1dd      	bne.n	80062ee <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 8006332:	b10d      	cbz	r5, 8006338 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8006334:	f7ff fd6c 	bl	8005e10 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006338:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800633c:	b14d      	cbz	r5, 8006352 <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 800633e:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8006340:	f7ff ff36 	bl	80061b0 <xTaskIncrementTick>
 8006344:	b108      	cbz	r0, 800634a <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8006346:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800634a:	3d01      	subs	r5, #1
 800634c:	d1f8      	bne.n	8006340 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 800634e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8006352:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8006356:	2b00      	cmp	r3, #0
 8006358:	d0b9      	beq.n	80062ce <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 800635a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800635e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006362:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800636e:	2401      	movs	r4, #1
 8006370:	e7ae      	b.n	80062d0 <xTaskResumeAll+0x38>
 8006372:	bf00      	nop
 8006374:	20009bc8 	.word	0x20009bc8

08006378 <vTaskDelay>:
	{
 8006378:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800637a:	b950      	cbnz	r0, 8006392 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800637c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006388:	f3bf 8f4f 	dsb	sy
 800638c:	f3bf 8f6f 	isb	sy
	}
 8006390:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8006392:	4b0c      	ldr	r3, [pc, #48]	; (80063c4 <vTaskDelay+0x4c>)
 8006394:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006398:	b153      	cbz	r3, 80063b0 <vTaskDelay+0x38>
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	b672      	cpsid	i
 80063a0:	f383 8811 	msr	BASEPRI, r3
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	f3bf 8f4f 	dsb	sy
 80063ac:	b662      	cpsie	i
 80063ae:	e7fe      	b.n	80063ae <vTaskDelay+0x36>
			vTaskSuspendAll();
 80063b0:	f7ff fee6 	bl	8006180 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80063b4:	f7ff fd3c 	bl	8005e30 <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 80063b8:	f7ff ff6e 	bl	8006298 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0dd      	beq.n	800637c <vTaskDelay+0x4>
 80063c0:	e7e6      	b.n	8006390 <vTaskDelay+0x18>
 80063c2:	bf00      	nop
 80063c4:	20009bc8 	.word	0x20009bc8

080063c8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063c8:	4a18      	ldr	r2, [pc, #96]	; (800642c <vTaskSwitchContext+0x64>)
 80063ca:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 80063ce:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063d0:	b11b      	cbz	r3, 80063da <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 80063d8:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80063da:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063de:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80063e0:	fab3 f383 	clz	r3, r3
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2114      	movs	r1, #20
 80063e8:	f1c3 031f 	rsb	r3, r3, #31
 80063ec:	4359      	muls	r1, r3
 80063ee:	1850      	adds	r0, r2, r1
 80063f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80063f2:	b954      	cbnz	r4, 800640a <vTaskSwitchContext+0x42>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f8:	b672      	cpsid	i
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	b662      	cpsie	i
 8006408:	e7fe      	b.n	8006408 <vTaskSwitchContext+0x40>
 800640a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800640c:	4411      	add	r1, r2
 800640e:	6864      	ldr	r4, [r4, #4]
 8006410:	313c      	adds	r1, #60	; 0x3c
 8006412:	428c      	cmp	r4, r1
 8006414:	6384      	str	r4, [r0, #56]	; 0x38
 8006416:	bf04      	itt	eq
 8006418:	6861      	ldreq	r1, [r4, #4]
 800641a:	6381      	streq	r1, [r0, #56]	; 0x38
 800641c:	2114      	movs	r1, #20
 800641e:	fb01 2303 	mla	r3, r1, r3, r2
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	60d3      	str	r3, [r2, #12]
}
 8006428:	e7d6      	b.n	80063d8 <vTaskSwitchContext+0x10>
 800642a:	bf00      	nop
 800642c:	20009bc8 	.word	0x20009bc8

08006430 <vTaskPlaceOnEventList>:
{
 8006430:	b510      	push	{r4, lr}
 8006432:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8006434:	b950      	cbnz	r0, 800644c <vTaskPlaceOnEventList+0x1c>
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	b672      	cpsid	i
 800643c:	f383 8811 	msr	BASEPRI, r3
 8006440:	f3bf 8f6f 	isb	sy
 8006444:	f3bf 8f4f 	dsb	sy
 8006448:	b662      	cpsie	i
 800644a:	e7fe      	b.n	800644a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800644c:	4b04      	ldr	r3, [pc, #16]	; (8006460 <vTaskPlaceOnEventList+0x30>)
 800644e:	68d9      	ldr	r1, [r3, #12]
 8006450:	3118      	adds	r1, #24
 8006452:	f7fe fff1 	bl	8005438 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006456:	4620      	mov	r0, r4
}
 8006458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800645c:	f7ff bce8 	b.w	8005e30 <prvAddCurrentTaskToDelayedList.constprop.0>
 8006460:	20009bc8 	.word	0x20009bc8

08006464 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006464:	68c3      	ldr	r3, [r0, #12]
{
 8006466:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006468:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800646a:	b955      	cbnz	r5, 8006482 <xTaskRemoveFromEventList+0x1e>
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	b672      	cpsid	i
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	b662      	cpsie	i
 8006480:	e7fe      	b.n	8006480 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006482:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006486:	4c15      	ldr	r4, [pc, #84]	; (80064dc <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006488:	4608      	mov	r0, r1
 800648a:	9101      	str	r1, [sp, #4]
 800648c:	f7fe ffeb 	bl	8005466 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006490:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006494:	9901      	ldr	r1, [sp, #4]
 8006496:	b9e3      	cbnz	r3, 80064d2 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006498:	1d29      	adds	r1, r5, #4
 800649a:	4608      	mov	r0, r1
 800649c:	9101      	str	r1, [sp, #4]
 800649e:	f7fe ffe2 	bl	8005466 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80064a2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80064a4:	2301      	movs	r3, #1
 80064a6:	6920      	ldr	r0, [r4, #16]
 80064a8:	9901      	ldr	r1, [sp, #4]
 80064aa:	4093      	lsls	r3, r2
 80064ac:	4303      	orrs	r3, r0
 80064ae:	2014      	movs	r0, #20
 80064b0:	6123      	str	r3, [r4, #16]
 80064b2:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80064b6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064ba:	f7fe ffb1 	bl	8005420 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064be:	68e3      	ldr	r3, [r4, #12]
 80064c0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d907      	bls.n	80064d8 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 80064c8:	2001      	movs	r0, #1
 80064ca:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 80064ce:	b003      	add	sp, #12
 80064d0:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064d2:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80064d6:	e7f0      	b.n	80064ba <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 80064d8:	2000      	movs	r0, #0
	return xReturn;
 80064da:	e7f8      	b.n	80064ce <xTaskRemoveFromEventList+0x6a>
 80064dc:	20009bc8 	.word	0x20009bc8

080064e0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064e0:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <vTaskInternalSetTimeOutState+0x10>)
 80064e2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064e6:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064e8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064ea:	6043      	str	r3, [r0, #4]
}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20009bc8 	.word	0x20009bc8

080064f4 <xTaskCheckForTimeOut>:
{
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80064f8:	4605      	mov	r5, r0
 80064fa:	b950      	cbnz	r0, 8006512 <xTaskCheckForTimeOut+0x1e>
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	b672      	cpsid	i
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	b662      	cpsie	i
 8006510:	e7fe      	b.n	8006510 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8006512:	b951      	cbnz	r1, 800652a <xTaskCheckForTimeOut+0x36>
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	b672      	cpsid	i
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	b662      	cpsie	i
 8006528:	e7fe      	b.n	8006528 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800652a:	f000 fbc3 	bl	8006cb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006530:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006532:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006534:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006538:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800653a:	4298      	cmp	r0, r3
 800653c:	d001      	beq.n	8006542 <xTaskCheckForTimeOut+0x4e>
 800653e:	428a      	cmp	r2, r1
 8006540:	d910      	bls.n	8006564 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006542:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006544:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006546:	4283      	cmp	r3, r0
 8006548:	d90a      	bls.n	8006560 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 800654a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800654c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800654e:	4413      	add	r3, r2
 8006550:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8006552:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006554:	f7ff ffc4 	bl	80064e0 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8006558:	f000 fbd0 	bl	8006cfc <vPortExitCritical>
}
 800655c:	4620      	mov	r0, r4
 800655e:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006564:	2401      	movs	r4, #1
 8006566:	e7f7      	b.n	8006558 <xTaskCheckForTimeOut+0x64>
 8006568:	20009bc8 	.word	0x20009bc8

0800656c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800656c:	4b02      	ldr	r3, [pc, #8]	; (8006578 <vTaskMissedYield+0xc>)
 800656e:	2201      	movs	r2, #1
 8006570:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	20009bc8 	.word	0x20009bc8

0800657c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <xTaskGetSchedulerState+0x1c>)
 800657e:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8006582:	b132      	cbz	r2, 8006592 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006584:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 8006588:	2b00      	cmp	r3, #0
 800658a:	bf0c      	ite	eq
 800658c:	2002      	moveq	r0, #2
 800658e:	2000      	movne	r0, #0
 8006590:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006592:	2001      	movs	r0, #1
	}
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20009bc8 	.word	0x20009bc8

0800659c <xTaskPriorityInherit>:
	{
 800659c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800659e:	4604      	mov	r4, r0
 80065a0:	2800      	cmp	r0, #0
 80065a2:	d034      	beq.n	800660e <xTaskPriorityInherit+0x72>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80065a4:	4d22      	ldr	r5, [pc, #136]	; (8006630 <xTaskPriorityInherit+0x94>)
 80065a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80065a8:	68ea      	ldr	r2, [r5, #12]
 80065aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d236      	bcs.n	800661e <xTaskPriorityInherit+0x82>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065b0:	6982      	ldr	r2, [r0, #24]
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	db04      	blt.n	80065c0 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065b6:	68ea      	ldr	r2, [r5, #12]
 80065b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065ba:	f1c2 0207 	rsb	r2, r2, #7
 80065be:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80065c0:	4f1c      	ldr	r7, [pc, #112]	; (8006634 <xTaskPriorityInherit+0x98>)
 80065c2:	2614      	movs	r6, #20
 80065c4:	6962      	ldr	r2, [r4, #20]
 80065c6:	fb06 7303 	mla	r3, r6, r3, r7
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d121      	bne.n	8006612 <xTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ce:	1d21      	adds	r1, r4, #4
 80065d0:	4608      	mov	r0, r1
 80065d2:	9101      	str	r1, [sp, #4]
 80065d4:	f7fe ff47 	bl	8005466 <uxListRemove>
 80065d8:	9901      	ldr	r1, [sp, #4]
 80065da:	b950      	cbnz	r0, 80065f2 <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80065dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80065de:	fb06 5600 	mla	r6, r6, r0, r5
 80065e2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80065e4:	b92b      	cbnz	r3, 80065f2 <xTaskPriorityInherit+0x56>
 80065e6:	2201      	movs	r2, #1
 80065e8:	692b      	ldr	r3, [r5, #16]
 80065ea:	4082      	lsls	r2, r0
 80065ec:	ea23 0302 	bic.w	r3, r3, r2
 80065f0:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065f2:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065f4:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80065fa:	2401      	movs	r4, #1
 80065fc:	fa04 f203 	lsl.w	r2, r4, r3
 8006600:	4302      	orrs	r2, r0
 8006602:	2014      	movs	r0, #20
 8006604:	fb00 7003 	mla	r0, r0, r3, r7
 8006608:	612a      	str	r2, [r5, #16]
 800660a:	f7fe ff09 	bl	8005420 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800660e:	4620      	mov	r0, r4
		return xReturn;
 8006610:	e003      	b.n	800661a <xTaskPriorityInherit+0x7e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006612:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8006614:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800661a:	b003      	add	sp, #12
 800661c:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800661e:	68eb      	ldr	r3, [r5, #12]
 8006620:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006622:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006624:	42a0      	cmp	r0, r4
 8006626:	bf2c      	ite	cs
 8006628:	2000      	movcs	r0, #0
 800662a:	2001      	movcc	r0, #1
 800662c:	e7f5      	b.n	800661a <xTaskPriorityInherit+0x7e>
 800662e:	bf00      	nop
 8006630:	20009bc8 	.word	0x20009bc8
 8006634:	20009bfc 	.word	0x20009bfc

08006638 <xTaskPriorityDisinherit>:
	{
 8006638:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800663a:	4604      	mov	r4, r0
 800663c:	b910      	cbnz	r0, 8006644 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 800663e:	2000      	movs	r0, #0
	}
 8006640:	b002      	add	sp, #8
 8006642:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8006644:	4d24      	ldr	r5, [pc, #144]	; (80066d8 <xTaskPriorityDisinherit+0xa0>)
 8006646:	68eb      	ldr	r3, [r5, #12]
 8006648:	4283      	cmp	r3, r0
 800664a:	d00a      	beq.n	8006662 <xTaskPriorityDisinherit+0x2a>
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	b672      	cpsid	i
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	b662      	cpsie	i
 8006660:	e7fe      	b.n	8006660 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 8006662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006664:	b953      	cbnz	r3, 800667c <xTaskPriorityDisinherit+0x44>
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	b672      	cpsid	i
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	b662      	cpsie	i
 800667a:	e7fe      	b.n	800667a <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800667c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800667e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006680:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006682:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006684:	4291      	cmp	r1, r2
 8006686:	d0da      	beq.n	800663e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1d8      	bne.n	800663e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800668c:	1d01      	adds	r1, r0, #4
 800668e:	4608      	mov	r0, r1
 8006690:	9101      	str	r1, [sp, #4]
 8006692:	f7fe fee8 	bl	8005466 <uxListRemove>
 8006696:	9901      	ldr	r1, [sp, #4]
 8006698:	b958      	cbnz	r0, 80066b2 <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800669a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800669c:	2014      	movs	r0, #20
 800669e:	fb00 5006 	mla	r0, r0, r6, r5
 80066a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80066a4:	b92b      	cbnz	r3, 80066b2 <xTaskPriorityDisinherit+0x7a>
 80066a6:	2201      	movs	r2, #1
 80066a8:	692b      	ldr	r3, [r5, #16]
 80066aa:	40b2      	lsls	r2, r6
 80066ac:	ea23 0302 	bic.w	r3, r3, r2
 80066b0:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80066b4:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066b6:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066ba:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80066be:	2401      	movs	r4, #1
 80066c0:	fa04 f203 	lsl.w	r2, r4, r3
 80066c4:	4302      	orrs	r2, r0
 80066c6:	2014      	movs	r0, #20
 80066c8:	612a      	str	r2, [r5, #16]
 80066ca:	4a04      	ldr	r2, [pc, #16]	; (80066dc <xTaskPriorityDisinherit+0xa4>)
 80066cc:	fb00 2003 	mla	r0, r0, r3, r2
 80066d0:	f7fe fea6 	bl	8005420 <vListInsertEnd>
					xReturn = pdTRUE;
 80066d4:	4620      	mov	r0, r4
		return xReturn;
 80066d6:	e7b3      	b.n	8006640 <xTaskPriorityDisinherit+0x8>
 80066d8:	20009bc8 	.word	0x20009bc8
 80066dc:	20009bfc 	.word	0x20009bfc

080066e0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80066e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80066e2:	4604      	mov	r4, r0
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d051      	beq.n	800678c <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 80066e8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80066ea:	b952      	cbnz	r2, 8006702 <vTaskPriorityDisinheritAfterTimeout+0x22>
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	b672      	cpsid	i
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	b662      	cpsie	i
 8006700:	e7fe      	b.n	8006700 <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006702:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006704:	4299      	cmp	r1, r3
 8006706:	bf38      	it	cc
 8006708:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800670a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800670c:	428b      	cmp	r3, r1
 800670e:	d03d      	beq.n	800678c <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006710:	2a01      	cmp	r2, #1
 8006712:	d13b      	bne.n	800678c <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 8006714:	4d1e      	ldr	r5, [pc, #120]	; (8006790 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8006716:	68ea      	ldr	r2, [r5, #12]
 8006718:	4282      	cmp	r2, r0
 800671a:	d10a      	bne.n	8006732 <vTaskPriorityDisinheritAfterTimeout+0x52>
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	e7fe      	b.n	8006730 <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006732:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006734:	2614      	movs	r6, #20
 8006736:	4f17      	ldr	r7, [pc, #92]	; (8006794 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006738:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 800673a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800673c:	fb06 7303 	mla	r3, r6, r3, r7
 8006740:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006742:	bfa4      	itt	ge
 8006744:	f1c1 0107 	rsbge	r1, r1, #7
 8006748:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800674a:	429a      	cmp	r2, r3
 800674c:	d11e      	bne.n	800678c <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800674e:	1d01      	adds	r1, r0, #4
 8006750:	4608      	mov	r0, r1
 8006752:	9101      	str	r1, [sp, #4]
 8006754:	f7fe fe87 	bl	8005466 <uxListRemove>
 8006758:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800675a:	9901      	ldr	r1, [sp, #4]
 800675c:	b948      	cbnz	r0, 8006772 <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800675e:	fb06 5602 	mla	r6, r6, r2, r5
 8006762:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006764:	b92b      	cbnz	r3, 8006772 <vTaskPriorityDisinheritAfterTimeout+0x92>
 8006766:	2001      	movs	r0, #1
 8006768:	692b      	ldr	r3, [r5, #16]
 800676a:	4090      	lsls	r0, r2
 800676c:	ea23 0300 	bic.w	r3, r3, r0
 8006770:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8006772:	2301      	movs	r3, #1
 8006774:	6928      	ldr	r0, [r5, #16]
 8006776:	4093      	lsls	r3, r2
 8006778:	4303      	orrs	r3, r0
 800677a:	2014      	movs	r0, #20
 800677c:	fb00 7002 	mla	r0, r0, r2, r7
 8006780:	612b      	str	r3, [r5, #16]
	}
 8006782:	b003      	add	sp, #12
 8006784:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8006788:	f7fe be4a 	b.w	8005420 <vListInsertEnd>
	}
 800678c:	b003      	add	sp, #12
 800678e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006790:	20009bc8 	.word	0x20009bc8
 8006794:	20009bfc 	.word	0x20009bfc

08006798 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <pvTaskIncrementMutexHeldCount+0x14>)
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	b11a      	cbz	r2, 80067a6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800679e:	68d9      	ldr	r1, [r3, #12]
 80067a0:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80067a2:	3201      	adds	r2, #1
 80067a4:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 80067a6:	68d8      	ldr	r0, [r3, #12]
	}
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	20009bc8 	.word	0x20009bc8

080067b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067b0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80067b2:	f7ff fcab 	bl	800610c <vTaskStartScheduler>
  
  return osOK;
}
 80067b6:	2000      	movs	r0, #0
 80067b8:	bd08      	pop	{r3, pc}

080067ba <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ba:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80067be:	b10b      	cbz	r3, 80067c4 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80067c0:	f7ff bcee 	b.w	80061a0 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80067c4:	f7ff bce6 	b.w	8006194 <xTaskGetTickCount>

080067c8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	4604      	mov	r4, r0
 80067cc:	b085      	sub	sp, #20
 80067ce:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067d0:	8a22      	ldrh	r2, [r4, #16]
 80067d2:	ad03      	add	r5, sp, #12
 80067d4:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 80067d8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80067da:	bf14      	ite	ne
 80067dc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067de:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80067e0:	e9d0 1000 	ldrd	r1, r0, [r0]
 80067e4:	e9cd 4500 	strd	r4, r5, [sp]
 80067e8:	f7ff fb74 	bl	8005ed4 <xTaskCreate>
 80067ec:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80067ee:	bf0c      	ite	eq
 80067f0:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80067f2:	2000      	movne	r0, #0
}
 80067f4:	b005      	add	sp, #20
 80067f6:	bd30      	pop	{r4, r5, pc}

080067f8 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80067f8:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80067fa:	f7ff fc29 	bl	8006050 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 80067fe:	2000      	movs	r0, #0
 8006800:	bd08      	pop	{r3, pc}

08006802 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006802:	2801      	cmp	r0, #1
{
 8006804:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006806:	bf38      	it	cc
 8006808:	2001      	movcc	r0, #1
 800680a:	f7ff fdb5 	bl	8006378 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800680e:	2000      	movs	r0, #0
 8006810:	bd08      	pop	{r3, pc}

08006812 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8006812:	2001      	movs	r0, #1
 8006814:	f7ff b808 	b.w	8005828 <xQueueCreateMutex>

08006818 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006818:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800681a:	2400      	movs	r4, #0
 800681c:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800681e:	b1f0      	cbz	r0, 800685e <osMutexWait+0x46>
 8006820:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8006824:	b1ab      	cbz	r3, 8006852 <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006826:	aa01      	add	r2, sp, #4
 8006828:	4621      	mov	r1, r4
 800682a:	f7ff fa4d 	bl	8005cc8 <xQueueReceiveFromISR>
 800682e:	2801      	cmp	r0, #1
 8006830:	d113      	bne.n	800685a <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006832:	9b01      	ldr	r3, [sp, #4]
 8006834:	b913      	cbnz	r3, 800683c <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8006836:	2000      	movs	r0, #0
}
 8006838:	b002      	add	sp, #8
 800683a:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800683c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006844:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e7f1      	b.n	8006836 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006852:	f7ff f96e 	bl	8005b32 <xQueueSemaphoreTake>
 8006856:	2801      	cmp	r0, #1
 8006858:	d0ed      	beq.n	8006836 <osMutexWait+0x1e>
    return osErrorOS;
 800685a:	20ff      	movs	r0, #255	; 0xff
 800685c:	e7ec      	b.n	8006838 <osMutexWait+0x20>
    return osErrorParameter;
 800685e:	2080      	movs	r0, #128	; 0x80
 8006860:	e7ea      	b.n	8006838 <osMutexWait+0x20>

08006862 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006862:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8006864:	2400      	movs	r4, #0
 8006866:	9401      	str	r4, [sp, #4]
 8006868:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800686c:	b1a3      	cbz	r3, 8006898 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800686e:	a901      	add	r1, sp, #4
 8006870:	f7ff f85e 	bl	8005930 <xQueueGiveFromISR>
 8006874:	2801      	cmp	r0, #1
 8006876:	d115      	bne.n	80068a4 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	b913      	cbnz	r3, 8006882 <osMutexRelease+0x20>
  osStatus result = osOK;
 800687c:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800687e:	b002      	add	sp, #8
 8006880:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8006882:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	e7f1      	b.n	800687c <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006898:	461a      	mov	r2, r3
 800689a:	4619      	mov	r1, r3
 800689c:	f7fe ff09 	bl	80056b2 <xQueueGenericSend>
 80068a0:	2801      	cmp	r0, #1
 80068a2:	d0eb      	beq.n	800687c <osMutexRelease+0x1a>
    result = osErrorOS;
 80068a4:	20ff      	movs	r0, #255	; 0xff
 80068a6:	e7ea      	b.n	800687e <osMutexRelease+0x1c>

080068a8 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 80068a8:	b510      	push	{r4, lr}
 80068aa:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 80068ae:	b91c      	cbnz	r4, 80068b8 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 80068b0:	f7ff fa98 	bl	8005de4 <vQueueDelete>

  return osOK;
}
 80068b4:	4620      	mov	r0, r4
 80068b6:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80068b8:	2482      	movs	r4, #130	; 0x82
 80068ba:	e7fb      	b.n	80068b4 <osMutexDelete+0xc>

080068bc <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80068bc:	2901      	cmp	r1, #1
{ 
 80068be:	4608      	mov	r0, r1
 80068c0:	b510      	push	{r4, lr}
  if (count == 1) {
 80068c2:	d10c      	bne.n	80068de <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80068c4:	2203      	movs	r2, #3
 80068c6:	2100      	movs	r1, #0
 80068c8:	f7fe feab 	bl	8005622 <xQueueGenericCreate>
 80068cc:	4604      	mov	r4, r0
 80068ce:	b120      	cbz	r0, 80068da <osSemaphoreCreate+0x1e>
 80068d0:	2300      	movs	r3, #0
 80068d2:	461a      	mov	r2, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	f7fe feec 	bl	80056b2 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80068da:	4620      	mov	r0, r4
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80068e2:	f7fe bec4 	b.w	800566e <xQueueCreateCountingSemaphore>

080068e6 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80068e6:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80068e8:	2400      	movs	r4, #0
 80068ea:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80068ec:	b1f0      	cbz	r0, 800692c <osSemaphoreWait+0x46>
 80068ee:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80068f2:	b1ab      	cbz	r3, 8006920 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80068f4:	aa01      	add	r2, sp, #4
 80068f6:	4621      	mov	r1, r4
 80068f8:	f7ff f9e6 	bl	8005cc8 <xQueueReceiveFromISR>
 80068fc:	2801      	cmp	r0, #1
 80068fe:	d113      	bne.n	8006928 <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006900:	9b01      	ldr	r3, [sp, #4]
 8006902:	b913      	cbnz	r3, 800690a <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8006904:	2000      	movs	r0, #0
}
 8006906:	b002      	add	sp, #8
 8006908:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800690a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800690e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006912:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e7f1      	b.n	8006904 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006920:	f7ff f907 	bl	8005b32 <xQueueSemaphoreTake>
 8006924:	2801      	cmp	r0, #1
 8006926:	d0ed      	beq.n	8006904 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8006928:	20ff      	movs	r0, #255	; 0xff
 800692a:	e7ec      	b.n	8006906 <osSemaphoreWait+0x20>
    return osErrorParameter;
 800692c:	2080      	movs	r0, #128	; 0x80
 800692e:	e7ea      	b.n	8006906 <osSemaphoreWait+0x20>

08006930 <osSemaphoreRelease>:
 8006930:	f7ff bf97 	b.w	8006862 <osMutexRelease>

08006934 <osSemaphoreDelete>:
 8006934:	f7ff bfb8 	b.w	80068a8 <osMutexDelete>

08006938 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006938:	2200      	movs	r2, #0
 800693a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800693e:	f7fe be70 	b.w	8005622 <xQueueGenericCreate>

08006942 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006942:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8006944:	2400      	movs	r4, #0
{
 8006946:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006948:	9403      	str	r4, [sp, #12]
 800694a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800694e:	b1b3      	cbz	r3, 800697e <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006950:	4623      	mov	r3, r4
 8006952:	aa03      	add	r2, sp, #12
 8006954:	a901      	add	r1, sp, #4
 8006956:	f7fe ff82 	bl	800585e <xQueueGenericSendFromISR>
 800695a:	2801      	cmp	r0, #1
 800695c:	d117      	bne.n	800698e <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800695e:	9b03      	ldr	r3, [sp, #12]
 8006960:	b913      	cbnz	r3, 8006968 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8006962:	2000      	movs	r0, #0
}
 8006964:	b004      	add	sp, #16
 8006966:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8006968:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800696c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006970:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	e7f1      	b.n	8006962 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800697e:	2a01      	cmp	r2, #1
 8006980:	a901      	add	r1, sp, #4
 8006982:	bf38      	it	cc
 8006984:	2201      	movcc	r2, #1
 8006986:	f7fe fe94 	bl	80056b2 <xQueueGenericSend>
 800698a:	2801      	cmp	r0, #1
 800698c:	d0e9      	beq.n	8006962 <osMessagePut+0x20>
      return osErrorOS;
 800698e:	20ff      	movs	r0, #255	; 0xff
 8006990:	e7e8      	b.n	8006964 <osMessagePut+0x22>

08006992 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006992:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8006994:	2300      	movs	r3, #0
{
 8006996:	4604      	mov	r4, r0
 8006998:	4616      	mov	r6, r2
 800699a:	4608      	mov	r0, r1
 800699c:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 800699e:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80069a0:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 80069a2:	b911      	cbnz	r1, 80069aa <osMessageGet+0x18>
    event.status = osErrorParameter;
 80069a4:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 80069a6:	9301      	str	r3, [sp, #4]
 80069a8:	e018      	b.n	80069dc <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80069b0:	b1db      	cbz	r3, 80069ea <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80069b2:	466a      	mov	r2, sp
 80069b4:	a902      	add	r1, sp, #8
 80069b6:	f7ff f987 	bl	8005cc8 <xQueueReceiveFromISR>
      event.status = osOK;
 80069ba:	2801      	cmp	r0, #1
 80069bc:	bf0c      	ite	eq
 80069be:	2310      	moveq	r3, #16
 80069c0:	2300      	movne	r3, #0
 80069c2:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80069c4:	9b00      	ldr	r3, [sp, #0]
 80069c6:	b14b      	cbz	r3, 80069dc <osMessageGet+0x4a>
 80069c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80069dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80069e4:	4620      	mov	r0, r4
 80069e6:	b004      	add	sp, #16
 80069e8:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80069ea:	a902      	add	r1, sp, #8
 80069ec:	f7fe fffc 	bl	80059e8 <xQueueReceive>
 80069f0:	2801      	cmp	r0, #1
 80069f2:	d101      	bne.n	80069f8 <osMessageGet+0x66>
      event.status = osEventMessage;
 80069f4:	2310      	movs	r3, #16
 80069f6:	e7d6      	b.n	80069a6 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80069f8:	2e00      	cmp	r6, #0
 80069fa:	bf18      	it	ne
 80069fc:	2640      	movne	r6, #64	; 0x40
 80069fe:	9601      	str	r6, [sp, #4]
 8006a00:	e7ec      	b.n	80069dc <osMessageGet+0x4a>

08006a02 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006a02:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a04:	f7ff fdba 	bl	800657c <xTaskGetSchedulerState>
 8006a08:	2801      	cmp	r0, #1
 8006a0a:	d003      	beq.n	8006a14 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006a10:	f000 b9c0 	b.w	8006d94 <xPortSysTickHandler>
}
 8006a14:	bd08      	pop	{r3, pc}

08006a16 <osMessageWaiting>:
 8006a16:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8006a1a:	b10b      	cbz	r3, 8006a20 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006a1c:	f7ff b9c0 	b.w	8005da0 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006a20:	f7ff b9a7 	b.w	8005d72 <uxQueueMessagesWaiting>

08006a24 <osMessageDelete>:
 8006a24:	f7ff bf40 	b.w	80068a8 <osMutexDelete>

08006a28 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <prvInsertBlockIntoFreeList+0x40>)
{
 8006a2a:	b530      	push	{r4, r5, lr}
 8006a2c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a2e:	461a      	mov	r2, r3
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4283      	cmp	r3, r0
 8006a34:	d3fb      	bcc.n	8006a2e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a36:	6854      	ldr	r4, [r2, #4]
 8006a38:	1911      	adds	r1, r2, r4
 8006a3a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a3c:	bf01      	itttt	eq
 8006a3e:	6841      	ldreq	r1, [r0, #4]
 8006a40:	4610      	moveq	r0, r2
 8006a42:	1909      	addeq	r1, r1, r4
 8006a44:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a46:	6844      	ldr	r4, [r0, #4]
 8006a48:	1901      	adds	r1, r0, r4
 8006a4a:	428b      	cmp	r3, r1
 8006a4c:	d106      	bne.n	8006a5c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a4e:	68a9      	ldr	r1, [r5, #8]
 8006a50:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a52:	bf1f      	itttt	ne
 8006a54:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a56:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a58:	1909      	addne	r1, r1, r4
 8006a5a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a5c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a5e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a60:	bf18      	it	ne
 8006a62:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a64:	bd30      	pop	{r4, r5, pc}
 8006a66:	bf00      	nop
 8006a68:	20009ce0 	.word	0x20009ce0

08006a6c <pvPortMalloc>:
{
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8006a70:	4d3f      	ldr	r5, [pc, #252]	; (8006b70 <pvPortMalloc+0x104>)
{
 8006a72:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006a74:	f7ff fb84 	bl	8006180 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006a78:	68ab      	ldr	r3, [r5, #8]
 8006a7a:	b9f3      	cbnz	r3, 8006aba <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 8006a7c:	493d      	ldr	r1, [pc, #244]	; (8006b74 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a7e:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a80:	bf1b      	ittet	ne
 8006a82:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a84:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a88:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a8c:	f023 0307 	bicne.w	r3, r3, #7
 8006a90:	bf1c      	itt	ne
 8006a92:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a94:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8006a96:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a9a:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a9c:	606b      	str	r3, [r5, #4]
	uxAddress -= xHeapStructSize;
 8006a9e:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa0:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8006aa4:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aa8:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8006aaa:	60aa      	str	r2, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006aac:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ab0:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ab8:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006aba:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8006abe:	ea18 0f04 	tst.w	r8, r4
 8006ac2:	d14f      	bne.n	8006b64 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 8006ac4:	2c00      	cmp	r4, #0
 8006ac6:	d03e      	beq.n	8006b46 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8006ac8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006acc:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ace:	bf1c      	itt	ne
 8006ad0:	f023 0307 	bicne.w	r3, r3, #7
 8006ad4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d044      	beq.n	8006b64 <pvPortMalloc+0xf8>
 8006ada:	692f      	ldr	r7, [r5, #16]
 8006adc:	429f      	cmp	r7, r3
 8006ade:	d341      	bcc.n	8006b64 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 8006ae0:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8006ae2:	4823      	ldr	r0, [pc, #140]	; (8006b70 <pvPortMalloc+0x104>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ae4:	6872      	ldr	r2, [r6, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d201      	bcs.n	8006aee <pvPortMalloc+0x82>
 8006aea:	6831      	ldr	r1, [r6, #0]
 8006aec:	b9b1      	cbnz	r1, 8006b1c <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8006aee:	68a9      	ldr	r1, [r5, #8]
 8006af0:	42b1      	cmp	r1, r6
 8006af2:	d037      	beq.n	8006b64 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006af4:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006af6:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006af8:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006afa:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006afc:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006afe:	d914      	bls.n	8006b2a <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b00:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b02:	0741      	lsls	r1, r0, #29
 8006b04:	d00d      	beq.n	8006b22 <pvPortMalloc+0xb6>
 8006b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0a:	b672      	cpsid	i
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	b662      	cpsie	i
 8006b1a:	e7fe      	b.n	8006b1a <pvPortMalloc+0xae>
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	460e      	mov	r6, r1
 8006b20:	e7e0      	b.n	8006ae4 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b22:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b24:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b26:	f7ff ff7f 	bl	8006a28 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b2a:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b2c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b2e:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b30:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b32:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b36:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b38:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b3a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b3e:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b40:	bf38      	it	cc
 8006b42:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 8006b44:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8006b46:	f7ff fba7 	bl	8006298 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b4a:	0763      	lsls	r3, r4, #29
 8006b4c:	d00c      	beq.n	8006b68 <pvPortMalloc+0xfc>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	b672      	cpsid	i
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	b662      	cpsie	i
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8006b64:	2400      	movs	r4, #0
 8006b66:	e7ee      	b.n	8006b46 <pvPortMalloc+0xda>
}
 8006b68:	4620      	mov	r0, r4
 8006b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6e:	bf00      	nop
 8006b70:	20009ce0 	.word	0x20009ce0
 8006b74:	20009cf8 	.word	0x20009cf8

08006b78 <vPortFree>:
{
 8006b78:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	b388      	cbz	r0, 8006be2 <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b7e:	4d19      	ldr	r5, [pc, #100]	; (8006be4 <vPortFree+0x6c>)
 8006b80:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006b84:	696a      	ldr	r2, [r5, #20]
 8006b86:	4213      	tst	r3, r2
 8006b88:	d10a      	bne.n	8006ba0 <vPortFree+0x28>
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	b672      	cpsid	i
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	b662      	cpsie	i
 8006b9e:	e7fe      	b.n	8006b9e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ba0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006ba4:	b151      	cbz	r1, 8006bbc <vPortFree+0x44>
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	b672      	cpsid	i
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	b662      	cpsie	i
 8006bba:	e7fe      	b.n	8006bba <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bbc:	ea23 0302 	bic.w	r3, r3, r2
 8006bc0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006bc4:	f7ff fadc 	bl	8006180 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bc8:	692a      	ldr	r2, [r5, #16]
 8006bca:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bce:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bd2:	4413      	add	r3, r2
 8006bd4:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bd6:	f7ff ff27 	bl	8006a28 <prvInsertBlockIntoFreeList>
}
 8006bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8006bde:	f7ff bb5b 	b.w	8006298 <xTaskResumeAll>
}
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	20009ce0 	.word	0x20009ce0

08006be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006be8:	4808      	ldr	r0, [pc, #32]	; (8006c0c <prvPortStartFirstTask+0x24>)
 8006bea:	6800      	ldr	r0, [r0, #0]
 8006bec:	6800      	ldr	r0, [r0, #0]
 8006bee:	f380 8808 	msr	MSP, r0
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f380 8814 	msr	CONTROL, r0
 8006bfa:	b662      	cpsie	i
 8006bfc:	b661      	cpsie	f
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	df00      	svc	0
 8006c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c0a:	0000      	.short	0x0000
 8006c0c:	e000ed08 	.word	0xe000ed08

08006c10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006c20 <vPortEnableVFP+0x10>
 8006c14:	6801      	ldr	r1, [r0, #0]
 8006c16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c1a:	6001      	str	r1, [r0, #0]
 8006c1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c1e:	0000      	.short	0x0000
 8006c20:	e000ed88 	.word	0xe000ed88

08006c24 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8006c24:	2300      	movs	r3, #0
{
 8006c26:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006c28:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006c2a:	4b0f      	ldr	r3, [pc, #60]	; (8006c68 <prvTaskExitError+0x44>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	d00a      	beq.n	8006c48 <prvTaskExitError+0x24>
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	b672      	cpsid	i
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	b662      	cpsie	i
 8006c46:	e7fe      	b.n	8006c46 <prvTaskExitError+0x22>
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	b672      	cpsid	i
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	b662      	cpsie	i
	while( ulDummy == 0 )
 8006c5c:	9b01      	ldr	r3, [sp, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0fc      	beq.n	8006c5c <prvTaskExitError+0x38>
}
 8006c62:	b002      	add	sp, #8
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20001a5c 	.word	0x20001a5c

08006c6c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c70:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c74:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006c78:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c7a:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c7c:	4b03      	ldr	r3, [pc, #12]	; (8006c8c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c7e:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c80:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c82:	f06f 0302 	mvn.w	r3, #2
 8006c86:	6203      	str	r3, [r0, #32]
}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	08006c25 	.word	0x08006c25

08006c90 <SVC_Handler>:
	__asm volatile (
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <pxCurrentTCBConst2>)
 8006c92:	6819      	ldr	r1, [r3, #0]
 8006c94:	6808      	ldr	r0, [r1, #0]
 8006c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	f380 8809 	msr	PSP, r0
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	4770      	bx	lr
 8006cac:	f3af 8000 	nop.w

08006cb0 <pxCurrentTCBConst2>:
 8006cb0:	20009bd4 	.word	0x20009bd4

08006cb4 <vPortEnterCritical>:
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	b672      	cpsid	i
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	b662      	cpsie	i
	uxCriticalNesting++;
 8006cc8:	4a0b      	ldr	r2, [pc, #44]	; (8006cf8 <vPortEnterCritical+0x44>)
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006cce:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006cd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006cd2:	d110      	bne.n	8006cf6 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006cd4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006cd8:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	b153      	cbz	r3, 8006cf6 <vPortEnterCritical+0x42>
 8006ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce4:	b672      	cpsid	i
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	b662      	cpsie	i
 8006cf4:	e7fe      	b.n	8006cf4 <vPortEnterCritical+0x40>
}
 8006cf6:	4770      	bx	lr
 8006cf8:	20001a5c 	.word	0x20001a5c

08006cfc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006cfc:	4a09      	ldr	r2, [pc, #36]	; (8006d24 <vPortExitCritical+0x28>)
 8006cfe:	6813      	ldr	r3, [r2, #0]
 8006d00:	b953      	cbnz	r3, 8006d18 <vPortExitCritical+0x1c>
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	b672      	cpsid	i
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	b662      	cpsie	i
 8006d16:	e7fe      	b.n	8006d16 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d1c:	b90b      	cbnz	r3, 8006d22 <vPortExitCritical+0x26>
	__asm volatile
 8006d1e:	f383 8811 	msr	BASEPRI, r3
}
 8006d22:	4770      	bx	lr
 8006d24:	20001a5c 	.word	0x20001a5c
	...

08006d30 <PendSV_Handler>:
	__asm volatile
 8006d30:	f3ef 8009 	mrs	r0, PSP
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <pxCurrentTCBConst>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f01e 0f10 	tst.w	lr, #16
 8006d40:	bf08      	it	eq
 8006d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d54:	b672      	cpsid	i
 8006d56:	f380 8811 	msr	BASEPRI, r0
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	b662      	cpsie	i
 8006d64:	f7ff fb30 	bl	80063c8 <vTaskSwitchContext>
 8006d68:	f04f 0000 	mov.w	r0, #0
 8006d6c:	f380 8811 	msr	BASEPRI, r0
 8006d70:	bc09      	pop	{r0, r3}
 8006d72:	6819      	ldr	r1, [r3, #0]
 8006d74:	6808      	ldr	r0, [r1, #0]
 8006d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7a:	f01e 0f10 	tst.w	lr, #16
 8006d7e:	bf08      	it	eq
 8006d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d84:	f380 8809 	msr	PSP, r0
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <pxCurrentTCBConst>:
 8006d90:	20009bd4 	.word	0x20009bd4

08006d94 <xPortSysTickHandler>:
{
 8006d94:	b508      	push	{r3, lr}
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	b672      	cpsid	i
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8006daa:	f7ff fa01 	bl	80061b0 <xTaskIncrementTick>
 8006dae:	b128      	cbz	r0, 8006dbc <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006db0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f383 8811 	msr	BASEPRI, r3
}
 8006dc2:	bd08      	pop	{r3, pc}

08006dc4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dc4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006dc8:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dce:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dd0:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dd2:	4b04      	ldr	r3, [pc, #16]	; (8006de4 <vPortSetupTimerInterrupt+0x20>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dde:	2307      	movs	r3, #7
 8006de0:	6113      	str	r3, [r2, #16]
}
 8006de2:	4770      	bx	lr
 8006de4:	20001a50 	.word	0x20001a50

08006de8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006de8:	4b2d      	ldr	r3, [pc, #180]	; (8006ea0 <xPortStartScheduler+0xb8>)
{
 8006dea:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dec:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dee:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006df4:	22ff      	movs	r2, #255	; 0xff
 8006df6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006df8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dfa:	4a2a      	ldr	r2, [pc, #168]	; (8006ea4 <xPortStartScheduler+0xbc>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e06:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e0a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e0c:	2307      	movs	r3, #7
 8006e0e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e10:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006e14:	1e5c      	subs	r4, r3, #1
 8006e16:	0600      	lsls	r0, r0, #24
 8006e18:	d40e      	bmi.n	8006e38 <xPortStartScheduler+0x50>
 8006e1a:	b111      	cbz	r1, 8006e22 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	6053      	str	r3, [r2, #4]
 8006e20:	d013      	beq.n	8006e4a <xPortStartScheduler+0x62>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	b672      	cpsid	i
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	b662      	cpsie	i
 8006e36:	e7fe      	b.n	8006e36 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e38:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	f88d 3003 	strb.w	r3, [sp, #3]
 8006e46:	4623      	mov	r3, r4
 8006e48:	e7e2      	b.n	8006e10 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e4a:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e4e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8006e52:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e54:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <xPortStartScheduler+0xb8>)
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e5e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006e62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e66:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e6a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006e6e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e72:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006e76:	f7ff ffa5 	bl	8006dc4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <xPortStartScheduler+0xc0>)
 8006e7c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006e7e:	f7ff fec7 	bl	8006c10 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e82:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006e86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e8a:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006e8e:	f7ff feab 	bl	8006be8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006e92:	f7ff fa99 	bl	80063c8 <vTaskSwitchContext>
}
 8006e96:	4628      	mov	r0, r5
	prvTaskExitError();
 8006e98:	f7ff fec4 	bl	8006c24 <prvTaskExitError>
}
 8006e9c:	b003      	add	sp, #12
 8006e9e:	bd30      	pop	{r4, r5, pc}
 8006ea0:	e000e400 	.word	0xe000e400
 8006ea4:	200100f8 	.word	0x200100f8
 8006ea8:	20001a5c 	.word	0x20001a5c

08006eac <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006eac:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006eb0:	2b0f      	cmp	r3, #15
 8006eb2:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <vPortValidateInterruptPriority+0x54>)
 8006eb4:	d90f      	bls.n	8006ed6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eb6:	4913      	ldr	r1, [pc, #76]	; (8006f04 <vPortValidateInterruptPriority+0x58>)
 8006eb8:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006eba:	7811      	ldrb	r1, [r2, #0]
 8006ebc:	4299      	cmp	r1, r3
 8006ebe:	d90a      	bls.n	8006ed6 <vPortValidateInterruptPriority+0x2a>
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	b672      	cpsid	i
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	b662      	cpsie	i
 8006ed4:	e7fe      	b.n	8006ed4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ed6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006eda:	6852      	ldr	r2, [r2, #4]
 8006edc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8006ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d90a      	bls.n	8006efe <vPortValidateInterruptPriority+0x52>
 8006ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eec:	b672      	cpsid	i
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	b662      	cpsie	i
 8006efc:	e7fe      	b.n	8006efc <vPortValidateInterruptPriority+0x50>
	}
 8006efe:	4770      	bx	lr
 8006f00:	200100f8 	.word	0x200100f8
 8006f04:	e000e3f0 	.word	0xe000e3f0

08006f08 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f08:	680a      	ldr	r2, [r1, #0]
{
 8006f0a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f0c:	320c      	adds	r2, #12
{
 8006f0e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f10:	f000 ffb4 	bl	8007e7c <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006f14:	b908      	cbnz	r0, 8006f1a <netconn_apimsg+0x12>
    return apimsg->err;
 8006f16:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8006f1a:	bd10      	pop	{r4, pc}

08006f1c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	460d      	mov	r5, r1
 8006f20:	b088      	sub	sp, #32
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006f22:	4611      	mov	r1, r2
 8006f24:	f000 fd74 	bl	8007a10 <netconn_alloc>
  if (conn != NULL) {
 8006f28:	4604      	mov	r4, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d03e      	beq.n	8006fac <netconn_new_with_proto_and_callback+0x90>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
    API_MSG_VAR_REF(msg).conn = conn;
 8006f2e:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006f30:	4669      	mov	r1, sp
 8006f32:	4820      	ldr	r0, [pc, #128]	; (8006fb4 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006f34:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006f38:	f7ff ffe6 	bl	8006f08 <netconn_apimsg>
    if (err != ERR_OK) {
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d035      	beq.n	8006fac <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006f40:	6863      	ldr	r3, [r4, #4]
 8006f42:	b12b      	cbz	r3, 8006f50 <netconn_new_with_proto_and_callback+0x34>
 8006f44:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <netconn_new_with_proto_and_callback+0x9c>)
 8006f46:	22a3      	movs	r2, #163	; 0xa3
 8006f48:	491c      	ldr	r1, [pc, #112]	; (8006fbc <netconn_new_with_proto_and_callback+0xa0>)
 8006f4a:	481d      	ldr	r0, [pc, #116]	; (8006fc0 <netconn_new_with_proto_and_callback+0xa4>)
 8006f4c:	f008 fa2e 	bl	800f3ac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006f50:	f104 0510 	add.w	r5, r4, #16
 8006f54:	4628      	mov	r0, r5
 8006f56:	f008 f968 	bl	800f22a <sys_mbox_valid>
 8006f5a:	b928      	cbnz	r0, 8006f68 <netconn_new_with_proto_and_callback+0x4c>
 8006f5c:	4b16      	ldr	r3, [pc, #88]	; (8006fb8 <netconn_new_with_proto_and_callback+0x9c>)
 8006f5e:	22a4      	movs	r2, #164	; 0xa4
 8006f60:	4918      	ldr	r1, [pc, #96]	; (8006fc4 <netconn_new_with_proto_and_callback+0xa8>)
 8006f62:	4817      	ldr	r0, [pc, #92]	; (8006fc0 <netconn_new_with_proto_and_callback+0xa4>)
 8006f64:	f008 fa22 	bl	800f3ac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006f68:	f104 0014 	add.w	r0, r4, #20
 8006f6c:	f008 f95d 	bl	800f22a <sys_mbox_valid>
 8006f70:	b128      	cbz	r0, 8006f7e <netconn_new_with_proto_and_callback+0x62>
 8006f72:	4b11      	ldr	r3, [pc, #68]	; (8006fb8 <netconn_new_with_proto_and_callback+0x9c>)
 8006f74:	22a6      	movs	r2, #166	; 0xa6
 8006f76:	4914      	ldr	r1, [pc, #80]	; (8006fc8 <netconn_new_with_proto_and_callback+0xac>)
 8006f78:	4811      	ldr	r0, [pc, #68]	; (8006fc0 <netconn_new_with_proto_and_callback+0xa4>)
 8006f7a:	f008 fa17 	bl	800f3ac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006f7e:	f104 060c 	add.w	r6, r4, #12
 8006f82:	4630      	mov	r0, r6
 8006f84:	f008 f976 	bl	800f274 <sys_sem_valid>
 8006f88:	b928      	cbnz	r0, 8006f96 <netconn_new_with_proto_and_callback+0x7a>
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <netconn_new_with_proto_and_callback+0x9c>)
 8006f8c:	22a9      	movs	r2, #169	; 0xa9
 8006f8e:	490f      	ldr	r1, [pc, #60]	; (8006fcc <netconn_new_with_proto_and_callback+0xb0>)
 8006f90:	480b      	ldr	r0, [pc, #44]	; (8006fc0 <netconn_new_with_proto_and_callback+0xa4>)
 8006f92:	f008 fa0b 	bl	800f3ac <iprintf>
      sys_sem_free(&conn->op_completed);
 8006f96:	4630      	mov	r0, r6
 8006f98:	f008 f969 	bl	800f26e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f008 f8fd 	bl	800f19c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006fa2:	4621      	mov	r1, r4
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006fa4:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8006fa6:	2007      	movs	r0, #7
 8006fa8:	f003 fe50 	bl	800ac4c <memp_free>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
}
 8006fac:	4620      	mov	r0, r4
 8006fae:	b008      	add	sp, #32
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
 8006fb2:	bf00      	nop
 8006fb4:	080079b1 	.word	0x080079b1
 8006fb8:	080145c6 	.word	0x080145c6
 8006fbc:	0801467b 	.word	0x0801467b
 8006fc0:	080144fe 	.word	0x080144fe
 8006fc4:	0801469c 	.word	0x0801469c
 8006fc8:	080146b1 	.word	0x080146b1
 8006fcc:	080146d2 	.word	0x080146d2

08006fd0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8006fd0:	b500      	push	{lr}
 8006fd2:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006fd4:	b958      	cbnz	r0, 8006fee <netconn_bind+0x1e>
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <netconn_bind+0x38>)
 8006fd8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8006fdc:	490b      	ldr	r1, [pc, #44]	; (800700c <netconn_bind+0x3c>)
 8006fde:	480c      	ldr	r0, [pc, #48]	; (8007010 <netconn_bind+0x40>)
 8006fe0:	f008 f9e4 	bl	800f3ac <iprintf>
 8006fe4:	f06f 000f 	mvn.w	r0, #15
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8006fe8:	b009      	add	sp, #36	; 0x24
 8006fea:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8006ff0:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	bf08      	it	eq
 8006ff6:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8006ff8:	4807      	ldr	r0, [pc, #28]	; (8007018 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006ffa:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006ffe:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007000:	4669      	mov	r1, sp
 8007002:	f7ff ff81 	bl	8006f08 <netconn_apimsg>
  return err;
 8007006:	e7ef      	b.n	8006fe8 <netconn_bind+0x18>
 8007008:	080145c6 	.word	0x080145c6
 800700c:	08014745 	.word	0x08014745
 8007010:	080144fe 	.word	0x080144fe
 8007014:	080142f8 	.word	0x080142f8
 8007018:	08007c01 	.word	0x08007c01

0800701c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800701c:	b500      	push	{lr}
 800701e:	b089      	sub	sp, #36	; 0x24
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007020:	b958      	cbnz	r0, 800703a <netconn_listen_with_backlog+0x1e>
 8007022:	4b09      	ldr	r3, [pc, #36]	; (8007048 <netconn_listen_with_backlog+0x2c>)
 8007024:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007028:	4908      	ldr	r1, [pc, #32]	; (800704c <netconn_listen_with_backlog+0x30>)
 800702a:	4809      	ldr	r0, [pc, #36]	; (8007050 <netconn_listen_with_backlog+0x34>)
 800702c:	f008 f9be 	bl	800f3ac <iprintf>
 8007030:	f06f 000f 	mvn.w	r0, #15
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007034:	b009      	add	sp, #36	; 0x24
 8007036:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 800703a:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800703c:	4669      	mov	r1, sp
 800703e:	4805      	ldr	r0, [pc, #20]	; (8007054 <netconn_listen_with_backlog+0x38>)
 8007040:	f7ff ff62 	bl	8006f08 <netconn_apimsg>
  return err;
 8007044:	e7f6      	b.n	8007034 <netconn_listen_with_backlog+0x18>
 8007046:	bf00      	nop
 8007048:	080145c6 	.word	0x080145c6
 800704c:	080147bd 	.word	0x080147bd
 8007050:	080144fe 	.word	0x080144fe
 8007054:	08007c35 	.word	0x08007c35

08007058 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007058:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800705a:	4604      	mov	r4, r0
 800705c:	b148      	cbz	r0, 8007072 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800705e:	f008 f943 	bl	800f2e8 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 8007062:	2300      	movs	r3, #0
  err = conn->pending_err;
 8007064:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8007068:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800706a:	f008 f949 	bl	800f300 <sys_arch_unprotect>
  return err;
}
 800706e:	4628      	mov	r0, r5
 8007070:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8007072:	4605      	mov	r5, r0
 8007074:	e7fb      	b.n	800706e <netconn_err+0x16>
	...

08007078 <netconn_accept>:
{
 8007078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800707a:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800707c:	460e      	mov	r6, r1
 800707e:	b959      	cbnz	r1, 8007098 <netconn_accept+0x20>
 8007080:	4b25      	ldr	r3, [pc, #148]	; (8007118 <netconn_accept+0xa0>)
 8007082:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007086:	4925      	ldr	r1, [pc, #148]	; (800711c <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007088:	f06f 040f 	mvn.w	r4, #15
 800708c:	4824      	ldr	r0, [pc, #144]	; (8007120 <netconn_accept+0xa8>)
 800708e:	f008 f98d 	bl	800f3ac <iprintf>
}
 8007092:	4620      	mov	r0, r4
 8007094:	b003      	add	sp, #12
 8007096:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800709c:	b920      	cbnz	r0, 80070a8 <netconn_accept+0x30>
 800709e:	4b1e      	ldr	r3, [pc, #120]	; (8007118 <netconn_accept+0xa0>)
 80070a0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80070a4:	491f      	ldr	r1, [pc, #124]	; (8007124 <netconn_accept+0xac>)
 80070a6:	e7ef      	b.n	8007088 <netconn_accept+0x10>
  err = netconn_err(conn);
 80070a8:	f7ff ffd6 	bl	8007058 <netconn_err>
 80070ac:	4604      	mov	r4, r0
 80070ae:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d1ed      	bne.n	8007092 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80070b6:	f105 0714 	add.w	r7, r5, #20
 80070ba:	4638      	mov	r0, r7
 80070bc:	f008 f8b5 	bl	800f22a <sys_mbox_valid>
 80070c0:	b910      	cbnz	r0, 80070c8 <netconn_accept+0x50>
    return ERR_CLSD;
 80070c2:	f06f 040e 	mvn.w	r4, #14
 80070c6:	e7e4      	b.n	8007092 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80070c8:	7e2b      	ldrb	r3, [r5, #24]
 80070ca:	07da      	lsls	r2, r3, #31
 80070cc:	d4f9      	bmi.n	80070c2 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 80070ce:	079b      	lsls	r3, r3, #30
 80070d0:	d508      	bpl.n	80070e4 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80070d2:	a901      	add	r1, sp, #4
 80070d4:	4638      	mov	r0, r7
 80070d6:	f008 f897 	bl	800f208 <sys_arch_mbox_tryfetch>
 80070da:	3001      	adds	r0, #1
 80070dc:	d107      	bne.n	80070ee <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 80070de:	f06f 0406 	mvn.w	r4, #6
 80070e2:	e7d6      	b.n	8007092 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80070e4:	4622      	mov	r2, r4
 80070e6:	a901      	add	r1, sp, #4
 80070e8:	4638      	mov	r0, r7
 80070ea:	f008 f86b 	bl	800f1c4 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80070ee:	6a2b      	ldr	r3, [r5, #32]
 80070f0:	b11b      	cbz	r3, 80070fa <netconn_accept+0x82>
 80070f2:	2200      	movs	r2, #0
 80070f4:	2101      	movs	r1, #1
 80070f6:	4628      	mov	r0, r5
 80070f8:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80070fa:	f10d 0103 	add.w	r1, sp, #3
 80070fe:	9801      	ldr	r0, [sp, #4]
 8007100:	f000 fc2e 	bl	8007960 <lwip_netconn_is_err_msg>
 8007104:	b110      	cbz	r0, 800710c <netconn_accept+0x94>
    return err;
 8007106:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800710a:	e7c2      	b.n	8007092 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 800710c:	9b01      	ldr	r3, [sp, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d0d7      	beq.n	80070c2 <netconn_accept+0x4a>
  *new_conn = newconn;
 8007112:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8007114:	e7bd      	b.n	8007092 <netconn_accept+0x1a>
 8007116:	bf00      	nop
 8007118:	080145c6 	.word	0x080145c6
 800711c:	08014856 	.word	0x08014856
 8007120:	080144fe 	.word	0x080144fe
 8007124:	08014876 	.word	0x08014876

08007128 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4606      	mov	r6, r0
 800712e:	4617      	mov	r7, r2
 8007130:	461d      	mov	r5, r3
 8007132:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007136:	460c      	mov	r4, r1
 8007138:	b929      	cbnz	r1, 8007146 <recv_udp+0x1e>
 800713a:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <recv_udp+0xa8>)
 800713c:	22e5      	movs	r2, #229	; 0xe5
 800713e:	4925      	ldr	r1, [pc, #148]	; (80071d4 <recv_udp+0xac>)
 8007140:	4825      	ldr	r0, [pc, #148]	; (80071d8 <recv_udp+0xb0>)
 8007142:	f008 f933 	bl	800f3ac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007146:	b99e      	cbnz	r6, 8007170 <recv_udp+0x48>
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <recv_udp+0xa8>)
 800714a:	22e6      	movs	r2, #230	; 0xe6
 800714c:	4923      	ldr	r1, [pc, #140]	; (80071dc <recv_udp+0xb4>)
 800714e:	4822      	ldr	r0, [pc, #136]	; (80071d8 <recv_udp+0xb0>)
 8007150:	f008 f92c 	bl	800f3ac <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007154:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8007156:	b003      	add	sp, #12
 8007158:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 800715c:	f003 bfd6 	b.w	800b10c <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007160:	6a33      	ldr	r3, [r6, #32]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d031      	beq.n	80071ca <recv_udp+0xa2>
 8007166:	4630      	mov	r0, r6
}
 8007168:	b003      	add	sp, #12
 800716a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800716e:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8007170:	6873      	ldr	r3, [r6, #4]
 8007172:	42a3      	cmp	r3, r4
 8007174:	d005      	beq.n	8007182 <recv_udp+0x5a>
 8007176:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <recv_udp+0xa8>)
 8007178:	22ee      	movs	r2, #238	; 0xee
 800717a:	4919      	ldr	r1, [pc, #100]	; (80071e0 <recv_udp+0xb8>)
 800717c:	4816      	ldr	r0, [pc, #88]	; (80071d8 <recv_udp+0xb0>)
 800717e:	f008 f915 	bl	800f3ac <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007182:	f106 0910 	add.w	r9, r6, #16
 8007186:	4648      	mov	r0, r9
 8007188:	f008 f84f 	bl	800f22a <sys_mbox_valid>
 800718c:	2800      	cmp	r0, #0
 800718e:	d0e1      	beq.n	8007154 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007190:	2006      	movs	r0, #6
 8007192:	f003 fd2b 	bl	800abec <memp_malloc>
  if (buf == NULL) {
 8007196:	4604      	mov	r4, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	d0db      	beq.n	8007154 <recv_udp+0x2c>
    buf->ptr = p;
 800719c:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 80071a0:	b105      	cbz	r5, 80071a4 <recv_udp+0x7c>
 80071a2:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 80071a4:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80071a6:	4621      	mov	r1, r4
 80071a8:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 80071aa:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 80071ac:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 80071b0:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80071b2:	f007 fffd 	bl	800f1b0 <sys_mbox_trypost>
 80071b6:	9a01      	ldr	r2, [sp, #4]
 80071b8:	4601      	mov	r1, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0d0      	beq.n	8007160 <recv_udp+0x38>
    netbuf_delete(buf);
 80071be:	4620      	mov	r0, r4
}
 80071c0:	b003      	add	sp, #12
 80071c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 80071c6:	f000 bd91 	b.w	8007cec <netbuf_delete>
}
 80071ca:	b003      	add	sp, #12
 80071cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071d0:	08014902 	.word	0x08014902
 80071d4:	08014977 	.word	0x08014977
 80071d8:	080144fe 	.word	0x080144fe
 80071dc:	08014999 	.word	0x08014999
 80071e0:	080149b8 	.word	0x080149b8

080071e4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80071e4:	b507      	push	{r0, r1, r2, lr}
 80071e6:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80071e8:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 80071ea:	9001      	str	r0, [sp, #4]
 80071ec:	f004 fbd8 	bl	800b9a0 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80071f0:	9801      	ldr	r0, [sp, #4]
 80071f2:	4909      	ldr	r1, [pc, #36]	; (8007218 <setup_tcp+0x34>)
 80071f4:	f004 fbd8 	bl	800b9a8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80071f8:	9801      	ldr	r0, [sp, #4]
 80071fa:	4908      	ldr	r1, [pc, #32]	; (800721c <setup_tcp+0x38>)
 80071fc:	f004 fbec 	bl	800b9d8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007200:	9801      	ldr	r0, [sp, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	4906      	ldr	r1, [pc, #24]	; (8007220 <setup_tcp+0x3c>)
 8007206:	f004 fc1b 	bl	800ba40 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800720a:	4906      	ldr	r1, [pc, #24]	; (8007224 <setup_tcp+0x40>)
 800720c:	9801      	ldr	r0, [sp, #4]
}
 800720e:	b003      	add	sp, #12
 8007210:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8007214:	f004 bbf6 	b.w	800ba04 <tcp_err>
 8007218:	08007751 	.word	0x08007751
 800721c:	080076e1 	.word	0x080076e1
 8007220:	08007665 	.word	0x08007665
 8007224:	08007821 	.word	0x08007821

08007228 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800722e:	4604      	mov	r4, r0
 8007230:	b930      	cbnz	r0, 8007240 <lwip_netconn_do_writemore+0x18>
 8007232:	4b89      	ldr	r3, [pc, #548]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 8007234:	f240 6273 	movw	r2, #1651	; 0x673
 8007238:	4988      	ldr	r1, [pc, #544]	; (800745c <lwip_netconn_do_writemore+0x234>)
 800723a:	4889      	ldr	r0, [pc, #548]	; (8007460 <lwip_netconn_do_writemore+0x238>)
 800723c:	f008 f8b6 	bl	800f3ac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007240:	7863      	ldrb	r3, [r4, #1]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d006      	beq.n	8007254 <lwip_netconn_do_writemore+0x2c>
 8007246:	4b84      	ldr	r3, [pc, #528]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 8007248:	f240 6274 	movw	r2, #1652	; 0x674
 800724c:	4985      	ldr	r1, [pc, #532]	; (8007464 <lwip_netconn_do_writemore+0x23c>)
 800724e:	4884      	ldr	r0, [pc, #528]	; (8007460 <lwip_netconn_do_writemore+0x238>)
 8007250:	f008 f8ac 	bl	800f3ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007254:	69e3      	ldr	r3, [r4, #28]
 8007256:	b933      	cbnz	r3, 8007266 <lwip_netconn_do_writemore+0x3e>
 8007258:	4b7f      	ldr	r3, [pc, #508]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 800725a:	f240 6275 	movw	r2, #1653	; 0x675
 800725e:	4982      	ldr	r1, [pc, #520]	; (8007468 <lwip_netconn_do_writemore+0x240>)
 8007260:	487f      	ldr	r0, [pc, #508]	; (8007460 <lwip_netconn_do_writemore+0x238>)
 8007262:	f008 f8a3 	bl	800f3ac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007266:	6863      	ldr	r3, [r4, #4]
 8007268:	b933      	cbnz	r3, 8007278 <lwip_netconn_do_writemore+0x50>
 800726a:	4b7b      	ldr	r3, [pc, #492]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 800726c:	f240 6276 	movw	r2, #1654	; 0x676
 8007270:	497e      	ldr	r1, [pc, #504]	; (800746c <lwip_netconn_do_writemore+0x244>)
 8007272:	487b      	ldr	r0, [pc, #492]	; (8007460 <lwip_netconn_do_writemore+0x238>)
 8007274:	f008 f89a 	bl	800f3ac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8007278:	69e3      	ldr	r3, [r4, #28]
 800727a:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 800727e:	429a      	cmp	r2, r3
 8007280:	d306      	bcc.n	8007290 <lwip_netconn_do_writemore+0x68>
 8007282:	4b75      	ldr	r3, [pc, #468]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 8007284:	f240 6277 	movw	r2, #1655	; 0x677
 8007288:	4979      	ldr	r1, [pc, #484]	; (8007470 <lwip_netconn_do_writemore+0x248>)
 800728a:	4875      	ldr	r0, [pc, #468]	; (8007460 <lwip_netconn_do_writemore+0x238>)
 800728c:	f008 f88e 	bl	800f3ac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007290:	69e3      	ldr	r3, [r4, #28]
 8007292:	899b      	ldrh	r3, [r3, #12]
 8007294:	b933      	cbnz	r3, 80072a4 <lwip_netconn_do_writemore+0x7c>
 8007296:	4b70      	ldr	r3, [pc, #448]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 8007298:	f240 6279 	movw	r2, #1657	; 0x679
 800729c:	4975      	ldr	r1, [pc, #468]	; (8007474 <lwip_netconn_do_writemore+0x24c>)
 800729e:	4870      	ldr	r0, [pc, #448]	; (8007460 <lwip_netconn_do_writemore+0x238>)
 80072a0:	f008 f884 	bl	800f3ac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80072a4:	69e3      	ldr	r3, [r4, #28]
 80072a6:	7e26      	ldrb	r6, [r4, #24]
 80072a8:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80072ac:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80072b0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8007460 <lwip_netconn_do_writemore+0x238>
 80072b4:	f008 0304 	and.w	r3, r8, #4
 80072b8:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80072ba:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 80072bc:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80072be:	688a      	ldr	r2, [r1, #8]
 80072c0:	690b      	ldr	r3, [r1, #16]
 80072c2:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 80072c4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80072c8:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80072cc:	6850      	ldr	r0, [r2, #4]
 80072ce:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 80072d2:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 80072d6:	bf2a      	itet	cs
 80072d8:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 80072dc:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 80072e0:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 80072e4:	42aa      	cmp	r2, r5
 80072e6:	d979      	bls.n	80073dc <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	d038      	beq.n	800735e <lwip_netconn_do_writemore+0x136>
          if (!len) {
 80072ec:	2d00      	cmp	r5, #0
 80072ee:	d138      	bne.n	8007362 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80072f0:	698b      	ldr	r3, [r1, #24]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	bf0c      	ite	eq
 80072f6:	f06f 0a06 	mvneq.w	sl, #6
 80072fa:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80072fe:	69e3      	ldr	r3, [r4, #28]
 8007300:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8007304:	429a      	cmp	r2, r3
 8007306:	d276      	bcs.n	80073f6 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007308:	6a23      	ldr	r3, [r4, #32]
 800730a:	b11b      	cbz	r3, 8007314 <lwip_netconn_do_writemore+0xec>
 800730c:	2200      	movs	r2, #0
 800730e:	2103      	movs	r1, #3
 8007310:	4620      	mov	r0, r4
 8007312:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007314:	7e23      	ldrb	r3, [r4, #24]
 8007316:	f043 0310 	orr.w	r3, r3, #16
 800731a:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800731c:	f1ba 0f00 	cmp.w	sl, #0
 8007320:	d17e      	bne.n	8007420 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8007322:	69e3      	ldr	r3, [r4, #28]
 8007324:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8007328:	429a      	cmp	r2, r3
 800732a:	d077      	beq.n	800741c <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800732c:	3e00      	subs	r6, #0
 800732e:	bf18      	it	ne
 8007330:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8007332:	6860      	ldr	r0, [r4, #4]
 8007334:	f007 f892 	bl	800e45c <tcp_output>
      if (out_err == ERR_RTE) {
 8007338:	3004      	adds	r0, #4
 800733a:	f040 8084 	bne.w	8007446 <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800733e:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007342:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8007344:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007346:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8007348:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 800734c:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 800734e:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007350:	2f00      	cmp	r7, #0
 8007352:	d07e      	beq.n	8007452 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007354:	300c      	adds	r0, #12
 8007356:	f007 ff87 	bl	800f268 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800735a:	4628      	mov	r0, r5
 800735c:	e06b      	b.n	8007436 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800735e:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007362:	442b      	add	r3, r5
 8007364:	4298      	cmp	r0, r3
 8007366:	d206      	bcs.n	8007376 <lwip_netconn_do_writemore+0x14e>
 8007368:	4b3b      	ldr	r3, [pc, #236]	; (8007458 <lwip_netconn_do_writemore+0x230>)
 800736a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800736e:	4942      	ldr	r1, [pc, #264]	; (8007478 <lwip_netconn_do_writemore+0x250>)
 8007370:	4658      	mov	r0, fp
 8007372:	f008 f81b 	bl	800f3ac <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800737a:	429d      	cmp	r5, r3
 800737c:	d102      	bne.n	8007384 <lwip_netconn_do_writemore+0x15c>
 800737e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8007382:	d207      	bcs.n	8007394 <lwip_netconn_do_writemore+0x16c>
 8007384:	fa1f f989 	uxth.w	r9, r9
 8007388:	45a9      	cmp	r9, r5
 800738a:	d129      	bne.n	80073e0 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800738c:	69e3      	ldr	r3, [r4, #28]
 800738e:	899b      	ldrh	r3, [r3, #12]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d925      	bls.n	80073e0 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007394:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8007398:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800739c:	4651      	mov	r1, sl
 800739e:	4643      	mov	r3, r8
 80073a0:	462a      	mov	r2, r5
 80073a2:	6860      	ldr	r0, [r4, #4]
 80073a4:	f006 fafc 	bl	800d9a0 <tcp_write>
      if (err == ERR_OK) {
 80073a8:	4682      	mov	sl, r0
 80073aa:	b9e0      	cbnz	r0, 80073e6 <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 80073ac:	69e3      	ldr	r3, [r4, #28]
 80073ae:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80073b0:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 80073b2:	442a      	add	r2, r5
 80073b4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80073b6:	691a      	ldr	r2, [r3, #16]
 80073b8:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80073ba:	684a      	ldr	r2, [r1, #4]
 80073bc:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 80073be:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80073c0:	d107      	bne.n	80073d2 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 80073c2:	899a      	ldrh	r2, [r3, #12]
 80073c4:	3a01      	subs	r2, #1
 80073c6:	b292      	uxth	r2, r2
 80073c8:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80073ca:	b112      	cbz	r2, 80073d2 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 80073cc:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 80073ce:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 80073d0:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 80073d2:	f1b9 0f00 	cmp.w	r9, #0
 80073d6:	f47f af70 	bne.w	80072ba <lwip_netconn_do_writemore+0x92>
 80073da:	e00a      	b.n	80073f2 <lwip_netconn_do_writemore+0x1ca>
 80073dc:	4615      	mov	r5, r2
 80073de:	e7c0      	b.n	8007362 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 80073e0:	f04f 0900 	mov.w	r9, #0
 80073e4:	e7da      	b.n	800739c <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d8a9      	bhi.n	8007342 <lwip_netconn_do_writemore+0x11a>
err_mem:
 80073ee:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d183      	bne.n	80072fe <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80073f6:	6863      	ldr	r3, [r4, #4]
 80073f8:	f640 3269 	movw	r2, #2921	; 0xb69
 80073fc:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8007400:	4291      	cmp	r1, r2
 8007402:	d903      	bls.n	800740c <lwip_netconn_do_writemore+0x1e4>
 8007404:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007408:	2b07      	cmp	r3, #7
 800740a:	d987      	bls.n	800731c <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800740c:	6a23      	ldr	r3, [r4, #32]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d084      	beq.n	800731c <lwip_netconn_do_writemore+0xf4>
 8007412:	2200      	movs	r2, #0
 8007414:	2103      	movs	r1, #3
 8007416:	4620      	mov	r0, r4
 8007418:	4798      	blx	r3
 800741a:	e77f      	b.n	800731c <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 800741c:	2601      	movs	r6, #1
 800741e:	e788      	b.n	8007332 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8007420:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007424:	d18d      	bne.n	8007342 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007426:	6860      	ldr	r0, [r4, #4]
 8007428:	f007 f818 	bl	800e45c <tcp_output>
      if (out_err == ERR_RTE) {
 800742c:	3004      	adds	r0, #4
 800742e:	d086      	beq.n	800733e <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8007430:	b91e      	cbnz	r6, 800743a <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8007432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800743a:	69e3      	ldr	r3, [r4, #28]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	b12b      	cbz	r3, 800744c <lwip_netconn_do_writemore+0x224>
 8007440:	f04f 0a00 	mov.w	sl, #0
 8007444:	e77d      	b.n	8007342 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8007446:	2e00      	cmp	r6, #0
 8007448:	d1fa      	bne.n	8007440 <lwip_netconn_do_writemore+0x218>
 800744a:	e7f2      	b.n	8007432 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800744c:	f06f 0a06 	mvn.w	sl, #6
 8007450:	e777      	b.n	8007342 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 8007452:	4638      	mov	r0, r7
 8007454:	e7ef      	b.n	8007436 <lwip_netconn_do_writemore+0x20e>
 8007456:	bf00      	nop
 8007458:	08014902 	.word	0x08014902
 800745c:	08014a4f 	.word	0x08014a4f
 8007460:	080144fe 	.word	0x080144fe
 8007464:	08014a5c 	.word	0x08014a5c
 8007468:	08014a79 	.word	0x08014a79
 800746c:	08014a93 	.word	0x08014a93
 8007470:	08014aa9 	.word	0x08014aa9
 8007474:	08014ae8 	.word	0x08014ae8
 8007478:	08014b10 	.word	0x08014b10

0800747c <lwip_netconn_do_close_internal>:
{
 800747c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007482:	4604      	mov	r4, r0
 8007484:	b930      	cbnz	r0, 8007494 <lwip_netconn_do_close_internal+0x18>
 8007486:	4b6c      	ldr	r3, [pc, #432]	; (8007638 <lwip_netconn_do_close_internal+0x1bc>)
 8007488:	f240 32a2 	movw	r2, #930	; 0x3a2
 800748c:	496b      	ldr	r1, [pc, #428]	; (800763c <lwip_netconn_do_close_internal+0x1c0>)
 800748e:	486c      	ldr	r0, [pc, #432]	; (8007640 <lwip_netconn_do_close_internal+0x1c4>)
 8007490:	f007 ff8c 	bl	800f3ac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007494:	7823      	ldrb	r3, [r4, #0]
 8007496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800749a:	2b10      	cmp	r3, #16
 800749c:	d006      	beq.n	80074ac <lwip_netconn_do_close_internal+0x30>
 800749e:	4b66      	ldr	r3, [pc, #408]	; (8007638 <lwip_netconn_do_close_internal+0x1bc>)
 80074a0:	f240 32a3 	movw	r2, #931	; 0x3a3
 80074a4:	4967      	ldr	r1, [pc, #412]	; (8007644 <lwip_netconn_do_close_internal+0x1c8>)
 80074a6:	4866      	ldr	r0, [pc, #408]	; (8007640 <lwip_netconn_do_close_internal+0x1c4>)
 80074a8:	f007 ff80 	bl	800f3ac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80074ac:	7863      	ldrb	r3, [r4, #1]
 80074ae:	2b04      	cmp	r3, #4
 80074b0:	d006      	beq.n	80074c0 <lwip_netconn_do_close_internal+0x44>
 80074b2:	4b61      	ldr	r3, [pc, #388]	; (8007638 <lwip_netconn_do_close_internal+0x1bc>)
 80074b4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80074b8:	4963      	ldr	r1, [pc, #396]	; (8007648 <lwip_netconn_do_close_internal+0x1cc>)
 80074ba:	4861      	ldr	r0, [pc, #388]	; (8007640 <lwip_netconn_do_close_internal+0x1c4>)
 80074bc:	f007 ff76 	bl	800f3ac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80074c0:	6863      	ldr	r3, [r4, #4]
 80074c2:	b933      	cbnz	r3, 80074d2 <lwip_netconn_do_close_internal+0x56>
 80074c4:	4b5c      	ldr	r3, [pc, #368]	; (8007638 <lwip_netconn_do_close_internal+0x1bc>)
 80074c6:	f240 32a5 	movw	r2, #933	; 0x3a5
 80074ca:	4960      	ldr	r1, [pc, #384]	; (800764c <lwip_netconn_do_close_internal+0x1d0>)
 80074cc:	485c      	ldr	r0, [pc, #368]	; (8007640 <lwip_netconn_do_close_internal+0x1c4>)
 80074ce:	f007 ff6d 	bl	800f3ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80074d2:	69e3      	ldr	r3, [r4, #28]
 80074d4:	b933      	cbnz	r3, 80074e4 <lwip_netconn_do_close_internal+0x68>
 80074d6:	4b58      	ldr	r3, [pc, #352]	; (8007638 <lwip_netconn_do_close_internal+0x1bc>)
 80074d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80074dc:	495c      	ldr	r1, [pc, #368]	; (8007650 <lwip_netconn_do_close_internal+0x1d4>)
 80074de:	4858      	ldr	r0, [pc, #352]	; (8007640 <lwip_netconn_do_close_internal+0x1c4>)
 80074e0:	f007 ff64 	bl	800f3ac <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80074e4:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 80074e6:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80074e8:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80074ea:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80074ec:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80074f0:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80074f4:	d00f      	beq.n	8007516 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 80074f6:	f1ba 0f00 	cmp.w	sl, #0
 80074fa:	d005      	beq.n	8007508 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 80074fc:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80074fe:	1f5a      	subs	r2, r3, #5
 8007500:	2a01      	cmp	r2, #1
 8007502:	d908      	bls.n	8007516 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8007504:	2b08      	cmp	r3, #8
 8007506:	d006      	beq.n	8007516 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007508:	f1b8 0f00 	cmp.w	r8, #0
 800750c:	d016      	beq.n	800753c <lwip_netconn_do_close_internal+0xc0>
 800750e:	8b6f      	ldrh	r7, [r5, #26]
 8007510:	f017 0710 	ands.w	r7, r7, #16
 8007514:	d004      	beq.n	8007520 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8007516:	2701      	movs	r7, #1
 8007518:	2100      	movs	r1, #0
 800751a:	4628      	mov	r0, r5
 800751c:	f004 fa40 	bl	800b9a0 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8007520:	7d2b      	ldrb	r3, [r5, #20]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d10c      	bne.n	8007540 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8007526:	2100      	movs	r1, #0
 8007528:	4628      	mov	r0, r5
 800752a:	f004 fa83 	bl	800ba34 <tcp_accept>
  if (shut_close) {
 800752e:	bb27      	cbnz	r7, 800757a <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007530:	4642      	mov	r2, r8
 8007532:	4651      	mov	r1, sl
 8007534:	4628      	mov	r0, r5
 8007536:	f004 fea1 	bl	800c27c <tcp_shutdown>
 800753a:	e021      	b.n	8007580 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 800753c:	4647      	mov	r7, r8
 800753e:	e7ef      	b.n	8007520 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8007540:	f1ba 0f00 	cmp.w	sl, #0
 8007544:	d007      	beq.n	8007556 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8007546:	2100      	movs	r1, #0
 8007548:	4628      	mov	r0, r5
 800754a:	f004 fa2d 	bl	800b9a8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800754e:	2100      	movs	r1, #0
 8007550:	4628      	mov	r0, r5
 8007552:	f004 fa6f 	bl	800ba34 <tcp_accept>
    if (shut_tx) {
 8007556:	f1b8 0f00 	cmp.w	r8, #0
 800755a:	d003      	beq.n	8007564 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 800755c:	2100      	movs	r1, #0
 800755e:	4628      	mov	r0, r5
 8007560:	f004 fa3a 	bl	800b9d8 <tcp_sent>
    if (shut_close) {
 8007564:	2f00      	cmp	r7, #0
 8007566:	d0e3      	beq.n	8007530 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8007568:	2200      	movs	r2, #0
 800756a:	4628      	mov	r0, r5
 800756c:	4611      	mov	r1, r2
 800756e:	f004 fa67 	bl	800ba40 <tcp_poll>
      tcp_err(tpcb, NULL);
 8007572:	2100      	movs	r1, #0
 8007574:	4628      	mov	r0, r5
 8007576:	f004 fa45 	bl	800ba04 <tcp_err>
      err = tcp_close(tpcb);
 800757a:	4628      	mov	r0, r5
 800757c:	f004 fdb0 	bl	800c0e0 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007580:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 8007582:	b160      	cbz	r0, 800759e <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	d10a      	bne.n	800759e <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007588:	69e3      	ldr	r3, [r4, #28]
 800758a:	f893 b009 	ldrb.w	fp, [r3, #9]
 800758e:	f1bb 0f00 	cmp.w	fp, #0
 8007592:	d130      	bne.n	80075f6 <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 8007594:	b11f      	cbz	r7, 800759e <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 8007596:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8007598:	4628      	mov	r0, r5
 800759a:	f004 ff25 	bl	800c3e8 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800759e:	69e3      	ldr	r3, [r4, #28]
 80075a0:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80075a2:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 80075a8:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80075aa:	b9ce      	cbnz	r6, 80075e0 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 80075ac:	b137      	cbz	r7, 80075bc <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80075ae:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 80075b0:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80075b2:	b11b      	cbz	r3, 80075bc <lwip_netconn_do_close_internal+0x140>
 80075b4:	4632      	mov	r2, r6
 80075b6:	2104      	movs	r1, #4
 80075b8:	4620      	mov	r0, r4
 80075ba:	4798      	blx	r3
      if (shut_rx) {
 80075bc:	f1ba 0f00 	cmp.w	sl, #0
 80075c0:	d005      	beq.n	80075ce <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80075c2:	6a23      	ldr	r3, [r4, #32]
 80075c4:	b11b      	cbz	r3, 80075ce <lwip_netconn_do_close_internal+0x152>
 80075c6:	2200      	movs	r2, #0
 80075c8:	4620      	mov	r0, r4
 80075ca:	4611      	mov	r1, r2
 80075cc:	4798      	blx	r3
      if (shut_tx) {
 80075ce:	f1b8 0f00 	cmp.w	r8, #0
 80075d2:	d005      	beq.n	80075e0 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80075d4:	6a23      	ldr	r3, [r4, #32]
 80075d6:	b11b      	cbz	r3, 80075e0 <lwip_netconn_do_close_internal+0x164>
 80075d8:	2200      	movs	r2, #0
 80075da:	2102      	movs	r1, #2
 80075dc:	4620      	mov	r0, r4
 80075de:	4798      	blx	r3
    if (delayed)
 80075e0:	f1b9 0f00 	cmp.w	r9, #0
 80075e4:	d026      	beq.n	8007634 <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 80075e6:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 80075e8:	f105 000c 	add.w	r0, r5, #12
 80075ec:	f007 fe3c 	bl	800f268 <sys_sem_signal>
}
 80075f0:	4630      	mov	r0, r6
 80075f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80075f6:	7d2b      	ldrb	r3, [r5, #20]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d106      	bne.n	800760a <lwip_netconn_do_close_internal+0x18e>
 80075fc:	4b0e      	ldr	r3, [pc, #56]	; (8007638 <lwip_netconn_do_close_internal+0x1bc>)
 80075fe:	f240 4241 	movw	r2, #1089	; 0x441
 8007602:	4914      	ldr	r1, [pc, #80]	; (8007654 <lwip_netconn_do_close_internal+0x1d8>)
 8007604:	480e      	ldr	r0, [pc, #56]	; (8007640 <lwip_netconn_do_close_internal+0x1c4>)
 8007606:	f007 fed1 	bl	800f3ac <iprintf>
    if (shut_tx) {
 800760a:	f1b8 0f00 	cmp.w	r8, #0
 800760e:	d003      	beq.n	8007618 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8007610:	4911      	ldr	r1, [pc, #68]	; (8007658 <lwip_netconn_do_close_internal+0x1dc>)
 8007612:	4628      	mov	r0, r5
 8007614:	f004 f9e0 	bl	800b9d8 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8007618:	2201      	movs	r2, #1
 800761a:	4628      	mov	r0, r5
 800761c:	490f      	ldr	r1, [pc, #60]	; (800765c <lwip_netconn_do_close_internal+0x1e0>)
 800761e:	f004 fa0f 	bl	800ba40 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007622:	4628      	mov	r0, r5
 8007624:	490e      	ldr	r1, [pc, #56]	; (8007660 <lwip_netconn_do_close_internal+0x1e4>)
 8007626:	f004 f9ed 	bl	800ba04 <tcp_err>
    tcp_arg(tpcb, conn);
 800762a:	4621      	mov	r1, r4
 800762c:	4628      	mov	r0, r5
 800762e:	f004 f9b7 	bl	800b9a0 <tcp_arg>
  return err;
 8007632:	e7dd      	b.n	80075f0 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 8007634:	464e      	mov	r6, r9
 8007636:	e7db      	b.n	80075f0 <lwip_netconn_do_close_internal+0x174>
 8007638:	08014902 	.word	0x08014902
 800763c:	080147e8 	.word	0x080147e8
 8007640:	080144fe 	.word	0x080144fe
 8007644:	08014b3b 	.word	0x08014b3b
 8007648:	08014b59 	.word	0x08014b59
 800764c:	08014b7d 	.word	0x08014b7d
 8007650:	08014a79 	.word	0x08014a79
 8007654:	08014b90 	.word	0x08014b90
 8007658:	080076e1 	.word	0x080076e1
 800765c:	08007665 	.word	0x08007665
 8007660:	08007821 	.word	0x08007821

08007664 <poll_tcp>:
{
 8007664:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007666:	4604      	mov	r4, r0
 8007668:	b930      	cbnz	r0, 8007678 <poll_tcp+0x14>
 800766a:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <poll_tcp+0x70>)
 800766c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007670:	4919      	ldr	r1, [pc, #100]	; (80076d8 <poll_tcp+0x74>)
 8007672:	481a      	ldr	r0, [pc, #104]	; (80076dc <poll_tcp+0x78>)
 8007674:	f007 fe9a 	bl	800f3ac <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8007678:	7861      	ldrb	r1, [r4, #1]
 800767a:	2901      	cmp	r1, #1
 800767c:	d11c      	bne.n	80076b8 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800767e:	4620      	mov	r0, r4
 8007680:	f7ff fdd2 	bl	8007228 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007684:	7e23      	ldrb	r3, [r4, #24]
 8007686:	06da      	lsls	r2, r3, #27
 8007688:	d514      	bpl.n	80076b4 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800768a:	6862      	ldr	r2, [r4, #4]
 800768c:	b192      	cbz	r2, 80076b4 <poll_tcp+0x50>
 800768e:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8007692:	f640 3169 	movw	r1, #2921	; 0xb69
 8007696:	4288      	cmp	r0, r1
 8007698:	d90c      	bls.n	80076b4 <poll_tcp+0x50>
 800769a:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 800769e:	2a07      	cmp	r2, #7
 80076a0:	d808      	bhi.n	80076b4 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80076a2:	f023 0310 	bic.w	r3, r3, #16
 80076a6:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80076a8:	6a23      	ldr	r3, [r4, #32]
 80076aa:	b11b      	cbz	r3, 80076b4 <poll_tcp+0x50>
 80076ac:	2200      	movs	r2, #0
 80076ae:	2102      	movs	r1, #2
 80076b0:	4620      	mov	r0, r4
 80076b2:	4798      	blx	r3
}
 80076b4:	2000      	movs	r0, #0
 80076b6:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 80076b8:	2904      	cmp	r1, #4
 80076ba:	d1e3      	bne.n	8007684 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80076bc:	69e2      	ldr	r2, [r4, #28]
 80076be:	b11a      	cbz	r2, 80076c8 <poll_tcp+0x64>
 80076c0:	7a53      	ldrb	r3, [r2, #9]
 80076c2:	b10b      	cbz	r3, 80076c8 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 80076c4:	3b01      	subs	r3, #1
 80076c6:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80076c8:	2101      	movs	r1, #1
 80076ca:	4620      	mov	r0, r4
 80076cc:	f7ff fed6 	bl	800747c <lwip_netconn_do_close_internal>
 80076d0:	e7d8      	b.n	8007684 <poll_tcp+0x20>
 80076d2:	bf00      	nop
 80076d4:	08014902 	.word	0x08014902
 80076d8:	08014a4f 	.word	0x08014a4f
 80076dc:	080144fe 	.word	0x080144fe

080076e0 <sent_tcp>:
{
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80076e4:	4604      	mov	r4, r0
 80076e6:	b970      	cbnz	r0, 8007706 <sent_tcp+0x26>
 80076e8:	4b16      	ldr	r3, [pc, #88]	; (8007744 <sent_tcp+0x64>)
 80076ea:	f240 1293 	movw	r2, #403	; 0x193
 80076ee:	4916      	ldr	r1, [pc, #88]	; (8007748 <sent_tcp+0x68>)
 80076f0:	4816      	ldr	r0, [pc, #88]	; (800774c <sent_tcp+0x6c>)
 80076f2:	f007 fe5b 	bl	800f3ac <iprintf>
}
 80076f6:	2000      	movs	r0, #0
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80076fa:	2904      	cmp	r1, #4
 80076fc:	d108      	bne.n	8007710 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80076fe:	2101      	movs	r1, #1
 8007700:	f7ff febc 	bl	800747c <lwip_netconn_do_close_internal>
 8007704:	e004      	b.n	8007710 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8007706:	7841      	ldrb	r1, [r0, #1]
 8007708:	2901      	cmp	r1, #1
 800770a:	d1f6      	bne.n	80076fa <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800770c:	f7ff fd8c 	bl	8007228 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007710:	6863      	ldr	r3, [r4, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0ef      	beq.n	80076f6 <sent_tcp+0x16>
 8007716:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 800771a:	f640 3269 	movw	r2, #2921	; 0xb69
 800771e:	4291      	cmp	r1, r2
 8007720:	d9e9      	bls.n	80076f6 <sent_tcp+0x16>
 8007722:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007726:	2b07      	cmp	r3, #7
 8007728:	d8e5      	bhi.n	80076f6 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800772a:	7e23      	ldrb	r3, [r4, #24]
 800772c:	f023 0310 	bic.w	r3, r3, #16
 8007730:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007732:	6a23      	ldr	r3, [r4, #32]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0de      	beq.n	80076f6 <sent_tcp+0x16>
 8007738:	462a      	mov	r2, r5
 800773a:	2102      	movs	r1, #2
 800773c:	4620      	mov	r0, r4
 800773e:	4798      	blx	r3
  return ERR_OK;
 8007740:	e7d9      	b.n	80076f6 <sent_tcp+0x16>
 8007742:	bf00      	nop
 8007744:	08014902 	.word	0x08014902
 8007748:	08014a4f 	.word	0x08014a4f
 800774c:	080144fe 	.word	0x080144fe

08007750 <recv_tcp>:
{
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	4606      	mov	r6, r0
 8007756:	4615      	mov	r5, r2
 8007758:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800775a:	460f      	mov	r7, r1
 800775c:	b931      	cbnz	r1, 800776c <recv_tcp+0x1c>
 800775e:	4b29      	ldr	r3, [pc, #164]	; (8007804 <recv_tcp+0xb4>)
 8007760:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007764:	4928      	ldr	r1, [pc, #160]	; (8007808 <recv_tcp+0xb8>)
 8007766:	4829      	ldr	r0, [pc, #164]	; (800780c <recv_tcp+0xbc>)
 8007768:	f007 fe20 	bl	800f3ac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800776c:	bb4e      	cbnz	r6, 80077c2 <recv_tcp+0x72>
 800776e:	4b25      	ldr	r3, [pc, #148]	; (8007804 <recv_tcp+0xb4>)
 8007770:	f240 122d 	movw	r2, #301	; 0x12d
 8007774:	4926      	ldr	r1, [pc, #152]	; (8007810 <recv_tcp+0xc0>)
 8007776:	4825      	ldr	r0, [pc, #148]	; (800780c <recv_tcp+0xbc>)
 8007778:	f007 fe18 	bl	800f3ac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800777c:	bb14      	cbnz	r4, 80077c4 <recv_tcp+0x74>
    return ERR_VAL;
 800777e:	f06f 0405 	mvn.w	r4, #5
}
 8007782:	4620      	mov	r0, r4
 8007784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8007788:	4638      	mov	r0, r7
 800778a:	8929      	ldrh	r1, [r5, #8]
 800778c:	f004 f8b4 	bl	800b8f8 <tcp_recved>
      pbuf_free(p);
 8007790:	4628      	mov	r0, r5
 8007792:	f003 fcbb 	bl	800b10c <pbuf_free>
 8007796:	e7f4      	b.n	8007782 <recv_tcp+0x32>
  if (p != NULL) {
 8007798:	b16d      	cbz	r5, 80077b6 <recv_tcp+0x66>
    len = p->tot_len;
 800779a:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800779c:	4629      	mov	r1, r5
 800779e:	4640      	mov	r0, r8
 80077a0:	f007 fd06 	bl	800f1b0 <sys_mbox_trypost>
 80077a4:	4604      	mov	r4, r0
 80077a6:	b948      	cbnz	r0, 80077bc <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80077a8:	6a33      	ldr	r3, [r6, #32]
 80077aa:	b343      	cbz	r3, 80077fe <recv_tcp+0xae>
 80077ac:	4601      	mov	r1, r0
 80077ae:	463a      	mov	r2, r7
 80077b0:	4630      	mov	r0, r6
 80077b2:	4798      	blx	r3
 80077b4:	e7e5      	b.n	8007782 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80077b6:	4d17      	ldr	r5, [pc, #92]	; (8007814 <recv_tcp+0xc4>)
    len = 0;
 80077b8:	2700      	movs	r7, #0
 80077ba:	e7ef      	b.n	800779c <recv_tcp+0x4c>
    return ERR_MEM;
 80077bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077c0:	e7df      	b.n	8007782 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80077c2:	b144      	cbz	r4, 80077d6 <recv_tcp+0x86>
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <recv_tcp+0xb4>)
 80077c6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80077ca:	4913      	ldr	r1, [pc, #76]	; (8007818 <recv_tcp+0xc8>)
 80077cc:	480f      	ldr	r0, [pc, #60]	; (800780c <recv_tcp+0xbc>)
 80077ce:	f007 fded 	bl	800f3ac <iprintf>
  if (conn == NULL) {
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	d0d3      	beq.n	800777e <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80077d6:	6873      	ldr	r3, [r6, #4]
 80077d8:	42bb      	cmp	r3, r7
 80077da:	d006      	beq.n	80077ea <recv_tcp+0x9a>
 80077dc:	4b09      	ldr	r3, [pc, #36]	; (8007804 <recv_tcp+0xb4>)
 80077de:	f240 1235 	movw	r2, #309	; 0x135
 80077e2:	490e      	ldr	r1, [pc, #56]	; (800781c <recv_tcp+0xcc>)
 80077e4:	4809      	ldr	r0, [pc, #36]	; (800780c <recv_tcp+0xbc>)
 80077e6:	f007 fde1 	bl	800f3ac <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80077ea:	f106 0810 	add.w	r8, r6, #16
 80077ee:	4640      	mov	r0, r8
 80077f0:	f007 fd1b 	bl	800f22a <sys_mbox_valid>
 80077f4:	4604      	mov	r4, r0
 80077f6:	2800      	cmp	r0, #0
 80077f8:	d1ce      	bne.n	8007798 <recv_tcp+0x48>
    if (p != NULL) {
 80077fa:	2d00      	cmp	r5, #0
 80077fc:	d1c4      	bne.n	8007788 <recv_tcp+0x38>
    return ERR_OK;
 80077fe:	2400      	movs	r4, #0
 8007800:	e7bf      	b.n	8007782 <recv_tcp+0x32>
 8007802:	bf00      	nop
 8007804:	08014902 	.word	0x08014902
 8007808:	08014bb3 	.word	0x08014bb3
 800780c:	080144fe 	.word	0x080144fe
 8007810:	08014bd5 	.word	0x08014bd5
 8007814:	080142dc 	.word	0x080142dc
 8007818:	08014bf4 	.word	0x08014bf4
 800781c:	08014c0c 	.word	0x08014c0c

08007820 <err_tcp>:
{
 8007820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007824:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007826:	4604      	mov	r4, r0
 8007828:	b930      	cbnz	r0, 8007838 <err_tcp+0x18>
 800782a:	4b45      	ldr	r3, [pc, #276]	; (8007940 <err_tcp+0x120>)
 800782c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007830:	4944      	ldr	r1, [pc, #272]	; (8007944 <err_tcp+0x124>)
 8007832:	4845      	ldr	r0, [pc, #276]	; (8007948 <err_tcp+0x128>)
 8007834:	f007 fdba 	bl	800f3ac <iprintf>
  SYS_ARCH_PROTECT(lev);
 8007838:	f007 fd56 	bl	800f2e8 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800783c:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 800783e:	2600      	movs	r6, #0
  old_state = conn->state;
 8007840:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007842:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8007846:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8007848:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800784a:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 800784c:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 800784e:	f007 fd57 	bl	800f300 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007852:	6a23      	ldr	r3, [r4, #32]
 8007854:	b11b      	cbz	r3, 800785e <err_tcp+0x3e>
 8007856:	4632      	mov	r2, r6
 8007858:	2104      	movs	r1, #4
 800785a:	4620      	mov	r0, r4
 800785c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800785e:	6a23      	ldr	r3, [r4, #32]
 8007860:	b11b      	cbz	r3, 800786a <err_tcp+0x4a>
 8007862:	2200      	movs	r2, #0
 8007864:	4620      	mov	r0, r4
 8007866:	4611      	mov	r1, r2
 8007868:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800786a:	6a23      	ldr	r3, [r4, #32]
 800786c:	b11b      	cbz	r3, 8007876 <err_tcp+0x56>
 800786e:	2200      	movs	r2, #0
 8007870:	2102      	movs	r1, #2
 8007872:	4620      	mov	r0, r4
 8007874:	4798      	blx	r3
  switch (err) {
 8007876:	f105 030f 	add.w	r3, r5, #15
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d846      	bhi.n	800790e <err_tcp+0xee>
 8007880:	4a32      	ldr	r2, [pc, #200]	; (800794c <err_tcp+0x12c>)
 8007882:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007886:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007888:	f104 0810 	add.w	r8, r4, #16
 800788c:	4640      	mov	r0, r8
 800788e:	f007 fccc 	bl	800f22a <sys_mbox_valid>
 8007892:	b118      	cbz	r0, 800789c <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007894:	4631      	mov	r1, r6
 8007896:	4640      	mov	r0, r8
 8007898:	f007 fc8a 	bl	800f1b0 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800789c:	f104 0814 	add.w	r8, r4, #20
 80078a0:	4640      	mov	r0, r8
 80078a2:	f007 fcc2 	bl	800f22a <sys_mbox_valid>
 80078a6:	b118      	cbz	r0, 80078b0 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80078a8:	4631      	mov	r1, r6
 80078aa:	4640      	mov	r0, r8
 80078ac:	f007 fc80 	bl	800f1b0 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80078b0:	2f01      	cmp	r7, #1
 80078b2:	d002      	beq.n	80078ba <err_tcp+0x9a>
 80078b4:	1efb      	subs	r3, r7, #3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d834      	bhi.n	8007924 <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80078ba:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80078bc:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 80078c0:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 80078c2:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 80078c4:	d439      	bmi.n	800793a <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80078c6:	69e3      	ldr	r3, [r4, #28]
 80078c8:	b933      	cbnz	r3, 80078d8 <err_tcp+0xb8>
 80078ca:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <err_tcp+0x120>)
 80078cc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80078d0:	491f      	ldr	r1, [pc, #124]	; (8007950 <err_tcp+0x130>)
 80078d2:	481d      	ldr	r0, [pc, #116]	; (8007948 <err_tcp+0x128>)
 80078d4:	f007 fd6a 	bl	800f3ac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80078d8:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 80078da:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 80078dc:	bf14      	ite	ne
 80078de:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 80078e0:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078e2:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 80078e4:	bf08      	it	eq
 80078e6:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80078e8:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80078ea:	4628      	mov	r0, r5
 80078ec:	f007 fcc2 	bl	800f274 <sys_sem_valid>
 80078f0:	b930      	cbnz	r0, 8007900 <err_tcp+0xe0>
 80078f2:	4b13      	ldr	r3, [pc, #76]	; (8007940 <err_tcp+0x120>)
 80078f4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80078f8:	4916      	ldr	r1, [pc, #88]	; (8007954 <err_tcp+0x134>)
 80078fa:	4813      	ldr	r0, [pc, #76]	; (8007948 <err_tcp+0x128>)
 80078fc:	f007 fd56 	bl	800f3ac <iprintf>
      conn->current_msg = NULL;
 8007900:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8007902:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8007904:	61e3      	str	r3, [r4, #28]
}
 8007906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 800790a:	f007 bcad 	b.w	800f268 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800790e:	b13d      	cbz	r5, 8007920 <err_tcp+0x100>
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <err_tcp+0x120>)
 8007912:	227d      	movs	r2, #125	; 0x7d
 8007914:	4910      	ldr	r1, [pc, #64]	; (8007958 <err_tcp+0x138>)
 8007916:	2600      	movs	r6, #0
 8007918:	480b      	ldr	r0, [pc, #44]	; (8007948 <err_tcp+0x128>)
 800791a:	f007 fd47 	bl	800f3ac <iprintf>
 800791e:	e7b3      	b.n	8007888 <err_tcp+0x68>
      return NULL;
 8007920:	462e      	mov	r6, r5
 8007922:	e7b1      	b.n	8007888 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007924:	69e3      	ldr	r3, [r4, #28]
 8007926:	b143      	cbz	r3, 800793a <err_tcp+0x11a>
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <err_tcp+0x120>)
 800792a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800792e:	490b      	ldr	r1, [pc, #44]	; (800795c <err_tcp+0x13c>)
 8007930:	4805      	ldr	r0, [pc, #20]	; (8007948 <err_tcp+0x128>)
}
 8007932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007936:	f007 bd39 	b.w	800f3ac <iprintf>
}
 800793a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800793e:	bf00      	nop
 8007940:	08014902 	.word	0x08014902
 8007944:	08014a4f 	.word	0x08014a4f
 8007948:	080144fe 	.word	0x080144fe
 800794c:	080142dc 	.word	0x080142dc
 8007950:	08014a79 	.word	0x08014a79
 8007954:	08014c3a 	.word	0x08014c3a
 8007958:	08014c2a 	.word	0x08014c2a
 800795c:	08014c53 	.word	0x08014c53

08007960 <lwip_netconn_is_err_msg>:
{
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8007964:	460c      	mov	r4, r1
 8007966:	b929      	cbnz	r1, 8007974 <lwip_netconn_is_err_msg+0x14>
 8007968:	4b0d      	ldr	r3, [pc, #52]	; (80079a0 <lwip_netconn_is_err_msg+0x40>)
 800796a:	2285      	movs	r2, #133	; 0x85
 800796c:	490d      	ldr	r1, [pc, #52]	; (80079a4 <lwip_netconn_is_err_msg+0x44>)
 800796e:	480e      	ldr	r0, [pc, #56]	; (80079a8 <lwip_netconn_is_err_msg+0x48>)
 8007970:	f007 fd1c 	bl	800f3ac <iprintf>
  if (msg == &netconn_aborted) {
 8007974:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <lwip_netconn_is_err_msg+0x4c>)
 8007976:	f103 0210 	add.w	r2, r3, #16
 800797a:	4295      	cmp	r5, r2
 800797c:	d103      	bne.n	8007986 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 800797e:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8007980:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8007982:	7023      	strb	r3, [r4, #0]
}
 8007984:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8007986:	f103 0211 	add.w	r2, r3, #17
 800798a:	4295      	cmp	r5, r2
 800798c:	d101      	bne.n	8007992 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 800798e:	23f2      	movs	r3, #242	; 0xf2
 8007990:	e7f6      	b.n	8007980 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8007992:	429d      	cmp	r5, r3
 8007994:	d101      	bne.n	800799a <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8007996:	23f1      	movs	r3, #241	; 0xf1
 8007998:	e7f2      	b.n	8007980 <lwip_netconn_is_err_msg+0x20>
  return 0;
 800799a:	2000      	movs	r0, #0
 800799c:	e7f2      	b.n	8007984 <lwip_netconn_is_err_msg+0x24>
 800799e:	bf00      	nop
 80079a0:	08014902 	.word	0x08014902
 80079a4:	08014c6d 	.word	0x08014c6d
 80079a8:	080144fe 	.word	0x080144fe
 80079ac:	080142dc 	.word	0x080142dc

080079b0 <lwip_netconn_do_newconn>:
{
 80079b0:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 80079b2:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 80079b4:	6805      	ldr	r5, [r0, #0]
{
 80079b6:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80079b8:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80079ba:	6868      	ldr	r0, [r5, #4]
 80079bc:	bb28      	cbnz	r0, 8007a0a <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80079be:	782b      	ldrb	r3, [r5, #0]
 80079c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079c4:	2b10      	cmp	r3, #16
 80079c6:	d014      	beq.n	80079f2 <lwip_netconn_do_newconn+0x42>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d11c      	bne.n	8007a06 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80079cc:	f007 fb36 	bl	800f03c <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 80079d0:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80079d2:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 80079d4:	6850      	ldr	r0, [r2, #4]
 80079d6:	b150      	cbz	r0, 80079ee <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80079d8:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80079da:	490c      	ldr	r1, [pc, #48]	; (8007a0c <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80079dc:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80079de:	bf04      	itt	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80079e4:	f007 fae4 	bl	800efb0 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	b96b      	cbnz	r3, 8007a0a <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 80079ee:	23ff      	movs	r3, #255	; 0xff
 80079f0:	e00a      	b.n	8007a08 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80079f2:	f004 fddd 	bl	800c5b0 <tcp_new_ip_type>
 80079f6:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80079f8:	6820      	ldr	r0, [r4, #0]
 80079fa:	6843      	ldr	r3, [r0, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0f6      	beq.n	80079ee <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8007a00:	f7ff fbf0 	bl	80071e4 <setup_tcp>
 8007a04:	e7f0      	b.n	80079e8 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8007a06:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8007a08:	7123      	strb	r3, [r4, #4]
}
 8007a0a:	bd38      	pop	{r3, r4, r5, pc}
 8007a0c:	08007129 	.word	0x08007129

08007a10 <netconn_alloc>:
{
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007a14:	2007      	movs	r0, #7
{
 8007a16:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007a18:	f003 f8e8 	bl	800abec <memp_malloc>
  if (conn == NULL) {
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	b388      	cbz	r0, 8007a84 <netconn_alloc+0x74>
  conn->type = t;
 8007a20:	7005      	strb	r5, [r0, #0]
 8007a22:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8007a26:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8007a28:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8007a2a:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8007a2c:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8007a2e:	d00e      	beq.n	8007a4e <netconn_alloc+0x3e>
 8007a30:	2d20      	cmp	r5, #32
 8007a32:	d00c      	beq.n	8007a4e <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007a34:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <netconn_alloc+0x78>)
 8007a36:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007a3a:	4914      	ldr	r1, [pc, #80]	; (8007a8c <netconn_alloc+0x7c>)
 8007a3c:	4814      	ldr	r0, [pc, #80]	; (8007a90 <netconn_alloc+0x80>)
 8007a3e:	f007 fcb5 	bl	800f3ac <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007a42:	4621      	mov	r1, r4
 8007a44:	2007      	movs	r0, #7
  return NULL;
 8007a46:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8007a48:	f003 f900 	bl	800ac4c <memp_free>
  return NULL;
 8007a4c:	e01a      	b.n	8007a84 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007a4e:	f104 0710 	add.w	r7, r4, #16
 8007a52:	2106      	movs	r1, #6
 8007a54:	4638      	mov	r0, r7
 8007a56:	f007 fb91 	bl	800f17c <sys_mbox_new>
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d1f0      	bne.n	8007a42 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007a60:	f104 000c 	add.w	r0, r4, #12
 8007a64:	f007 fbe9 	bl	800f23a <sys_sem_new>
 8007a68:	4605      	mov	r5, r0
 8007a6a:	b118      	cbz	r0, 8007a74 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	f007 fb95 	bl	800f19c <sys_mbox_free>
    goto free_and_return;
 8007a72:	e7e6      	b.n	8007a42 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007a74:	f104 0014 	add.w	r0, r4, #20
 8007a78:	f007 fbdc 	bl	800f234 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8007a7c:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8007a7e:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8007a80:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8007a84:	4620      	mov	r0, r4
 8007a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a88:	08014902 	.word	0x08014902
 8007a8c:	08014c79 	.word	0x08014c79
 8007a90:	080144fe 	.word	0x080144fe

08007a94 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007a94:	6843      	ldr	r3, [r0, #4]
{
 8007a96:	b513      	push	{r0, r1, r4, lr}
 8007a98:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007a9a:	b133      	cbz	r3, 8007aaa <netconn_free+0x16>
 8007a9c:	4b16      	ldr	r3, [pc, #88]	; (8007af8 <netconn_free+0x64>)
 8007a9e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007aa2:	4916      	ldr	r1, [pc, #88]	; (8007afc <netconn_free+0x68>)
 8007aa4:	4816      	ldr	r0, [pc, #88]	; (8007b00 <netconn_free+0x6c>)
 8007aa6:	f007 fc81 	bl	800f3ac <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007aaa:	f104 0010 	add.w	r0, r4, #16
 8007aae:	f007 fbbc 	bl	800f22a <sys_mbox_valid>
 8007ab2:	b130      	cbz	r0, 8007ac2 <netconn_free+0x2e>
 8007ab4:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <netconn_free+0x64>)
 8007ab6:	f240 3223 	movw	r2, #803	; 0x323
 8007aba:	4912      	ldr	r1, [pc, #72]	; (8007b04 <netconn_free+0x70>)
 8007abc:	4810      	ldr	r0, [pc, #64]	; (8007b00 <netconn_free+0x6c>)
 8007abe:	f007 fc75 	bl	800f3ac <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007ac2:	f104 0014 	add.w	r0, r4, #20
 8007ac6:	f007 fbb0 	bl	800f22a <sys_mbox_valid>
 8007aca:	b130      	cbz	r0, 8007ada <netconn_free+0x46>
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <netconn_free+0x64>)
 8007ace:	f240 3226 	movw	r2, #806	; 0x326
 8007ad2:	490d      	ldr	r1, [pc, #52]	; (8007b08 <netconn_free+0x74>)
 8007ad4:	480a      	ldr	r0, [pc, #40]	; (8007b00 <netconn_free+0x6c>)
 8007ad6:	f007 fc69 	bl	800f3ac <iprintf>
  sys_sem_free(&conn->op_completed);
 8007ada:	f104 000c 	add.w	r0, r4, #12
 8007ade:	9001      	str	r0, [sp, #4]
 8007ae0:	f007 fbc5 	bl	800f26e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007ae4:	9801      	ldr	r0, [sp, #4]
 8007ae6:	f007 fbca 	bl	800f27e <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8007aea:	4621      	mov	r1, r4
 8007aec:	2007      	movs	r0, #7
}
 8007aee:	b002      	add	sp, #8
 8007af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8007af4:	f003 b8aa 	b.w	800ac4c <memp_free>
 8007af8:	08014902 	.word	0x08014902
 8007afc:	08014c9f 	.word	0x08014c9f
 8007b00:	080144fe 	.word	0x080144fe
 8007b04:	08014ccd 	.word	0x08014ccd
 8007b08:	08014d07 	.word	0x08014d07

08007b0c <accept_function>:
{
 8007b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b0e:	460f      	mov	r7, r1
 8007b10:	4616      	mov	r6, r2
  if (conn == NULL) {
 8007b12:	4605      	mov	r5, r0
 8007b14:	b920      	cbnz	r0, 8007b20 <accept_function+0x14>
    return ERR_VAL;
 8007b16:	f06f 0405 	mvn.w	r4, #5
}
 8007b1a:	4620      	mov	r0, r4
 8007b1c:	b003      	add	sp, #12
 8007b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007b20:	f100 0414 	add.w	r4, r0, #20
 8007b24:	4620      	mov	r0, r4
 8007b26:	f007 fb80 	bl	800f22a <sys_mbox_valid>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	d0f3      	beq.n	8007b16 <accept_function+0xa>
  if (newpcb == NULL) {
 8007b2e:	b96f      	cbnz	r7, 8007b4c <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007b30:	492f      	ldr	r1, [pc, #188]	; (8007bf0 <accept_function+0xe4>)
 8007b32:	4620      	mov	r0, r4
 8007b34:	f007 fb3c 	bl	800f1b0 <sys_mbox_trypost>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d1eb      	bne.n	8007b16 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007b3e:	6a2b      	ldr	r3, [r5, #32]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0e8      	beq.n	8007b16 <accept_function+0xa>
 8007b44:	4601      	mov	r1, r0
 8007b46:	4628      	mov	r0, r5
 8007b48:	4798      	blx	r3
 8007b4a:	e7e4      	b.n	8007b16 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007b4c:	b136      	cbz	r6, 8007b5c <accept_function+0x50>
 8007b4e:	4b29      	ldr	r3, [pc, #164]	; (8007bf4 <accept_function+0xe8>)
 8007b50:	f240 222a 	movw	r2, #554	; 0x22a
 8007b54:	4928      	ldr	r1, [pc, #160]	; (8007bf8 <accept_function+0xec>)
 8007b56:	4829      	ldr	r0, [pc, #164]	; (8007bfc <accept_function+0xf0>)
 8007b58:	f007 fc28 	bl	800f3ac <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8007b5c:	6a29      	ldr	r1, [r5, #32]
 8007b5e:	7828      	ldrb	r0, [r5, #0]
 8007b60:	f7ff ff56 	bl	8007a10 <netconn_alloc>
  if (newconn == NULL) {
 8007b64:	4606      	mov	r6, r0
 8007b66:	b968      	cbnz	r0, 8007b84 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007b68:	4921      	ldr	r1, [pc, #132]	; (8007bf0 <accept_function+0xe4>)
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f007 fb20 	bl	800f1b0 <sys_mbox_trypost>
 8007b70:	4602      	mov	r2, r0
 8007b72:	b920      	cbnz	r0, 8007b7e <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007b74:	6a2b      	ldr	r3, [r5, #32]
 8007b76:	b113      	cbz	r3, 8007b7e <accept_function+0x72>
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	4798      	blx	r3
    return ERR_MEM;
 8007b7e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007b82:	e7ca      	b.n	8007b1a <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8007b84:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8007b86:	f7ff fb2d 	bl	80071e4 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	f007 fb0f 	bl	800f1b0 <sys_mbox_trypost>
 8007b92:	4604      	mov	r4, r0
 8007b94:	b318      	cbz	r0, 8007bde <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007b96:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8007b98:	2100      	movs	r1, #0
 8007b9a:	9001      	str	r0, [sp, #4]
 8007b9c:	f003 ff00 	bl	800b9a0 <tcp_arg>
    tcp_recv(pcb, NULL);
 8007ba0:	9801      	ldr	r0, [sp, #4]
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	f003 ff00 	bl	800b9a8 <tcp_recv>
    tcp_sent(pcb, NULL);
 8007ba8:	9801      	ldr	r0, [sp, #4]
 8007baa:	2100      	movs	r1, #0
 8007bac:	f003 ff14 	bl	800b9d8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	9801      	ldr	r0, [sp, #4]
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	f003 ff43 	bl	800ba40 <tcp_poll>
    tcp_err(pcb, NULL);
 8007bba:	2100      	movs	r1, #0
 8007bbc:	9801      	ldr	r0, [sp, #4]
 8007bbe:	f003 ff21 	bl	800ba04 <tcp_err>
    newconn->pcb.tcp = NULL;
 8007bc2:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8007bc4:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8007bc8:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8007bca:	9001      	str	r0, [sp, #4]
 8007bcc:	f007 fae6 	bl	800f19c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8007bd0:	9801      	ldr	r0, [sp, #4]
 8007bd2:	f007 fb2f 	bl	800f234 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff ff5c 	bl	8007a94 <netconn_free>
    return ERR_MEM;
 8007bdc:	e7cf      	b.n	8007b7e <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007bde:	6a2b      	ldr	r3, [r5, #32]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d09a      	beq.n	8007b1a <accept_function+0xe>
 8007be4:	4602      	mov	r2, r0
 8007be6:	4601      	mov	r1, r0
 8007be8:	4628      	mov	r0, r5
 8007bea:	4798      	blx	r3
 8007bec:	e795      	b.n	8007b1a <accept_function+0xe>
 8007bee:	bf00      	nop
 8007bf0:	080142ec 	.word	0x080142ec
 8007bf4:	08014902 	.word	0x08014902
 8007bf8:	08014d43 	.word	0x08014d43
 8007bfc:	080144fe 	.word	0x080144fe

08007c00 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8007c00:	6803      	ldr	r3, [r0, #0]
{
 8007c02:	b510      	push	{r4, lr}
 8007c04:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007c06:	6858      	ldr	r0, [r3, #4]
 8007c08:	b188      	cbz	r0, 8007c2e <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d007      	beq.n	8007c24 <lwip_netconn_do_bind+0x24>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d10a      	bne.n	8007c2e <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007c18:	89a2      	ldrh	r2, [r4, #12]
 8007c1a:	68a1      	ldr	r1, [r4, #8]
 8007c1c:	f007 f84e 	bl	800ecbc <udp_bind>
  msg->err = err;
 8007c20:	7120      	strb	r0, [r4, #4]
}
 8007c22:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007c24:	89a2      	ldrh	r2, [r4, #12]
 8007c26:	68a1      	ldr	r1, [r4, #8]
 8007c28:	f003 fd76 	bl	800b718 <tcp_bind>
        break;
 8007c2c:	e7f8      	b.n	8007c20 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007c2e:	f06f 0005 	mvn.w	r0, #5
 8007c32:	e7f5      	b.n	8007c20 <lwip_netconn_do_bind+0x20>

08007c34 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8007c34:	6803      	ldr	r3, [r0, #0]
{
 8007c36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c38:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007c3a:	6858      	ldr	r0, [r3, #4]
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d04f      	beq.n	8007ce0 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007c46:	2a10      	cmp	r2, #16
 8007c48:	d14c      	bne.n	8007ce4 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d143      	bne.n	8007cd8 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8007c50:	7d03      	ldrb	r3, [r0, #20]
 8007c52:	b11b      	cbz	r3, 8007c5c <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8007c54:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8007c56:	f88d 3007 	strb.w	r3, [sp, #7]
 8007c5a:	e031      	b.n	8007cc0 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007c5c:	f10d 0207 	add.w	r2, sp, #7
 8007c60:	21ff      	movs	r1, #255	; 0xff
 8007c62:	f003 fdaf 	bl	800b7c4 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8007c66:	4605      	mov	r5, r0
 8007c68:	b350      	cbz	r0, 8007cc0 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8007c6a:	6820      	ldr	r0, [r4, #0]
 8007c6c:	3010      	adds	r0, #16
 8007c6e:	f007 fadc 	bl	800f22a <sys_mbox_valid>
 8007c72:	b138      	cbz	r0, 8007c84 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8007c74:	6820      	ldr	r0, [r4, #0]
 8007c76:	3010      	adds	r0, #16
 8007c78:	f007 fa90 	bl	800f19c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	3010      	adds	r0, #16
 8007c80:	f007 fad8 	bl	800f234 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007c84:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8007c86:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007c88:	3014      	adds	r0, #20
            err = ERR_OK;
 8007c8a:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007c8e:	f007 facc 	bl	800f22a <sys_mbox_valid>
 8007c92:	b930      	cbnz	r0, 8007ca2 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	2106      	movs	r1, #6
 8007c98:	3014      	adds	r0, #20
 8007c9a:	f007 fa6f 	bl	800f17c <sys_mbox_new>
 8007c9e:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8007ca2:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007ca6:	b983      	cbnz	r3, 8007cca <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8007ca8:	6821      	ldr	r1, [r4, #0]
 8007caa:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007cac:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8007cae:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8007cb0:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007cb2:	f003 fe75 	bl	800b9a0 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	490b      	ldr	r1, [pc, #44]	; (8007ce8 <lwip_netconn_do_listen+0xb4>)
 8007cba:	6858      	ldr	r0, [r3, #4]
 8007cbc:	f003 feba 	bl	800ba34 <tcp_accept>
  msg->err = err;
 8007cc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007cc4:	7123      	strb	r3, [r4, #4]
}
 8007cc6:	b003      	add	sp, #12
 8007cc8:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f004 fa08 	bl	800c0e0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8007cd0:	6823      	ldr	r3, [r4, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	e7f3      	b.n	8007cc0 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d101      	bne.n	8007ce0 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e7ba      	b.n	8007c56 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8007ce0:	23f5      	movs	r3, #245	; 0xf5
 8007ce2:	e7b8      	b.n	8007c56 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8007ce4:	23f0      	movs	r3, #240	; 0xf0
 8007ce6:	e7b6      	b.n	8007c56 <lwip_netconn_do_listen+0x22>
 8007ce8:	08007b0d 	.word	0x08007b0d

08007cec <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007cec:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8007cee:	4604      	mov	r4, r0
 8007cf0:	b160      	cbz	r0, 8007d0c <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8007cf2:	6800      	ldr	r0, [r0, #0]
 8007cf4:	b120      	cbz	r0, 8007d00 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8007cf6:	f003 fa09 	bl	800b10c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8007d00:	4621      	mov	r1, r4
 8007d02:	2006      	movs	r0, #6
  }
}
 8007d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8007d08:	f002 bfa0 	b.w	800ac4c <memp_free>
}
 8007d0c:	bd10      	pop	{r4, pc}

08007d0e <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 8007d0e:	b510      	push	{r4, lr}
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  if (msg->msg.common.errtfunc != NULL) {
 8007d10:	68c4      	ldr	r4, [r0, #12]
{
 8007d12:	4603      	mov	r3, r0
    return msg->msg.common.errtfunc(msg->netif);
 8007d14:	6840      	ldr	r0, [r0, #4]
  if (msg->msg.common.errtfunc != NULL) {
 8007d16:	b11c      	cbz	r4, 8007d20 <netifapi_do_netif_common+0x12>
    return msg->msg.common.errtfunc(msg->netif);
 8007d18:	4623      	mov	r3, r4
  } else {
    msg->msg.common.voidfunc(msg->netif);
    return ERR_OK;
  }
}
 8007d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return msg->msg.common.errtfunc(msg->netif);
 8007d1e:	4718      	bx	r3
    msg->msg.common.voidfunc(msg->netif);
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	4798      	blx	r3
}
 8007d24:	4620      	mov	r0, r4
 8007d26:	bd10      	pop	{r4, pc}

08007d28 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 8007d28:	b500      	push	{lr}
 8007d2a:	b089      	sub	sp, #36	; 0x24
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 8007d2c:	e9cd 0101 	strd	r0, r1, [sp, #4]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 8007d30:	4669      	mov	r1, sp
 8007d32:	4803      	ldr	r0, [pc, #12]	; (8007d40 <netifapi_netif_common+0x18>)
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 8007d34:	9203      	str	r2, [sp, #12]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 8007d36:	f000 f8b1 	bl	8007e9c <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 8007d3a:	b009      	add	sp, #36	; 0x24
 8007d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d40:	08007d0f 	.word	0x08007d0f

08007d44 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007d44:	4c2c      	ldr	r4, [pc, #176]	; (8007df8 <tcpip_thread+0xb4>)
{
 8007d46:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f007 fab5 	bl	800f2b8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007d4e:	6863      	ldr	r3, [r4, #4]
 8007d50:	b10b      	cbz	r3, 8007d56 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 8007d52:	68a0      	ldr	r0, [r4, #8]
 8007d54:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8007d56:	4d28      	ldr	r5, [pc, #160]	; (8007df8 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007d58:	4e28      	ldr	r6, [pc, #160]	; (8007dfc <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007d5a:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 8007d5e:	f006 feb7 	bl	800ead0 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007d62:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8007d64:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007d66:	d113      	bne.n	8007d90 <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8007d68:	4628      	mov	r0, r5
 8007d6a:	f007 faaa 	bl	800f2c2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	a901      	add	r1, sp, #4
 8007d72:	4638      	mov	r0, r7
 8007d74:	f007 fa26 	bl	800f1c4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f007 fa9d 	bl	800f2b8 <sys_mutex_lock>
    if (msg == NULL) {
 8007d7e:	9c01      	ldr	r4, [sp, #4]
 8007d80:	b9cc      	cbnz	r4, 8007db6 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007d82:	4633      	mov	r3, r6
 8007d84:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007d86:	491e      	ldr	r1, [pc, #120]	; (8007e00 <tcpip_thread+0xbc>)
 8007d88:	481e      	ldr	r0, [pc, #120]	; (8007e04 <tcpip_thread+0xc0>)
 8007d8a:	f007 fb0f 	bl	800f3ac <iprintf>
      break;
 8007d8e:	e7e6      	b.n	8007d5e <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 8007d90:	b910      	cbnz	r0, 8007d98 <tcpip_thread+0x54>
    sys_check_timeouts();
 8007d92:	f006 fe81 	bl	800ea98 <sys_check_timeouts>
    goto again;
 8007d96:	e7e2      	b.n	8007d5e <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8007d98:	4628      	mov	r0, r5
 8007d9a:	f007 fa92 	bl	800f2c2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007d9e:	4622      	mov	r2, r4
 8007da0:	a901      	add	r1, sp, #4
 8007da2:	4638      	mov	r0, r7
 8007da4:	f007 fa0e 	bl	800f1c4 <sys_arch_mbox_fetch>
 8007da8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007daa:	4628      	mov	r0, r5
 8007dac:	f007 fa84 	bl	800f2b8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007db0:	3401      	adds	r4, #1
 8007db2:	d0ee      	beq.n	8007d92 <tcpip_thread+0x4e>
 8007db4:	e7e3      	b.n	8007d7e <tcpip_thread+0x3a>
  switch (msg->type) {
 8007db6:	7823      	ldrb	r3, [r4, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d00f      	beq.n	8007ddc <tcpip_thread+0x98>
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d013      	beq.n	8007de8 <tcpip_thread+0xa4>
 8007dc0:	b9b3      	cbnz	r3, 8007df0 <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007dc2:	6860      	ldr	r0, [r4, #4]
 8007dc4:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8007dc8:	4798      	blx	r3
 8007dca:	b110      	cbz	r0, 8007dd2 <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 8007dcc:	6860      	ldr	r0, [r4, #4]
 8007dce:	f003 f99d 	bl	800b10c <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007dd2:	4621      	mov	r1, r4
 8007dd4:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007dd6:	f002 ff39 	bl	800ac4c <memp_free>
      break;
 8007dda:	e7c0      	b.n	8007d5e <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007ddc:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007de0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007de2:	4621      	mov	r1, r4
 8007de4:	2008      	movs	r0, #8
 8007de6:	e7f6      	b.n	8007dd6 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007de8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007dec:	4798      	blx	r3
      break;
 8007dee:	e7b6      	b.n	8007d5e <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007df0:	4633      	mov	r3, r6
 8007df2:	22cf      	movs	r2, #207	; 0xcf
 8007df4:	e7c7      	b.n	8007d86 <tcpip_thread+0x42>
 8007df6:	bf00      	nop
 8007df8:	20010100 	.word	0x20010100
 8007dfc:	08014dde 	.word	0x08014dde
 8007e00:	08014e51 	.word	0x08014e51
 8007e04:	080144fe 	.word	0x080144fe

08007e08 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007e0c:	4810      	ldr	r0, [pc, #64]	; (8007e50 <tcpip_inpkt+0x48>)
{
 8007e0e:	460e      	mov	r6, r1
 8007e10:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007e12:	f007 fa0a 	bl	800f22a <sys_mbox_valid>
 8007e16:	b928      	cbnz	r0, 8007e24 <tcpip_inpkt+0x1c>
 8007e18:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <tcpip_inpkt+0x4c>)
 8007e1a:	22fc      	movs	r2, #252	; 0xfc
 8007e1c:	490e      	ldr	r1, [pc, #56]	; (8007e58 <tcpip_inpkt+0x50>)
 8007e1e:	480f      	ldr	r0, [pc, #60]	; (8007e5c <tcpip_inpkt+0x54>)
 8007e20:	f007 fac4 	bl	800f3ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007e24:	2009      	movs	r0, #9
 8007e26:	f002 fee1 	bl	800abec <memp_malloc>
  if (msg == NULL) {
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	b168      	cbz	r0, 8007e4a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8007e2e:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007e30:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8007e32:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8007e34:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8007e36:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007e3a:	4805      	ldr	r0, [pc, #20]	; (8007e50 <tcpip_inpkt+0x48>)
 8007e3c:	f007 f9b8 	bl	800f1b0 <sys_mbox_trypost>
 8007e40:	b128      	cbz	r0, 8007e4e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007e42:	4621      	mov	r1, r4
 8007e44:	2009      	movs	r0, #9
 8007e46:	f002 ff01 	bl	800ac4c <memp_free>
    return ERR_MEM;
 8007e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e50:	2001010c 	.word	0x2001010c
 8007e54:	08014dde 	.word	0x08014dde
 8007e58:	08014e6f 	.word	0x08014e6f
 8007e5c:	080144fe 	.word	0x080144fe

08007e60 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007e60:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8007e64:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8007e68:	bf14      	ite	ne
 8007e6a:	4a02      	ldrne	r2, [pc, #8]	; (8007e74 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007e6c:	4a02      	ldreq	r2, [pc, #8]	; (8007e78 <tcpip_input+0x18>)
 8007e6e:	f7ff bfcb 	b.w	8007e08 <tcpip_inpkt>
 8007e72:	bf00      	nop
 8007e74:	0800f06d 	.word	0x0800f06d
 8007e78:	08009a61 	.word	0x08009a61

08007e7c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8007e7c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8007e7e:	4e06      	ldr	r6, [pc, #24]	; (8007e98 <tcpip_send_msg_wait_sem+0x1c>)
{
 8007e80:	460d      	mov	r5, r1
 8007e82:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007e84:	4630      	mov	r0, r6
 8007e86:	f007 fa17 	bl	800f2b8 <sys_mutex_lock>
  fn(apimsg);
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f007 fa17 	bl	800f2c2 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8007e94:	2000      	movs	r0, #0
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	20010100 	.word	0x20010100

08007e9c <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 8007e9c:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 8007e9e:	4e07      	ldr	r6, [pc, #28]	; (8007ebc <tcpip_api_call+0x20>)
{
 8007ea0:	460d      	mov	r5, r1
 8007ea2:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f007 fa07 	bl	800f2b8 <sys_mutex_lock>
  err = fn(call);
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47a0      	blx	r4
 8007eae:	4604      	mov	r4, r0
  UNLOCK_TCPIP_CORE();
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f007 fa06 	bl	800f2c2 <sys_mutex_unlock>
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	bf00      	nop
 8007ebc:	20010100 	.word	0x20010100

08007ec0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007ec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	460c      	mov	r4, r1
  lwip_init();
 8007ec6:	f002 fbb5 	bl	800a634 <lwip_init>

  tcpip_init_done = initfunc;
 8007eca:	4812      	ldr	r0, [pc, #72]	; (8007f14 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007ecc:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8007ece:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007ed2:	300c      	adds	r0, #12
 8007ed4:	f007 f952 	bl	800f17c <sys_mbox_new>
 8007ed8:	b130      	cbz	r0, 8007ee8 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007eda:	4b0f      	ldr	r3, [pc, #60]	; (8007f18 <tcpip_init+0x58>)
 8007edc:	f240 2261 	movw	r2, #609	; 0x261
 8007ee0:	490e      	ldr	r1, [pc, #56]	; (8007f1c <tcpip_init+0x5c>)
 8007ee2:	480f      	ldr	r0, [pc, #60]	; (8007f20 <tcpip_init+0x60>)
 8007ee4:	f007 fa62 	bl	800f3ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007ee8:	480a      	ldr	r0, [pc, #40]	; (8007f14 <tcpip_init+0x54>)
 8007eea:	f007 f9d7 	bl	800f29c <sys_mutex_new>
 8007eee:	b130      	cbz	r0, 8007efe <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007ef0:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <tcpip_init+0x58>)
 8007ef2:	f240 2265 	movw	r2, #613	; 0x265
 8007ef6:	490b      	ldr	r1, [pc, #44]	; (8007f24 <tcpip_init+0x64>)
 8007ef8:	4809      	ldr	r0, [pc, #36]	; (8007f20 <tcpip_init+0x60>)
 8007efa:	f007 fa57 	bl	800f3ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007efe:	2302      	movs	r3, #2
 8007f00:	2200      	movs	r2, #0
 8007f02:	4909      	ldr	r1, [pc, #36]	; (8007f28 <tcpip_init+0x68>)
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007f0a:	4808      	ldr	r0, [pc, #32]	; (8007f2c <tcpip_init+0x6c>)
 8007f0c:	f007 f9dc 	bl	800f2c8 <sys_thread_new>
}
 8007f10:	b003      	add	sp, #12
 8007f12:	bd30      	pop	{r4, r5, pc}
 8007f14:	20010100 	.word	0x20010100
 8007f18:	08014dde 	.word	0x08014dde
 8007f1c:	08014e7c 	.word	0x08014e7c
 8007f20:	080144fe 	.word	0x080144fe
 8007f24:	08014e9f 	.word	0x08014e9f
 8007f28:	08007d45 	.word	0x08007d45
 8007f2c:	08014ec0 	.word	0x08014ec0

08007f30 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8007f30:	7943      	ldrb	r3, [r0, #5]
 8007f32:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8007f34:	bf1f      	itttt	ne
 8007f36:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8007f38:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8007f3a:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8007f3c:	8103      	strhne	r3, [r0, #8]
  }
}
 8007f3e:	4770      	bx	lr

08007f40 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8007f42:	1c87      	adds	r7, r0, #2
{
 8007f44:	4604      	mov	r4, r0
 8007f46:	460d      	mov	r5, r1
 8007f48:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8007f4a:	2f44      	cmp	r7, #68	; 0x44
 8007f4c:	d906      	bls.n	8007f5c <dhcp_option_short+0x1c>
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <dhcp_option_short+0x2c>)
 8007f50:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8007f54:	4906      	ldr	r1, [pc, #24]	; (8007f70 <dhcp_option_short+0x30>)
 8007f56:	4807      	ldr	r0, [pc, #28]	; (8007f74 <dhcp_option_short+0x34>)
 8007f58:	f007 fa28 	bl	800f3ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8007f5c:	0a33      	lsrs	r3, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 8007f5e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8007f60:	552b      	strb	r3, [r5, r4]
 8007f62:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8007f64:	b2a4      	uxth	r4, r4
 8007f66:	552e      	strb	r6, [r5, r4]
}
 8007f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08014ec7 	.word	0x08014ec7
 8007f70:	08014f3f 	.word	0x08014f3f
 8007f74:	080144fe 	.word	0x080144fe

08007f78 <dhcp_option>:
{
 8007f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f7a:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8007f7c:	3302      	adds	r3, #2
{
 8007f7e:	4604      	mov	r4, r0
 8007f80:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8007f82:	fa50 f383 	uxtab	r3, r0, r3
{
 8007f86:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8007f88:	2b44      	cmp	r3, #68	; 0x44
 8007f8a:	d906      	bls.n	8007f9a <dhcp_option+0x22>
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <dhcp_option+0x30>)
 8007f8e:	f240 529a 	movw	r2, #1434	; 0x59a
 8007f92:	4906      	ldr	r1, [pc, #24]	; (8007fac <dhcp_option+0x34>)
 8007f94:	4806      	ldr	r0, [pc, #24]	; (8007fb0 <dhcp_option+0x38>)
 8007f96:	f007 fa09 	bl	800f3ac <iprintf>
  options[options_out_len++] = option_type;
 8007f9a:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8007f9c:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8007f9e:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 8007fa0:	b29b      	uxth	r3, r3
}
 8007fa2:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8007fa4:	54ee      	strb	r6, [r5, r3]
}
 8007fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa8:	08014ec7 	.word	0x08014ec7
 8007fac:	08014f7a 	.word	0x08014f7a
 8007fb0:	080144fe 	.word	0x080144fe

08007fb4 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8007fb4:	2843      	cmp	r0, #67	; 0x43
{
 8007fb6:	b570      	push	{r4, r5, r6, lr}
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8007fbe:	d906      	bls.n	8007fce <dhcp_option_byte+0x1a>
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <dhcp_option_byte+0x24>)
 8007fc2:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8007fc6:	4905      	ldr	r1, [pc, #20]	; (8007fdc <dhcp_option_byte+0x28>)
 8007fc8:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <dhcp_option_byte+0x2c>)
 8007fca:	f007 f9ef 	bl	800f3ac <iprintf>
  options[options_out_len++] = value;
 8007fce:	1c60      	adds	r0, r4, #1
 8007fd0:	552e      	strb	r6, [r5, r4]
}
 8007fd2:	b280      	uxth	r0, r0
 8007fd4:	bd70      	pop	{r4, r5, r6, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08014ec7 	.word	0x08014ec7
 8007fdc:	08014fbc 	.word	0x08014fbc
 8007fe0:	080144fe 	.word	0x080144fe

08007fe4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8007fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007fe6:	1d07      	adds	r7, r0, #4
{
 8007fe8:	4604      	mov	r4, r0
 8007fea:	460d      	mov	r5, r1
 8007fec:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007fee:	2f44      	cmp	r7, #68	; 0x44
 8007ff0:	d906      	bls.n	8008000 <dhcp_option_long+0x1c>
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <dhcp_option_long+0x3c>)
 8007ff4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007ff8:	490a      	ldr	r1, [pc, #40]	; (8008024 <dhcp_option_long+0x40>)
 8007ffa:	480b      	ldr	r0, [pc, #44]	; (8008028 <dhcp_option_long+0x44>)
 8007ffc:	f007 f9d6 	bl	800f3ac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008000:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8008002:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8008004:	552b      	strb	r3, [r5, r4]
 8008006:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8008008:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800800a:	b29b      	uxth	r3, r3
 800800c:	54ea      	strb	r2, [r5, r3]
 800800e:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008010:	3403      	adds	r4, #3
 8008012:	0a32      	lsrs	r2, r6, #8
 8008014:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8008016:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8008018:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800801a:	552e      	strb	r6, [r5, r4]
}
 800801c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801e:	bf00      	nop
 8008020:	08014ec7 	.word	0x08014ec7
 8008024:	08014ff1 	.word	0x08014ff1
 8008028:	080144fe 	.word	0x080144fe

0800802c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800802c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008030:	460e      	mov	r6, r1
 8008032:	4690      	mov	r8, r2
 8008034:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8008036:	4605      	mov	r5, r0
 8008038:	b958      	cbnz	r0, 8008052 <dhcp_create_msg+0x26>
 800803a:	462f      	mov	r7, r5
 800803c:	4b3f      	ldr	r3, [pc, #252]	; (800813c <dhcp_create_msg+0x110>)
 800803e:	f240 7269 	movw	r2, #1897	; 0x769
 8008042:	493f      	ldr	r1, [pc, #252]	; (8008140 <dhcp_create_msg+0x114>)
 8008044:	483f      	ldr	r0, [pc, #252]	; (8008144 <dhcp_create_msg+0x118>)
 8008046:	f007 f9b1 	bl	800f3ac <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 800804a:	4638      	mov	r0, r7
 800804c:	b003      	add	sp, #12
 800804e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8008052:	b941      	cbnz	r1, 8008066 <dhcp_create_msg+0x3a>
 8008054:	4b39      	ldr	r3, [pc, #228]	; (800813c <dhcp_create_msg+0x110>)
 8008056:	f240 726a 	movw	r2, #1898	; 0x76a
 800805a:	493b      	ldr	r1, [pc, #236]	; (8008148 <dhcp_create_msg+0x11c>)
 800805c:	4637      	mov	r7, r6
 800805e:	4839      	ldr	r0, [pc, #228]	; (8008144 <dhcp_create_msg+0x118>)
 8008060:	f007 f9a4 	bl	800f3ac <iprintf>
 8008064:	e7f1      	b.n	800804a <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8008066:	f44f 7220 	mov.w	r2, #640	; 0x280
 800806a:	f44f 719a 	mov.w	r1, #308	; 0x134
 800806e:	2036      	movs	r0, #54	; 0x36
 8008070:	f003 f8b4 	bl	800b1dc <pbuf_alloc>
  if (p_out == NULL) {
 8008074:	4607      	mov	r7, r0
 8008076:	2800      	cmp	r0, #0
 8008078:	d0e7      	beq.n	800804a <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800807a:	8943      	ldrh	r3, [r0, #10]
 800807c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8008080:	d206      	bcs.n	8008090 <dhcp_create_msg+0x64>
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <dhcp_create_msg+0x110>)
 8008084:	f240 7271 	movw	r2, #1905	; 0x771
 8008088:	4930      	ldr	r1, [pc, #192]	; (800814c <dhcp_create_msg+0x120>)
 800808a:	482e      	ldr	r0, [pc, #184]	; (8008144 <dhcp_create_msg+0x118>)
 800808c:	f007 f98e 	bl	800f3ac <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8008090:	f1b8 0f03 	cmp.w	r8, #3
 8008094:	d102      	bne.n	800809c <dhcp_create_msg+0x70>
 8008096:	7973      	ldrb	r3, [r6, #5]
 8008098:	2b03      	cmp	r3, #3
 800809a:	d107      	bne.n	80080ac <dhcp_create_msg+0x80>
    if (dhcp->tries == 0) {
 800809c:	79b3      	ldrb	r3, [r6, #6]
 800809e:	4c2c      	ldr	r4, [pc, #176]	; (8008150 <dhcp_create_msg+0x124>)
 80080a0:	b913      	cbnz	r3, 80080a8 <dhcp_create_msg+0x7c>
      xid = LWIP_RAND();
 80080a2:	f007 fa11 	bl	800f4c8 <rand>
 80080a6:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 80080ac:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80080ae:	f44f 729a 	mov.w	r2, #308	; 0x134
 80080b2:	2100      	movs	r1, #0
 80080b4:	4620      	mov	r0, r4
 80080b6:	f007 f971 	bl	800f39c <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80080ba:	2301      	movs	r3, #1
 80080bc:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80080be:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 80080c0:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80080c4:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80080c6:	6830      	ldr	r0, [r6, #0]
 80080c8:	f002 fa63 	bl	800a592 <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80080cc:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 80080d0:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80080d2:	d00a      	beq.n	80080ea <dhcp_create_msg+0xbe>
 80080d4:	f1a8 0307 	sub.w	r3, r8, #7
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d906      	bls.n	80080ea <dhcp_create_msg+0xbe>
 80080dc:	f1b8 0f03 	cmp.w	r8, #3
 80080e0:	d105      	bne.n	80080ee <dhcp_create_msg+0xc2>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80080e2:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80080e4:	3b04      	subs	r3, #4
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d801      	bhi.n	80080ee <dhcp_create_msg+0xc2>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80080ea:	686b      	ldr	r3, [r5, #4]
 80080ec:	60e3      	str	r3, [r4, #12]
 80080ee:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 80080f2:	f104 021c 	add.w	r2, r4, #28
 80080f6:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 80080f8:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80080fc:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 80080fe:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8008102:	d1f9      	bne.n	80080f8 <dhcp_create_msg+0xcc>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8008104:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8008108:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800810a:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
 800810e:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8008110:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
 8008114:	2253      	movs	r2, #83	; 0x53
 8008116:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 800811a:	f884 20ee 	strb.w	r2, [r4, #238]	; 0xee
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800811e:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8008120:	f884 30ef 	strb.w	r3, [r4, #239]	; 0xef
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8008124:	2301      	movs	r3, #1
 8008126:	9101      	str	r1, [sp, #4]
 8008128:	f7ff ff26 	bl	8007f78 <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800812c:	4642      	mov	r2, r8
 800812e:	9901      	ldr	r1, [sp, #4]
 8008130:	f7ff ff40 	bl	8007fb4 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8008134:	f8a9 0000 	strh.w	r0, [r9]
 8008138:	e787      	b.n	800804a <dhcp_create_msg+0x1e>
 800813a:	bf00      	nop
 800813c:	08014ec7 	.word	0x08014ec7
 8008140:	0801502b 	.word	0x0801502b
 8008144:	080144fe 	.word	0x080144fe
 8008148:	0801504a 	.word	0x0801504a
 800814c:	08015068 	.word	0x08015068
 8008150:	20010110 	.word	0x20010110

08008154 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	4604      	mov	r4, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8008158:	23ff      	movs	r3, #255	; 0xff
{
 800815a:	4608      	mov	r0, r1
 800815c:	4617      	mov	r7, r2
  options[options_out_len++] = DHCP_OPTION_END;
 800815e:	1c66      	adds	r6, r4, #1
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8008160:	f1c4 0543 	rsb	r5, r4, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8008164:	550b      	strb	r3, [r1, r4]
    options[options_out_len++] = 0;
 8008166:	2100      	movs	r1, #0
  options[options_out_len++] = DHCP_OPTION_END;
 8008168:	b2b6      	uxth	r6, r6
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800816a:	34f1      	adds	r4, #241	; 0xf1
    options[options_out_len++] = 0;
 800816c:	b2ad      	uxth	r5, r5
 800816e:	2e44      	cmp	r6, #68	; 0x44
 8008170:	4430      	add	r0, r6
 8008172:	bf94      	ite	ls
 8008174:	462a      	movls	r2, r5
 8008176:	2200      	movhi	r2, #0
 8008178:	f007 f910 	bl	800f39c <memset>
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800817c:	2e44      	cmp	r6, #68	; 0x44
 800817e:	4638      	mov	r0, r7
 8008180:	bf94      	ite	ls
 8008182:	4629      	movls	r1, r5
 8008184:	2100      	movhi	r1, #0
 8008186:	4421      	add	r1, r4
}
 8008188:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800818c:	b289      	uxth	r1, r1
 800818e:	f003 b8a1 	b.w	800b2d4 <pbuf_realloc>
	...

08008194 <dhcp_discover>:
{
 8008194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008198:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800819a:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 800819c:	b086      	sub	sp, #24
 800819e:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80081a0:	2106      	movs	r1, #6
 80081a2:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80081a4:	61e3      	str	r3, [r4, #28]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80081a6:	2201      	movs	r2, #1
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80081a8:	f7ff fec2 	bl	8007f30 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80081ac:	f10d 0316 	add.w	r3, sp, #22
 80081b0:	4621      	mov	r1, r4
 80081b2:	4630      	mov	r0, r6
 80081b4:	f7ff ff3a 	bl	800802c <dhcp_create_msg>
  if (p_out != NULL) {
 80081b8:	4605      	mov	r5, r0
 80081ba:	2800      	cmp	r0, #0
 80081bc:	d039      	beq.n	8008232 <dhcp_discover+0x9e>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80081be:	6841      	ldr	r1, [r0, #4]
 80081c0:	2302      	movs	r3, #2
 80081c2:	2239      	movs	r2, #57	; 0x39
 80081c4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80081c8:	31f0      	adds	r1, #240	; 0xf0
 80081ca:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8008280 <dhcp_discover+0xec>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80081ce:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80081d0:	9103      	str	r1, [sp, #12]
 80081d2:	f7ff fed1 	bl	8007f78 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80081d6:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80081d8:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80081da:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80081de:	f7ff feaf 	bl	8007f40 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80081e2:	9903      	ldr	r1, [sp, #12]
 80081e4:	2303      	movs	r3, #3
 80081e6:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80081e8:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80081ec:	f7ff fec4 	bl	8007f78 <dhcp_option>
 80081f0:	9903      	ldr	r1, [sp, #12]
 80081f2:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80081f6:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80081f8:	f818 2b01 	ldrb.w	r2, [r8], #1
 80081fc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008200:	9103      	str	r1, [sp, #12]
 8008202:	f7ff fed7 	bl	8007fb4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008206:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 800820a:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800820c:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008210:	d1f1      	bne.n	80081f6 <dhcp_discover+0x62>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008212:	462a      	mov	r2, r5
 8008214:	f7ff ff9e 	bl	8008154 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008218:	4b16      	ldr	r3, [pc, #88]	; (8008274 <dhcp_discover+0xe0>)
 800821a:	4817      	ldr	r0, [pc, #92]	; (8008278 <dhcp_discover+0xe4>)
 800821c:	4629      	mov	r1, r5
 800821e:	4a17      	ldr	r2, [pc, #92]	; (800827c <dhcp_discover+0xe8>)
 8008220:	e9cd 6300 	strd	r6, r3, [sp]
 8008224:	2343      	movs	r3, #67	; 0x43
 8008226:	6840      	ldr	r0, [r0, #4]
 8008228:	f006 fdae 	bl	800ed88 <udp_sendto_if_src>
    pbuf_free(p_out);
 800822c:	4628      	mov	r0, r5
 800822e:	f002 ff6d 	bl	800b10c <pbuf_free>
  if (dhcp->tries < 255) {
 8008232:	79a3      	ldrb	r3, [r4, #6]
}
 8008234:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 8008236:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008238:	bf1c      	itt	ne
 800823a:	3301      	addne	r3, #1
 800823c:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800823e:	79a2      	ldrb	r2, [r4, #6]
 8008240:	2a05      	cmp	r2, #5
 8008242:	bf97      	itett	ls
 8008244:	2301      	movls	r3, #1
 8008246:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 800824a:	4093      	lslls	r3, r2
 800824c:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008250:	bf98      	it	ls
 8008252:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008256:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800825a:	bf9c      	itt	ls
 800825c:	00db      	lslls	r3, r3, #3
 800825e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008260:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008264:	b29b      	uxth	r3, r3
 8008266:	fbb3 f3f2 	udiv	r3, r3, r2
 800826a:	8123      	strh	r3, [r4, #8]
}
 800826c:	b006      	add	sp, #24
 800826e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008272:	bf00      	nop
 8008274:	080142f8 	.word	0x080142f8
 8008278:	20010110 	.word	0x20010110
 800827c:	080142f4 	.word	0x080142f4
 8008280:	080142ee 	.word	0x080142ee

08008284 <dhcp_check>:
{
 8008284:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008286:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008288:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800828a:	2108      	movs	r1, #8
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800828c:	2200      	movs	r2, #0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800828e:	4620      	mov	r0, r4
 8008290:	f7ff fe4e 	bl	8007f30 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8008294:	f104 011c 	add.w	r1, r4, #28
 8008298:	4628      	mov	r0, r5
 800829a:	f001 f979 	bl	8009590 <etharp_query>
  if (dhcp->tries < 255) {
 800829e:	79a3      	ldrb	r3, [r4, #6]
 80082a0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80082a2:	bf1c      	itt	ne
 80082a4:	3301      	addne	r3, #1
 80082a6:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80082a8:	2301      	movs	r3, #1
 80082aa:	8123      	strh	r3, [r4, #8]
}
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
	...

080082b0 <dhcp_bind>:
{
 80082b0:	b513      	push	{r0, r1, r4, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80082b2:	4604      	mov	r4, r0
 80082b4:	b948      	cbnz	r0, 80082ca <dhcp_bind+0x1a>
 80082b6:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <dhcp_bind+0x100>)
 80082b8:	f240 4215 	movw	r2, #1045	; 0x415
 80082bc:	493d      	ldr	r1, [pc, #244]	; (80083b4 <dhcp_bind+0x104>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80082be:	483e      	ldr	r0, [pc, #248]	; (80083b8 <dhcp_bind+0x108>)
}
 80082c0:	b002      	add	sp, #8
 80082c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80082c6:	f007 b871 	b.w	800f3ac <iprintf>
  dhcp = netif_dhcp_data(netif);
 80082ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80082cc:	b920      	cbnz	r0, 80082d8 <dhcp_bind+0x28>
 80082ce:	4b38      	ldr	r3, [pc, #224]	; (80083b0 <dhcp_bind+0x100>)
 80082d0:	f240 4217 	movw	r2, #1047	; 0x417
 80082d4:	4939      	ldr	r1, [pc, #228]	; (80083bc <dhcp_bind+0x10c>)
 80082d6:	e7f2      	b.n	80082be <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	8243      	strh	r3, [r0, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80082dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80082de:	1c5a      	adds	r2, r3, #1
 80082e0:	d00c      	beq.n	80082fc <dhcp_bind+0x4c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80082e2:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 80082e4:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80082e8:	bf36      	itet	cc
 80082ea:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 80082ec:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80082f0:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t0_timeout = (u16_t)timeout;
 80082f4:	b29a      	uxth	r2, r3
    if (dhcp->t0_timeout == 0) {
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d043      	beq.n	8008382 <dhcp_bind+0xd2>
    dhcp->t0_timeout = (u16_t)timeout;
 80082fa:	8282      	strh	r2, [r0, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80082fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80082fe:	1c59      	adds	r1, r3, #1
 8008300:	d00e      	beq.n	8008320 <dhcp_bind+0x70>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008302:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8008304:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008308:	bf36      	itet	cc
 800830a:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 800830c:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008310:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 8008314:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 8008316:	2b00      	cmp	r3, #0
 8008318:	d036      	beq.n	8008388 <dhcp_bind+0xd8>
    dhcp->t1_timeout = (u16_t)timeout;
 800831a:	8142      	strh	r2, [r0, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800831c:	8943      	ldrh	r3, [r0, #10]
 800831e:	81c3      	strh	r3, [r0, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8008320:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	d00d      	beq.n	8008342 <dhcp_bind+0x92>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008326:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8008328:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800832c:	bf36      	itet	cc
 800832e:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 8008330:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008334:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8008338:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 800833a:	b343      	cbz	r3, 800838e <dhcp_bind+0xde>
    dhcp->t2_timeout = (u16_t)timeout;
 800833c:	8182      	strh	r2, [r0, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800833e:	8983      	ldrh	r3, [r0, #12]
 8008340:	8203      	strh	r3, [r0, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8008342:	8983      	ldrh	r3, [r0, #12]
 8008344:	8942      	ldrh	r2, [r0, #10]
 8008346:	429a      	cmp	r2, r3
 8008348:	d302      	bcc.n	8008350 <dhcp_bind+0xa0>
 800834a:	b10b      	cbz	r3, 8008350 <dhcp_bind+0xa0>
    dhcp->t1_timeout = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	8143      	strh	r3, [r0, #10]
  if (dhcp->subnet_mask_given) {
 8008350:	79c3      	ldrb	r3, [r0, #7]
 8008352:	b1fb      	cbz	r3, 8008394 <dhcp_bind+0xe4>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8008354:	6a03      	ldr	r3, [r0, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008356:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8008358:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800835a:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 800835c:	b92b      	cbnz	r3, 800836a <dhcp_bind+0xba>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800835e:	69c3      	ldr	r3, [r0, #28]
 8008360:	9a00      	ldr	r2, [sp, #0]
 8008362:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8008364:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008368:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800836a:	210a      	movs	r1, #10
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800836c:	466a      	mov	r2, sp
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800836e:	f7ff fddf 	bl	8007f30 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008372:	f100 011c 	add.w	r1, r0, #28
 8008376:	ab01      	add	r3, sp, #4
 8008378:	4620      	mov	r0, r4
 800837a:	f002 fccf 	bl	800ad1c <netif_set_addr>
}
 800837e:	b002      	add	sp, #8
 8008380:	bd10      	pop	{r4, pc}
      dhcp->t0_timeout = 1;
 8008382:	2301      	movs	r3, #1
 8008384:	8283      	strh	r3, [r0, #20]
 8008386:	e7b9      	b.n	80082fc <dhcp_bind+0x4c>
      dhcp->t1_timeout = 1;
 8008388:	2301      	movs	r3, #1
 800838a:	8143      	strh	r3, [r0, #10]
 800838c:	e7c6      	b.n	800831c <dhcp_bind+0x6c>
      dhcp->t2_timeout = 1;
 800838e:	2301      	movs	r3, #1
 8008390:	8183      	strh	r3, [r0, #12]
 8008392:	e7d4      	b.n	800833e <dhcp_bind+0x8e>
    if (first_octet <= 127) {
 8008394:	f990 201c 	ldrsb.w	r2, [r0, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8008398:	7f03      	ldrb	r3, [r0, #28]
    if (first_octet <= 127) {
 800839a:	2a00      	cmp	r2, #0
 800839c:	db01      	blt.n	80083a2 <dhcp_bind+0xf2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800839e:	23ff      	movs	r3, #255	; 0xff
 80083a0:	e7d9      	b.n	8008356 <dhcp_bind+0xa6>
    } else if (first_octet >= 192) {
 80083a2:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80083a4:	bf8c      	ite	hi
 80083a6:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80083aa:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80083ae:	e7d2      	b.n	8008356 <dhcp_bind+0xa6>
 80083b0:	08014ec7 	.word	0x08014ec7
 80083b4:	080150a8 	.word	0x080150a8
 80083b8:	080144fe 	.word	0x080144fe
 80083bc:	080150c1 	.word	0x080150c1

080083c0 <dhcp_inc_pcb_refcount>:
{
 80083c0:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 80083c2:	4c14      	ldr	r4, [pc, #80]	; (8008414 <dhcp_inc_pcb_refcount+0x54>)
 80083c4:	7a23      	ldrb	r3, [r4, #8]
 80083c6:	b9eb      	cbnz	r3, 8008404 <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80083c8:	6863      	ldr	r3, [r4, #4]
 80083ca:	b12b      	cbz	r3, 80083d8 <dhcp_inc_pcb_refcount+0x18>
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <dhcp_inc_pcb_refcount+0x58>)
 80083ce:	22e5      	movs	r2, #229	; 0xe5
 80083d0:	4912      	ldr	r1, [pc, #72]	; (800841c <dhcp_inc_pcb_refcount+0x5c>)
 80083d2:	4813      	ldr	r0, [pc, #76]	; (8008420 <dhcp_inc_pcb_refcount+0x60>)
 80083d4:	f006 ffea 	bl	800f3ac <iprintf>
    dhcp_pcb = udp_new();
 80083d8:	f006 fe22 	bl	800f020 <udp_new>
 80083dc:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 80083de:	b1b0      	cbz	r0, 800840e <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80083e0:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80083e2:	4910      	ldr	r1, [pc, #64]	; (8008424 <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80083e4:	f042 0220 	orr.w	r2, r2, #32
 80083e8:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80083ea:	2244      	movs	r2, #68	; 0x44
 80083ec:	f006 fc66 	bl	800ecbc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80083f0:	2243      	movs	r2, #67	; 0x43
 80083f2:	490c      	ldr	r1, [pc, #48]	; (8008424 <dhcp_inc_pcb_refcount+0x64>)
 80083f4:	6860      	ldr	r0, [r4, #4]
 80083f6:	f006 fd9f 	bl	800ef38 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80083fa:	2200      	movs	r2, #0
 80083fc:	490a      	ldr	r1, [pc, #40]	; (8008428 <dhcp_inc_pcb_refcount+0x68>)
 80083fe:	6860      	ldr	r0, [r4, #4]
 8008400:	f006 fdd6 	bl	800efb0 <udp_recv>
  dhcp_pcb_refcount++;
 8008404:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 8008406:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8008408:	3301      	adds	r3, #1
 800840a:	7223      	strb	r3, [r4, #8]
}
 800840c:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 800840e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008412:	e7fb      	b.n	800840c <dhcp_inc_pcb_refcount+0x4c>
 8008414:	20010110 	.word	0x20010110
 8008418:	08014ec7 	.word	0x08014ec7
 800841c:	080150d9 	.word	0x080150d9
 8008420:	080144fe 	.word	0x080144fe
 8008424:	080142f8 	.word	0x080142f8
 8008428:	08008729 	.word	0x08008729

0800842c <dhcp_dec_pcb_refcount>:
{
 800842c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800842e:	4d09      	ldr	r5, [pc, #36]	; (8008454 <dhcp_dec_pcb_refcount+0x28>)
 8008430:	7a2b      	ldrb	r3, [r5, #8]
 8008432:	b92b      	cbnz	r3, 8008440 <dhcp_dec_pcb_refcount+0x14>
 8008434:	4b08      	ldr	r3, [pc, #32]	; (8008458 <dhcp_dec_pcb_refcount+0x2c>)
 8008436:	22ff      	movs	r2, #255	; 0xff
 8008438:	4908      	ldr	r1, [pc, #32]	; (800845c <dhcp_dec_pcb_refcount+0x30>)
 800843a:	4809      	ldr	r0, [pc, #36]	; (8008460 <dhcp_dec_pcb_refcount+0x34>)
 800843c:	f006 ffb6 	bl	800f3ac <iprintf>
  dhcp_pcb_refcount--;
 8008440:	7a2c      	ldrb	r4, [r5, #8]
 8008442:	3c01      	subs	r4, #1
 8008444:	b2e4      	uxtb	r4, r4
 8008446:	722c      	strb	r4, [r5, #8]
  if (dhcp_pcb_refcount == 0) {
 8008448:	b91c      	cbnz	r4, 8008452 <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 800844a:	6868      	ldr	r0, [r5, #4]
 800844c:	f006 fdc2 	bl	800efd4 <udp_remove>
    dhcp_pcb = NULL;
 8008450:	606c      	str	r4, [r5, #4]
}
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	20010110 	.word	0x20010110
 8008458:	08014ec7 	.word	0x08014ec7
 800845c:	080150fe 	.word	0x080150fe
 8008460:	080144fe 	.word	0x080144fe

08008464 <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 8008464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008468:	6a44      	ldr	r4, [r0, #36]	; 0x24
dhcp_reboot(struct netif *netif)
 800846a:	b085      	sub	sp, #20
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800846c:	2103      	movs	r1, #3
dhcp_reboot(struct netif *netif)
 800846e:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8008470:	4620      	mov	r0, r4
 8008472:	f7ff fd5d 	bl	8007f30 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008476:	460a      	mov	r2, r1
 8008478:	f10d 030e 	add.w	r3, sp, #14
 800847c:	4621      	mov	r1, r4
 800847e:	4638      	mov	r0, r7
 8008480:	f7ff fdd4 	bl	800802c <dhcp_create_msg>
  if (p_out != NULL) {
 8008484:	4606      	mov	r6, r0
 8008486:	2800      	cmp	r0, #0
 8008488:	d04b      	beq.n	8008522 <dhcp_reboot.isra.0+0xbe>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800848a:	6845      	ldr	r5, [r0, #4]
 800848c:	2302      	movs	r3, #2
 800848e:	2239      	movs	r2, #57	; 0x39
 8008490:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008494:	35f0      	adds	r5, #240	; 0xf0
 8008496:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8008564 <dhcp_reboot.isra.0+0x100>
 800849a:	4629      	mov	r1, r5
 800849c:	f7ff fd6c 	bl	8007f78 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80084a0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80084a4:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80084a6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80084aa:	f7ff fd49 	bl	8007f40 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80084ae:	2304      	movs	r3, #4
 80084b0:	2232      	movs	r2, #50	; 0x32
 80084b2:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80084b4:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80084b8:	f7ff fd5e 	bl	8007f78 <dhcp_option>
 80084bc:	4680      	mov	r8, r0
 80084be:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80084c2:	69e0      	ldr	r0, [r4, #28]
 80084c4:	f002 f865 	bl	800a592 <lwip_htonl>
 80084c8:	4629      	mov	r1, r5
 80084ca:	4602      	mov	r2, r0
 80084cc:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80084ce:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80084d2:	f7ff fd87 	bl	8007fe4 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80084d6:	2303      	movs	r3, #3
 80084d8:	2237      	movs	r2, #55	; 0x37
 80084da:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80084dc:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80084e0:	f7ff fd4a 	bl	8007f78 <dhcp_option>
 80084e4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80084e8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80084ec:	f819 2b01 	ldrb.w	r2, [r9], #1
 80084f0:	4629      	mov	r1, r5
 80084f2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80084f6:	f7ff fd5d 	bl	8007fb4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80084fa:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80084fe:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008502:	d1f1      	bne.n	80084e8 <dhcp_reboot.isra.0+0x84>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008504:	4632      	mov	r2, r6
 8008506:	4629      	mov	r1, r5
 8008508:	f7ff fe24 	bl	8008154 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800850c:	4813      	ldr	r0, [pc, #76]	; (800855c <dhcp_reboot.isra.0+0xf8>)
 800850e:	9700      	str	r7, [sp, #0]
 8008510:	2343      	movs	r3, #67	; 0x43
 8008512:	4a13      	ldr	r2, [pc, #76]	; (8008560 <dhcp_reboot.isra.0+0xfc>)
 8008514:	4631      	mov	r1, r6
 8008516:	6840      	ldr	r0, [r0, #4]
 8008518:	f006 fcce 	bl	800eeb8 <udp_sendto_if>
    pbuf_free(p_out);
 800851c:	4630      	mov	r0, r6
 800851e:	f002 fdf5 	bl	800b10c <pbuf_free>
  if (dhcp->tries < 255) {
 8008522:	79a3      	ldrb	r3, [r4, #6]
 8008524:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008526:	bf1c      	itt	ne
 8008528:	3301      	addne	r3, #1
 800852a:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800852c:	79a3      	ldrb	r3, [r4, #6]
 800852e:	2b09      	cmp	r3, #9
 8008530:	bf96      	itet	ls
 8008532:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008536:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800853a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800853e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008542:	bf9c      	itt	ls
 8008544:	00db      	lslls	r3, r3, #3
 8008546:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008548:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800854c:	b29b      	uxth	r3, r3
 800854e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008552:	8123      	strh	r3, [r4, #8]
}
 8008554:	b005      	add	sp, #20
 8008556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800855a:	bf00      	nop
 800855c:	20010110 	.word	0x20010110
 8008560:	080142f4 	.word	0x080142f4
 8008564:	080142ee 	.word	0x080142ee

08008568 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8008568:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800856a:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800856c:	4d14      	ldr	r5, [pc, #80]	; (80085c0 <dhcp_handle_ack.isra.0+0x58>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 800856e:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008570:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8008574:	7b2b      	ldrb	r3, [r5, #12]
 8008576:	b10b      	cbz	r3, 800857c <dhcp_handle_ack.isra.0+0x14>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8008578:	6a2b      	ldr	r3, [r5, #32]
 800857a:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800857c:	7b6b      	ldrb	r3, [r5, #13]
 800857e:	b1b3      	cbz	r3, 80085ae <dhcp_handle_ack.isra.0+0x46>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8008580:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008582:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8008584:	7bab      	ldrb	r3, [r5, #14]
 8008586:	b1ab      	cbz	r3, 80085b4 <dhcp_handle_ack.isra.0+0x4c>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8008588:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800858a:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800858c:	690b      	ldr	r3, [r1, #16]
 800858e:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8008590:	7beb      	ldrb	r3, [r5, #15]
 8008592:	b123      	cbz	r3, 800859e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8008594:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8008596:	f001 fffc 	bl	800a592 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800859a:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800859c:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 800859e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80085a0:	7c2b      	ldrb	r3, [r5, #16]
 80085a2:	b11b      	cbz	r3, 80085ac <dhcp_handle_ack.isra.0+0x44>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80085a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80085a6:	f001 fff4 	bl	800a592 <lwip_htonl>
 80085aa:	6260      	str	r0, [r4, #36]	; 0x24
}
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80085ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085b0:	085b      	lsrs	r3, r3, #1
 80085b2:	e7e6      	b.n	8008582 <dhcp_handle_ack.isra.0+0x1a>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80085b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80085b6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80085ba:	08db      	lsrs	r3, r3, #3
 80085bc:	e7e5      	b.n	800858a <dhcp_handle_ack.isra.0+0x22>
 80085be:	bf00      	nop
 80085c0:	20010110 	.word	0x20010110

080085c4 <dhcp_select.isra.0>:
dhcp_select(struct netif *netif)
 80085c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80085c8:	4607      	mov	r7, r0
dhcp_select(struct netif *netif)
 80085ca:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80085cc:	b948      	cbnz	r0, 80085e2 <dhcp_select.isra.0+0x1e>
 80085ce:	4b4e      	ldr	r3, [pc, #312]	; (8008708 <dhcp_select.isra.0+0x144>)
 80085d0:	f240 1277 	movw	r2, #375	; 0x177
 80085d4:	494d      	ldr	r1, [pc, #308]	; (800870c <dhcp_select.isra.0+0x148>)
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80085d6:	484e      	ldr	r0, [pc, #312]	; (8008710 <dhcp_select.isra.0+0x14c>)
}
 80085d8:	b005      	add	sp, #20
 80085da:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80085de:	f006 bee5 	b.w	800f3ac <iprintf>
  dhcp = netif_dhcp_data(netif);
 80085e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80085e4:	b924      	cbnz	r4, 80085f0 <dhcp_select.isra.0+0x2c>
 80085e6:	4b48      	ldr	r3, [pc, #288]	; (8008708 <dhcp_select.isra.0+0x144>)
 80085e8:	f240 1279 	movw	r2, #377	; 0x179
 80085ec:	4949      	ldr	r1, [pc, #292]	; (8008714 <dhcp_select.isra.0+0x150>)
 80085ee:	e7f2      	b.n	80085d6 <dhcp_select.isra.0+0x12>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80085f0:	2101      	movs	r1, #1
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7ff fc9c 	bl	8007f30 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80085f8:	2203      	movs	r2, #3
 80085fa:	f10d 030e 	add.w	r3, sp, #14
 80085fe:	4621      	mov	r1, r4
 8008600:	4638      	mov	r0, r7
 8008602:	f7ff fd13 	bl	800802c <dhcp_create_msg>
  if (p_out != NULL) {
 8008606:	4606      	mov	r6, r0
 8008608:	2800      	cmp	r0, #0
 800860a:	d05e      	beq.n	80086ca <dhcp_select.isra.0+0x106>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800860c:	6845      	ldr	r5, [r0, #4]
 800860e:	2302      	movs	r3, #2
 8008610:	2239      	movs	r2, #57	; 0x39
 8008612:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008616:	35f0      	adds	r5, #240	; 0xf0
 8008618:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8008724 <dhcp_select.isra.0+0x160>
 800861c:	4629      	mov	r1, r5
 800861e:	f7ff fcab 	bl	8007f78 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008622:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008624:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008626:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800862a:	f7ff fc89 	bl	8007f40 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800862e:	2304      	movs	r3, #4
 8008630:	2232      	movs	r2, #50	; 0x32
 8008632:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008634:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008638:	f7ff fc9e 	bl	8007f78 <dhcp_option>
 800863c:	4680      	mov	r8, r0
 800863e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008642:	69e0      	ldr	r0, [r4, #28]
 8008644:	f001 ffa5 	bl	800a592 <lwip_htonl>
 8008648:	4629      	mov	r1, r5
 800864a:	4602      	mov	r2, r0
 800864c:	4640      	mov	r0, r8
 800864e:	f7ff fcc9 	bl	8007fe4 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008652:	2304      	movs	r3, #4
 8008654:	2236      	movs	r2, #54	; 0x36
 8008656:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008658:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800865c:	f7ff fc8c 	bl	8007f78 <dhcp_option>
 8008660:	4680      	mov	r8, r0
 8008662:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008666:	69a0      	ldr	r0, [r4, #24]
 8008668:	f001 ff93 	bl	800a592 <lwip_htonl>
 800866c:	4629      	mov	r1, r5
 800866e:	4602      	mov	r2, r0
 8008670:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008672:	f04f 0803 	mov.w	r8, #3
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008676:	f7ff fcb5 	bl	8007fe4 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800867a:	2303      	movs	r3, #3
 800867c:	2237      	movs	r2, #55	; 0x37
 800867e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008680:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008684:	f7ff fc78 	bl	8007f78 <dhcp_option>
 8008688:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800868c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008690:	f819 2b01 	ldrb.w	r2, [r9], #1
 8008694:	4629      	mov	r1, r5
 8008696:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800869a:	f7ff fc8b 	bl	8007fb4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800869e:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80086a2:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80086a6:	d1f1      	bne.n	800868c <dhcp_select.isra.0+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80086a8:	4632      	mov	r2, r6
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7ff fd52 	bl	8008154 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80086b0:	4b19      	ldr	r3, [pc, #100]	; (8008718 <dhcp_select.isra.0+0x154>)
 80086b2:	481a      	ldr	r0, [pc, #104]	; (800871c <dhcp_select.isra.0+0x158>)
 80086b4:	4631      	mov	r1, r6
 80086b6:	4a1a      	ldr	r2, [pc, #104]	; (8008720 <dhcp_select.isra.0+0x15c>)
 80086b8:	e9cd 7300 	strd	r7, r3, [sp]
 80086bc:	2343      	movs	r3, #67	; 0x43
 80086be:	6840      	ldr	r0, [r0, #4]
 80086c0:	f006 fb62 	bl	800ed88 <udp_sendto_if_src>
    pbuf_free(p_out);
 80086c4:	4630      	mov	r0, r6
 80086c6:	f002 fd21 	bl	800b10c <pbuf_free>
  if (dhcp->tries < 255) {
 80086ca:	79a3      	ldrb	r3, [r4, #6]
 80086cc:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80086ce:	bf1c      	itt	ne
 80086d0:	3301      	addne	r3, #1
 80086d2:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80086d4:	79a2      	ldrb	r2, [r4, #6]
 80086d6:	2a05      	cmp	r2, #5
 80086d8:	bf97      	itett	ls
 80086da:	2301      	movls	r3, #1
 80086dc:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80086e0:	4093      	lslls	r3, r2
 80086e2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80086e6:	bf98      	it	ls
 80086e8:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80086ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80086f0:	bf9c      	itt	ls
 80086f2:	00db      	lslls	r3, r3, #3
 80086f4:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80086f6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008700:	8123      	strh	r3, [r4, #8]
}
 8008702:	b005      	add	sp, #20
 8008704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008708:	08014ec7 	.word	0x08014ec7
 800870c:	08015122 	.word	0x08015122
 8008710:	080144fe 	.word	0x080144fe
 8008714:	0801513d 	.word	0x0801513d
 8008718:	080142f8 	.word	0x080142f8
 800871c:	20010110 	.word	0x20010110
 8008720:	080142f4 	.word	0x080142f4
 8008724:	080142ee 	.word	0x080142ee

08008728 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8008728:	4ba1      	ldr	r3, [pc, #644]	; (80089b0 <dhcp_recv+0x288>)
{
 800872a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800872e:	685e      	ldr	r6, [r3, #4]
{
 8008730:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008732:	6a73      	ldr	r3, [r6, #36]	; 0x24
{
 8008734:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008736:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8008738:	2b00      	cmp	r3, #0
 800873a:	d03c      	beq.n	80087b6 <dhcp_recv+0x8e>
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d039      	beq.n	80087b6 <dhcp_recv+0x8e>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8008742:	8953      	ldrh	r3, [r2, #10]
 8008744:	2b2b      	cmp	r3, #43	; 0x2b
 8008746:	d936      	bls.n	80087b6 <dhcp_recv+0x8e>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8008748:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800874a:	7813      	ldrb	r3, [r2, #0]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d132      	bne.n	80087b6 <dhcp_recv+0x8e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8008750:	f896 4030 	ldrb.w	r4, [r6, #48]	; 0x30
 8008754:	f106 002a 	add.w	r0, r6, #42	; 0x2a
 8008758:	f102 011c 	add.w	r1, r2, #28
 800875c:	2300      	movs	r3, #0
 800875e:	b2dd      	uxtb	r5, r3
 8008760:	42ac      	cmp	r4, r5
 8008762:	d901      	bls.n	8008768 <dhcp_recv+0x40>
 8008764:	2b06      	cmp	r3, #6
 8008766:	d11f      	bne.n	80087a8 <dhcp_recv+0x80>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8008768:	6850      	ldr	r0, [r2, #4]
 800876a:	f001 ff12 	bl	800a592 <lwip_htonl>
 800876e:	9b02      	ldr	r3, [sp, #8]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4298      	cmp	r0, r3
 8008774:	d11f      	bne.n	80087b6 <dhcp_recv+0x8e>
  dhcp_clear_all_options(dhcp);
 8008776:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80089d8 <dhcp_recv+0x2b0>
 800877a:	2300      	movs	r3, #0
  if (p->len < DHCP_SNAME_OFS) {
 800877c:	9a01      	ldr	r2, [sp, #4]
  dhcp_clear_all_options(dhcp);
 800877e:	f8c9 300d 	str.w	r3, [r9, #13]
  if (p->len < DHCP_SNAME_OFS) {
 8008782:	8952      	ldrh	r2, [r2, #10]
  dhcp_clear_all_options(dhcp);
 8008784:	f8c9 3009 	str.w	r3, [r9, #9]
  if (p->len < DHCP_SNAME_OFS) {
 8008788:	2a2b      	cmp	r2, #43	; 0x2b
 800878a:	d914      	bls.n	80087b6 <dhcp_recv+0x8e>
  options_idx_max = p->tot_len;
 800878c:	9a01      	ldr	r2, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 800878e:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 8008792:	9303      	str	r3, [sp, #12]
  options_idx_max = p->tot_len;
 8008794:	f8b2 a008 	ldrh.w	sl, [r2, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8008798:	9f01      	ldr	r7, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 800879a:	897b      	ldrh	r3, [r7, #10]
 800879c:	455b      	cmp	r3, fp
 800879e:	d910      	bls.n	80087c2 <dhcp_recv+0x9a>
  options = (u8_t *)q->payload;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	465c      	mov	r4, fp
 80087a4:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80087a6:	e0db      	b.n	8008960 <dhcp_recv+0x238>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80087a8:	f810 7b01 	ldrb.w	r7, [r0], #1
 80087ac:	3301      	adds	r3, #1
 80087ae:	f811 5b01 	ldrb.w	r5, [r1], #1
 80087b2:	42af      	cmp	r7, r5
 80087b4:	d0d3      	beq.n	800875e <dhcp_recv+0x36>
  pbuf_free(p);
 80087b6:	9801      	ldr	r0, [sp, #4]
}
 80087b8:	b009      	add	sp, #36	; 0x24
 80087ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80087be:	f002 bca5 	b.w	800b10c <pbuf_free>
    options_idx = (u16_t)(options_idx - q->len);
 80087c2:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80087c6:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 80087ca:	683f      	ldr	r7, [r7, #0]
    options_idx = (u16_t)(options_idx - q->len);
 80087cc:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80087d0:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 80087d4:	2f00      	cmp	r7, #0
 80087d6:	d1e0      	bne.n	800879a <dhcp_recv+0x72>
 80087d8:	e7ed      	b.n	80087b6 <dhcp_recv+0x8e>
    u16_t val_offset = (u16_t)(offset + 2);
 80087da:	1ca3      	adds	r3, r4, #2
 80087dc:	b29b      	uxth	r3, r3
    if (val_offset < offset) {
 80087de:	42a3      	cmp	r3, r4
    u16_t val_offset = (u16_t)(offset + 2);
 80087e0:	9304      	str	r3, [sp, #16]
    if (val_offset < offset) {
 80087e2:	d3e8      	bcc.n	80087b6 <dhcp_recv+0x8e>
    if ((offset + 1) < q->len) {
 80087e4:	1c60      	adds	r0, r4, #1
 80087e6:	897b      	ldrh	r3, [r7, #10]
 80087e8:	4298      	cmp	r0, r3
 80087ea:	da16      	bge.n	800881a <dhcp_recv+0xf2>
      len = options[offset + 1];
 80087ec:	9b05      	ldr	r3, [sp, #20]
 80087ee:	4423      	add	r3, r4
 80087f0:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 80087f2:	2a3b      	cmp	r2, #59	; 0x3b
 80087f4:	d854      	bhi.n	80088a0 <dhcp_recv+0x178>
 80087f6:	2a32      	cmp	r2, #50	; 0x32
 80087f8:	f200 8186 	bhi.w	8008b08 <dhcp_recv+0x3e0>
 80087fc:	2a01      	cmp	r2, #1
 80087fe:	d013      	beq.n	8008828 <dhcp_recv+0x100>
 8008800:	2a03      	cmp	r2, #3
 8008802:	d14d      	bne.n	80088a0 <dhcp_recv+0x178>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8008804:	2b03      	cmp	r3, #3
 8008806:	f200 816c 	bhi.w	8008ae2 <dhcp_recv+0x3ba>
 800880a:	4b6a      	ldr	r3, [pc, #424]	; (80089b4 <dhcp_recv+0x28c>)
 800880c:	f240 6233 	movw	r2, #1587	; 0x633
 8008810:	4969      	ldr	r1, [pc, #420]	; (80089b8 <dhcp_recv+0x290>)
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008812:	486a      	ldr	r0, [pc, #424]	; (80089bc <dhcp_recv+0x294>)
 8008814:	f006 fdca 	bl	800f3ac <iprintf>
 8008818:	e7cd      	b.n	80087b6 <dhcp_recv+0x8e>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8136 	beq.w	8008a8e <dhcp_recv+0x366>
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	e7e4      	b.n	80087f2 <dhcp_recv+0xca>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008828:	2b04      	cmp	r3, #4
 800882a:	f000 8157 	beq.w	8008adc <dhcp_recv+0x3b4>
 800882e:	4b61      	ldr	r3, [pc, #388]	; (80089b4 <dhcp_recv+0x28c>)
 8008830:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008834:	4962      	ldr	r1, [pc, #392]	; (80089c0 <dhcp_recv+0x298>)
 8008836:	e7ec      	b.n	8008812 <dhcp_recv+0xea>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008838:	2b04      	cmp	r3, #4
 800883a:	f000 8156 	beq.w	8008aea <dhcp_recv+0x3c2>
 800883e:	4b5d      	ldr	r3, [pc, #372]	; (80089b4 <dhcp_recv+0x28c>)
 8008840:	f240 6241 	movw	r2, #1601	; 0x641
 8008844:	e7f6      	b.n	8008834 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8008846:	2b01      	cmp	r3, #1
 8008848:	d004      	beq.n	8008854 <dhcp_recv+0x12c>
 800884a:	4b5a      	ldr	r3, [pc, #360]	; (80089b4 <dhcp_recv+0x28c>)
 800884c:	f240 624f 	movw	r2, #1615	; 0x64f
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8008850:	495c      	ldr	r1, [pc, #368]	; (80089c4 <dhcp_recv+0x29c>)
 8008852:	e7de      	b.n	8008812 <dhcp_recv+0xea>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8008854:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8008858:	f000 814a 	beq.w	8008af0 <dhcp_recv+0x3c8>
 800885c:	4b55      	ldr	r3, [pc, #340]	; (80089b4 <dhcp_recv+0x28c>)
 800885e:	f240 6251 	movw	r2, #1617	; 0x651
 8008862:	4959      	ldr	r1, [pc, #356]	; (80089c8 <dhcp_recv+0x2a0>)
 8008864:	e7d5      	b.n	8008812 <dhcp_recv+0xea>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8008866:	2b01      	cmp	r3, #1
 8008868:	f000 8148 	beq.w	8008afc <dhcp_recv+0x3d4>
 800886c:	4b51      	ldr	r3, [pc, #324]	; (80089b4 <dhcp_recv+0x28c>)
 800886e:	f240 6255 	movw	r2, #1621	; 0x655
 8008872:	e7ed      	b.n	8008850 <dhcp_recv+0x128>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008874:	2b04      	cmp	r3, #4
 8008876:	f000 813e 	beq.w	8008af6 <dhcp_recv+0x3ce>
 800887a:	4b4e      	ldr	r3, [pc, #312]	; (80089b4 <dhcp_recv+0x28c>)
 800887c:	f240 6259 	movw	r2, #1625	; 0x659
 8008880:	e7d8      	b.n	8008834 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008882:	2b04      	cmp	r3, #4
 8008884:	f000 813a 	beq.w	8008afc <dhcp_recv+0x3d4>
 8008888:	4b4a      	ldr	r3, [pc, #296]	; (80089b4 <dhcp_recv+0x28c>)
 800888a:	f240 625d 	movw	r2, #1629	; 0x65d
 800888e:	e7d1      	b.n	8008834 <dhcp_recv+0x10c>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008890:	2b04      	cmp	r3, #4
 8008892:	f000 8136 	beq.w	8008b02 <dhcp_recv+0x3da>
 8008896:	4b47      	ldr	r3, [pc, #284]	; (80089b4 <dhcp_recv+0x28c>)
 8008898:	f240 6261 	movw	r2, #1633	; 0x661
 800889c:	e7ca      	b.n	8008834 <dhcp_recv+0x10c>
    switch (op) {
 800889e:	2300      	movs	r3, #0
    if (op == DHCP_OPTION_PAD) {
 80088a0:	b9a2      	cbnz	r2, 80088cc <dhcp_recv+0x1a4>
      offset++;
 80088a2:	b284      	uxth	r4, r0
    if (offset >= q->len) {
 80088a4:	897b      	ldrh	r3, [r7, #10]
 80088a6:	42a3      	cmp	r3, r4
 80088a8:	d85a      	bhi.n	8008960 <dhcp_recv+0x238>
      offset = (u16_t)(offset - q->len);
 80088aa:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80088ac:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 80088b0:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80088b2:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 80088b6:	4554      	cmp	r4, sl
 80088b8:	f4bf af7d 	bcs.w	80087b6 <dhcp_recv+0x8e>
        q = q->next;
 80088bc:	683f      	ldr	r7, [r7, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80088be:	2f00      	cmp	r7, #0
 80088c0:	d14c      	bne.n	800895c <dhcp_recv+0x234>
 80088c2:	4b3c      	ldr	r3, [pc, #240]	; (80089b4 <dhcp_recv+0x28c>)
 80088c4:	f240 629d 	movw	r2, #1693	; 0x69d
 80088c8:	4940      	ldr	r1, [pc, #256]	; (80089cc <dhcp_recv+0x2a4>)
 80088ca:	e7a2      	b.n	8008812 <dhcp_recv+0xea>
 80088cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80088d0:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 80088d4:	441c      	add	r4, r3
 80088d6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80088da:	4294      	cmp	r4, r2
 80088dc:	f73f af6b 	bgt.w	80087b6 <dhcp_recv+0x8e>
      offset = (u16_t)(offset + len + 2);
 80088e0:	9a04      	ldr	r2, [sp, #16]
 80088e2:	4413      	add	r3, r2
 80088e4:	b29c      	uxth	r4, r3
      if (decode_len > 0) {
 80088e6:	f1b8 0f00 	cmp.w	r8, #0
 80088ea:	d0db      	beq.n	80088a4 <dhcp_recv+0x17c>
        u32_t value = 0;
 80088ec:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80088ee:	2d07      	cmp	r5, #7
        u32_t value = 0;
 80088f0:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80088f2:	d906      	bls.n	8008902 <dhcp_recv+0x1da>
 80088f4:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <dhcp_recv+0x28c>)
 80088f6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80088fa:	4935      	ldr	r1, [pc, #212]	; (80089d0 <dhcp_recv+0x2a8>)
 80088fc:	482f      	ldr	r0, [pc, #188]	; (80089bc <dhcp_recv+0x294>)
 80088fe:	f006 fd55 	bl	800f3ac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8008902:	eb09 0305 	add.w	r3, r9, r5
 8008906:	7a5b      	ldrb	r3, [r3, #9]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1cb      	bne.n	80088a4 <dhcp_recv+0x17c>
          copy_len = LWIP_MIN(decode_len, 4);
 800890c:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8008910:	9b04      	ldr	r3, [sp, #16]
 8008912:	a907      	add	r1, sp, #28
 8008914:	4638      	mov	r0, r7
 8008916:	9204      	str	r2, [sp, #16]
 8008918:	f002 fe1e 	bl	800b558 <pbuf_copy_partial>
 800891c:	9a04      	ldr	r2, [sp, #16]
 800891e:	4282      	cmp	r2, r0
 8008920:	f47f af49 	bne.w	80087b6 <dhcp_recv+0x8e>
          } else if (decode_len == 4) {
 8008924:	f1b8 0f04 	cmp.w	r8, #4
 8008928:	d10c      	bne.n	8008944 <dhcp_recv+0x21c>
            value = lwip_ntohl(value);
 800892a:	9807      	ldr	r0, [sp, #28]
 800892c:	f001 fe31 	bl	800a592 <lwip_htonl>
 8008930:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 8008932:	eb09 0305 	add.w	r3, r9, r5
 8008936:	2201      	movs	r2, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 8008938:	eb09 0585 	add.w	r5, r9, r5, lsl #2
          dhcp_got_option(dhcp, decode_idx);
 800893c:	725a      	strb	r2, [r3, #9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800893e:	9b07      	ldr	r3, [sp, #28]
 8008940:	616b      	str	r3, [r5, #20]
 8008942:	e7af      	b.n	80088a4 <dhcp_recv+0x17c>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8008944:	f1b8 0f01 	cmp.w	r8, #1
 8008948:	d004      	beq.n	8008954 <dhcp_recv+0x22c>
 800894a:	4b1a      	ldr	r3, [pc, #104]	; (80089b4 <dhcp_recv+0x28c>)
 800894c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8008950:	4920      	ldr	r1, [pc, #128]	; (80089d4 <dhcp_recv+0x2ac>)
 8008952:	e75e      	b.n	8008812 <dhcp_recv+0xea>
            value = ((u8_t *)&value)[0];
 8008954:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8008958:	9307      	str	r3, [sp, #28]
 800895a:	e7ea      	b.n	8008932 <dhcp_recv+0x20a>
        options = (u8_t *)q->payload;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8008960:	4554      	cmp	r4, sl
 8008962:	d204      	bcs.n	800896e <dhcp_recv+0x246>
 8008964:	9b05      	ldr	r3, [sp, #20]
 8008966:	5d1a      	ldrb	r2, [r3, r4]
 8008968:	2aff      	cmp	r2, #255	; 0xff
 800896a:	f47f af36 	bne.w	80087da <dhcp_recv+0xb2>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800896e:	f899 3009 	ldrb.w	r3, [r9, #9]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d132      	bne.n	80089dc <dhcp_recv+0x2b4>
  } else if (parse_sname_as_options) {
 8008976:	9b03      	ldr	r3, [sp, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d138      	bne.n	80089ee <dhcp_recv+0x2c6>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800897c:	f899 300a 	ldrb.w	r3, [r9, #10]
 8008980:	2b00      	cmp	r3, #0
 8008982:	f43f af18 	beq.w	80087b6 <dhcp_recv+0x8e>
  msg_in = (struct dhcp_msg *)p->payload;
 8008986:	9b01      	ldr	r3, [sp, #4]
 8008988:	6859      	ldr	r1, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800898a:	f899 3018 	ldrb.w	r3, [r9, #24]
  if (msg_type == DHCP_ACK) {
 800898e:	2b05      	cmp	r3, #5
 8008990:	d148      	bne.n	8008a24 <dhcp_recv+0x2fc>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8008992:	9b02      	ldr	r3, [sp, #8]
 8008994:	795b      	ldrb	r3, [r3, #5]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d139      	bne.n	8008a0e <dhcp_recv+0x2e6>
      dhcp_handle_ack(netif, msg_in);
 800899a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800899c:	f7ff fde4 	bl	8008568 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80089a0:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
        dhcp_check(netif);
 80089a4:	4630      	mov	r0, r6
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80089a6:	071b      	lsls	r3, r3, #28
 80089a8:	d539      	bpl.n	8008a1e <dhcp_recv+0x2f6>
        dhcp_check(netif);
 80089aa:	f7ff fc6b 	bl	8008284 <dhcp_check>
 80089ae:	e702      	b.n	80087b6 <dhcp_recv+0x8e>
 80089b0:	20010250 	.word	0x20010250
 80089b4:	08014ec7 	.word	0x08014ec7
 80089b8:	08015160 	.word	0x08015160
 80089bc:	080144fe 	.word	0x080144fe
 80089c0:	08015157 	.word	0x08015157
 80089c4:	08015172 	.word	0x08015172
 80089c8:	0801517b 	.word	0x0801517b
 80089cc:	080151b6 	.word	0x080151b6
 80089d0:	08015192 	.word	0x08015192
 80089d4:	080151a3 	.word	0x080151a3
 80089d8:	20010110 	.word	0x20010110
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80089dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80089e0:	2200      	movs	r2, #0
    if (overload == DHCP_OVERLOAD_FILE) {
 80089e2:	2b01      	cmp	r3, #1
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80089e4:	f889 2009 	strb.w	r2, [r9, #9]
    if (overload == DHCP_OVERLOAD_FILE) {
 80089e8:	d00c      	beq.n	8008a04 <dhcp_recv+0x2dc>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d106      	bne.n	80089fc <dhcp_recv+0x2d4>
    parse_sname_as_options = 0;
 80089ee:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80089f0:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 80089f4:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	e6cd      	b.n	8008798 <dhcp_recv+0x70>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d1ba      	bne.n	8008976 <dhcp_recv+0x24e>
      parse_sname_as_options = 1;
 8008a00:	2301      	movs	r3, #1
 8008a02:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8008a04:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8008a08:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8008a0c:	e6c4      	b.n	8008798 <dhcp_recv+0x70>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8008a0e:	3b03      	subs	r3, #3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	f63f aed0 	bhi.w	80087b6 <dhcp_recv+0x8e>
      dhcp_handle_ack(netif, msg_in);
 8008a16:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8008a18:	f7ff fda6 	bl	8008568 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff fc47 	bl	80082b0 <dhcp_bind>
 8008a22:	e6c8      	b.n	80087b6 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_NAK) &&
 8008a24:	2b06      	cmp	r3, #6
 8008a26:	d115      	bne.n	8008a54 <dhcp_recv+0x32c>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8008a28:	9b02      	ldr	r3, [sp, #8]
 8008a2a:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8008a2c:	1eda      	subs	r2, r3, #3
 8008a2e:	2a02      	cmp	r2, #2
 8008a30:	d902      	bls.n	8008a38 <dhcp_recv+0x310>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	f47f aebf 	bne.w	80087b6 <dhcp_recv+0x8e>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008a38:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8008a3a:	210c      	movs	r1, #12
 8008a3c:	f7ff fa78 	bl	8007f30 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008a40:	4b3e      	ldr	r3, [pc, #248]	; (8008b3c <dhcp_recv+0x414>)
 8008a42:	4630      	mov	r0, r6
 8008a44:	461a      	mov	r2, r3
 8008a46:	4619      	mov	r1, r3
 8008a48:	f002 f968 	bl	800ad1c <netif_set_addr>
  dhcp_discover(netif);
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7ff fba1 	bl	8008194 <dhcp_discover>
}
 8008a52:	e6b0      	b.n	80087b6 <dhcp_recv+0x8e>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	f47f aeae 	bne.w	80087b6 <dhcp_recv+0x8e>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	795b      	ldrb	r3, [r3, #5]
 8008a5e:	2b06      	cmp	r3, #6
 8008a60:	f47f aea9 	bne.w	80087b6 <dhcp_recv+0x8e>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8008a64:	f899 300b 	ldrb.w	r3, [r9, #11]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f43f aea4 	beq.w	80087b6 <dhcp_recv+0x8e>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008a6e:	6a74      	ldr	r4, [r6, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 8008a70:	9b03      	ldr	r3, [sp, #12]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8008a72:	f8d9 001c 	ldr.w	r0, [r9, #28]
    dhcp->request_timeout = 0; /* stop timer */
 8008a76:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8008a78:	9102      	str	r1, [sp, #8]
 8008a7a:	f001 fd8a 	bl	800a592 <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8008a7e:	9902      	ldr	r1, [sp, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8008a80:	61a0      	str	r0, [r4, #24]
    dhcp_select(netif);
 8008a82:	4630      	mov	r0, r6
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8008a84:	690b      	ldr	r3, [r1, #16]
 8008a86:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 8008a88:	f7ff fd9c 	bl	80085c4 <dhcp_select.isra.0>
 8008a8c:	e693      	b.n	80087b6 <dhcp_recv+0x8e>
    switch (op) {
 8008a8e:	2a3b      	cmp	r2, #59	; 0x3b
 8008a90:	f63f af06 	bhi.w	80088a0 <dhcp_recv+0x178>
 8008a94:	2a32      	cmp	r2, #50	; 0x32
 8008a96:	d806      	bhi.n	8008aa6 <dhcp_recv+0x37e>
 8008a98:	2a01      	cmp	r2, #1
 8008a9a:	f43f aec8 	beq.w	800882e <dhcp_recv+0x106>
 8008a9e:	2a03      	cmp	r2, #3
 8008aa0:	f43f aeb3 	beq.w	800880a <dhcp_recv+0xe2>
 8008aa4:	e6fc      	b.n	80088a0 <dhcp_recv+0x178>
 8008aa6:	f1a2 0333 	sub.w	r3, r2, #51	; 0x33
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	f63f aef7 	bhi.w	800889e <dhcp_recv+0x176>
 8008ab0:	a101      	add	r1, pc, #4	; (adr r1, 8008ab8 <dhcp_recv+0x390>)
 8008ab2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab6:	bf00      	nop
 8008ab8:	0800883f 	.word	0x0800883f
 8008abc:	0800884b 	.word	0x0800884b
 8008ac0:	0800886d 	.word	0x0800886d
 8008ac4:	0800887b 	.word	0x0800887b
 8008ac8:	0800889f 	.word	0x0800889f
 8008acc:	0800889f 	.word	0x0800889f
 8008ad0:	0800889f 	.word	0x0800889f
 8008ad4:	08008889 	.word	0x08008889
 8008ad8:	08008897 	.word	0x08008897
 8008adc:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8008ade:	2506      	movs	r5, #6
 8008ae0:	e6f8      	b.n	80088d4 <dhcp_recv+0x1ac>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8008ae2:	2507      	movs	r5, #7
        decode_len = 4; /* only copy the first given router */
 8008ae4:	f04f 0804 	mov.w	r8, #4
 8008ae8:	e6f4      	b.n	80088d4 <dhcp_recv+0x1ac>
 8008aea:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8008aec:	2503      	movs	r5, #3
 8008aee:	e6f1      	b.n	80088d4 <dhcp_recv+0x1ac>
    decode_len = len;
 8008af0:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8008af2:	2500      	movs	r5, #0
 8008af4:	e6ee      	b.n	80088d4 <dhcp_recv+0x1ac>
 8008af6:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8008af8:	2502      	movs	r5, #2
 8008afa:	e6eb      	b.n	80088d4 <dhcp_recv+0x1ac>
 8008afc:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8008afe:	461d      	mov	r5, r3
 8008b00:	e6e8      	b.n	80088d4 <dhcp_recv+0x1ac>
 8008b02:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8008b04:	2505      	movs	r5, #5
    if (op == DHCP_OPTION_PAD) {
 8008b06:	e6e5      	b.n	80088d4 <dhcp_recv+0x1ac>
    switch (op) {
 8008b08:	f1a2 0133 	sub.w	r1, r2, #51	; 0x33
 8008b0c:	2908      	cmp	r1, #8
 8008b0e:	f63f aec7 	bhi.w	80088a0 <dhcp_recv+0x178>
 8008b12:	a501      	add	r5, pc, #4	; (adr r5, 8008b18 <dhcp_recv+0x3f0>)
 8008b14:	f855 f021 	ldr.w	pc, [r5, r1, lsl #2]
 8008b18:	08008839 	.word	0x08008839
 8008b1c:	08008847 	.word	0x08008847
 8008b20:	08008867 	.word	0x08008867
 8008b24:	08008875 	.word	0x08008875
 8008b28:	080088a1 	.word	0x080088a1
 8008b2c:	080088a1 	.word	0x080088a1
 8008b30:	080088a1 	.word	0x080088a1
 8008b34:	08008883 	.word	0x08008883
 8008b38:	08008891 	.word	0x08008891
 8008b3c:	080142f8 	.word	0x080142f8

08008b40 <dhcp_network_changed>:
{
 8008b40:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008b42:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8008b44:	4604      	mov	r4, r0
  if (!dhcp) {
 8008b46:	b1fd      	cbz	r5, 8008b88 <dhcp_network_changed+0x48>
  switch (dhcp->state) {
 8008b48:	796b      	ldrb	r3, [r5, #5]
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d809      	bhi.n	8008b62 <dhcp_network_changed+0x22>
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d809      	bhi.n	8008b66 <dhcp_network_changed+0x26>
 8008b52:	b1cb      	cbz	r3, 8008b88 <dhcp_network_changed+0x48>
      dhcp->tries = 0;
 8008b54:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8008b56:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8008b58:	71ab      	strb	r3, [r5, #6]
}
 8008b5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 8008b5e:	f7ff bb19 	b.w	8008194 <dhcp_discover>
  switch (dhcp->state) {
 8008b62:	2b0a      	cmp	r3, #10
 8008b64:	d106      	bne.n	8008b74 <dhcp_network_changed+0x34>
      dhcp->tries = 0;
 8008b66:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8008b68:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8008b6a:	71ab      	strb	r3, [r5, #6]
}
 8008b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8008b70:	f7ff bc78 	b.w	8008464 <dhcp_reboot.isra.0>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8008b74:	2b0c      	cmp	r3, #12
 8008b76:	d9ed      	bls.n	8008b54 <dhcp_network_changed+0x14>
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <dhcp_network_changed+0x4c>)
 8008b7a:	f240 326d 	movw	r2, #877	; 0x36d
 8008b7e:	4904      	ldr	r1, [pc, #16]	; (8008b90 <dhcp_network_changed+0x50>)
 8008b80:	4804      	ldr	r0, [pc, #16]	; (8008b94 <dhcp_network_changed+0x54>)
 8008b82:	f006 fc13 	bl	800f3ac <iprintf>
 8008b86:	e7e5      	b.n	8008b54 <dhcp_network_changed+0x14>
}
 8008b88:	bd38      	pop	{r3, r4, r5, pc}
 8008b8a:	bf00      	nop
 8008b8c:	08014ec7 	.word	0x08014ec7
 8008b90:	080151ed 	.word	0x080151ed
 8008b94:	080144fe 	.word	0x080144fe

08008b98 <dhcp_arp_reply>:
{
 8008b98:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008b9a:	4606      	mov	r6, r0
{
 8008b9c:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008b9e:	b948      	cbnz	r0, 8008bb4 <dhcp_arp_reply+0x1c>
 8008ba0:	4b28      	ldr	r3, [pc, #160]	; (8008c44 <dhcp_arp_reply+0xac>)
 8008ba2:	f240 328b 	movw	r2, #907	; 0x38b
 8008ba6:	4928      	ldr	r1, [pc, #160]	; (8008c48 <dhcp_arp_reply+0xb0>)
 8008ba8:	4828      	ldr	r0, [pc, #160]	; (8008c4c <dhcp_arp_reply+0xb4>)
}
 8008baa:	b007      	add	sp, #28
 8008bac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008bb0:	f006 bbfc 	b.w	800f3ac <iprintf>
  dhcp = netif_dhcp_data(netif);
 8008bb4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8008bb6:	2c00      	cmp	r4, #0
 8008bb8:	d041      	beq.n	8008c3e <dhcp_arp_reply+0xa6>
 8008bba:	7963      	ldrb	r3, [r4, #5]
 8008bbc:	2b08      	cmp	r3, #8
 8008bbe:	d13e      	bne.n	8008c3e <dhcp_arp_reply+0xa6>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8008bc0:	680a      	ldr	r2, [r1, #0]
 8008bc2:	69e3      	ldr	r3, [r4, #28]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d13a      	bne.n	8008c3e <dhcp_arp_reply+0xa6>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008bc8:	210c      	movs	r1, #12
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f7ff f9b0 	bl	8007f30 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8008bd0:	2204      	movs	r2, #4
 8008bd2:	f10d 0316 	add.w	r3, sp, #22
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f7ff fa27 	bl	800802c <dhcp_create_msg>
  if (p_out != NULL) {
 8008bde:	4605      	mov	r5, r0
 8008be0:	b330      	cbz	r0, 8008c30 <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008be2:	6841      	ldr	r1, [r0, #4]
 8008be4:	2304      	movs	r3, #4
 8008be6:	2232      	movs	r2, #50	; 0x32
 8008be8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008bec:	31f0      	adds	r1, #240	; 0xf0
 8008bee:	9103      	str	r1, [sp, #12]
 8008bf0:	f7ff f9c2 	bl	8007f78 <dhcp_option>
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008bfa:	69e0      	ldr	r0, [r4, #28]
 8008bfc:	f001 fcc9 	bl	800a592 <lwip_htonl>
 8008c00:	9903      	ldr	r1, [sp, #12]
 8008c02:	4602      	mov	r2, r0
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff f9ed 	bl	8007fe4 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008c0e:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008c12:	f7ff fa9f 	bl	8008154 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008c16:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <dhcp_arp_reply+0xb8>)
 8008c18:	4629      	mov	r1, r5
 8008c1a:	480e      	ldr	r0, [pc, #56]	; (8008c54 <dhcp_arp_reply+0xbc>)
 8008c1c:	4a0e      	ldr	r2, [pc, #56]	; (8008c58 <dhcp_arp_reply+0xc0>)
 8008c1e:	e9cd 6300 	strd	r6, r3, [sp]
 8008c22:	2343      	movs	r3, #67	; 0x43
 8008c24:	6840      	ldr	r0, [r0, #4]
 8008c26:	f006 f8af 	bl	800ed88 <udp_sendto_if_src>
    pbuf_free(p_out);
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	f002 fa6e 	bl	800b10c <pbuf_free>
  if (dhcp->tries < 255) {
 8008c30:	79a3      	ldrb	r3, [r4, #6]
 8008c32:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008c34:	bf1c      	itt	ne
 8008c36:	3301      	addne	r3, #1
 8008c38:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008c3a:	2314      	movs	r3, #20
 8008c3c:	8123      	strh	r3, [r4, #8]
}
 8008c3e:	b007      	add	sp, #28
 8008c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	08014ec7 	.word	0x08014ec7
 8008c48:	080150b3 	.word	0x080150b3
 8008c4c:	080144fe 	.word	0x080144fe
 8008c50:	080142f8 	.word	0x080142f8
 8008c54:	20010110 	.word	0x20010110
 8008c58:	080142f4 	.word	0x080142f4

08008c5c <dhcp_renew>:
{
 8008c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008c60:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008c62:	b086      	sub	sp, #24
 8008c64:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8008c66:	2105      	movs	r1, #5
 8008c68:	4620      	mov	r0, r4
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008c6a:	2203      	movs	r2, #3
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8008c6c:	f7ff f960 	bl	8007f30 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008c70:	f10d 0316 	add.w	r3, sp, #22
 8008c74:	4621      	mov	r1, r4
 8008c76:	4630      	mov	r0, r6
 8008c78:	f7ff f9d8 	bl	800802c <dhcp_create_msg>
  if (p_out != NULL) {
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	d056      	beq.n	8008d30 <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008c82:	6841      	ldr	r1, [r0, #4]
 8008c84:	2302      	movs	r3, #2
 8008c86:	2239      	movs	r2, #57	; 0x39
 8008c88:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008c8c:	31f0      	adds	r1, #240	; 0xf0
 8008c8e:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008d3c <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008c92:	2703      	movs	r7, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008c94:	9103      	str	r1, [sp, #12]
 8008c96:	f7ff f96f 	bl	8007f78 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008c9a:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 8008c9c:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008c9e:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008ca2:	f7ff f94d 	bl	8007f40 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008ca6:	9903      	ldr	r1, [sp, #12]
 8008ca8:	2303      	movs	r3, #3
 8008caa:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008cac:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008cb0:	f7ff f962 	bl	8007f78 <dhcp_option>
 8008cb4:	9903      	ldr	r1, [sp, #12]
 8008cb6:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008cba:	3f01      	subs	r7, #1
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008cbc:	f818 2b01 	ldrb.w	r2, [r8], #1
 8008cc0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008cc4:	9103      	str	r1, [sp, #12]
 8008cc6:	f7ff f975 	bl	8007fb4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008cca:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8008cce:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008cd0:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008cd4:	d1f1      	bne.n	8008cba <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	f7ff fa3c 	bl	8008154 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008cdc:	4816      	ldr	r0, [pc, #88]	; (8008d38 <dhcp_renew+0xdc>)
 8008cde:	9600      	str	r6, [sp, #0]
 8008ce0:	2343      	movs	r3, #67	; 0x43
 8008ce2:	f104 0218 	add.w	r2, r4, #24
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	6840      	ldr	r0, [r0, #4]
 8008cea:	f006 f8e5 	bl	800eeb8 <udp_sendto_if>
 8008cee:	4606      	mov	r6, r0
    pbuf_free(p_out);
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	f002 fa0b 	bl	800b10c <pbuf_free>
  if (dhcp->tries < 255) {
 8008cf6:	79a3      	ldrb	r3, [r4, #6]
}
 8008cf8:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 8008cfa:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008cfc:	bf1c      	itt	ne
 8008cfe:	3301      	addne	r3, #1
 8008d00:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008d02:	79a3      	ldrb	r3, [r4, #6]
 8008d04:	2b09      	cmp	r3, #9
 8008d06:	bf96      	itet	ls
 8008d08:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008d0c:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8008d10:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008d18:	bf9c      	itt	ls
 8008d1a:	011b      	lslls	r3, r3, #4
 8008d1c:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d1e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d28:	8123      	strh	r3, [r4, #8]
}
 8008d2a:	b006      	add	sp, #24
 8008d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    result = ERR_MEM;
 8008d30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8008d34:	e7df      	b.n	8008cf6 <dhcp_renew+0x9a>
 8008d36:	bf00      	nop
 8008d38:	20010110 	.word	0x20010110
 8008d3c:	080142ee 	.word	0x080142ee

08008d40 <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8008d40:	b150      	cbz	r0, 8008d58 <dhcp_supplied_address+0x18>
 8008d42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008d44:	b140      	cbz	r0, 8008d58 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8008d46:	7940      	ldrb	r0, [r0, #5]
 8008d48:	280a      	cmp	r0, #10
 8008d4a:	d006      	beq.n	8008d5a <dhcp_supplied_address+0x1a>
 8008d4c:	3804      	subs	r0, #4
 8008d4e:	2801      	cmp	r0, #1
 8008d50:	bf8c      	ite	hi
 8008d52:	2000      	movhi	r0, #0
 8008d54:	2001      	movls	r0, #1
 8008d56:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8008d58:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	e7fb      	b.n	8008d56 <dhcp_supplied_address+0x16>
	...

08008d60 <dhcp_release_and_stop>:
{
 8008d60:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008d62:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008d64:	b087      	sub	sp, #28
 8008d66:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8008d68:	2c00      	cmp	r4, #0
 8008d6a:	d050      	beq.n	8008e0e <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 8008d6c:	7963      	ldrb	r3, [r4, #5]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d04d      	beq.n	8008e0e <dhcp_release_and_stop+0xae>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008d72:	69a3      	ldr	r3, [r4, #24]
 8008d74:	9305      	str	r3, [sp, #20]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8008d76:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8008d78:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008d7c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008d80:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8008d84:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8008d86:	81e3      	strh	r3, [r4, #14]
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	82a3      	strh	r3, [r4, #20]
  if (dhcp_supplied_address(netif)) {
 8008d8c:	f7ff ffd8 	bl	8008d40 <dhcp_supplied_address>
 8008d90:	b368      	cbz	r0, 8008dee <dhcp_release_and_stop+0x8e>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8008d92:	f10d 0312 	add.w	r3, sp, #18
 8008d96:	2207      	movs	r2, #7
 8008d98:	4621      	mov	r1, r4
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	f7ff f946 	bl	800802c <dhcp_create_msg>
    if (p_out != NULL) {
 8008da0:	4605      	mov	r5, r0
 8008da2:	b320      	cbz	r0, 8008dee <dhcp_release_and_stop+0x8e>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008da4:	6841      	ldr	r1, [r0, #4]
 8008da6:	2304      	movs	r3, #4
 8008da8:	2236      	movs	r2, #54	; 0x36
 8008daa:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 8008dae:	31f0      	adds	r1, #240	; 0xf0
 8008db0:	9103      	str	r1, [sp, #12]
 8008db2:	f7ff f8e1 	bl	8007f78 <dhcp_option>
 8008db6:	4607      	mov	r7, r0
 8008db8:	f8ad 0012 	strh.w	r0, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008dbc:	9805      	ldr	r0, [sp, #20]
 8008dbe:	f001 fbe8 	bl	800a592 <lwip_htonl>
 8008dc2:	9903      	ldr	r1, [sp, #12]
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	f7ff f90c 	bl	8007fe4 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008dcc:	462a      	mov	r2, r5
 8008dce:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008dd0:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008dd4:	f7ff f9be 	bl	8008154 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008dd8:	480e      	ldr	r0, [pc, #56]	; (8008e14 <dhcp_release_and_stop+0xb4>)
 8008dda:	2343      	movs	r3, #67	; 0x43
 8008ddc:	9600      	str	r6, [sp, #0]
 8008dde:	aa05      	add	r2, sp, #20
 8008de0:	4629      	mov	r1, r5
 8008de2:	6840      	ldr	r0, [r0, #4]
 8008de4:	f006 f868 	bl	800eeb8 <udp_sendto_if>
      pbuf_free(p_out);
 8008de8:	4628      	mov	r0, r5
 8008dea:	f002 f98f 	bl	800b10c <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008dee:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <dhcp_release_and_stop+0xb8>)
 8008df0:	4630      	mov	r0, r6
 8008df2:	4619      	mov	r1, r3
 8008df4:	461a      	mov	r2, r3
 8008df6:	f001 ff91 	bl	800ad1c <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4620      	mov	r0, r4
 8008dfe:	f7ff f897 	bl	8007f30 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8008e02:	7923      	ldrb	r3, [r4, #4]
 8008e04:	b11b      	cbz	r3, 8008e0e <dhcp_release_and_stop+0xae>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008e06:	f7ff fb11 	bl	800842c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	7123      	strb	r3, [r4, #4]
}
 8008e0e:	b007      	add	sp, #28
 8008e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20010110 	.word	0x20010110
 8008e18:	080142f8 	.word	0x080142f8

08008e1c <dhcp_start>:
{
 8008e1c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008e1e:	4604      	mov	r4, r0
 8008e20:	b950      	cbnz	r0, 8008e38 <dhcp_start+0x1c>
 8008e22:	4b24      	ldr	r3, [pc, #144]	; (8008eb4 <dhcp_start+0x98>)
 8008e24:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008e28:	4923      	ldr	r1, [pc, #140]	; (8008eb8 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008e2a:	4824      	ldr	r0, [pc, #144]	; (8008ebc <dhcp_start+0xa0>)
 8008e2c:	f006 fabe 	bl	800f3ac <iprintf>
 8008e30:	f06f 020f 	mvn.w	r2, #15
}
 8008e34:	4610      	mov	r0, r2
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008e38:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008e3c:	07da      	lsls	r2, r3, #31
 8008e3e:	d404      	bmi.n	8008e4a <dhcp_start+0x2e>
 8008e40:	4b1c      	ldr	r3, [pc, #112]	; (8008eb4 <dhcp_start+0x98>)
 8008e42:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8008e46:	491e      	ldr	r1, [pc, #120]	; (8008ec0 <dhcp_start+0xa4>)
 8008e48:	e7ef      	b.n	8008e2a <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008e4a:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8008e4c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008e4e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008e52:	d202      	bcs.n	8008e5a <dhcp_start+0x3e>
    return ERR_MEM;
 8008e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e58:	e7ec      	b.n	8008e34 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8008e5a:	b9dd      	cbnz	r5, 8008e94 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008e5c:	2034      	movs	r0, #52	; 0x34
 8008e5e:	f001 fdad 	bl	800a9bc <mem_malloc>
    if (dhcp == NULL) {
 8008e62:	4605      	mov	r5, r0
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d0f5      	beq.n	8008e54 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8008e68:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8008e6a:	2234      	movs	r2, #52	; 0x34
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4628      	mov	r0, r5
 8008e70:	f006 fa94 	bl	800f39c <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008e74:	f7ff faa4 	bl	80083c0 <dhcp_inc_pcb_refcount>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1ea      	bne.n	8008e54 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8008e82:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008e86:	075b      	lsls	r3, r3, #29
 8008e88:	d40a      	bmi.n	8008ea0 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8008e8a:	2102      	movs	r1, #2
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	f7ff f84f 	bl	8007f30 <dhcp_set_state>
    return ERR_OK;
 8008e92:	e7cf      	b.n	8008e34 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8008e94:	792b      	ldrb	r3, [r5, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0e7      	beq.n	8008e6a <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008e9a:	f7ff fac7 	bl	800842c <dhcp_dec_pcb_refcount>
 8008e9e:	e7e4      	b.n	8008e6a <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	f7ff f977 	bl	8008194 <dhcp_discover>
  if (result != ERR_OK) {
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d0c3      	beq.n	8008e34 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8008eac:	4620      	mov	r0, r4
 8008eae:	f7ff ff57 	bl	8008d60 <dhcp_release_and_stop>
 8008eb2:	e7cf      	b.n	8008e54 <dhcp_start+0x38>
 8008eb4:	08014ec7 	.word	0x08014ec7
 8008eb8:	080150b3 	.word	0x080150b3
 8008ebc:	080144fe 	.word	0x080144fe
 8008ec0:	08015201 	.word	0x08015201

08008ec4 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8008ec4:	4b59      	ldr	r3, [pc, #356]	; (800902c <dhcp_coarse_tmr+0x168>)
{
 8008ec6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8008eca:	681d      	ldr	r5, [r3, #0]
{
 8008ecc:	b087      	sub	sp, #28
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008ece:	f240 2619 	movw	r6, #537	; 0x219
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008ed2:	4f57      	ldr	r7, [pc, #348]	; (8009030 <dhcp_coarse_tmr+0x16c>)
 8008ed4:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8009034 <dhcp_coarse_tmr+0x170>
  NETIF_FOREACH(netif) {
 8008ed8:	b915      	cbnz	r5, 8008ee0 <dhcp_coarse_tmr+0x1c>
}
 8008eda:	b007      	add	sp, #28
 8008edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8008ee0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8008ee2:	b17c      	cbz	r4, 8008f04 <dhcp_coarse_tmr+0x40>
 8008ee4:	7963      	ldrb	r3, [r4, #5]
 8008ee6:	b16b      	cbz	r3, 8008f04 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8008ee8:	8aa1      	ldrh	r1, [r4, #20]
 8008eea:	b169      	cbz	r1, 8008f08 <dhcp_coarse_tmr+0x44>
 8008eec:	8a62      	ldrh	r2, [r4, #18]
 8008eee:	3201      	adds	r2, #1
 8008ef0:	b292      	uxth	r2, r2
 8008ef2:	4291      	cmp	r1, r2
 8008ef4:	8262      	strh	r2, [r4, #18]
 8008ef6:	d107      	bne.n	8008f08 <dhcp_coarse_tmr+0x44>
        dhcp_release_and_stop(netif);
 8008ef8:	4628      	mov	r0, r5
 8008efa:	f7ff ff31 	bl	8008d60 <dhcp_release_and_stop>
        dhcp_start(netif);
 8008efe:	4628      	mov	r0, r5
 8008f00:	f7ff ff8c 	bl	8008e1c <dhcp_start>
  NETIF_FOREACH(netif) {
 8008f04:	682d      	ldr	r5, [r5, #0]
 8008f06:	e7e7      	b.n	8008ed8 <dhcp_coarse_tmr+0x14>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8008f08:	8a22      	ldrh	r2, [r4, #16]
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	d073      	beq.n	8008ff6 <dhcp_coarse_tmr+0x132>
 8008f0e:	1e51      	subs	r1, r2, #1
 8008f10:	2a01      	cmp	r2, #1
 8008f12:	8221      	strh	r1, [r4, #16]
 8008f14:	d16f      	bne.n	8008ff6 <dhcp_coarse_tmr+0x132>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008f16:	3b01      	subs	r3, #1
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b09      	cmp	r3, #9
 8008f1c:	d8f2      	bhi.n	8008f04 <dhcp_coarse_tmr+0x40>
 8008f1e:	fa26 f303 	lsr.w	r3, r6, r3
 8008f22:	07db      	lsls	r3, r3, #31
 8008f24:	d5ee      	bpl.n	8008f04 <dhcp_coarse_tmr+0x40>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8008f26:	2104      	movs	r1, #4
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f7ff f801 	bl	8007f30 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008f2e:	2203      	movs	r2, #3
 8008f30:	f10d 0316 	add.w	r3, sp, #22
 8008f34:	4621      	mov	r1, r4
 8008f36:	4628      	mov	r0, r5
 8008f38:	f7ff f878 	bl	800802c <dhcp_create_msg>
  if (p_out != NULL) {
 8008f3c:	4681      	mov	r9, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d038      	beq.n	8008fb4 <dhcp_coarse_tmr+0xf0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008f42:	6841      	ldr	r1, [r0, #4]
 8008f44:	2302      	movs	r3, #2
 8008f46:	2239      	movs	r2, #57	; 0x39
 8008f48:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008f4c:	31f0      	adds	r1, #240	; 0xf0
 8008f4e:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 8009038 <dhcp_coarse_tmr+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008f52:	f04f 0a03 	mov.w	sl, #3
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008f56:	9103      	str	r1, [sp, #12]
 8008f58:	f7ff f80e 	bl	8007f78 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008f5c:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8008f5e:	9903      	ldr	r1, [sp, #12]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008f60:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008f64:	f7fe ffec 	bl	8007f40 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008f68:	9903      	ldr	r1, [sp, #12]
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008f6e:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008f72:	f7ff f801 	bl	8007f78 <dhcp_option>
 8008f76:	9903      	ldr	r1, [sp, #12]
 8008f78:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008f7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008f80:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8008f84:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8008f88:	9103      	str	r1, [sp, #12]
 8008f8a:	f7ff f813 	bl	8007fb4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008f8e:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
 8008f92:	9903      	ldr	r1, [sp, #12]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008f94:	f8ad 0016 	strh.w	r0, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008f98:	d1f0      	bne.n	8008f7c <dhcp_coarse_tmr+0xb8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008f9a:	464a      	mov	r2, r9
 8008f9c:	f7ff f8da 	bl	8008154 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008fa0:	2343      	movs	r3, #67	; 0x43
 8008fa2:	4642      	mov	r2, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	9500      	str	r5, [sp, #0]
 8008faa:	f005 ff85 	bl	800eeb8 <udp_sendto_if>
    pbuf_free(p_out);
 8008fae:	4648      	mov	r0, r9
 8008fb0:	f002 f8ac 	bl	800b10c <pbuf_free>
  if (dhcp->tries < 255) {
 8008fb4:	79a3      	ldrb	r3, [r4, #6]
 8008fb6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008fb8:	bf1c      	itt	ne
 8008fba:	3301      	addne	r3, #1
 8008fbc:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008fbe:	79a3      	ldrb	r3, [r4, #6]
 8008fc0:	2b09      	cmp	r3, #9
 8008fc2:	bf96      	itet	ls
 8008fc4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008fc8:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8008fcc:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008fd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008fd4:	bf9c      	itt	ls
 8008fd6:	00db      	lslls	r3, r3, #3
 8008fd8:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008fda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008fe4:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008fe6:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008fe8:	8aa3      	ldrh	r3, [r4, #20]
 8008fea:	1a9b      	subs	r3, r3, r2
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	dd89      	ble.n	8008f04 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008ff0:	105b      	asrs	r3, r3, #1
 8008ff2:	8223      	strh	r3, [r4, #16]
 8008ff4:	e786      	b.n	8008f04 <dhcp_coarse_tmr+0x40>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8008ff6:	89e2      	ldrh	r2, [r4, #14]
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	d083      	beq.n	8008f04 <dhcp_coarse_tmr+0x40>
 8008ffc:	1e51      	subs	r1, r2, #1
 8008ffe:	2a01      	cmp	r2, #1
 8009000:	81e1      	strh	r1, [r4, #14]
 8009002:	f47f af7f 	bne.w	8008f04 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009006:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800900a:	2a01      	cmp	r2, #1
 800900c:	d002      	beq.n	8009014 <dhcp_coarse_tmr+0x150>
 800900e:	2b0a      	cmp	r3, #10
 8009010:	f47f af78 	bne.w	8008f04 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 8009014:	4628      	mov	r0, r5
 8009016:	f7ff fe21 	bl	8008c5c <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	8a62      	ldrh	r2, [r4, #18]
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009022:	bfc4      	itt	gt
 8009024:	105b      	asrgt	r3, r3, #1
 8009026:	81e3      	strhgt	r3, [r4, #14]
 8009028:	e76c      	b.n	8008f04 <dhcp_coarse_tmr+0x40>
 800902a:	bf00      	nop
 800902c:	20014038 	.word	0x20014038
 8009030:	20010110 	.word	0x20010110
 8009034:	080142f4 	.word	0x080142f4
 8009038:	080142ee 	.word	0x080142ee

0800903c <dhcp_fine_tmr>:
{
 800903c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 800903e:	4b1e      	ldr	r3, [pc, #120]	; (80090b8 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8009040:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8009042:	681c      	ldr	r4, [r3, #0]
 8009044:	b904      	cbnz	r4, 8009048 <dhcp_fine_tmr+0xc>
}
 8009046:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009048:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 800904a:	b123      	cbz	r3, 8009056 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 800904c:	891a      	ldrh	r2, [r3, #8]
 800904e:	2a01      	cmp	r2, #1
 8009050:	d903      	bls.n	800905a <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8009052:	3a01      	subs	r2, #1
 8009054:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8009056:	6824      	ldr	r4, [r4, #0]
 8009058:	e7f4      	b.n	8009044 <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 800905a:	d1fc      	bne.n	8009056 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800905c:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 800905e:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009060:	2a0c      	cmp	r2, #12
 8009062:	d001      	beq.n	8009068 <dhcp_fine_tmr+0x2c>
 8009064:	2a06      	cmp	r2, #6
 8009066:	d103      	bne.n	8009070 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8009068:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800906a:	f7ff f893 	bl	8008194 <dhcp_discover>
 800906e:	e7f2      	b.n	8009056 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8009070:	2a01      	cmp	r2, #1
 8009072:	d10c      	bne.n	800908e <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8009074:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8009076:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8009078:	2b05      	cmp	r3, #5
 800907a:	d802      	bhi.n	8009082 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 800907c:	f7ff faa2 	bl	80085c4 <dhcp_select.isra.0>
 8009080:	e7e9      	b.n	8009056 <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8009082:	f7ff fe6d 	bl	8008d60 <dhcp_release_and_stop>
      dhcp_start(netif);
 8009086:	4620      	mov	r0, r4
 8009088:	f7ff fec8 	bl	8008e1c <dhcp_start>
 800908c:	e7e3      	b.n	8009056 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800908e:	2a08      	cmp	r2, #8
 8009090:	d109      	bne.n	80090a6 <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8009092:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8009094:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8009096:	2b01      	cmp	r3, #1
 8009098:	d802      	bhi.n	80090a0 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 800909a:	f7ff f8f3 	bl	8008284 <dhcp_check>
 800909e:	e7da      	b.n	8009056 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80090a0:	f7ff f906 	bl	80082b0 <dhcp_bind>
 80090a4:	e7d7      	b.n	8009056 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80090a6:	2a03      	cmp	r2, #3
 80090a8:	d1d5      	bne.n	8009056 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80090aa:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80090ac:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d8db      	bhi.n	800906a <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80090b2:	f7ff f9d7 	bl	8008464 <dhcp_reboot.isra.0>
 80090b6:	e7ce      	b.n	8009056 <dhcp_fine_tmr+0x1a>
 80090b8:	20014038 	.word	0x20014038

080090bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80090bc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80090be:	2618      	movs	r6, #24
 80090c0:	4c07      	ldr	r4, [pc, #28]	; (80090e0 <etharp_free_entry+0x24>)
{
 80090c2:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80090c4:	4346      	muls	r6, r0
 80090c6:	59a0      	ldr	r0, [r4, r6]
 80090c8:	b118      	cbz	r0, 80090d2 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80090ca:	f002 f81f 	bl	800b10c <pbuf_free>
    arp_table[i].q = NULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80090d2:	2018      	movs	r0, #24
 80090d4:	2300      	movs	r3, #0
 80090d6:	fb00 4405 	mla	r4, r0, r5, r4
 80090da:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
 80090de:	bf00      	nop
 80090e0:	20010144 	.word	0x20010144

080090e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80090e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80090ea:	f04f 0e0a 	mov.w	lr, #10
{
 80090ee:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80090f0:	4699      	mov	r9, r3
 80090f2:	469b      	mov	fp, r3
 80090f4:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 80090f6:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80090f8:	4675      	mov	r5, lr
 80090fa:	46f0      	mov	r8, lr
{
 80090fc:	e9cd 2100 	strd	r2, r1, [sp]
 8009100:	4a3a      	ldr	r2, [pc, #232]	; (80091ec <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009102:	2c0a      	cmp	r4, #10
 8009104:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 8009106:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800910a:	d11a      	bne.n	8009142 <etharp_find_entry+0x5e>
 800910c:	f1ba 0f00 	cmp.w	sl, #0
 8009110:	d05d      	beq.n	80091ce <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8009112:	b156      	cbz	r6, 800912a <etharp_find_entry+0x46>
 8009114:	6831      	ldr	r1, [r6, #0]
 8009116:	6857      	ldr	r7, [r2, #4]
 8009118:	42b9      	cmp	r1, r7
 800911a:	d106      	bne.n	800912a <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800911c:	9900      	ldr	r1, [sp, #0]
 800911e:	2900      	cmp	r1, #0
 8009120:	d048      	beq.n	80091b4 <etharp_find_entry+0xd0>
 8009122:	6891      	ldr	r1, [r2, #8]
 8009124:	9f00      	ldr	r7, [sp, #0]
 8009126:	42b9      	cmp	r1, r7
 8009128:	d044      	beq.n	80091b4 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800912a:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800912e:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8009130:	d148      	bne.n	80091c4 <etharp_find_entry+0xe0>
        if (arp_table[i].q != NULL) {
 8009132:	6817      	ldr	r7, [r2, #0]
 8009134:	2f00      	cmp	r7, #0
 8009136:	d040      	beq.n	80091ba <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8009138:	4561      	cmp	r1, ip
 800913a:	d305      	bcc.n	8009148 <etharp_find_entry+0x64>
 800913c:	468c      	mov	ip, r1
 800913e:	4686      	mov	lr, r0
 8009140:	e002      	b.n	8009148 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009142:	f1ba 0f00 	cmp.w	sl, #0
 8009146:	d1e4      	bne.n	8009112 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009148:	3301      	adds	r3, #1
 800914a:	3218      	adds	r2, #24
 800914c:	2b0a      	cmp	r3, #10
 800914e:	d1d8      	bne.n	8009102 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009150:	9b01      	ldr	r3, [sp, #4]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d143      	bne.n	80091de <etharp_find_entry+0xfa>
 8009156:	2c0a      	cmp	r4, #10
 8009158:	d111      	bne.n	800917e <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800915a:	2d0a      	cmp	r5, #10
 800915c:	d039      	beq.n	80091d2 <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800915e:	2318      	movs	r3, #24
 8009160:	4a22      	ldr	r2, [pc, #136]	; (80091ec <etharp_find_entry+0x108>)
 8009162:	436b      	muls	r3, r5
 8009164:	58d3      	ldr	r3, [r2, r3]
 8009166:	b133      	cbz	r3, 8009176 <etharp_find_entry+0x92>
 8009168:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <etharp_find_entry+0x10c>)
 800916a:	f240 126d 	movw	r2, #365	; 0x16d
 800916e:	4921      	ldr	r1, [pc, #132]	; (80091f4 <etharp_find_entry+0x110>)
 8009170:	4821      	ldr	r0, [pc, #132]	; (80091f8 <etharp_find_entry+0x114>)
 8009172:	f006 f91b 	bl	800f3ac <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8009176:	462c      	mov	r4, r5
 8009178:	4628      	mov	r0, r5
 800917a:	f7ff ff9f 	bl	80090bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800917e:	4d1b      	ldr	r5, [pc, #108]	; (80091ec <etharp_find_entry+0x108>)
 8009180:	2318      	movs	r3, #24
 8009182:	fb03 5304 	mla	r3, r3, r4, r5
 8009186:	7d1b      	ldrb	r3, [r3, #20]
 8009188:	b133      	cbz	r3, 8009198 <etharp_find_entry+0xb4>
 800918a:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <etharp_find_entry+0x10c>)
 800918c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8009190:	491a      	ldr	r1, [pc, #104]	; (80091fc <etharp_find_entry+0x118>)
 8009192:	4819      	ldr	r0, [pc, #100]	; (80091f8 <etharp_find_entry+0x114>)
 8009194:	f006 f90a 	bl	800f3ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009198:	b126      	cbz	r6, 80091a4 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800919a:	2318      	movs	r3, #24
 800919c:	6832      	ldr	r2, [r6, #0]
 800919e:	fb03 5304 	mla	r3, r3, r4, r5
 80091a2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80091a4:	2318      	movs	r3, #24
 80091a6:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80091a8:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 80091aa:	fb03 5304 	mla	r3, r3, r4, r5
 80091ae:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = netif;
 80091b0:	9a00      	ldr	r2, [sp, #0]
 80091b2:	609a      	str	r2, [r3, #8]
}
 80091b4:	b003      	add	sp, #12
 80091b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80091ba:	4559      	cmp	r1, fp
 80091bc:	d3c4      	bcc.n	8009148 <etharp_find_entry+0x64>
 80091be:	468b      	mov	fp, r1
 80091c0:	4680      	mov	r8, r0
 80091c2:	e7c1      	b.n	8009148 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 80091c4:	4549      	cmp	r1, r9
 80091c6:	d3bf      	bcc.n	8009148 <etharp_find_entry+0x64>
 80091c8:	4689      	mov	r9, r1
 80091ca:	4605      	mov	r5, r0
 80091cc:	e7bc      	b.n	8009148 <etharp_find_entry+0x64>
 80091ce:	4604      	mov	r4, r0
 80091d0:	e7ba      	b.n	8009148 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 80091d2:	f1b8 0f0a 	cmp.w	r8, #10
 80091d6:	d105      	bne.n	80091e4 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80091d8:	f1be 0f0a 	cmp.w	lr, #10
 80091dc:	d104      	bne.n	80091e8 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 80091de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091e2:	e7e7      	b.n	80091b4 <etharp_find_entry+0xd0>
 80091e4:	4645      	mov	r5, r8
 80091e6:	e7c6      	b.n	8009176 <etharp_find_entry+0x92>
 80091e8:	4675      	mov	r5, lr
 80091ea:	e7c4      	b.n	8009176 <etharp_find_entry+0x92>
 80091ec:	20010144 	.word	0x20010144
 80091f0:	08015222 	.word	0x08015222
 80091f4:	0801529c 	.word	0x0801529c
 80091f8:	080144fe 	.word	0x080144fe
 80091fc:	080152b3 	.word	0x080152b3

08009200 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009200:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8009208:	4688      	mov	r8, r1
 800920a:	4691      	mov	r9, r2
 800920c:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800920e:	4607      	mov	r7, r0
 8009210:	b930      	cbnz	r0, 8009220 <etharp_raw+0x20>
 8009212:	4b2d      	ldr	r3, [pc, #180]	; (80092c8 <etharp_raw+0xc8>)
 8009214:	f240 4257 	movw	r2, #1111	; 0x457
 8009218:	492c      	ldr	r1, [pc, #176]	; (80092cc <etharp_raw+0xcc>)
 800921a:	482d      	ldr	r0, [pc, #180]	; (80092d0 <etharp_raw+0xd0>)
 800921c:	f006 f8c6 	bl	800f3ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009220:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009224:	211c      	movs	r1, #28
 8009226:	200e      	movs	r0, #14
 8009228:	f001 ffd8 	bl	800b1dc <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800922c:	4605      	mov	r5, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d047      	beq.n	80092c2 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009232:	8943      	ldrh	r3, [r0, #10]
 8009234:	2b1b      	cmp	r3, #27
 8009236:	d806      	bhi.n	8009246 <etharp_raw+0x46>
 8009238:	4b23      	ldr	r3, [pc, #140]	; (80092c8 <etharp_raw+0xc8>)
 800923a:	f240 4262 	movw	r2, #1122	; 0x462
 800923e:	4925      	ldr	r1, [pc, #148]	; (80092d4 <etharp_raw+0xd4>)
 8009240:	4823      	ldr	r0, [pc, #140]	; (80092d0 <etharp_raw+0xd0>)
 8009242:	f006 f8b3 	bl	800f3ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009246:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009248:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800924c:	f001 f99e 	bl	800a58c <lwip_htons>
 8009250:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009252:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009256:	2b06      	cmp	r3, #6
 8009258:	d006      	beq.n	8009268 <etharp_raw+0x68>
 800925a:	4b1b      	ldr	r3, [pc, #108]	; (80092c8 <etharp_raw+0xc8>)
 800925c:	f240 4269 	movw	r2, #1129	; 0x469
 8009260:	491d      	ldr	r1, [pc, #116]	; (80092d8 <etharp_raw+0xd8>)
 8009262:	481b      	ldr	r0, [pc, #108]	; (80092d0 <etharp_raw+0xd0>)
 8009264:	f006 f8a2 	bl	800f3ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009268:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800926a:	4642      	mov	r2, r8
 800926c:	4629      	mov	r1, r5
 800926e:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009270:	60a3      	str	r3, [r4, #8]
 8009272:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009274:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8009276:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8009278:	f8da 3000 	ldr.w	r3, [sl]
 800927c:	f8c4 3012 	str.w	r3, [r4, #18]
 8009280:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8009284:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800928e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009290:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009292:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009294:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009296:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009298:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800929a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800929c:	2308      	movs	r3, #8
 800929e:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80092a0:	2306      	movs	r3, #6
 80092a2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80092a4:	2304      	movs	r3, #4
 80092a6:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80092a8:	f640 0306 	movw	r3, #2054	; 0x806
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	464b      	mov	r3, r9
 80092b0:	f005 ff2c 	bl	800f10c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80092b4:	4628      	mov	r0, r5
 80092b6:	f001 ff29 	bl	800b10c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80092ba:	4630      	mov	r0, r6
}
 80092bc:	b002      	add	sp, #8
 80092be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80092c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092c6:	e7f9      	b.n	80092bc <etharp_raw+0xbc>
 80092c8:	08015222 	.word	0x08015222
 80092cc:	080150b3 	.word	0x080150b3
 80092d0:	080144fe 	.word	0x080144fe
 80092d4:	080152dc 	.word	0x080152dc
 80092d8:	0801530d 	.word	0x0801530d

080092dc <etharp_cleanup_netif>:
{
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	4606      	mov	r6, r0
 80092e0:	4d07      	ldr	r5, [pc, #28]	; (8009300 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092e2:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80092e4:	7d2b      	ldrb	r3, [r5, #20]
 80092e6:	b12b      	cbz	r3, 80092f4 <etharp_cleanup_netif+0x18>
 80092e8:	68ab      	ldr	r3, [r5, #8]
 80092ea:	42b3      	cmp	r3, r6
 80092ec:	d102      	bne.n	80092f4 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80092ee:	4620      	mov	r0, r4
 80092f0:	f7ff fee4 	bl	80090bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092f4:	3401      	adds	r4, #1
 80092f6:	3518      	adds	r5, #24
 80092f8:	2c0a      	cmp	r4, #10
 80092fa:	d1f3      	bne.n	80092e4 <etharp_cleanup_netif+0x8>
}
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	bf00      	nop
 8009300:	20010144 	.word	0x20010144

08009304 <etharp_input>:
{
 8009304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009308:	4607      	mov	r7, r0
 800930a:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800930c:	460c      	mov	r4, r1
 800930e:	b949      	cbnz	r1, 8009324 <etharp_input+0x20>
 8009310:	4b4f      	ldr	r3, [pc, #316]	; (8009450 <etharp_input+0x14c>)
 8009312:	f240 228a 	movw	r2, #650	; 0x28a
 8009316:	494f      	ldr	r1, [pc, #316]	; (8009454 <etharp_input+0x150>)
 8009318:	484f      	ldr	r0, [pc, #316]	; (8009458 <etharp_input+0x154>)
}
 800931a:	b008      	add	sp, #32
 800931c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009320:	f006 b844 	b.w	800f3ac <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 8009324:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8009326:	882b      	ldrh	r3, [r5, #0]
 8009328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800932c:	d108      	bne.n	8009340 <etharp_input+0x3c>
 800932e:	792b      	ldrb	r3, [r5, #4]
 8009330:	2b06      	cmp	r3, #6
 8009332:	d105      	bne.n	8009340 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8009334:	796b      	ldrb	r3, [r5, #5]
 8009336:	2b04      	cmp	r3, #4
 8009338:	d102      	bne.n	8009340 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800933a:	886b      	ldrh	r3, [r5, #2]
 800933c:	2b08      	cmp	r3, #8
 800933e:	d005      	beq.n	800934c <etharp_input+0x48>
    pbuf_free(p);
 8009340:	4638      	mov	r0, r7
}
 8009342:	b008      	add	sp, #32
 8009344:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8009348:	f001 bee0 	b.w	800b10c <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800934c:	f8d5 300e 	ldr.w	r3, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009350:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009354:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8009356:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8009358:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800935a:	2e00      	cmp	r6, #0
 800935c:	d05e      	beq.n	800941c <etharp_input+0x118>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800935e:	1af3      	subs	r3, r6, r3
 8009360:	425e      	negs	r6, r3
 8009362:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009364:	f1c6 0a02 	rsb	sl, r6, #2
 8009368:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800936c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009370:	2b06      	cmp	r3, #6
 8009372:	d006      	beq.n	8009382 <etharp_input+0x7e>
 8009374:	4b36      	ldr	r3, [pc, #216]	; (8009450 <etharp_input+0x14c>)
 8009376:	f240 12a9 	movw	r2, #425	; 0x1a9
 800937a:	4938      	ldr	r1, [pc, #224]	; (800945c <etharp_input+0x158>)
 800937c:	4836      	ldr	r0, [pc, #216]	; (8009458 <etharp_input+0x154>)
 800937e:	f006 f815 	bl	800f3ac <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8009382:	9807      	ldr	r0, [sp, #28]
 8009384:	2800      	cmp	r0, #0
 8009386:	d03c      	beq.n	8009402 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009388:	4621      	mov	r1, r4
 800938a:	f000 fcba 	bl	8009d02 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800938e:	4681      	mov	r9, r0
 8009390:	bbb8      	cbnz	r0, 8009402 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8009392:	9b07      	ldr	r3, [sp, #28]
 8009394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009398:	2be0      	cmp	r3, #224	; 0xe0
 800939a:	d032      	beq.n	8009402 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 800939c:	4622      	mov	r2, r4
 800939e:	4651      	mov	r1, sl
 80093a0:	a807      	add	r0, sp, #28
 80093a2:	f7ff fe9f 	bl	80090e4 <etharp_find_entry>
  if (i < 0) {
 80093a6:	1e03      	subs	r3, r0, #0
 80093a8:	db2b      	blt.n	8009402 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80093aa:	2018      	movs	r0, #24
 80093ac:	4a2c      	ldr	r2, [pc, #176]	; (8009460 <etharp_input+0x15c>)
 80093ae:	f04f 0e02 	mov.w	lr, #2
 80093b2:	fb00 fc03 	mul.w	ip, r0, r3
 80093b6:	eb02 010c 	add.w	r1, r2, ip
 80093ba:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80093be:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 80093c2:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80093c4:	fb13 e300 	smlabb	r3, r3, r0, lr
 80093c8:	68a8      	ldr	r0, [r5, #8]
 80093ca:	eb02 0e03 	add.w	lr, r2, r3
 80093ce:	50d0      	str	r0, [r2, r3]
 80093d0:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80093d4:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 80093d8:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 80093dc:	f852 100c 	ldr.w	r1, [r2, ip]
 80093e0:	b179      	cbz	r1, 8009402 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80093e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80093e6:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80093ea:	4620      	mov	r0, r4
 80093ec:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4643      	mov	r3, r8
 80093f4:	9105      	str	r1, [sp, #20]
 80093f6:	f005 fe89 	bl	800f10c <ethernet_output>
    pbuf_free(p);
 80093fa:	9905      	ldr	r1, [sp, #20]
 80093fc:	4608      	mov	r0, r1
 80093fe:	f001 fe85 	bl	800b10c <pbuf_free>
  switch (hdr->opcode) {
 8009402:	88eb      	ldrh	r3, [r5, #6]
 8009404:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009408:	d00b      	beq.n	8009422 <etharp_input+0x11e>
 800940a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800940e:	d019      	beq.n	8009444 <etharp_input+0x140>
  pbuf_free(p);
 8009410:	4638      	mov	r0, r7
 8009412:	f001 fe7b 	bl	800b10c <pbuf_free>
}
 8009416:	b008      	add	sp, #32
 8009418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800941c:	f04f 0a02 	mov.w	sl, #2
 8009420:	e7a4      	b.n	800936c <etharp_input+0x68>
      if (for_us) {
 8009422:	2e00      	cmp	r6, #0
 8009424:	d0f4      	beq.n	8009410 <etharp_input+0x10c>
        etharp_raw(netif,
 8009426:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8009428:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 800942c:	4620      	mov	r0, r4
 800942e:	9203      	str	r2, [sp, #12]
 8009430:	aa07      	add	r2, sp, #28
 8009432:	4619      	mov	r1, r3
 8009434:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009438:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 800943a:	9200      	str	r2, [sp, #0]
 800943c:	4642      	mov	r2, r8
 800943e:	f7ff fedf 	bl	8009200 <etharp_raw>
 8009442:	e7e5      	b.n	8009410 <etharp_input+0x10c>
      dhcp_arp_reply(netif, &sipaddr);
 8009444:	a907      	add	r1, sp, #28
 8009446:	4620      	mov	r0, r4
 8009448:	f7ff fba6 	bl	8008b98 <dhcp_arp_reply>
      break;
 800944c:	e7e0      	b.n	8009410 <etharp_input+0x10c>
 800944e:	bf00      	nop
 8009450:	08015222 	.word	0x08015222
 8009454:	080150b3 	.word	0x080150b3
 8009458:	080144fe 	.word	0x080144fe
 800945c:	0801538f 	.word	0x0801538f
 8009460:	20010144 	.word	0x20010144

08009464 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009466:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009468:	2401      	movs	r4, #1
 800946a:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800946e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009470:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8009474:	4904      	ldr	r1, [pc, #16]	; (8009488 <etharp_request+0x24>)
 8009476:	9200      	str	r2, [sp, #0]
 8009478:	9101      	str	r1, [sp, #4]
 800947a:	4619      	mov	r1, r3
 800947c:	4a03      	ldr	r2, [pc, #12]	; (800948c <etharp_request+0x28>)
 800947e:	f7ff febf 	bl	8009200 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8009482:	b004      	add	sp, #16
 8009484:	bd10      	pop	{r4, pc}
 8009486:	bf00      	nop
 8009488:	0801444e 	.word	0x0801444e
 800948c:	08014448 	.word	0x08014448

08009490 <etharp_tmr>:
{
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	4c13      	ldr	r4, [pc, #76]	; (80094e0 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009494:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009496:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009498:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800949a:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 800949c:	b16a      	cbz	r2, 80094ba <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800949e:	8a63      	ldrh	r3, [r4, #18]
 80094a0:	3301      	adds	r3, #1
 80094a2:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80094a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80094a8:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80094aa:	d203      	bcs.n	80094b4 <etharp_tmr+0x24>
 80094ac:	2a01      	cmp	r2, #1
 80094ae:	d109      	bne.n	80094c4 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80094b0:	2b04      	cmp	r3, #4
 80094b2:	d90f      	bls.n	80094d4 <etharp_tmr+0x44>
        etharp_free_entry(i);
 80094b4:	4628      	mov	r0, r5
 80094b6:	f7ff fe01 	bl	80090bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80094ba:	3501      	adds	r5, #1
 80094bc:	3418      	adds	r4, #24
 80094be:	2d0a      	cmp	r5, #10
 80094c0:	d1eb      	bne.n	800949a <etharp_tmr+0xa>
}
 80094c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80094c4:	2a03      	cmp	r2, #3
 80094c6:	d101      	bne.n	80094cc <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80094c8:	7527      	strb	r7, [r4, #20]
 80094ca:	e7f6      	b.n	80094ba <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80094cc:	2a04      	cmp	r2, #4
 80094ce:	d1f4      	bne.n	80094ba <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80094d0:	7526      	strb	r6, [r4, #20]
 80094d2:	e7f2      	b.n	80094ba <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80094d4:	1d21      	adds	r1, r4, #4
 80094d6:	68a0      	ldr	r0, [r4, #8]
 80094d8:	f7ff ffc4 	bl	8009464 <etharp_request>
 80094dc:	e7ed      	b.n	80094ba <etharp_tmr+0x2a>
 80094de:	bf00      	nop
 80094e0:	20010144 	.word	0x20010144

080094e4 <etharp_output_to_arp_index>:
{
 80094e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80094e8:	4f24      	ldr	r7, [pc, #144]	; (800957c <etharp_output_to_arp_index+0x98>)
 80094ea:	2318      	movs	r3, #24
{
 80094ec:	4606      	mov	r6, r0
 80094ee:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80094f0:	fb03 7302 	mla	r3, r3, r2, r7
{
 80094f4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80094f6:	7d1b      	ldrb	r3, [r3, #20]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d806      	bhi.n	800950a <etharp_output_to_arp_index+0x26>
 80094fc:	4b20      	ldr	r3, [pc, #128]	; (8009580 <etharp_output_to_arp_index+0x9c>)
 80094fe:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009502:	4920      	ldr	r1, [pc, #128]	; (8009584 <etharp_output_to_arp_index+0xa0>)
 8009504:	4820      	ldr	r0, [pc, #128]	; (8009588 <etharp_output_to_arp_index+0xa4>)
 8009506:	f005 ff51 	bl	800f3ac <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800950a:	2218      	movs	r2, #24
 800950c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009510:	f106 092a 	add.w	r9, r6, #42	; 0x2a
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009514:	fb02 7404 	mla	r4, r2, r4, r7
 8009518:	00ed      	lsls	r5, r5, #3
 800951a:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800951c:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009520:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009522:	44ba      	add	sl, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009524:	d10b      	bne.n	800953e <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009526:	8a63      	ldrh	r3, [r4, #18]
 8009528:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800952c:	d913      	bls.n	8009556 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800952e:	3504      	adds	r5, #4
 8009530:	4630      	mov	r0, r6
 8009532:	1979      	adds	r1, r7, r5
 8009534:	f7ff ff96 	bl	8009464 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009538:	b908      	cbnz	r0, 800953e <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800953a:	2303      	movs	r3, #3
 800953c:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800953e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009542:	464a      	mov	r2, r9
 8009544:	4641      	mov	r1, r8
 8009546:	4630      	mov	r0, r6
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4653      	mov	r3, sl
 800954c:	f005 fdde 	bl	800f10c <ethernet_output>
}
 8009550:	b004      	add	sp, #16
 8009552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009556:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800955a:	d3f0      	bcc.n	800953e <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800955c:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800955e:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009560:	4652      	mov	r2, sl
 8009562:	4649      	mov	r1, r9
 8009564:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009566:	443d      	add	r5, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009568:	4b08      	ldr	r3, [pc, #32]	; (800958c <etharp_output_to_arp_index+0xa8>)
 800956a:	4630      	mov	r0, r6
 800956c:	9502      	str	r5, [sp, #8]
 800956e:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009570:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	464b      	mov	r3, r9
 8009576:	f7ff fe43 	bl	8009200 <etharp_raw>
 800957a:	e7dd      	b.n	8009538 <etharp_output_to_arp_index+0x54>
 800957c:	20010144 	.word	0x20010144
 8009580:	08015222 	.word	0x08015222
 8009584:	080153b3 	.word	0x080153b3
 8009588:	080144fe 	.word	0x080144fe
 800958c:	0801444e 	.word	0x0801444e

08009590 <etharp_query>:
{
 8009590:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009594:	4688      	mov	r8, r1
 8009596:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009598:	4601      	mov	r1, r0
{
 800959a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800959c:	f8d8 0000 	ldr.w	r0, [r8]
 80095a0:	f000 fbaf 	bl	8009d02 <ip4_addr_isbroadcast_u32>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d16a      	bne.n	800967e <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 80095a8:	f8d8 3000 	ldr.w	r3, [r8]
 80095ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80095b0:	2ae0      	cmp	r2, #224	; 0xe0
 80095b2:	d064      	beq.n	800967e <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d062      	beq.n	800967e <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80095b8:	4632      	mov	r2, r6
 80095ba:	2101      	movs	r1, #1
 80095bc:	4640      	mov	r0, r8
 80095be:	f7ff fd91 	bl	80090e4 <etharp_find_entry>
  if (i_err < 0) {
 80095c2:	1e04      	subs	r4, r0, #0
 80095c4:	da03      	bge.n	80095ce <etharp_query+0x3e>
    return (err_t)i_err;
 80095c6:	b260      	sxtb	r0, r4
}
 80095c8:	b002      	add	sp, #8
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80095ce:	2c7e      	cmp	r4, #126	; 0x7e
 80095d0:	dd06      	ble.n	80095e0 <etharp_query+0x50>
 80095d2:	4b35      	ldr	r3, [pc, #212]	; (80096a8 <etharp_query+0x118>)
 80095d4:	f240 32c1 	movw	r2, #961	; 0x3c1
 80095d8:	4934      	ldr	r1, [pc, #208]	; (80096ac <etharp_query+0x11c>)
 80095da:	4835      	ldr	r0, [pc, #212]	; (80096b0 <etharp_query+0x120>)
 80095dc:	f005 fee6 	bl	800f3ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 80095e0:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80095e2:	4f34      	ldr	r7, [pc, #208]	; (80096b4 <etharp_query+0x124>)
 80095e4:	2318      	movs	r3, #24
 80095e6:	fb03 7304 	mla	r3, r3, r4, r7
 80095ea:	7d1a      	ldrb	r2, [r3, #20]
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	d155      	bne.n	800969c <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80095f0:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 80095f2:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80095f4:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 80095f6:	4641      	mov	r1, r8
 80095f8:	4630      	mov	r0, r6
 80095fa:	f7ff ff33 	bl	8009464 <etharp_request>
    if (q == NULL) {
 80095fe:	2d00      	cmp	r5, #0
 8009600:	d0e2      	beq.n	80095c8 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009602:	2318      	movs	r3, #24
 8009604:	fb03 7204 	mla	r2, r3, r4, r7
 8009608:	7d12      	ldrb	r2, [r2, #20]
 800960a:	2a01      	cmp	r2, #1
 800960c:	d90e      	bls.n	800962c <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800960e:	fb03 7304 	mla	r3, r3, r4, r7
 8009612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009616:	4629      	mov	r1, r5
 8009618:	4630      	mov	r0, r6
 800961a:	9200      	str	r2, [sp, #0]
 800961c:	330c      	adds	r3, #12
 800961e:	f106 022a 	add.w	r2, r6, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 8009622:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009626:	f005 fd71 	bl	800f10c <ethernet_output>
 800962a:	e7cd      	b.n	80095c8 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800962c:	d1cc      	bne.n	80095c8 <etharp_query+0x38>
 800962e:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009630:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80096a8 <etharp_query+0x118>
 8009634:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80096b8 <etharp_query+0x128>
 8009638:	f8df a074 	ldr.w	sl, [pc, #116]	; 80096b0 <etharp_query+0x120>
 800963c:	8972      	ldrh	r2, [r6, #10]
 800963e:	8933      	ldrh	r3, [r6, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	d108      	bne.n	8009656 <etharp_query+0xc6>
 8009644:	6833      	ldr	r3, [r6, #0]
 8009646:	b133      	cbz	r3, 8009656 <etharp_query+0xc6>
 8009648:	4643      	mov	r3, r8
 800964a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800964e:	4649      	mov	r1, r9
 8009650:	4650      	mov	r0, sl
 8009652:	f005 feab 	bl	800f3ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009656:	7b33      	ldrb	r3, [r6, #12]
 8009658:	065b      	lsls	r3, r3, #25
 800965a:	d413      	bmi.n	8009684 <etharp_query+0xf4>
      p = p->next;
 800965c:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800965e:	2e00      	cmp	r6, #0
 8009660:	d1ec      	bne.n	800963c <etharp_query+0xac>
      pbuf_ref(p);
 8009662:	4628      	mov	r0, r5
 8009664:	f001 fe96 	bl	800b394 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8009668:	2618      	movs	r6, #24
 800966a:	fb06 f304 	mul.w	r3, r6, r4
 800966e:	58f8      	ldr	r0, [r7, r3]
 8009670:	b108      	cbz	r0, 8009676 <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 8009672:	f001 fd4b 	bl	800b10c <pbuf_free>
      arp_table[i].q = p;
 8009676:	4374      	muls	r4, r6
      result = ERR_OK;
 8009678:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800967a:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 800967c:	e7a4      	b.n	80095c8 <etharp_query+0x38>
    return ERR_ARG;
 800967e:	f06f 000f 	mvn.w	r0, #15
 8009682:	e7a1      	b.n	80095c8 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009684:	462a      	mov	r2, r5
 8009686:	f44f 7120 	mov.w	r1, #640	; 0x280
 800968a:	200e      	movs	r0, #14
 800968c:	f001 ffaa 	bl	800b5e4 <pbuf_clone>
    if (p != NULL) {
 8009690:	4605      	mov	r5, r0
 8009692:	2800      	cmp	r0, #0
 8009694:	d1e8      	bne.n	8009668 <etharp_query+0xd8>
      result = ERR_MEM;
 8009696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800969a:	e795      	b.n	80095c8 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 800969c:	2d00      	cmp	r5, #0
 800969e:	d0aa      	beq.n	80095f6 <etharp_query+0x66>
  err_t result = ERR_MEM;
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096a4:	e7ad      	b.n	8009602 <etharp_query+0x72>
 80096a6:	bf00      	nop
 80096a8:	08015222 	.word	0x08015222
 80096ac:	080153e3 	.word	0x080153e3
 80096b0:	080144fe 	.word	0x080144fe
 80096b4:	20010144 	.word	0x20010144
 80096b8:	080153f1 	.word	0x080153f1

080096bc <etharp_output>:
{
 80096bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096be:	460e      	mov	r6, r1
 80096c0:	b085      	sub	sp, #20
 80096c2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80096c4:	4604      	mov	r4, r0
 80096c6:	b930      	cbnz	r0, 80096d6 <etharp_output+0x1a>
 80096c8:	4b44      	ldr	r3, [pc, #272]	; (80097dc <etharp_output+0x120>)
 80096ca:	f240 321e 	movw	r2, #798	; 0x31e
 80096ce:	4944      	ldr	r1, [pc, #272]	; (80097e0 <etharp_output+0x124>)
 80096d0:	4844      	ldr	r0, [pc, #272]	; (80097e4 <etharp_output+0x128>)
 80096d2:	f005 fe6b 	bl	800f3ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80096d6:	b936      	cbnz	r6, 80096e6 <etharp_output+0x2a>
 80096d8:	4b40      	ldr	r3, [pc, #256]	; (80097dc <etharp_output+0x120>)
 80096da:	f240 321f 	movw	r2, #799	; 0x31f
 80096de:	4942      	ldr	r1, [pc, #264]	; (80097e8 <etharp_output+0x12c>)
 80096e0:	4840      	ldr	r0, [pc, #256]	; (80097e4 <etharp_output+0x128>)
 80096e2:	f005 fe63 	bl	800f3ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80096e6:	b935      	cbnz	r5, 80096f6 <etharp_output+0x3a>
 80096e8:	4b3c      	ldr	r3, [pc, #240]	; (80097dc <etharp_output+0x120>)
 80096ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80096ee:	493f      	ldr	r1, [pc, #252]	; (80097ec <etharp_output+0x130>)
 80096f0:	483c      	ldr	r0, [pc, #240]	; (80097e4 <etharp_output+0x128>)
 80096f2:	f005 fe5b 	bl	800f3ac <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80096f6:	4621      	mov	r1, r4
 80096f8:	6828      	ldr	r0, [r5, #0]
 80096fa:	f000 fb02 	bl	8009d02 <ip4_addr_isbroadcast_u32>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d167      	bne.n	80097d2 <etharp_output+0x116>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009708:	2ae0      	cmp	r2, #224	; 0xe0
 800970a:	d11e      	bne.n	800974a <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800970c:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800970e:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009712:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009716:	235e      	movs	r3, #94	; 0x5e
 8009718:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800971c:	786b      	ldrb	r3, [r5, #1]
 800971e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009722:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009726:	78ab      	ldrb	r3, [r5, #2]
 8009728:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800972c:	78eb      	ldrb	r3, [r5, #3]
 800972e:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8009732:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8009734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009738:	4631      	mov	r1, r6
 800973a:	4620      	mov	r0, r4
 800973c:	9200      	str	r2, [sp, #0]
 800973e:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8009742:	f005 fce3 	bl	800f10c <ethernet_output>
}
 8009746:	b005      	add	sp, #20
 8009748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800974a:	6862      	ldr	r2, [r4, #4]
 800974c:	68a1      	ldr	r1, [r4, #8]
 800974e:	405a      	eors	r2, r3
 8009750:	420a      	tst	r2, r1
 8009752:	d009      	beq.n	8009768 <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 8009754:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009756:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800975a:	4293      	cmp	r3, r2
 800975c:	d004      	beq.n	8009768 <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800975e:	68e3      	ldr	r3, [r4, #12]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d038      	beq.n	80097d6 <etharp_output+0x11a>
            dst_addr = netif_ip4_gw(netif);
 8009764:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009768:	4821      	ldr	r0, [pc, #132]	; (80097f0 <etharp_output+0x134>)
 800976a:	2318      	movs	r3, #24
 800976c:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8009770:	fb03 0302 	mla	r3, r3, r2, r0
 8009774:	7d19      	ldrb	r1, [r3, #20]
 8009776:	2901      	cmp	r1, #1
 8009778:	d90d      	bls.n	8009796 <etharp_output+0xda>
 800977a:	6899      	ldr	r1, [r3, #8]
 800977c:	42a1      	cmp	r1, r4
 800977e:	d10a      	bne.n	8009796 <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009780:	6829      	ldr	r1, [r5, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	4299      	cmp	r1, r3
 8009786:	d106      	bne.n	8009796 <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 8009788:	4631      	mov	r1, r6
 800978a:	4620      	mov	r0, r4
}
 800978c:	b005      	add	sp, #20
 800978e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8009792:	f7ff bea7 	b.w	80094e4 <etharp_output_to_arp_index>
 8009796:	4b16      	ldr	r3, [pc, #88]	; (80097f0 <etharp_output+0x134>)
{
 8009798:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800979a:	7d1f      	ldrb	r7, [r3, #20]
 800979c:	fa5f fc81 	uxtb.w	ip, r1
 80097a0:	2f01      	cmp	r7, #1
 80097a2:	d90a      	bls.n	80097ba <etharp_output+0xfe>
 80097a4:	689f      	ldr	r7, [r3, #8]
 80097a6:	42a7      	cmp	r7, r4
 80097a8:	d107      	bne.n	80097ba <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 80097aa:	685f      	ldr	r7, [r3, #4]
 80097ac:	682a      	ldr	r2, [r5, #0]
 80097ae:	42ba      	cmp	r2, r7
 80097b0:	d103      	bne.n	80097ba <etharp_output+0xfe>
        return etharp_output_to_arp_index(netif, q, i);
 80097b2:	4662      	mov	r2, ip
        ETHARP_SET_ADDRHINT(netif, i);
 80097b4:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 80097b8:	e7e6      	b.n	8009788 <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80097ba:	3101      	adds	r1, #1
 80097bc:	3318      	adds	r3, #24
 80097be:	290a      	cmp	r1, #10
 80097c0:	d1eb      	bne.n	800979a <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 80097c2:	4632      	mov	r2, r6
 80097c4:	4629      	mov	r1, r5
 80097c6:	4620      	mov	r0, r4
}
 80097c8:	b005      	add	sp, #20
 80097ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 80097ce:	f7ff bedf 	b.w	8009590 <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 80097d2:	4b08      	ldr	r3, [pc, #32]	; (80097f4 <etharp_output+0x138>)
 80097d4:	e7ae      	b.n	8009734 <etharp_output+0x78>
            return ERR_RTE;
 80097d6:	f06f 0003 	mvn.w	r0, #3
 80097da:	e7b4      	b.n	8009746 <etharp_output+0x8a>
 80097dc:	08015222 	.word	0x08015222
 80097e0:	080150b3 	.word	0x080150b3
 80097e4:	080144fe 	.word	0x080144fe
 80097e8:	08015e96 	.word	0x08015e96
 80097ec:	08015370 	.word	0x08015370
 80097f0:	20010144 	.word	0x20010144
 80097f4:	08014448 	.word	0x08014448

080097f8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80097f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097fa:	4604      	mov	r4, r0
 80097fc:	b087      	sub	sp, #28
 80097fe:	460f      	mov	r7, r1
 8009800:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009802:	2124      	movs	r1, #36	; 0x24
 8009804:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009808:	2022      	movs	r0, #34	; 0x22
 800980a:	f001 fce7 	bl	800b1dc <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800980e:	4605      	mov	r5, r0
 8009810:	b390      	cbz	r0, 8009878 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009812:	8943      	ldrh	r3, [r0, #10]
 8009814:	2b23      	cmp	r3, #35	; 0x23
 8009816:	d806      	bhi.n	8009826 <icmp_send_response+0x2e>
 8009818:	4b18      	ldr	r3, [pc, #96]	; (800987c <icmp_send_response+0x84>)
 800981a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800981e:	4918      	ldr	r1, [pc, #96]	; (8009880 <icmp_send_response+0x88>)
 8009820:	4818      	ldr	r0, [pc, #96]	; (8009884 <icmp_send_response+0x8c>)
 8009822:	f005 fdc3 	bl	800f3ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009826:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8009828:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800982a:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800982c:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8009830:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009832:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8009836:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8009838:	71a3      	strb	r3, [r4, #6]
 800983a:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800983c:	4603      	mov	r3, r0
  icmphdr->type = type;
 800983e:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8009840:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8009842:	f853 6b04 	ldr.w	r6, [r3], #4
 8009846:	428b      	cmp	r3, r1
 8009848:	f842 6b04 	str.w	r6, [r2], #4
 800984c:	d1f9      	bne.n	8009842 <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800984e:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009850:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8009852:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8009854:	f000 f8d6 	bl	8009a04 <ip4_route>
#endif
  if (netif != NULL) {
 8009858:	b158      	cbz	r0, 8009872 <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800985a:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800985c:	2301      	movs	r3, #1
 800985e:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 8009860:	70a1      	strb	r1, [r4, #2]
 8009862:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009864:	9002      	str	r0, [sp, #8]
 8009866:	4628      	mov	r0, r5
 8009868:	e9cd 1300 	strd	r1, r3, [sp]
 800986c:	23ff      	movs	r3, #255	; 0xff
 800986e:	f000 fa37 	bl	8009ce0 <ip4_output_if>
  }
  pbuf_free(q);
 8009872:	4628      	mov	r0, r5
 8009874:	f001 fc4a 	bl	800b10c <pbuf_free>
}
 8009878:	b007      	add	sp, #28
 800987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987c:	0801540b 	.word	0x0801540b
 8009880:	08015483 	.word	0x08015483
 8009884:	080144fe 	.word	0x080144fe

08009888 <icmp_input>:
{
 8009888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800988c:	4f46      	ldr	r7, [pc, #280]	; (80099a8 <icmp_input+0x120>)
{
 800988e:	b087      	sub	sp, #28
 8009890:	4604      	mov	r4, r0
 8009892:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8009894:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8009898:	f899 5000 	ldrb.w	r5, [r9]
 800989c:	f005 050f 	and.w	r5, r5, #15
 80098a0:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80098a2:	2d13      	cmp	r5, #19
 80098a4:	d916      	bls.n	80098d4 <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 80098a6:	8943      	ldrh	r3, [r0, #10]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d913      	bls.n	80098d4 <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 80098ac:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	2b08      	cmp	r3, #8
 80098b2:	d10f      	bne.n	80098d4 <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80098b4:	6978      	ldr	r0, [r7, #20]
 80098b6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80098ba:	2be0      	cmp	r3, #224	; 0xe0
 80098bc:	d00a      	beq.n	80098d4 <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80098be:	6839      	ldr	r1, [r7, #0]
 80098c0:	f000 fa1f 	bl	8009d02 <ip4_addr_isbroadcast_u32>
 80098c4:	b930      	cbnz	r0, 80098d4 <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80098c6:	8923      	ldrh	r3, [r4, #8]
 80098c8:	2b07      	cmp	r3, #7
 80098ca:	d903      	bls.n	80098d4 <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fe8f 	bl	800a5f0 <inet_chksum_pbuf>
 80098d2:	b128      	cbz	r0, 80098e0 <icmp_input+0x58>
  pbuf_free(p);
 80098d4:	4620      	mov	r0, r4
}
 80098d6:	b007      	add	sp, #28
 80098d8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 80098dc:	f001 bc16 	b.w	800b10c <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80098e0:	f105 010e 	add.w	r1, r5, #14
 80098e4:	4620      	mov	r0, r4
 80098e6:	9105      	str	r1, [sp, #20]
 80098e8:	f001 fbd8 	bl	800b09c <pbuf_add_header>
 80098ec:	9905      	ldr	r1, [sp, #20]
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d04e      	beq.n	8009990 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80098f2:	8923      	ldrh	r3, [r4, #8]
 80098f4:	1959      	adds	r1, r3, r5
 80098f6:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80098f8:	428b      	cmp	r3, r1
 80098fa:	d8eb      	bhi.n	80098d4 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80098fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009900:	200e      	movs	r0, #14
 8009902:	f001 fc6b 	bl	800b1dc <pbuf_alloc>
        if (r == NULL) {
 8009906:	4606      	mov	r6, r0
 8009908:	2800      	cmp	r0, #0
 800990a:	d0e3      	beq.n	80098d4 <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800990c:	8942      	ldrh	r2, [r0, #10]
 800990e:	f105 0308 	add.w	r3, r5, #8
 8009912:	429a      	cmp	r2, r3
 8009914:	d203      	bcs.n	800991e <icmp_input+0x96>
          pbuf_free(r);
 8009916:	4630      	mov	r0, r6
 8009918:	f001 fbf8 	bl	800b10c <pbuf_free>
          goto icmperr;
 800991c:	e7da      	b.n	80098d4 <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 800991e:	4649      	mov	r1, r9
 8009920:	462a      	mov	r2, r5
 8009922:	6840      	ldr	r0, [r0, #4]
 8009924:	f005 fd2c 	bl	800f380 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8009928:	4629      	mov	r1, r5
 800992a:	4630      	mov	r0, r6
 800992c:	f001 fbba 	bl	800b0a4 <pbuf_remove_header>
 8009930:	b130      	cbz	r0, 8009940 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009932:	4b1e      	ldr	r3, [pc, #120]	; (80099ac <icmp_input+0x124>)
 8009934:	22b6      	movs	r2, #182	; 0xb6
 8009936:	491e      	ldr	r1, [pc, #120]	; (80099b0 <icmp_input+0x128>)
 8009938:	481e      	ldr	r0, [pc, #120]	; (80099b4 <icmp_input+0x12c>)
 800993a:	f005 fd37 	bl	800f3ac <iprintf>
          pbuf_free(r);
 800993e:	e7ea      	b.n	8009916 <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8009940:	4621      	mov	r1, r4
 8009942:	4630      	mov	r0, r6
 8009944:	f001 fd86 	bl	800b454 <pbuf_copy>
 8009948:	2800      	cmp	r0, #0
 800994a:	d1e4      	bne.n	8009916 <icmp_input+0x8e>
        pbuf_free(p);
 800994c:	4620      	mov	r0, r4
 800994e:	4634      	mov	r4, r6
 8009950:	f001 fbdc 	bl	800b10c <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8009954:	4629      	mov	r1, r5
 8009956:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8009958:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 800995a:	f001 fb9f 	bl	800b09c <pbuf_add_header>
 800995e:	2800      	cmp	r0, #0
 8009960:	d1b8      	bne.n	80098d4 <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009962:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8009964:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009966:	4914      	ldr	r1, [pc, #80]	; (80099b8 <icmp_input+0x130>)
        ip4_addr_copy(iphdr->src, *src);
 8009968:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800996e:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009970:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8009972:	70b0      	strb	r0, [r6, #2]
 8009974:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009976:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8009978:	7290      	strb	r0, [r2, #10]
 800997a:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800997c:	2201      	movs	r2, #1
 800997e:	f8cd 8008 	str.w	r8, [sp, #8]
 8009982:	e9cd 0200 	strd	r0, r2, [sp]
 8009986:	4602      	mov	r2, r0
 8009988:	4620      	mov	r0, r4
 800998a:	f000 f9a9 	bl	8009ce0 <ip4_output_if>
  pbuf_free(p);
 800998e:	e7a1      	b.n	80098d4 <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009990:	4620      	mov	r0, r4
 8009992:	f001 fb87 	bl	800b0a4 <pbuf_remove_header>
 8009996:	2800      	cmp	r0, #0
 8009998:	d0dc      	beq.n	8009954 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800999a:	4b04      	ldr	r3, [pc, #16]	; (80099ac <icmp_input+0x124>)
 800999c:	22c7      	movs	r2, #199	; 0xc7
 800999e:	4907      	ldr	r1, [pc, #28]	; (80099bc <icmp_input+0x134>)
 80099a0:	4804      	ldr	r0, [pc, #16]	; (80099b4 <icmp_input+0x12c>)
 80099a2:	f005 fd03 	bl	800f3ac <iprintf>
          goto icmperr;
 80099a6:	e795      	b.n	80098d4 <icmp_input+0x4c>
 80099a8:	20010250 	.word	0x20010250
 80099ac:	0801540b 	.word	0x0801540b
 80099b0:	080154af 	.word	0x080154af
 80099b4:	080144fe 	.word	0x080144fe
 80099b8:	20010264 	.word	0x20010264
 80099bc:	080154e4 	.word	0x080154e4

080099c0 <icmp_dest_unreach>:
{
 80099c0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80099c2:	2103      	movs	r1, #3
 80099c4:	f7ff bf18 	b.w	80097f8 <icmp_send_response>

080099c8 <icmp_time_exceeded>:
{
 80099c8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80099ca:	210b      	movs	r1, #11
 80099cc:	f7ff bf14 	b.w	80097f8 <icmp_send_response>

080099d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80099d0:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80099d2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 80099d6:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80099d8:	f013 0301 	ands.w	r3, r3, #1
 80099dc:	d00b      	beq.n	80099f6 <ip4_input_accept+0x26>
 80099de:	6843      	ldr	r3, [r0, #4]
 80099e0:	b14b      	cbz	r3, 80099f6 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80099e2:	4a07      	ldr	r2, [pc, #28]	; (8009a00 <ip4_input_accept+0x30>)
 80099e4:	6950      	ldr	r0, [r2, #20]
 80099e6:	4283      	cmp	r3, r0
 80099e8:	d007      	beq.n	80099fa <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80099ea:	f000 f98a 	bl	8009d02 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80099ee:	3800      	subs	r0, #0
 80099f0:	bf18      	it	ne
 80099f2:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 80099f4:	bd08      	pop	{r3, pc}
  return 0;
 80099f6:	4618      	mov	r0, r3
 80099f8:	e7fc      	b.n	80099f4 <ip4_input_accept+0x24>
      return 1;
 80099fa:	2001      	movs	r0, #1
 80099fc:	e7fa      	b.n	80099f4 <ip4_input_accept+0x24>
 80099fe:	bf00      	nop
 8009a00:	20010250 	.word	0x20010250

08009a04 <ip4_route>:
  NETIF_FOREACH(netif) {
 8009a04:	4b14      	ldr	r3, [pc, #80]	; (8009a58 <ip4_route+0x54>)
{
 8009a06:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8009a08:	6818      	ldr	r0, [r3, #0]
{
 8009a0a:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8009a0c:	b978      	cbnz	r0, 8009a2e <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <ip4_route+0x58>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	b15b      	cbz	r3, 8009a2c <ip4_route+0x28>
 8009a14:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8009a18:	f001 0105 	and.w	r1, r1, #5
 8009a1c:	2905      	cmp	r1, #5
 8009a1e:	d105      	bne.n	8009a2c <ip4_route+0x28>
 8009a20:	6859      	ldr	r1, [r3, #4]
 8009a22:	b119      	cbz	r1, 8009a2c <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	2a7f      	cmp	r2, #127	; 0x7f
 8009a28:	bf18      	it	ne
 8009a2a:	4618      	movne	r0, r3
}
 8009a2c:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009a2e:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
 8009a32:	07cd      	lsls	r5, r1, #31
 8009a34:	d50d      	bpl.n	8009a52 <ip4_route+0x4e>
 8009a36:	074c      	lsls	r4, r1, #29
 8009a38:	d50b      	bpl.n	8009a52 <ip4_route+0x4e>
 8009a3a:	6843      	ldr	r3, [r0, #4]
 8009a3c:	b14b      	cbz	r3, 8009a52 <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8009a3e:	6814      	ldr	r4, [r2, #0]
 8009a40:	6885      	ldr	r5, [r0, #8]
 8009a42:	4063      	eors	r3, r4
 8009a44:	422b      	tst	r3, r5
 8009a46:	d0f1      	beq.n	8009a2c <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8009a48:	078b      	lsls	r3, r1, #30
 8009a4a:	d402      	bmi.n	8009a52 <ip4_route+0x4e>
 8009a4c:	68c3      	ldr	r3, [r0, #12]
 8009a4e:	429c      	cmp	r4, r3
 8009a50:	d0ec      	beq.n	8009a2c <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	e7da      	b.n	8009a0c <ip4_route+0x8>
 8009a56:	bf00      	nop
 8009a58:	20014038 	.word	0x20014038
 8009a5c:	2001403c 	.word	0x2001403c

08009a60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8009a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009a64:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8009a68:	4604      	mov	r4, r0
 8009a6a:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8009a6c:	f898 5000 	ldrb.w	r5, [r8]
 8009a70:	092b      	lsrs	r3, r5, #4
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d005      	beq.n	8009a82 <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009a76:	4620      	mov	r0, r4
 8009a78:	f001 fb48 	bl	800b10c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009a82:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009a86:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009a8a:	f000 fd7f 	bl	800a58c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8009a8e:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009a90:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009a94:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8009a96:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009a98:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8009a9a:	d903      	bls.n	8009aa4 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8009a9c:	4601      	mov	r1, r0
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f001 fc18 	bl	800b2d4 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009aa4:	8963      	ldrh	r3, [r4, #10]
 8009aa6:	42ab      	cmp	r3, r5
 8009aa8:	d3e5      	bcc.n	8009a76 <ip4_input+0x16>
 8009aaa:	8923      	ldrh	r3, [r4, #8]
 8009aac:	42bb      	cmp	r3, r7
 8009aae:	d3e2      	bcc.n	8009a76 <ip4_input+0x16>
 8009ab0:	2d13      	cmp	r5, #19
 8009ab2:	d9e0      	bls.n	8009a76 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009ab4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009ab8:	4d49      	ldr	r5, [pc, #292]	; (8009be0 <ip4_input+0x180>)
 8009aba:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009ac0:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009ac4:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009ac6:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009ac8:	d143      	bne.n	8009b52 <ip4_input+0xf2>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009aca:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
 8009ace:	07db      	lsls	r3, r3, #31
 8009ad0:	d405      	bmi.n	8009ade <ip4_input+0x7e>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8009ad2:	f898 3009 	ldrb.w	r3, [r8, #9]
 8009ad6:	2b11      	cmp	r3, #17
 8009ad8:	d053      	beq.n	8009b82 <ip4_input+0x122>
 8009ada:	2700      	movs	r7, #0
 8009adc:	e003      	b.n	8009ae6 <ip4_input+0x86>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8009ade:	6873      	ldr	r3, [r6, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f6      	beq.n	8009ad2 <ip4_input+0x72>
 8009ae4:	4637      	mov	r7, r6
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8009ae6:	6928      	ldr	r0, [r5, #16]
 8009ae8:	b148      	cbz	r0, 8009afe <ip4_input+0x9e>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009aea:	4631      	mov	r1, r6
 8009aec:	f000 f909 	bl	8009d02 <ip4_addr_isbroadcast_u32>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d1c0      	bne.n	8009a76 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009af4:	692b      	ldr	r3, [r5, #16]
 8009af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009afa:	2be0      	cmp	r3, #224	; 0xe0
 8009afc:	d0bb      	beq.n	8009a76 <ip4_input+0x16>
  if (netif == NULL) {
 8009afe:	2f00      	cmp	r7, #0
 8009b00:	d0b9      	beq.n	8009a76 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009b02:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009b06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b0a:	b13b      	cbz	r3, 8009b1c <ip4_input+0xbc>
    p = ip4_reass(p);
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fa7b 	bl	800a008 <ip4_reass>
    if (p == NULL) {
 8009b12:	4604      	mov	r4, r0
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d0b1      	beq.n	8009a7c <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8009b18:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8009b1c:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009b20:	4649      	mov	r1, r9
 8009b22:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8009b24:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009b28:	f898 3000 	ldrb.w	r3, [r8]
 8009b2c:	f003 030f 	and.w	r3, r3, #15
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009b34:	f001 fab6 	bl	800b0a4 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8009b38:	f898 3009 	ldrb.w	r3, [r8, #9]
 8009b3c:	2b06      	cmp	r3, #6
 8009b3e:	d034      	beq.n	8009baa <ip4_input+0x14a>
 8009b40:	2b11      	cmp	r3, #17
 8009b42:	d026      	beq.n	8009b92 <ip4_input+0x132>
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d135      	bne.n	8009bb4 <ip4_input+0x154>
        icmp_input(p, inp);
 8009b48:	4631      	mov	r1, r6
 8009b4a:	4620      	mov	r0, r4
 8009b4c:	f7ff fe9c 	bl	8009888 <icmp_input>
        break;
 8009b50:	e023      	b.n	8009b9a <ip4_input+0x13a>
    if (ip4_input_accept(inp)) {
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff ff3c 	bl	80099d0 <ip4_input_accept>
 8009b58:	b980      	cbnz	r0, 8009b7c <ip4_input+0x11c>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8009b5a:	7d2b      	ldrb	r3, [r5, #20]
 8009b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8009b5e:	d0b8      	beq.n	8009ad2 <ip4_input+0x72>
        NETIF_FOREACH(netif) {
 8009b60:	4b20      	ldr	r3, [pc, #128]	; (8009be4 <ip4_input+0x184>)
 8009b62:	681f      	ldr	r7, [r3, #0]
 8009b64:	2f00      	cmp	r7, #0
 8009b66:	d0b4      	beq.n	8009ad2 <ip4_input+0x72>
          if (netif == inp) {
 8009b68:	42b7      	cmp	r7, r6
 8009b6a:	d101      	bne.n	8009b70 <ip4_input+0x110>
        NETIF_FOREACH(netif) {
 8009b6c:	683f      	ldr	r7, [r7, #0]
 8009b6e:	e7f9      	b.n	8009b64 <ip4_input+0x104>
          if (ip4_input_accept(netif)) {
 8009b70:	4638      	mov	r0, r7
 8009b72:	f7ff ff2d 	bl	80099d0 <ip4_input_accept>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d0f8      	beq.n	8009b6c <ip4_input+0x10c>
 8009b7a:	e7b4      	b.n	8009ae6 <ip4_input+0x86>
  if (netif == NULL) {
 8009b7c:	2e00      	cmp	r6, #0
 8009b7e:	d1b1      	bne.n	8009ae4 <ip4_input+0x84>
 8009b80:	e7a7      	b.n	8009ad2 <ip4_input+0x72>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8009b82:	eb08 0309 	add.w	r3, r8, r9
 8009b86:	885b      	ldrh	r3, [r3, #2]
 8009b88:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8009b8c:	d1a5      	bne.n	8009ada <ip4_input+0x7a>
 8009b8e:	4637      	mov	r7, r6
 8009b90:	e7b5      	b.n	8009afe <ip4_input+0x9e>
        udp_input(p, inp);
 8009b92:	4631      	mov	r1, r6
 8009b94:	4620      	mov	r0, r4
 8009b96:	f004 ffb9 	bl	800eb0c <udp_input>
  ip_data.current_netif = NULL;
 8009b9a:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8009b9c:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8009ba0:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009ba2:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009ba4:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 8009ba8:	e768      	b.n	8009a7c <ip4_input+0x1c>
        tcp_input(p, inp);
 8009baa:	4631      	mov	r1, r6
 8009bac:	4620      	mov	r0, r4
 8009bae:	f003 f879 	bl	800cca4 <tcp_input>
        break;
 8009bb2:	e7f2      	b.n	8009b9a <ip4_input+0x13a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	6968      	ldr	r0, [r5, #20]
 8009bb8:	f000 f8a3 	bl	8009d02 <ip4_addr_isbroadcast_u32>
 8009bbc:	b960      	cbnz	r0, 8009bd8 <ip4_input+0x178>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009bbe:	696b      	ldr	r3, [r5, #20]
 8009bc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009bc4:	2be0      	cmp	r3, #224	; 0xe0
 8009bc6:	d007      	beq.n	8009bd8 <ip4_input+0x178>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009bc8:	4649      	mov	r1, r9
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f001 fa96 	bl	800b0fc <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009bd0:	2102      	movs	r1, #2
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f7ff fef4 	bl	80099c0 <icmp_dest_unreach>
        pbuf_free(p);
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f001 fa97 	bl	800b10c <pbuf_free>
        break;
 8009bde:	e7dc      	b.n	8009b9a <ip4_input+0x13a>
 8009be0:	20010250 	.word	0x20010250
 8009be4:	20014038 	.word	0x20014038

08009be8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009be8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bec:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009bee:	7b83      	ldrb	r3, [r0, #14]
{
 8009bf0:	4604      	mov	r4, r0
 8009bf2:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009bf4:	2b01      	cmp	r3, #1
{
 8009bf6:	4616      	mov	r6, r2
 8009bf8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009bfa:	d006      	beq.n	8009c0a <ip4_output_if_src+0x22>
 8009bfc:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <ip4_output_if_src+0xe0>)
 8009bfe:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009c02:	4932      	ldr	r1, [pc, #200]	; (8009ccc <ip4_output_if_src+0xe4>)
 8009c04:	4832      	ldr	r0, [pc, #200]	; (8009cd0 <ip4_output_if_src+0xe8>)
 8009c06:	f005 fbd1 	bl	800f3ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	d04e      	beq.n	8009cac <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009c0e:	2114      	movs	r1, #20
 8009c10:	4620      	mov	r0, r4
 8009c12:	f001 fa43 	bl	800b09c <pbuf_add_header>
 8009c16:	b120      	cbz	r0, 8009c22 <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009c18:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8009c1c:	b002      	add	sp, #8
 8009c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009c22:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8009c24:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009c26:	2b13      	cmp	r3, #19
 8009c28:	d806      	bhi.n	8009c38 <ip4_output_if_src+0x50>
 8009c2a:	4b27      	ldr	r3, [pc, #156]	; (8009cc8 <ip4_output_if_src+0xe0>)
 8009c2c:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009c30:	4928      	ldr	r1, [pc, #160]	; (8009cd4 <ip4_output_if_src+0xec>)
 8009c32:	4827      	ldr	r0, [pc, #156]	; (8009cd0 <ip4_output_if_src+0xe8>)
 8009c34:	f005 fbba 	bl	800f3ac <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8009c38:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8009c3c:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 8009c40:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 8009c44:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8009c46:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009c48:	f8df a090 	ldr.w	sl, [pc, #144]	; 8009cdc <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 8009c4c:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8009c4e:	2345      	movs	r3, #69	; 0x45
 8009c50:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 8009c52:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009c56:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009c58:	8920      	ldrh	r0, [r4, #8]
 8009c5a:	f000 fc97 	bl	800a58c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8009c5e:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009c62:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8009c64:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009c68:	f8ba 0000 	ldrh.w	r0, [sl]
 8009c6c:	f000 fc8e 	bl	800a58c <lwip_htons>
    ++ip_id;
 8009c70:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009c74:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8009c76:	3301      	adds	r3, #1
 8009c78:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8009c7c:	f1b9 0f00 	cmp.w	r9, #0
 8009c80:	d111      	bne.n	8009ca6 <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009c82:	4b15      	ldr	r3, [pc, #84]	; (8009cd8 <ip4_output_if_src+0xf0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8009c88:	f885 800a 	strb.w	r8, [r5, #10]
 8009c8c:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009c90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c92:	b19b      	cbz	r3, 8009cbc <ip4_output_if_src+0xd4>
 8009c94:	8922      	ldrh	r2, [r4, #8]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d910      	bls.n	8009cbc <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 8009c9a:	4632      	mov	r2, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 fb88 	bl	800a3b4 <ip4_frag>
 8009ca4:	e7ba      	b.n	8009c1c <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 8009ca6:	f8d9 3000 	ldr.w	r3, [r9]
 8009caa:	e7ec      	b.n	8009c86 <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 8009cac:	8963      	ldrh	r3, [r4, #10]
 8009cae:	2b13      	cmp	r3, #19
 8009cb0:	d9b2      	bls.n	8009c18 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009cb2:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8009cb4:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8009cba:	e7e9      	b.n	8009c90 <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	4632      	mov	r2, r6
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	4638      	mov	r0, r7
 8009cc4:	4798      	blx	r3
 8009cc6:	e7a9      	b.n	8009c1c <ip4_output_if_src+0x34>
 8009cc8:	08015516 	.word	0x08015516
 8009ccc:	0801558d 	.word	0x0801558d
 8009cd0:	080144fe 	.word	0x080144fe
 8009cd4:	08015599 	.word	0x08015599
 8009cd8:	080142f8 	.word	0x080142f8
 8009cdc:	20010236 	.word	0x20010236

08009ce0 <ip4_output_if>:
{
 8009ce0:	b4f0      	push	{r4, r5, r6, r7}
 8009ce2:	9c06      	ldr	r4, [sp, #24]
 8009ce4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8009ce8:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009cec:	b11a      	cbz	r2, 8009cf6 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8009cee:	b109      	cbz	r1, 8009cf4 <ip4_output_if+0x14>
 8009cf0:	680f      	ldr	r7, [r1, #0]
 8009cf2:	b907      	cbnz	r7, 8009cf6 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8009cf4:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009cf6:	9504      	str	r5, [sp, #16]
 8009cf8:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8009cfc:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009cfe:	f7ff bf73 	b.w	8009be8 <ip4_output_if_src>

08009d02 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009d02:	1e43      	subs	r3, r0, #1
{
 8009d04:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8009d06:	3303      	adds	r3, #3
 8009d08:	d812      	bhi.n	8009d30 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009d0a:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8009d0e:	f013 0002 	ands.w	r0, r3, #2
 8009d12:	d010      	beq.n	8009d36 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009d14:	684b      	ldr	r3, [r1, #4]
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00c      	beq.n	8009d34 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009d1a:	6888      	ldr	r0, [r1, #8]
 8009d1c:	4053      	eors	r3, r2
 8009d1e:	4203      	tst	r3, r0
 8009d20:	d108      	bne.n	8009d34 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009d22:	43c3      	mvns	r3, r0
 8009d24:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009d28:	1ac3      	subs	r3, r0, r3
 8009d2a:	4258      	negs	r0, r3
 8009d2c:	4158      	adcs	r0, r3
 8009d2e:	4770      	bx	lr
    return 1;
 8009d30:	2001      	movs	r0, #1
 8009d32:	4770      	bx	lr
    return 0;
 8009d34:	2000      	movs	r0, #0
  }
}
 8009d36:	4770      	bx	lr

08009d38 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8009d38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8009d3c:	6803      	ldr	r3, [r0, #0]
 8009d3e:	f10d 0c04 	add.w	ip, sp, #4

  rp = buf;
 8009d42:	460d      	mov	r5, r1
  s_addr = ip4_addr_get_u32(addr);
 8009d44:	2004      	movs	r0, #4
  int len = 0;
 8009d46:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8009d48:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8009d4c:	f04f 082e 	mov.w	r8, #46	; 0x2e
  s_addr = ip4_addr_get_u32(addr);
 8009d50:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 8009d52:	f81c 4b01 	ldrb.w	r4, [ip], #1
    i = 0;
 8009d56:	2700      	movs	r7, #0
      rem = *ap % (u8_t)10;
 8009d58:	46a2      	mov	sl, r4
 8009d5a:	fbb4 f3fe 	udiv	r3, r4, lr
 8009d5e:	fb0e 4913 	mls	r9, lr, r3, r4
      *ap /= (u8_t)10;
 8009d62:	b2dc      	uxtb	r4, r3
      inv[i++] = (char)('0' + rem);
 8009d64:	463b      	mov	r3, r7
    } while (*ap);
 8009d66:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 8009d6a:	f107 0701 	add.w	r7, r7, #1
 8009d6e:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8009d72:	f103 0b08 	add.w	fp, r3, #8
 8009d76:	b2ff      	uxtb	r7, r7
 8009d78:	44eb      	add	fp, sp
 8009d7a:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 8009d7e:	d8eb      	bhi.n	8009d58 <ip4addr_ntoa_r+0x20>
 8009d80:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009d84:	4637      	mov	r7, r6
 8009d86:	462c      	mov	r4, r5
    while (i--) {
 8009d88:	2bff      	cmp	r3, #255	; 0xff
      if (len++ >= buflen) {
 8009d8a:	f106 0601 	add.w	r6, r6, #1
    while (i--) {
 8009d8e:	d10d      	bne.n	8009dac <ip4addr_ntoa_r+0x74>
    if (len++ >= buflen) {
 8009d90:	4297      	cmp	r7, r2
 8009d92:	da18      	bge.n	8009dc6 <ip4addr_ntoa_r+0x8e>
  for (n = 0; n < 4; n++) {
 8009d94:	3801      	subs	r0, #1
    *rp++ = '.';
 8009d96:	4625      	mov	r5, r4
  for (n = 0; n < 4; n++) {
 8009d98:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    *rp++ = '.';
 8009d9c:	f805 8b01 	strb.w	r8, [r5], #1
  for (n = 0; n < 4; n++) {
 8009da0:	d1d7      	bne.n	8009d52 <ip4addr_ntoa_r+0x1a>
    ap++;
  }
  *--rp = 0;
 8009da2:	7020      	strb	r0, [r4, #0]
  return buf;
 8009da4:	4608      	mov	r0, r1
}
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 8009dac:	1e5d      	subs	r5, r3, #1
 8009dae:	4297      	cmp	r7, r2
 8009db0:	b2ed      	uxtb	r5, r5
 8009db2:	da08      	bge.n	8009dc6 <ip4addr_ntoa_r+0x8e>
      *rp++ = inv[i];
 8009db4:	3308      	adds	r3, #8
      if (len++ >= buflen) {
 8009db6:	4637      	mov	r7, r6
      *rp++ = inv[i];
 8009db8:	446b      	add	r3, sp
 8009dba:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009dbe:	f804 3b01 	strb.w	r3, [r4], #1
 8009dc2:	462b      	mov	r3, r5
 8009dc4:	e7e0      	b.n	8009d88 <ip4addr_ntoa_r+0x50>
        return NULL;
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e7ed      	b.n	8009da6 <ip4addr_ntoa_r+0x6e>
	...

08009dcc <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8009dcc:	2210      	movs	r2, #16
 8009dce:	4901      	ldr	r1, [pc, #4]	; (8009dd4 <ip4addr_ntoa+0x8>)
 8009dd0:	f7ff bfb2 	b.w	8009d38 <ip4addr_ntoa_r>
 8009dd4:	20010238 	.word	0x20010238

08009dd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009dd8:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009dda:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <ip_reass_dequeue_datagram+0x34>)
{
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4282      	cmp	r2, r0
 8009de4:	d107      	bne.n	8009df6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8009de6:	6802      	ldr	r2, [r0, #0]
 8009de8:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009dea:	4621      	mov	r1, r4
 8009dec:	2004      	movs	r0, #4
}
 8009dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8009df2:	f000 bf2b 	b.w	800ac4c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009df6:	b931      	cbnz	r1, 8009e06 <ip_reass_dequeue_datagram+0x2e>
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <ip_reass_dequeue_datagram+0x38>)
 8009dfa:	f240 1245 	movw	r2, #325	; 0x145
 8009dfe:	4905      	ldr	r1, [pc, #20]	; (8009e14 <ip_reass_dequeue_datagram+0x3c>)
 8009e00:	4805      	ldr	r0, [pc, #20]	; (8009e18 <ip_reass_dequeue_datagram+0x40>)
 8009e02:	f005 fad3 	bl	800f3ac <iprintf>
    prev->next = ipr->next;
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	602b      	str	r3, [r5, #0]
 8009e0a:	e7ee      	b.n	8009dea <ip_reass_dequeue_datagram+0x12>
 8009e0c:	20010248 	.word	0x20010248
 8009e10:	080155c6 	.word	0x080155c6
 8009e14:	08015642 	.word	0x08015642
 8009e18:	080144fe 	.word	0x080144fe

08009e1c <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009e1c:	4281      	cmp	r1, r0
{
 8009e1e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e22:	4604      	mov	r4, r0
 8009e24:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009e26:	d105      	bne.n	8009e34 <ip_reass_free_complete_datagram+0x18>
 8009e28:	4b2f      	ldr	r3, [pc, #188]	; (8009ee8 <ip_reass_free_complete_datagram+0xcc>)
 8009e2a:	22ab      	movs	r2, #171	; 0xab
 8009e2c:	492f      	ldr	r1, [pc, #188]	; (8009eec <ip_reass_free_complete_datagram+0xd0>)
 8009e2e:	4830      	ldr	r0, [pc, #192]	; (8009ef0 <ip_reass_free_complete_datagram+0xd4>)
 8009e30:	f005 fabc 	bl	800f3ac <iprintf>
  if (prev != NULL) {
 8009e34:	b146      	cbz	r6, 8009e48 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009e36:	6833      	ldr	r3, [r6, #0]
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	d005      	beq.n	8009e48 <ip_reass_free_complete_datagram+0x2c>
 8009e3c:	4b2a      	ldr	r3, [pc, #168]	; (8009ee8 <ip_reass_free_complete_datagram+0xcc>)
 8009e3e:	22ad      	movs	r2, #173	; 0xad
 8009e40:	492c      	ldr	r1, [pc, #176]	; (8009ef4 <ip_reass_free_complete_datagram+0xd8>)
 8009e42:	482b      	ldr	r0, [pc, #172]	; (8009ef0 <ip_reass_free_complete_datagram+0xd4>)
 8009e44:	f005 fab2 	bl	800f3ac <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009e48:	6867      	ldr	r7, [r4, #4]
 8009e4a:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8009e4c:	889a      	ldrh	r2, [r3, #4]
 8009e4e:	bb92      	cbnz	r2, 8009eb6 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8009e50:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009e52:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 8009e56:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009e58:	f104 0208 	add.w	r2, r4, #8
 8009e5c:	f852 0b04 	ldr.w	r0, [r2], #4
 8009e60:	428a      	cmp	r2, r1
 8009e62:	f843 0b04 	str.w	r0, [r3], #4
 8009e66:	d1f9      	bne.n	8009e5c <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4638      	mov	r0, r7
 8009e6c:	f7ff fdac 	bl	80099c8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009e70:	4638      	mov	r0, r7
 8009e72:	f001 fa87 	bl	800b384 <pbuf_clen>
 8009e76:	4605      	mov	r5, r0
    pbuf_free(p);
 8009e78:	4638      	mov	r0, r7
 8009e7a:	f001 f947 	bl	800b10c <pbuf_free>
  p = ipr->p;
 8009e7e:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009e80:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009ee8 <ip_reass_free_complete_datagram+0xcc>
 8009e84:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009f00 <ip_reass_free_complete_datagram+0xe4>
 8009e88:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009ef0 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8009e8c:	b9af      	cbnz	r7, 8009eba <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8009e8e:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009e90:	4c19      	ldr	r4, [pc, #100]	; (8009ef8 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8009e92:	4631      	mov	r1, r6
 8009e94:	f7ff ffa0 	bl	8009dd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009e98:	88a3      	ldrh	r3, [r4, #4]
 8009e9a:	42ab      	cmp	r3, r5
 8009e9c:	d205      	bcs.n	8009eaa <ip_reass_free_complete_datagram+0x8e>
 8009e9e:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <ip_reass_free_complete_datagram+0xcc>)
 8009ea0:	22d2      	movs	r2, #210	; 0xd2
 8009ea2:	4916      	ldr	r1, [pc, #88]	; (8009efc <ip_reass_free_complete_datagram+0xe0>)
 8009ea4:	4812      	ldr	r0, [pc, #72]	; (8009ef0 <ip_reass_free_complete_datagram+0xd4>)
 8009ea6:	f005 fa81 	bl	800f3ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009eaa:	88a3      	ldrh	r3, [r4, #4]
}
 8009eac:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009eae:	1b5b      	subs	r3, r3, r5
 8009eb0:	80a3      	strh	r3, [r4, #4]
}
 8009eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8009eb6:	2500      	movs	r5, #0
 8009eb8:	e7e1      	b.n	8009e7e <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8009eba:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 8009ebc:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 8009ebe:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8009ec2:	f001 fa5f 	bl	800b384 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009ec6:	4405      	add	r5, r0
 8009ec8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8009ecc:	db05      	blt.n	8009eda <ip_reass_free_complete_datagram+0xbe>
 8009ece:	4643      	mov	r3, r8
 8009ed0:	22cc      	movs	r2, #204	; 0xcc
 8009ed2:	4649      	mov	r1, r9
 8009ed4:	4650      	mov	r0, sl
 8009ed6:	f005 fa69 	bl	800f3ac <iprintf>
    pbuf_free(pcur);
 8009eda:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009edc:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 8009ede:	465f      	mov	r7, fp
    pbuf_free(pcur);
 8009ee0:	f001 f914 	bl	800b10c <pbuf_free>
 8009ee4:	e7d2      	b.n	8009e8c <ip_reass_free_complete_datagram+0x70>
 8009ee6:	bf00      	nop
 8009ee8:	080155c6 	.word	0x080155c6
 8009eec:	0801565b 	.word	0x0801565b
 8009ef0:	080144fe 	.word	0x080144fe
 8009ef4:	08015667 	.word	0x08015667
 8009ef8:	20010248 	.word	0x20010248
 8009efc:	08015696 	.word	0x08015696
 8009f00:	08015679 	.word	0x08015679

08009f04 <ip_reass_remove_oldest_datagram>:
{
 8009f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f08:	4605      	mov	r5, r0
 8009f0a:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009f0c:	2600      	movs	r6, #0
    r = reassdatagrams;
 8009f0e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8009f78 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8009f12:	2400      	movs	r4, #0
    r = reassdatagrams;
 8009f14:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8009f18:	4621      	mov	r1, r4
    prev = NULL;
 8009f1a:	46a4      	mov	ip, r4
    oldest = NULL;
 8009f1c:	4620      	mov	r0, r4
    while (r != NULL) {
 8009f1e:	b953      	cbnz	r3, 8009f36 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8009f20:	b110      	cbz	r0, 8009f28 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009f22:	f7ff ff7b 	bl	8009e1c <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8009f26:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009f28:	42be      	cmp	r6, r7
 8009f2a:	da01      	bge.n	8009f30 <ip_reass_remove_oldest_datagram+0x2c>
 8009f2c:	2c01      	cmp	r4, #1
 8009f2e:	dcf0      	bgt.n	8009f12 <ip_reass_remove_oldest_datagram+0xe>
}
 8009f30:	4630      	mov	r0, r6
 8009f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009f36:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8009f3a:	695a      	ldr	r2, [r3, #20]
 8009f3c:	4572      	cmp	r2, lr
 8009f3e:	d109      	bne.n	8009f54 <ip_reass_remove_oldest_datagram+0x50>
 8009f40:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	4572      	cmp	r2, lr
 8009f48:	d104      	bne.n	8009f54 <ip_reass_remove_oldest_datagram+0x50>
 8009f4a:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8009f4e:	88aa      	ldrh	r2, [r5, #4]
 8009f50:	4596      	cmp	lr, r2
 8009f52:	d008      	beq.n	8009f66 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8009f54:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8009f56:	b160      	cbz	r0, 8009f72 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8009f58:	7fc2      	ldrb	r2, [r0, #31]
 8009f5a:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8009f5e:	4596      	cmp	lr, r2
 8009f60:	bf9c      	itt	ls
 8009f62:	4661      	movls	r1, ip
 8009f64:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	bf18      	it	ne
 8009f6c:	469c      	movne	ip, r3
 8009f6e:	4613      	mov	r3, r2
 8009f70:	e7d5      	b.n	8009f1e <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8009f72:	4661      	mov	r1, ip
 8009f74:	4618      	mov	r0, r3
 8009f76:	e7f6      	b.n	8009f66 <ip_reass_remove_oldest_datagram+0x62>
 8009f78:	20010248 	.word	0x20010248

08009f7c <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8009f7c:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009f7e:	4604      	mov	r4, r0
 8009f80:	b930      	cbnz	r0, 8009f90 <ip_frag_free_pbuf_custom_ref+0x14>
 8009f82:	4b06      	ldr	r3, [pc, #24]	; (8009f9c <ip_frag_free_pbuf_custom_ref+0x20>)
 8009f84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009f88:	4905      	ldr	r1, [pc, #20]	; (8009fa0 <ip_frag_free_pbuf_custom_ref+0x24>)
 8009f8a:	4806      	ldr	r0, [pc, #24]	; (8009fa4 <ip_frag_free_pbuf_custom_ref+0x28>)
 8009f8c:	f005 fa0e 	bl	800f3ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009f90:	4621      	mov	r1, r4
 8009f92:	2005      	movs	r0, #5
}
 8009f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8009f98:	f000 be58 	b.w	800ac4c <memp_free>
 8009f9c:	080155c6 	.word	0x080155c6
 8009fa0:	08015e7e 	.word	0x08015e7e
 8009fa4:	080144fe 	.word	0x080144fe

08009fa8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009fa8:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009faa:	4604      	mov	r4, r0
 8009fac:	b930      	cbnz	r0, 8009fbc <ipfrag_free_pbuf_custom+0x14>
 8009fae:	4b08      	ldr	r3, [pc, #32]	; (8009fd0 <ipfrag_free_pbuf_custom+0x28>)
 8009fb0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8009fb4:	4907      	ldr	r1, [pc, #28]	; (8009fd4 <ipfrag_free_pbuf_custom+0x2c>)
 8009fb6:	4808      	ldr	r0, [pc, #32]	; (8009fd8 <ipfrag_free_pbuf_custom+0x30>)
 8009fb8:	f005 f9f8 	bl	800f3ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8009fbc:	6960      	ldr	r0, [r4, #20]
 8009fbe:	b108      	cbz	r0, 8009fc4 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8009fc0:	f001 f8a4 	bl	800b10c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8009fc4:	4620      	mov	r0, r4
}
 8009fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8009fca:	f7ff bfd7 	b.w	8009f7c <ip_frag_free_pbuf_custom_ref>
 8009fce:	bf00      	nop
 8009fd0:	080155c6 	.word	0x080155c6
 8009fd4:	080156b8 	.word	0x080156b8
 8009fd8:	080144fe 	.word	0x080144fe

08009fdc <ip_reass_tmr>:
{
 8009fdc:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8009fde:	4b09      	ldr	r3, [pc, #36]	; (800a004 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8009fe0:	2400      	movs	r4, #0
  r = reassdatagrams;
 8009fe2:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8009fe4:	b900      	cbnz	r0, 8009fe8 <ip_reass_tmr+0xc>
}
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8009fe8:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 8009fea:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 8009fec:	b123      	cbz	r3, 8009ff8 <ip_reass_tmr+0x1c>
      r->timer--;
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	e7f5      	b.n	8009fe4 <ip_reass_tmr+0x8>
 8009ff8:	4621      	mov	r1, r4
 8009ffa:	f7ff ff0f 	bl	8009e1c <ip_reass_free_complete_datagram>
 8009ffe:	4620      	mov	r0, r4
 800a000:	e7f7      	b.n	8009ff2 <ip_reass_tmr+0x16>
 800a002:	bf00      	nop
 800a004:	20010248 	.word	0x20010248

0800a008 <ip4_reass>:
{
 800a008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 800a00c:	6845      	ldr	r5, [r0, #4]
{
 800a00e:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800a010:	782b      	ldrb	r3, [r5, #0]
 800a012:	f003 030f 	and.w	r3, r3, #15
 800a016:	2b05      	cmp	r3, #5
 800a018:	f040 80a0 	bne.w	800a15c <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a01c:	88e8      	ldrh	r0, [r5, #6]
 800a01e:	f000 fab5 	bl	800a58c <lwip_htons>
 800a022:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a024:	8868      	ldrh	r0, [r5, #2]
 800a026:	f000 fab1 	bl	800a58c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800a02a:	782a      	ldrb	r2, [r5, #0]
 800a02c:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 800a030:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 800a034:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800a038:	f0c0 8090 	bcc.w	800a15c <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 800a03c:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a03e:	4eb5      	ldr	r6, [pc, #724]	; (800a314 <ip4_reass+0x30c>)
  clen = pbuf_clen(p);
 800a040:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 800a042:	b29b      	uxth	r3, r3
 800a044:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800a046:	f001 f99d 	bl	800b384 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a04a:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 800a04c:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800a04e:	4403      	add	r3, r0
 800a050:	2b0a      	cmp	r3, #10
 800a052:	dc79      	bgt.n	800a148 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a054:	6834      	ldr	r4, [r6, #0]
 800a056:	2c00      	cmp	r4, #0
 800a058:	f040 8085 	bne.w	800a166 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a05c:	2004      	movs	r0, #4
 800a05e:	f000 fdc5 	bl	800abec <memp_malloc>
  if (ipr == NULL) {
 800a062:	4604      	mov	r4, r0
 800a064:	b958      	cbnz	r0, 800a07e <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a066:	4649      	mov	r1, r9
 800a068:	4628      	mov	r0, r5
 800a06a:	f7ff ff4b 	bl	8009f04 <ip_reass_remove_oldest_datagram>
 800a06e:	4581      	cmp	r9, r0
 800a070:	dc74      	bgt.n	800a15c <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a072:	2004      	movs	r0, #4
 800a074:	f000 fdba 	bl	800abec <memp_malloc>
    if (ipr == NULL)
 800a078:	4604      	mov	r4, r0
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d06e      	beq.n	800a15c <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a07e:	221c      	movs	r2, #28
 800a080:	2100      	movs	r1, #0
 800a082:	1d20      	adds	r0, r4, #4
 800a084:	f005 f98a 	bl	800f39c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a088:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a08a:	f104 0208 	add.w	r2, r4, #8
 800a08e:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800a092:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800a094:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800a096:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800a098:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a09a:	462b      	mov	r3, r5
 800a09c:	f853 0b04 	ldr.w	r0, [r3], #4
 800a0a0:	428b      	cmp	r3, r1
 800a0a2:	f842 0b04 	str.w	r0, [r2], #4
 800a0a6:	d1f9      	bne.n	800a09c <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800a0a8:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a0ac:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 800a0b0:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a0b4:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 800a0b8:	d10a      	bne.n	800a0d0 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	18fb      	adds	r3, r7, r3
 800a0be:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800a0c0:	429f      	cmp	r7, r3
 800a0c2:	f200 8137 	bhi.w	800a334 <ip4_reass+0x32c>
 800a0c6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	f200 8132 	bhi.w	800a334 <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800a0d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800a0d4:	8868      	ldrh	r0, [r5, #2]
 800a0d6:	f000 fa59 	bl	800a58c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800a0da:	782b      	ldrb	r3, [r5, #0]
 800a0dc:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800a0e0:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800a0e4:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a0e8:	f0c0 8124 	bcc.w	800a334 <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 800a0ec:	1a80      	subs	r0, r0, r2
 800a0ee:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a0f2:	88e8      	ldrh	r0, [r5, #6]
 800a0f4:	f000 fa4a 	bl	800a58c <lwip_htons>
 800a0f8:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 800a0fc:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 800a100:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800a102:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 800a104:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 800a106:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 800a10a:	7075      	strb	r5, [r6, #1]
 800a10c:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 800a10e:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 800a112:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800a114:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 800a116:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 800a118:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 800a11a:	f200 810b 	bhi.w	800a334 <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 800a11e:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800a122:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 800a126:	4671      	mov	r1, lr
 800a128:	bb61      	cbnz	r1, 800a184 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 800a12a:	2d00      	cmp	r5, #0
 800a12c:	f040 80a9 	bne.w	800a282 <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800a130:	f1be 0f00 	cmp.w	lr, #0
 800a134:	f000 8095 	beq.w	800a262 <ip4_reass+0x25a>
 800a138:	4b77      	ldr	r3, [pc, #476]	; (800a318 <ip4_reass+0x310>)
 800a13a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a13e:	4977      	ldr	r1, [pc, #476]	; (800a31c <ip4_reass+0x314>)
 800a140:	4877      	ldr	r0, [pc, #476]	; (800a320 <ip4_reass+0x318>)
 800a142:	f005 f933 	bl	800f3ac <iprintf>
 800a146:	e08c      	b.n	800a262 <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a148:	4601      	mov	r1, r0
 800a14a:	4628      	mov	r0, r5
 800a14c:	f7ff feda 	bl	8009f04 <ip_reass_remove_oldest_datagram>
 800a150:	b120      	cbz	r0, 800a15c <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800a152:	88b3      	ldrh	r3, [r6, #4]
 800a154:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800a156:	2b0a      	cmp	r3, #10
 800a158:	f77f af7c 	ble.w	800a054 <ip4_reass+0x4c>
  pbuf_free(p);
 800a15c:	4640      	mov	r0, r8
 800a15e:	f000 ffd5 	bl	800b10c <pbuf_free>
  return NULL;
 800a162:	2700      	movs	r7, #0
 800a164:	e077      	b.n	800a256 <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800a166:	68eb      	ldr	r3, [r5, #12]
 800a168:	6962      	ldr	r2, [r4, #20]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d108      	bne.n	800a180 <ip4_reass+0x178>
 800a16e:	692b      	ldr	r3, [r5, #16]
 800a170:	69a2      	ldr	r2, [r4, #24]
 800a172:	429a      	cmp	r2, r3
 800a174:	d104      	bne.n	800a180 <ip4_reass+0x178>
 800a176:	89a2      	ldrh	r2, [r4, #12]
 800a178:	88ab      	ldrh	r3, [r5, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	f000 80ee 	beq.w	800a35c <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800a180:	6824      	ldr	r4, [r4, #0]
 800a182:	e768      	b.n	800a056 <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a184:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800a186:	889a      	ldrh	r2, [r3, #4]
 800a188:	4290      	cmp	r0, r2
 800a18a:	d26d      	bcs.n	800a268 <ip4_reass+0x260>
      iprh->next_pbuf = q;
 800a18c:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800a18e:	2d00      	cmp	r5, #0
 800a190:	d065      	beq.n	800a25e <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800a192:	88eb      	ldrh	r3, [r5, #6]
 800a194:	4298      	cmp	r0, r3
 800a196:	f0c0 80cd 	bcc.w	800a334 <ip4_reass+0x32c>
 800a19a:	4594      	cmp	ip, r2
 800a19c:	f200 80ca 	bhi.w	800a334 <ip4_reass+0x32c>
        if (iprh_prev->end != iprh->start) {
 800a1a0:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 800a1a2:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800a1a6:	f040 80f5 	bne.w	800a394 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a1aa:	f1bb 0f00 	cmp.w	fp, #0
 800a1ae:	d004      	beq.n	800a1ba <ip4_reass+0x1b2>
 800a1b0:	7fa3      	ldrb	r3, [r4, #30]
 800a1b2:	f013 0301 	ands.w	r3, r3, #1
 800a1b6:	f000 809b 	beq.w	800a2f0 <ip4_reass+0x2e8>
    if (valid) {
 800a1ba:	f1ba 0f00 	cmp.w	sl, #0
 800a1be:	d170      	bne.n	800a2a2 <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 800a1c0:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a1c4:	4e53      	ldr	r6, [pc, #332]	; (800a314 <ip4_reass+0x30c>)
 800a1c6:	88b0      	ldrh	r0, [r6, #4]
 800a1c8:	4481      	add	r9, r0
 800a1ca:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 800a1ce:	f1bb 0f00 	cmp.w	fp, #0
 800a1d2:	d106      	bne.n	800a1e2 <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a1d8:	7fa3      	ldrb	r3, [r4, #30]
 800a1da:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800a1de:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a1e0:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a1e2:	f1ba 0f01 	cmp.w	sl, #1
 800a1e6:	d1bc      	bne.n	800a162 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a1e8:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a1ea:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a1ee:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a1f0:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a1f2:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a1f6:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a1f8:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a1fa:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a1fc:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a1fe:	f853 cb04 	ldr.w	ip, [r3], #4
 800a202:	428b      	cmp	r3, r1
 800a204:	f842 cb04 	str.w	ip, [r2], #4
 800a208:	d1f9      	bne.n	800a1fe <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a20a:	f000 f9bf 	bl	800a58c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800a20e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a210:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a212:	71bb      	strb	r3, [r7, #6]
 800a214:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a216:	72bb      	strb	r3, [r7, #10]
 800a218:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 800a21a:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	d169      	bne.n	800a2f4 <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 800a220:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 800a222:	42a3      	cmp	r3, r4
 800a224:	d002      	beq.n	800a22c <ip4_reass+0x224>
 800a226:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d170      	bne.n	800a30e <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a22c:	4620      	mov	r0, r4
 800a22e:	4629      	mov	r1, r5
 800a230:	f7ff fdd2 	bl	8009dd8 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800a234:	4638      	mov	r0, r7
 800a236:	f001 f8a5 	bl	800b384 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a23a:	88b3      	ldrh	r3, [r6, #4]
    clen = pbuf_clen(p);
 800a23c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a23e:	4283      	cmp	r3, r0
 800a240:	d206      	bcs.n	800a250 <ip4_reass+0x248>
 800a242:	4b35      	ldr	r3, [pc, #212]	; (800a318 <ip4_reass+0x310>)
 800a244:	f240 229b 	movw	r2, #667	; 0x29b
 800a248:	4936      	ldr	r1, [pc, #216]	; (800a324 <ip4_reass+0x31c>)
 800a24a:	4835      	ldr	r0, [pc, #212]	; (800a320 <ip4_reass+0x318>)
 800a24c:	f005 f8ae 	bl	800f3ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a250:	88b0      	ldrh	r0, [r6, #4]
 800a252:	1b04      	subs	r4, r0, r4
 800a254:	80b4      	strh	r4, [r6, #4]
}
 800a256:	4638      	mov	r0, r7
 800a258:	b003      	add	sp, #12
 800a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800a25e:	4594      	cmp	ip, r2
 800a260:	d868      	bhi.n	800a334 <ip4_reass+0x32c>
      ipr->p = new_p;
 800a262:	f8c4 8004 	str.w	r8, [r4, #4]
 800a266:	e7a0      	b.n	800a1aa <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 800a268:	d064      	beq.n	800a334 <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 800a26a:	88d9      	ldrh	r1, [r3, #6]
 800a26c:	4281      	cmp	r1, r0
 800a26e:	d861      	bhi.n	800a334 <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 800a270:	b125      	cbz	r5, 800a27c <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 800a272:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 800a274:	4291      	cmp	r1, r2
 800a276:	bf18      	it	ne
 800a278:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800a27c:	6819      	ldr	r1, [r3, #0]
 800a27e:	461d      	mov	r5, r3
 800a280:	e752      	b.n	800a128 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800a282:	88eb      	ldrh	r3, [r5, #6]
 800a284:	4283      	cmp	r3, r0
 800a286:	d906      	bls.n	800a296 <ip4_reass+0x28e>
 800a288:	4b23      	ldr	r3, [pc, #140]	; (800a318 <ip4_reass+0x310>)
 800a28a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800a28e:	4926      	ldr	r1, [pc, #152]	; (800a328 <ip4_reass+0x320>)
 800a290:	4823      	ldr	r0, [pc, #140]	; (800a320 <ip4_reass+0x318>)
 800a292:	f005 f88b 	bl	800f3ac <iprintf>
      if (iprh_prev->end != iprh->start) {
 800a296:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 800a298:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800a29c:	88b3      	ldrh	r3, [r6, #4]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	e781      	b.n	800a1a6 <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a2a2:	6863      	ldr	r3, [r4, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d08b      	beq.n	800a1c0 <ip4_reass+0x1b8>
 800a2a8:	6859      	ldr	r1, [r3, #4]
 800a2aa:	888b      	ldrh	r3, [r1, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d187      	bne.n	800a1c0 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 800a2b0:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800a2b2:	b9a3      	cbnz	r3, 800a2de <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 800a2b4:	42b1      	cmp	r1, r6
 800a2b6:	d106      	bne.n	800a2c6 <ip4_reass+0x2be>
 800a2b8:	4b17      	ldr	r3, [pc, #92]	; (800a318 <ip4_reass+0x310>)
 800a2ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a2be:	491b      	ldr	r1, [pc, #108]	; (800a32c <ip4_reass+0x324>)
 800a2c0:	4817      	ldr	r0, [pc, #92]	; (800a320 <ip4_reass+0x318>)
 800a2c2:	f005 f873 	bl	800f3ac <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a2c6:	6833      	ldr	r3, [r6, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f43f af7b 	beq.w	800a1c4 <ip4_reass+0x1bc>
 800a2ce:	4b12      	ldr	r3, [pc, #72]	; (800a318 <ip4_reass+0x310>)
 800a2d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a2d4:	4916      	ldr	r1, [pc, #88]	; (800a330 <ip4_reass+0x328>)
 800a2d6:	4812      	ldr	r0, [pc, #72]	; (800a320 <ip4_reass+0x318>)
 800a2d8:	f005 f868 	bl	800f3ac <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800a2dc:	e772      	b.n	800a1c4 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 800a2de:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800a2e0:	88f0      	ldrh	r0, [r6, #6]
 800a2e2:	8893      	ldrh	r3, [r2, #4]
 800a2e4:	4298      	cmp	r0, r3
 800a2e6:	f47f af6b 	bne.w	800a1c0 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 800a2ea:	6813      	ldr	r3, [r2, #0]
 800a2ec:	4616      	mov	r6, r2
 800a2ee:	e7e0      	b.n	800a2b2 <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	e767      	b.n	800a1c4 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 800a2f4:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 800a2f8:	2114      	movs	r1, #20
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 fed2 	bl	800b0a4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a300:	4629      	mov	r1, r5
 800a302:	4638      	mov	r0, r7
 800a304:	f001 f862 	bl	800b3cc <pbuf_cat>
      r = iprh->next_pbuf;
 800a308:	f8d8 5000 	ldr.w	r5, [r8]
 800a30c:	e786      	b.n	800a21c <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 800a30e:	682b      	ldr	r3, [r5, #0]
 800a310:	e787      	b.n	800a222 <ip4_reass+0x21a>
 800a312:	bf00      	nop
 800a314:	20010248 	.word	0x20010248
 800a318:	080155c6 	.word	0x080155c6
 800a31c:	080156e2 	.word	0x080156e2
 800a320:	080144fe 	.word	0x080144fe
 800a324:	08015748 	.word	0x08015748
 800a328:	080156c4 	.word	0x080156c4
 800a32c:	08015719 	.word	0x08015719
 800a330:	08015726 	.word	0x08015726
  if (ipr->p == NULL) {
 800a334:	6863      	ldr	r3, [r4, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f47f af10 	bne.w	800a15c <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a33c:	4b19      	ldr	r3, [pc, #100]	; (800a3a4 <ip4_reass+0x39c>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	42a3      	cmp	r3, r4
 800a342:	d006      	beq.n	800a352 <ip4_reass+0x34a>
 800a344:	4b18      	ldr	r3, [pc, #96]	; (800a3a8 <ip4_reass+0x3a0>)
 800a346:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a34a:	4918      	ldr	r1, [pc, #96]	; (800a3ac <ip4_reass+0x3a4>)
 800a34c:	4818      	ldr	r0, [pc, #96]	; (800a3b0 <ip4_reass+0x3a8>)
 800a34e:	f005 f82d 	bl	800f3ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a352:	2100      	movs	r1, #0
 800a354:	4620      	mov	r0, r4
 800a356:	f7ff fd3f 	bl	8009dd8 <ip_reass_dequeue_datagram>
 800a35a:	e6ff      	b.n	800a15c <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a35c:	88e8      	ldrh	r0, [r5, #6]
 800a35e:	f000 f915 	bl	800a58c <lwip_htons>
 800a362:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a366:	2800      	cmp	r0, #0
 800a368:	f47f ae9e 	bne.w	800a0a8 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a36c:	89e0      	ldrh	r0, [r4, #14]
 800a36e:	f000 f90d 	bl	800a58c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a372:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a376:	2800      	cmp	r0, #0
 800a378:	f43f ae96 	beq.w	800a0a8 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a37c:	462b      	mov	r3, r5
 800a37e:	f104 0208 	add.w	r2, r4, #8
 800a382:	f105 0114 	add.w	r1, r5, #20
 800a386:	f853 0b04 	ldr.w	r0, [r3], #4
 800a38a:	428b      	cmp	r3, r1
 800a38c:	f842 0b04 	str.w	r0, [r2], #4
 800a390:	d1f9      	bne.n	800a386 <ip4_reass+0x37e>
 800a392:	e689      	b.n	800a0a8 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a394:	f1bb 0f00 	cmp.w	fp, #0
 800a398:	f43f af12 	beq.w	800a1c0 <ip4_reass+0x1b8>
 800a39c:	f04f 0a00 	mov.w	sl, #0
 800a3a0:	e706      	b.n	800a1b0 <ip4_reass+0x1a8>
 800a3a2:	bf00      	nop
 800a3a4:	20010248 	.word	0x20010248
 800a3a8:	080155c6 	.word	0x080155c6
 800a3ac:	08015763 	.word	0x08015763
 800a3b0:	080144fe 	.word	0x080144fe

0800a3b4 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a3b4:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 800a3b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ba:	ed2d 8b02 	vpush	{d8}
 800a3be:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a3c2:	f1b3 0214 	subs.w	r2, r3, #20
{
 800a3c6:	b08b      	sub	sp, #44	; 0x2c
 800a3c8:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a3ca:	bf48      	it	mi
 800a3cc:	f1a3 020d 	submi.w	r2, r3, #13
{
 800a3d0:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a3d2:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 800a3d6:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a3d8:	6843      	ldr	r3, [r0, #4]
 800a3da:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800a3e8:	d109      	bne.n	800a3fe <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a3ea:	8943      	ldrh	r3, [r0, #10]
 800a3ec:	2b13      	cmp	r3, #19
 800a3ee:	d809      	bhi.n	800a404 <ip4_frag+0x50>
 800a3f0:	4b60      	ldr	r3, [pc, #384]	; (800a574 <ip4_frag+0x1c0>)
 800a3f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a3f6:	4960      	ldr	r1, [pc, #384]	; (800a578 <ip4_frag+0x1c4>)
 800a3f8:	4860      	ldr	r0, [pc, #384]	; (800a57c <ip4_frag+0x1c8>)
 800a3fa:	f004 ffd7 	bl	800f3ac <iprintf>
    return ERR_VAL;
 800a3fe:	f06f 0005 	mvn.w	r0, #5
 800a402:	e013      	b.n	800a42c <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a404:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 800a406:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a408:	88d8      	ldrh	r0, [r3, #6]
 800a40a:	f000 f8bf 	bl	800a58c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800a40e:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a412:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 800a414:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 800a416:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800a41a:	3c14      	subs	r4, #20
 800a41c:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a41e:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800a420:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	b29b      	uxth	r3, r3
 800a426:	9306      	str	r3, [sp, #24]
  while (left) {
 800a428:	b92c      	cbnz	r4, 800a436 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a42a:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800a42c:	b00b      	add	sp, #44	; 0x2c
 800a42e:	ecbd 8b02 	vpop	{d8}
 800a432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a436:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a438:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a43c:	2114      	movs	r1, #20
 800a43e:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a440:	42a3      	cmp	r3, r4
 800a442:	bf28      	it	cs
 800a444:	4623      	movcs	r3, r4
 800a446:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a448:	f000 fec8 	bl	800b1dc <pbuf_alloc>
    if (rambuf == NULL) {
 800a44c:	4680      	mov	r8, r0
 800a44e:	2800      	cmp	r0, #0
 800a450:	d036      	beq.n	800a4c0 <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a452:	8943      	ldrh	r3, [r0, #10]
 800a454:	2b13      	cmp	r3, #19
 800a456:	d806      	bhi.n	800a466 <ip4_frag+0xb2>
 800a458:	4b46      	ldr	r3, [pc, #280]	; (800a574 <ip4_frag+0x1c0>)
 800a45a:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a45e:	4948      	ldr	r1, [pc, #288]	; (800a580 <ip4_frag+0x1cc>)
 800a460:	4846      	ldr	r0, [pc, #280]	; (800a57c <ip4_frag+0x1c8>)
 800a462:	f004 ffa3 	bl	800f3ac <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a466:	9b02      	ldr	r3, [sp, #8]
 800a468:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a46c:	4619      	mov	r1, r3
 800a46e:	3114      	adds	r1, #20
 800a470:	f853 0b04 	ldr.w	r0, [r3], #4
 800a474:	428b      	cmp	r3, r1
 800a476:	f842 0b04 	str.w	r0, [r2], #4
 800a47a:	d1f9      	bne.n	800a470 <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a47c:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800a480:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 800a484:	f1b9 0f00 	cmp.w	r9, #0
 800a488:	d041      	beq.n	800a50e <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 800a48a:	896b      	ldrh	r3, [r5, #10]
 800a48c:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a48e:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800a490:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a492:	d206      	bcs.n	800a4a2 <ip4_frag+0xee>
 800a494:	4b37      	ldr	r3, [pc, #220]	; (800a574 <ip4_frag+0x1c0>)
 800a496:	f240 322d 	movw	r2, #813	; 0x32d
 800a49a:	493a      	ldr	r1, [pc, #232]	; (800a584 <ip4_frag+0x1d0>)
 800a49c:	4837      	ldr	r0, [pc, #220]	; (800a57c <ip4_frag+0x1c8>)
 800a49e:	f004 ff85 	bl	800f3ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a4a2:	454e      	cmp	r6, r9
 800a4a4:	bf28      	it	cs
 800a4a6:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 800a4a8:	b916      	cbnz	r6, 800a4b0 <ip4_frag+0xfc>
        p = p->next;
 800a4aa:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 800a4ac:	2700      	movs	r7, #0
 800a4ae:	e7e9      	b.n	800a484 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a4b0:	2005      	movs	r0, #5
 800a4b2:	f000 fb9b 	bl	800abec <memp_malloc>
      if (pcr == NULL) {
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	b928      	cbnz	r0, 800a4c6 <ip4_frag+0x112>
        pbuf_free(rambuf);
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	f000 fe26 	bl	800b10c <pbuf_free>
  return ERR_MEM;
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c4:	e7b2      	b.n	800a42c <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a4c6:	9601      	str	r6, [sp, #4]
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	686a      	ldr	r2, [r5, #4]
 800a4cc:	9008      	str	r0, [sp, #32]
 800a4ce:	2000      	movs	r0, #0
 800a4d0:	443a      	add	r2, r7
 800a4d2:	9200      	str	r2, [sp, #0]
 800a4d4:	2241      	movs	r2, #65	; 0x41
 800a4d6:	f000 fdc7 	bl	800b068 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	b918      	cbnz	r0, 800a4e6 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f7ff fd4c 	bl	8009f7c <ip_frag_free_pbuf_custom_ref>
 800a4e4:	e7e9      	b.n	800a4ba <ip4_frag+0x106>
 800a4e6:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a4ea:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f000 ff50 	bl	800b394 <pbuf_ref>
      pcr->original = p;
 800a4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a4f6:	4a24      	ldr	r2, [pc, #144]	; (800a588 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a4f8:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800a4fc:	9908      	ldr	r1, [sp, #32]
 800a4fe:	4640      	mov	r0, r8
      pcr->original = p;
 800a500:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a502:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800a504:	f000 ff62 	bl	800b3cc <pbuf_cat>
      if (left_to_copy) {
 800a508:	f1b9 0f00 	cmp.w	r9, #0
 800a50c:	d1cd      	bne.n	800a4aa <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 800a50e:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 800a510:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 800a512:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800a516:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 800a51a:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800a51c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800a51e:	42a3      	cmp	r3, r4
 800a520:	dd01      	ble.n	800a526 <ip4_frag+0x172>
 800a522:	9b07      	ldr	r3, [sp, #28]
 800a524:	b10b      	cbz	r3, 800a52a <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 800a526:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a52a:	f000 f82f 	bl	800a58c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a52e:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a530:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a534:	f103 0014 	add.w	r0, r3, #20
 800a538:	b280      	uxth	r0, r0
 800a53a:	f000 f827 	bl	800a58c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800a53e:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800a540:	ee18 2a10 	vmov	r2, s16
 800a544:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a546:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 800a54a:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 800a54c:	f88b 300a 	strb.w	r3, [fp, #10]
 800a550:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 800a554:	f8da 3014 	ldr.w	r3, [sl, #20]
 800a558:	4798      	blx	r3
    pbuf_free(rambuf);
 800a55a:	4640      	mov	r0, r8
 800a55c:	f000 fdd6 	bl	800b10c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a560:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800a562:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 800a564:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 800a56a:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	9303      	str	r3, [sp, #12]
 800a570:	e75a      	b.n	800a428 <ip4_frag+0x74>
 800a572:	bf00      	nop
 800a574:	080155c6 	.word	0x080155c6
 800a578:	08015783 	.word	0x08015783
 800a57c:	080144fe 	.word	0x080144fe
 800a580:	0801579e 	.word	0x0801579e
 800a584:	080157be 	.word	0x080157be
 800a588:	08009fa9 	.word	0x08009fa9

0800a58c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800a58c:	ba40      	rev16	r0, r0
}
 800a58e:	b280      	uxth	r0, r0
 800a590:	4770      	bx	lr

0800a592 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800a592:	ba00      	rev	r0, r0
 800a594:	4770      	bx	lr

0800a596 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a596:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800a598:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a59a:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800a59e:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800a5a2:	d007      	beq.n	800a5b4 <lwip_standard_chksum+0x1e>
 800a5a4:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 800a5a6:	bfc2      	ittt	gt
 800a5a8:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 800a5ac:	f101 31ff 	addgt.w	r1, r1, #4294967295	; 0xffffffff
    ((u8_t *)&t)[1] = *pb++;
 800a5b0:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 800a5b4:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800a5b6:	2901      	cmp	r1, #1
 800a5b8:	dc15      	bgt.n	800a5e6 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a5ba:	bf04      	itt	eq
 800a5bc:	7803      	ldrbeq	r3, [r0, #0]
 800a5be:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800a5c2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a5c6:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a5c8:	b298      	uxth	r0, r3
 800a5ca:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 800a5ce:	b298      	uxth	r0, r3
 800a5d0:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800a5d4:	b124      	cbz	r4, 800a5e0 <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a5d6:	0203      	lsls	r3, r0, #8
 800a5d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800a5e0:	b280      	uxth	r0, r0
 800a5e2:	b002      	add	sp, #8
 800a5e4:	bd10      	pop	{r4, pc}
    sum += *ps++;
 800a5e6:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 800a5ea:	3902      	subs	r1, #2
    sum += *ps++;
 800a5ec:	441a      	add	r2, r3
    len -= 2;
 800a5ee:	e7e2      	b.n	800a5b6 <lwip_standard_chksum+0x20>

0800a5f0 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a5f0:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a5f2:	2600      	movs	r6, #0
{
 800a5f4:	4605      	mov	r5, r0

  acc = 0;
 800a5f6:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 800a5f8:	b945      	cbnz	r5, 800a60c <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 800a5fa:	b126      	cbz	r6, 800a606 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a5fc:	0223      	lsls	r3, r4, #8
 800a5fe:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a602:	b29b      	uxth	r3, r3
 800a604:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800a606:	43e0      	mvns	r0, r4
}
 800a608:	b280      	uxth	r0, r0
 800a60a:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a60c:	8969      	ldrh	r1, [r5, #10]
 800a60e:	6868      	ldr	r0, [r5, #4]
 800a610:	f7ff ffc1 	bl	800a596 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800a614:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a616:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 800a618:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 800a61a:	b2a0      	uxth	r0, r4
 800a61c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 800a620:	d506      	bpl.n	800a630 <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800a622:	0223      	lsls	r3, r4, #8
 800a624:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a628:	f086 0601 	eor.w	r6, r6, #1
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 800a630:	682d      	ldr	r5, [r5, #0]
 800a632:	e7e1      	b.n	800a5f8 <inet_chksum_pbuf+0x8>

0800a634 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a634:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a636:	f004 fe25 	bl	800f284 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a63a:	f000 f80d 	bl	800a658 <mem_init>
  memp_init();
 800a63e:	f000 fab1 	bl	800aba4 <memp_init>
  pbuf_init();
  netif_init();
 800a642:	f000 fb69 	bl	800ad18 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a646:	f004 fa55 	bl	800eaf4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a64a:	f001 f841 	bl	800b6d0 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800a64e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800a652:	f004 ba0f 	b.w	800ea74 <sys_timeouts_init>
	...

0800a658 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a658:	4810      	ldr	r0, [pc, #64]	; (800a69c <mem_init+0x44>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800a65a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a65e:	4b10      	ldr	r3, [pc, #64]	; (800a6a0 <mem_init+0x48>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800a660:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a664:	300c      	adds	r0, #12
{
 800a666:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a668:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->next = MEM_SIZE_ALIGNED;
 800a66c:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 800a66e:	2200      	movs	r2, #0
 800a670:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a672:	4a0c      	ldr	r2, [pc, #48]	; (800a6a4 <mem_init+0x4c>)
 800a674:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a678:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 800a67a:	2101      	movs	r1, #1
 800a67c:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 800a67e:	f840 3c04 	str.w	r3, [r0, #-4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a682:	f004 fe0b 	bl	800f29c <sys_mutex_new>
 800a686:	b140      	cbz	r0, 800a69a <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a688:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <mem_init+0x50>)
 800a68a:	f240 221f 	movw	r2, #543	; 0x21f
 800a68e:	4907      	ldr	r1, [pc, #28]	; (800a6ac <mem_init+0x54>)
 800a690:	4807      	ldr	r0, [pc, #28]	; (800a6b0 <mem_init+0x58>)
  }
}
 800a692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a696:	f004 be89 	b.w	800f3ac <iprintf>
}
 800a69a:	bd10      	pop	{r4, pc}
 800a69c:	20010268 	.word	0x20010268
 800a6a0:	20048000 	.word	0x20048000
 800a6a4:	2004c000 	.word	0x2004c000
 800a6a8:	080157cd 	.word	0x080157cd
 800a6ac:	0801583f 	.word	0x0801583f
 800a6b0:	080144fe 	.word	0x080144fe

0800a6b4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a6b4:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	f000 80b7 	beq.w	800a82c <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a6be:	0783      	lsls	r3, r0, #30
 800a6c0:	d00c      	beq.n	800a6dc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a6c2:	4b5b      	ldr	r3, [pc, #364]	; (800a830 <mem_free+0x17c>)
 800a6c4:	f240 2273 	movw	r2, #627	; 0x273
 800a6c8:	495a      	ldr	r1, [pc, #360]	; (800a834 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6ca:	485b      	ldr	r0, [pc, #364]	; (800a838 <mem_free+0x184>)
 800a6cc:	f004 fe6e 	bl	800f3ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6d0:	f004 fe0a 	bl	800f2e8 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a6d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800a6d8:	f004 be12 	b.w	800f300 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6dc:	4d57      	ldr	r5, [pc, #348]	; (800a83c <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6de:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6e2:	682b      	ldr	r3, [r5, #0]
 800a6e4:	42b3      	cmp	r3, r6
 800a6e6:	d804      	bhi.n	800a6f2 <mem_free+0x3e>
 800a6e8:	f100 030c 	add.w	r3, r0, #12
 800a6ec:	686a      	ldr	r2, [r5, #4]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d204      	bcs.n	800a6fc <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6f2:	4b4f      	ldr	r3, [pc, #316]	; (800a830 <mem_free+0x17c>)
 800a6f4:	f240 227f 	movw	r2, #639	; 0x27f
 800a6f8:	4951      	ldr	r1, [pc, #324]	; (800a840 <mem_free+0x18c>)
 800a6fa:	e7e6      	b.n	800a6ca <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 800a6fc:	f105 000c 	add.w	r0, r5, #12
 800a700:	f004 fdda 	bl	800f2b8 <sys_mutex_lock>
  if (!mem->used) {
 800a704:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a708:	b95b      	cbnz	r3, 800a722 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a70a:	4b49      	ldr	r3, [pc, #292]	; (800a830 <mem_free+0x17c>)
 800a70c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a710:	494c      	ldr	r1, [pc, #304]	; (800a844 <mem_free+0x190>)
 800a712:	4849      	ldr	r0, [pc, #292]	; (800a838 <mem_free+0x184>)
 800a714:	f004 fe4a 	bl	800f3ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a718:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 800a71c:	f004 fdd1 	bl	800f2c2 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 800a720:	e7d6      	b.n	800a6d0 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 800a722:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a726:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a72a:	d813      	bhi.n	800a754 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 800a72c:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a730:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 800a734:	d80e      	bhi.n	800a754 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 800a736:	6829      	ldr	r1, [r5, #0]
 800a738:	1a73      	subs	r3, r6, r1
 800a73a:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a73c:	4283      	cmp	r3, r0
 800a73e:	d002      	beq.n	800a746 <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a740:	5a08      	ldrh	r0, [r1, r0]
 800a742:	4298      	cmp	r0, r3
 800a744:	d106      	bne.n	800a754 <mem_free+0xa0>
  return (struct mem *)(void *)&ram[ptr];
 800a746:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a748:	6868      	ldr	r0, [r5, #4]
 800a74a:	4282      	cmp	r2, r0
 800a74c:	d00b      	beq.n	800a766 <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a74e:	8852      	ldrh	r2, [r2, #2]
 800a750:	429a      	cmp	r2, r3
 800a752:	d008      	beq.n	800a766 <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a754:	4b36      	ldr	r3, [pc, #216]	; (800a830 <mem_free+0x17c>)
 800a756:	f240 2295 	movw	r2, #661	; 0x295
 800a75a:	493b      	ldr	r1, [pc, #236]	; (800a848 <mem_free+0x194>)
 800a75c:	4836      	ldr	r0, [pc, #216]	; (800a838 <mem_free+0x184>)
 800a75e:	f004 fe25 	bl	800f3ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a762:	483a      	ldr	r0, [pc, #232]	; (800a84c <mem_free+0x198>)
 800a764:	e7da      	b.n	800a71c <mem_free+0x68>
  mem->used = 0;
 800a766:	2300      	movs	r3, #0
 800a768:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800a76c:	68ab      	ldr	r3, [r5, #8]
 800a76e:	42b3      	cmp	r3, r6
    lfree = mem;
 800a770:	bf88      	it	hi
 800a772:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a774:	428e      	cmp	r6, r1
 800a776:	d206      	bcs.n	800a786 <mem_free+0xd2>
 800a778:	4b2d      	ldr	r3, [pc, #180]	; (800a830 <mem_free+0x17c>)
 800a77a:	f240 12df 	movw	r2, #479	; 0x1df
 800a77e:	4934      	ldr	r1, [pc, #208]	; (800a850 <mem_free+0x19c>)
 800a780:	482d      	ldr	r0, [pc, #180]	; (800a838 <mem_free+0x184>)
 800a782:	f004 fe13 	bl	800f3ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a786:	686b      	ldr	r3, [r5, #4]
 800a788:	429e      	cmp	r6, r3
 800a78a:	d306      	bcc.n	800a79a <mem_free+0xe6>
 800a78c:	4b28      	ldr	r3, [pc, #160]	; (800a830 <mem_free+0x17c>)
 800a78e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a792:	4930      	ldr	r1, [pc, #192]	; (800a854 <mem_free+0x1a0>)
 800a794:	4828      	ldr	r0, [pc, #160]	; (800a838 <mem_free+0x184>)
 800a796:	f004 fe09 	bl	800f3ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a79a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a79e:	b133      	cbz	r3, 800a7ae <mem_free+0xfa>
 800a7a0:	4b23      	ldr	r3, [pc, #140]	; (800a830 <mem_free+0x17c>)
 800a7a2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a7a6:	492c      	ldr	r1, [pc, #176]	; (800a858 <mem_free+0x1a4>)
 800a7a8:	4823      	ldr	r0, [pc, #140]	; (800a838 <mem_free+0x184>)
 800a7aa:	f004 fdff 	bl	800f3ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a7ae:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800a7b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7b6:	d906      	bls.n	800a7c6 <mem_free+0x112>
 800a7b8:	4b1d      	ldr	r3, [pc, #116]	; (800a830 <mem_free+0x17c>)
 800a7ba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a7be:	4927      	ldr	r1, [pc, #156]	; (800a85c <mem_free+0x1a8>)
 800a7c0:	481d      	ldr	r0, [pc, #116]	; (800a838 <mem_free+0x184>)
 800a7c2:	f004 fdf3 	bl	800f3ac <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800a7c6:	682b      	ldr	r3, [r5, #0]
 800a7c8:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a7cc:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a7ce:	4296      	cmp	r6, r2
 800a7d0:	d012      	beq.n	800a7f8 <mem_free+0x144>
 800a7d2:	7910      	ldrb	r0, [r2, #4]
 800a7d4:	b980      	cbnz	r0, 800a7f8 <mem_free+0x144>
 800a7d6:	6868      	ldr	r0, [r5, #4]
 800a7d8:	4282      	cmp	r2, r0
 800a7da:	d00d      	beq.n	800a7f8 <mem_free+0x144>
    if (lfree == nmem) {
 800a7dc:	68a8      	ldr	r0, [r5, #8]
 800a7de:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800a7e0:	5a5a      	ldrh	r2, [r3, r1]
 800a7e2:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a7e6:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800a7e8:	bf08      	it	eq
 800a7ea:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a7ec:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a7f0:	bf1e      	ittt	ne
 800a7f2:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800a7f4:	1af1      	subne	r1, r6, r3
 800a7f6:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800a7f8:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800a7fc:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800a7fe:	428e      	cmp	r6, r1
 800a800:	d00f      	beq.n	800a822 <mem_free+0x16e>
 800a802:	7908      	ldrb	r0, [r1, #4]
 800a804:	b968      	cbnz	r0, 800a822 <mem_free+0x16e>
    if (lfree == mem) {
 800a806:	68a8      	ldr	r0, [r5, #8]
 800a808:	4286      	cmp	r6, r0
      lfree = pmem;
 800a80a:	bf08      	it	eq
 800a80c:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 800a80e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a812:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a814:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a818:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a81c:	bf1c      	itt	ne
 800a81e:	185b      	addne	r3, r3, r1
 800a820:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800a822:	480a      	ldr	r0, [pc, #40]	; (800a84c <mem_free+0x198>)
}
 800a824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800a828:	f004 bd4b 	b.w	800f2c2 <sys_mutex_unlock>
}
 800a82c:	bd70      	pop	{r4, r5, r6, pc}
 800a82e:	bf00      	nop
 800a830:	080157cd 	.word	0x080157cd
 800a834:	0801585a 	.word	0x0801585a
 800a838:	080144fe 	.word	0x080144fe
 800a83c:	20010268 	.word	0x20010268
 800a840:	0801587b 	.word	0x0801587b
 800a844:	08015894 	.word	0x08015894
 800a848:	080158ba 	.word	0x080158ba
 800a84c:	20010274 	.word	0x20010274
 800a850:	080158ec 	.word	0x080158ec
 800a854:	08015903 	.word	0x08015903
 800a858:	0801591d 	.word	0x0801591d
 800a85c:	08015938 	.word	0x08015938

0800a860 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a864:	1ccc      	adds	r4, r1, #3
{
 800a866:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a868:	f024 0403 	bic.w	r4, r4, #3
 800a86c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800a86e:	2c0b      	cmp	r4, #11
 800a870:	d904      	bls.n	800a87c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a872:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 800a876:	d902      	bls.n	800a87e <mem_trim+0x1e>
    return NULL;
 800a878:	2500      	movs	r5, #0
 800a87a:	e01a      	b.n	800a8b2 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 800a87c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a87e:	42a1      	cmp	r1, r4
 800a880:	d8fa      	bhi.n	800a878 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a882:	4e47      	ldr	r6, [pc, #284]	; (800a9a0 <mem_trim+0x140>)
 800a884:	6833      	ldr	r3, [r6, #0]
 800a886:	42ab      	cmp	r3, r5
 800a888:	d802      	bhi.n	800a890 <mem_trim+0x30>
 800a88a:	6873      	ldr	r3, [r6, #4]
 800a88c:	42ab      	cmp	r3, r5
 800a88e:	d806      	bhi.n	800a89e <mem_trim+0x3e>
 800a890:	4b44      	ldr	r3, [pc, #272]	; (800a9a4 <mem_trim+0x144>)
 800a892:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a896:	4944      	ldr	r1, [pc, #272]	; (800a9a8 <mem_trim+0x148>)
 800a898:	4844      	ldr	r0, [pc, #272]	; (800a9ac <mem_trim+0x14c>)
 800a89a:	f004 fd87 	bl	800f3ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a89e:	6833      	ldr	r3, [r6, #0]
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	d802      	bhi.n	800a8aa <mem_trim+0x4a>
 800a8a4:	6872      	ldr	r2, [r6, #4]
 800a8a6:	42aa      	cmp	r2, r5
 800a8a8:	d806      	bhi.n	800a8b8 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a8aa:	f004 fd1d 	bl	800f2e8 <sys_arch_protect>
 800a8ae:	f004 fd27 	bl	800f300 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a8b8:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a8bc:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800a8c0:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a8c2:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800a8c6:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a8c8:	eba8 0807 	sub.w	r8, r8, r7
 800a8cc:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a8d0:	45a0      	cmp	r8, r4
 800a8d2:	d207      	bcs.n	800a8e4 <mem_trim+0x84>
 800a8d4:	4b33      	ldr	r3, [pc, #204]	; (800a9a4 <mem_trim+0x144>)
 800a8d6:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a8da:	4935      	ldr	r1, [pc, #212]	; (800a9b0 <mem_trim+0x150>)
 800a8dc:	4833      	ldr	r0, [pc, #204]	; (800a9ac <mem_trim+0x14c>)
 800a8de:	f004 fd65 	bl	800f3ac <iprintf>
  if (newsize > size) {
 800a8e2:	e7c9      	b.n	800a878 <mem_trim+0x18>
  if (newsize == size) {
 800a8e4:	d0e5      	beq.n	800a8b2 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 800a8e6:	4833      	ldr	r0, [pc, #204]	; (800a9b4 <mem_trim+0x154>)
 800a8e8:	f004 fce6 	bl	800f2b8 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800a8ec:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800a8f0:	f8d6 b000 	ldr.w	fp, [r6]
 800a8f4:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 800a8f8:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800a8fc:	bb3b      	cbnz	r3, 800a94e <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a8fe:	f5b9 4f80 	cmp.w	r9, #16384	; 0x4000
 800a902:	d106      	bne.n	800a912 <mem_trim+0xb2>
 800a904:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <mem_trim+0x144>)
 800a906:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a90a:	492b      	ldr	r1, [pc, #172]	; (800a9b8 <mem_trim+0x158>)
 800a90c:	4827      	ldr	r0, [pc, #156]	; (800a9ac <mem_trim+0x14c>)
 800a90e:	f004 fd4d 	bl	800f3ac <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a912:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 800a916:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 800a918:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a91c:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 800a91e:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 800a920:	4551      	cmp	r1, sl
    mem2->used = 0;
 800a922:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a926:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 800a928:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 800a92c:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 800a92e:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 800a930:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 800a932:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a936:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 800a938:	bf08      	it	eq
 800a93a:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a93c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a940:	d001      	beq.n	800a946 <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a942:	440b      	add	r3, r1
 800a944:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800a946:	481b      	ldr	r0, [pc, #108]	; (800a9b4 <mem_trim+0x154>)
 800a948:	f004 fcbb 	bl	800f2c2 <sys_mutex_unlock>
  return rmem;
 800a94c:	e7b1      	b.n	800a8b2 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a94e:	f104 0314 	add.w	r3, r4, #20
 800a952:	b29b      	uxth	r3, r3
 800a954:	4598      	cmp	r8, r3
 800a956:	d3f6      	bcc.n	800a946 <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a958:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a95c:	f5b9 4f80 	cmp.w	r9, #16384	; 0x4000
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a960:	441c      	add	r4, r3
 800a962:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a964:	d106      	bne.n	800a974 <mem_trim+0x114>
 800a966:	4b0f      	ldr	r3, [pc, #60]	; (800a9a4 <mem_trim+0x144>)
 800a968:	f240 3216 	movw	r2, #790	; 0x316
 800a96c:	4912      	ldr	r1, [pc, #72]	; (800a9b8 <mem_trim+0x158>)
 800a96e:	480f      	ldr	r0, [pc, #60]	; (800a9ac <mem_trim+0x14c>)
 800a970:	f004 fd1c 	bl	800f3ac <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800a974:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 800a976:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 800a978:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 800a97a:	4291      	cmp	r1, r2
    mem2->used = 0;
 800a97c:	f04f 0100 	mov.w	r1, #0
 800a980:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800a982:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 800a986:	bf88      	it	hi
 800a988:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 800a98a:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 800a98c:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 800a98e:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a992:	5b1a      	ldrh	r2, [r3, r4]
 800a994:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a998:	bf1c      	itt	ne
 800a99a:	189b      	addne	r3, r3, r2
 800a99c:	805c      	strhne	r4, [r3, #2]
 800a99e:	e7d2      	b.n	800a946 <mem_trim+0xe6>
 800a9a0:	20010268 	.word	0x20010268
 800a9a4:	080157cd 	.word	0x080157cd
 800a9a8:	08015962 	.word	0x08015962
 800a9ac:	080144fe 	.word	0x080144fe
 800a9b0:	08015979 	.word	0x08015979
 800a9b4:	20010274 	.word	0x20010274
 800a9b8:	08015999 	.word	0x08015999

0800a9bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f000 8084 	beq.w	800aace <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a9c6:	1cc5      	adds	r5, r0, #3
 800a9c8:	f025 0503 	bic.w	r5, r5, #3
 800a9cc:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 800a9ce:	2d0b      	cmp	r5, #11
 800a9d0:	d904      	bls.n	800a9dc <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9d2:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800a9d6:	d902      	bls.n	800a9de <mem_malloc+0x22>
    return NULL;
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e078      	b.n	800aace <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 800a9dc:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9de:	42a8      	cmp	r0, r5
 800a9e0:	d8fa      	bhi.n	800a9d8 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9e2:	4f40      	ldr	r7, [pc, #256]	; (800aae4 <mem_malloc+0x128>)
 800a9e4:	f107 000c 	add.w	r0, r7, #12
 800a9e8:	f004 fc66 	bl	800f2b8 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9f0:	f5c5 4080 	rsb	r0, r5, #16384	; 0x4000
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a9f4:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 800a9f8:	1ab6      	subs	r6, r6, r2
 800a9fa:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9fc:	4286      	cmp	r6, r0
 800a9fe:	d303      	bcc.n	800aa08 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800aa00:	4839      	ldr	r0, [pc, #228]	; (800aae8 <mem_malloc+0x12c>)
 800aa02:	f004 fc5e 	bl	800f2c2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800aa06:	e7e7      	b.n	800a9d8 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 800aa08:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa0a:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 800aa0c:	7923      	ldrb	r3, [r4, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d165      	bne.n	800aade <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa12:	ebac 0306 	sub.w	r3, ip, r6
 800aa16:	440b      	add	r3, r1
      if ((!mem->used) &&
 800aa18:	42ab      	cmp	r3, r5
 800aa1a:	d360      	bcc.n	800aade <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa1c:	f105 0808 	add.w	r8, r5, #8
 800aa20:	3514      	adds	r5, #20
 800aa22:	b2ad      	uxth	r5, r5
 800aa24:	fa1f f888 	uxth.w	r8, r8
 800aa28:	42ab      	cmp	r3, r5
 800aa2a:	d352      	bcc.n	800aad2 <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa2c:	eb08 0506 	add.w	r5, r8, r6
 800aa30:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa32:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 800aa36:	d106      	bne.n	800aa46 <mem_malloc+0x8a>
 800aa38:	4b2c      	ldr	r3, [pc, #176]	; (800aaec <mem_malloc+0x130>)
 800aa3a:	f240 3287 	movw	r2, #903	; 0x387
 800aa3e:	492c      	ldr	r1, [pc, #176]	; (800aaf0 <mem_malloc+0x134>)
 800aa40:	482c      	ldr	r0, [pc, #176]	; (800aaf4 <mem_malloc+0x138>)
 800aa42:	f004 fcb3 	bl	800f3ac <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800aa46:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 800aa48:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800aa4a:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 800aa4c:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800aa4e:	8821      	ldrh	r1, [r4, #0]
 800aa50:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 800aa52:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 800aa54:	2201      	movs	r2, #1
          mem->next = ptr2;
 800aa56:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 800aa58:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa5a:	5b5a      	ldrh	r2, [r3, r5]
 800aa5c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aa60:	d001      	beq.n	800aa66 <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa62:	4413      	add	r3, r2
 800aa64:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	42a3      	cmp	r3, r4
 800aa6a:	d110      	bne.n	800aa8e <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 800aa6c:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 800aa70:	791a      	ldrb	r2, [r3, #4]
 800aa72:	b10a      	cbz	r2, 800aa78 <mem_malloc+0xbc>
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d12f      	bne.n	800aad8 <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aa78:	4299      	cmp	r1, r3
          lfree = cur;
 800aa7a:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aa7c:	d007      	beq.n	800aa8e <mem_malloc+0xd2>
 800aa7e:	b132      	cbz	r2, 800aa8e <mem_malloc+0xd2>
 800aa80:	4b1a      	ldr	r3, [pc, #104]	; (800aaec <mem_malloc+0x130>)
 800aa82:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aa86:	491c      	ldr	r1, [pc, #112]	; (800aaf8 <mem_malloc+0x13c>)
 800aa88:	481a      	ldr	r0, [pc, #104]	; (800aaf4 <mem_malloc+0x138>)
 800aa8a:	f004 fc8f 	bl	800f3ac <iprintf>
        sys_mutex_unlock(&mem_mutex);
 800aa8e:	4816      	ldr	r0, [pc, #88]	; (800aae8 <mem_malloc+0x12c>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aa90:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 800aa92:	f004 fc16 	bl	800f2c2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4543      	cmp	r3, r8
 800aa9a:	d206      	bcs.n	800aaaa <mem_malloc+0xee>
 800aa9c:	4b13      	ldr	r3, [pc, #76]	; (800aaec <mem_malloc+0x130>)
 800aa9e:	f240 32b9 	movw	r2, #953	; 0x3b9
 800aaa2:	4916      	ldr	r1, [pc, #88]	; (800aafc <mem_malloc+0x140>)
 800aaa4:	4813      	ldr	r0, [pc, #76]	; (800aaf4 <mem_malloc+0x138>)
 800aaa6:	f004 fc81 	bl	800f3ac <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800aaaa:	07a3      	lsls	r3, r4, #30
 800aaac:	d00d      	beq.n	800aaca <mem_malloc+0x10e>
 800aaae:	4b0f      	ldr	r3, [pc, #60]	; (800aaec <mem_malloc+0x130>)
 800aab0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800aab4:	4912      	ldr	r1, [pc, #72]	; (800ab00 <mem_malloc+0x144>)
 800aab6:	480f      	ldr	r0, [pc, #60]	; (800aaf4 <mem_malloc+0x138>)
 800aab8:	f004 fc78 	bl	800f3ac <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800aabc:	4b0b      	ldr	r3, [pc, #44]	; (800aaec <mem_malloc+0x130>)
 800aabe:	f240 32bd 	movw	r2, #957	; 0x3bd
 800aac2:	4910      	ldr	r1, [pc, #64]	; (800ab04 <mem_malloc+0x148>)
 800aac4:	480b      	ldr	r0, [pc, #44]	; (800aaf4 <mem_malloc+0x138>)
 800aac6:	f004 fc71 	bl	800f3ac <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800aaca:	f104 0008 	add.w	r0, r4, #8
}
 800aace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 800aad2:	2301      	movs	r3, #1
 800aad4:	7123      	strb	r3, [r4, #4]
 800aad6:	e7c6      	b.n	800aa66 <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	4403      	add	r3, r0
 800aadc:	e7c8      	b.n	800aa70 <mem_malloc+0xb4>
 800aade:	460e      	mov	r6, r1
 800aae0:	e78c      	b.n	800a9fc <mem_malloc+0x40>
 800aae2:	bf00      	nop
 800aae4:	20010268 	.word	0x20010268
 800aae8:	20010274 	.word	0x20010274
 800aaec:	080157cd 	.word	0x080157cd
 800aaf0:	08015999 	.word	0x08015999
 800aaf4:	080144fe 	.word	0x080144fe
 800aaf8:	080159aa 	.word	0x080159aa
 800aafc:	080159c3 	.word	0x080159c3
 800ab00:	080159f3 	.word	0x080159f3
 800ab04:	08015a22 	.word	0x08015a22

0800ab08 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ab08:	b538      	push	{r3, r4, r5, lr}
 800ab0a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ab0c:	f004 fbec 	bl	800f2e8 <sys_arch_protect>
 800ab10:	4605      	mov	r5, r0

  memp = *desc->tab;
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ab16:	b15c      	cbz	r4, 800ab30 <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ab18:	6822      	ldr	r2, [r4, #0]
 800ab1a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ab1c:	07a3      	lsls	r3, r4, #30
 800ab1e:	d006      	beq.n	800ab2e <do_memp_malloc_pool+0x26>
 800ab20:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <do_memp_malloc_pool+0x30>)
 800ab22:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ab26:	4905      	ldr	r1, [pc, #20]	; (800ab3c <do_memp_malloc_pool+0x34>)
 800ab28:	4805      	ldr	r0, [pc, #20]	; (800ab40 <do_memp_malloc_pool+0x38>)
 800ab2a:	f004 fc3f 	bl	800f3ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab2e:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ab30:	f004 fbe6 	bl	800f300 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800ab34:	4620      	mov	r0, r4
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
 800ab38:	08015a45 	.word	0x08015a45
 800ab3c:	08015ab8 	.word	0x08015ab8
 800ab40:	080144fe 	.word	0x080144fe

0800ab44 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ab44:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ab46:	078b      	lsls	r3, r1, #30
{
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800ab4c:	d006      	beq.n	800ab5c <do_memp_free_pool+0x18>
 800ab4e:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <do_memp_free_pool+0x2c>)
 800ab50:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ab54:	4907      	ldr	r1, [pc, #28]	; (800ab74 <do_memp_free_pool+0x30>)
 800ab56:	4808      	ldr	r0, [pc, #32]	; (800ab78 <do_memp_free_pool+0x34>)
 800ab58:	f004 fc28 	bl	800f3ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800ab5c:	f004 fbc4 	bl	800f2e8 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ab60:	68ab      	ldr	r3, [r5, #8]
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800ab66:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ab68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800ab6c:	f004 bbc8 	b.w	800f300 <sys_arch_unprotect>
 800ab70:	08015a45 	.word	0x08015a45
 800ab74:	08015adb 	.word	0x08015adb
 800ab78:	080144fe 	.word	0x080144fe

0800ab7c <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab7c:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800ab7e:	2200      	movs	r2, #0
 800ab80:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab82:	3303      	adds	r3, #3
{
 800ab84:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ab86:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800ab8a:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800ab8c:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800ab8e:	4294      	cmp	r4, r2
 800ab90:	dc00      	bgt.n	800ab94 <memp_init_pool+0x18>
}
 800ab92:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800ab94:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800ab96:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800ab98:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ab9a:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800ab9c:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ab9e:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 800aba0:	e7f5      	b.n	800ab8e <memp_init_pool+0x12>
	...

0800aba4 <memp_init>:
{
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d05      	ldr	r5, [pc, #20]	; (800abbc <memp_init+0x18>)
 800aba8:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abaa:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 800abac:	f855 0b04 	ldr.w	r0, [r5], #4
 800abb0:	f7ff ffe4 	bl	800ab7c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800abb4:	b2a4      	uxth	r4, r4
 800abb6:	2c00      	cmp	r4, #0
 800abb8:	d1f7      	bne.n	800abaa <memp_init+0x6>
}
 800abba:	bd38      	pop	{r3, r4, r5, pc}
 800abbc:	080142fc 	.word	0x080142fc

0800abc0 <memp_malloc_pool>:
{
 800abc0:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800abc2:	4604      	mov	r4, r0
 800abc4:	b118      	cbz	r0, 800abce <memp_malloc_pool+0xe>
}
 800abc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800abca:	f7ff bf9d 	b.w	800ab08 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800abce:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <memp_malloc_pool+0x20>)
 800abd0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800abd4:	4903      	ldr	r1, [pc, #12]	; (800abe4 <memp_malloc_pool+0x24>)
 800abd6:	4804      	ldr	r0, [pc, #16]	; (800abe8 <memp_malloc_pool+0x28>)
 800abd8:	f004 fbe8 	bl	800f3ac <iprintf>
}
 800abdc:	4620      	mov	r0, r4
 800abde:	bd10      	pop	{r4, pc}
 800abe0:	08015a45 	.word	0x08015a45
 800abe4:	08015afb 	.word	0x08015afb
 800abe8:	080144fe 	.word	0x080144fe

0800abec <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800abec:	280c      	cmp	r0, #12
{
 800abee:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800abf0:	d806      	bhi.n	800ac00 <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800abf2:	4b08      	ldr	r3, [pc, #32]	; (800ac14 <memp_malloc+0x28>)
 800abf4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800abf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800abfc:	f7ff bf84 	b.w	800ab08 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ac00:	4b05      	ldr	r3, [pc, #20]	; (800ac18 <memp_malloc+0x2c>)
 800ac02:	f240 1257 	movw	r2, #343	; 0x157
 800ac06:	4905      	ldr	r1, [pc, #20]	; (800ac1c <memp_malloc+0x30>)
 800ac08:	4805      	ldr	r0, [pc, #20]	; (800ac20 <memp_malloc+0x34>)
 800ac0a:	f004 fbcf 	bl	800f3ac <iprintf>
}
 800ac0e:	2000      	movs	r0, #0
 800ac10:	bd08      	pop	{r3, pc}
 800ac12:	bf00      	nop
 800ac14:	080142fc 	.word	0x080142fc
 800ac18:	08015a45 	.word	0x08015a45
 800ac1c:	08015b0d 	.word	0x08015b0d
 800ac20:	080144fe 	.word	0x080144fe

0800ac24 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ac24:	b940      	cbnz	r0, 800ac38 <memp_free_pool+0x14>
 800ac26:	4b06      	ldr	r3, [pc, #24]	; (800ac40 <memp_free_pool+0x1c>)
 800ac28:	f240 1295 	movw	r2, #405	; 0x195
 800ac2c:	4905      	ldr	r1, [pc, #20]	; (800ac44 <memp_free_pool+0x20>)
 800ac2e:	4806      	ldr	r0, [pc, #24]	; (800ac48 <memp_free_pool+0x24>)
 800ac30:	f004 bbbc 	b.w	800f3ac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 800ac34:	f7ff bf86 	b.w	800ab44 <do_memp_free_pool>
  if ((desc == NULL) || (mem == NULL)) {
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	d1fb      	bne.n	800ac34 <memp_free_pool+0x10>
}
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	08015a45 	.word	0x08015a45
 800ac44:	08015afb 	.word	0x08015afb
 800ac48:	080144fe 	.word	0x080144fe

0800ac4c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ac4c:	280c      	cmp	r0, #12
 800ac4e:	d906      	bls.n	800ac5e <memp_free+0x12>
 800ac50:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <memp_free+0x20>)
 800ac52:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ac56:	4906      	ldr	r1, [pc, #24]	; (800ac70 <memp_free+0x24>)
 800ac58:	4806      	ldr	r0, [pc, #24]	; (800ac74 <memp_free+0x28>)
 800ac5a:	f004 bba7 	b.w	800f3ac <iprintf>

  if (mem == NULL) {
 800ac5e:	b121      	cbz	r1, 800ac6a <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ac60:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <memp_free+0x2c>)
 800ac62:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800ac66:	f7ff bf6d 	b.w	800ab44 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ac6a:	4770      	bx	lr
 800ac6c:	08015a45 	.word	0x08015a45
 800ac70:	08015b2a 	.word	0x08015b2a
 800ac74:	080144fe 	.word	0x080144fe
 800ac78:	080142fc 	.word	0x080142fc

0800ac7c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800ac7c:	f06f 000b 	mvn.w	r0, #11
 800ac80:	4770      	bx	lr
	...

0800ac84 <netif_issue_reports>:
{
 800ac84:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ac86:	4604      	mov	r4, r0
 800ac88:	b930      	cbnz	r0, 800ac98 <netif_issue_reports+0x14>
 800ac8a:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <netif_issue_reports+0x38>)
 800ac8c:	f240 326d 	movw	r2, #877	; 0x36d
 800ac90:	490b      	ldr	r1, [pc, #44]	; (800acc0 <netif_issue_reports+0x3c>)
 800ac92:	480c      	ldr	r0, [pc, #48]	; (800acc4 <netif_issue_reports+0x40>)
 800ac94:	f004 fb8a 	bl	800f3ac <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ac98:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800ac9c:	f003 0205 	and.w	r2, r3, #5
 800aca0:	2a05      	cmp	r2, #5
 800aca2:	d109      	bne.n	800acb8 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aca4:	6862      	ldr	r2, [r4, #4]
 800aca6:	b13a      	cbz	r2, 800acb8 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aca8:	071b      	lsls	r3, r3, #28
 800acaa:	d505      	bpl.n	800acb8 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 800acac:	1d21      	adds	r1, r4, #4
 800acae:	4620      	mov	r0, r4
}
 800acb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800acb4:	f7fe bbd6 	b.w	8009464 <etharp_request>
}
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	bf00      	nop
 800acbc:	08015b45 	.word	0x08015b45
 800acc0:	08015bb9 	.word	0x08015bb9
 800acc4:	080144fe 	.word	0x080144fe

0800acc8 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800acc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acca:	4605      	mov	r5, r0
 800accc:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800acce:	460c      	mov	r4, r1
 800acd0:	b931      	cbnz	r1, 800ace0 <netif_do_set_ipaddr.isra.0+0x18>
 800acd2:	4b0e      	ldr	r3, [pc, #56]	; (800ad0c <netif_do_set_ipaddr.isra.0+0x44>)
 800acd4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800acd8:	490d      	ldr	r1, [pc, #52]	; (800ad10 <netif_do_set_ipaddr.isra.0+0x48>)
 800acda:	480e      	ldr	r0, [pc, #56]	; (800ad14 <netif_do_set_ipaddr.isra.0+0x4c>)
 800acdc:	f004 fb66 	bl	800f3ac <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ace0:	686b      	ldr	r3, [r5, #4]
 800ace2:	6822      	ldr	r2, [r4, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d00f      	beq.n	800ad08 <netif_do_set_ipaddr.isra.0+0x40>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ace8:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800acea:	a901      	add	r1, sp, #4
 800acec:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 800acee:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800acf0:	f001 fc9a 	bl	800c628 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800acf4:	a901      	add	r1, sp, #4
 800acf6:	4630      	mov	r0, r6
 800acf8:	f004 f9a2 	bl	800f040 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800acfc:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800acfe:	2101      	movs	r1, #1
 800ad00:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ad02:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ad04:	f7ff ffbe 	bl	800ac84 <netif_issue_reports>
}
 800ad08:	b002      	add	sp, #8
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	08015b45 	.word	0x08015b45
 800ad10:	08014866 	.word	0x08014866
 800ad14:	080144fe 	.word	0x080144fe

0800ad18 <netif_init>:
}
 800ad18:	4770      	bx	lr
	...

0800ad1c <netif_set_addr>:
{
 800ad1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800ad1e:	4d14      	ldr	r5, [pc, #80]	; (800ad70 <netif_set_addr+0x54>)
{
 800ad20:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800ad22:	2900      	cmp	r1, #0
 800ad24:	bf14      	ite	ne
 800ad26:	460e      	movne	r6, r1
 800ad28:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 800ad2a:	2a00      	cmp	r2, #0
 800ad2c:	bf14      	ite	ne
 800ad2e:	4617      	movne	r7, r2
 800ad30:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bf18      	it	ne
 800ad36:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 800ad38:	6833      	ldr	r3, [r6, #0]
 800ad3a:	b9b3      	cbnz	r3, 800ad6a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad3c:	aa01      	add	r2, sp, #4
 800ad3e:	4631      	mov	r1, r6
 800ad40:	f7ff ffc2 	bl	800acc8 <netif_do_set_ipaddr.isra.0>
 800ad44:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ad46:	683a      	ldr	r2, [r7, #0]
 800ad48:	68a1      	ldr	r1, [r4, #8]
 800ad4a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ad4c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ad4e:	bf18      	it	ne
 800ad50:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ad52:	682a      	ldr	r2, [r5, #0]
 800ad54:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ad56:	bf18      	it	ne
 800ad58:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800ad5a:	b923      	cbnz	r3, 800ad66 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad5c:	aa01      	add	r2, sp, #4
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4620      	mov	r0, r4
 800ad62:	f7ff ffb1 	bl	800acc8 <netif_do_set_ipaddr.isra.0>
}
 800ad66:	b003      	add	sp, #12
 800ad68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e7eb      	b.n	800ad46 <netif_set_addr+0x2a>
 800ad6e:	bf00      	nop
 800ad70:	080142f8 	.word	0x080142f8

0800ad74 <netif_add>:
{
 800ad74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad78:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	b948      	cbnz	r0, 800ad94 <netif_add+0x20>
 800ad80:	4b3b      	ldr	r3, [pc, #236]	; (800ae70 <netif_add+0xfc>)
 800ad82:	f240 1227 	movw	r2, #295	; 0x127
 800ad86:	493b      	ldr	r1, [pc, #236]	; (800ae74 <netif_add+0x100>)
 800ad88:	483b      	ldr	r0, [pc, #236]	; (800ae78 <netif_add+0x104>)
 800ad8a:	f004 fb0f 	bl	800f3ac <iprintf>
}
 800ad8e:	4620      	mov	r0, r4
 800ad90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ad94:	f1b8 0f00 	cmp.w	r8, #0
 800ad98:	d108      	bne.n	800adac <netif_add+0x38>
 800ad9a:	4b35      	ldr	r3, [pc, #212]	; (800ae70 <netif_add+0xfc>)
 800ad9c:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ada0:	4936      	ldr	r1, [pc, #216]	; (800ae7c <netif_add+0x108>)
 800ada2:	4644      	mov	r4, r8
 800ada4:	4834      	ldr	r0, [pc, #208]	; (800ae78 <netif_add+0x104>)
 800ada6:	f004 fb01 	bl	800f3ac <iprintf>
 800adaa:	e7f0      	b.n	800ad8e <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 800adac:	4e34      	ldr	r6, [pc, #208]	; (800ae80 <netif_add+0x10c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800adae:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800adb0:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800ae8c <netif_add+0x118>
  netif->output = netif_null_output_ip4;
 800adb4:	6146      	str	r6, [r0, #20]
  netif->state = state;
 800adb6:	9e08      	ldr	r6, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800adb8:	42ab      	cmp	r3, r5
 800adba:	bf08      	it	eq
 800adbc:	4663      	moveq	r3, ip
  ip_addr_set_zero_ip4(&netif->gw);
 800adbe:	60c5      	str	r5, [r0, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800adc0:	42aa      	cmp	r2, r5
 800adc2:	bf08      	it	eq
 800adc4:	4662      	moveq	r2, ip
  netif->state = state;
 800adc6:	6206      	str	r6, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800adc8:	42a9      	cmp	r1, r5
 800adca:	bf08      	it	eq
 800adcc:	4661      	moveq	r1, ip
  netif->num = netif_num;
 800adce:	4e2d      	ldr	r6, [pc, #180]	; (800ae84 <netif_add+0x110>)
  netif->mtu = 0;
 800add0:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->num = netif_num;
 800add2:	7837      	ldrb	r7, [r6, #0]
  netif->flags = 0;
 800add4:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  netif->num = netif_num;
 800add8:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
  netif->input = input;
 800addc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800adde:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 800ade0:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 800ade2:	6107      	str	r7, [r0, #16]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ade4:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ade8:	f7ff ff98 	bl	800ad1c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800adec:	4620      	mov	r0, r4
 800adee:	47c0      	blx	r8
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d13b      	bne.n	800ae6c <netif_add+0xf8>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800adf4:	f8df a078 	ldr.w	sl, [pc, #120]	; 800ae70 <netif_add+0xfc>
 800adf8:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800ae90 <netif_add+0x11c>
 800adfc:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800ae78 <netif_add+0x104>
      if (netif->num == 255) {
 800ae00:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 800ae04:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae06:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 800ae08:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 800ae0a:	bf04      	itt	eq
 800ae0c:	2300      	moveq	r3, #0
 800ae0e:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae12:	b92d      	cbnz	r5, 800ae20 <netif_add+0xac>
  if (netif->num == 254) {
 800ae14:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ae18:	2bfe      	cmp	r3, #254	; 0xfe
 800ae1a:	d120      	bne.n	800ae5e <netif_add+0xea>
    netif_num = 0;
 800ae1c:	462b      	mov	r3, r5
 800ae1e:	e020      	b.n	800ae62 <netif_add+0xee>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ae20:	42a5      	cmp	r5, r4
 800ae22:	d106      	bne.n	800ae32 <netif_add+0xbe>
 800ae24:	4653      	mov	r3, sl
 800ae26:	f240 128b 	movw	r2, #395	; 0x18b
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	f004 fabd 	bl	800f3ac <iprintf>
        num_netifs++;
 800ae32:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ae34:	2fff      	cmp	r7, #255	; 0xff
 800ae36:	dd06      	ble.n	800ae46 <netif_add+0xd2>
 800ae38:	4653      	mov	r3, sl
 800ae3a:	f240 128d 	movw	r2, #397	; 0x18d
 800ae3e:	4912      	ldr	r1, [pc, #72]	; (800ae88 <netif_add+0x114>)
 800ae40:	4640      	mov	r0, r8
 800ae42:	f004 fab3 	bl	800f3ac <iprintf>
        if (netif2->num == netif->num) {
 800ae46:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ae4a:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d103      	bne.n	800ae5a <netif_add+0xe6>
          netif->num++;
 800ae52:	3201      	adds	r2, #1
 800ae54:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    } while (netif2 != NULL);
 800ae58:	e7d2      	b.n	800ae00 <netif_add+0x8c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ae5a:	682d      	ldr	r5, [r5, #0]
 800ae5c:	e7d9      	b.n	800ae12 <netif_add+0x9e>
    netif_num = (u8_t)(netif->num + 1);
 800ae5e:	3301      	adds	r3, #1
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 800ae64:	6873      	ldr	r3, [r6, #4]
 800ae66:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800ae68:	6074      	str	r4, [r6, #4]
  return netif;
 800ae6a:	e790      	b.n	800ad8e <netif_add+0x1a>
    return NULL;
 800ae6c:	462c      	mov	r4, r5
 800ae6e:	e78e      	b.n	800ad8e <netif_add+0x1a>
 800ae70:	08015b45 	.word	0x08015b45
 800ae74:	08015c6e 	.word	0x08015c6e
 800ae78:	080144fe 	.word	0x080144fe
 800ae7c:	08015c87 	.word	0x08015c87
 800ae80:	0800ac7d 	.word	0x0800ac7d
 800ae84:	20014034 	.word	0x20014034
 800ae88:	08015cbd 	.word	0x08015cbd
 800ae8c:	080142f8 	.word	0x080142f8
 800ae90:	08015ca9 	.word	0x08015ca9

0800ae94 <netif_set_default>:
  netif_default = netif;
 800ae94:	4b01      	ldr	r3, [pc, #4]	; (800ae9c <netif_set_default+0x8>)
 800ae96:	6098      	str	r0, [r3, #8]
}
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20014034 	.word	0x20014034

0800aea0 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800aea0:	b930      	cbnz	r0, 800aeb0 <netif_set_up+0x10>
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <netif_set_up+0x28>)
 800aea4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aea8:	4908      	ldr	r1, [pc, #32]	; (800aecc <netif_set_up+0x2c>)
 800aeaa:	4809      	ldr	r0, [pc, #36]	; (800aed0 <netif_set_up+0x30>)
 800aeac:	f004 ba7e 	b.w	800f3ac <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aeb0:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800aeb4:	07d1      	lsls	r1, r2, #31
 800aeb6:	d406      	bmi.n	800aec6 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aeb8:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aebc:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aebe:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aec2:	f7ff bedf 	b.w	800ac84 <netif_issue_reports>
}
 800aec6:	4770      	bx	lr
 800aec8:	08015b45 	.word	0x08015b45
 800aecc:	08015ceb 	.word	0x08015ceb
 800aed0:	080144fe 	.word	0x080144fe

0800aed4 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aed4:	b930      	cbnz	r0, 800aee4 <netif_set_down+0x10>
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <netif_set_down+0x2c>)
 800aed8:	f240 329b 	movw	r2, #923	; 0x39b
 800aedc:	4909      	ldr	r1, [pc, #36]	; (800af04 <netif_set_down+0x30>)
 800aede:	480a      	ldr	r0, [pc, #40]	; (800af08 <netif_set_down+0x34>)
 800aee0:	f004 ba64 	b.w	800f3ac <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800aee4:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800aee8:	07d1      	lsls	r1, r2, #31
 800aeea:	d507      	bpl.n	800aefc <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aeec:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aef0:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aef2:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aef6:	d501      	bpl.n	800aefc <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 800aef8:	f7fe b9f0 	b.w	80092dc <etharp_cleanup_netif>
}
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	08015b45 	.word	0x08015b45
 800af04:	08015d07 	.word	0x08015d07
 800af08:	080144fe 	.word	0x080144fe

0800af0c <netif_set_link_up>:
{
 800af0c:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800af0e:	4604      	mov	r4, r0
 800af10:	b940      	cbnz	r0, 800af24 <netif_set_link_up+0x18>
 800af12:	4b0f      	ldr	r3, [pc, #60]	; (800af50 <netif_set_link_up+0x44>)
 800af14:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800af18:	490e      	ldr	r1, [pc, #56]	; (800af54 <netif_set_link_up+0x48>)
 800af1a:	480f      	ldr	r0, [pc, #60]	; (800af58 <netif_set_link_up+0x4c>)
}
 800af1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800af20:	f004 ba44 	b.w	800f3ac <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800af24:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800af28:	075a      	lsls	r2, r3, #29
 800af2a:	d40f      	bmi.n	800af4c <netif_set_link_up+0x40>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800af2c:	f043 0304 	orr.w	r3, r3, #4
 800af30:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    dhcp_network_changed(netif);
 800af34:	f7fd fe04 	bl	8008b40 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800af38:	2103      	movs	r1, #3
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7ff fea2 	bl	800ac84 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800af40:	69e3      	ldr	r3, [r4, #28]
 800af42:	b11b      	cbz	r3, 800af4c <netif_set_link_up+0x40>
 800af44:	4620      	mov	r0, r4
}
 800af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800af4a:	4718      	bx	r3
}
 800af4c:	bd10      	pop	{r4, pc}
 800af4e:	bf00      	nop
 800af50:	08015b45 	.word	0x08015b45
 800af54:	08015d25 	.word	0x08015d25
 800af58:	080144fe 	.word	0x080144fe

0800af5c <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800af5c:	b930      	cbnz	r0, 800af6c <netif_set_link_down+0x10>
 800af5e:	4b09      	ldr	r3, [pc, #36]	; (800af84 <netif_set_link_down+0x28>)
 800af60:	f240 4206 	movw	r2, #1030	; 0x406
 800af64:	4908      	ldr	r1, [pc, #32]	; (800af88 <netif_set_link_down+0x2c>)
 800af66:	4809      	ldr	r0, [pc, #36]	; (800af8c <netif_set_link_down+0x30>)
 800af68:	f004 ba20 	b.w	800f3ac <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800af6c:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800af70:	0751      	lsls	r1, r2, #29
 800af72:	d506      	bpl.n	800af82 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800af74:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 800af78:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800af7a:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800af7e:	b103      	cbz	r3, 800af82 <netif_set_link_down+0x26>
 800af80:	4718      	bx	r3
}
 800af82:	4770      	bx	lr
 800af84:	08015b45 	.word	0x08015b45
 800af88:	08015d46 	.word	0x08015d46
 800af8c:	080144fe 	.word	0x080144fe

0800af90 <netif_set_link_callback>:
  if (netif) {
 800af90:	b100      	cbz	r0, 800af94 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800af92:	61c1      	str	r1, [r0, #28]
}
 800af94:	4770      	bx	lr
	...

0800af98 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800af98:	4603      	mov	r3, r0
 800af9a:	b158      	cbz	r0, 800afb4 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800af9c:	4a06      	ldr	r2, [pc, #24]	; (800afb8 <netif_get_by_index+0x20>)
 800af9e:	6850      	ldr	r0, [r2, #4]
 800afa0:	b900      	cbnz	r0, 800afa4 <netif_get_by_index+0xc>
 800afa2:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800afa4:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800afa8:	3201      	adds	r2, #1
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	429a      	cmp	r2, r3
 800afae:	d001      	beq.n	800afb4 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800afb0:	6800      	ldr	r0, [r0, #0]
 800afb2:	e7f5      	b.n	800afa0 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	20014034 	.word	0x20014034

0800afbc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800afbc:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800afbe:	b968      	cbnz	r0, 800afdc <pbuf_add_header_impl+0x20>
 800afc0:	4b14      	ldr	r3, [pc, #80]	; (800b014 <pbuf_add_header_impl+0x58>)
 800afc2:	f240 12df 	movw	r2, #479	; 0x1df
 800afc6:	4914      	ldr	r1, [pc, #80]	; (800b018 <pbuf_add_header_impl+0x5c>)
 800afc8:	4814      	ldr	r0, [pc, #80]	; (800b01c <pbuf_add_header_impl+0x60>)
 800afca:	f004 f9ef 	bl	800f3ac <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800afce:	2001      	movs	r0, #1
 800afd0:	e01f      	b.n	800b012 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800afd2:	2a00      	cmp	r2, #0
 800afd4:	d0fb      	beq.n	800afce <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800afd6:	6842      	ldr	r2, [r0, #4]
 800afd8:	1a51      	subs	r1, r2, r1
 800afda:	e014      	b.n	800b006 <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800afdc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800afe0:	d2f5      	bcs.n	800afce <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800afe2:	b1a9      	cbz	r1, 800b010 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800afe4:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800afe6:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800afe8:	fa13 f381 	uxtah	r3, r3, r1
 800afec:	b29b      	uxth	r3, r3
 800afee:	429c      	cmp	r4, r3
 800aff0:	d8ed      	bhi.n	800afce <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800aff2:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800aff6:	2d00      	cmp	r5, #0
 800aff8:	daeb      	bge.n	800afd2 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800affa:	6842      	ldr	r2, [r0, #4]
 800affc:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800affe:	f100 0210 	add.w	r2, r0, #16
 800b002:	4291      	cmp	r1, r2
 800b004:	d3e3      	bcc.n	800afce <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800b006:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800b008:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b00a:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b00c:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b00e:	8144      	strh	r4, [r0, #10]


  return 0;
 800b010:	2000      	movs	r0, #0
}
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	08015d69 	.word	0x08015d69
 800b018:	08015e7e 	.word	0x08015e7e
 800b01c:	080144fe 	.word	0x080144fe

0800b020 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b020:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800b024:	2b01      	cmp	r3, #1
{
 800b026:	b570      	push	{r4, r5, r6, lr}
 800b028:	4606      	mov	r6, r0
 800b02a:	460d      	mov	r5, r1
 800b02c:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b02e:	d006      	beq.n	800b03e <pbuf_alloc_reference+0x1e>
 800b030:	4b0a      	ldr	r3, [pc, #40]	; (800b05c <pbuf_alloc_reference+0x3c>)
 800b032:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b036:	490a      	ldr	r1, [pc, #40]	; (800b060 <pbuf_alloc_reference+0x40>)
 800b038:	480a      	ldr	r0, [pc, #40]	; (800b064 <pbuf_alloc_reference+0x44>)
 800b03a:	f004 f9b7 	bl	800f3ac <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b03e:	200b      	movs	r0, #11
 800b040:	f7ff fdd4 	bl	800abec <memp_malloc>
  if (p == NULL) {
 800b044:	b140      	cbz	r0, 800b058 <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800b046:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800b048:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800b04a:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 800b04c:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800b04e:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800b050:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 800b054:	2301      	movs	r3, #1
 800b056:	81c3      	strh	r3, [r0, #14]
}
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	bf00      	nop
 800b05c:	08015d69 	.word	0x08015d69
 800b060:	08015ddc 	.word	0x08015ddc
 800b064:	080144fe 	.word	0x080144fe

0800b068 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b068:	3003      	adds	r0, #3
 800b06a:	f020 0003 	bic.w	r0, r0, #3
{
 800b06e:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b070:	180e      	adds	r6, r1, r0
 800b072:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800b076:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b078:	42ae      	cmp	r6, r5
 800b07a:	d80d      	bhi.n	800b098 <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800b07c:	b104      	cbz	r4, 800b080 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b07e:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b080:	4618      	mov	r0, r3
  p->next = NULL;
 800b082:	2300      	movs	r3, #0
  p->payload = payload;
 800b084:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800b088:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 800b08a:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800b08c:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 800b08e:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800b090:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 800b092:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 800b094:	81c3      	strh	r3, [r0, #14]
}
 800b096:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800b098:	2000      	movs	r0, #0
 800b09a:	e7fc      	b.n	800b096 <pbuf_alloced_custom+0x2e>

0800b09c <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b09c:	2200      	movs	r2, #0
 800b09e:	f7ff bf8d 	b.w	800afbc <pbuf_add_header_impl>
	...

0800b0a4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b0a4:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b0a6:	b990      	cbnz	r0, 800b0ce <pbuf_remove_header+0x2a>
 800b0a8:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <pbuf_remove_header+0x48>)
 800b0aa:	f240 224b 	movw	r2, #587	; 0x24b
 800b0ae:	4910      	ldr	r1, [pc, #64]	; (800b0f0 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b0b0:	4810      	ldr	r0, [pc, #64]	; (800b0f4 <pbuf_remove_header+0x50>)
 800b0b2:	f004 f97b 	bl	800f3ac <iprintf>
    return 1;
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	e008      	b.n	800b0cc <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b0ba:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b0bc:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800b0be:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b0c0:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b0c2:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b0c4:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b0c6:	1a9b      	subs	r3, r3, r2
 800b0c8:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b0ca:	2000      	movs	r0, #0
}
 800b0cc:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b0ce:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b0d2:	d2f0      	bcs.n	800b0b6 <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800b0d4:	2900      	cmp	r1, #0
 800b0d6:	d0f8      	beq.n	800b0ca <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800b0d8:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b0da:	8943      	ldrh	r3, [r0, #10]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d9ec      	bls.n	800b0ba <pbuf_remove_header+0x16>
 800b0e0:	4b02      	ldr	r3, [pc, #8]	; (800b0ec <pbuf_remove_header+0x48>)
 800b0e2:	f240 2255 	movw	r2, #597	; 0x255
 800b0e6:	4904      	ldr	r1, [pc, #16]	; (800b0f8 <pbuf_remove_header+0x54>)
 800b0e8:	e7e2      	b.n	800b0b0 <pbuf_remove_header+0xc>
 800b0ea:	bf00      	nop
 800b0ec:	08015d69 	.word	0x08015d69
 800b0f0:	08015e7e 	.word	0x08015e7e
 800b0f4:	080144fe 	.word	0x080144fe
 800b0f8:	08015dee 	.word	0x08015dee

0800b0fc <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800b0fc:	1e0b      	subs	r3, r1, #0
 800b0fe:	da02      	bge.n	800b106 <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b100:	4259      	negs	r1, r3
 800b102:	f7ff bfcf 	b.w	800b0a4 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b106:	2201      	movs	r2, #1
 800b108:	f7ff bf58 	b.w	800afbc <pbuf_add_header_impl>

0800b10c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b110:	4604      	mov	r4, r0
 800b112:	b950      	cbnz	r0, 800b12a <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b114:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800b116:	4b2b      	ldr	r3, [pc, #172]	; (800b1c4 <pbuf_free+0xb8>)
 800b118:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b11c:	492a      	ldr	r1, [pc, #168]	; (800b1c8 <pbuf_free+0xbc>)
 800b11e:	482b      	ldr	r0, [pc, #172]	; (800b1cc <pbuf_free+0xc0>)
 800b120:	f004 f944 	bl	800f3ac <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800b124:	4628      	mov	r0, r5
 800b126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800b12a:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b12c:	4f25      	ldr	r7, [pc, #148]	; (800b1c4 <pbuf_free+0xb8>)
 800b12e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800b1d8 <pbuf_free+0xcc>
 800b132:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800b1cc <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800b136:	f004 f8d7 	bl	800f2e8 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b13a:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800b13c:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b13e:	b933      	cbnz	r3, 800b14e <pbuf_free+0x42>
 800b140:	463b      	mov	r3, r7
 800b142:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b146:	4651      	mov	r1, sl
 800b148:	4640      	mov	r0, r8
 800b14a:	f004 f92f 	bl	800f3ac <iprintf>
    ref = --(p->ref);
 800b14e:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800b150:	4648      	mov	r0, r9
    ref = --(p->ref);
 800b152:	3e01      	subs	r6, #1
 800b154:	b2f6      	uxtb	r6, r6
 800b156:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800b158:	f004 f8d2 	bl	800f300 <sys_arch_unprotect>
    if (ref == 0) {
 800b15c:	2e00      	cmp	r6, #0
 800b15e:	d1e1      	bne.n	800b124 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b160:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800b162:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b164:	079b      	lsls	r3, r3, #30
 800b166:	d511      	bpl.n	800b18c <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	b933      	cbnz	r3, 800b17a <pbuf_free+0x6e>
 800b16c:	463b      	mov	r3, r7
 800b16e:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b172:	4917      	ldr	r1, [pc, #92]	; (800b1d0 <pbuf_free+0xc4>)
 800b174:	4640      	mov	r0, r8
 800b176:	f004 f919 	bl	800f3ac <iprintf>
        pc->custom_free_function(p);
 800b17a:	6923      	ldr	r3, [r4, #16]
 800b17c:	4620      	mov	r0, r4
 800b17e:	4798      	blx	r3
      count++;
 800b180:	3501      	adds	r5, #1
 800b182:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800b184:	2e00      	cmp	r6, #0
 800b186:	d0cd      	beq.n	800b124 <pbuf_free+0x18>
 800b188:	4634      	mov	r4, r6
 800b18a:	e7d4      	b.n	800b136 <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 800b18c:	7b23      	ldrb	r3, [r4, #12]
 800b18e:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b192:	2b02      	cmp	r3, #2
 800b194:	d104      	bne.n	800b1a0 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800b196:	4621      	mov	r1, r4
 800b198:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800b19a:	f7ff fd57 	bl	800ac4c <memp_free>
 800b19e:	e7ef      	b.n	800b180 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d102      	bne.n	800b1aa <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	200b      	movs	r0, #11
 800b1a8:	e7f7      	b.n	800b19a <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b1aa:	b91b      	cbnz	r3, 800b1b4 <pbuf_free+0xa8>
          mem_free(p);
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7ff fa81 	bl	800a6b4 <mem_free>
 800b1b2:	e7e5      	b.n	800b180 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800b1b4:	463b      	mov	r3, r7
 800b1b6:	f240 320f 	movw	r2, #783	; 0x30f
 800b1ba:	4906      	ldr	r1, [pc, #24]	; (800b1d4 <pbuf_free+0xc8>)
 800b1bc:	4640      	mov	r0, r8
 800b1be:	f004 f8f5 	bl	800f3ac <iprintf>
 800b1c2:	e7dd      	b.n	800b180 <pbuf_free+0x74>
 800b1c4:	08015d69 	.word	0x08015d69
 800b1c8:	08015e7e 	.word	0x08015e7e
 800b1cc:	080144fe 	.word	0x080144fe
 800b1d0:	08015e22 	.word	0x08015e22
 800b1d4:	08015e43 	.word	0x08015e43
 800b1d8:	08015e0c 	.word	0x08015e0c

0800b1dc <pbuf_alloc>:
  switch (type) {
 800b1dc:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800b1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 800b1e8:	b284      	uxth	r4, r0
  switch (type) {
 800b1ea:	d014      	beq.n	800b216 <pbuf_alloc+0x3a>
 800b1ec:	d808      	bhi.n	800b200 <pbuf_alloc+0x24>
 800b1ee:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d107      	bne.n	800b206 <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800b1f6:	2000      	movs	r0, #0
}
 800b1f8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800b1fc:	f7ff bf10 	b.w	800b020 <pbuf_alloc_reference>
  switch (type) {
 800b200:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800b204:	d03b      	beq.n	800b27e <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b206:	4b2e      	ldr	r3, [pc, #184]	; (800b2c0 <pbuf_alloc+0xe4>)
 800b208:	f240 1227 	movw	r2, #295	; 0x127
 800b20c:	492d      	ldr	r1, [pc, #180]	; (800b2c4 <pbuf_alloc+0xe8>)
 800b20e:	482e      	ldr	r0, [pc, #184]	; (800b2c8 <pbuf_alloc+0xec>)
 800b210:	f004 f8cc 	bl	800f3ac <iprintf>
 800b214:	e00c      	b.n	800b230 <pbuf_alloc+0x54>
  switch (type) {
 800b216:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b218:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 800b21c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800b2d0 <pbuf_alloc+0xf4>
  switch (type) {
 800b220:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b222:	200c      	movs	r0, #12
 800b224:	46b2      	mov	sl, r6
 800b226:	f7ff fce1 	bl	800abec <memp_malloc>
        if (q == NULL) {
 800b22a:	4606      	mov	r6, r0
 800b22c:	b930      	cbnz	r0, 800b23c <pbuf_alloc+0x60>
          if (p) {
 800b22e:	b90d      	cbnz	r5, 800b234 <pbuf_alloc+0x58>
      return NULL;
 800b230:	2500      	movs	r5, #0
 800b232:	e01f      	b.n	800b274 <pbuf_alloc+0x98>
            pbuf_free(p);
 800b234:	4628      	mov	r0, r5
 800b236:	f7ff ff69 	bl	800b10c <pbuf_free>
 800b23a:	e7f9      	b.n	800b230 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b23c:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b23e:	4404      	add	r4, r0
  p->next = NULL;
 800b240:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800b242:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b244:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b248:	3413      	adds	r4, #19
  p->next = NULL;
 800b24a:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b24c:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b250:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800b254:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b258:	b29b      	uxth	r3, r3
  p->payload = payload;
 800b25a:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b25c:	42bb      	cmp	r3, r7
 800b25e:	bf28      	it	cs
 800b260:	463b      	movcs	r3, r7
  p->len = len;
 800b262:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800b264:	b14d      	cbz	r5, 800b27a <pbuf_alloc+0x9e>
          last->next = q;
 800b266:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800b26a:	1afb      	subs	r3, r7, r3
        offset = 0;
 800b26c:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 800b26e:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 800b270:	2f00      	cmp	r7, #0
 800b272:	d1d6      	bne.n	800b222 <pbuf_alloc+0x46>
}
 800b274:	4628      	mov	r0, r5
 800b276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b27a:	4605      	mov	r5, r0
 800b27c:	e7f5      	b.n	800b26a <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b27e:	3403      	adds	r4, #3
 800b280:	1ccb      	adds	r3, r1, #3
 800b282:	f024 0403 	bic.w	r4, r4, #3
 800b286:	f023 0303 	bic.w	r3, r3, #3
 800b28a:	441c      	add	r4, r3
 800b28c:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b28e:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b292:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b294:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b296:	d3cb      	bcc.n	800b230 <pbuf_alloc+0x54>
 800b298:	4283      	cmp	r3, r0
 800b29a:	d8c9      	bhi.n	800b230 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b29c:	f7ff fb8e 	bl	800a9bc <mem_malloc>
      if (p == NULL) {
 800b2a0:	4605      	mov	r5, r0
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	d0e6      	beq.n	800b274 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b2a6:	4406      	add	r6, r0
  p->next = NULL;
 800b2a8:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800b2aa:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b2ac:	3613      	adds	r6, #19
  p->next = NULL;
 800b2ae:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800b2b0:	4b06      	ldr	r3, [pc, #24]	; (800b2cc <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b2b2:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 800b2b6:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800b2b8:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800b2ba:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b2bc:	e7da      	b.n	800b274 <pbuf_alloc+0x98>
 800b2be:	bf00      	nop
 800b2c0:	08015d69 	.word	0x08015d69
 800b2c4:	08015e55 	.word	0x08015e55
 800b2c8:	080144fe 	.word	0x080144fe
 800b2cc:	00010080 	.word	0x00010080
 800b2d0:	00010082 	.word	0x00010082

0800b2d4 <pbuf_realloc>:
{
 800b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b2da:	4604      	mov	r4, r0
 800b2dc:	b930      	cbnz	r0, 800b2ec <pbuf_realloc+0x18>
 800b2de:	4b24      	ldr	r3, [pc, #144]	; (800b370 <pbuf_realloc+0x9c>)
 800b2e0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b2e4:	4923      	ldr	r1, [pc, #140]	; (800b374 <pbuf_realloc+0xa0>)
 800b2e6:	4824      	ldr	r0, [pc, #144]	; (800b378 <pbuf_realloc+0xa4>)
 800b2e8:	f004 f860 	bl	800f3ac <iprintf>
  if (new_len >= p->tot_len) {
 800b2ec:	8927      	ldrh	r7, [r4, #8]
 800b2ee:	42b7      	cmp	r7, r6
 800b2f0:	d93c      	bls.n	800b36c <pbuf_realloc+0x98>
 800b2f2:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b2f4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800b370 <pbuf_realloc+0x9c>
 800b2f8:	f8df a084 	ldr.w	sl, [pc, #132]	; 800b380 <pbuf_realloc+0xac>
 800b2fc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800b378 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800b300:	8962      	ldrh	r2, [r4, #10]
 800b302:	42aa      	cmp	r2, r5
 800b304:	d319      	bcc.n	800b33a <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b306:	7b23      	ldrb	r3, [r4, #12]
 800b308:	0719      	lsls	r1, r3, #28
 800b30a:	d127      	bne.n	800b35c <pbuf_realloc+0x88>
 800b30c:	42aa      	cmp	r2, r5
 800b30e:	d025      	beq.n	800b35c <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b310:	7b63      	ldrb	r3, [r4, #13]
 800b312:	079b      	lsls	r3, r3, #30
 800b314:	d422      	bmi.n	800b35c <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b316:	6861      	ldr	r1, [r4, #4]
 800b318:	4620      	mov	r0, r4
 800b31a:	1b09      	subs	r1, r1, r4
 800b31c:	4429      	add	r1, r5
 800b31e:	b289      	uxth	r1, r1
 800b320:	f7ff fa9e 	bl	800a860 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b324:	4604      	mov	r4, r0
 800b326:	b9c8      	cbnz	r0, 800b35c <pbuf_realloc+0x88>
 800b328:	4b11      	ldr	r3, [pc, #68]	; (800b370 <pbuf_realloc+0x9c>)
 800b32a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b32e:	4913      	ldr	r1, [pc, #76]	; (800b37c <pbuf_realloc+0xa8>)
 800b330:	4811      	ldr	r0, [pc, #68]	; (800b378 <pbuf_realloc+0xa4>)
 800b332:	f004 f83b 	bl	800f3ac <iprintf>
  q->len = rem_len;
 800b336:	8164      	strh	r4, [r4, #10]
 800b338:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800b33a:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b33c:	1bf3      	subs	r3, r6, r7
 800b33e:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800b340:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b342:	4413      	add	r3, r2
 800b344:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800b346:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b348:	2c00      	cmp	r4, #0
 800b34a:	d1d9      	bne.n	800b300 <pbuf_realloc+0x2c>
 800b34c:	4643      	mov	r3, r8
 800b34e:	f240 12af 	movw	r2, #431	; 0x1af
 800b352:	4651      	mov	r1, sl
 800b354:	4648      	mov	r0, r9
 800b356:	f004 f829 	bl	800f3ac <iprintf>
 800b35a:	e7d1      	b.n	800b300 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800b35c:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800b35e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800b360:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800b362:	b108      	cbz	r0, 800b368 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 800b364:	f7ff fed2 	bl	800b10c <pbuf_free>
  q->next = NULL;
 800b368:	2300      	movs	r3, #0
 800b36a:	6023      	str	r3, [r4, #0]
}
 800b36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b370:	08015d69 	.word	0x08015d69
 800b374:	08015e70 	.word	0x08015e70
 800b378:	080144fe 	.word	0x080144fe
 800b37c:	08015ea0 	.word	0x08015ea0
 800b380:	08015e88 	.word	0x08015e88

0800b384 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b384:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800b386:	2200      	movs	r2, #0
 800b388:	b290      	uxth	r0, r2
 800b38a:	3201      	adds	r2, #1
 800b38c:	b903      	cbnz	r3, 800b390 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800b38e:	4770      	bx	lr
    p = p->next;
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	e7f9      	b.n	800b388 <pbuf_clen+0x4>

0800b394 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b394:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800b396:	4604      	mov	r4, r0
 800b398:	b188      	cbz	r0, 800b3be <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b39a:	f003 ffa5 	bl	800f2e8 <sys_arch_protect>
 800b39e:	7ba3      	ldrb	r3, [r4, #14]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	73a3      	strb	r3, [r4, #14]
 800b3a4:	f003 ffac 	bl	800f300 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b3a8:	7ba3      	ldrb	r3, [r4, #14]
 800b3aa:	b943      	cbnz	r3, 800b3be <pbuf_ref+0x2a>
 800b3ac:	4b04      	ldr	r3, [pc, #16]	; (800b3c0 <pbuf_ref+0x2c>)
 800b3ae:	f240 3242 	movw	r2, #834	; 0x342
 800b3b2:	4904      	ldr	r1, [pc, #16]	; (800b3c4 <pbuf_ref+0x30>)
 800b3b4:	4804      	ldr	r0, [pc, #16]	; (800b3c8 <pbuf_ref+0x34>)
  }
}
 800b3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b3ba:	f003 bff7 	b.w	800f3ac <iprintf>
}
 800b3be:	bd10      	pop	{r4, pc}
 800b3c0:	08015d69 	.word	0x08015d69
 800b3c4:	08015ebc 	.word	0x08015ebc
 800b3c8:	080144fe 	.word	0x080144fe

0800b3cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b3d0:	4604      	mov	r4, r0
 800b3d2:	b100      	cbz	r0, 800b3d6 <pbuf_cat+0xa>
 800b3d4:	b961      	cbnz	r1, 800b3f0 <pbuf_cat+0x24>
 800b3d6:	4b15      	ldr	r3, [pc, #84]	; (800b42c <pbuf_cat+0x60>)
 800b3d8:	f240 3259 	movw	r2, #857	; 0x359
 800b3dc:	4914      	ldr	r1, [pc, #80]	; (800b430 <pbuf_cat+0x64>)
 800b3de:	4815      	ldr	r0, [pc, #84]	; (800b434 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b3e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b3e4:	f003 bfe2 	b.w	800f3ac <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b3e8:	8929      	ldrh	r1, [r5, #8]
 800b3ea:	440b      	add	r3, r1
 800b3ec:	8123      	strh	r3, [r4, #8]
 800b3ee:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800b3f0:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b3f2:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	d1f7      	bne.n	800b3e8 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b3f8:	8962      	ldrh	r2, [r4, #10]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d00f      	beq.n	800b41e <pbuf_cat+0x52>
 800b3fe:	4b0b      	ldr	r3, [pc, #44]	; (800b42c <pbuf_cat+0x60>)
 800b400:	f240 3262 	movw	r2, #866	; 0x362
 800b404:	490c      	ldr	r1, [pc, #48]	; (800b438 <pbuf_cat+0x6c>)
 800b406:	480b      	ldr	r0, [pc, #44]	; (800b434 <pbuf_cat+0x68>)
 800b408:	f003 ffd0 	bl	800f3ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	b133      	cbz	r3, 800b41e <pbuf_cat+0x52>
 800b410:	4b06      	ldr	r3, [pc, #24]	; (800b42c <pbuf_cat+0x60>)
 800b412:	f240 3263 	movw	r2, #867	; 0x363
 800b416:	4909      	ldr	r1, [pc, #36]	; (800b43c <pbuf_cat+0x70>)
 800b418:	4806      	ldr	r0, [pc, #24]	; (800b434 <pbuf_cat+0x68>)
 800b41a:	f003 ffc7 	bl	800f3ac <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b41e:	892a      	ldrh	r2, [r5, #8]
 800b420:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800b422:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b424:	4413      	add	r3, r2
 800b426:	8123      	strh	r3, [r4, #8]
}
 800b428:	bd70      	pop	{r4, r5, r6, pc}
 800b42a:	bf00      	nop
 800b42c:	08015d69 	.word	0x08015d69
 800b430:	08015ece 	.word	0x08015ece
 800b434:	080144fe 	.word	0x080144fe
 800b438:	08015f03 	.word	0x08015f03
 800b43c:	08015f30 	.word	0x08015f30

0800b440 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b440:	b510      	push	{r4, lr}
 800b442:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800b444:	f7ff ffc2 	bl	800b3cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b448:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800b44e:	f7ff bfa1 	b.w	800b394 <pbuf_ref>
	...

0800b454 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b45a:	4605      	mov	r5, r0
 800b45c:	b120      	cbz	r0, 800b468 <pbuf_copy+0x14>
 800b45e:	b119      	cbz	r1, 800b468 <pbuf_copy+0x14>
 800b460:	8902      	ldrh	r2, [r0, #8]
 800b462:	890b      	ldrh	r3, [r1, #8]
 800b464:	429a      	cmp	r2, r3
 800b466:	d20a      	bcs.n	800b47e <pbuf_copy+0x2a>
 800b468:	4b34      	ldr	r3, [pc, #208]	; (800b53c <pbuf_copy+0xe8>)
 800b46a:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b46e:	4934      	ldr	r1, [pc, #208]	; (800b540 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b470:	4834      	ldr	r0, [pc, #208]	; (800b544 <pbuf_copy+0xf0>)
 800b472:	f003 ff9b 	bl	800f3ac <iprintf>
 800b476:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800b47a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800b47e:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b480:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800b53c <pbuf_copy+0xe8>
 800b484:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800b554 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 800b488:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b48a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800b544 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b48e:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800b492:	8962      	ldrh	r2, [r4, #10]
 800b494:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b498:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b49a:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b49c:	6861      	ldr	r1, [r4, #4]
 800b49e:	4438      	add	r0, r7
 800b4a0:	4590      	cmp	r8, r2
 800b4a2:	4431      	add	r1, r6
 800b4a4:	bf28      	it	cs
 800b4a6:	4690      	movcs	r8, r2
 800b4a8:	4642      	mov	r2, r8
    offset_to += len;
 800b4aa:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b4ac:	f003 ff68 	bl	800f380 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b4b0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800b4b2:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b4b4:	429f      	cmp	r7, r3
 800b4b6:	d906      	bls.n	800b4c6 <pbuf_copy+0x72>
 800b4b8:	465b      	mov	r3, fp
 800b4ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b4be:	4651      	mov	r1, sl
 800b4c0:	4648      	mov	r0, r9
 800b4c2:	f003 ff73 	bl	800f3ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b4c6:	8963      	ldrh	r3, [r4, #10]
 800b4c8:	429e      	cmp	r6, r3
 800b4ca:	d906      	bls.n	800b4da <pbuf_copy+0x86>
 800b4cc:	465b      	mov	r3, fp
 800b4ce:	f240 32da 	movw	r2, #986	; 0x3da
 800b4d2:	491d      	ldr	r1, [pc, #116]	; (800b548 <pbuf_copy+0xf4>)
 800b4d4:	4648      	mov	r0, r9
 800b4d6:	f003 ff69 	bl	800f3ac <iprintf>
    if (offset_from >= p_from->len) {
 800b4da:	8963      	ldrh	r3, [r4, #10]
 800b4dc:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800b4de:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800b4e0:	bf24      	itt	cs
 800b4e2:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800b4e4:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800b4e6:	429f      	cmp	r7, r3
 800b4e8:	d108      	bne.n	800b4fc <pbuf_copy+0xa8>
      p_to = p_to->next;
 800b4ea:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b4ec:	b92d      	cbnz	r5, 800b4fa <pbuf_copy+0xa6>
 800b4ee:	b314      	cbz	r4, 800b536 <pbuf_copy+0xe2>
 800b4f0:	4b12      	ldr	r3, [pc, #72]	; (800b53c <pbuf_copy+0xe8>)
 800b4f2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b4f6:	4915      	ldr	r1, [pc, #84]	; (800b54c <pbuf_copy+0xf8>)
 800b4f8:	e7ba      	b.n	800b470 <pbuf_copy+0x1c>
      offset_to = 0;
 800b4fa:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b4fc:	b17c      	cbz	r4, 800b51e <pbuf_copy+0xca>
 800b4fe:	8962      	ldrh	r2, [r4, #10]
 800b500:	8923      	ldrh	r3, [r4, #8]
 800b502:	429a      	cmp	r2, r3
 800b504:	d10b      	bne.n	800b51e <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	b14b      	cbz	r3, 800b51e <pbuf_copy+0xca>
 800b50a:	4b0c      	ldr	r3, [pc, #48]	; (800b53c <pbuf_copy+0xe8>)
 800b50c:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b510:	490f      	ldr	r1, [pc, #60]	; (800b550 <pbuf_copy+0xfc>)
 800b512:	480c      	ldr	r0, [pc, #48]	; (800b544 <pbuf_copy+0xf0>)
 800b514:	f003 ff4a 	bl	800f3ac <iprintf>
 800b518:	f06f 0005 	mvn.w	r0, #5
 800b51c:	e7ad      	b.n	800b47a <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b51e:	896a      	ldrh	r2, [r5, #10]
 800b520:	892b      	ldrh	r3, [r5, #8]
 800b522:	429a      	cmp	r2, r3
 800b524:	d105      	bne.n	800b532 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	b11b      	cbz	r3, 800b532 <pbuf_copy+0xde>
 800b52a:	4b04      	ldr	r3, [pc, #16]	; (800b53c <pbuf_copy+0xe8>)
 800b52c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b530:	e7ee      	b.n	800b510 <pbuf_copy+0xbc>
  } while (p_from);
 800b532:	2c00      	cmp	r4, #0
 800b534:	d1ab      	bne.n	800b48e <pbuf_copy+0x3a>
  return ERR_OK;
 800b536:	4620      	mov	r0, r4
 800b538:	e79f      	b.n	800b47a <pbuf_copy+0x26>
 800b53a:	bf00      	nop
 800b53c:	08015d69 	.word	0x08015d69
 800b540:	08015f77 	.word	0x08015f77
 800b544:	080144fe 	.word	0x080144fe
 800b548:	08015fbe 	.word	0x08015fbe
 800b54c:	08015fd9 	.word	0x08015fd9
 800b550:	08015fe6 	.word	0x08015fe6
 800b554:	08015fa7 	.word	0x08015fa7

0800b558 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55c:	460f      	mov	r7, r1
 800b55e:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b560:	4605      	mov	r5, r0
 800b562:	b950      	cbnz	r0, 800b57a <pbuf_copy_partial+0x22>
 800b564:	462e      	mov	r6, r5
 800b566:	4b1b      	ldr	r3, [pc, #108]	; (800b5d4 <pbuf_copy_partial+0x7c>)
 800b568:	f240 420a 	movw	r2, #1034	; 0x40a
 800b56c:	491a      	ldr	r1, [pc, #104]	; (800b5d8 <pbuf_copy_partial+0x80>)
 800b56e:	481b      	ldr	r0, [pc, #108]	; (800b5dc <pbuf_copy_partial+0x84>)
 800b570:	f003 ff1c 	bl	800f3ac <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800b574:	4630      	mov	r0, r6
 800b576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b57a:	bb41      	cbnz	r1, 800b5ce <pbuf_copy_partial+0x76>
 800b57c:	4b15      	ldr	r3, [pc, #84]	; (800b5d4 <pbuf_copy_partial+0x7c>)
 800b57e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b582:	4917      	ldr	r1, [pc, #92]	; (800b5e0 <pbuf_copy_partial+0x88>)
 800b584:	463e      	mov	r6, r7
 800b586:	4815      	ldr	r0, [pc, #84]	; (800b5dc <pbuf_copy_partial+0x84>)
 800b588:	f003 ff10 	bl	800f3ac <iprintf>
 800b58c:	e7f2      	b.n	800b574 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800b58e:	896c      	ldrh	r4, [r5, #10]
 800b590:	b153      	cbz	r3, 800b5a8 <pbuf_copy_partial+0x50>
 800b592:	42a3      	cmp	r3, r4
 800b594:	d308      	bcc.n	800b5a8 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800b596:	1b1b      	subs	r3, r3, r4
 800b598:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b59a:	682d      	ldr	r5, [r5, #0]
 800b59c:	f1b8 0f00 	cmp.w	r8, #0
 800b5a0:	d0e8      	beq.n	800b574 <pbuf_copy_partial+0x1c>
 800b5a2:	2d00      	cmp	r5, #0
 800b5a4:	d1f3      	bne.n	800b58e <pbuf_copy_partial+0x36>
 800b5a6:	e7e5      	b.n	800b574 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800b5a8:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b5aa:	6869      	ldr	r1, [r5, #4]
 800b5ac:	19b8      	adds	r0, r7, r6
      buf_copy_len = (u16_t)(p->len - offset);
 800b5ae:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b5b0:	4419      	add	r1, r3
 800b5b2:	4544      	cmp	r4, r8
 800b5b4:	bf28      	it	cs
 800b5b6:	4644      	movcs	r4, r8
 800b5b8:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b5ba:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 800b5bc:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b5c0:	f003 fede 	bl	800f380 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b5c4:	b2b6      	uxth	r6, r6
      offset = 0;
 800b5c6:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800b5c8:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800b5cc:	e7e5      	b.n	800b59a <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800b5ce:	2600      	movs	r6, #0
 800b5d0:	e7e4      	b.n	800b59c <pbuf_copy_partial+0x44>
 800b5d2:	bf00      	nop
 800b5d4:	08015d69 	.word	0x08015d69
 800b5d8:	08016010 	.word	0x08016010
 800b5dc:	080144fe 	.word	0x080144fe
 800b5e0:	0801602f 	.word	0x0801602f

0800b5e4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b5e8:	460a      	mov	r2, r1
 800b5ea:	8929      	ldrh	r1, [r5, #8]
 800b5ec:	f7ff fdf6 	bl	800b1dc <pbuf_alloc>
  if (q == NULL) {
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	b150      	cbz	r0, 800b60a <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7ff ff2d 	bl	800b454 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b5fa:	b130      	cbz	r0, 800b60a <pbuf_clone+0x26>
 800b5fc:	4b04      	ldr	r3, [pc, #16]	; (800b610 <pbuf_clone+0x2c>)
 800b5fe:	f240 5224 	movw	r2, #1316	; 0x524
 800b602:	4904      	ldr	r1, [pc, #16]	; (800b614 <pbuf_clone+0x30>)
 800b604:	4804      	ldr	r0, [pc, #16]	; (800b618 <pbuf_clone+0x34>)
 800b606:	f003 fed1 	bl	800f3ac <iprintf>
  return q;
}
 800b60a:	4620      	mov	r0, r4
 800b60c:	bd38      	pop	{r3, r4, r5, pc}
 800b60e:	bf00      	nop
 800b610:	08015d69 	.word	0x08015d69
 800b614:	0801612f 	.word	0x0801612f
 800b618:	080144fe 	.word	0x080144fe

0800b61c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b61c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b61e:	4c12      	ldr	r4, [pc, #72]	; (800b668 <tcp_new_port+0x4c>)
 800b620:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b624:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800b628:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 800b62a:	3301      	adds	r3, #1
 800b62c:	4d0f      	ldr	r5, [pc, #60]	; (800b66c <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b62e:	2204      	movs	r2, #4
  tcp_port++;
 800b630:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b632:	42b3      	cmp	r3, r6
 800b634:	bf08      	it	eq
 800b636:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b63a:	f855 1b04 	ldr.w	r1, [r5], #4
 800b63e:	6809      	ldr	r1, [r1, #0]
 800b640:	b931      	cbnz	r1, 800b650 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b642:	3a01      	subs	r2, #1
 800b644:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800b648:	d1f7      	bne.n	800b63a <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b64a:	4618      	mov	r0, r3
 800b64c:	8023      	strh	r3, [r4, #0]
 800b64e:	e007      	b.n	800b660 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800b650:	8acf      	ldrh	r7, [r1, #22]
 800b652:	429f      	cmp	r7, r3
 800b654:	d105      	bne.n	800b662 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b656:	3801      	subs	r0, #1
 800b658:	b280      	uxth	r0, r0
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d1e5      	bne.n	800b62a <tcp_new_port+0xe>
 800b65e:	8023      	strh	r3, [r4, #0]
}
 800b660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b662:	68c9      	ldr	r1, [r1, #12]
 800b664:	e7ec      	b.n	800b640 <tcp_new_port+0x24>
 800b666:	bf00      	nop
 800b668:	20001a60 	.word	0x20001a60
 800b66c:	080143cc 	.word	0x080143cc

0800b670 <tcp_close_shutdown_fin>:
{
 800b670:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b672:	4604      	mov	r4, r0
 800b674:	b930      	cbnz	r0, 800b684 <tcp_close_shutdown_fin+0x14>
 800b676:	4b13      	ldr	r3, [pc, #76]	; (800b6c4 <tcp_close_shutdown_fin+0x54>)
 800b678:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b67c:	4912      	ldr	r1, [pc, #72]	; (800b6c8 <tcp_close_shutdown_fin+0x58>)
 800b67e:	4813      	ldr	r0, [pc, #76]	; (800b6cc <tcp_close_shutdown_fin+0x5c>)
 800b680:	f003 fe94 	bl	800f3ac <iprintf>
  switch (pcb->state) {
 800b684:	7d23      	ldrb	r3, [r4, #20]
 800b686:	2b04      	cmp	r3, #4
 800b688:	d003      	beq.n	800b692 <tcp_close_shutdown_fin+0x22>
 800b68a:	2b07      	cmp	r3, #7
 800b68c:	d00c      	beq.n	800b6a8 <tcp_close_shutdown_fin+0x38>
 800b68e:	2b03      	cmp	r3, #3
 800b690:	d108      	bne.n	800b6a4 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800b692:	4620      	mov	r0, r4
 800b694:	f002 fd82 	bl	800e19c <tcp_send_fin>
      if (err == ERR_OK) {
 800b698:	b960      	cbnz	r0, 800b6b4 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800b69a:	2305      	movs	r3, #5
    tcp_output(pcb);
 800b69c:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800b69e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800b6a0:	f002 fedc 	bl	800e45c <tcp_output>
  switch (pcb->state) {
 800b6a4:	2000      	movs	r0, #0
}
 800b6a6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f002 fd77 	bl	800e19c <tcp_send_fin>
      if (err == ERR_OK) {
 800b6ae:	b908      	cbnz	r0, 800b6b4 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 800b6b0:	2309      	movs	r3, #9
 800b6b2:	e7f3      	b.n	800b69c <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	d1f6      	bne.n	800b6a6 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b6b8:	8b63      	ldrh	r3, [r4, #26]
 800b6ba:	f043 0308 	orr.w	r3, r3, #8
 800b6be:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800b6c0:	e7f0      	b.n	800b6a4 <tcp_close_shutdown_fin+0x34>
 800b6c2:	bf00      	nop
 800b6c4:	08016140 	.word	0x08016140
 800b6c8:	080161b2 	.word	0x080161b2
 800b6cc:	080144fe 	.word	0x080144fe

0800b6d0 <tcp_init>:
{
 800b6d0:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b6d2:	f003 fef9 	bl	800f4c8 <rand>
 800b6d6:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800b6da:	4b02      	ldr	r3, [pc, #8]	; (800b6e4 <tcp_init+0x14>)
 800b6dc:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800b6e0:	8018      	strh	r0, [r3, #0]
}
 800b6e2:	bd08      	pop	{r3, pc}
 800b6e4:	20001a60 	.word	0x20001a60

0800b6e8 <tcp_free>:
{
 800b6e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b6ea:	7d03      	ldrb	r3, [r0, #20]
{
 800b6ec:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d105      	bne.n	800b6fe <tcp_free+0x16>
 800b6f2:	4b06      	ldr	r3, [pc, #24]	; (800b70c <tcp_free+0x24>)
 800b6f4:	22d4      	movs	r2, #212	; 0xd4
 800b6f6:	4906      	ldr	r1, [pc, #24]	; (800b710 <tcp_free+0x28>)
 800b6f8:	4806      	ldr	r0, [pc, #24]	; (800b714 <tcp_free+0x2c>)
 800b6fa:	f003 fe57 	bl	800f3ac <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800b6fe:	4621      	mov	r1, r4
 800b700:	2001      	movs	r0, #1
}
 800b702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800b706:	f7ff baa1 	b.w	800ac4c <memp_free>
 800b70a:	bf00      	nop
 800b70c:	08016140 	.word	0x08016140
 800b710:	080161be 	.word	0x080161be
 800b714:	080144fe 	.word	0x080144fe

0800b718 <tcp_bind>:
{
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800b71a:	4d23      	ldr	r5, [pc, #140]	; (800b7a8 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b71c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800b71e:	2900      	cmp	r1, #0
 800b720:	bf18      	it	ne
 800b722:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b724:	b948      	cbnz	r0, 800b73a <tcp_bind+0x22>
 800b726:	4b21      	ldr	r3, [pc, #132]	; (800b7ac <tcp_bind+0x94>)
 800b728:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b72c:	4920      	ldr	r1, [pc, #128]	; (800b7b0 <tcp_bind+0x98>)
 800b72e:	4821      	ldr	r0, [pc, #132]	; (800b7b4 <tcp_bind+0x9c>)
 800b730:	f003 fe3c 	bl	800f3ac <iprintf>
 800b734:	f06f 000f 	mvn.w	r0, #15
}
 800b738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b73a:	7d03      	ldrb	r3, [r0, #20]
 800b73c:	b14b      	cbz	r3, 800b752 <tcp_bind+0x3a>
 800b73e:	4b1b      	ldr	r3, [pc, #108]	; (800b7ac <tcp_bind+0x94>)
 800b740:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b744:	491c      	ldr	r1, [pc, #112]	; (800b7b8 <tcp_bind+0xa0>)
 800b746:	481b      	ldr	r0, [pc, #108]	; (800b7b4 <tcp_bind+0x9c>)
 800b748:	f003 fe30 	bl	800f3ac <iprintf>
 800b74c:	f06f 0005 	mvn.w	r0, #5
 800b750:	e7f2      	b.n	800b738 <tcp_bind+0x20>
  if (port == 0) {
 800b752:	b932      	cbnz	r2, 800b762 <tcp_bind+0x4a>
    port = tcp_new_port();
 800b754:	f7ff ff62 	bl	800b61c <tcp_new_port>
    if (port == 0) {
 800b758:	4602      	mov	r2, r0
 800b75a:	b950      	cbnz	r0, 800b772 <tcp_bind+0x5a>
      return ERR_BUF;
 800b75c:	f06f 0001 	mvn.w	r0, #1
 800b760:	e7ea      	b.n	800b738 <tcp_bind+0x20>
 800b762:	4816      	ldr	r0, [pc, #88]	; (800b7bc <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b764:	f850 1b04 	ldr.w	r1, [r0], #4
 800b768:	6809      	ldr	r1, [r1, #0]
 800b76a:	b971      	cbnz	r1, 800b78a <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800b76c:	3301      	adds	r3, #1
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d1f8      	bne.n	800b764 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800b772:	682b      	ldr	r3, [r5, #0]
 800b774:	b103      	cbz	r3, 800b778 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b776:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b778:	4b11      	ldr	r3, [pc, #68]	; (800b7c0 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800b77a:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	601c      	str	r4, [r3, #0]
 800b780:	60e2      	str	r2, [r4, #12]
 800b782:	f003 f941 	bl	800ea08 <tcp_timer_needed>
  return ERR_OK;
 800b786:	2000      	movs	r0, #0
 800b788:	e7d6      	b.n	800b738 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800b78a:	8ace      	ldrh	r6, [r1, #22]
 800b78c:	4296      	cmp	r6, r2
 800b78e:	d105      	bne.n	800b79c <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b790:	680f      	ldr	r7, [r1, #0]
 800b792:	b12f      	cbz	r7, 800b7a0 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800b794:	682e      	ldr	r6, [r5, #0]
 800b796:	b11e      	cbz	r6, 800b7a0 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b798:	42b7      	cmp	r7, r6
 800b79a:	d001      	beq.n	800b7a0 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b79c:	68c9      	ldr	r1, [r1, #12]
 800b79e:	e7e4      	b.n	800b76a <tcp_bind+0x52>
              return ERR_USE;
 800b7a0:	f06f 0007 	mvn.w	r0, #7
 800b7a4:	e7c8      	b.n	800b738 <tcp_bind+0x20>
 800b7a6:	bf00      	nop
 800b7a8:	080142f8 	.word	0x080142f8
 800b7ac:	08016140 	.word	0x08016140
 800b7b0:	080161cf 	.word	0x080161cf
 800b7b4:	080144fe 	.word	0x080144fe
 800b7b8:	080161e5 	.word	0x080161e5
 800b7bc:	080143cc 	.word	0x080143cc
 800b7c0:	20014040 	.word	0x20014040

0800b7c4 <tcp_listen_with_backlog_and_err>:
{
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b7c8:	4605      	mov	r5, r0
 800b7ca:	b968      	cbnz	r0, 800b7e8 <tcp_listen_with_backlog_and_err+0x24>
 800b7cc:	4b29      	ldr	r3, [pc, #164]	; (800b874 <tcp_listen_with_backlog_and_err+0xb0>)
 800b7ce:	f240 3259 	movw	r2, #857	; 0x359
 800b7d2:	4929      	ldr	r1, [pc, #164]	; (800b878 <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800b7d4:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b7d6:	4829      	ldr	r0, [pc, #164]	; (800b87c <tcp_listen_with_backlog_and_err+0xb8>)
 800b7d8:	f003 fde8 	bl	800f3ac <iprintf>
 800b7dc:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800b7e0:	b106      	cbz	r6, 800b7e4 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800b7e2:	7033      	strb	r3, [r6, #0]
}
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b7e8:	7d07      	ldrb	r7, [r0, #20]
 800b7ea:	b157      	cbz	r7, 800b802 <tcp_listen_with_backlog_and_err+0x3e>
 800b7ec:	4b21      	ldr	r3, [pc, #132]	; (800b874 <tcp_listen_with_backlog_and_err+0xb0>)
 800b7ee:	f240 325a 	movw	r2, #858	; 0x35a
 800b7f2:	4923      	ldr	r1, [pc, #140]	; (800b880 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800b7f4:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b7f6:	4821      	ldr	r0, [pc, #132]	; (800b87c <tcp_listen_with_backlog_and_err+0xb8>)
 800b7f8:	f003 fdd8 	bl	800f3ac <iprintf>
 800b7fc:	f06f 030e 	mvn.w	r3, #14
 800b800:	e7ee      	b.n	800b7e0 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b802:	2002      	movs	r0, #2
 800b804:	f7ff f9f2 	bl	800abec <memp_malloc>
  if (lpcb == NULL) {
 800b808:	4604      	mov	r4, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d02e      	beq.n	800b86c <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800b80e:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800b810:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800b812:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800b814:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800b816:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800b818:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800b81a:	7d6a      	ldrb	r2, [r5, #21]
 800b81c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800b81e:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b820:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800b822:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800b824:	7aea      	ldrb	r2, [r5, #11]
 800b826:	4f17      	ldr	r7, [pc, #92]	; (800b884 <tcp_listen_with_backlog_and_err+0xc0>)
 800b828:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800b82a:	7aaa      	ldrb	r2, [r5, #10]
 800b82c:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b82e:	682a      	ldr	r2, [r5, #0]
 800b830:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800b832:	b133      	cbz	r3, 800b842 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	42ab      	cmp	r3, r5
 800b838:	d110      	bne.n	800b85c <tcp_listen_with_backlog_and_err+0x98>
 800b83a:	68eb      	ldr	r3, [r5, #12]
 800b83c:	603b      	str	r3, [r7, #0]
 800b83e:	2300      	movs	r3, #0
 800b840:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800b842:	4628      	mov	r0, r5
 800b844:	f7ff ff50 	bl	800b6e8 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800b848:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <tcp_listen_with_backlog_and_err+0xc4>)
 800b84a:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	607c      	str	r4, [r7, #4]
 800b850:	60e3      	str	r3, [r4, #12]
 800b852:	f003 f8d9 	bl	800ea08 <tcp_timer_needed>
  res = ERR_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	e7c2      	b.n	800b7e0 <tcp_listen_with_backlog_and_err+0x1c>
 800b85a:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d0ee      	beq.n	800b83e <tcp_listen_with_backlog_and_err+0x7a>
 800b860:	68da      	ldr	r2, [r3, #12]
 800b862:	42aa      	cmp	r2, r5
 800b864:	d1f9      	bne.n	800b85a <tcp_listen_with_backlog_and_err+0x96>
 800b866:	68ea      	ldr	r2, [r5, #12]
 800b868:	60da      	str	r2, [r3, #12]
 800b86a:	e7e8      	b.n	800b83e <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800b86c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b870:	e7b6      	b.n	800b7e0 <tcp_listen_with_backlog_and_err+0x1c>
 800b872:	bf00      	nop
 800b874:	08016140 	.word	0x08016140
 800b878:	0801620d 	.word	0x0801620d
 800b87c:	080144fe 	.word	0x080144fe
 800b880:	0801623a 	.word	0x0801623a
 800b884:	20014040 	.word	0x20014040
 800b888:	0800c3f1 	.word	0x0800c3f1

0800b88c <tcp_update_rcv_ann_wnd>:
{
 800b88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b88e:	4604      	mov	r4, r0
 800b890:	b930      	cbnz	r0, 800b8a0 <tcp_update_rcv_ann_wnd+0x14>
 800b892:	4b15      	ldr	r3, [pc, #84]	; (800b8e8 <tcp_update_rcv_ann_wnd+0x5c>)
 800b894:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b898:	4914      	ldr	r1, [pc, #80]	; (800b8ec <tcp_update_rcv_ann_wnd+0x60>)
 800b89a:	4815      	ldr	r0, [pc, #84]	; (800b8f0 <tcp_update_rcv_ann_wnd+0x64>)
 800b89c:	f003 fd86 	bl	800f3ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b8a0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b8a2:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800b8a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b8a8:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b8aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b8ac:	1ad0      	subs	r0, r2, r3
 800b8ae:	42b7      	cmp	r7, r6
 800b8b0:	4428      	add	r0, r5
 800b8b2:	bf94      	ite	ls
 800b8b4:	1bc1      	subls	r1, r0, r7
 800b8b6:	1b81      	subhi	r1, r0, r6
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	db01      	blt.n	800b8c0 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b8bc:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 800b8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b8c0:	1aea      	subs	r2, r5, r3
 800b8c2:	2a00      	cmp	r2, #0
 800b8c4:	dd02      	ble.n	800b8cc <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800b8c6:	2000      	movs	r0, #0
 800b8c8:	8560      	strh	r0, [r4, #42]	; 0x2a
 800b8ca:	e7f8      	b.n	800b8be <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b8cc:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b8ce:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800b8d2:	d306      	bcc.n	800b8e2 <tcp_update_rcv_ann_wnd+0x56>
 800b8d4:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <tcp_update_rcv_ann_wnd+0x5c>)
 800b8d6:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b8da:	4906      	ldr	r1, [pc, #24]	; (800b8f4 <tcp_update_rcv_ann_wnd+0x68>)
 800b8dc:	4804      	ldr	r0, [pc, #16]	; (800b8f0 <tcp_update_rcv_ann_wnd+0x64>)
 800b8de:	f003 fd65 	bl	800f3ac <iprintf>
    return 0;
 800b8e2:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b8e4:	8565      	strh	r5, [r4, #42]	; 0x2a
 800b8e6:	e7ea      	b.n	800b8be <tcp_update_rcv_ann_wnd+0x32>
 800b8e8:	08016140 	.word	0x08016140
 800b8ec:	08016271 	.word	0x08016271
 800b8f0:	080144fe 	.word	0x080144fe
 800b8f4:	08016295 	.word	0x08016295

0800b8f8 <tcp_recved>:
{
 800b8f8:	b570      	push	{r4, r5, r6, lr}
 800b8fa:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b8fc:	4605      	mov	r5, r0
 800b8fe:	b940      	cbnz	r0, 800b912 <tcp_recved+0x1a>
 800b900:	4b18      	ldr	r3, [pc, #96]	; (800b964 <tcp_recved+0x6c>)
 800b902:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b906:	4918      	ldr	r1, [pc, #96]	; (800b968 <tcp_recved+0x70>)
 800b908:	4818      	ldr	r0, [pc, #96]	; (800b96c <tcp_recved+0x74>)
}
 800b90a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b90e:	f003 bd4d 	b.w	800f3ac <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b912:	7d03      	ldrb	r3, [r0, #20]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d106      	bne.n	800b926 <tcp_recved+0x2e>
 800b918:	4b12      	ldr	r3, [pc, #72]	; (800b964 <tcp_recved+0x6c>)
 800b91a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800b91e:	4914      	ldr	r1, [pc, #80]	; (800b970 <tcp_recved+0x78>)
 800b920:	4812      	ldr	r0, [pc, #72]	; (800b96c <tcp_recved+0x74>)
 800b922:	f003 fd43 	bl	800f3ac <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b926:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b928:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b92c:	1911      	adds	r1, r2, r4
 800b92e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b930:	4299      	cmp	r1, r3
 800b932:	d813      	bhi.n	800b95c <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b934:	428a      	cmp	r2, r1
 800b936:	bf88      	it	hi
 800b938:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b93a:	4628      	mov	r0, r5
 800b93c:	8529      	strh	r1, [r5, #40]	; 0x28
 800b93e:	f7ff ffa5 	bl	800b88c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b942:	f240 23d9 	movw	r3, #729	; 0x2d9
 800b946:	4298      	cmp	r0, r3
 800b948:	d90a      	bls.n	800b960 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800b94a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800b94c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800b94e:	f043 0302 	orr.w	r3, r3, #2
 800b952:	836b      	strh	r3, [r5, #26]
}
 800b954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800b958:	f002 bd80 	b.w	800e45c <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b95c:	4619      	mov	r1, r3
 800b95e:	e7ec      	b.n	800b93a <tcp_recved+0x42>
}
 800b960:	bd70      	pop	{r4, r5, r6, pc}
 800b962:	bf00      	nop
 800b964:	08016140 	.word	0x08016140
 800b968:	080162af 	.word	0x080162af
 800b96c:	080144fe 	.word	0x080144fe
 800b970:	080162c7 	.word	0x080162c7

0800b974 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b974:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800b976:	4604      	mov	r4, r0
 800b978:	b148      	cbz	r0, 800b98e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800b97a:	6840      	ldr	r0, [r0, #4]
 800b97c:	b108      	cbz	r0, 800b982 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b97e:	f7ff fbc5 	bl	800b10c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b982:	4621      	mov	r1, r4
 800b984:	2003      	movs	r0, #3
  }
}
 800b986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800b98a:	f7ff b95f 	b.w	800ac4c <memp_free>
}
 800b98e:	bd10      	pop	{r4, pc}

0800b990 <tcp_segs_free>:
{
 800b990:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800b992:	b900      	cbnz	r0, 800b996 <tcp_segs_free+0x6>
}
 800b994:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800b996:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800b998:	f7ff ffec 	bl	800b974 <tcp_seg_free>
    seg = next;
 800b99c:	4620      	mov	r0, r4
 800b99e:	e7f8      	b.n	800b992 <tcp_segs_free+0x2>

0800b9a0 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b9a0:	b100      	cbz	r0, 800b9a4 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800b9a2:	6101      	str	r1, [r0, #16]
  }
}
 800b9a4:	4770      	bx	lr
	...

0800b9a8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	b158      	cbz	r0, 800b9c8 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b9b0:	7d03      	ldrb	r3, [r0, #20]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d106      	bne.n	800b9c4 <tcp_recv+0x1c>
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <tcp_recv+0x24>)
 800b9b8:	f240 72df 	movw	r2, #2015	; 0x7df
 800b9bc:	4904      	ldr	r1, [pc, #16]	; (800b9d0 <tcp_recv+0x28>)
 800b9be:	4805      	ldr	r0, [pc, #20]	; (800b9d4 <tcp_recv+0x2c>)
 800b9c0:	f003 fcf4 	bl	800f3ac <iprintf>
    pcb->recv = recv;
 800b9c4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800b9c8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ca:	bf00      	nop
 800b9cc:	08016140 	.word	0x08016140
 800b9d0:	08016306 	.word	0x08016306
 800b9d4:	080144fe 	.word	0x080144fe

0800b9d8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b9d8:	b538      	push	{r3, r4, r5, lr}
 800b9da:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b9dc:	4604      	mov	r4, r0
 800b9de:	b150      	cbz	r0, 800b9f6 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b9e0:	7d03      	ldrb	r3, [r0, #20]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d106      	bne.n	800b9f4 <tcp_sent+0x1c>
 800b9e6:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <tcp_sent+0x20>)
 800b9e8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b9ec:	4903      	ldr	r1, [pc, #12]	; (800b9fc <tcp_sent+0x24>)
 800b9ee:	4804      	ldr	r0, [pc, #16]	; (800ba00 <tcp_sent+0x28>)
 800b9f0:	f003 fcdc 	bl	800f3ac <iprintf>
    pcb->sent = sent;
 800b9f4:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	08016140 	.word	0x08016140
 800b9fc:	0801632d 	.word	0x0801632d
 800ba00:	080144fe 	.word	0x080144fe

0800ba04 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ba04:	b538      	push	{r3, r4, r5, lr}
 800ba06:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ba08:	4604      	mov	r4, r0
 800ba0a:	b158      	cbz	r0, 800ba24 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ba0c:	7d03      	ldrb	r3, [r0, #20]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d106      	bne.n	800ba20 <tcp_err+0x1c>
 800ba12:	4b05      	ldr	r3, [pc, #20]	; (800ba28 <tcp_err+0x24>)
 800ba14:	f640 020d 	movw	r2, #2061	; 0x80d
 800ba18:	4904      	ldr	r1, [pc, #16]	; (800ba2c <tcp_err+0x28>)
 800ba1a:	4805      	ldr	r0, [pc, #20]	; (800ba30 <tcp_err+0x2c>)
 800ba1c:	f003 fcc6 	bl	800f3ac <iprintf>
    pcb->errf = err;
 800ba20:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
 800ba26:	bf00      	nop
 800ba28:	08016140 	.word	0x08016140
 800ba2c:	08016354 	.word	0x08016354
 800ba30:	080144fe 	.word	0x080144fe

0800ba34 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ba34:	b118      	cbz	r0, 800ba3e <tcp_accept+0xa>
 800ba36:	7d03      	ldrb	r3, [r0, #20]
 800ba38:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800ba3a:	bf08      	it	eq
 800ba3c:	6181      	streq	r1, [r0, #24]
  }
}
 800ba3e:	4770      	bx	lr

0800ba40 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	460e      	mov	r6, r1
 800ba44:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ba46:	4604      	mov	r4, r0
 800ba48:	b940      	cbnz	r0, 800ba5c <tcp_poll+0x1c>
 800ba4a:	4b0b      	ldr	r3, [pc, #44]	; (800ba78 <tcp_poll+0x38>)
 800ba4c:	f640 023d 	movw	r2, #2109	; 0x83d
 800ba50:	490a      	ldr	r1, [pc, #40]	; (800ba7c <tcp_poll+0x3c>)
 800ba52:	480b      	ldr	r0, [pc, #44]	; (800ba80 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800ba54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ba58:	f003 bca8 	b.w	800f3ac <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ba5c:	7d03      	ldrb	r3, [r0, #20]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d106      	bne.n	800ba70 <tcp_poll+0x30>
 800ba62:	4b05      	ldr	r3, [pc, #20]	; (800ba78 <tcp_poll+0x38>)
 800ba64:	f640 023e 	movw	r2, #2110	; 0x83e
 800ba68:	4906      	ldr	r1, [pc, #24]	; (800ba84 <tcp_poll+0x44>)
 800ba6a:	4805      	ldr	r0, [pc, #20]	; (800ba80 <tcp_poll+0x40>)
 800ba6c:	f003 fc9e 	bl	800f3ac <iprintf>
  pcb->poll = poll;
 800ba70:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800ba74:	7765      	strb	r5, [r4, #29]
}
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	08016140 	.word	0x08016140
 800ba7c:	0801637a 	.word	0x0801637a
 800ba80:	080144fe 	.word	0x080144fe
 800ba84:	08016390 	.word	0x08016390

0800ba88 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ba88:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	b940      	cbnz	r0, 800baa0 <tcp_pcb_purge+0x18>
 800ba8e:	4b11      	ldr	r3, [pc, #68]	; (800bad4 <tcp_pcb_purge+0x4c>)
 800ba90:	f640 0251 	movw	r2, #2129	; 0x851
 800ba94:	4910      	ldr	r1, [pc, #64]	; (800bad8 <tcp_pcb_purge+0x50>)
 800ba96:	4811      	ldr	r0, [pc, #68]	; (800badc <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800ba98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ba9c:	f003 bc86 	b.w	800f3ac <iprintf>
  if (pcb->state != CLOSED &&
 800baa0:	7d03      	ldrb	r3, [r0, #20]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d915      	bls.n	800bad2 <tcp_pcb_purge+0x4a>
 800baa6:	2b0a      	cmp	r3, #10
 800baa8:	d013      	beq.n	800bad2 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800baaa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800baac:	b118      	cbz	r0, 800bab6 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800baae:	f7ff fb2d 	bl	800b10c <pbuf_free>
      pcb->refused_data = NULL;
 800bab2:	2300      	movs	r3, #0
 800bab4:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800bab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800baba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800babc:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800babe:	f7ff ff67 	bl	800b990 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bac2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800bac4:	f7ff ff64 	bl	800b990 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bac8:	2300      	movs	r3, #0
 800baca:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800bace:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	08016140 	.word	0x08016140
 800bad8:	080163ae 	.word	0x080163ae
 800badc:	080144fe 	.word	0x080144fe

0800bae0 <tcp_slowtmr>:
{
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800bae4:	4dab      	ldr	r5, [pc, #684]	; (800bd94 <tcp_slowtmr+0x2b4>)
{
 800bae6:	b087      	sub	sp, #28
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bae8:	4fab      	ldr	r7, [pc, #684]	; (800bd98 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 800baea:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800baec:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 800bdb4 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800baf0:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800baf2:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800bdb8 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800baf6:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 800baf8:	7c2b      	ldrb	r3, [r5, #16]
 800bafa:	3301      	adds	r3, #1
 800bafc:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800bafe:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 800bb00:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 800bb04:	b95c      	cbnz	r4, 800bb1e <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 800bb06:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb08:	4fa3      	ldr	r7, [pc, #652]	; (800bd98 <tcp_slowtmr+0x2b8>)
 800bb0a:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800bdbc <tcp_slowtmr+0x2dc>
 800bb0e:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800bdb8 <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 800bb12:	2e00      	cmp	r6, #0
 800bb14:	f040 819b 	bne.w	800be4e <tcp_slowtmr+0x36e>
}
 800bb18:	b007      	add	sp, #28
 800bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bb1e:	7d23      	ldrb	r3, [r4, #20]
 800bb20:	b933      	cbnz	r3, 800bb30 <tcp_slowtmr+0x50>
 800bb22:	463b      	mov	r3, r7
 800bb24:	f240 42be 	movw	r2, #1214	; 0x4be
 800bb28:	4659      	mov	r1, fp
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	f003 fc3e 	bl	800f3ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bb30:	7d23      	ldrb	r3, [r4, #20]
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d106      	bne.n	800bb44 <tcp_slowtmr+0x64>
 800bb36:	463b      	mov	r3, r7
 800bb38:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bb3c:	4997      	ldr	r1, [pc, #604]	; (800bd9c <tcp_slowtmr+0x2bc>)
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f003 fc34 	bl	800f3ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800bb44:	7d23      	ldrb	r3, [r4, #20]
 800bb46:	2b0a      	cmp	r3, #10
 800bb48:	d106      	bne.n	800bb58 <tcp_slowtmr+0x78>
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800bb50:	4993      	ldr	r1, [pc, #588]	; (800bda0 <tcp_slowtmr+0x2c0>)
 800bb52:	4640      	mov	r0, r8
 800bb54:	f003 fc2a 	bl	800f3ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800bb58:	7c2b      	ldrb	r3, [r5, #16]
 800bb5a:	7fa2      	ldrb	r2, [r4, #30]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d103      	bne.n	800bb68 <tcp_slowtmr+0x88>
      pcb = pcb->next;
 800bb60:	68e6      	ldr	r6, [r4, #12]
      continue;
 800bb62:	46a1      	mov	r9, r4
 800bb64:	4634      	mov	r4, r6
 800bb66:	e7cd      	b.n	800bb04 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bb68:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800bb6a:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800bb6c:	2a02      	cmp	r2, #2
 800bb6e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800bb72:	d176      	bne.n	800bc62 <tcp_slowtmr+0x182>
 800bb74:	2b05      	cmp	r3, #5
 800bb76:	d976      	bls.n	800bc66 <tcp_slowtmr+0x186>
      ++pcb_remove;
 800bb78:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 800bb7c:	7d23      	ldrb	r3, [r4, #20]
 800bb7e:	2b06      	cmp	r3, #6
 800bb80:	d10b      	bne.n	800bb9a <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 800bb82:	8b62      	ldrh	r2, [r4, #26]
 800bb84:	06d2      	lsls	r2, r2, #27
 800bb86:	d508      	bpl.n	800bb9a <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bb88:	68ea      	ldr	r2, [r5, #12]
 800bb8a:	6a21      	ldr	r1, [r4, #32]
 800bb8c:	1a52      	subs	r2, r2, r1
 800bb8e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800bb90:	bf84      	itt	hi
 800bb92:	f10a 0a01 	addhi.w	sl, sl, #1
 800bb96:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800bb9a:	7a66      	ldrb	r6, [r4, #9]
 800bb9c:	f016 0608 	ands.w	r6, r6, #8
 800bba0:	d019      	beq.n	800bbd6 <tcp_slowtmr+0xf6>
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	d002      	beq.n	800bbac <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 800bba6:	2b07      	cmp	r3, #7
 800bba8:	f040 811c 	bne.w	800bde4 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbac:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bbae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbb2:	68e9      	ldr	r1, [r5, #12]
 800bbb4:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800bbb6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bbba:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 800bbbe:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 800bbc2:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbc6:	4291      	cmp	r1, r2
 800bbc8:	f240 80fa 	bls.w	800bdc0 <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 800bbcc:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 800bbd0:	2601      	movs	r6, #1
        ++pcb_remove;
 800bbd2:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->state == SYN_RCVD) {
 800bbd6:	7d23      	ldrb	r3, [r4, #20]
 800bbd8:	2b03      	cmp	r3, #3
 800bbda:	f040 8105 	bne.w	800bde8 <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bbde:	68eb      	ldr	r3, [r5, #12]
 800bbe0:	6a22      	ldr	r2, [r4, #32]
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bbe6:	d803      	bhi.n	800bbf0 <tcp_slowtmr+0x110>
    if (pcb_remove) {
 800bbe8:	f1ba 0f00 	cmp.w	sl, #0
 800bbec:	f000 8110 	beq.w	800be10 <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 800bbf0:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800bbf2:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800bbf6:	f7ff ff47 	bl	800ba88 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bbfa:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 800bbfc:	f1b9 0f00 	cmp.w	r9, #0
 800bc00:	f000 80fa 	beq.w	800bdf8 <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	d106      	bne.n	800bc16 <tcp_slowtmr+0x136>
 800bc08:	463b      	mov	r3, r7
 800bc0a:	f240 526d 	movw	r2, #1389	; 0x56d
 800bc0e:	4965      	ldr	r1, [pc, #404]	; (800bda4 <tcp_slowtmr+0x2c4>)
 800bc10:	4640      	mov	r0, r8
 800bc12:	f003 fbcb 	bl	800f3ac <iprintf>
        prev->next = pcb->next;
 800bc16:	68e3      	ldr	r3, [r4, #12]
 800bc18:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800bc1c:	b15e      	cbz	r6, 800bc36 <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bc1e:	8b23      	ldrh	r3, [r4, #24]
 800bc20:	4620      	mov	r0, r4
 800bc22:	9302      	str	r3, [sp, #8]
 800bc24:	8ae3      	ldrh	r3, [r4, #22]
 800bc26:	9301      	str	r3, [sp, #4]
 800bc28:	1d23      	adds	r3, r4, #4
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	4623      	mov	r3, r4
 800bc2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bc30:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bc32:	f002 fb9b 	bl	800e36c <tcp_rst>
      err_arg = pcb->callback_arg;
 800bc36:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800bc38:	4620      	mov	r0, r4
      pcb = pcb->next;
 800bc3a:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 800bc3c:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800bc3e:	f7ff fd53 	bl	800b6e8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800bc42:	2200      	movs	r2, #0
 800bc44:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800bc46:	f1ba 0f00 	cmp.w	sl, #0
 800bc4a:	d008      	beq.n	800bc5e <tcp_slowtmr+0x17e>
 800bc4c:	9b05      	ldr	r3, [sp, #20]
 800bc4e:	f06f 010c 	mvn.w	r1, #12
 800bc52:	4618      	mov	r0, r3
 800bc54:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 800bc56:	7c6b      	ldrb	r3, [r5, #17]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f47f af50 	bne.w	800bafe <tcp_slowtmr+0x1e>
 800bc5e:	464c      	mov	r4, r9
 800bc60:	e77f      	b.n	800bb62 <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800bc62:	2b0b      	cmp	r3, #11
 800bc64:	e787      	b.n	800bb76 <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 800bc66:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 800bc6a:	f1ba 0f00 	cmp.w	sl, #0
 800bc6e:	d045      	beq.n	800bcfc <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800bc70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bc72:	b133      	cbz	r3, 800bc82 <tcp_slowtmr+0x1a2>
 800bc74:	463b      	mov	r3, r7
 800bc76:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800bc7a:	494b      	ldr	r1, [pc, #300]	; (800bda8 <tcp_slowtmr+0x2c8>)
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	f003 fb95 	bl	800f3ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800bc82:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc84:	b933      	cbnz	r3, 800bc94 <tcp_slowtmr+0x1b4>
 800bc86:	463b      	mov	r3, r7
 800bc88:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800bc8c:	4947      	ldr	r1, [pc, #284]	; (800bdac <tcp_slowtmr+0x2cc>)
 800bc8e:	4640      	mov	r0, r8
 800bc90:	f003 fb8c 	bl	800f3ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800bc94:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800bc98:	2b0b      	cmp	r3, #11
 800bc9a:	f63f af6d 	bhi.w	800bb78 <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800bc9e:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800bca2:	4b43      	ldr	r3, [pc, #268]	; (800bdb0 <tcp_slowtmr+0x2d0>)
 800bca4:	4413      	add	r3, r2
 800bca6:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800bca8:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d30b      	bcc.n	800bcc8 <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 800bcb0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800bcb4:	b189      	cbz	r1, 800bcda <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	f002 f910 	bl	800dedc <tcp_split_unsent_seg>
 800bcbc:	b990      	cbnz	r0, 800bce4 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f002 fbcc 	bl	800e45c <tcp_output>
 800bcc4:	b130      	cbz	r0, 800bcd4 <tcp_slowtmr+0x1f4>
 800bcc6:	e00d      	b.n	800bce4 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 800bcc8:	3301      	adds	r3, #1
 800bcca:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800bccc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800bcce:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800bcd2:	d2ed      	bcs.n	800bcb0 <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 800bcd4:	f04f 0a00 	mov.w	sl, #0
 800bcd8:	e750      	b.n	800bb7c <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f002 fdc6 	bl	800e86c <tcp_zero_window_probe>
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d1f7      	bne.n	800bcd4 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bce4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800bce8:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bcec:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800bcee:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800bcf2:	d8ef      	bhi.n	800bcd4 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800bcfa:	e73f      	b.n	800bb7c <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800bcfc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800bcfe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800bd02:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800bd04:	bf9c      	itt	ls
 800bd06:	3301      	addls	r3, #1
 800bd08:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800bd0a:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800bd0e:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800bd12:	429a      	cmp	r2, r3
 800bd14:	dbde      	blt.n	800bcd4 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800bd16:	4620      	mov	r0, r4
 800bd18:	f002 fa70 	bl	800e1fc <tcp_rexmit_rto_prepare>
 800bd1c:	b128      	cbz	r0, 800bd2a <tcp_slowtmr+0x24a>
 800bd1e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d1d7      	bne.n	800bcd4 <tcp_slowtmr+0x1f4>
 800bd24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0d4      	beq.n	800bcd4 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 800bd2a:	7d23      	ldrb	r3, [r4, #20]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d015      	beq.n	800bd5c <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bd30:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800bd34:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800bd38:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800bd3c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800bd40:	4a1b      	ldr	r2, [pc, #108]	; (800bdb0 <tcp_slowtmr+0x2d0>)
 800bd42:	290c      	cmp	r1, #12
 800bd44:	bf94      	ite	ls
 800bd46:	1852      	addls	r2, r2, r1
 800bd48:	320c      	addhi	r2, #12
 800bd4a:	7dd2      	ldrb	r2, [r2, #23]
 800bd4c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800bd4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bd52:	4293      	cmp	r3, r2
 800bd54:	bfa8      	it	ge
 800bd56:	4613      	movge	r3, r2
 800bd58:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bd5c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800bd60:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800bd62:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bd66:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800bd68:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800bd6a:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800bd6c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800bd70:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800bd72:	bf28      	it	cs
 800bd74:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bd76:	0073      	lsls	r3, r6, #1
            pcb->cwnd = pcb->mss;
 800bd78:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800bd7c:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800bd7e:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800bd80:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800bd84:	bf98      	it	ls
 800bd86:	460b      	movls	r3, r1
 800bd88:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800bd8c:	f002 fd10 	bl	800e7b0 <tcp_rexmit_rto_commit>
 800bd90:	e6f4      	b.n	800bb7c <tcp_slowtmr+0x9c>
 800bd92:	bf00      	nop
 800bd94:	20014040 	.word	0x20014040
 800bd98:	08016140 	.word	0x08016140
 800bd9c:	080163f3 	.word	0x080163f3
 800bda0:	0801641d 	.word	0x0801641d
 800bda4:	080164b1 	.word	0x080164b1
 800bda8:	0801644a 	.word	0x0801644a
 800bdac:	0801647c 	.word	0x0801647c
 800bdb0:	080143cc 	.word	0x080143cc
 800bdb4:	080163c9 	.word	0x080163c9
 800bdb8:	080144fe 	.word	0x080144fe
 800bdbc:	08016506 	.word	0x08016506
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800bdc0:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 800bdc4:	4e3d      	ldr	r6, [pc, #244]	; (800bebc <tcp_slowtmr+0x3dc>)
 800bdc6:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 800bdca:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800bdce:	4299      	cmp	r1, r3
 800bdd0:	d908      	bls.n	800bde4 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f002 fd22 	bl	800e81c <tcp_keepalive>
        if (err == ERR_OK) {
 800bdd8:	b920      	cbnz	r0, 800bde4 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 800bdda:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800bdde:	3301      	adds	r3, #1
 800bde0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800bde4:	2600      	movs	r6, #0
 800bde6:	e6f6      	b.n	800bbd6 <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 800bde8:	2b09      	cmp	r3, #9
 800bdea:	f47f aefd 	bne.w	800bbe8 <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bdee:	68eb      	ldr	r3, [r5, #12]
 800bdf0:	6a22      	ldr	r2, [r4, #32]
 800bdf2:	1a9b      	subs	r3, r3, r2
 800bdf4:	2bf0      	cmp	r3, #240	; 0xf0
 800bdf6:	e6f6      	b.n	800bbe6 <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	d006      	beq.n	800be0a <tcp_slowtmr+0x32a>
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	f240 5271 	movw	r2, #1393	; 0x571
 800be02:	492f      	ldr	r1, [pc, #188]	; (800bec0 <tcp_slowtmr+0x3e0>)
 800be04:	4640      	mov	r0, r8
 800be06:	f003 fad1 	bl	800f3ac <iprintf>
        tcp_active_pcbs = pcb->next;
 800be0a:	68e3      	ldr	r3, [r4, #12]
 800be0c:	60ab      	str	r3, [r5, #8]
 800be0e:	e705      	b.n	800bc1c <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 800be10:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800be12:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800be14:	3301      	adds	r3, #1
      pcb = pcb->next;
 800be16:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800be18:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800be1a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800be1c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800be1e:	f63f aea0 	bhi.w	800bb62 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800be22:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800be26:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800be2a:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 800be2e:	b91b      	cbnz	r3, 800be38 <tcp_slowtmr+0x358>
          tcp_output(prev);
 800be30:	4620      	mov	r0, r4
 800be32:	f002 fb13 	bl	800e45c <tcp_output>
 800be36:	e694      	b.n	800bb62 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800be38:	4621      	mov	r1, r4
 800be3a:	6920      	ldr	r0, [r4, #16]
 800be3c:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800be3e:	7c6b      	ldrb	r3, [r5, #17]
 800be40:	2b00      	cmp	r3, #0
 800be42:	f47f ae5c 	bne.w	800bafe <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800be46:	2800      	cmp	r0, #0
 800be48:	f47f ae8b 	bne.w	800bb62 <tcp_slowtmr+0x82>
 800be4c:	e7f0      	b.n	800be30 <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800be4e:	7d33      	ldrb	r3, [r6, #20]
 800be50:	2b0a      	cmp	r3, #10
 800be52:	d006      	beq.n	800be62 <tcp_slowtmr+0x382>
 800be54:	463b      	mov	r3, r7
 800be56:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800be5a:	4649      	mov	r1, r9
 800be5c:	4640      	mov	r0, r8
 800be5e:	f003 faa5 	bl	800f3ac <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800be62:	68eb      	ldr	r3, [r5, #12]
 800be64:	6a32      	ldr	r2, [r6, #32]
 800be66:	1a9b      	subs	r3, r3, r2
 800be68:	2bf0      	cmp	r3, #240	; 0xf0
 800be6a:	d910      	bls.n	800be8e <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff fe0b 	bl	800ba88 <tcp_pcb_purge>
      if (prev != NULL) {
 800be72:	b97c      	cbnz	r4, 800be94 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800be74:	696b      	ldr	r3, [r5, #20]
 800be76:	42b3      	cmp	r3, r6
 800be78:	d006      	beq.n	800be88 <tcp_slowtmr+0x3a8>
 800be7a:	463b      	mov	r3, r7
 800be7c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800be80:	4910      	ldr	r1, [pc, #64]	; (800bec4 <tcp_slowtmr+0x3e4>)
 800be82:	4640      	mov	r0, r8
 800be84:	f003 fa92 	bl	800f3ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800be88:	68f3      	ldr	r3, [r6, #12]
 800be8a:	616b      	str	r3, [r5, #20]
 800be8c:	e00e      	b.n	800beac <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 800be8e:	4634      	mov	r4, r6
 800be90:	68f6      	ldr	r6, [r6, #12]
 800be92:	e63e      	b.n	800bb12 <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800be94:	696b      	ldr	r3, [r5, #20]
 800be96:	42b3      	cmp	r3, r6
 800be98:	d106      	bne.n	800bea8 <tcp_slowtmr+0x3c8>
 800be9a:	463b      	mov	r3, r7
 800be9c:	f240 52af 	movw	r2, #1455	; 0x5af
 800bea0:	4909      	ldr	r1, [pc, #36]	; (800bec8 <tcp_slowtmr+0x3e8>)
 800bea2:	4640      	mov	r0, r8
 800bea4:	f003 fa82 	bl	800f3ac <iprintf>
        prev->next = pcb->next;
 800bea8:	68f3      	ldr	r3, [r6, #12]
 800beaa:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800beac:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7ff fc19 	bl	800b6e8 <tcp_free>
      pcb = pcb->next;
 800beb6:	4656      	mov	r6, sl
 800beb8:	e62b      	b.n	800bb12 <tcp_slowtmr+0x32>
 800beba:	bf00      	nop
 800bebc:	000124f8 	.word	0x000124f8
 800bec0:	080164dc 	.word	0x080164dc
 800bec4:	0801655c 	.word	0x0801655c
 800bec8:	08016535 	.word	0x08016535

0800becc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bed0:	460c      	mov	r4, r1
 800bed2:	b931      	cbnz	r1, 800bee2 <tcp_pcb_remove+0x16>
 800bed4:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <tcp_pcb_remove+0xa0>)
 800bed6:	f640 0283 	movw	r2, #2179	; 0x883
 800beda:	4925      	ldr	r1, [pc, #148]	; (800bf70 <tcp_pcb_remove+0xa4>)
 800bedc:	4825      	ldr	r0, [pc, #148]	; (800bf74 <tcp_pcb_remove+0xa8>)
 800bede:	f003 fa65 	bl	800f3ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bee2:	b935      	cbnz	r5, 800bef2 <tcp_pcb_remove+0x26>
 800bee4:	4b21      	ldr	r3, [pc, #132]	; (800bf6c <tcp_pcb_remove+0xa0>)
 800bee6:	f640 0284 	movw	r2, #2180	; 0x884
 800beea:	4923      	ldr	r1, [pc, #140]	; (800bf78 <tcp_pcb_remove+0xac>)
 800beec:	4821      	ldr	r0, [pc, #132]	; (800bf74 <tcp_pcb_remove+0xa8>)
 800beee:	f003 fa5d 	bl	800f3ac <iprintf>

  TCP_RMV(pcblist, pcb);
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	42a3      	cmp	r3, r4
 800bef6:	d116      	bne.n	800bf26 <tcp_pcb_remove+0x5a>
 800bef8:	68e3      	ldr	r3, [r4, #12]
 800befa:	602b      	str	r3, [r5, #0]
 800befc:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800befe:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800bf00:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800bf02:	f7ff fdc1 	bl	800ba88 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bf06:	7d23      	ldrb	r3, [r4, #20]
 800bf08:	2b0a      	cmp	r3, #10
 800bf0a:	d114      	bne.n	800bf36 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bf0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bf0e:	bb23      	cbnz	r3, 800bf5a <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bf10:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bf12:	b1f3      	cbz	r3, 800bf52 <tcp_pcb_remove+0x86>
 800bf14:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <tcp_pcb_remove+0xa0>)
 800bf16:	f640 0294 	movw	r2, #2196	; 0x894
 800bf1a:	4918      	ldr	r1, [pc, #96]	; (800bf7c <tcp_pcb_remove+0xb0>)
 800bf1c:	4815      	ldr	r0, [pc, #84]	; (800bf74 <tcp_pcb_remove+0xa8>)
 800bf1e:	f003 fa45 	bl	800f3ac <iprintf>
 800bf22:	e016      	b.n	800bf52 <tcp_pcb_remove+0x86>
 800bf24:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0e8      	beq.n	800befc <tcp_pcb_remove+0x30>
 800bf2a:	68da      	ldr	r2, [r3, #12]
 800bf2c:	42a2      	cmp	r2, r4
 800bf2e:	d1f9      	bne.n	800bf24 <tcp_pcb_remove+0x58>
 800bf30:	68e2      	ldr	r2, [r4, #12]
 800bf32:	60da      	str	r2, [r3, #12]
 800bf34:	e7e2      	b.n	800befc <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800bf36:	2b01      	cmp	r3, #1
 800bf38:	d00b      	beq.n	800bf52 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800bf3a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800bf3c:	07da      	lsls	r2, r3, #31
 800bf3e:	d5e5      	bpl.n	800bf0c <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800bf40:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800bf44:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800bf46:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800bf48:	f002 fa88 	bl	800e45c <tcp_output>
  if (pcb->state != LISTEN) {
 800bf4c:	7d23      	ldrb	r3, [r4, #20]
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d1dc      	bne.n	800bf0c <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bf52:	2300      	movs	r3, #0
 800bf54:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bf56:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bf5a:	4b04      	ldr	r3, [pc, #16]	; (800bf6c <tcp_pcb_remove+0xa0>)
 800bf5c:	f640 0293 	movw	r2, #2195	; 0x893
 800bf60:	4907      	ldr	r1, [pc, #28]	; (800bf80 <tcp_pcb_remove+0xb4>)
 800bf62:	4804      	ldr	r0, [pc, #16]	; (800bf74 <tcp_pcb_remove+0xa8>)
 800bf64:	f003 fa22 	bl	800f3ac <iprintf>
 800bf68:	e7d2      	b.n	800bf10 <tcp_pcb_remove+0x44>
 800bf6a:	bf00      	nop
 800bf6c:	08016140 	.word	0x08016140
 800bf70:	08016582 	.word	0x08016582
 800bf74:	080144fe 	.word	0x080144fe
 800bf78:	0801659e 	.word	0x0801659e
 800bf7c:	080165d6 	.word	0x080165d6
 800bf80:	080165be 	.word	0x080165be

0800bf84 <tcp_close_shutdown>:
{
 800bf84:	b530      	push	{r4, r5, lr}
 800bf86:	460d      	mov	r5, r1
 800bf88:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	b930      	cbnz	r0, 800bf9c <tcp_close_shutdown+0x18>
 800bf8e:	4b4b      	ldr	r3, [pc, #300]	; (800c0bc <tcp_close_shutdown+0x138>)
 800bf90:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bf94:	494a      	ldr	r1, [pc, #296]	; (800c0c0 <tcp_close_shutdown+0x13c>)
 800bf96:	484b      	ldr	r0, [pc, #300]	; (800c0c4 <tcp_close_shutdown+0x140>)
 800bf98:	f003 fa08 	bl	800f3ac <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bf9c:	7d23      	ldrb	r3, [r4, #20]
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	d03f      	beq.n	800c022 <tcp_close_shutdown+0x9e>
 800bfa2:	2b04      	cmp	r3, #4
 800bfa4:	d001      	beq.n	800bfaa <tcp_close_shutdown+0x26>
 800bfa6:	2b07      	cmp	r3, #7
 800bfa8:	d13b      	bne.n	800c022 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bfaa:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800bfac:	b922      	cbnz	r2, 800bfb8 <tcp_close_shutdown+0x34>
 800bfae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bfb0:	f640 3268 	movw	r2, #2920	; 0xb68
 800bfb4:	4291      	cmp	r1, r2
 800bfb6:	d034      	beq.n	800c022 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bfb8:	8b63      	ldrh	r3, [r4, #26]
 800bfba:	06db      	lsls	r3, r3, #27
 800bfbc:	d406      	bmi.n	800bfcc <tcp_close_shutdown+0x48>
 800bfbe:	4b3f      	ldr	r3, [pc, #252]	; (800c0bc <tcp_close_shutdown+0x138>)
 800bfc0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bfc4:	4940      	ldr	r1, [pc, #256]	; (800c0c8 <tcp_close_shutdown+0x144>)
 800bfc6:	483f      	ldr	r0, [pc, #252]	; (800c0c4 <tcp_close_shutdown+0x140>)
 800bfc8:	f003 f9f0 	bl	800f3ac <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bfcc:	8b23      	ldrh	r3, [r4, #24]
 800bfce:	4620      	mov	r0, r4
 800bfd0:	9302      	str	r3, [sp, #8]
 800bfd2:	8ae3      	ldrh	r3, [r4, #22]
 800bfd4:	9301      	str	r3, [sp, #4]
 800bfd6:	1d23      	adds	r3, r4, #4
 800bfd8:	9300      	str	r3, [sp, #0]
 800bfda:	4623      	mov	r3, r4
 800bfdc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bfde:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bfe0:	f002 f9c4 	bl	800e36c <tcp_rst>
      tcp_pcb_purge(pcb);
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f7ff fd4f 	bl	800ba88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bfea:	4a38      	ldr	r2, [pc, #224]	; (800c0cc <tcp_close_shutdown+0x148>)
 800bfec:	6893      	ldr	r3, [r2, #8]
 800bfee:	42a3      	cmp	r3, r4
 800bff0:	d10f      	bne.n	800c012 <tcp_close_shutdown+0x8e>
 800bff2:	68e3      	ldr	r3, [r4, #12]
 800bff4:	6093      	str	r3, [r2, #8]
 800bff6:	2300      	movs	r3, #0
 800bff8:	60e3      	str	r3, [r4, #12]
 800bffa:	2301      	movs	r3, #1
 800bffc:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 800bffe:	4b34      	ldr	r3, [pc, #208]	; (800c0d0 <tcp_close_shutdown+0x14c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	42a3      	cmp	r3, r4
 800c004:	d11d      	bne.n	800c042 <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 800c006:	f001 fb3f 	bl	800d688 <tcp_trigger_input_pcb_close>
}
 800c00a:	2000      	movs	r0, #0
 800c00c:	b005      	add	sp, #20
 800c00e:	bd30      	pop	{r4, r5, pc}
 800c010:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0ef      	beq.n	800bff6 <tcp_close_shutdown+0x72>
 800c016:	68d9      	ldr	r1, [r3, #12]
 800c018:	42a1      	cmp	r1, r4
 800c01a:	d1f9      	bne.n	800c010 <tcp_close_shutdown+0x8c>
 800c01c:	68e1      	ldr	r1, [r4, #12]
 800c01e:	60d9      	str	r1, [r3, #12]
 800c020:	e7e9      	b.n	800bff6 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800c022:	2b01      	cmp	r3, #1
 800c024:	d01a      	beq.n	800c05c <tcp_close_shutdown+0xd8>
 800c026:	2b02      	cmp	r3, #2
 800c028:	d039      	beq.n	800c09e <tcp_close_shutdown+0x11a>
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d140      	bne.n	800c0b0 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800c02e:	8ae3      	ldrh	r3, [r4, #22]
 800c030:	b13b      	cbz	r3, 800c042 <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c032:	4a26      	ldr	r2, [pc, #152]	; (800c0cc <tcp_close_shutdown+0x148>)
 800c034:	6813      	ldr	r3, [r2, #0]
 800c036:	42a3      	cmp	r3, r4
 800c038:	d108      	bne.n	800c04c <tcp_close_shutdown+0xc8>
 800c03a:	68e3      	ldr	r3, [r4, #12]
 800c03c:	6013      	str	r3, [r2, #0]
 800c03e:	2300      	movs	r3, #0
 800c040:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800c042:	4620      	mov	r0, r4
 800c044:	f7ff fb50 	bl	800b6e8 <tcp_free>
      break;
 800c048:	e7df      	b.n	800c00a <tcp_close_shutdown+0x86>
 800c04a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d0f6      	beq.n	800c03e <tcp_close_shutdown+0xba>
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	42a2      	cmp	r2, r4
 800c054:	d1f9      	bne.n	800c04a <tcp_close_shutdown+0xc6>
 800c056:	68e2      	ldr	r2, [r4, #12]
 800c058:	60da      	str	r2, [r3, #12]
 800c05a:	e7f0      	b.n	800c03e <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c05c:	491d      	ldr	r1, [pc, #116]	; (800c0d4 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 800c05e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c060:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800c064:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c066:	b9a2      	cbnz	r2, 800c092 <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c068:	3301      	adds	r3, #1
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	d1f8      	bne.n	800c060 <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c06e:	4621      	mov	r1, r4
 800c070:	4819      	ldr	r0, [pc, #100]	; (800c0d8 <tcp_close_shutdown+0x154>)
 800c072:	f7ff ff2b 	bl	800becc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c076:	7d23      	ldrb	r3, [r4, #20]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d105      	bne.n	800c088 <tcp_close_shutdown+0x104>
 800c07c:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <tcp_close_shutdown+0x138>)
 800c07e:	22df      	movs	r2, #223	; 0xdf
 800c080:	4916      	ldr	r1, [pc, #88]	; (800c0dc <tcp_close_shutdown+0x158>)
 800c082:	4810      	ldr	r0, [pc, #64]	; (800c0c4 <tcp_close_shutdown+0x140>)
 800c084:	f003 f992 	bl	800f3ac <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c088:	4621      	mov	r1, r4
 800c08a:	2002      	movs	r0, #2
 800c08c:	f7fe fdde 	bl	800ac4c <memp_free>
}
 800c090:	e7bb      	b.n	800c00a <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 800c092:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800c094:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800c096:	bf08      	it	eq
 800c098:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c09a:	68d2      	ldr	r2, [r2, #12]
 800c09c:	e7e3      	b.n	800c066 <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c09e:	4d0b      	ldr	r5, [pc, #44]	; (800c0cc <tcp_close_shutdown+0x148>)
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	f105 0008 	add.w	r0, r5, #8
 800c0a6:	f7ff ff11 	bl	800becc <tcp_pcb_remove>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	746b      	strb	r3, [r5, #17]
 800c0ae:	e7c8      	b.n	800c042 <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 800c0b0:	4620      	mov	r0, r4
}
 800c0b2:	b005      	add	sp, #20
 800c0b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800c0b8:	f7ff bada 	b.w	800b670 <tcp_close_shutdown_fin>
 800c0bc:	08016140 	.word	0x08016140
 800c0c0:	080165ef 	.word	0x080165ef
 800c0c4:	080144fe 	.word	0x080144fe
 800c0c8:	0801660f 	.word	0x0801660f
 800c0cc:	20014040 	.word	0x20014040
 800c0d0:	20014098 	.word	0x20014098
 800c0d4:	080143cc 	.word	0x080143cc
 800c0d8:	20014044 	.word	0x20014044
 800c0dc:	08016628 	.word	0x08016628

0800c0e0 <tcp_close>:
{
 800c0e0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0e2:	b158      	cbz	r0, 800c0fc <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800c0e4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800c0e6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800c0e8:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c0ea:	bf1e      	ittt	ne
 800c0ec:	8b43      	ldrhne	r3, [r0, #26]
 800c0ee:	f043 0310 	orrne.w	r3, r3, #16
 800c0f2:	8343      	strhne	r3, [r0, #26]
}
 800c0f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800c0f8:	f7ff bf44 	b.w	800bf84 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0fc:	4b04      	ldr	r3, [pc, #16]	; (800c110 <tcp_close+0x30>)
 800c0fe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c102:	4904      	ldr	r1, [pc, #16]	; (800c114 <tcp_close+0x34>)
 800c104:	4804      	ldr	r0, [pc, #16]	; (800c118 <tcp_close+0x38>)
 800c106:	f003 f951 	bl	800f3ac <iprintf>
}
 800c10a:	f06f 000f 	mvn.w	r0, #15
 800c10e:	bd08      	pop	{r3, pc}
 800c110:	08016140 	.word	0x08016140
 800c114:	08016641 	.word	0x08016641
 800c118:	080144fe 	.word	0x080144fe

0800c11c <tcp_recv_null>:
{
 800c11c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c11e:	4608      	mov	r0, r1
{
 800c120:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c122:	b949      	cbnz	r1, 800c138 <tcp_recv_null+0x1c>
 800c124:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <tcp_recv_null+0x3c>)
 800c126:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c12a:	490c      	ldr	r1, [pc, #48]	; (800c15c <tcp_recv_null+0x40>)
 800c12c:	480c      	ldr	r0, [pc, #48]	; (800c160 <tcp_recv_null+0x44>)
 800c12e:	f003 f93d 	bl	800f3ac <iprintf>
 800c132:	f06f 000f 	mvn.w	r0, #15
}
 800c136:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800c138:	b13a      	cbz	r2, 800c14a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800c13a:	8911      	ldrh	r1, [r2, #8]
 800c13c:	f7ff fbdc 	bl	800b8f8 <tcp_recved>
    pbuf_free(p);
 800c140:	4620      	mov	r0, r4
 800c142:	f7fe ffe3 	bl	800b10c <pbuf_free>
  return ERR_OK;
 800c146:	2000      	movs	r0, #0
 800c148:	e7f5      	b.n	800c136 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800c14a:	b91b      	cbnz	r3, 800c154 <tcp_recv_null+0x38>
}
 800c14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800c150:	f7ff bfc6 	b.w	800c0e0 <tcp_close>
  return ERR_OK;
 800c154:	4610      	mov	r0, r2
 800c156:	e7ee      	b.n	800c136 <tcp_recv_null+0x1a>
 800c158:	08016140 	.word	0x08016140
 800c15c:	08016658 	.word	0x08016658
 800c160:	080144fe 	.word	0x080144fe

0800c164 <tcp_process_refused_data>:
{
 800c164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c166:	4604      	mov	r4, r0
 800c168:	b950      	cbnz	r0, 800c180 <tcp_process_refused_data+0x1c>
 800c16a:	f06f 050f 	mvn.w	r5, #15
 800c16e:	4b1d      	ldr	r3, [pc, #116]	; (800c1e4 <tcp_process_refused_data+0x80>)
 800c170:	f240 6209 	movw	r2, #1545	; 0x609
 800c174:	491c      	ldr	r1, [pc, #112]	; (800c1e8 <tcp_process_refused_data+0x84>)
 800c176:	481d      	ldr	r0, [pc, #116]	; (800c1ec <tcp_process_refused_data+0x88>)
 800c178:	f003 f918 	bl	800f3ac <iprintf>
}
 800c17c:	4628      	mov	r0, r5
 800c17e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800c180:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800c182:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c184:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800c188:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800c18a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c18c:	b1e5      	cbz	r5, 800c1c8 <tcp_process_refused_data+0x64>
 800c18e:	4601      	mov	r1, r0
 800c190:	4632      	mov	r2, r6
 800c192:	6900      	ldr	r0, [r0, #16]
 800c194:	47a8      	blx	r5
 800c196:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800c198:	b9e8      	cbnz	r0, 800c1d6 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c19a:	06bb      	lsls	r3, r7, #26
 800c19c:	d5ee      	bpl.n	800c17c <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c19e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c1a0:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800c1a4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c1a8:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800c1aa:	bf1c      	itt	ne
 800c1ac:	3301      	addne	r3, #1
 800c1ae:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800c1b0:	2e00      	cmp	r6, #0
 800c1b2:	d0e3      	beq.n	800c17c <tcp_process_refused_data+0x18>
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	6920      	ldr	r0, [r4, #16]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800c1be:	300d      	adds	r0, #13
 800c1c0:	d1dc      	bne.n	800c17c <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800c1c2:	f06f 050c 	mvn.w	r5, #12
 800c1c6:	e7d9      	b.n	800c17c <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c1c8:	4601      	mov	r1, r0
 800c1ca:	462b      	mov	r3, r5
 800c1cc:	4632      	mov	r2, r6
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f7ff ffa4 	bl	800c11c <tcp_recv_null>
 800c1d4:	e7df      	b.n	800c196 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800c1d6:	350d      	adds	r5, #13
 800c1d8:	d0f3      	beq.n	800c1c2 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800c1da:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800c1de:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800c1e0:	e7cc      	b.n	800c17c <tcp_process_refused_data+0x18>
 800c1e2:	bf00      	nop
 800c1e4:	08016140 	.word	0x08016140
 800c1e8:	08016673 	.word	0x08016673
 800c1ec:	080144fe 	.word	0x080144fe

0800c1f0 <tcp_fasttmr>:
{
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 800c1f2:	4d18      	ldr	r5, [pc, #96]	; (800c254 <tcp_fasttmr+0x64>)
        tcp_active_pcbs_changed = 0;
 800c1f4:	2600      	movs	r6, #0
  ++tcp_timer_ctr;
 800c1f6:	7c2b      	ldrb	r3, [r5, #16]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800c1fc:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 800c1fe:	b904      	cbnz	r4, 800c202 <tcp_fasttmr+0x12>
}
 800c200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800c202:	7c2b      	ldrb	r3, [r5, #16]
 800c204:	7fa2      	ldrb	r2, [r4, #30]
 800c206:	429a      	cmp	r2, r3
 800c208:	d022      	beq.n	800c250 <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 800c20a:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800c20c:	8b63      	ldrh	r3, [r4, #26]
 800c20e:	07d9      	lsls	r1, r3, #31
 800c210:	d509      	bpl.n	800c226 <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 800c212:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800c216:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c218:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800c21a:	f002 f91f 	bl	800e45c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c21e:	8b63      	ldrh	r3, [r4, #26]
 800c220:	f023 0303 	bic.w	r3, r3, #3
 800c224:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800c226:	8b63      	ldrh	r3, [r4, #26]
 800c228:	071a      	lsls	r2, r3, #28
 800c22a:	d505      	bpl.n	800c238 <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c22c:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800c230:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c232:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800c234:	f7ff fa1c 	bl	800b670 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800c238:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800c23a:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 800c23c:	b133      	cbz	r3, 800c24c <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 800c23e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800c240:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 800c242:	f7ff ff8f 	bl	800c164 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c246:	7c6b      	ldrb	r3, [r5, #17]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1d7      	bne.n	800c1fc <tcp_fasttmr+0xc>
{
 800c24c:	463c      	mov	r4, r7
 800c24e:	e7d6      	b.n	800c1fe <tcp_fasttmr+0xe>
      pcb = pcb->next;
 800c250:	68e7      	ldr	r7, [r4, #12]
 800c252:	e7fb      	b.n	800c24c <tcp_fasttmr+0x5c>
 800c254:	20014040 	.word	0x20014040

0800c258 <tcp_tmr>:
{
 800c258:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800c25a:	f7ff ffc9 	bl	800c1f0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800c25e:	4a06      	ldr	r2, [pc, #24]	; (800c278 <tcp_tmr+0x20>)
 800c260:	7e13      	ldrb	r3, [r2, #24]
 800c262:	3301      	adds	r3, #1
 800c264:	b2db      	uxtb	r3, r3
 800c266:	7613      	strb	r3, [r2, #24]
 800c268:	07db      	lsls	r3, r3, #31
 800c26a:	d503      	bpl.n	800c274 <tcp_tmr+0x1c>
}
 800c26c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800c270:	f7ff bc36 	b.w	800bae0 <tcp_slowtmr>
}
 800c274:	bd08      	pop	{r3, pc}
 800c276:	bf00      	nop
 800c278:	20014040 	.word	0x20014040

0800c27c <tcp_shutdown>:
{
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800c280:	4605      	mov	r5, r0
 800c282:	b948      	cbnz	r0, 800c298 <tcp_shutdown+0x1c>
 800c284:	4b16      	ldr	r3, [pc, #88]	; (800c2e0 <tcp_shutdown+0x64>)
 800c286:	f240 2207 	movw	r2, #519	; 0x207
 800c28a:	4916      	ldr	r1, [pc, #88]	; (800c2e4 <tcp_shutdown+0x68>)
 800c28c:	4816      	ldr	r0, [pc, #88]	; (800c2e8 <tcp_shutdown+0x6c>)
 800c28e:	f003 f88d 	bl	800f3ac <iprintf>
 800c292:	f06f 000f 	mvn.w	r0, #15
}
 800c296:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800c298:	7d03      	ldrb	r3, [r0, #20]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d018      	beq.n	800c2d0 <tcp_shutdown+0x54>
  if (shut_rx) {
 800c29e:	b189      	cbz	r1, 800c2c4 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c2a0:	8b43      	ldrh	r3, [r0, #26]
 800c2a2:	f043 0310 	orr.w	r3, r3, #16
 800c2a6:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800c2a8:	b122      	cbz	r2, 800c2b4 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800c2aa:	2101      	movs	r1, #1
}
 800c2ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c2b0:	f7ff be68 	b.w	800bf84 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800c2b4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800c2b6:	b908      	cbnz	r0, 800c2bc <tcp_shutdown+0x40>
  return ERR_OK;
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	e7ec      	b.n	800c296 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800c2bc:	f7fe ff26 	bl	800b10c <pbuf_free>
      pcb->refused_data = NULL;
 800c2c0:	676c      	str	r4, [r5, #116]	; 0x74
 800c2c2:	e7f9      	b.n	800c2b8 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	d0f7      	beq.n	800c2b8 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800c2c8:	2b04      	cmp	r3, #4
 800c2ca:	d804      	bhi.n	800c2d6 <tcp_shutdown+0x5a>
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d804      	bhi.n	800c2da <tcp_shutdown+0x5e>
 800c2d0:	f06f 000a 	mvn.w	r0, #10
 800c2d4:	e7df      	b.n	800c296 <tcp_shutdown+0x1a>
 800c2d6:	2b07      	cmp	r3, #7
 800c2d8:	d1fa      	bne.n	800c2d0 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800c2da:	2100      	movs	r1, #0
 800c2dc:	4628      	mov	r0, r5
 800c2de:	e7e5      	b.n	800c2ac <tcp_shutdown+0x30>
 800c2e0:	08016140 	.word	0x08016140
 800c2e4:	08016699 	.word	0x08016699
 800c2e8:	080144fe 	.word	0x080144fe

0800c2ec <tcp_abandon>:
{
 800c2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2f0:	460e      	mov	r6, r1
 800c2f2:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	b948      	cbnz	r0, 800c30c <tcp_abandon+0x20>
 800c2f8:	4b35      	ldr	r3, [pc, #212]	; (800c3d0 <tcp_abandon+0xe4>)
 800c2fa:	f240 223d 	movw	r2, #573	; 0x23d
 800c2fe:	4935      	ldr	r1, [pc, #212]	; (800c3d4 <tcp_abandon+0xe8>)
 800c300:	4835      	ldr	r0, [pc, #212]	; (800c3d8 <tcp_abandon+0xec>)
}
 800c302:	b005      	add	sp, #20
 800c304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c308:	f003 b850 	b.w	800f3ac <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c30c:	7d03      	ldrb	r3, [r0, #20]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d106      	bne.n	800c320 <tcp_abandon+0x34>
 800c312:	4b2f      	ldr	r3, [pc, #188]	; (800c3d0 <tcp_abandon+0xe4>)
 800c314:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c318:	4930      	ldr	r1, [pc, #192]	; (800c3dc <tcp_abandon+0xf0>)
 800c31a:	482f      	ldr	r0, [pc, #188]	; (800c3d8 <tcp_abandon+0xec>)
 800c31c:	f003 f846 	bl	800f3ac <iprintf>
  if (pcb->state == TIME_WAIT) {
 800c320:	7d23      	ldrb	r3, [r4, #20]
 800c322:	2b0a      	cmp	r3, #10
 800c324:	d109      	bne.n	800c33a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c326:	4621      	mov	r1, r4
 800c328:	482d      	ldr	r0, [pc, #180]	; (800c3e0 <tcp_abandon+0xf4>)
 800c32a:	f7ff fdcf 	bl	800becc <tcp_pcb_remove>
    tcp_free(pcb);
 800c32e:	4620      	mov	r0, r4
}
 800c330:	b005      	add	sp, #20
 800c332:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 800c336:	f7ff b9d7 	b.w	800b6e8 <tcp_free>
    seqno = pcb->snd_nxt;
 800c33a:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800c33e:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800c342:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800c346:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800c34a:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800c34c:	b99b      	cbnz	r3, 800c376 <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 800c34e:	b13d      	cbz	r5, 800c360 <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c350:	4a24      	ldr	r2, [pc, #144]	; (800c3e4 <tcp_abandon+0xf8>)
 800c352:	6813      	ldr	r3, [r2, #0]
 800c354:	42a3      	cmp	r3, r4
 800c356:	d106      	bne.n	800c366 <tcp_abandon+0x7a>
 800c358:	68e3      	ldr	r3, [r4, #12]
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	2500      	movs	r5, #0
 800c35e:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800c360:	462e      	mov	r6, r5
 800c362:	e012      	b.n	800c38a <tcp_abandon+0x9e>
 800c364:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c366:	2b00      	cmp	r3, #0
 800c368:	d0f8      	beq.n	800c35c <tcp_abandon+0x70>
 800c36a:	68da      	ldr	r2, [r3, #12]
 800c36c:	42a2      	cmp	r2, r4
 800c36e:	d1f9      	bne.n	800c364 <tcp_abandon+0x78>
 800c370:	68e2      	ldr	r2, [r4, #12]
 800c372:	60da      	str	r2, [r3, #12]
 800c374:	e7f2      	b.n	800c35c <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c376:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800c3e4 <tcp_abandon+0xf8>
 800c37a:	4621      	mov	r1, r4
 800c37c:	f10b 0008 	add.w	r0, fp, #8
 800c380:	f7ff fda4 	bl	800becc <tcp_pcb_remove>
 800c384:	2301      	movs	r3, #1
 800c386:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 800c38a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c38c:	b108      	cbz	r0, 800c392 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 800c38e:	f7ff faff 	bl	800b990 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800c392:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c394:	b108      	cbz	r0, 800c39a <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 800c396:	f7ff fafb 	bl	800b990 <tcp_segs_free>
    if (send_rst) {
 800c39a:	b156      	cbz	r6, 800c3b2 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c39c:	8b23      	ldrh	r3, [r4, #24]
 800c39e:	4652      	mov	r2, sl
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800c3a8:	1d23      	adds	r3, r4, #4
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	4623      	mov	r3, r4
 800c3ae:	f001 ffdd 	bl	800e36c <tcp_rst>
    tcp_free(pcb);
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff f998 	bl	800b6e8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c3b8:	b13f      	cbz	r7, 800c3ca <tcp_abandon+0xde>
 800c3ba:	f06f 010c 	mvn.w	r1, #12
 800c3be:	4640      	mov	r0, r8
 800c3c0:	463b      	mov	r3, r7
}
 800c3c2:	b005      	add	sp, #20
 800c3c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c3c8:	4718      	bx	r3
}
 800c3ca:	b005      	add	sp, #20
 800c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d0:	08016140 	.word	0x08016140
 800c3d4:	080166b3 	.word	0x080166b3
 800c3d8:	080144fe 	.word	0x080144fe
 800c3dc:	080166cc 	.word	0x080166cc
 800c3e0:	20014054 	.word	0x20014054
 800c3e4:	20014040 	.word	0x20014040

0800c3e8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	f7ff bf7f 	b.w	800c2ec <tcp_abandon>
	...

0800c3f0 <tcp_accept_null>:
{
 800c3f0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	b931      	cbnz	r1, 800c404 <tcp_accept_null+0x14>
 800c3f6:	4b06      	ldr	r3, [pc, #24]	; (800c410 <tcp_accept_null+0x20>)
 800c3f8:	f240 320f 	movw	r2, #783	; 0x30f
 800c3fc:	4905      	ldr	r1, [pc, #20]	; (800c414 <tcp_accept_null+0x24>)
 800c3fe:	4806      	ldr	r0, [pc, #24]	; (800c418 <tcp_accept_null+0x28>)
 800c400:	f002 ffd4 	bl	800f3ac <iprintf>
  tcp_abort(pcb);
 800c404:	4620      	mov	r0, r4
 800c406:	f7ff ffef 	bl	800c3e8 <tcp_abort>
}
 800c40a:	f06f 000c 	mvn.w	r0, #12
 800c40e:	bd10      	pop	{r4, pc}
 800c410:	08016140 	.word	0x08016140
 800c414:	080166fd 	.word	0x080166fd
 800c418:	080144fe 	.word	0x080144fe

0800c41c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c41c:	b570      	push	{r4, r5, r6, lr}
 800c41e:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c420:	4605      	mov	r5, r0
 800c422:	b930      	cbnz	r0, 800c432 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800c424:	4b09      	ldr	r3, [pc, #36]	; (800c44c <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800c426:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c42a:	4909      	ldr	r1, [pc, #36]	; (800c450 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800c42c:	4809      	ldr	r0, [pc, #36]	; (800c454 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800c42e:	f002 ffbd 	bl	800f3ac <iprintf>

  while (pcb != NULL) {
 800c432:	b904      	cbnz	r4, 800c436 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800c434:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c436:	6822      	ldr	r2, [r4, #0]
 800c438:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800c43a:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d102      	bne.n	800c446 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800c440:	4620      	mov	r0, r4
 800c442:	f7ff ffd1 	bl	800c3e8 <tcp_abort>
{
 800c446:	4634      	mov	r4, r6
 800c448:	e7f3      	b.n	800c432 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800c44a:	bf00      	nop
 800c44c:	08016140 	.word	0x08016140
 800c450:	0801671a 	.word	0x0801671a
 800c454:	080144fe 	.word	0x080144fe

0800c458 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c458:	4b0c      	ldr	r3, [pc, #48]	; (800c48c <tcp_kill_state+0x34>)
  inactivity = 0;
 800c45a:	2200      	movs	r2, #0
{
 800c45c:	b430      	push	{r4, r5}
 800c45e:	4604      	mov	r4, r0
  inactive = NULL;
 800c460:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c462:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c466:	b919      	cbnz	r1, 800c470 <tcp_kill_state+0x18>
  if (inactive != NULL) {
 800c468:	b168      	cbz	r0, 800c486 <tcp_kill_state+0x2e>
}
 800c46a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800c46c:	f7ff bf3e 	b.w	800c2ec <tcp_abandon>
    if (pcb->state == state) {
 800c470:	7d0b      	ldrb	r3, [r1, #20]
 800c472:	42a3      	cmp	r3, r4
 800c474:	d105      	bne.n	800c482 <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c476:	6a0b      	ldr	r3, [r1, #32]
 800c478:	1aeb      	subs	r3, r5, r3
 800c47a:	4293      	cmp	r3, r2
 800c47c:	bf24      	itt	cs
 800c47e:	461a      	movcs	r2, r3
 800c480:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c482:	68c9      	ldr	r1, [r1, #12]
 800c484:	e7ef      	b.n	800c466 <tcp_kill_state+0xe>
}
 800c486:	bc30      	pop	{r4, r5}
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	20014040 	.word	0x20014040

0800c490 <tcp_alloc>:
{
 800c490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c492:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c494:	2001      	movs	r0, #1
 800c496:	f7fe fba9 	bl	800abec <memp_malloc>
  if (pcb == NULL) {
 800c49a:	4c3f      	ldr	r4, [pc, #252]	; (800c598 <tcp_alloc+0x108>)
 800c49c:	4603      	mov	r3, r0
 800c49e:	bb98      	cbnz	r0, 800c508 <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c4a0:	68a0      	ldr	r0, [r4, #8]
  while (pcb != NULL) {
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d153      	bne.n	800c54e <tcp_alloc+0xbe>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4a6:	6963      	ldr	r3, [r4, #20]
  inactivity = 0;
 800c4a8:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c4aa:	68e6      	ldr	r6, [r4, #12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d159      	bne.n	800c564 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800c4b0:	b108      	cbz	r0, 800c4b6 <tcp_alloc+0x26>
    tcp_abort(inactive);
 800c4b2:	f7ff ff99 	bl	800c3e8 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	f7fe fb98 	bl	800abec <memp_malloc>
    if (pcb == NULL) {
 800c4bc:	4603      	mov	r3, r0
 800c4be:	bb18      	cbnz	r0, 800c508 <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 800c4c0:	2009      	movs	r0, #9
 800c4c2:	f7ff ffc9 	bl	800c458 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	f7fe fb90 	bl	800abec <memp_malloc>
      if (pcb == NULL) {
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	b9d8      	cbnz	r0, 800c508 <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 800c4d0:	2008      	movs	r0, #8
 800c4d2:	f7ff ffc1 	bl	800c458 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c4d6:	2001      	movs	r0, #1
 800c4d8:	f7fe fb88 	bl	800abec <memp_malloc>
        if (pcb == NULL) {
 800c4dc:	4603      	mov	r3, r0
 800c4de:	b998      	cbnz	r0, 800c508 <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c4e0:	062a      	lsls	r2, r5, #24
 800c4e2:	d447      	bmi.n	800c574 <tcp_alloc+0xe4>
  if (mprio == 0) {
 800c4e4:	b15d      	cbz	r5, 800c4fe <tcp_alloc+0x6e>
 800c4e6:	4629      	mov	r1, r5
  mprio--;
 800c4e8:	3901      	subs	r1, #1
  inactivity = 0;
 800c4ea:	2000      	movs	r0, #0
  mprio--;
 800c4ec:	b2c9      	uxtb	r1, r1
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c4ee:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	d140      	bne.n	800c578 <tcp_alloc+0xe8>
  if (inactive != NULL) {
 800c4f6:	b113      	cbz	r3, 800c4fe <tcp_alloc+0x6e>
    tcp_abort(inactive);
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff ff75 	bl	800c3e8 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c4fe:	2001      	movs	r0, #1
 800c500:	f7fe fb74 	bl	800abec <memp_malloc>
  if (pcb != NULL) {
 800c504:	4603      	mov	r3, r0
 800c506:	b300      	cbz	r0, 800c54a <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c508:	2298      	movs	r2, #152	; 0x98
 800c50a:	4618      	mov	r0, r3
 800c50c:	2100      	movs	r1, #0
 800c50e:	f002 ff45 	bl	800f39c <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800c512:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c516:	4603      	mov	r3, r0
    pcb->prio = prio;
 800c518:	7545      	strb	r5, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800c51a:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c51e:	4a1f      	ldr	r2, [pc, #124]	; (800c59c <tcp_alloc+0x10c>)
 800c520:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c522:	22ff      	movs	r2, #255	; 0xff
 800c524:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c526:	2206      	movs	r2, #6
 800c528:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c52c:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800c52e:	4a1c      	ldr	r2, [pc, #112]	; (800c5a0 <tcp_alloc+0x110>)
 800c530:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800c532:	68e2      	ldr	r2, [r4, #12]
 800c534:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c536:	7c22      	ldrb	r2, [r4, #16]
 800c538:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800c53a:	4a1a      	ldr	r2, [pc, #104]	; (800c5a4 <tcp_alloc+0x114>)
 800c53c:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800c53e:	4a1a      	ldr	r2, [pc, #104]	; (800c5a8 <tcp_alloc+0x118>)
 800c540:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c544:	4a19      	ldr	r2, [pc, #100]	; (800c5ac <tcp_alloc+0x11c>)
 800c546:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800c54e:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800c550:	68c6      	ldr	r6, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800c552:	0719      	lsls	r1, r3, #28
 800c554:	d504      	bpl.n	800c560 <tcp_alloc+0xd0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c556:	f023 0308 	bic.w	r3, r3, #8
 800c55a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800c55c:	f7ff f888 	bl	800b670 <tcp_close_shutdown_fin>
{
 800c560:	4630      	mov	r0, r6
 800c562:	e79e      	b.n	800c4a2 <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c564:	6a1a      	ldr	r2, [r3, #32]
 800c566:	1ab2      	subs	r2, r6, r2
 800c568:	428a      	cmp	r2, r1
 800c56a:	bf24      	itt	cs
 800c56c:	4618      	movcs	r0, r3
 800c56e:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	e79b      	b.n	800c4ac <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c574:	217f      	movs	r1, #127	; 0x7f
 800c576:	e7b7      	b.n	800c4e8 <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 800c578:	f892 c015 	ldrb.w	ip, [r2, #21]
 800c57c:	458c      	cmp	ip, r1
 800c57e:	d304      	bcc.n	800c58a <tcp_alloc+0xfa>
 800c580:	d107      	bne.n	800c592 <tcp_alloc+0x102>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c582:	6a16      	ldr	r6, [r2, #32]
 800c584:	1bbe      	subs	r6, r7, r6
 800c586:	4286      	cmp	r6, r0
 800c588:	d303      	bcc.n	800c592 <tcp_alloc+0x102>
      inactivity = tcp_ticks - pcb->tmr;
 800c58a:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800c58c:	4661      	mov	r1, ip
      inactivity = tcp_ticks - pcb->tmr;
 800c58e:	4613      	mov	r3, r2
 800c590:	1a38      	subs	r0, r7, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c592:	68d2      	ldr	r2, [r2, #12]
 800c594:	e7ad      	b.n	800c4f2 <tcp_alloc+0x62>
 800c596:	bf00      	nop
 800c598:	20014040 	.word	0x20014040
 800c59c:	0b680b68 	.word	0x0b680b68
 800c5a0:	0218ffff 	.word	0x0218ffff
 800c5a4:	16d00001 	.word	0x16d00001
 800c5a8:	0800c11d 	.word	0x0800c11d
 800c5ac:	006ddd00 	.word	0x006ddd00

0800c5b0 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c5b0:	2040      	movs	r0, #64	; 0x40
 800c5b2:	f7ff bf6d 	b.w	800c490 <tcp_alloc>
	...

0800c5b8 <tcp_next_iss>:
{
 800c5b8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c5ba:	b930      	cbnz	r0, 800c5ca <tcp_next_iss+0x12>
 800c5bc:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <tcp_next_iss+0x20>)
 800c5be:	f640 02af 	movw	r2, #2223	; 0x8af
 800c5c2:	4906      	ldr	r1, [pc, #24]	; (800c5dc <tcp_next_iss+0x24>)
 800c5c4:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <tcp_next_iss+0x28>)
 800c5c6:	f002 fef1 	bl	800f3ac <iprintf>
  iss += tcp_ticks;       /* XXX */
 800c5ca:	4b06      	ldr	r3, [pc, #24]	; (800c5e4 <tcp_next_iss+0x2c>)
 800c5cc:	4a06      	ldr	r2, [pc, #24]	; (800c5e8 <tcp_next_iss+0x30>)
 800c5ce:	6858      	ldr	r0, [r3, #4]
 800c5d0:	68d2      	ldr	r2, [r2, #12]
 800c5d2:	4410      	add	r0, r2
 800c5d4:	6058      	str	r0, [r3, #4]
}
 800c5d6:	bd08      	pop	{r3, pc}
 800c5d8:	08016140 	.word	0x08016140
 800c5dc:	0801674e 	.word	0x0801674e
 800c5e0:	080144fe 	.word	0x080144fe
 800c5e4:	20001a60 	.word	0x20001a60
 800c5e8:	20014040 	.word	0x20014040

0800c5ec <tcp_eff_send_mss_netif>:
{
 800c5ec:	b538      	push	{r3, r4, r5, lr}
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c5f2:	b932      	cbnz	r2, 800c602 <tcp_eff_send_mss_netif+0x16>
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <tcp_eff_send_mss_netif+0x30>)
 800c5f6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c5fa:	4909      	ldr	r1, [pc, #36]	; (800c620 <tcp_eff_send_mss_netif+0x34>)
 800c5fc:	4809      	ldr	r0, [pc, #36]	; (800c624 <tcp_eff_send_mss_netif+0x38>)
 800c5fe:	f002 fed5 	bl	800f3ac <iprintf>
    if (outif == NULL) {
 800c602:	b14d      	cbz	r5, 800c618 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800c604:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800c606:	b13b      	cbz	r3, 800c618 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c608:	2b28      	cmp	r3, #40	; 0x28
 800c60a:	bf8a      	itet	hi
 800c60c:	3b28      	subhi	r3, #40	; 0x28
 800c60e:	2300      	movls	r3, #0
 800c610:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c612:	429c      	cmp	r4, r3
 800c614:	bf28      	it	cs
 800c616:	461c      	movcs	r4, r3
}
 800c618:	4620      	mov	r0, r4
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	08016140 	.word	0x08016140
 800c620:	08016768 	.word	0x08016768
 800c624:	080144fe 	.word	0x080144fe

0800c628 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c62c:	4604      	mov	r4, r0
 800c62e:	b170      	cbz	r0, 800c64e <tcp_netif_ip_addr_changed+0x26>
 800c630:	6803      	ldr	r3, [r0, #0]
 800c632:	b163      	cbz	r3, 800c64e <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c634:	4e0a      	ldr	r6, [pc, #40]	; (800c660 <tcp_netif_ip_addr_changed+0x38>)
 800c636:	68b1      	ldr	r1, [r6, #8]
 800c638:	f7ff fef0 	bl	800c41c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c63c:	6831      	ldr	r1, [r6, #0]
 800c63e:	4620      	mov	r0, r4
 800c640:	f7ff feec 	bl	800c41c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c644:	b11d      	cbz	r5, 800c64e <tcp_netif_ip_addr_changed+0x26>
 800c646:	682b      	ldr	r3, [r5, #0]
 800c648:	b10b      	cbz	r3, 800c64e <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c64a:	6873      	ldr	r3, [r6, #4]
 800c64c:	b903      	cbnz	r3, 800c650 <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	6822      	ldr	r2, [r4, #0]
 800c654:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c656:	bf04      	itt	eq
 800c658:	682a      	ldreq	r2, [r5, #0]
 800c65a:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	e7f5      	b.n	800c64c <tcp_netif_ip_addr_changed+0x24>
 800c660:	20014040 	.word	0x20014040

0800c664 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800c664:	4a08      	ldr	r2, [pc, #32]	; (800c688 <tcp_get_next_optbyte+0x24>)
 800c666:	8813      	ldrh	r3, [r2, #0]
 800c668:	1c59      	adds	r1, r3, #1
 800c66a:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c66c:	6851      	ldr	r1, [r2, #4]
 800c66e:	b111      	cbz	r1, 800c676 <tcp_get_next_optbyte+0x12>
 800c670:	8910      	ldrh	r0, [r2, #8]
 800c672:	4283      	cmp	r3, r0
 800c674:	d203      	bcs.n	800c67e <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800c676:	68d2      	ldr	r2, [r2, #12]
 800c678:	4413      	add	r3, r2
 800c67a:	7d18      	ldrb	r0, [r3, #20]
 800c67c:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c67e:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800c680:	b2db      	uxtb	r3, r3
 800c682:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	2001405c 	.word	0x2001405c

0800c68c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c690:	4606      	mov	r6, r0
 800c692:	b930      	cbnz	r0, 800c6a2 <tcp_parseopt+0x16>
 800c694:	4b1e      	ldr	r3, [pc, #120]	; (800c710 <tcp_parseopt+0x84>)
 800c696:	f240 727d 	movw	r2, #1917	; 0x77d
 800c69a:	491e      	ldr	r1, [pc, #120]	; (800c714 <tcp_parseopt+0x88>)
 800c69c:	481e      	ldr	r0, [pc, #120]	; (800c718 <tcp_parseopt+0x8c>)
 800c69e:	f002 fe85 	bl	800f3ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c6a2:	4d1e      	ldr	r5, [pc, #120]	; (800c71c <tcp_parseopt+0x90>)
 800c6a4:	8a2f      	ldrh	r7, [r5, #16]
 800c6a6:	b17f      	cbz	r7, 800c6c8 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c6a8:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c6aa:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800c6ae:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c6b2:	802b      	strh	r3, [r5, #0]
 800c6b4:	882b      	ldrh	r3, [r5, #0]
 800c6b6:	42bb      	cmp	r3, r7
 800c6b8:	d206      	bcs.n	800c6c8 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800c6ba:	f7ff ffd3 	bl	800c664 <tcp_get_next_optbyte>
      switch (opt) {
 800c6be:	2801      	cmp	r0, #1
 800c6c0:	d0f8      	beq.n	800c6b4 <tcp_parseopt+0x28>
 800c6c2:	2802      	cmp	r0, #2
 800c6c4:	d002      	beq.n	800c6cc <tcp_parseopt+0x40>
 800c6c6:	b9c8      	cbnz	r0, 800c6fc <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800c6c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c6cc:	f7ff ffca 	bl	800c664 <tcp_get_next_optbyte>
 800c6d0:	2804      	cmp	r0, #4
 800c6d2:	d1f9      	bne.n	800c6c8 <tcp_parseopt+0x3c>
 800c6d4:	882b      	ldrh	r3, [r5, #0]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	42bb      	cmp	r3, r7
 800c6da:	daf5      	bge.n	800c6c8 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c6dc:	f7ff ffc2 	bl	800c664 <tcp_get_next_optbyte>
 800c6e0:	0200      	lsls	r0, r0, #8
 800c6e2:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800c6e4:	f7ff ffbe 	bl	800c664 <tcp_get_next_optbyte>
 800c6e8:	ea44 0300 	orr.w	r3, r4, r0
 800c6ec:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c6ee:	1e5a      	subs	r2, r3, #1
 800c6f0:	b292      	uxth	r2, r2
 800c6f2:	4542      	cmp	r2, r8
 800c6f4:	bf88      	it	hi
 800c6f6:	464b      	movhi	r3, r9
 800c6f8:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800c6fa:	e7db      	b.n	800c6b4 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800c6fc:	f7ff ffb2 	bl	800c664 <tcp_get_next_optbyte>
          if (data < 2) {
 800c700:	2801      	cmp	r0, #1
 800c702:	d9e1      	bls.n	800c6c8 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800c704:	882b      	ldrh	r3, [r5, #0]
 800c706:	3b02      	subs	r3, #2
 800c708:	4418      	add	r0, r3
 800c70a:	8028      	strh	r0, [r5, #0]
 800c70c:	e7d2      	b.n	800c6b4 <tcp_parseopt+0x28>
 800c70e:	bf00      	nop
 800c710:	0801684e 	.word	0x0801684e
 800c714:	080168c3 	.word	0x080168c3
 800c718:	080144fe 	.word	0x080144fe
 800c71c:	2001405c 	.word	0x2001405c

0800c720 <tcp_input_delayed_close>:
{
 800c720:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c722:	4604      	mov	r4, r0
 800c724:	b930      	cbnz	r0, 800c734 <tcp_input_delayed_close+0x14>
 800c726:	4b0f      	ldr	r3, [pc, #60]	; (800c764 <tcp_input_delayed_close+0x44>)
 800c728:	f240 225a 	movw	r2, #602	; 0x25a
 800c72c:	490e      	ldr	r1, [pc, #56]	; (800c768 <tcp_input_delayed_close+0x48>)
 800c72e:	480f      	ldr	r0, [pc, #60]	; (800c76c <tcp_input_delayed_close+0x4c>)
 800c730:	f002 fe3c 	bl	800f3ac <iprintf>
  if (recv_flags & TF_CLOSED) {
 800c734:	4b0e      	ldr	r3, [pc, #56]	; (800c770 <tcp_input_delayed_close+0x50>)
 800c736:	7c98      	ldrb	r0, [r3, #18]
 800c738:	f010 0010 	ands.w	r0, r0, #16
 800c73c:	d011      	beq.n	800c762 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c73e:	8b63      	ldrh	r3, [r4, #26]
 800c740:	06db      	lsls	r3, r3, #27
 800c742:	d406      	bmi.n	800c752 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c744:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c748:	b11b      	cbz	r3, 800c752 <tcp_input_delayed_close+0x32>
 800c74a:	f06f 010e 	mvn.w	r1, #14
 800c74e:	6920      	ldr	r0, [r4, #16]
 800c750:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c752:	4621      	mov	r1, r4
 800c754:	4807      	ldr	r0, [pc, #28]	; (800c774 <tcp_input_delayed_close+0x54>)
 800c756:	f7ff fbb9 	bl	800becc <tcp_pcb_remove>
    tcp_free(pcb);
 800c75a:	4620      	mov	r0, r4
 800c75c:	f7fe ffc4 	bl	800b6e8 <tcp_free>
 800c760:	2001      	movs	r0, #1
}
 800c762:	bd10      	pop	{r4, pc}
 800c764:	0801684e 	.word	0x0801684e
 800c768:	080168dd 	.word	0x080168dd
 800c76c:	080144fe 	.word	0x080144fe
 800c770:	2001405c 	.word	0x2001405c
 800c774:	20014048 	.word	0x20014048

0800c778 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800c778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c77c:	4606      	mov	r6, r0
 800c77e:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800c780:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c782:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800c834 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c786:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800c82c <tcp_free_acked_segments.constprop.0+0xb4>
  while (seg_list != NULL &&
 800c78a:	2c00      	cmp	r4, #0
 800c78c:	d03b      	beq.n	800c806 <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c78e:	68e3      	ldr	r3, [r4, #12]
 800c790:	6858      	ldr	r0, [r3, #4]
 800c792:	f7fd fefe 	bl	800a592 <lwip_htonl>
 800c796:	68e3      	ldr	r3, [r4, #12]
 800c798:	4682      	mov	sl, r0
 800c79a:	8925      	ldrh	r5, [r4, #8]
 800c79c:	8998      	ldrh	r0, [r3, #12]
 800c79e:	f7fd fef5 	bl	800a58c <lwip_htons>
 800c7a2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c7a6:	f010 0003 	ands.w	r0, r0, #3
 800c7aa:	eba5 0303 	sub.w	r3, r5, r3
 800c7ae:	bf18      	it	ne
 800c7b0:	2001      	movne	r0, #1
 800c7b2:	eb03 050a 	add.w	r5, r3, sl
 800c7b6:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800c7b8:	2d00      	cmp	r5, #0
 800c7ba:	dc25      	bgt.n	800c808 <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 800c7bc:	e9d4 a000 	ldrd	sl, r0, [r4]
 800c7c0:	f7fe fde0 	bl	800b384 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c7c4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800c7c8:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c7ca:	4283      	cmp	r3, r0
 800c7cc:	d206      	bcs.n	800c7dc <tcp_free_acked_segments.constprop.0+0x64>
 800c7ce:	464b      	mov	r3, r9
 800c7d0:	f240 4257 	movw	r2, #1111	; 0x457
 800c7d4:	4913      	ldr	r1, [pc, #76]	; (800c824 <tcp_free_acked_segments.constprop.0+0xac>)
 800c7d6:	4814      	ldr	r0, [pc, #80]	; (800c828 <tcp_free_acked_segments.constprop.0+0xb0>)
 800c7d8:	f002 fde8 	bl	800f3ac <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c7dc:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c7e0:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800c7e4:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c7e6:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800c7e8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c7ea:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c7ec:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c7f0:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800c7f4:	f7ff f8be 	bl	800b974 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800c7f8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800c7fc:	b17b      	cbz	r3, 800c81e <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c7fe:	f1ba 0f00 	cmp.w	sl, #0
 800c802:	d10c      	bne.n	800c81e <tcp_free_acked_segments.constprop.0+0xa6>
 800c804:	b11f      	cbz	r7, 800c80e <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 800c806:	2400      	movs	r4, #0
}
 800c808:	4620      	mov	r0, r4
 800c80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c80e:	4b07      	ldr	r3, [pc, #28]	; (800c82c <tcp_free_acked_segments.constprop.0+0xb4>)
 800c810:	f240 4261 	movw	r2, #1121	; 0x461
 800c814:	4906      	ldr	r1, [pc, #24]	; (800c830 <tcp_free_acked_segments.constprop.0+0xb8>)
 800c816:	4804      	ldr	r0, [pc, #16]	; (800c828 <tcp_free_acked_segments.constprop.0+0xb0>)
 800c818:	f002 fdc8 	bl	800f3ac <iprintf>
  while (seg_list != NULL &&
 800c81c:	e7f3      	b.n	800c806 <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800c81e:	4654      	mov	r4, sl
 800c820:	e7b3      	b.n	800c78a <tcp_free_acked_segments.constprop.0+0x12>
 800c822:	bf00      	nop
 800c824:	08016902 	.word	0x08016902
 800c828:	080144fe 	.word	0x080144fe
 800c82c:	0801684e 	.word	0x0801684e
 800c830:	0801692a 	.word	0x0801692a
 800c834:	2001405c 	.word	0x2001405c

0800c838 <tcp_receive>:
{
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c83a:	4604      	mov	r4, r0
 800c83c:	b930      	cbnz	r0, 800c84c <tcp_receive+0x14>
 800c83e:	4b35      	ldr	r3, [pc, #212]	; (800c914 <tcp_receive+0xdc>)
 800c840:	f240 427b 	movw	r2, #1147	; 0x47b
 800c844:	4934      	ldr	r1, [pc, #208]	; (800c918 <tcp_receive+0xe0>)
 800c846:	4835      	ldr	r0, [pc, #212]	; (800c91c <tcp_receive+0xe4>)
 800c848:	f002 fdb0 	bl	800f3ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c84c:	7d23      	ldrb	r3, [r4, #20]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d806      	bhi.n	800c860 <tcp_receive+0x28>
 800c852:	4b30      	ldr	r3, [pc, #192]	; (800c914 <tcp_receive+0xdc>)
 800c854:	f240 427c 	movw	r2, #1148	; 0x47c
 800c858:	4931      	ldr	r1, [pc, #196]	; (800c920 <tcp_receive+0xe8>)
 800c85a:	4830      	ldr	r0, [pc, #192]	; (800c91c <tcp_receive+0xe4>)
 800c85c:	f002 fda6 	bl	800f3ac <iprintf>
  if (flags & TCP_ACK) {
 800c860:	4d30      	ldr	r5, [pc, #192]	; (800c924 <tcp_receive+0xec>)
 800c862:	7f2b      	ldrb	r3, [r5, #28]
 800c864:	06de      	lsls	r6, r3, #27
 800c866:	f140 8088 	bpl.w	800c97a <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c86a:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c86c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c870:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c872:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800c876:	1af7      	subs	r7, r6, r3
 800c878:	2f00      	cmp	r7, #0
 800c87a:	db0a      	blt.n	800c892 <tcp_receive+0x5a>
 800c87c:	429e      	cmp	r6, r3
 800c87e:	d102      	bne.n	800c886 <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c880:	1a86      	subs	r6, r0, r2
 800c882:	2e00      	cmp	r6, #0
 800c884:	db05      	blt.n	800c892 <tcp_receive+0x5a>
 800c886:	4290      	cmp	r0, r2
 800c888:	d110      	bne.n	800c8ac <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c88a:	68ee      	ldr	r6, [r5, #12]
 800c88c:	89f6      	ldrh	r6, [r6, #14]
 800c88e:	428e      	cmp	r6, r1
 800c890:	d90c      	bls.n	800c8ac <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c892:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c894:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c898:	89f6      	ldrh	r6, [r6, #14]
 800c89a:	b2b7      	uxth	r7, r6
 800c89c:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c8a0:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800c8a2:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c8a6:	bf38      	it	cc
 800c8a8:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c8ac:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800c8ae:	1b93      	subs	r3, r2, r6
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f300 813a 	bgt.w	800cb2a <tcp_receive+0x2f2>
      if (tcplen == 0) {
 800c8b6:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f040 8132 	bne.w	800cb22 <tcp_receive+0x2ea>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c8be:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c8c2:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c8c4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800c8c6:	443b      	add	r3, r7
 800c8c8:	428b      	cmp	r3, r1
 800c8ca:	f040 812a 	bne.w	800cb22 <tcp_receive+0x2ea>
          if (pcb->rtime >= 0) {
 800c8ce:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f2c0 8125 	blt.w	800cb22 <tcp_receive+0x2ea>
            if (pcb->lastack == ackno) {
 800c8d8:	4296      	cmp	r6, r2
 800c8da:	f040 8122 	bne.w	800cb22 <tcp_receive+0x2ea>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c8de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c8e2:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800c8e4:	bf1c      	itt	ne
 800c8e6:	3301      	addne	r3, #1
 800c8e8:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800c8ec:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c8f0:	2b03      	cmp	r3, #3
 800c8f2:	d919      	bls.n	800c928 <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8f4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800c8f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c8fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c8fe:	4413      	add	r3, r2
 800c900:	b29b      	uxth	r3, r3
 800c902:	429a      	cmp	r2, r3
 800c904:	bf88      	it	hi
 800c906:	460b      	movhi	r3, r1
 800c908:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800c90c:	4620      	mov	r0, r4
 800c90e:	f001 fcf9 	bl	800e304 <tcp_rexmit_fast>
      if (!found_dupack) {
 800c912:	e00a      	b.n	800c92a <tcp_receive+0xf2>
 800c914:	0801684e 	.word	0x0801684e
 800c918:	0801694a 	.word	0x0801694a
 800c91c:	080144fe 	.word	0x080144fe
 800c920:	08016963 	.word	0x08016963
 800c924:	2001405c 	.word	0x2001405c
              if (pcb->dupacks >= 3) {
 800c928:	d0f0      	beq.n	800c90c <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c92a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c92c:	b329      	cbz	r1, 800c97a <tcp_receive+0x142>
 800c92e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c930:	69aa      	ldr	r2, [r5, #24]
 800c932:	1a9b      	subs	r3, r3, r2
 800c934:	2b00      	cmp	r3, #0
 800c936:	da20      	bge.n	800c97a <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c938:	4b9b      	ldr	r3, [pc, #620]	; (800cba8 <tcp_receive+0x370>)
 800c93a:	b289      	uxth	r1, r1
 800c93c:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800c93e:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c942:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800c944:	f3c3 00cf 	ubfx	r0, r3, #3, #16
 800c948:	1a12      	subs	r2, r2, r0
 800c94a:	b216      	sxth	r6, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800c94c:	fa13 f282 	uxtah	r2, r3, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800c950:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      if (m < 0) {
 800c954:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800c956:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 800c958:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
        m = (s16_t) - m;
 800c95c:	bfb8      	it	lt
 800c95e:	1bc9      	sublt	r1, r1, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800c960:	87a2      	strh	r2, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800c962:	bfbc      	itt	lt
 800c964:	1809      	addlt	r1, r1, r0
 800c966:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800c968:	4433      	add	r3, r6
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c96e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800c972:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c97a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c97c:	6a2b      	ldr	r3, [r5, #32]
 800c97e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c980:	2800      	cmp	r0, #0
 800c982:	f000 8184 	beq.w	800cc8e <tcp_receive+0x456>
 800c986:	7d21      	ldrb	r1, [r4, #20]
 800c988:	2906      	cmp	r1, #6
 800c98a:	f200 8180 	bhi.w	800cc8e <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c98e:	1ad7      	subs	r7, r2, r3
 800c990:	2f01      	cmp	r7, #1
 800c992:	f100 816b 	bmi.w	800cc6c <tcp_receive+0x434>
 800c996:	f1c3 0101 	rsb	r1, r3, #1
 800c99a:	1a09      	subs	r1, r1, r0
 800c99c:	4411      	add	r1, r2
 800c99e:	2900      	cmp	r1, #0
 800c9a0:	f300 8164 	bgt.w	800cc6c <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 800c9a4:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c9a6:	b936      	cbnz	r6, 800c9b6 <tcp_receive+0x17e>
 800c9a8:	4b80      	ldr	r3, [pc, #512]	; (800cbac <tcp_receive+0x374>)
 800c9aa:	f240 5294 	movw	r2, #1428	; 0x594
 800c9ae:	4980      	ldr	r1, [pc, #512]	; (800cbb0 <tcp_receive+0x378>)
 800c9b0:	4880      	ldr	r0, [pc, #512]	; (800cbb4 <tcp_receive+0x37c>)
 800c9b2:	f002 fcfb 	bl	800f3ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c9b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c9ba:	429f      	cmp	r7, r3
 800c9bc:	d906      	bls.n	800c9cc <tcp_receive+0x194>
 800c9be:	4b7b      	ldr	r3, [pc, #492]	; (800cbac <tcp_receive+0x374>)
 800c9c0:	f240 5295 	movw	r2, #1429	; 0x595
 800c9c4:	497c      	ldr	r1, [pc, #496]	; (800cbb8 <tcp_receive+0x380>)
 800c9c6:	487b      	ldr	r0, [pc, #492]	; (800cbb4 <tcp_receive+0x37c>)
 800c9c8:	f002 fcf0 	bl	800f3ac <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c9cc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800c9ce:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c9d0:	891b      	ldrh	r3, [r3, #8]
 800c9d2:	42bb      	cmp	r3, r7
 800c9d4:	d206      	bcs.n	800c9e4 <tcp_receive+0x1ac>
 800c9d6:	4b75      	ldr	r3, [pc, #468]	; (800cbac <tcp_receive+0x374>)
 800c9d8:	f240 5297 	movw	r2, #1431	; 0x597
 800c9dc:	4977      	ldr	r1, [pc, #476]	; (800cbbc <tcp_receive+0x384>)
 800c9de:	4875      	ldr	r0, [pc, #468]	; (800cbb4 <tcp_receive+0x37c>)
 800c9e0:	f002 fce4 	bl	800f3ac <iprintf>
      inseg.len -= off;
 800c9e4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800c9e6:	2100      	movs	r1, #0
      inseg.len -= off;
 800c9e8:	1bdb      	subs	r3, r3, r7
 800c9ea:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c9ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c9ee:	891b      	ldrh	r3, [r3, #8]
 800c9f0:	1bdb      	subs	r3, r3, r7
 800c9f2:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800c9f4:	8972      	ldrh	r2, [r6, #10]
 800c9f6:	42ba      	cmp	r2, r7
 800c9f8:	f0c0 8132 	bcc.w	800cc60 <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f7fe fb50 	bl	800b0a4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ca04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca06:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800ca08:	622b      	str	r3, [r5, #32]
 800ca0a:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ca0c:	6a29      	ldr	r1, [r5, #32]
 800ca0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ca10:	1a8b      	subs	r3, r1, r2
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f2c0 8136 	blt.w	800cc84 <tcp_receive+0x44c>
 800ca18:	1c4b      	adds	r3, r1, #1
 800ca1a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800ca1c:	1a9b      	subs	r3, r3, r2
 800ca1e:	1a1b      	subs	r3, r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f300 812f 	bgt.w	800cc84 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 800ca26:	4291      	cmp	r1, r2
 800ca28:	f040 812c 	bne.w	800cc84 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 800ca2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ca2e:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800ca30:	8998      	ldrh	r0, [r3, #12]
 800ca32:	f7fd fdab 	bl	800a58c <lwip_htons>
 800ca36:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800ca3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800ca3c:	bf18      	it	ne
 800ca3e:	2001      	movne	r0, #1
 800ca40:	4430      	add	r0, r6
 800ca42:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800ca44:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800ca46:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800ca48:	d23d      	bcs.n	800cac6 <tcp_receive+0x28e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ca4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ca4c:	8998      	ldrh	r0, [r3, #12]
 800ca4e:	f7fd fd9d 	bl	800a58c <lwip_htons>
 800ca52:	07c6      	lsls	r6, r0, #31
 800ca54:	d50d      	bpl.n	800ca72 <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ca56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ca58:	899e      	ldrh	r6, [r3, #12]
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800ca60:	f7fd fd94 	bl	800a58c <lwip_htons>
 800ca64:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800ca68:	f7fd fd90 	bl	800a58c <lwip_htons>
 800ca6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ca6e:	4306      	orrs	r6, r0
 800ca70:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ca72:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ca74:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ca76:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ca78:	8998      	ldrh	r0, [r3, #12]
 800ca7a:	f7fd fd87 	bl	800a58c <lwip_htons>
 800ca7e:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800ca80:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800ca82:	bf42      	ittt	mi
 800ca84:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800ca86:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800ca8a:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800ca8c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800ca8e:	f7fe fc21 	bl	800b2d4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ca92:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800ca94:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800ca96:	8998      	ldrh	r0, [r3, #12]
 800ca98:	f7fd fd78 	bl	800a58c <lwip_htons>
 800ca9c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800caa0:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800caa2:	bf18      	it	ne
 800caa4:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800caa6:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800caa8:	4430      	add	r0, r6
 800caaa:	b280      	uxth	r0, r0
 800caac:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800caae:	4418      	add	r0, r3
 800cab0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cab2:	4413      	add	r3, r2
 800cab4:	4298      	cmp	r0, r3
 800cab6:	d006      	beq.n	800cac6 <tcp_receive+0x28e>
 800cab8:	4b3c      	ldr	r3, [pc, #240]	; (800cbac <tcp_receive+0x374>)
 800caba:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cabe:	4940      	ldr	r1, [pc, #256]	; (800cbc0 <tcp_receive+0x388>)
 800cac0:	483c      	ldr	r0, [pc, #240]	; (800cbb4 <tcp_receive+0x37c>)
 800cac2:	f002 fc73 	bl	800f3ac <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800cac6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800cac8:	6a2b      	ldr	r3, [r5, #32]
 800caca:	4413      	add	r3, r2
 800cacc:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d206      	bcs.n	800cae2 <tcp_receive+0x2aa>
 800cad4:	4b35      	ldr	r3, [pc, #212]	; (800cbac <tcp_receive+0x374>)
 800cad6:	f240 6207 	movw	r2, #1543	; 0x607
 800cada:	493a      	ldr	r1, [pc, #232]	; (800cbc4 <tcp_receive+0x38c>)
 800cadc:	4835      	ldr	r0, [pc, #212]	; (800cbb4 <tcp_receive+0x37c>)
 800cade:	f002 fc65 	bl	800f3ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cae2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800cae4:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800cae6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800cae8:	1a9b      	subs	r3, r3, r2
 800caea:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800caec:	f7fe fece 	bl	800b88c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800caf0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800caf2:	891a      	ldrh	r2, [r3, #8]
 800caf4:	b112      	cbz	r2, 800cafc <tcp_receive+0x2c4>
          recv_data = inseg.p;
 800caf6:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800caf8:	2300      	movs	r3, #0
 800cafa:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cafc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800cafe:	8998      	ldrh	r0, [r3, #12]
 800cb00:	f7fd fd44 	bl	800a58c <lwip_htons>
 800cb04:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800cb06:	bf42      	ittt	mi
 800cb08:	7cab      	ldrbmi	r3, [r5, #18]
 800cb0a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb0e:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800cb10:	8b63      	ldrh	r3, [r4, #26]
 800cb12:	07da      	lsls	r2, r3, #31
 800cb14:	f140 80b2 	bpl.w	800cc7c <tcp_receive+0x444>
 800cb18:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800cb1c:	f043 0302 	orr.w	r3, r3, #2
 800cb20:	e0ae      	b.n	800cc80 <tcp_receive+0x448>
        pcb->dupacks = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb28:	e6ff      	b.n	800c92a <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800cb2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800cb2c:	1a51      	subs	r1, r2, r1
 800cb2e:	2900      	cmp	r1, #0
 800cb30:	f300 8092 	bgt.w	800cc58 <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 800cb34:	8b61      	ldrh	r1, [r4, #26]
 800cb36:	0748      	lsls	r0, r1, #29
 800cb38:	d509      	bpl.n	800cb4e <tcp_receive+0x316>
        tcp_clear_flags(pcb, TF_INFR);
 800cb3a:	f021 0104 	bic.w	r1, r1, #4
 800cb3e:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800cb40:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800cb44:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800cb48:	2100      	movs	r1, #0
 800cb4a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cb4e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800cb52:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800cb54:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cb56:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800cb5a:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800cb5c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800cb60:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800cb62:	f04f 0100 	mov.w	r1, #0
 800cb66:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800cb6a:	d937      	bls.n	800cbdc <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800cb6c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800cb70:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800cb72:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800cb76:	4291      	cmp	r1, r2
 800cb78:	d926      	bls.n	800cbc8 <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cb7a:	8b61      	ldrh	r1, [r4, #26]
 800cb7c:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cb80:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800cb82:	bf14      	ite	ne
 800cb84:	2001      	movne	r0, #1
 800cb86:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800cb88:	fb11 f100 	smulbb	r1, r1, r0
 800cb8c:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800cb8e:	4299      	cmp	r1, r3
 800cb90:	bf94      	ite	ls
 800cb92:	1850      	addls	r0, r2, r1
 800cb94:	18d0      	addhi	r0, r2, r3
 800cb96:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d901      	bls.n	800cba0 <tcp_receive+0x368>
          TCP_WND_INC(pcb->cwnd, increase);
 800cb9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cba0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800cba4:	e01a      	b.n	800cbdc <tcp_receive+0x3a4>
 800cba6:	bf00      	nop
 800cba8:	2001404c 	.word	0x2001404c
 800cbac:	0801684e 	.word	0x0801684e
 800cbb0:	0801697c 	.word	0x0801697c
 800cbb4:	080144fe 	.word	0x080144fe
 800cbb8:	0801698c 	.word	0x0801698c
 800cbbc:	0801699b 	.word	0x0801699b
 800cbc0:	080169ab 	.word	0x080169ab
 800cbc4:	080169e2 	.word	0x080169e2
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cbc8:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800cbcc:	440b      	add	r3, r1
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	4299      	cmp	r1, r3
 800cbd2:	d82b      	bhi.n	800cc2c <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d92b      	bls.n	800cc30 <tcp_receive+0x3f8>
 800cbd8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cbdc:	4620      	mov	r0, r4
 800cbde:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800cbe2:	f7ff fdc9 	bl	800c778 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cbe6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800cbe8:	4602      	mov	r2, r0
 800cbea:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cbec:	4620      	mov	r0, r4
 800cbee:	f7ff fdc3 	bl	800c778 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800cbf2:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800cbf4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800cbf6:	fab2 f382 	clz	r3, r2
 800cbfa:	095b      	lsrs	r3, r3, #5
 800cbfc:	425b      	negs	r3, r3
 800cbfe:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800cc04:	b908      	cbnz	r0, 800cc0a <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 800cc06:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800cc0a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800cc0e:	8aa9      	ldrh	r1, [r5, #20]
 800cc10:	440b      	add	r3, r1
 800cc12:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800cc16:	8b63      	ldrh	r3, [r4, #26]
 800cc18:	051f      	lsls	r7, r3, #20
 800cc1a:	f57f ae86 	bpl.w	800c92a <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800cc1e:	b9c2      	cbnz	r2, 800cc52 <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800cc20:	b968      	cbnz	r0, 800cc3e <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800cc22:	8b63      	ldrh	r3, [r4, #26]
 800cc24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cc28:	8363      	strh	r3, [r4, #26]
 800cc2a:	e67e      	b.n	800c92a <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800cc2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800cc30:	1a9b      	subs	r3, r3, r2
 800cc32:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cc36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800cc38:	4413      	add	r3, r2
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	e7ac      	b.n	800cb98 <tcp_receive+0x360>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800cc3e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800cc40:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800cc42:	6858      	ldr	r0, [r3, #4]
 800cc44:	f7fd fca5 	bl	800a592 <lwip_htonl>
 800cc48:	1a30      	subs	r0, r6, r0
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	f73f ae6d 	bgt.w	800c92a <tcp_receive+0xf2>
 800cc50:	e7e7      	b.n	800cc22 <tcp_receive+0x3ea>
 800cc52:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800cc54:	68d3      	ldr	r3, [r2, #12]
 800cc56:	e7f4      	b.n	800cc42 <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f001 fbcd 	bl	800e3f8 <tcp_send_empty_ack>
 800cc5e:	e664      	b.n	800c92a <tcp_receive+0xf2>
        off -= p->len;
 800cc60:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800cc62:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800cc64:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800cc66:	b2bf      	uxth	r7, r7
        p = p->next;
 800cc68:	6836      	ldr	r6, [r6, #0]
 800cc6a:	e6c3      	b.n	800c9f4 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cc6c:	1a9b      	subs	r3, r3, r2
 800cc6e:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800cc70:	bfbe      	ittt	lt
 800cc72:	8b63      	ldrhlt	r3, [r4, #26]
 800cc74:	f043 0302 	orrlt.w	r3, r3, #2
 800cc78:	8363      	strhlt	r3, [r4, #26]
 800cc7a:	e6c7      	b.n	800ca0c <tcp_receive+0x1d4>
        tcp_ack(pcb);
 800cc7c:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800cc80:	8363      	strh	r3, [r4, #26]
}
 800cc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800cc84:	4620      	mov	r0, r4
}
 800cc86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800cc8a:	f001 bbb5 	b.w	800e3f8 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cc8e:	1a99      	subs	r1, r3, r2
 800cc90:	2900      	cmp	r1, #0
 800cc92:	db05      	blt.n	800cca0 <tcp_receive+0x468>
 800cc94:	3301      	adds	r3, #1
 800cc96:	1a9b      	subs	r3, r3, r2
 800cc98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800cc9a:	1a9b      	subs	r3, r3, r2
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	ddf0      	ble.n	800cc82 <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 800cca0:	8b63      	ldrh	r3, [r4, #26]
 800cca2:	e73b      	b.n	800cb1c <tcp_receive+0x2e4>

0800cca4 <tcp_input>:
{
 800cca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cca8:	4606      	mov	r6, r0
{
 800ccaa:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ccac:	b928      	cbnz	r0, 800ccba <tcp_input+0x16>
 800ccae:	4ba1      	ldr	r3, [pc, #644]	; (800cf34 <tcp_input+0x290>)
 800ccb0:	2283      	movs	r2, #131	; 0x83
 800ccb2:	49a1      	ldr	r1, [pc, #644]	; (800cf38 <tcp_input+0x294>)
 800ccb4:	48a1      	ldr	r0, [pc, #644]	; (800cf3c <tcp_input+0x298>)
 800ccb6:	f002 fb79 	bl	800f3ac <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800ccba:	6873      	ldr	r3, [r6, #4]
 800ccbc:	4da0      	ldr	r5, [pc, #640]	; (800cf40 <tcp_input+0x29c>)
 800ccbe:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800ccc0:	8973      	ldrh	r3, [r6, #10]
 800ccc2:	2b13      	cmp	r3, #19
 800ccc4:	f240 80a6 	bls.w	800ce14 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ccc8:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800cf64 <tcp_input+0x2c0>
 800cccc:	f8d8 1000 	ldr.w	r1, [r8]
 800ccd0:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800ccd4:	f7fd f815 	bl	8009d02 <ip4_addr_isbroadcast_u32>
 800ccd8:	4604      	mov	r4, r0
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	f040 809a 	bne.w	800ce14 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cce0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800cce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cce8:	2be0      	cmp	r3, #224	; 0xe0
 800ccea:	f000 8093 	beq.w	800ce14 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ccee:	68eb      	ldr	r3, [r5, #12]
 800ccf0:	8998      	ldrh	r0, [r3, #12]
 800ccf2:	f7fd fc4b 	bl	800a58c <lwip_htons>
 800ccf6:	0a81      	lsrs	r1, r0, #10
 800ccf8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ccfc:	2913      	cmp	r1, #19
 800ccfe:	f240 8089 	bls.w	800ce14 <tcp_input+0x170>
 800cd02:	8933      	ldrh	r3, [r6, #8]
 800cd04:	b28a      	uxth	r2, r1
 800cd06:	428b      	cmp	r3, r1
 800cd08:	f0c0 8084 	bcc.w	800ce14 <tcp_input+0x170>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cd0c:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800cd10:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800cd12:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cd14:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800cd16:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800cd18:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800cd1a:	d33d      	bcc.n	800cd98 <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cd1c:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800cd1e:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800cd20:	f7fe f9c0 	bl	800b0a4 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800cd24:	68ec      	ldr	r4, [r5, #12]
 800cd26:	8820      	ldrh	r0, [r4, #0]
 800cd28:	f7fd fc30 	bl	800a58c <lwip_htons>
 800cd2c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800cd2e:	68ec      	ldr	r4, [r5, #12]
 800cd30:	8860      	ldrh	r0, [r4, #2]
 800cd32:	f7fd fc2b 	bl	800a58c <lwip_htons>
 800cd36:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cd38:	68ec      	ldr	r4, [r5, #12]
 800cd3a:	6860      	ldr	r0, [r4, #4]
 800cd3c:	f7fd fc29 	bl	800a592 <lwip_htonl>
 800cd40:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cd42:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800cd44:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cd46:	68a0      	ldr	r0, [r4, #8]
 800cd48:	f7fd fc23 	bl	800a592 <lwip_htonl>
 800cd4c:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cd4e:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800cd50:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cd52:	89e0      	ldrh	r0, [r4, #14]
 800cd54:	f7fd fc1a 	bl	800a58c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800cd58:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800cd5a:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800cd5c:	8998      	ldrh	r0, [r3, #12]
 800cd5e:	f7fd fc15 	bl	800a58c <lwip_htons>
 800cd62:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800cd66:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800cd68:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800cd6a:	0783      	lsls	r3, r0, #30
 800cd6c:	d14d      	bne.n	800ce0a <tcp_input+0x166>
  tcplen = p->tot_len;
 800cd6e:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd70:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800cf68 <tcp_input+0x2c4>
  prev = NULL;
 800cd74:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cd76:	4b6f      	ldr	r3, [pc, #444]	; (800cf34 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd78:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cd7c:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800cf6c <tcp_input+0x2c8>
 800cd80:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800cf3c <tcp_input+0x298>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd84:	2c00      	cmp	r4, #0
 800cd86:	d14b      	bne.n	800ce20 <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd88:	4b6e      	ldr	r3, [pc, #440]	; (800cf44 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd8a:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 800cf34 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd8e:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd90:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800cf70 <tcp_input+0x2cc>
 800cd94:	4f69      	ldr	r7, [pc, #420]	; (800cf3c <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd96:	e141      	b.n	800d01c <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cd98:	6833      	ldr	r3, [r6, #0]
 800cd9a:	b92b      	cbnz	r3, 800cda8 <tcp_input+0x104>
 800cd9c:	4b65      	ldr	r3, [pc, #404]	; (800cf34 <tcp_input+0x290>)
 800cd9e:	22c2      	movs	r2, #194	; 0xc2
 800cda0:	4969      	ldr	r1, [pc, #420]	; (800cf48 <tcp_input+0x2a4>)
 800cda2:	4866      	ldr	r0, [pc, #408]	; (800cf3c <tcp_input+0x298>)
 800cda4:	f002 fb02 	bl	800f3ac <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800cda8:	2114      	movs	r1, #20
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7fe f97a 	bl	800b0a4 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800cdb0:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cdb2:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800cdba:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cdbc:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800cdc0:	f7fe f970 	bl	800b0a4 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800cdc4:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cdc6:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800cdc8:	8943      	ldrh	r3, [r0, #10]
 800cdca:	42bb      	cmp	r3, r7
 800cdcc:	d322      	bcc.n	800ce14 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cdce:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800cdd0:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cdd2:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800cdd4:	f7fe f966 	bl	800b0a4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cdd8:	8933      	ldrh	r3, [r6, #8]
 800cdda:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cddc:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800cdde:	eba4 0409 	sub.w	r4, r4, r9
 800cde2:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800cde4:	b12b      	cbz	r3, 800cdf2 <tcp_input+0x14e>
 800cde6:	4b53      	ldr	r3, [pc, #332]	; (800cf34 <tcp_input+0x290>)
 800cde8:	22df      	movs	r2, #223	; 0xdf
 800cdea:	4958      	ldr	r1, [pc, #352]	; (800cf4c <tcp_input+0x2a8>)
 800cdec:	4853      	ldr	r0, [pc, #332]	; (800cf3c <tcp_input+0x298>)
 800cdee:	f002 fadd 	bl	800f3ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cdf2:	6833      	ldr	r3, [r6, #0]
 800cdf4:	8932      	ldrh	r2, [r6, #8]
 800cdf6:	891b      	ldrh	r3, [r3, #8]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d093      	beq.n	800cd24 <tcp_input+0x80>
 800cdfc:	4b4d      	ldr	r3, [pc, #308]	; (800cf34 <tcp_input+0x290>)
 800cdfe:	22e0      	movs	r2, #224	; 0xe0
 800ce00:	4953      	ldr	r1, [pc, #332]	; (800cf50 <tcp_input+0x2ac>)
 800ce02:	484e      	ldr	r0, [pc, #312]	; (800cf3c <tcp_input+0x298>)
 800ce04:	f002 fad2 	bl	800f3ac <iprintf>
 800ce08:	e78c      	b.n	800cd24 <tcp_input+0x80>
    tcplen++;
 800ce0a:	1c53      	adds	r3, r2, #1
 800ce0c:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800ce0e:	429a      	cmp	r2, r3
    tcplen++;
 800ce10:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800ce12:	d9ad      	bls.n	800cd70 <tcp_input+0xcc>
  pbuf_free(p);
 800ce14:	4630      	mov	r0, r6
}
 800ce16:	b007      	add	sp, #28
 800ce18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800ce1c:	f7fe b976 	b.w	800b10c <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ce20:	7d22      	ldrb	r2, [r4, #20]
 800ce22:	b92a      	cbnz	r2, 800ce30 <tcp_input+0x18c>
 800ce24:	22fb      	movs	r2, #251	; 0xfb
 800ce26:	4659      	mov	r1, fp
 800ce28:	4650      	mov	r0, sl
 800ce2a:	f002 fabf 	bl	800f3ac <iprintf>
 800ce2e:	4b41      	ldr	r3, [pc, #260]	; (800cf34 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ce30:	7d22      	ldrb	r2, [r4, #20]
 800ce32:	2a0a      	cmp	r2, #10
 800ce34:	d105      	bne.n	800ce42 <tcp_input+0x19e>
 800ce36:	22fc      	movs	r2, #252	; 0xfc
 800ce38:	4946      	ldr	r1, [pc, #280]	; (800cf54 <tcp_input+0x2b0>)
 800ce3a:	4650      	mov	r0, sl
 800ce3c:	f002 fab6 	bl	800f3ac <iprintf>
 800ce40:	4b3c      	ldr	r3, [pc, #240]	; (800cf34 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ce42:	7d22      	ldrb	r2, [r4, #20]
 800ce44:	2a01      	cmp	r2, #1
 800ce46:	d105      	bne.n	800ce54 <tcp_input+0x1b0>
 800ce48:	22fd      	movs	r2, #253	; 0xfd
 800ce4a:	4943      	ldr	r1, [pc, #268]	; (800cf58 <tcp_input+0x2b4>)
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	f002 faad 	bl	800f3ac <iprintf>
 800ce52:	4b38      	ldr	r3, [pc, #224]	; (800cf34 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce54:	7a20      	ldrb	r0, [r4, #8]
 800ce56:	68e1      	ldr	r1, [r4, #12]
 800ce58:	b138      	cbz	r0, 800ce6a <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce5a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800ce5e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ce62:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce64:	b2d2      	uxtb	r2, r2
 800ce66:	4290      	cmp	r0, r2
 800ce68:	d161      	bne.n	800cf2e <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 800ce6a:	68ea      	ldr	r2, [r5, #12]
 800ce6c:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800ce70:	8810      	ldrh	r0, [r2, #0]
 800ce72:	4584      	cmp	ip, r0
 800ce74:	d15b      	bne.n	800cf2e <tcp_input+0x28a>
 800ce76:	8ae0      	ldrh	r0, [r4, #22]
 800ce78:	8852      	ldrh	r2, [r2, #2]
 800ce7a:	4290      	cmp	r0, r2
 800ce7c:	d157      	bne.n	800cf2e <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 800ce7e:	6860      	ldr	r0, [r4, #4]
 800ce80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ce84:	4290      	cmp	r0, r2
 800ce86:	d152      	bne.n	800cf2e <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ce88:	6820      	ldr	r0, [r4, #0]
 800ce8a:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800ce8e:	4290      	cmp	r0, r2
 800ce90:	d14d      	bne.n	800cf2e <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ce92:	42a1      	cmp	r1, r4
 800ce94:	f040 83eb 	bne.w	800d66e <tcp_input+0x9ca>
 800ce98:	4b26      	ldr	r3, [pc, #152]	; (800cf34 <tcp_input+0x290>)
 800ce9a:	f240 120d 	movw	r2, #269	; 0x10d
 800ce9e:	492f      	ldr	r1, [pc, #188]	; (800cf5c <tcp_input+0x2b8>)
 800cea0:	4826      	ldr	r0, [pc, #152]	; (800cf3c <tcp_input+0x298>)
 800cea2:	f002 fa83 	bl	800f3ac <iprintf>
      if (prev != NULL) {
 800cea6:	b137      	cbz	r7, 800ceb6 <tcp_input+0x212>
        prev->next = pcb->next;
 800cea8:	68e3      	ldr	r3, [r4, #12]
 800ceaa:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800ceac:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800ceb0:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800ceb4:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ceb6:	68e3      	ldr	r3, [r4, #12]
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	d106      	bne.n	800ceca <tcp_input+0x226>
 800cebc:	4b1d      	ldr	r3, [pc, #116]	; (800cf34 <tcp_input+0x290>)
 800cebe:	f240 1215 	movw	r2, #277	; 0x115
 800cec2:	4927      	ldr	r1, [pc, #156]	; (800cf60 <tcp_input+0x2bc>)
 800cec4:	481d      	ldr	r0, [pc, #116]	; (800cf3c <tcp_input+0x298>)
 800cec6:	f002 fa71 	bl	800f3ac <iprintf>
    inseg.len = p->tot_len;
 800ceca:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800cecc:	2300      	movs	r3, #0
    inseg.p = p;
 800cece:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800ced0:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800ced2:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800ced4:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800ced6:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800ced8:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800ceda:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800cede:	7f2b      	ldrb	r3, [r5, #28]
 800cee0:	071b      	lsls	r3, r3, #28
 800cee2:	d503      	bpl.n	800ceec <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 800cee4:	7b73      	ldrb	r3, [r6, #13]
 800cee6:	f043 0301 	orr.w	r3, r3, #1
 800ceea:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800ceec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f000 812e 	beq.w	800d150 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7ff f935 	bl	800c164 <tcp_process_refused_data>
 800cefa:	300d      	adds	r0, #13
 800cefc:	d007      	beq.n	800cf0e <tcp_input+0x26a>
 800cefe:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	f000 8125 	beq.w	800d150 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cf06:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 8121 	beq.w	800d150 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800cf0e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cf10:	b913      	cbnz	r3, 800cf18 <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800cf12:	4620      	mov	r0, r4
 800cf14:	f001 fa70 	bl	800e3f8 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800cf18:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800cf1a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    recv_data = NULL;
 800cf1c:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800cf20:	b110      	cbz	r0, 800cf28 <tcp_input+0x284>
      pbuf_free(inseg.p);
 800cf22:	f7fe f8f3 	bl	800b10c <pbuf_free>
      inseg.p = NULL;
 800cf26:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800cf28:	b007      	add	sp, #28
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf2e:	4627      	mov	r7, r4
 800cf30:	460c      	mov	r4, r1
 800cf32:	e727      	b.n	800cd84 <tcp_input+0xe0>
 800cf34:	0801684e 	.word	0x0801684e
 800cf38:	08016a01 	.word	0x08016a01
 800cf3c:	080144fe 	.word	0x080144fe
 800cf40:	2001405c 	.word	0x2001405c
 800cf44:	20014054 	.word	0x20014054
 800cf48:	08016a19 	.word	0x08016a19
 800cf4c:	08016a29 	.word	0x08016a29
 800cf50:	08016a35 	.word	0x08016a35
 800cf54:	08016a7b 	.word	0x08016a7b
 800cf58:	08016aa5 	.word	0x08016aa5
 800cf5c:	08016acc 	.word	0x08016acc
 800cf60:	08016af7 	.word	0x08016af7
 800cf64:	20010250 	.word	0x20010250
 800cf68:	20014048 	.word	0x20014048
 800cf6c:	08016a54 	.word	0x08016a54
 800cf70:	08016b21 	.word	0x08016b21
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf74:	7d23      	ldrb	r3, [r4, #20]
 800cf76:	2b0a      	cmp	r3, #10
 800cf78:	d006      	beq.n	800cf88 <tcp_input+0x2e4>
 800cf7a:	465b      	mov	r3, fp
 800cf7c:	f240 121f 	movw	r2, #287	; 0x11f
 800cf80:	4651      	mov	r1, sl
 800cf82:	4638      	mov	r0, r7
 800cf84:	f002 fa12 	bl	800f3ac <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf88:	7a22      	ldrb	r2, [r4, #8]
 800cf8a:	b13a      	cbz	r2, 800cf9c <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cf8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cf90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf94:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d13e      	bne.n	800d01a <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800cf9c:	68eb      	ldr	r3, [r5, #12]
 800cf9e:	8b20      	ldrh	r0, [r4, #24]
 800cfa0:	881a      	ldrh	r2, [r3, #0]
 800cfa2:	4290      	cmp	r0, r2
 800cfa4:	d139      	bne.n	800d01a <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800cfa6:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800cfa8:	8ae1      	ldrh	r1, [r4, #22]
 800cfaa:	4299      	cmp	r1, r3
 800cfac:	d135      	bne.n	800d01a <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800cfae:	6862      	ldr	r2, [r4, #4]
 800cfb0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d130      	bne.n	800d01a <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cfb8:	6822      	ldr	r2, [r4, #0]
 800cfba:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d12b      	bne.n	800d01a <tcp_input+0x376>
  if (flags & TCP_RST) {
 800cfc2:	7f2b      	ldrb	r3, [r5, #28]
 800cfc4:	075f      	lsls	r7, r3, #29
 800cfc6:	f53f af25 	bmi.w	800ce14 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 800cfca:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfcc:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 800cfce:	d514      	bpl.n	800cffa <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800cfd0:	6a2a      	ldr	r2, [r5, #32]
 800cfd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	d415      	bmi.n	800d004 <tcp_input+0x360>
 800cfd8:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800cfdc:	eba3 030c 	sub.w	r3, r3, ip
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dc0f      	bgt.n	800d004 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cfe4:	4b8a      	ldr	r3, [pc, #552]	; (800d210 <tcp_input+0x56c>)
 800cfe6:	443a      	add	r2, r7
 800cfe8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	4620      	mov	r0, r4
 800cff0:	3304      	adds	r3, #4
 800cff2:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cff4:	f001 f9ba 	bl	800e36c <tcp_rst>
 800cff8:	e70c      	b.n	800ce14 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 800cffa:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800cffc:	bf42      	ittt	mi
 800cffe:	4b85      	ldrmi	r3, [pc, #532]	; (800d214 <tcp_input+0x570>)
 800d000:	681b      	ldrmi	r3, [r3, #0]
 800d002:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800d004:	2f00      	cmp	r7, #0
 800d006:	f43f af05 	beq.w	800ce14 <tcp_input+0x170>
    tcp_ack_now(pcb);
 800d00a:	8b63      	ldrh	r3, [r4, #26]
 800d00c:	f043 0302 	orr.w	r3, r3, #2
 800d010:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800d012:	4620      	mov	r0, r4
 800d014:	f001 fa22 	bl	800e45c <tcp_output>
        pbuf_free(p);
 800d018:	e6fc      	b.n	800ce14 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d01a:	68e4      	ldr	r4, [r4, #12]
 800d01c:	2c00      	cmp	r4, #0
 800d01e:	d1a9      	bne.n	800cf74 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d020:	487d      	ldr	r0, [pc, #500]	; (800d218 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d022:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d026:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800d028:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d02a:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d02e:	4617      	mov	r7, r2
 800d030:	b98f      	cbnz	r7, 800d056 <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d032:	8988      	ldrh	r0, [r1, #12]
 800d034:	f7fd faaa 	bl	800a58c <lwip_htons>
 800d038:	0742      	lsls	r2, r0, #29
 800d03a:	f53f aeeb 	bmi.w	800ce14 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d03e:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d040:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800d042:	8818      	ldrh	r0, [r3, #0]
 800d044:	6a2a      	ldr	r2, [r5, #32]
 800d046:	9002      	str	r0, [sp, #8]
 800d048:	885b      	ldrh	r3, [r3, #2]
 800d04a:	440a      	add	r2, r1
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	4b70      	ldr	r3, [pc, #448]	; (800d210 <tcp_input+0x56c>)
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	3304      	adds	r3, #4
 800d054:	e308      	b.n	800d668 <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d056:	f897 c008 	ldrb.w	ip, [r7, #8]
 800d05a:	f1bc 0f00 	cmp.w	ip, #0
 800d05e:	d005      	beq.n	800d06c <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d060:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800d064:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d066:	b2db      	uxtb	r3, r3
 800d068:	459c      	cmp	ip, r3
 800d06a:	d10b      	bne.n	800d084 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800d06c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800d070:	8afb      	ldrh	r3, [r7, #22]
 800d072:	4563      	cmp	r3, ip
 800d074:	d106      	bne.n	800d084 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	4553      	cmp	r3, sl
 800d07a:	f000 82df 	beq.w	800d63c <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 82dc 	beq.w	800d63c <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d084:	463c      	mov	r4, r7
 800d086:	68ff      	ldr	r7, [r7, #12]
 800d088:	e7d2      	b.n	800d030 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800d08a:	0798      	lsls	r0, r3, #30
 800d08c:	f57f aec2 	bpl.w	800ce14 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 800d090:	7d78      	ldrb	r0, [r7, #21]
 800d092:	f7ff f9fd 	bl	800c490 <tcp_alloc>
    if (npcb == NULL) {
 800d096:	4604      	mov	r4, r0
 800d098:	b948      	cbnz	r0, 800d0ae <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d09a:	69bb      	ldr	r3, [r7, #24]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f43f aeb9 	beq.w	800ce14 <tcp_input+0x170>
 800d0a2:	4601      	mov	r1, r0
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0a8:	6938      	ldr	r0, [r7, #16]
 800d0aa:	4798      	blx	r3
 800d0ac:	e6b2      	b.n	800ce14 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d0ae:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800d0b2:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d0b4:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d0b6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d0ba:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800d0bc:	8afb      	ldrh	r3, [r7, #22]
 800d0be:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800d0c0:	7813      	ldrb	r3, [r2, #0]
 800d0c2:	7852      	ldrb	r2, [r2, #1]
 800d0c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d0c8:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800d0ce:	6a2b      	ldr	r3, [r5, #32]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d0d4:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d0d6:	f7ff fa6f 	bl	800c5b8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d0da:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800d0dc:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d0de:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800d0e0:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800d0e2:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d0e4:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d0e6:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800d0e8:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800d0ea:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800d0ec:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d0ee:	7a7b      	ldrb	r3, [r7, #9]
 800d0f0:	f003 030c 	and.w	r3, r3, #12
 800d0f4:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d0f6:	7a3b      	ldrb	r3, [r7, #8]
 800d0f8:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800d0fa:	f8d9 3000 	ldr.w	r3, [r9]
 800d0fe:	f8c9 4000 	str.w	r4, [r9]
 800d102:	60e3      	str	r3, [r4, #12]
 800d104:	f001 fc80 	bl	800ea08 <tcp_timer_needed>
 800d108:	4b44      	ldr	r3, [pc, #272]	; (800d21c <tcp_input+0x578>)
 800d10a:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800d10c:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800d10e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d110:	f7ff fabc 	bl	800c68c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d114:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d116:	1d22      	adds	r2, r4, #4
 800d118:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800d11a:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d11c:	4610      	mov	r0, r2
 800d11e:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800d120:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d124:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d128:	f7fc fc6c 	bl	8009a04 <ip4_route>
 800d12c:	9a05      	ldr	r2, [sp, #20]
 800d12e:	4601      	mov	r1, r0
 800d130:	4628      	mov	r0, r5
 800d132:	f7ff fa5b 	bl	800c5ec <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d136:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d138:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 ff9a 	bl	800e074 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800d140:	2800      	cmp	r0, #0
 800d142:	f43f af66 	beq.w	800d012 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800d146:	4651      	mov	r1, sl
 800d148:	4620      	mov	r0, r4
 800d14a:	f7ff f8cf 	bl	800c2ec <tcp_abandon>
      return;
 800d14e:	e661      	b.n	800ce14 <tcp_input+0x170>
  if (flags & TCP_RST) {
 800d150:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800d152:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 800d154:	0751      	lsls	r1, r2, #29
 800d156:	d537      	bpl.n	800d1c8 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800d158:	7d21      	ldrb	r1, [r4, #20]
 800d15a:	2902      	cmp	r1, #2
 800d15c:	d11e      	bne.n	800d19c <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800d15e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d160:	69ab      	ldr	r3, [r5, #24]
 800d162:	429a      	cmp	r2, r3
 800d164:	d107      	bne.n	800d176 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800d166:	7cab      	ldrb	r3, [r5, #18]
 800d168:	f043 0308 	orr.w	r3, r3, #8
 800d16c:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800d16e:	8b63      	ldrh	r3, [r4, #26]
 800d170:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800d174:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800d176:	7cab      	ldrb	r3, [r5, #18]
 800d178:	0718      	lsls	r0, r3, #28
 800d17a:	f140 81fe 	bpl.w	800d57a <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d17e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800d182:	b11b      	cbz	r3, 800d18c <tcp_input+0x4e8>
 800d184:	f06f 010d 	mvn.w	r1, #13
 800d188:	6920      	ldr	r0, [r4, #16]
 800d18a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d18c:	4621      	mov	r1, r4
 800d18e:	4824      	ldr	r0, [pc, #144]	; (800d220 <tcp_input+0x57c>)
 800d190:	f7fe fe9c 	bl	800becc <tcp_pcb_remove>
        tcp_free(pcb);
 800d194:	4620      	mov	r0, r4
 800d196:	f7fe faa7 	bl	800b6e8 <tcp_free>
 800d19a:	e6bd      	b.n	800cf18 <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800d19c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d19e:	6a2b      	ldr	r3, [r5, #32]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d007      	beq.n	800d1b4 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d1a4:	1a9b      	subs	r3, r3, r2
 800d1a6:	d4e6      	bmi.n	800d176 <tcp_input+0x4d2>
 800d1a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d1aa:	1a9b      	subs	r3, r3, r2
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	dce2      	bgt.n	800d176 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800d1b0:	8b63      	ldrh	r3, [r4, #26]
 800d1b2:	e010      	b.n	800d1d6 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800d1b4:	2900      	cmp	r1, #0
 800d1b6:	d1d6      	bne.n	800d166 <tcp_input+0x4c2>
 800d1b8:	4b1a      	ldr	r3, [pc, #104]	; (800d224 <tcp_input+0x580>)
 800d1ba:	f44f 724e 	mov.w	r2, #824	; 0x338
 800d1be:	491a      	ldr	r1, [pc, #104]	; (800d228 <tcp_input+0x584>)
 800d1c0:	481a      	ldr	r0, [pc, #104]	; (800d22c <tcp_input+0x588>)
 800d1c2:	f002 f8f3 	bl	800f3ac <iprintf>
 800d1c6:	e7ce      	b.n	800d166 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d1c8:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800d1ca:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800d1cc:	d506      	bpl.n	800d1dc <tcp_input+0x538>
 800d1ce:	7d22      	ldrb	r2, [r4, #20]
 800d1d0:	3a02      	subs	r2, #2
 800d1d2:	2a01      	cmp	r2, #1
 800d1d4:	d902      	bls.n	800d1dc <tcp_input+0x538>
        tcp_ack_now(pcb);
 800d1d6:	f043 0302 	orr.w	r3, r3, #2
 800d1da:	e7cb      	b.n	800d174 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800d1dc:	06db      	lsls	r3, r3, #27
  tcp_parseopt(pcb);
 800d1de:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800d1e0:	bf5e      	ittt	pl
 800d1e2:	4b0c      	ldrpl	r3, [pc, #48]	; (800d214 <tcp_input+0x570>)
 800d1e4:	681b      	ldrpl	r3, [r3, #0]
 800d1e6:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800d1ee:	f7ff fa4d 	bl	800c68c <tcp_parseopt>
  switch (pcb->state) {
 800d1f2:	7d23      	ldrb	r3, [r4, #20]
 800d1f4:	3b02      	subs	r3, #2
 800d1f6:	2b07      	cmp	r3, #7
 800d1f8:	d8bd      	bhi.n	800d176 <tcp_input+0x4d2>
 800d1fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d1fe:	0019      	.short	0x0019
 800d200:	011200a6 	.word	0x011200a6
 800d204:	015f0117 	.word	0x015f0117
 800d208:	018b0112 	.word	0x018b0112
 800d20c:	01a9      	.short	0x01a9
 800d20e:	bf00      	nop
 800d210:	20010260 	.word	0x20010260
 800d214:	2001404c 	.word	0x2001404c
 800d218:	20014044 	.word	0x20014044
 800d21c:	20014051 	.word	0x20014051
 800d220:	20014048 	.word	0x20014048
 800d224:	0801684e 	.word	0x0801684e
 800d228:	08016b4e 	.word	0x08016b4e
 800d22c:	080144fe 	.word	0x080144fe
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800d230:	7f2b      	ldrb	r3, [r5, #28]
 800d232:	f003 0212 	and.w	r2, r3, #18
 800d236:	2a12      	cmp	r2, #18
 800d238:	d16a      	bne.n	800d310 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800d23a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d23c:	69a9      	ldr	r1, [r5, #24]
 800d23e:	3201      	adds	r2, #1
 800d240:	428a      	cmp	r2, r1
 800d242:	d165      	bne.n	800d310 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800d244:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800d246:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800d248:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800d24a:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d24c:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d24e:	8e66      	ldrh	r6, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800d250:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d252:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800d254:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800d256:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800d258:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800d25a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d25e:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d262:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800d264:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d266:	4610      	mov	r0, r2
 800d268:	9205      	str	r2, [sp, #20]
 800d26a:	f7fc fbcb 	bl	8009a04 <ip4_route>
 800d26e:	9a05      	ldr	r2, [sp, #20]
 800d270:	4601      	mov	r1, r0
 800d272:	4630      	mov	r0, r6
 800d274:	f7ff f9ba 	bl	800c5ec <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d278:	f241 131c 	movw	r3, #4380	; 0x111c
 800d27c:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800d27e:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d280:	0081      	lsls	r1, r0, #2
 800d282:	429a      	cmp	r2, r3
 800d284:	4616      	mov	r6, r2
 800d286:	bf38      	it	cc
 800d288:	461e      	movcc	r6, r3
 800d28a:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800d28e:	d933      	bls.n	800d2f8 <tcp_input+0x654>
 800d290:	b28b      	uxth	r3, r1
 800d292:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800d296:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d29a:	b933      	cbnz	r3, 800d2aa <tcp_input+0x606>
 800d29c:	4b94      	ldr	r3, [pc, #592]	; (800d4f0 <tcp_input+0x84c>)
 800d29e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800d2a2:	4994      	ldr	r1, [pc, #592]	; (800d4f4 <tcp_input+0x850>)
 800d2a4:	4894      	ldr	r0, [pc, #592]	; (800d4f8 <tcp_input+0x854>)
 800d2a6:	f002 f881 	bl	800f3ac <iprintf>
        --pcb->snd_queuelen;
 800d2aa:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800d2ae:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800d2b6:	bb1e      	cbnz	r6, 800d300 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800d2b8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800d2ba:	b936      	cbnz	r6, 800d2ca <tcp_input+0x626>
 800d2bc:	4b8c      	ldr	r3, [pc, #560]	; (800d4f0 <tcp_input+0x84c>)
 800d2be:	f44f 725d 	mov.w	r2, #884	; 0x374
 800d2c2:	498e      	ldr	r1, [pc, #568]	; (800d4fc <tcp_input+0x858>)
 800d2c4:	488c      	ldr	r0, [pc, #560]	; (800d4f8 <tcp_input+0x854>)
 800d2c6:	f002 f871 	bl	800f3ac <iprintf>
          pcb->unsent = rseg->next;
 800d2ca:	6833      	ldr	r3, [r6, #0]
 800d2cc:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f7fe fb50 	bl	800b974 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800d2d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d2d6:	b9b3      	cbnz	r3, 800d306 <tcp_input+0x662>
          pcb->rtime = -1;
 800d2d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d2dc:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800d2de:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f43f af64 	beq.w	800d1b0 <tcp_input+0x50c>
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	4621      	mov	r1, r4
 800d2ec:	6920      	ldr	r0, [r4, #16]
 800d2ee:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d2f0:	300d      	adds	r0, #13
 800d2f2:	f47f af5d 	bne.w	800d1b0 <tcp_input+0x50c>
 800d2f6:	e60f      	b.n	800cf18 <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	bf88      	it	hi
 800d2fc:	b293      	uxthhi	r3, r2
 800d2fe:	e7c8      	b.n	800d292 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800d300:	6833      	ldr	r3, [r6, #0]
 800d302:	6723      	str	r3, [r4, #112]	; 0x70
 800d304:	e7e3      	b.n	800d2ce <tcp_input+0x62a>
          pcb->rtime = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800d30a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d30e:	e7e6      	b.n	800d2de <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800d310:	06df      	lsls	r7, r3, #27
 800d312:	f57f af30 	bpl.w	800d176 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d316:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d318:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800d31a:	8818      	ldrh	r0, [r3, #0]
 800d31c:	6a2a      	ldr	r2, [r5, #32]
 800d31e:	9002      	str	r0, [sp, #8]
 800d320:	4620      	mov	r0, r4
 800d322:	885b      	ldrh	r3, [r3, #2]
 800d324:	440a      	add	r2, r1
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	4b75      	ldr	r3, [pc, #468]	; (800d500 <tcp_input+0x85c>)
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	3304      	adds	r3, #4
 800d32e:	69a9      	ldr	r1, [r5, #24]
 800d330:	f001 f81c 	bl	800e36c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d334:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d338:	2b05      	cmp	r3, #5
 800d33a:	f63f af1c 	bhi.w	800d176 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800d33e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800d340:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800d342:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d344:	f001 fa50 	bl	800e7e8 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800d348:	e715      	b.n	800d176 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800d34a:	7f2b      	ldrb	r3, [r5, #28]
 800d34c:	06de      	lsls	r6, r3, #27
 800d34e:	d55b      	bpl.n	800d408 <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d350:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d352:	69a9      	ldr	r1, [r5, #24]
 800d354:	43db      	mvns	r3, r3
 800d356:	42cb      	cmn	r3, r1
 800d358:	d447      	bmi.n	800d3ea <tcp_input+0x746>
 800d35a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d35c:	1acb      	subs	r3, r1, r3
 800d35e:	2b00      	cmp	r3, #0
 800d360:	dc43      	bgt.n	800d3ea <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800d362:	2304      	movs	r3, #4
 800d364:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800d366:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d368:	b91b      	cbnz	r3, 800d372 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff f83c 	bl	800c3e8 <tcp_abort>
            goto aborted;
 800d370:	e5d2      	b.n	800cf18 <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d372:	699b      	ldr	r3, [r3, #24]
 800d374:	b933      	cbnz	r3, 800d384 <tcp_input+0x6e0>
 800d376:	4b5e      	ldr	r3, [pc, #376]	; (800d4f0 <tcp_input+0x84c>)
 800d378:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d37c:	4961      	ldr	r1, [pc, #388]	; (800d504 <tcp_input+0x860>)
 800d37e:	485e      	ldr	r0, [pc, #376]	; (800d4f8 <tcp_input+0x854>)
 800d380:	f002 f814 	bl	800f3ac <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d384:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d0ee      	beq.n	800d36a <tcp_input+0x6c6>
 800d38c:	2200      	movs	r2, #0
 800d38e:	4621      	mov	r1, r4
 800d390:	6920      	ldr	r0, [r4, #16]
 800d392:	4798      	blx	r3
          if (err != ERR_OK) {
 800d394:	b118      	cbz	r0, 800d39e <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800d396:	300d      	adds	r0, #13
 800d398:	f43f adbe 	beq.w	800cf18 <tcp_input+0x274>
 800d39c:	e7e5      	b.n	800d36a <tcp_input+0x6c6>
          tcp_receive(pcb);
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f7ff fa4a 	bl	800c838 <tcp_receive>
          if (recv_acked != 0) {
 800d3a4:	4a58      	ldr	r2, [pc, #352]	; (800d508 <tcp_input+0x864>)
 800d3a6:	8a93      	ldrh	r3, [r2, #20]
 800d3a8:	b10b      	cbz	r3, 800d3ae <tcp_input+0x70a>
            recv_acked--;
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3ae:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800d3b0:	f241 131c 	movw	r3, #4380	; 0x111c
 800d3b4:	0041      	lsls	r1, r0, #1
 800d3b6:	0086      	lsls	r6, r0, #2
 800d3b8:	4299      	cmp	r1, r3
 800d3ba:	460f      	mov	r7, r1
 800d3bc:	bf38      	it	cc
 800d3be:	461f      	movcc	r7, r3
 800d3c0:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800d3c4:	d90d      	bls.n	800d3e2 <tcp_input+0x73e>
 800d3c6:	b2b3      	uxth	r3, r6
 800d3c8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d3cc:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d3ce:	0699      	lsls	r1, r3, #26
 800d3d0:	f57f aed1 	bpl.w	800d176 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800d3d4:	8b63      	ldrh	r3, [r4, #26]
 800d3d6:	f043 0302 	orr.w	r3, r3, #2
 800d3da:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800d3dc:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800d3de:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800d3e0:	e6c9      	b.n	800d176 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d3e2:	4299      	cmp	r1, r3
 800d3e4:	bf88      	it	hi
 800d3e6:	b28b      	uxthhi	r3, r1
 800d3e8:	e7ee      	b.n	800d3c8 <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d3ea:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d3ec:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800d3ee:	881e      	ldrh	r6, [r3, #0]
 800d3f0:	6a2a      	ldr	r2, [r5, #32]
 800d3f2:	9602      	str	r6, [sp, #8]
 800d3f4:	885b      	ldrh	r3, [r3, #2]
 800d3f6:	4402      	add	r2, r0
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	4b40      	ldr	r3, [pc, #256]	; (800d500 <tcp_input+0x85c>)
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	3304      	adds	r3, #4
 800d402:	f000 ffb3 	bl	800e36c <tcp_rst>
    if (err != ERR_ABRT) {
 800d406:	e6b6      	b.n	800d176 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d408:	0798      	lsls	r0, r3, #30
 800d40a:	f57f aeb4 	bpl.w	800d176 <tcp_input+0x4d2>
 800d40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d410:	6a2a      	ldr	r2, [r5, #32]
 800d412:	3b01      	subs	r3, #1
 800d414:	4293      	cmp	r3, r2
 800d416:	f47f aeae 	bne.w	800d176 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 ff32 	bl	800e284 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800d420:	e6a9      	b.n	800d176 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800d422:	4620      	mov	r0, r4
 800d424:	f7ff fa08 	bl	800c838 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d428:	7cab      	ldrb	r3, [r5, #18]
 800d42a:	e7d0      	b.n	800d3ce <tcp_input+0x72a>
      tcp_receive(pcb);
 800d42c:	4620      	mov	r0, r4
 800d42e:	f7ff fa03 	bl	800c838 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d432:	7cab      	ldrb	r3, [r5, #18]
 800d434:	f013 0f20 	tst.w	r3, #32
 800d438:	7f2b      	ldrb	r3, [r5, #28]
 800d43a:	d031      	beq.n	800d4a0 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d43c:	f013 0f10 	tst.w	r3, #16
 800d440:	8b63      	ldrh	r3, [r4, #26]
 800d442:	d028      	beq.n	800d496 <tcp_input+0x7f2>
 800d444:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d446:	69aa      	ldr	r2, [r5, #24]
 800d448:	4291      	cmp	r1, r2
 800d44a:	d124      	bne.n	800d496 <tcp_input+0x7f2>
 800d44c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d44e:	bb12      	cbnz	r2, 800d496 <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800d450:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800d454:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800d456:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800d458:	f7fe fb16 	bl	800ba88 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d45c:	f8d9 3000 	ldr.w	r3, [r9]
 800d460:	429c      	cmp	r4, r3
 800d462:	d10a      	bne.n	800d47a <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800d464:	68e3      	ldr	r3, [r4, #12]
 800d466:	f8c9 3000 	str.w	r3, [r9]
 800d46a:	e008      	b.n	800d47e <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	4294      	cmp	r4, r2
 800d470:	d102      	bne.n	800d478 <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800d472:	68e2      	ldr	r2, [r4, #12]
 800d474:	60da      	str	r2, [r3, #12]
 800d476:	e002      	b.n	800d47e <tcp_input+0x7da>
 800d478:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d1f6      	bne.n	800d46c <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800d47e:	4b23      	ldr	r3, [pc, #140]	; (800d50c <tcp_input+0x868>)
 800d480:	2201      	movs	r2, #1
 800d482:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d484:	230a      	movs	r3, #10
 800d486:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d488:	4b21      	ldr	r3, [pc, #132]	; (800d510 <tcp_input+0x86c>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	601c      	str	r4, [r3, #0]
 800d48e:	60e2      	str	r2, [r4, #12]
 800d490:	f001 faba 	bl	800ea08 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800d494:	e66f      	b.n	800d176 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800d496:	f043 0302 	orr.w	r3, r3, #2
 800d49a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800d49c:	2308      	movs	r3, #8
 800d49e:	e79e      	b.n	800d3de <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d4a0:	06da      	lsls	r2, r3, #27
 800d4a2:	f57f ae68 	bpl.w	800d176 <tcp_input+0x4d2>
 800d4a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d4a8:	69ab      	ldr	r3, [r5, #24]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	f47f ae63 	bne.w	800d176 <tcp_input+0x4d2>
 800d4b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f47f ae5f 	bne.w	800d176 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800d4b8:	2306      	movs	r3, #6
 800d4ba:	e790      	b.n	800d3de <tcp_input+0x73a>
      tcp_receive(pcb);
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f7ff f9bb 	bl	800c838 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d4c2:	7cab      	ldrb	r3, [r5, #18]
 800d4c4:	069b      	lsls	r3, r3, #26
 800d4c6:	f57f ae56 	bpl.w	800d176 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800d4ca:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800d4cc:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800d4ce:	f043 0302 	orr.w	r3, r3, #2
 800d4d2:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800d4d4:	f7fe fad8 	bl	800ba88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d4d8:	f8d9 3000 	ldr.w	r3, [r9]
 800d4dc:	429c      	cmp	r4, r3
 800d4de:	d0c1      	beq.n	800d464 <tcp_input+0x7c0>
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d0cc      	beq.n	800d47e <tcp_input+0x7da>
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	4294      	cmp	r4, r2
 800d4e8:	d0c3      	beq.n	800d472 <tcp_input+0x7ce>
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	e7f8      	b.n	800d4e0 <tcp_input+0x83c>
 800d4ee:	bf00      	nop
 800d4f0:	0801684e 	.word	0x0801684e
 800d4f4:	08016b6e 	.word	0x08016b6e
 800d4f8:	080144fe 	.word	0x080144fe
 800d4fc:	08016b84 	.word	0x08016b84
 800d500:	20010260 	.word	0x20010260
 800d504:	08016b97 	.word	0x08016b97
 800d508:	2001405c 	.word	0x2001405c
 800d50c:	20014051 	.word	0x20014051
 800d510:	20014054 	.word	0x20014054
      tcp_receive(pcb);
 800d514:	4620      	mov	r0, r4
 800d516:	f7ff f98f 	bl	800c838 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d51a:	7f2b      	ldrb	r3, [r5, #28]
 800d51c:	06df      	lsls	r7, r3, #27
 800d51e:	f57f ae2a 	bpl.w	800d176 <tcp_input+0x4d2>
 800d522:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d524:	69ab      	ldr	r3, [r5, #24]
 800d526:	429a      	cmp	r2, r3
 800d528:	f47f ae25 	bne.w	800d176 <tcp_input+0x4d2>
 800d52c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f47f ae21 	bne.w	800d176 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800d534:	4620      	mov	r0, r4
 800d536:	f7fe faa7 	bl	800ba88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d53a:	f8d9 3000 	ldr.w	r3, [r9]
 800d53e:	429c      	cmp	r4, r3
 800d540:	d090      	beq.n	800d464 <tcp_input+0x7c0>
 800d542:	2b00      	cmp	r3, #0
 800d544:	d09b      	beq.n	800d47e <tcp_input+0x7da>
 800d546:	68da      	ldr	r2, [r3, #12]
 800d548:	4294      	cmp	r4, r2
 800d54a:	d092      	beq.n	800d472 <tcp_input+0x7ce>
 800d54c:	4613      	mov	r3, r2
 800d54e:	e7f8      	b.n	800d542 <tcp_input+0x89e>
      tcp_receive(pcb);
 800d550:	4620      	mov	r0, r4
 800d552:	f7ff f971 	bl	800c838 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d556:	7f2b      	ldrb	r3, [r5, #28]
 800d558:	06de      	lsls	r6, r3, #27
 800d55a:	f57f ae0c 	bpl.w	800d176 <tcp_input+0x4d2>
 800d55e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d560:	69ab      	ldr	r3, [r5, #24]
 800d562:	429a      	cmp	r2, r3
 800d564:	f47f ae07 	bne.w	800d176 <tcp_input+0x4d2>
 800d568:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f47f ae03 	bne.w	800d176 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800d570:	7cab      	ldrb	r3, [r5, #18]
 800d572:	f043 0310 	orr.w	r3, r3, #16
 800d576:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800d578:	e5fd      	b.n	800d176 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800d57a:	8aaa      	ldrh	r2, [r5, #20]
 800d57c:	b11a      	cbz	r2, 800d586 <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d57e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d580:	b9db      	cbnz	r3, 800d5ba <tcp_input+0x916>
          recv_acked = 0;
 800d582:	2300      	movs	r3, #0
 800d584:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800d586:	4620      	mov	r0, r4
 800d588:	f7ff f8ca 	bl	800c720 <tcp_input_delayed_close>
 800d58c:	2800      	cmp	r0, #0
 800d58e:	f47f acc3 	bne.w	800cf18 <tcp_input+0x274>
        if (recv_data != NULL) {
 800d592:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d594:	b323      	cbz	r3, 800d5e0 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d596:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d598:	b133      	cbz	r3, 800d5a8 <tcp_input+0x904>
 800d59a:	4b37      	ldr	r3, [pc, #220]	; (800d678 <tcp_input+0x9d4>)
 800d59c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d5a0:	4936      	ldr	r1, [pc, #216]	; (800d67c <tcp_input+0x9d8>)
 800d5a2:	4837      	ldr	r0, [pc, #220]	; (800d680 <tcp_input+0x9dc>)
 800d5a4:	f001 ff02 	bl	800f3ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d5a8:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800d5aa:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 800d5ac:	f013 0310 	ands.w	r3, r3, #16
 800d5b0:	d009      	beq.n	800d5c6 <tcp_input+0x922>
            pbuf_free(recv_data);
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7fd fdaa 	bl	800b10c <pbuf_free>
 800d5b8:	e6d7      	b.n	800d36a <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d5ba:	4621      	mov	r1, r4
 800d5bc:	6920      	ldr	r0, [r4, #16]
 800d5be:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d5c0:	300d      	adds	r0, #13
 800d5c2:	d1de      	bne.n	800d582 <tcp_input+0x8de>
 800d5c4:	e4a8      	b.n	800cf18 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d5c6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800d5ca:	b1f6      	cbz	r6, 800d60a <tcp_input+0x966>
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	6920      	ldr	r0, [r4, #16]
 800d5d0:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800d5d2:	f110 0f0d 	cmn.w	r0, #13
 800d5d6:	f43f ac9f 	beq.w	800cf18 <tcp_input+0x274>
          if (err != ERR_OK) {
 800d5da:	b108      	cbz	r0, 800d5e0 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800d5dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d5de:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800d5e0:	7cab      	ldrb	r3, [r5, #18]
 800d5e2:	0699      	lsls	r1, r3, #26
 800d5e4:	d505      	bpl.n	800d5f2 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800d5e6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d5e8:	b1ab      	cbz	r3, 800d616 <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d5ea:	7b5a      	ldrb	r2, [r3, #13]
 800d5ec:	f042 0220 	orr.w	r2, r2, #32
 800d5f0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d5f2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d5f4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800d5f6:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 800d5f8:	f7ff f892 	bl	800c720 <tcp_input_delayed_close>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f47f ac8b 	bne.w	800cf18 <tcp_input+0x274>
        tcp_output(pcb);
 800d602:	4620      	mov	r0, r4
 800d604:	f000 ff2a 	bl	800e45c <tcp_output>
 800d608:	e486      	b.n	800cf18 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d60a:	4633      	mov	r3, r6
 800d60c:	4621      	mov	r1, r4
 800d60e:	4630      	mov	r0, r6
 800d610:	f7fe fd84 	bl	800c11c <tcp_recv_null>
 800d614:	e7dd      	b.n	800d5d2 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d616:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800d618:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800d61c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d620:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800d622:	bf1c      	itt	ne
 800d624:	3301      	addne	r3, #1
 800d626:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d628:	2e00      	cmp	r6, #0
 800d62a:	d0e2      	beq.n	800d5f2 <tcp_input+0x94e>
 800d62c:	2300      	movs	r3, #0
 800d62e:	4621      	mov	r1, r4
 800d630:	6920      	ldr	r0, [r4, #16]
 800d632:	461a      	mov	r2, r3
 800d634:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800d636:	300d      	adds	r0, #13
 800d638:	d1db      	bne.n	800d5f2 <tcp_input+0x94e>
 800d63a:	e46d      	b.n	800cf18 <tcp_input+0x274>
      if (prev != NULL) {
 800d63c:	b11c      	cbz	r4, 800d646 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d63e:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d640:	6007      	str	r7, [r0, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d642:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d644:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 800d646:	7f2b      	ldrb	r3, [r5, #28]
 800d648:	075c      	lsls	r4, r3, #29
 800d64a:	f53f abe3 	bmi.w	800ce14 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 800d64e:	f013 0a10 	ands.w	sl, r3, #16
 800d652:	f43f ad1a 	beq.w	800d08a <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d656:	880b      	ldrh	r3, [r1, #0]
 800d658:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800d65a:	6a2a      	ldr	r2, [r5, #32]
 800d65c:	e9cd c301 	strd	ip, r3, [sp, #4]
 800d660:	4b08      	ldr	r3, [pc, #32]	; (800d684 <tcp_input+0x9e0>)
 800d662:	4402      	add	r2, r0
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	3304      	adds	r3, #4
 800d668:	69a9      	ldr	r1, [r5, #24]
 800d66a:	4638      	mov	r0, r7
 800d66c:	e4c2      	b.n	800cff4 <tcp_input+0x350>
      if (prev != NULL) {
 800d66e:	2f00      	cmp	r7, #0
 800d670:	f47f ac1a 	bne.w	800cea8 <tcp_input+0x204>
 800d674:	e429      	b.n	800ceca <tcp_input+0x226>
 800d676:	bf00      	nop
 800d678:	0801684e 	.word	0x0801684e
 800d67c:	08016bb5 	.word	0x08016bb5
 800d680:	080144fe 	.word	0x080144fe
 800d684:	20010260 	.word	0x20010260

0800d688 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d688:	4a02      	ldr	r2, [pc, #8]	; (800d694 <tcp_trigger_input_pcb_close+0xc>)
 800d68a:	7c93      	ldrb	r3, [r2, #18]
 800d68c:	f043 0310 	orr.w	r3, r3, #16
 800d690:	7493      	strb	r3, [r2, #18]
}
 800d692:	4770      	bx	lr
 800d694:	2001405c 	.word	0x2001405c

0800d698 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d698:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d69a:	4604      	mov	r4, r0
 800d69c:	b930      	cbnz	r0, 800d6ac <tcp_output_segment_busy+0x14>
 800d69e:	4b06      	ldr	r3, [pc, #24]	; (800d6b8 <tcp_output_segment_busy+0x20>)
 800d6a0:	f240 529a 	movw	r2, #1434	; 0x59a
 800d6a4:	4905      	ldr	r1, [pc, #20]	; (800d6bc <tcp_output_segment_busy+0x24>)
 800d6a6:	4806      	ldr	r0, [pc, #24]	; (800d6c0 <tcp_output_segment_busy+0x28>)
 800d6a8:	f001 fe80 	bl	800f3ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d6ac:	6863      	ldr	r3, [r4, #4]
 800d6ae:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800d6b0:	3801      	subs	r0, #1
 800d6b2:	bf18      	it	ne
 800d6b4:	2001      	movne	r0, #1
 800d6b6:	bd10      	pop	{r4, pc}
 800d6b8:	08016bcf 	.word	0x08016bcf
 800d6bc:	08016c45 	.word	0x08016c45
 800d6c0:	080144fe 	.word	0x080144fe

0800d6c4 <tcp_pbuf_prealloc>:
{
 800d6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6c8:	9d08      	ldr	r5, [sp, #32]
 800d6ca:	4680      	mov	r8, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	4617      	mov	r7, r2
 800d6d0:	461e      	mov	r6, r3
 800d6d2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d6d6:	b92d      	cbnz	r5, 800d6e4 <tcp_pbuf_prealloc+0x20>
 800d6d8:	4b1c      	ldr	r3, [pc, #112]	; (800d74c <tcp_pbuf_prealloc+0x88>)
 800d6da:	22e9      	movs	r2, #233	; 0xe9
 800d6dc:	491c      	ldr	r1, [pc, #112]	; (800d750 <tcp_pbuf_prealloc+0x8c>)
 800d6de:	481d      	ldr	r0, [pc, #116]	; (800d754 <tcp_pbuf_prealloc+0x90>)
 800d6e0:	f001 fe64 	bl	800f3ac <iprintf>
  if (length < max_length) {
 800d6e4:	42bc      	cmp	r4, r7
 800d6e6:	d22e      	bcs.n	800d746 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d6e8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d6ec:	079a      	lsls	r2, r3, #30
 800d6ee:	d409      	bmi.n	800d704 <tcp_pbuf_prealloc+0x40>
 800d6f0:	8b6b      	ldrh	r3, [r5, #26]
 800d6f2:	065b      	lsls	r3, r3, #25
 800d6f4:	d427      	bmi.n	800d746 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800d6f6:	f1b9 0f00 	cmp.w	r9, #0
 800d6fa:	d003      	beq.n	800d704 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800d6fc:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d6fe:	b90b      	cbnz	r3, 800d704 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800d700:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d702:	b303      	cbz	r3, 800d746 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d704:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800d708:	f025 0103 	bic.w	r1, r5, #3
 800d70c:	42b9      	cmp	r1, r7
 800d70e:	460a      	mov	r2, r1
 800d710:	bf28      	it	cs
 800d712:	463a      	movcs	r2, r7
 800d714:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d716:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d71a:	4640      	mov	r0, r8
 800d71c:	f7fd fd5e 	bl	800b1dc <pbuf_alloc>
  if (p == NULL) {
 800d720:	4605      	mov	r5, r0
 800d722:	b168      	cbz	r0, 800d740 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d724:	6803      	ldr	r3, [r0, #0]
 800d726:	b133      	cbz	r3, 800d736 <tcp_pbuf_prealloc+0x72>
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <tcp_pbuf_prealloc+0x88>)
 800d72a:	f240 120b 	movw	r2, #267	; 0x10b
 800d72e:	490a      	ldr	r1, [pc, #40]	; (800d758 <tcp_pbuf_prealloc+0x94>)
 800d730:	4808      	ldr	r0, [pc, #32]	; (800d754 <tcp_pbuf_prealloc+0x90>)
 800d732:	f001 fe3b 	bl	800f3ac <iprintf>
  *oversize = p->len - length;
 800d736:	896b      	ldrh	r3, [r5, #10]
 800d738:	1b1b      	subs	r3, r3, r4
 800d73a:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800d73c:	812c      	strh	r4, [r5, #8]
 800d73e:	816c      	strh	r4, [r5, #10]
}
 800d740:	4628      	mov	r0, r5
 800d742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d746:	4621      	mov	r1, r4
 800d748:	e7e5      	b.n	800d716 <tcp_pbuf_prealloc+0x52>
 800d74a:	bf00      	nop
 800d74c:	08016bcf 	.word	0x08016bcf
 800d750:	08016c6a 	.word	0x08016c6a
 800d754:	080144fe 	.word	0x080144fe
 800d758:	08016c89 	.word	0x08016c89

0800d75c <tcp_create_segment>:
{
 800d75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d760:	460e      	mov	r6, r1
 800d762:	4690      	mov	r8, r2
 800d764:	4699      	mov	r9, r3
 800d766:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d76a:	4607      	mov	r7, r0
 800d76c:	b928      	cbnz	r0, 800d77a <tcp_create_segment+0x1e>
 800d76e:	4b2f      	ldr	r3, [pc, #188]	; (800d82c <tcp_create_segment+0xd0>)
 800d770:	22a3      	movs	r2, #163	; 0xa3
 800d772:	492f      	ldr	r1, [pc, #188]	; (800d830 <tcp_create_segment+0xd4>)
 800d774:	482f      	ldr	r0, [pc, #188]	; (800d834 <tcp_create_segment+0xd8>)
 800d776:	f001 fe19 	bl	800f3ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d77a:	b92e      	cbnz	r6, 800d788 <tcp_create_segment+0x2c>
 800d77c:	4b2b      	ldr	r3, [pc, #172]	; (800d82c <tcp_create_segment+0xd0>)
 800d77e:	22a4      	movs	r2, #164	; 0xa4
 800d780:	492d      	ldr	r1, [pc, #180]	; (800d838 <tcp_create_segment+0xdc>)
 800d782:	482c      	ldr	r0, [pc, #176]	; (800d834 <tcp_create_segment+0xd8>)
 800d784:	f001 fe12 	bl	800f3ac <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d788:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d78c:	2003      	movs	r0, #3
 800d78e:	f7fd fa2d 	bl	800abec <memp_malloc>
 800d792:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d794:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d798:	b928      	cbnz	r0, 800d7a6 <tcp_create_segment+0x4a>
    pbuf_free(p);
 800d79a:	4630      	mov	r0, r6
 800d79c:	f7fd fcb6 	bl	800b10c <pbuf_free>
}
 800d7a0:	4620      	mov	r0, r4
 800d7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800d7a6:	2300      	movs	r3, #0
  seg->flags = optflags;
 800d7a8:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d7ac:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800d7b0:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d7b4:	8933      	ldrh	r3, [r6, #8]
 800d7b6:	42ab      	cmp	r3, r5
 800d7b8:	d205      	bcs.n	800d7c6 <tcp_create_segment+0x6a>
 800d7ba:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <tcp_create_segment+0xd0>)
 800d7bc:	22b0      	movs	r2, #176	; 0xb0
 800d7be:	491f      	ldr	r1, [pc, #124]	; (800d83c <tcp_create_segment+0xe0>)
 800d7c0:	481c      	ldr	r0, [pc, #112]	; (800d834 <tcp_create_segment+0xd8>)
 800d7c2:	f001 fdf3 	bl	800f3ac <iprintf>
  seg->len = p->tot_len - optlen;
 800d7c6:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800d7cc:	eba3 030a 	sub.w	r3, r3, sl
 800d7d0:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d7d2:	f7fd fc63 	bl	800b09c <pbuf_add_header>
 800d7d6:	4606      	mov	r6, r0
 800d7d8:	b120      	cbz	r0, 800d7e4 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800d7da:	4620      	mov	r0, r4
    return NULL;
 800d7dc:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800d7de:	f7fe f8c9 	bl	800b974 <tcp_seg_free>
    return NULL;
 800d7e2:	e7dd      	b.n	800d7a0 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d7e4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d7e6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d7e8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d7ea:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d7ee:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d7f2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d7f6:	f7fc fec9 	bl	800a58c <lwip_htons>
 800d7fa:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d7fe:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800d802:	8b38      	ldrh	r0, [r7, #24]
 800d804:	f7fc fec2 	bl	800a58c <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d808:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d80a:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d80e:	4648      	mov	r0, r9
 800d810:	f7fc febf 	bl	800a592 <lwip_htonl>
 800d814:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d816:	ea45 0008 	orr.w	r0, r5, r8
 800d81a:	68e7      	ldr	r7, [r4, #12]
 800d81c:	f7fc feb6 	bl	800a58c <lwip_htons>
  seg->tcphdr->urgp = 0;
 800d820:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d822:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800d824:	749e      	strb	r6, [r3, #18]
 800d826:	74de      	strb	r6, [r3, #19]
  return seg;
 800d828:	e7ba      	b.n	800d7a0 <tcp_create_segment+0x44>
 800d82a:	bf00      	nop
 800d82c:	08016bcf 	.word	0x08016bcf
 800d830:	08016c9d 	.word	0x08016c9d
 800d834:	080144fe 	.word	0x080144fe
 800d838:	08016cbd 	.word	0x08016cbd
 800d83c:	08016cde 	.word	0x08016cde

0800d840 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d840:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d846:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d848:	4606      	mov	r6, r0
 800d84a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d84c:	2022      	movs	r0, #34	; 0x22
 800d84e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d852:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d854:	f7fd fcc2 	bl	800b1dc <pbuf_alloc>
  if (p != NULL) {
 800d858:	4605      	mov	r5, r0
 800d85a:	b348      	cbz	r0, 800d8b0 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d85c:	8943      	ldrh	r3, [r0, #10]
 800d85e:	2b13      	cmp	r3, #19
 800d860:	d806      	bhi.n	800d870 <tcp_output_alloc_header_common.constprop.0+0x30>
 800d862:	4b15      	ldr	r3, [pc, #84]	; (800d8b8 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800d864:	f240 7223 	movw	r2, #1827	; 0x723
 800d868:	4914      	ldr	r1, [pc, #80]	; (800d8bc <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800d86a:	4815      	ldr	r0, [pc, #84]	; (800d8c0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800d86c:	f001 fd9e 	bl	800f3ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d870:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800d872:	4640      	mov	r0, r8
 800d874:	f7fc fe8a 	bl	800a58c <lwip_htons>
 800d878:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d87a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800d87e:	f7fc fe85 	bl	800a58c <lwip_htons>
    tcphdr->seqno = seqno_be;
 800d882:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800d884:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800d886:	4630      	mov	r0, r6
 800d888:	f7fc fe83 	bl	800a592 <lwip_htonl>
 800d88c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d88e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d892:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800d896:	f7fc fe79 	bl	800a58c <lwip_htons>
 800d89a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d89c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800d8a0:	f7fc fe74 	bl	800a58c <lwip_htons>
    tcphdr->chksum = 0;
 800d8a4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800d8a6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800d8a8:	7423      	strb	r3, [r4, #16]
 800d8aa:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800d8ac:	74a3      	strb	r3, [r4, #18]
 800d8ae:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8b6:	bf00      	nop
 800d8b8:	08016bcf 	.word	0x08016bcf
 800d8bc:	08016cf3 	.word	0x08016cf3
 800d8c0:	080144fe 	.word	0x080144fe

0800d8c4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d8c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d8c6:	460d      	mov	r5, r1
 800d8c8:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d8ca:	4604      	mov	r4, r0
 800d8cc:	b930      	cbnz	r0, 800d8dc <tcp_output_alloc_header.constprop.0+0x18>
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <tcp_output_alloc_header.constprop.0+0x40>)
 800d8d0:	f240 7242 	movw	r2, #1858	; 0x742
 800d8d4:	490c      	ldr	r1, [pc, #48]	; (800d908 <tcp_output_alloc_header.constprop.0+0x44>)
 800d8d6:	480d      	ldr	r0, [pc, #52]	; (800d90c <tcp_output_alloc_header.constprop.0+0x48>)
 800d8d8:	f001 fd68 	bl	800f3ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d8dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800d8de:	4632      	mov	r2, r6
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	9302      	str	r3, [sp, #8]
 800d8e4:	2310      	movs	r3, #16
 800d8e6:	9301      	str	r3, [sp, #4]
 800d8e8:	8b23      	ldrh	r3, [r4, #24]
 800d8ea:	9300      	str	r3, [sp, #0]
 800d8ec:	8ae3      	ldrh	r3, [r4, #22]
 800d8ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d8f0:	f7ff ffa6 	bl	800d840 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d8f4:	b118      	cbz	r0, 800d8fe <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d8f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8fa:	4413      	add	r3, r2
 800d8fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800d8fe:	b004      	add	sp, #16
 800d900:	bd70      	pop	{r4, r5, r6, pc}
 800d902:	bf00      	nop
 800d904:	08016bcf 	.word	0x08016bcf
 800d908:	08016d21 	.word	0x08016d21
 800d90c:	080144fe 	.word	0x080144fe

0800d910 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d910:	b930      	cbnz	r0, 800d920 <tcp_output_fill_options.constprop.0+0x10>
 800d912:	4b04      	ldr	r3, [pc, #16]	; (800d924 <tcp_output_fill_options.constprop.0+0x14>)
 800d914:	f240 7256 	movw	r2, #1878	; 0x756
 800d918:	4903      	ldr	r1, [pc, #12]	; (800d928 <tcp_output_fill_options.constprop.0+0x18>)
 800d91a:	4804      	ldr	r0, [pc, #16]	; (800d92c <tcp_output_fill_options.constprop.0+0x1c>)
 800d91c:	f001 bd46 	b.w	800f3ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	08016bcf 	.word	0x08016bcf
 800d928:	08016d46 	.word	0x08016d46
 800d92c:	080144fe 	.word	0x080144fe

0800d930 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d932:	4604      	mov	r4, r0
 800d934:	b085      	sub	sp, #20
 800d936:	4617      	mov	r7, r2
 800d938:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d93a:	460d      	mov	r5, r1
 800d93c:	b931      	cbnz	r1, 800d94c <tcp_output_control_segment+0x1c>
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <tcp_output_control_segment+0x64>)
 800d940:	f240 7287 	movw	r2, #1927	; 0x787
 800d944:	4914      	ldr	r1, [pc, #80]	; (800d998 <tcp_output_control_segment+0x68>)
 800d946:	4815      	ldr	r0, [pc, #84]	; (800d99c <tcp_output_control_segment+0x6c>)
 800d948:	f001 fd30 	bl	800f3ac <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d94c:	b164      	cbz	r4, 800d968 <tcp_output_control_segment+0x38>
 800d94e:	7a20      	ldrb	r0, [r4, #8]
 800d950:	b150      	cbz	r0, 800d968 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800d952:	f7fd fb21 	bl	800af98 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800d956:	b968      	cbnz	r0, 800d974 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800d958:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d95c:	4628      	mov	r0, r5
 800d95e:	f7fd fbd5 	bl	800b10c <pbuf_free>
  return err;
}
 800d962:	4620      	mov	r0, r4
 800d964:	b005      	add	sp, #20
 800d966:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800d968:	4630      	mov	r0, r6
 800d96a:	f7fc f84b 	bl	8009a04 <ip4_route>
  if (netif == NULL) {
 800d96e:	2800      	cmp	r0, #0
 800d970:	d0f2      	beq.n	800d958 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800d972:	b164      	cbz	r4, 800d98e <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800d974:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800d976:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d978:	2206      	movs	r2, #6
 800d97a:	9002      	str	r0, [sp, #8]
 800d97c:	4639      	mov	r1, r7
 800d97e:	4628      	mov	r0, r5
 800d980:	e9cd 4200 	strd	r4, r2, [sp]
 800d984:	4632      	mov	r2, r6
 800d986:	f7fc f9ab 	bl	8009ce0 <ip4_output_if>
 800d98a:	4604      	mov	r4, r0
 800d98c:	e7e6      	b.n	800d95c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800d98e:	23ff      	movs	r3, #255	; 0xff
 800d990:	e7f2      	b.n	800d978 <tcp_output_control_segment+0x48>
 800d992:	bf00      	nop
 800d994:	08016bcf 	.word	0x08016bcf
 800d998:	08016d6c 	.word	0x08016d6c
 800d99c:	080144fe 	.word	0x080144fe

0800d9a0 <tcp_write>:
{
 800d9a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a4:	ed2d 8b02 	vpush	{d8}
 800d9a8:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9aa:	4604      	mov	r4, r0
{
 800d9ac:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800d9ae:	2300      	movs	r3, #0
{
 800d9b0:	9107      	str	r1, [sp, #28]
 800d9b2:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800d9b4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9b8:	b968      	cbnz	r0, 800d9d6 <tcp_write+0x36>
 800d9ba:	4baa      	ldr	r3, [pc, #680]	; (800dc64 <tcp_write+0x2c4>)
 800d9bc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d9c0:	49a9      	ldr	r1, [pc, #676]	; (800dc68 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d9c2:	48aa      	ldr	r0, [pc, #680]	; (800dc6c <tcp_write+0x2cc>)
 800d9c4:	f001 fcf2 	bl	800f3ac <iprintf>
 800d9c8:	f06f 000f 	mvn.w	r0, #15
}
 800d9cc:	b00f      	add	sp, #60	; 0x3c
 800d9ce:	ecbd 8b02 	vpop	{d8}
 800d9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d9d6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d9da:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800d9dc:	085b      	lsrs	r3, r3, #1
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	bf28      	it	cs
 800d9e2:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	bf08      	it	eq
 800d9e8:	4613      	moveq	r3, r2
 800d9ea:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	b923      	cbnz	r3, 800d9fa <tcp_write+0x5a>
 800d9f0:	4b9c      	ldr	r3, [pc, #624]	; (800dc64 <tcp_write+0x2c4>)
 800d9f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800d9f6:	499e      	ldr	r1, [pc, #632]	; (800dc70 <tcp_write+0x2d0>)
 800d9f8:	e7e3      	b.n	800d9c2 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800d9fa:	7d03      	ldrb	r3, [r0, #20]
 800d9fc:	2b07      	cmp	r3, #7
 800d9fe:	d003      	beq.n	800da08 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800da00:	3b02      	subs	r3, #2
 800da02:	2b02      	cmp	r3, #2
 800da04:	f200 8259 	bhi.w	800deba <tcp_write+0x51a>
  } else if (len == 0) {
 800da08:	9b04      	ldr	r3, [sp, #16]
 800da0a:	b1db      	cbz	r3, 800da44 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800da0c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800da10:	9a04      	ldr	r2, [sp, #16]
 800da12:	4293      	cmp	r3, r2
 800da14:	d206      	bcs.n	800da24 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da16:	8b63      	ldrh	r3, [r4, #26]
 800da18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da1c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800da1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da22:	e7d3      	b.n	800d9cc <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800da24:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800da28:	2a0f      	cmp	r2, #15
 800da2a:	d8f4      	bhi.n	800da16 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800da2c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800da2e:	b302      	cbz	r2, 800da72 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800da30:	b943      	cbnz	r3, 800da44 <tcp_write+0xa4>
 800da32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800da34:	b933      	cbnz	r3, 800da44 <tcp_write+0xa4>
 800da36:	4b8b      	ldr	r3, [pc, #556]	; (800dc64 <tcp_write+0x2c4>)
 800da38:	f240 1255 	movw	r2, #341	; 0x155
 800da3c:	498d      	ldr	r1, [pc, #564]	; (800dc74 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800da3e:	488b      	ldr	r0, [pc, #556]	; (800dc6c <tcp_write+0x2cc>)
 800da40:	f001 fcb4 	bl	800f3ac <iprintf>
  queuelen = pcb->snd_queuelen;
 800da44:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800da48:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800da4a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800da4c:	b9de      	cbnz	r6, 800da86 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800da4e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800da52:	2f00      	cmp	r7, #0
 800da54:	f000 81ba 	beq.w	800ddcc <tcp_write+0x42c>
 800da58:	4b82      	ldr	r3, [pc, #520]	; (800dc64 <tcp_write+0x2c4>)
 800da5a:	f240 224a 	movw	r2, #586	; 0x24a
 800da5e:	4986      	ldr	r1, [pc, #536]	; (800dc78 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800da60:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800da62:	4882      	ldr	r0, [pc, #520]	; (800dc6c <tcp_write+0x2cc>)
  struct pbuf *concat_p = NULL;
 800da64:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800da66:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800da68:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800da6a:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800da6c:	f001 fc9e 	bl	800f3ac <iprintf>
 800da70:	e088      	b.n	800db84 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800da72:	b913      	cbnz	r3, 800da7a <tcp_write+0xda>
 800da74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800da76:	2b00      	cmp	r3, #0
 800da78:	d0e4      	beq.n	800da44 <tcp_write+0xa4>
 800da7a:	4b7a      	ldr	r3, [pc, #488]	; (800dc64 <tcp_write+0x2c4>)
 800da7c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800da80:	497e      	ldr	r1, [pc, #504]	; (800dc7c <tcp_write+0x2dc>)
 800da82:	e7dc      	b.n	800da3e <tcp_write+0x9e>
 800da84:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da86:	f8d6 a000 	ldr.w	sl, [r6]
 800da8a:	46b0      	mov	r8, r6
 800da8c:	f1ba 0f00 	cmp.w	sl, #0
 800da90:	d1f8      	bne.n	800da84 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800da92:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800da94:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800da96:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800da98:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800da9a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800da9e:	442b      	add	r3, r5
 800daa0:	429a      	cmp	r2, r3
 800daa2:	da06      	bge.n	800dab2 <tcp_write+0x112>
 800daa4:	4b6f      	ldr	r3, [pc, #444]	; (800dc64 <tcp_write+0x2c4>)
 800daa6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800daaa:	4975      	ldr	r1, [pc, #468]	; (800dc80 <tcp_write+0x2e0>)
 800daac:	486f      	ldr	r0, [pc, #444]	; (800dc6c <tcp_write+0x2cc>)
 800daae:	f001 fc7d 	bl	800f3ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dab2:	8937      	ldrh	r7, [r6, #8]
 800dab4:	9b06      	ldr	r3, [sp, #24]
 800dab6:	1bdf      	subs	r7, r3, r7
 800dab8:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800daba:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800dabe:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800dac0:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800dac4:	2d00      	cmp	r5, #0
 800dac6:	d066      	beq.n	800db96 <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dac8:	42bd      	cmp	r5, r7
 800daca:	d906      	bls.n	800dada <tcp_write+0x13a>
 800dacc:	4b65      	ldr	r3, [pc, #404]	; (800dc64 <tcp_write+0x2c4>)
 800dace:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800dad2:	496c      	ldr	r1, [pc, #432]	; (800dc84 <tcp_write+0x2e4>)
 800dad4:	4865      	ldr	r0, [pc, #404]	; (800dc6c <tcp_write+0x2cc>)
 800dad6:	f001 fc69 	bl	800f3ac <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dada:	9d04      	ldr	r5, [sp, #16]
 800dadc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800dae0:	429d      	cmp	r5, r3
 800dae2:	bf28      	it	cs
 800dae4:	461d      	movcs	r5, r3
 800dae6:	42bd      	cmp	r5, r7
 800dae8:	bf28      	it	cs
 800daea:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800daec:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800daee:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800daf0:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800daf2:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800daf4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800daf8:	b153      	cbz	r3, 800db10 <tcp_write+0x170>
 800dafa:	9b04      	ldr	r3, [sp, #16]
 800dafc:	42ab      	cmp	r3, r5
 800dafe:	f000 816a 	beq.w	800ddd6 <tcp_write+0x436>
 800db02:	4b58      	ldr	r3, [pc, #352]	; (800dc64 <tcp_write+0x2c4>)
 800db04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db08:	495f      	ldr	r1, [pc, #380]	; (800dc88 <tcp_write+0x2e8>)
 800db0a:	4858      	ldr	r0, [pc, #352]	; (800dc6c <tcp_write+0x2cc>)
 800db0c:	f001 fc4e 	bl	800f3ac <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800db10:	9b04      	ldr	r3, [sp, #16]
 800db12:	429d      	cmp	r5, r3
 800db14:	f080 815f 	bcs.w	800ddd6 <tcp_write+0x436>
 800db18:	2f00      	cmp	r7, #0
 800db1a:	f000 8154 	beq.w	800ddc6 <tcp_write+0x426>
 800db1e:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800db22:	f1b9 0f00 	cmp.w	r9, #0
 800db26:	f000 814f 	beq.w	800ddc8 <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800db2a:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db2e:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800db30:	45b9      	cmp	r9, r7
 800db32:	bfa8      	it	ge
 800db34:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db36:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800db38:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db3c:	d52d      	bpl.n	800db9a <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800db3e:	2301      	movs	r3, #1
 800db40:	463a      	mov	r2, r7
 800db42:	4631      	mov	r1, r6
 800db44:	2000      	movs	r0, #0
 800db46:	9302      	str	r3, [sp, #8]
 800db48:	9b08      	ldr	r3, [sp, #32]
 800db4a:	e9cd 4300 	strd	r4, r3, [sp]
 800db4e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800db52:	f7ff fdb7 	bl	800d6c4 <tcp_pbuf_prealloc>
 800db56:	4683      	mov	fp, r0
 800db58:	2800      	cmp	r0, #0
 800db5a:	f000 81ab 	beq.w	800deb4 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800db5e:	9b07      	ldr	r3, [sp, #28]
 800db60:	4632      	mov	r2, r6
 800db62:	6840      	ldr	r0, [r0, #4]
 800db64:	1959      	adds	r1, r3, r5
 800db66:	f001 fc0b 	bl	800f380 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800db6a:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800db6c:	f7fd fc0a 	bl	800b384 <pbuf_clen>
 800db70:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800db72:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800db76:	4403      	add	r3, r0
 800db78:	b29b      	uxth	r3, r3
 800db7a:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800db7c:	19af      	adds	r7, r5, r6
 800db7e:	46da      	mov	sl, fp
 800db80:	4646      	mov	r6, r8
 800db82:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db84:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800db86:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db8a:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800db8e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db92:	930a      	str	r3, [sp, #40]	; 0x28
 800db94:	e0e6      	b.n	800dd64 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800db96:	462e      	mov	r6, r5
 800db98:	e7ba      	b.n	800db10 <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800db9a:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800db9e:	465a      	mov	r2, fp
 800dba0:	f8db b000 	ldr.w	fp, [fp]
 800dba4:	f1bb 0f00 	cmp.w	fp, #0
 800dba8:	d1f9      	bne.n	800db9e <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbaa:	7b13      	ldrb	r3, [r2, #12]
 800dbac:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800dbb0:	d10f      	bne.n	800dbd2 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dbb2:	8951      	ldrh	r1, [r2, #10]
 800dbb4:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbb6:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dbb8:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbba:	429a      	cmp	r2, r3
 800dbbc:	d109      	bne.n	800dbd2 <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dbbe:	b135      	cbz	r5, 800dbce <tcp_write+0x22e>
 800dbc0:	4b28      	ldr	r3, [pc, #160]	; (800dc64 <tcp_write+0x2c4>)
 800dbc2:	f240 2231 	movw	r2, #561	; 0x231
 800dbc6:	4931      	ldr	r1, [pc, #196]	; (800dc8c <tcp_write+0x2ec>)
 800dbc8:	4828      	ldr	r0, [pc, #160]	; (800dc6c <tcp_write+0x2cc>)
 800dbca:	f001 fbef 	bl	800f3ac <iprintf>
          extendlen = seglen;
 800dbce:	46b1      	mov	r9, r6
 800dbd0:	e7d4      	b.n	800db7c <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	f7fd fb00 	bl	800b1dc <pbuf_alloc>
 800dbdc:	4683      	mov	fp, r0
 800dbde:	2800      	cmp	r0, #0
 800dbe0:	f000 8168 	beq.w	800deb4 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800dbe4:	9b07      	ldr	r3, [sp, #28]
 800dbe6:	442b      	add	r3, r5
 800dbe8:	6043      	str	r3, [r0, #4]
 800dbea:	e7bf      	b.n	800db6c <tcp_write+0x1cc>
    u16_t left = len - pos;
 800dbec:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800dbee:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800dbf0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	4293      	cmp	r3, r2
 800dbf6:	bf28      	it	cs
 800dbf8:	4613      	movcs	r3, r2
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dc00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d046      	beq.n	800dc94 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800dc06:	fabb f38b 	clz	r3, fp
 800dc0a:	ee18 1a10 	vmov	r1, s16
 800dc0e:	2036      	movs	r0, #54	; 0x36
 800dc10:	095b      	lsrs	r3, r3, #5
 800dc12:	9302      	str	r3, [sp, #8]
 800dc14:	9b08      	ldr	r3, [sp, #32]
 800dc16:	e9cd 4300 	strd	r4, r3, [sp]
 800dc1a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800dc1e:	f7ff fd51 	bl	800d6c4 <tcp_pbuf_prealloc>
 800dc22:	4606      	mov	r6, r0
 800dc24:	2800      	cmp	r0, #0
 800dc26:	d056      	beq.n	800dcd6 <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dc28:	8943      	ldrh	r3, [r0, #10]
 800dc2a:	ee18 2a10 	vmov	r2, s16
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d206      	bcs.n	800dc40 <tcp_write+0x2a0>
 800dc32:	4b0c      	ldr	r3, [pc, #48]	; (800dc64 <tcp_write+0x2c4>)
 800dc34:	f240 2266 	movw	r2, #614	; 0x266
 800dc38:	4915      	ldr	r1, [pc, #84]	; (800dc90 <tcp_write+0x2f0>)
 800dc3a:	480c      	ldr	r0, [pc, #48]	; (800dc6c <tcp_write+0x2cc>)
 800dc3c:	f001 fbb6 	bl	800f3ac <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800dc40:	9b07      	ldr	r3, [sp, #28]
 800dc42:	ee18 2a10 	vmov	r2, s16
 800dc46:	6870      	ldr	r0, [r6, #4]
 800dc48:	19d9      	adds	r1, r3, r7
 800dc4a:	f001 fb99 	bl	800f380 <memcpy>
    queuelen += pbuf_clen(p);
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f7fd fb98 	bl	800b384 <pbuf_clen>
 800dc54:	9b05      	ldr	r3, [sp, #20]
 800dc56:	4403      	add	r3, r0
 800dc58:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800dc5a:	2b10      	cmp	r3, #16
    queuelen += pbuf_clen(p);
 800dc5c:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800dc5e:	d963      	bls.n	800dd28 <tcp_write+0x388>
      pbuf_free(p);
 800dc60:	4630      	mov	r0, r6
 800dc62:	e036      	b.n	800dcd2 <tcp_write+0x332>
 800dc64:	08016bcf 	.word	0x08016bcf
 800dc68:	08016d95 	.word	0x08016d95
 800dc6c:	080144fe 	.word	0x080144fe
 800dc70:	08016dac 	.word	0x08016dac
 800dc74:	08016ddd 	.word	0x08016ddd
 800dc78:	08016ec7 	.word	0x08016ec7
 800dc7c:	08016e17 	.word	0x08016e17
 800dc80:	08016e49 	.word	0x08016e49
 800dc84:	08016e60 	.word	0x08016e60
 800dc88:	08016e80 	.word	0x08016e80
 800dc8c:	08016e9e 	.word	0x08016e9e
 800dc90:	08016ef6 	.word	0x08016ef6
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dc94:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800dc98:	b133      	cbz	r3, 800dca8 <tcp_write+0x308>
 800dc9a:	4b89      	ldr	r3, [pc, #548]	; (800dec0 <tcp_write+0x520>)
 800dc9c:	f240 2271 	movw	r2, #625	; 0x271
 800dca0:	4988      	ldr	r1, [pc, #544]	; (800dec4 <tcp_write+0x524>)
 800dca2:	4889      	ldr	r0, [pc, #548]	; (800dec8 <tcp_write+0x528>)
 800dca4:	f001 fb82 	bl	800f3ac <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dca8:	2201      	movs	r2, #1
 800dcaa:	ee18 1a10 	vmov	r1, s16
 800dcae:	2036      	movs	r0, #54	; 0x36
 800dcb0:	f7fd fa94 	bl	800b1dc <pbuf_alloc>
 800dcb4:	b178      	cbz	r0, 800dcd6 <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800dcb6:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dcb8:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800dcba:	900b      	str	r0, [sp, #44]	; 0x2c
 800dcbc:	443a      	add	r2, r7
 800dcbe:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dcc0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dcc4:	2036      	movs	r0, #54	; 0x36
 800dcc6:	f7fd fa89 	bl	800b1dc <pbuf_alloc>
 800dcca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dccc:	4606      	mov	r6, r0
 800dcce:	bb38      	cbnz	r0, 800dd20 <tcp_write+0x380>
        pbuf_free(p2);
 800dcd0:	4618      	mov	r0, r3
      pbuf_free(p);
 800dcd2:	f7fd fa1b 	bl	800b10c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcd6:	8b63      	ldrh	r3, [r4, #26]
 800dcd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcdc:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800dcde:	f1ba 0f00 	cmp.w	sl, #0
 800dce2:	d002      	beq.n	800dcea <tcp_write+0x34a>
    pbuf_free(concat_p);
 800dce4:	4650      	mov	r0, sl
 800dce6:	f7fd fa11 	bl	800b10c <pbuf_free>
  if (queue != NULL) {
 800dcea:	f1bb 0f00 	cmp.w	fp, #0
 800dcee:	d002      	beq.n	800dcf6 <tcp_write+0x356>
    tcp_segs_free(queue);
 800dcf0:	4658      	mov	r0, fp
 800dcf2:	f7fd fe4d 	bl	800b990 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800dcf6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f43f ae8f 	beq.w	800da1e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800dd00:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f47f ae8b 	bne.w	800da1e <tcp_write+0x7e>
 800dd08:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f47f ae87 	bne.w	800da1e <tcp_write+0x7e>
 800dd10:	4b6b      	ldr	r3, [pc, #428]	; (800dec0 <tcp_write+0x520>)
 800dd12:	f240 3227 	movw	r2, #807	; 0x327
 800dd16:	496d      	ldr	r1, [pc, #436]	; (800decc <tcp_write+0x52c>)
 800dd18:	486b      	ldr	r0, [pc, #428]	; (800dec8 <tcp_write+0x528>)
 800dd1a:	f001 fb47 	bl	800f3ac <iprintf>
 800dd1e:	e67e      	b.n	800da1e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800dd20:	4619      	mov	r1, r3
 800dd22:	f7fd fb53 	bl	800b3cc <pbuf_cat>
 800dd26:	e792      	b.n	800dc4e <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800dd28:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	4631      	mov	r1, r6
 800dd2e:	4620      	mov	r0, r4
 800dd30:	443b      	add	r3, r7
 800dd32:	9200      	str	r2, [sp, #0]
 800dd34:	f7ff fd12 	bl	800d75c <tcp_create_segment>
 800dd38:	4606      	mov	r6, r0
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d0cb      	beq.n	800dcd6 <tcp_write+0x336>
    if (queue == NULL) {
 800dd3e:	f1bb 0f00 	cmp.w	fp, #0
 800dd42:	d03e      	beq.n	800ddc2 <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd46:	b933      	cbnz	r3, 800dd56 <tcp_write+0x3b6>
 800dd48:	4b5d      	ldr	r3, [pc, #372]	; (800dec0 <tcp_write+0x520>)
 800dd4a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dd4e:	4960      	ldr	r1, [pc, #384]	; (800ded0 <tcp_write+0x530>)
 800dd50:	485d      	ldr	r0, [pc, #372]	; (800dec8 <tcp_write+0x528>)
 800dd52:	f001 fb2b 	bl	800f3ac <iprintf>
      prev_seg->next = seg;
 800dd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd58:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800dd5a:	ee18 3a10 	vmov	r3, s16
 800dd5e:	9609      	str	r6, [sp, #36]	; 0x24
 800dd60:	441f      	add	r7, r3
 800dd62:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800dd64:	9b04      	ldr	r3, [sp, #16]
 800dd66:	429f      	cmp	r7, r3
 800dd68:	f4ff af40 	bcc.w	800dbec <tcp_write+0x24c>
 800dd6c:	4657      	mov	r7, sl
 800dd6e:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800dd70:	b14d      	cbz	r5, 800dd86 <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800dd72:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800dd76:	f1bb 0f00 	cmp.w	fp, #0
 800dd7a:	d12f      	bne.n	800dddc <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800dd7c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800dd80:	441d      	add	r5, r3
 800dd82:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800dd86:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800dd8a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800dd8e:	2f00      	cmp	r7, #0
 800dd90:	d03d      	beq.n	800de0e <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dd92:	f1b8 0f00 	cmp.w	r8, #0
 800dd96:	d106      	bne.n	800dda6 <tcp_write+0x406>
 800dd98:	4b49      	ldr	r3, [pc, #292]	; (800dec0 <tcp_write+0x520>)
 800dd9a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800dd9e:	494d      	ldr	r1, [pc, #308]	; (800ded4 <tcp_write+0x534>)
 800dda0:	4849      	ldr	r0, [pc, #292]	; (800dec8 <tcp_write+0x528>)
 800dda2:	f001 fb03 	bl	800f3ac <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800dda6:	4639      	mov	r1, r7
 800dda8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ddac:	f7fd fb0e 	bl	800b3cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ddb0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ddb4:	893a      	ldrh	r2, [r7, #8]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800ddbc:	f8c8 a000 	str.w	sl, [r8]
 800ddc0:	e04d      	b.n	800de5e <tcp_write+0x4be>
 800ddc2:	4683      	mov	fp, r0
 800ddc4:	e7c9      	b.n	800dd5a <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800ddc6:	46b9      	mov	r9, r7
 800ddc8:	462f      	mov	r7, r5
 800ddca:	e6db      	b.n	800db84 <tcp_write+0x1e4>
 800ddcc:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800ddce:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ddd0:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800ddd2:	46ba      	mov	sl, r7
 800ddd4:	e6d6      	b.n	800db84 <tcp_write+0x1e4>
 800ddd6:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800ddd8:	46b9      	mov	r9, r7
 800ddda:	e7c9      	b.n	800dd70 <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800dddc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800dde0:	442b      	add	r3, r5
 800dde2:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800dde6:	f8db 3000 	ldr.w	r3, [fp]
 800ddea:	b96b      	cbnz	r3, 800de08 <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ddec:	f8db 3004 	ldr.w	r3, [fp, #4]
 800ddf0:	462a      	mov	r2, r5
 800ddf2:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800ddf6:	9907      	ldr	r1, [sp, #28]
 800ddf8:	4418      	add	r0, r3
 800ddfa:	f001 fac1 	bl	800f380 <memcpy>
        p->len += oversize_used;
 800ddfe:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800de02:	442b      	add	r3, r5
 800de04:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800de08:	f8db b000 	ldr.w	fp, [fp]
 800de0c:	e7b3      	b.n	800dd76 <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800de0e:	f1b9 0f00 	cmp.w	r9, #0
 800de12:	d01f      	beq.n	800de54 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800de14:	f1b8 0f00 	cmp.w	r8, #0
 800de18:	d002      	beq.n	800de20 <tcp_write+0x480>
 800de1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800de1e:	b933      	cbnz	r3, 800de2e <tcp_write+0x48e>
 800de20:	4b27      	ldr	r3, [pc, #156]	; (800dec0 <tcp_write+0x520>)
 800de22:	f240 22e6 	movw	r2, #742	; 0x2e6
 800de26:	492c      	ldr	r1, [pc, #176]	; (800ded8 <tcp_write+0x538>)
 800de28:	4827      	ldr	r0, [pc, #156]	; (800dec8 <tcp_write+0x528>)
 800de2a:	f001 fabf 	bl	800f3ac <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800de2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800de32:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800de34:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800de36:	444a      	add	r2, r9
 800de38:	b292      	uxth	r2, r2
 800de3a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800de3c:	b941      	cbnz	r1, 800de50 <tcp_write+0x4b0>
    p->len += extendlen;
 800de3e:	895a      	ldrh	r2, [r3, #10]
 800de40:	444a      	add	r2, r9
 800de42:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800de44:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800de48:	4499      	add	r9, r3
 800de4a:	f8a8 9008 	strh.w	r9, [r8, #8]
 800de4e:	e7b5      	b.n	800ddbc <tcp_write+0x41c>
      p->tot_len += extendlen;
 800de50:	460b      	mov	r3, r1
 800de52:	e7ee      	b.n	800de32 <tcp_write+0x492>
  if (last_unsent == NULL) {
 800de54:	f1b8 0f00 	cmp.w	r8, #0
 800de58:	d1b0      	bne.n	800ddbc <tcp_write+0x41c>
    pcb->unsent = queue;
 800de5a:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800de5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800de60:	9a04      	ldr	r2, [sp, #16]
 800de62:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800de64:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800de68:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800de6a:	9b04      	ldr	r3, [sp, #16]
 800de6c:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800de6e:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800de70:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800de74:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800de78:	b153      	cbz	r3, 800de90 <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800de7a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800de7c:	b943      	cbnz	r3, 800de90 <tcp_write+0x4f0>
 800de7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800de80:	b933      	cbnz	r3, 800de90 <tcp_write+0x4f0>
 800de82:	4b0f      	ldr	r3, [pc, #60]	; (800dec0 <tcp_write+0x520>)
 800de84:	f240 3212 	movw	r2, #786	; 0x312
 800de88:	4910      	ldr	r1, [pc, #64]	; (800decc <tcp_write+0x52c>)
 800de8a:	480f      	ldr	r0, [pc, #60]	; (800dec8 <tcp_write+0x528>)
 800de8c:	f001 fa8e 	bl	800f3ac <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800de90:	b176      	cbz	r6, 800deb0 <tcp_write+0x510>
 800de92:	68f0      	ldr	r0, [r6, #12]
 800de94:	2800      	cmp	r0, #0
 800de96:	f43f ad99 	beq.w	800d9cc <tcp_write+0x2c>
 800de9a:	9b08      	ldr	r3, [sp, #32]
 800de9c:	f013 0402 	ands.w	r4, r3, #2
 800dea0:	d106      	bne.n	800deb0 <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dea2:	8985      	ldrh	r5, [r0, #12]
 800dea4:	2008      	movs	r0, #8
 800dea6:	f7fc fb71 	bl	800a58c <lwip_htons>
 800deaa:	68f3      	ldr	r3, [r6, #12]
 800deac:	4328      	orrs	r0, r5
 800deae:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800deb0:	2000      	movs	r0, #0
 800deb2:	e58b      	b.n	800d9cc <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800deb4:	f04f 0b00 	mov.w	fp, #0
 800deb8:	e70d      	b.n	800dcd6 <tcp_write+0x336>
    return ERR_CONN;
 800deba:	f06f 000a 	mvn.w	r0, #10
 800debe:	e585      	b.n	800d9cc <tcp_write+0x2c>
 800dec0:	08016bcf 	.word	0x08016bcf
 800dec4:	08016f34 	.word	0x08016f34
 800dec8:	080144fe 	.word	0x080144fe
 800decc:	08016fc0 	.word	0x08016fc0
 800ded0:	08016f42 	.word	0x08016f42
 800ded4:	08016f53 	.word	0x08016f53
 800ded8:	08016f8b 	.word	0x08016f8b

0800dedc <tcp_split_unsent_seg>:
{
 800dedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dee2:	4606      	mov	r6, r0
 800dee4:	b930      	cbnz	r0, 800def4 <tcp_split_unsent_seg+0x18>
 800dee6:	4b5d      	ldr	r3, [pc, #372]	; (800e05c <tcp_split_unsent_seg+0x180>)
 800dee8:	f240 324b 	movw	r2, #843	; 0x34b
 800deec:	495c      	ldr	r1, [pc, #368]	; (800e060 <tcp_split_unsent_seg+0x184>)
 800deee:	485d      	ldr	r0, [pc, #372]	; (800e064 <tcp_split_unsent_seg+0x188>)
 800def0:	f001 fa5c 	bl	800f3ac <iprintf>
  useg = pcb->unsent;
 800def4:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800def6:	b914      	cbnz	r4, 800defe <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800def8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800defc:	e009      	b.n	800df12 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800defe:	b95d      	cbnz	r5, 800df18 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800df00:	4b56      	ldr	r3, [pc, #344]	; (800e05c <tcp_split_unsent_seg+0x180>)
 800df02:	f240 3253 	movw	r2, #851	; 0x353
 800df06:	4958      	ldr	r1, [pc, #352]	; (800e068 <tcp_split_unsent_seg+0x18c>)
 800df08:	4856      	ldr	r0, [pc, #344]	; (800e064 <tcp_split_unsent_seg+0x188>)
 800df0a:	f001 fa4f 	bl	800f3ac <iprintf>
    return ERR_VAL;
 800df0e:	f06f 0005 	mvn.w	r0, #5
}
 800df12:	b003      	add	sp, #12
 800df14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800df18:	8923      	ldrh	r3, [r4, #8]
 800df1a:	42ab      	cmp	r3, r5
 800df1c:	d801      	bhi.n	800df22 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800df1e:	2000      	movs	r0, #0
 800df20:	e7f7      	b.n	800df12 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800df22:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800df24:	42ab      	cmp	r3, r5
 800df26:	d20f      	bcs.n	800df48 <tcp_split_unsent_seg+0x6c>
 800df28:	4b4c      	ldr	r3, [pc, #304]	; (800e05c <tcp_split_unsent_seg+0x180>)
 800df2a:	f240 325b 	movw	r2, #859	; 0x35b
 800df2e:	494f      	ldr	r1, [pc, #316]	; (800e06c <tcp_split_unsent_seg+0x190>)
 800df30:	484c      	ldr	r0, [pc, #304]	; (800e064 <tcp_split_unsent_seg+0x188>)
 800df32:	f001 fa3b 	bl	800f3ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800df36:	8923      	ldrh	r3, [r4, #8]
 800df38:	b933      	cbnz	r3, 800df48 <tcp_split_unsent_seg+0x6c>
 800df3a:	4b48      	ldr	r3, [pc, #288]	; (800e05c <tcp_split_unsent_seg+0x180>)
 800df3c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800df40:	494b      	ldr	r1, [pc, #300]	; (800e070 <tcp_split_unsent_seg+0x194>)
 800df42:	4848      	ldr	r0, [pc, #288]	; (800e064 <tcp_split_unsent_seg+0x188>)
 800df44:	f001 fa32 	bl	800f3ac <iprintf>
  optflags = useg->flags;
 800df48:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800df4c:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800df50:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800df54:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800df56:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800df5a:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800df5e:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800df62:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800df66:	fa17 f181 	uxtah	r1, r7, r1
 800df6a:	b289      	uxth	r1, r1
 800df6c:	f7fd f936 	bl	800b1dc <pbuf_alloc>
  if (p == NULL) {
 800df70:	4681      	mov	r9, r0
 800df72:	2800      	cmp	r0, #0
 800df74:	d0c0      	beq.n	800def8 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800df76:	6860      	ldr	r0, [r4, #4]
 800df78:	8922      	ldrh	r2, [r4, #8]
 800df7a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800df7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800df80:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800df82:	4642      	mov	r2, r8
 800df84:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800df86:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800df88:	b29b      	uxth	r3, r3
 800df8a:	f7fd fae5 	bl	800b558 <pbuf_copy_partial>
 800df8e:	4540      	cmp	r0, r8
 800df90:	d160      	bne.n	800e054 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800df92:	68e3      	ldr	r3, [r4, #12]
 800df94:	8998      	ldrh	r0, [r3, #12]
 800df96:	f7fc faf9 	bl	800a58c <lwip_htons>
  if (split_flags & TCP_PSH) {
 800df9a:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800df9e:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800dfa0:	bf16      	itet	ne
 800dfa2:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dfa6:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800dfaa:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800dfae:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dfb0:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800dfb2:	bf48      	it	mi
 800dfb4:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dfb8:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800dfba:	bf48      	it	mi
 800dfbc:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dfc0:	f7fc fae7 	bl	800a592 <lwip_htonl>
 800dfc4:	4642      	mov	r2, r8
 800dfc6:	182b      	adds	r3, r5, r0
 800dfc8:	4649      	mov	r1, r9
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f8cd b000 	str.w	fp, [sp]
 800dfd0:	f7ff fbc4 	bl	800d75c <tcp_create_segment>
  if (seg == NULL) {
 800dfd4:	4680      	mov	r8, r0
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d03c      	beq.n	800e054 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dfda:	6860      	ldr	r0, [r4, #4]
 800dfdc:	eba5 050a 	sub.w	r5, r5, sl
 800dfe0:	f7fd f9d0 	bl	800b384 <pbuf_clen>
 800dfe4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800dfe8:	fa1f f985 	uxth.w	r9, r5
 800dfec:	1a18      	subs	r0, r3, r0
 800dfee:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dff2:	6860      	ldr	r0, [r4, #4]
 800dff4:	8901      	ldrh	r1, [r0, #8]
 800dff6:	fa11 f185 	uxtah	r1, r1, r5
 800dffa:	b289      	uxth	r1, r1
 800dffc:	f7fd f96a 	bl	800b2d4 <pbuf_realloc>
  useg->len -= remainder;
 800e000:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e002:	4638      	mov	r0, r7
  useg->len -= remainder;
 800e004:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e006:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800e008:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e00c:	899d      	ldrh	r5, [r3, #12]
 800e00e:	f7fc fabd 	bl	800a58c <lwip_htons>
 800e012:	68e3      	ldr	r3, [r4, #12]
 800e014:	4328      	orrs	r0, r5
 800e016:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e018:	6860      	ldr	r0, [r4, #4]
 800e01a:	f7fd f9b3 	bl	800b384 <pbuf_clen>
 800e01e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800e022:	4418      	add	r0, r3
 800e024:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e028:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e02c:	f7fd f9aa 	bl	800b384 <pbuf_clen>
 800e030:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800e034:	4418      	add	r0, r3
  seg->next = useg->next;
 800e036:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e038:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800e03c:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800e040:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800e044:	f8d8 0000 	ldr.w	r0, [r8]
 800e048:	2800      	cmp	r0, #0
 800e04a:	f47f af68 	bne.w	800df1e <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800e04e:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800e052:	e75e      	b.n	800df12 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800e054:	4648      	mov	r0, r9
 800e056:	f7fd f859 	bl	800b10c <pbuf_free>
 800e05a:	e74d      	b.n	800def8 <tcp_split_unsent_seg+0x1c>
 800e05c:	08016bcf 	.word	0x08016bcf
 800e060:	08016fde 	.word	0x08016fde
 800e064:	080144fe 	.word	0x080144fe
 800e068:	08017000 	.word	0x08017000
 800e06c:	08017022 	.word	0x08017022
 800e070:	0801702f 	.word	0x0801702f

0800e074 <tcp_enqueue_flags>:
{
 800e074:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e078:	f011 0803 	ands.w	r8, r1, #3
{
 800e07c:	4604      	mov	r4, r0
 800e07e:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e080:	d106      	bne.n	800e090 <tcp_enqueue_flags+0x1c>
 800e082:	4b3e      	ldr	r3, [pc, #248]	; (800e17c <tcp_enqueue_flags+0x108>)
 800e084:	f240 4211 	movw	r2, #1041	; 0x411
 800e088:	493d      	ldr	r1, [pc, #244]	; (800e180 <tcp_enqueue_flags+0x10c>)
 800e08a:	483e      	ldr	r0, [pc, #248]	; (800e184 <tcp_enqueue_flags+0x110>)
 800e08c:	f001 f98e 	bl	800f3ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e090:	b934      	cbnz	r4, 800e0a0 <tcp_enqueue_flags+0x2c>
 800e092:	4b3a      	ldr	r3, [pc, #232]	; (800e17c <tcp_enqueue_flags+0x108>)
 800e094:	f240 4213 	movw	r2, #1043	; 0x413
 800e098:	493b      	ldr	r1, [pc, #236]	; (800e188 <tcp_enqueue_flags+0x114>)
 800e09a:	483a      	ldr	r0, [pc, #232]	; (800e184 <tcp_enqueue_flags+0x110>)
 800e09c:	f001 f986 	bl	800f3ac <iprintf>
  if (flags & TCP_SYN) {
 800e0a0:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e0a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e0a8:	2036      	movs	r0, #54	; 0x36
 800e0aa:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800e0ae:	4649      	mov	r1, r9
 800e0b0:	f7fd f894 	bl	800b1dc <pbuf_alloc>
 800e0b4:	4605      	mov	r5, r0
 800e0b6:	b940      	cbnz	r0, 800e0ca <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0b8:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800e0ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e0be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0c2:	8363      	strh	r3, [r4, #26]
}
 800e0c4:	b003      	add	sp, #12
 800e0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e0ca:	8943      	ldrh	r3, [r0, #10]
 800e0cc:	454b      	cmp	r3, r9
 800e0ce:	d206      	bcs.n	800e0de <tcp_enqueue_flags+0x6a>
 800e0d0:	4b2a      	ldr	r3, [pc, #168]	; (800e17c <tcp_enqueue_flags+0x108>)
 800e0d2:	f240 4239 	movw	r2, #1081	; 0x439
 800e0d6:	492d      	ldr	r1, [pc, #180]	; (800e18c <tcp_enqueue_flags+0x118>)
 800e0d8:	482a      	ldr	r0, [pc, #168]	; (800e184 <tcp_enqueue_flags+0x110>)
 800e0da:	f001 f967 	bl	800f3ac <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e0de:	4629      	mov	r1, r5
 800e0e0:	9700      	str	r7, [sp, #0]
 800e0e2:	4632      	mov	r2, r6
 800e0e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f7ff fb38 	bl	800d75c <tcp_create_segment>
 800e0ec:	4605      	mov	r5, r0
 800e0ee:	2800      	cmp	r0, #0
 800e0f0:	d0e2      	beq.n	800e0b8 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e0f2:	68c3      	ldr	r3, [r0, #12]
 800e0f4:	079a      	lsls	r2, r3, #30
 800e0f6:	d006      	beq.n	800e106 <tcp_enqueue_flags+0x92>
 800e0f8:	4b20      	ldr	r3, [pc, #128]	; (800e17c <tcp_enqueue_flags+0x108>)
 800e0fa:	f240 4242 	movw	r2, #1090	; 0x442
 800e0fe:	4924      	ldr	r1, [pc, #144]	; (800e190 <tcp_enqueue_flags+0x11c>)
 800e100:	4820      	ldr	r0, [pc, #128]	; (800e184 <tcp_enqueue_flags+0x110>)
 800e102:	f001 f953 	bl	800f3ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e106:	892b      	ldrh	r3, [r5, #8]
 800e108:	b133      	cbz	r3, 800e118 <tcp_enqueue_flags+0xa4>
 800e10a:	4b1c      	ldr	r3, [pc, #112]	; (800e17c <tcp_enqueue_flags+0x108>)
 800e10c:	f240 4243 	movw	r2, #1091	; 0x443
 800e110:	4920      	ldr	r1, [pc, #128]	; (800e194 <tcp_enqueue_flags+0x120>)
 800e112:	481c      	ldr	r0, [pc, #112]	; (800e184 <tcp_enqueue_flags+0x110>)
 800e114:	f001 f94a 	bl	800f3ac <iprintf>
  if (pcb->unsent == NULL) {
 800e118:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e11a:	bb43      	cbnz	r3, 800e16e <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800e11c:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e124:	f1b8 0f00 	cmp.w	r8, #0
 800e128:	d002      	beq.n	800e130 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800e12a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e12c:	3301      	adds	r3, #1
 800e12e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800e130:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e132:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800e134:	bf42      	ittt	mi
 800e136:	8b63      	ldrhmi	r3, [r4, #26]
 800e138:	f043 0320 	orrmi.w	r3, r3, #32
 800e13c:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e13e:	f7fd f921 	bl	800b384 <pbuf_clen>
 800e142:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e146:	4418      	add	r0, r3
 800e148:	b280      	uxth	r0, r0
 800e14a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800e14e:	2800      	cmp	r0, #0
 800e150:	d0b8      	beq.n	800e0c4 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e152:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800e154:	b948      	cbnz	r0, 800e16a <tcp_enqueue_flags+0xf6>
 800e156:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800e158:	2c00      	cmp	r4, #0
 800e15a:	d1b3      	bne.n	800e0c4 <tcp_enqueue_flags+0x50>
 800e15c:	4b07      	ldr	r3, [pc, #28]	; (800e17c <tcp_enqueue_flags+0x108>)
 800e15e:	f240 4265 	movw	r2, #1125	; 0x465
 800e162:	490d      	ldr	r1, [pc, #52]	; (800e198 <tcp_enqueue_flags+0x124>)
 800e164:	4807      	ldr	r0, [pc, #28]	; (800e184 <tcp_enqueue_flags+0x110>)
 800e166:	f001 f921 	bl	800f3ac <iprintf>
  return ERR_OK;
 800e16a:	2000      	movs	r0, #0
 800e16c:	e7aa      	b.n	800e0c4 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e16e:	461a      	mov	r2, r3
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1fb      	bne.n	800e16e <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800e176:	6015      	str	r5, [r2, #0]
 800e178:	e7d1      	b.n	800e11e <tcp_enqueue_flags+0xaa>
 800e17a:	bf00      	nop
 800e17c:	08016bcf 	.word	0x08016bcf
 800e180:	0801703d 	.word	0x0801703d
 800e184:	080144fe 	.word	0x080144fe
 800e188:	08017092 	.word	0x08017092
 800e18c:	080170b1 	.word	0x080170b1
 800e190:	080170ea 	.word	0x080170ea
 800e194:	08017102 	.word	0x08017102
 800e198:	0801712c 	.word	0x0801712c

0800e19c <tcp_send_fin>:
{
 800e19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e19e:	4604      	mov	r4, r0
 800e1a0:	b930      	cbnz	r0, 800e1b0 <tcp_send_fin+0x14>
 800e1a2:	4b13      	ldr	r3, [pc, #76]	; (800e1f0 <tcp_send_fin+0x54>)
 800e1a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800e1a8:	4912      	ldr	r1, [pc, #72]	; (800e1f4 <tcp_send_fin+0x58>)
 800e1aa:	4813      	ldr	r0, [pc, #76]	; (800e1f8 <tcp_send_fin+0x5c>)
 800e1ac:	f001 f8fe 	bl	800f3ac <iprintf>
  if (pcb->unsent != NULL) {
 800e1b0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800e1b2:	b14d      	cbz	r5, 800e1c8 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e1b4:	462f      	mov	r7, r5
 800e1b6:	682d      	ldr	r5, [r5, #0]
 800e1b8:	2d00      	cmp	r5, #0
 800e1ba:	d1fb      	bne.n	800e1b4 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	8998      	ldrh	r0, [r3, #12]
 800e1c0:	f7fc f9e4 	bl	800a58c <lwip_htons>
 800e1c4:	0743      	lsls	r3, r0, #29
 800e1c6:	d005      	beq.n	800e1d4 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	2101      	movs	r1, #1
}
 800e1cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e1d0:	f7ff bf50 	b.w	800e074 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2001      	movs	r0, #1
 800e1d8:	899e      	ldrh	r6, [r3, #12]
 800e1da:	f7fc f9d7 	bl	800a58c <lwip_htons>
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4330      	orrs	r0, r6
 800e1e2:	8198      	strh	r0, [r3, #12]
}
 800e1e4:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800e1e6:	8b63      	ldrh	r3, [r4, #26]
 800e1e8:	f043 0320 	orr.w	r3, r3, #32
 800e1ec:	8363      	strh	r3, [r4, #26]
}
 800e1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f0:	08016bcf 	.word	0x08016bcf
 800e1f4:	08017154 	.word	0x08017154
 800e1f8:	080144fe 	.word	0x080144fe

0800e1fc <tcp_rexmit_rto_prepare>:
{
 800e1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e200:	4604      	mov	r4, r0
 800e202:	b930      	cbnz	r0, 800e212 <tcp_rexmit_rto_prepare+0x16>
 800e204:	4b1c      	ldr	r3, [pc, #112]	; (800e278 <tcp_rexmit_rto_prepare+0x7c>)
 800e206:	f240 6263 	movw	r2, #1635	; 0x663
 800e20a:	491c      	ldr	r1, [pc, #112]	; (800e27c <tcp_rexmit_rto_prepare+0x80>)
 800e20c:	481c      	ldr	r0, [pc, #112]	; (800e280 <tcp_rexmit_rto_prepare+0x84>)
 800e20e:	f001 f8cd 	bl	800f3ac <iprintf>
  if (pcb->unacked == NULL) {
 800e212:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800e214:	b945      	cbnz	r5, 800e228 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800e216:	f06f 0005 	mvn.w	r0, #5
}
 800e21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800e21e:	f7ff fa3b 	bl	800d698 <tcp_output_segment_busy>
 800e222:	2800      	cmp	r0, #0
 800e224:	d1f7      	bne.n	800e216 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e226:	682d      	ldr	r5, [r5, #0]
 800e228:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800e22a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1f6      	bne.n	800e21e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800e230:	f7ff fa32 	bl	800d698 <tcp_output_segment_busy>
 800e234:	4606      	mov	r6, r0
 800e236:	2800      	cmp	r0, #0
 800e238:	d1ed      	bne.n	800e216 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800e23a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e23c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800e23e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800e240:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800e244:	8b63      	ldrh	r3, [r4, #26]
 800e246:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e24a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e24c:	68eb      	ldr	r3, [r5, #12]
 800e24e:	6858      	ldr	r0, [r3, #4]
 800e250:	f7fc f99f 	bl	800a592 <lwip_htonl>
 800e254:	68eb      	ldr	r3, [r5, #12]
 800e256:	4607      	mov	r7, r0
 800e258:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800e25c:	8998      	ldrh	r0, [r3, #12]
 800e25e:	f7fc f995 	bl	800a58c <lwip_htons>
 800e262:	f010 0303 	ands.w	r3, r0, #3
 800e266:	4447      	add	r7, r8
  return ERR_OK;
 800e268:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e26a:	bf18      	it	ne
 800e26c:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800e26e:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e270:	443b      	add	r3, r7
 800e272:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800e274:	e7d1      	b.n	800e21a <tcp_rexmit_rto_prepare+0x1e>
 800e276:	bf00      	nop
 800e278:	08016bcf 	.word	0x08016bcf
 800e27c:	0801716e 	.word	0x0801716e
 800e280:	080144fe 	.word	0x080144fe

0800e284 <tcp_rexmit>:
{
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e286:	4604      	mov	r4, r0
 800e288:	b930      	cbnz	r0, 800e298 <tcp_rexmit+0x14>
 800e28a:	4b1b      	ldr	r3, [pc, #108]	; (800e2f8 <tcp_rexmit+0x74>)
 800e28c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e290:	491a      	ldr	r1, [pc, #104]	; (800e2fc <tcp_rexmit+0x78>)
 800e292:	481b      	ldr	r0, [pc, #108]	; (800e300 <tcp_rexmit+0x7c>)
 800e294:	f001 f88a 	bl	800f3ac <iprintf>
  if (pcb->unacked == NULL) {
 800e298:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800e29a:	b915      	cbnz	r5, 800e2a2 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800e29c:	f06f 0005 	mvn.w	r0, #5
}
 800e2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f7ff f9f8 	bl	800d698 <tcp_output_segment_busy>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	d1f7      	bne.n	800e29c <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800e2ac:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800e2ae:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800e2b2:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800e2b4:	6833      	ldr	r3, [r6, #0]
 800e2b6:	b983      	cbnz	r3, 800e2da <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800e2b8:	6833      	ldr	r3, [r6, #0]
 800e2ba:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800e2bc:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800e2be:	682b      	ldr	r3, [r5, #0]
 800e2c0:	b90b      	cbnz	r3, 800e2c6 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800e2c2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800e2c6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800e2ca:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800e2cc:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800e2ce:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800e2d0:	bf1c      	itt	ne
 800e2d2:	3301      	addne	r3, #1
 800e2d4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800e2d8:	e7e2      	b.n	800e2a0 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	6858      	ldr	r0, [r3, #4]
 800e2de:	f7fc f958 	bl	800a592 <lwip_htonl>
 800e2e2:	68eb      	ldr	r3, [r5, #12]
 800e2e4:	4607      	mov	r7, r0
 800e2e6:	6858      	ldr	r0, [r3, #4]
 800e2e8:	f7fc f953 	bl	800a592 <lwip_htonl>
 800e2ec:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	dae2      	bge.n	800e2b8 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800e2f2:	6836      	ldr	r6, [r6, #0]
 800e2f4:	e7de      	b.n	800e2b4 <tcp_rexmit+0x30>
 800e2f6:	bf00      	nop
 800e2f8:	08016bcf 	.word	0x08016bcf
 800e2fc:	08017192 	.word	0x08017192
 800e300:	080144fe 	.word	0x080144fe

0800e304 <tcp_rexmit_fast>:
{
 800e304:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e306:	4604      	mov	r4, r0
 800e308:	b930      	cbnz	r0, 800e318 <tcp_rexmit_fast+0x14>
 800e30a:	4b15      	ldr	r3, [pc, #84]	; (800e360 <tcp_rexmit_fast+0x5c>)
 800e30c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e310:	4914      	ldr	r1, [pc, #80]	; (800e364 <tcp_rexmit_fast+0x60>)
 800e312:	4815      	ldr	r0, [pc, #84]	; (800e368 <tcp_rexmit_fast+0x64>)
 800e314:	f001 f84a 	bl	800f3ac <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e318:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e31a:	b1fb      	cbz	r3, 800e35c <tcp_rexmit_fast+0x58>
 800e31c:	8b63      	ldrh	r3, [r4, #26]
 800e31e:	075b      	lsls	r3, r3, #29
 800e320:	d41c      	bmi.n	800e35c <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e322:	4620      	mov	r0, r4
 800e324:	f7ff ffae 	bl	800e284 <tcp_rexmit>
 800e328:	b9c0      	cbnz	r0, 800e35c <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e32a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e32e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800e332:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e334:	4299      	cmp	r1, r3
 800e336:	bf28      	it	cs
 800e338:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e33a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e33c:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e33e:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800e340:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e344:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800e346:	bf88      	it	hi
 800e348:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e34a:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800e34c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e350:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e354:	8b63      	ldrh	r3, [r4, #26]
 800e356:	f043 0304 	orr.w	r3, r3, #4
 800e35a:	8363      	strh	r3, [r4, #26]
}
 800e35c:	bd38      	pop	{r3, r4, r5, pc}
 800e35e:	bf00      	nop
 800e360:	08016bcf 	.word	0x08016bcf
 800e364:	080171aa 	.word	0x080171aa
 800e368:	080144fe 	.word	0x080144fe

0800e36c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e370:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e374:	4606      	mov	r6, r0
 800e376:	460f      	mov	r7, r1
 800e378:	4614      	mov	r4, r2
 800e37a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e37e:	461d      	mov	r5, r3
{
 800e380:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e384:	b933      	cbnz	r3, 800e394 <tcp_rst+0x28>
 800e386:	4b18      	ldr	r3, [pc, #96]	; (800e3e8 <tcp_rst+0x7c>)
 800e388:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e38c:	4917      	ldr	r1, [pc, #92]	; (800e3ec <tcp_rst+0x80>)
 800e38e:	4818      	ldr	r0, [pc, #96]	; (800e3f0 <tcp_rst+0x84>)
 800e390:	f001 f80c 	bl	800f3ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e394:	f1b8 0f00 	cmp.w	r8, #0
 800e398:	d106      	bne.n	800e3a8 <tcp_rst+0x3c>
 800e39a:	4b13      	ldr	r3, [pc, #76]	; (800e3e8 <tcp_rst+0x7c>)
 800e39c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e3a0:	4914      	ldr	r1, [pc, #80]	; (800e3f4 <tcp_rst+0x88>)
 800e3a2:	4813      	ldr	r0, [pc, #76]	; (800e3f0 <tcp_rst+0x84>)
 800e3a4:	f001 f802 	bl	800f3ac <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f7fc f8f2 	bl	800a592 <lwip_htonl>
 800e3ae:	2314      	movs	r3, #20
 800e3b0:	f646 010b 	movw	r1, #26635	; 0x680b
 800e3b4:	4602      	mov	r2, r0
 800e3b6:	f8cd a000 	str.w	sl, [sp]
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e3c0:	464b      	mov	r3, r9
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	f7ff fa3c 	bl	800d840 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e3c8:	4604      	mov	r4, r0
 800e3ca:	b150      	cbz	r0, 800e3e2 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e3cc:	f7ff faa0 	bl	800d910 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e3d0:	4643      	mov	r3, r8
 800e3d2:	462a      	mov	r2, r5
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e3d8:	b004      	add	sp, #16
 800e3da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e3de:	f7ff baa7 	b.w	800d930 <tcp_output_control_segment>
}
 800e3e2:	b004      	add	sp, #16
 800e3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e8:	08016bcf 	.word	0x08016bcf
 800e3ec:	080171c7 	.word	0x080171c7
 800e3f0:	080144fe 	.word	0x080144fe
 800e3f4:	080171e1 	.word	0x080171e1

0800e3f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e3f8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	b930      	cbnz	r0, 800e40c <tcp_send_empty_ack+0x14>
 800e3fe:	4b14      	ldr	r3, [pc, #80]	; (800e450 <tcp_send_empty_ack+0x58>)
 800e400:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e404:	4913      	ldr	r1, [pc, #76]	; (800e454 <tcp_send_empty_ack+0x5c>)
 800e406:	4814      	ldr	r0, [pc, #80]	; (800e458 <tcp_send_empty_ack+0x60>)
 800e408:	f000 ffd0 	bl	800f3ac <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e40c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e40e:	f7fc f8c0 	bl	800a592 <lwip_htonl>
 800e412:	2100      	movs	r1, #0
 800e414:	4602      	mov	r2, r0
 800e416:	4620      	mov	r0, r4
 800e418:	f7ff fa54 	bl	800d8c4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e41c:	4605      	mov	r5, r0
 800e41e:	b930      	cbnz	r0, 800e42e <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e420:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e422:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e426:	f043 0303 	orr.w	r3, r3, #3
 800e42a:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800e42c:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e42e:	f7ff fa6f 	bl	800d910 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e432:	1d23      	adds	r3, r4, #4
 800e434:	4622      	mov	r2, r4
 800e436:	4629      	mov	r1, r5
 800e438:	4620      	mov	r0, r4
 800e43a:	f7ff fa79 	bl	800d930 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800e43e:	8b63      	ldrh	r3, [r4, #26]
 800e440:	b118      	cbz	r0, 800e44a <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e442:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e446:	8363      	strh	r3, [r4, #26]
 800e448:	e7f0      	b.n	800e42c <tcp_send_empty_ack+0x34>
 800e44a:	f023 0303 	bic.w	r3, r3, #3
 800e44e:	e7fa      	b.n	800e446 <tcp_send_empty_ack+0x4e>
 800e450:	08016bcf 	.word	0x08016bcf
 800e454:	080171fc 	.word	0x080171fc
 800e458:	080144fe 	.word	0x080144fe

0800e45c <tcp_output>:
{
 800e45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e460:	4604      	mov	r4, r0
{
 800e462:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e464:	b930      	cbnz	r0, 800e474 <tcp_output+0x18>
 800e466:	4b8f      	ldr	r3, [pc, #572]	; (800e6a4 <tcp_output+0x248>)
 800e468:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e46c:	498e      	ldr	r1, [pc, #568]	; (800e6a8 <tcp_output+0x24c>)
 800e46e:	488f      	ldr	r0, [pc, #572]	; (800e6ac <tcp_output+0x250>)
 800e470:	f000 ff9c 	bl	800f3ac <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e474:	7d23      	ldrb	r3, [r4, #20]
 800e476:	2b01      	cmp	r3, #1
 800e478:	d106      	bne.n	800e488 <tcp_output+0x2c>
 800e47a:	4b8a      	ldr	r3, [pc, #552]	; (800e6a4 <tcp_output+0x248>)
 800e47c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800e480:	498b      	ldr	r1, [pc, #556]	; (800e6b0 <tcp_output+0x254>)
 800e482:	488a      	ldr	r0, [pc, #552]	; (800e6ac <tcp_output+0x250>)
 800e484:	f000 ff92 	bl	800f3ac <iprintf>
  if (tcp_input_pcb == pcb) {
 800e488:	4b8a      	ldr	r3, [pc, #552]	; (800e6b4 <tcp_output+0x258>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	f000 8171 	beq.w	800e774 <tcp_output+0x318>
  seg = pcb->unsent;
 800e492:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800e494:	b94d      	cbnz	r5, 800e4aa <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800e496:	8b63      	ldrh	r3, [r4, #26]
 800e498:	0798      	lsls	r0, r3, #30
 800e49a:	f140 8167 	bpl.w	800e76c <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800e49e:	4620      	mov	r0, r4
}
 800e4a0:	b007      	add	sp, #28
 800e4a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800e4a6:	f7ff bfa7 	b.w	800e3f8 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e4aa:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e4ac:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e4b0:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800e4b4:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e4b8:	b340      	cbz	r0, 800e50c <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800e4ba:	f7fc fd6d 	bl	800af98 <netif_get_by_index>
    return ip_route(src, dst);
 800e4be:	4607      	mov	r7, r0
  if (netif == NULL) {
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f000 8170 	beq.w	800e7a6 <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	b90b      	cbnz	r3, 800e4ce <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e4ca:	6843      	ldr	r3, [r0, #4]
 800e4cc:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e4ce:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e4d0:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e4d2:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e4d4:	bf28      	it	cs
 800e4d6:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e4d8:	f7fc f85b 	bl	800a592 <lwip_htonl>
 800e4dc:	892b      	ldrh	r3, [r5, #8]
 800e4de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e4e0:	1a9b      	subs	r3, r3, r2
 800e4e2:	4418      	add	r0, r3
 800e4e4:	4540      	cmp	r0, r8
 800e4e6:	d915      	bls.n	800e514 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e4e8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800e4ec:	4543      	cmp	r3, r8
 800e4ee:	d1d2      	bne.n	800e496 <tcp_output+0x3a>
 800e4f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1cf      	bne.n	800e496 <tcp_output+0x3a>
 800e4f6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1cb      	bne.n	800e496 <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800e4fe:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800e502:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800e506:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800e50a:	e7c4      	b.n	800e496 <tcp_output+0x3a>
    return ip_route(src, dst);
 800e50c:	4648      	mov	r0, r9
 800e50e:	f7fb fa79 	bl	8009a04 <ip4_route>
 800e512:	e7d4      	b.n	800e4be <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800e514:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800e516:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800e518:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800e51c:	b126      	cbz	r6, 800e528 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800e51e:	4633      	mov	r3, r6
 800e520:	6836      	ldr	r6, [r6, #0]
 800e522:	2e00      	cmp	r6, #0
 800e524:	d1fb      	bne.n	800e51e <tcp_output+0xc2>
 800e526:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800e528:	f8df a178 	ldr.w	sl, [pc, #376]	; 800e6a4 <tcp_output+0x248>
 800e52c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800e6ac <tcp_output+0x250>
 800e530:	e0de      	b.n	800e6f0 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800e532:	7d23      	ldrb	r3, [r4, #20]
 800e534:	2b02      	cmp	r3, #2
 800e536:	d009      	beq.n	800e54c <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e538:	68eb      	ldr	r3, [r5, #12]
 800e53a:	2010      	movs	r0, #16
 800e53c:	899b      	ldrh	r3, [r3, #12]
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	f7fc f824 	bl	800a58c <lwip_htons>
 800e544:	9b04      	ldr	r3, [sp, #16]
 800e546:	68ea      	ldr	r2, [r5, #12]
 800e548:	4318      	orrs	r0, r3
 800e54a:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800e54c:	4628      	mov	r0, r5
 800e54e:	f7ff f8a3 	bl	800d698 <tcp_output_segment_busy>
 800e552:	2800      	cmp	r0, #0
 800e554:	d16f      	bne.n	800e636 <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e556:	68eb      	ldr	r3, [r5, #12]
 800e558:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	f7fc f819 	bl	800a592 <lwip_htonl>
 800e560:	9b04      	ldr	r3, [sp, #16]
 800e562:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e564:	68eb      	ldr	r3, [r5, #12]
 800e566:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	f7fc f80f 	bl	800a58c <lwip_htons>
 800e56e:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e570:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e572:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e574:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e576:	4413      	add	r3, r2
 800e578:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e57a:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e57c:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e57e:	07d2      	lsls	r2, r2, #31
 800e580:	d449      	bmi.n	800e616 <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e582:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800e586:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800e58a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800e58c:	bfbc      	itt	lt
 800e58e:	2300      	movlt	r3, #0
 800e590:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800e592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e594:	b94b      	cbnz	r3, 800e5aa <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800e596:	4948      	ldr	r1, [pc, #288]	; (800e6b8 <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e598:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800e59a:	6809      	ldr	r1, [r1, #0]
 800e59c:	9204      	str	r2, [sp, #16]
 800e59e:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e5a0:	6858      	ldr	r0, [r3, #4]
 800e5a2:	f7fb fff6 	bl	800a592 <lwip_htonl>
 800e5a6:	9a04      	ldr	r2, [sp, #16]
 800e5a8:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e5aa:	6869      	ldr	r1, [r5, #4]
 800e5ac:	68eb      	ldr	r3, [r5, #12]
 800e5ae:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800e5b0:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e5b4:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800e5b6:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e5b8:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800e5ba:	ebac 0c00 	sub.w	ip, ip, r0
 800e5be:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800e5c2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800e5c6:	ebac 0000 	sub.w	r0, ip, r0
 800e5ca:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	7419      	strb	r1, [r3, #16]
 800e5d0:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e5d2:	7aa9      	ldrb	r1, [r5, #10]
 800e5d4:	0089      	lsls	r1, r1, #2
 800e5d6:	f001 0104 	and.w	r1, r1, #4
 800e5da:	3114      	adds	r1, #20
 800e5dc:	440b      	add	r3, r1
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d006      	beq.n	800e5f0 <tcp_output+0x194>
 800e5e2:	4653      	mov	r3, sl
 800e5e4:	f240 621c 	movw	r2, #1564	; 0x61c
 800e5e8:	4934      	ldr	r1, [pc, #208]	; (800e6bc <tcp_output+0x260>)
 800e5ea:	4658      	mov	r0, fp
 800e5ec:	f000 fede 	bl	800f3ac <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e5f0:	2306      	movs	r3, #6
 800e5f2:	9702      	str	r7, [sp, #8]
 800e5f4:	464a      	mov	r2, r9
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	9301      	str	r3, [sp, #4]
 800e5fa:	7aa3      	ldrb	r3, [r4, #10]
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	7ae3      	ldrb	r3, [r4, #11]
 800e600:	6868      	ldr	r0, [r5, #4]
 800e602:	f7fb fb6d 	bl	8009ce0 <ip4_output_if>
    if (err != ERR_OK) {
 800e606:	b1b0      	cbz	r0, 800e636 <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e608:	8b63      	ldrh	r3, [r4, #26]
 800e60a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e60e:	8363      	strh	r3, [r4, #26]
}
 800e610:	b007      	add	sp, #28
 800e612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e616:	464a      	mov	r2, r9
 800e618:	4639      	mov	r1, r7
 800e61a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800e61e:	9304      	str	r3, [sp, #16]
 800e620:	f7fd ffe4 	bl	800c5ec <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e624:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800e628:	f7fb ffb3 	bl	800a592 <lwip_htonl>
 800e62c:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800e62e:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e632:	6158      	str	r0, [r3, #20]
    opts += 1;
 800e634:	e7a7      	b.n	800e586 <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800e636:	682b      	ldr	r3, [r5, #0]
 800e638:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e63a:	7d23      	ldrb	r3, [r4, #20]
 800e63c:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e63e:	bf1e      	ittt	ne
 800e640:	8b63      	ldrhne	r3, [r4, #26]
 800e642:	f023 0303 	bicne.w	r3, r3, #3
 800e646:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e648:	68eb      	ldr	r3, [r5, #12]
 800e64a:	6858      	ldr	r0, [r3, #4]
 800e64c:	f7fb ffa1 	bl	800a592 <lwip_htonl>
 800e650:	8929      	ldrh	r1, [r5, #8]
 800e652:	68eb      	ldr	r3, [r5, #12]
 800e654:	9104      	str	r1, [sp, #16]
 800e656:	9005      	str	r0, [sp, #20]
 800e658:	8998      	ldrh	r0, [r3, #12]
 800e65a:	f7fb ff97 	bl	800a58c <lwip_htons>
 800e65e:	f010 0303 	ands.w	r3, r0, #3
 800e662:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800e666:	bf18      	it	ne
 800e668:	2301      	movne	r3, #1
 800e66a:	440a      	add	r2, r1
 800e66c:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e66e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800e670:	1ad2      	subs	r2, r2, r3
 800e672:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800e674:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800e676:	bfb8      	it	lt
 800e678:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800e67a:	892b      	ldrh	r3, [r5, #8]
 800e67c:	9304      	str	r3, [sp, #16]
 800e67e:	8990      	ldrh	r0, [r2, #12]
 800e680:	f7fb ff84 	bl	800a58c <lwip_htons>
 800e684:	f010 0003 	ands.w	r0, r0, #3
 800e688:	9b04      	ldr	r3, [sp, #16]
 800e68a:	bf18      	it	ne
 800e68c:	2001      	movne	r0, #1
 800e68e:	42d8      	cmn	r0, r3
 800e690:	f000 8085 	beq.w	800e79e <tcp_output+0x342>
      seg->next = NULL;
 800e694:	2300      	movs	r3, #0
 800e696:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800e698:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e69a:	b98b      	cbnz	r3, 800e6c0 <tcp_output+0x264>
        pcb->unacked = seg;
 800e69c:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800e69e:	462e      	mov	r6, r5
 800e6a0:	e023      	b.n	800e6ea <tcp_output+0x28e>
 800e6a2:	bf00      	nop
 800e6a4:	08016bcf 	.word	0x08016bcf
 800e6a8:	0801721c 	.word	0x0801721c
 800e6ac:	080144fe 	.word	0x080144fe
 800e6b0:	08017234 	.word	0x08017234
 800e6b4:	20014098 	.word	0x20014098
 800e6b8:	2001404c 	.word	0x2001404c
 800e6bc:	08017271 	.word	0x08017271
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e6c0:	68eb      	ldr	r3, [r5, #12]
 800e6c2:	6858      	ldr	r0, [r3, #4]
 800e6c4:	f7fb ff65 	bl	800a592 <lwip_htonl>
 800e6c8:	68f2      	ldr	r2, [r6, #12]
 800e6ca:	9004      	str	r0, [sp, #16]
 800e6cc:	6850      	ldr	r0, [r2, #4]
 800e6ce:	f7fb ff60 	bl	800a592 <lwip_htonl>
 800e6d2:	9b04      	ldr	r3, [sp, #16]
 800e6d4:	1a18      	subs	r0, r3, r0
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	da5f      	bge.n	800e79a <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e6da:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	2a00      	cmp	r2, #0
 800e6e2:	d149      	bne.n	800e778 <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800e6e8:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800e6ea:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800e6ec:	2d00      	cmp	r5, #0
 800e6ee:	d03a      	beq.n	800e766 <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e6f0:	68eb      	ldr	r3, [r5, #12]
 800e6f2:	6858      	ldr	r0, [r3, #4]
 800e6f4:	f7fb ff4d 	bl	800a592 <lwip_htonl>
 800e6f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e6fa:	1ac0      	subs	r0, r0, r3
 800e6fc:	892b      	ldrh	r3, [r5, #8]
 800e6fe:	4418      	add	r0, r3
  while (seg != NULL &&
 800e700:	4540      	cmp	r0, r8
 800e702:	d82e      	bhi.n	800e762 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800e704:	68eb      	ldr	r3, [r5, #12]
 800e706:	8998      	ldrh	r0, [r3, #12]
 800e708:	f7fb ff40 	bl	800a58c <lwip_htons>
 800e70c:	0741      	lsls	r1, r0, #29
 800e70e:	d506      	bpl.n	800e71e <tcp_output+0x2c2>
 800e710:	4653      	mov	r3, sl
 800e712:	f240 5236 	movw	r2, #1334	; 0x536
 800e716:	4925      	ldr	r1, [pc, #148]	; (800e7ac <tcp_output+0x350>)
 800e718:	4658      	mov	r0, fp
 800e71a:	f000 fe47 	bl	800f3ac <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e71e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e720:	2b00      	cmp	r3, #0
 800e722:	f43f af06 	beq.w	800e532 <tcp_output+0xd6>
 800e726:	8b62      	ldrh	r2, [r4, #26]
 800e728:	f012 0f44 	tst.w	r2, #68	; 0x44
 800e72c:	f47f af01 	bne.w	800e532 <tcp_output+0xd6>
 800e730:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e732:	b143      	cbz	r3, 800e746 <tcp_output+0x2ea>
 800e734:	6819      	ldr	r1, [r3, #0]
 800e736:	2900      	cmp	r1, #0
 800e738:	f47f aefb 	bne.w	800e532 <tcp_output+0xd6>
 800e73c:	8919      	ldrh	r1, [r3, #8]
 800e73e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e740:	4299      	cmp	r1, r3
 800e742:	f4bf aef6 	bcs.w	800e532 <tcp_output+0xd6>
 800e746:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f43f aef1 	beq.w	800e532 <tcp_output+0xd6>
 800e750:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e754:	2b0f      	cmp	r3, #15
 800e756:	f63f aeec 	bhi.w	800e532 <tcp_output+0xd6>
 800e75a:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800e75e:	f47f aee8 	bne.w	800e532 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800e762:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e764:	b913      	cbnz	r3, 800e76c <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800e766:	2300      	movs	r3, #0
 800e768:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e76c:	8b63      	ldrh	r3, [r4, #26]
 800e76e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e772:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800e774:	2000      	movs	r0, #0
 800e776:	e74b      	b.n	800e610 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e778:	68d2      	ldr	r2, [r2, #12]
 800e77a:	9305      	str	r3, [sp, #20]
 800e77c:	6850      	ldr	r0, [r2, #4]
 800e77e:	f7fb ff08 	bl	800a592 <lwip_htonl>
 800e782:	68e9      	ldr	r1, [r5, #12]
 800e784:	9004      	str	r0, [sp, #16]
 800e786:	6848      	ldr	r0, [r1, #4]
 800e788:	f7fb ff03 	bl	800a592 <lwip_htonl>
 800e78c:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800e78e:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e790:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800e792:	2800      	cmp	r0, #0
 800e794:	daa6      	bge.n	800e6e4 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	e7a1      	b.n	800e6de <tcp_output+0x282>
          useg->next = seg;
 800e79a:	6035      	str	r5, [r6, #0]
 800e79c:	e77f      	b.n	800e69e <tcp_output+0x242>
      tcp_seg_free(seg);
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f7fd f8e8 	bl	800b974 <tcp_seg_free>
 800e7a4:	e7a1      	b.n	800e6ea <tcp_output+0x28e>
    return ERR_RTE;
 800e7a6:	f06f 0003 	mvn.w	r0, #3
 800e7aa:	e731      	b.n	800e610 <tcp_output+0x1b4>
 800e7ac:	0801725a 	.word	0x0801725a

0800e7b0 <tcp_rexmit_rto_commit>:
{
 800e7b0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	b930      	cbnz	r0, 800e7c4 <tcp_rexmit_rto_commit+0x14>
 800e7b6:	4b09      	ldr	r3, [pc, #36]	; (800e7dc <tcp_rexmit_rto_commit+0x2c>)
 800e7b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e7bc:	4908      	ldr	r1, [pc, #32]	; (800e7e0 <tcp_rexmit_rto_commit+0x30>)
 800e7be:	4809      	ldr	r0, [pc, #36]	; (800e7e4 <tcp_rexmit_rto_commit+0x34>)
 800e7c0:	f000 fdf4 	bl	800f3ac <iprintf>
  if (pcb->nrtx < 0xFF) {
 800e7c4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800e7c8:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800e7ca:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800e7cc:	bf1c      	itt	ne
 800e7ce:	3301      	addne	r3, #1
 800e7d0:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800e7d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e7d8:	f7ff be40 	b.w	800e45c <tcp_output>
 800e7dc:	08016bcf 	.word	0x08016bcf
 800e7e0:	08017284 	.word	0x08017284
 800e7e4:	080144fe 	.word	0x080144fe

0800e7e8 <tcp_rexmit_rto>:
{
 800e7e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	b930      	cbnz	r0, 800e7fc <tcp_rexmit_rto+0x14>
 800e7ee:	4b08      	ldr	r3, [pc, #32]	; (800e810 <tcp_rexmit_rto+0x28>)
 800e7f0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e7f4:	4907      	ldr	r1, [pc, #28]	; (800e814 <tcp_rexmit_rto+0x2c>)
 800e7f6:	4808      	ldr	r0, [pc, #32]	; (800e818 <tcp_rexmit_rto+0x30>)
 800e7f8:	f000 fdd8 	bl	800f3ac <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f7ff fcfd 	bl	800e1fc <tcp_rexmit_rto_prepare>
 800e802:	b920      	cbnz	r0, 800e80e <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800e804:	4620      	mov	r0, r4
}
 800e806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800e80a:	f7ff bfd1 	b.w	800e7b0 <tcp_rexmit_rto_commit>
}
 800e80e:	bd10      	pop	{r4, pc}
 800e810:	08016bcf 	.word	0x08016bcf
 800e814:	080172a7 	.word	0x080172a7
 800e818:	080144fe 	.word	0x080144fe

0800e81c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e81c:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e81e:	4604      	mov	r4, r0
 800e820:	b930      	cbnz	r0, 800e830 <tcp_keepalive+0x14>
 800e822:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <tcp_keepalive+0x44>)
 800e824:	f640 0224 	movw	r2, #2084	; 0x824
 800e828:	490e      	ldr	r1, [pc, #56]	; (800e864 <tcp_keepalive+0x48>)
 800e82a:	480f      	ldr	r0, [pc, #60]	; (800e868 <tcp_keepalive+0x4c>)
 800e82c:	f000 fdbe 	bl	800f3ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e830:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e832:	3801      	subs	r0, #1
 800e834:	f7fb fead 	bl	800a592 <lwip_htonl>
 800e838:	2100      	movs	r1, #0
 800e83a:	4602      	mov	r2, r0
 800e83c:	4620      	mov	r0, r4
 800e83e:	f7ff f841 	bl	800d8c4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e842:	4605      	mov	r5, r0
 800e844:	b148      	cbz	r0, 800e85a <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e846:	f7ff f863 	bl	800d910 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e84a:	1d23      	adds	r3, r4, #4
 800e84c:	4622      	mov	r2, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e856:	f7ff b86b 	b.w	800d930 <tcp_output_control_segment>
}
 800e85a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e85e:	bd70      	pop	{r4, r5, r6, pc}
 800e860:	08016bcf 	.word	0x08016bcf
 800e864:	080172c3 	.word	0x080172c3
 800e868:	080144fe 	.word	0x080144fe

0800e86c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e870:	4606      	mov	r6, r0
 800e872:	b930      	cbnz	r0, 800e882 <tcp_zero_window_probe+0x16>
 800e874:	4b2c      	ldr	r3, [pc, #176]	; (800e928 <tcp_zero_window_probe+0xbc>)
 800e876:	f640 024f 	movw	r2, #2127	; 0x84f
 800e87a:	492c      	ldr	r1, [pc, #176]	; (800e92c <tcp_zero_window_probe+0xc0>)
 800e87c:	482c      	ldr	r0, [pc, #176]	; (800e930 <tcp_zero_window_probe+0xc4>)
 800e87e:	f000 fd95 	bl	800f3ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e882:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800e884:	2d00      	cmp	r5, #0
 800e886:	d048      	beq.n	800e91a <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e888:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800e88c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800e88e:	bf1c      	itt	ne
 800e890:	3301      	addne	r3, #1
 800e892:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e896:	68eb      	ldr	r3, [r5, #12]
 800e898:	8998      	ldrh	r0, [r3, #12]
 800e89a:	f7fb fe77 	bl	800a58c <lwip_htons>
 800e89e:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e8a2:	68eb      	ldr	r3, [r5, #12]
 800e8a4:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e8a6:	bf18      	it	ne
 800e8a8:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e8aa:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e8ac:	bf1c      	itt	ne
 800e8ae:	fab4 f484 	clzne	r4, r4
 800e8b2:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e8b4:	f084 0101 	eor.w	r1, r4, #1
 800e8b8:	f7ff f804 	bl	800d8c4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800e8bc:	4607      	mov	r7, r0
 800e8be:	b378      	cbz	r0, 800e920 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e8c0:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800e8c4:	b1f4      	cbz	r4, 800e904 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e8c6:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800e8ca:	2011      	movs	r0, #17
 800e8cc:	f7fb fe5e 	bl	800a58c <lwip_htons>
 800e8d0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800e8d4:	4320      	orrs	r0, r4
 800e8d6:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8da:	68eb      	ldr	r3, [r5, #12]
 800e8dc:	6858      	ldr	r0, [r3, #4]
 800e8de:	f7fb fe58 	bl	800a592 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8e2:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e8e4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e8e6:	1a1b      	subs	r3, r3, r0
 800e8e8:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800e8ea:	bfb8      	it	lt
 800e8ec:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8ee:	4638      	mov	r0, r7
 800e8f0:	f7ff f80e 	bl	800d910 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8f4:	1d33      	adds	r3, r6, #4
 800e8f6:	4632      	mov	r2, r6
 800e8f8:	4639      	mov	r1, r7
 800e8fa:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e8fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e900:	f7ff b816 	b.w	800d930 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e904:	6868      	ldr	r0, [r5, #4]
 800e906:	f108 0114 	add.w	r1, r8, #20
 800e90a:	892a      	ldrh	r2, [r5, #8]
 800e90c:	8903      	ldrh	r3, [r0, #8]
 800e90e:	1a9b      	subs	r3, r3, r2
 800e910:	2201      	movs	r2, #1
 800e912:	b29b      	uxth	r3, r3
 800e914:	f7fc fe20 	bl	800b558 <pbuf_copy_partial>
 800e918:	e7df      	b.n	800e8da <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800e91a:	4628      	mov	r0, r5
}
 800e91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800e920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e924:	e7fa      	b.n	800e91c <tcp_zero_window_probe+0xb0>
 800e926:	bf00      	nop
 800e928:	08016bcf 	.word	0x08016bcf
 800e92c:	080172de 	.word	0x080172de
 800e930:	080144fe 	.word	0x080144fe

0800e934 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e934:	b570      	push	{r4, r5, r6, lr}
 800e936:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e938:	200a      	movs	r0, #10
{
 800e93a:	460e      	mov	r6, r1
 800e93c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e93e:	f7fc f955 	bl	800abec <memp_malloc>
  if (timeout == NULL) {
 800e942:	b938      	cbnz	r0, 800e954 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e944:	4b10      	ldr	r3, [pc, #64]	; (800e988 <sys_timeout_abs+0x54>)
 800e946:	22be      	movs	r2, #190	; 0xbe
 800e948:	4910      	ldr	r1, [pc, #64]	; (800e98c <sys_timeout_abs+0x58>)
 800e94a:	4811      	ldr	r0, [pc, #68]	; (800e990 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800e94c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e950:	f000 bd2c 	b.w	800f3ac <iprintf>
  timeout->next = NULL;
 800e954:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800e956:	4a0f      	ldr	r2, [pc, #60]	; (800e994 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800e958:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800e95a:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800e95c:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800e95e:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800e962:	b90b      	cbnz	r3, 800e968 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800e964:	6010      	str	r0, [r2, #0]
}
 800e966:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e968:	6859      	ldr	r1, [r3, #4]
 800e96a:	1a61      	subs	r1, r4, r1
 800e96c:	2900      	cmp	r1, #0
 800e96e:	da01      	bge.n	800e974 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800e970:	6003      	str	r3, [r0, #0]
 800e972:	e7f7      	b.n	800e964 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e974:	4619      	mov	r1, r3
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	b11b      	cbz	r3, 800e982 <sys_timeout_abs+0x4e>
 800e97a:	685a      	ldr	r2, [r3, #4]
 800e97c:	1aa2      	subs	r2, r4, r2
 800e97e:	2a00      	cmp	r2, #0
 800e980:	daf8      	bge.n	800e974 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800e982:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800e984:	6008      	str	r0, [r1, #0]
        break;
 800e986:	e7ee      	b.n	800e966 <sys_timeout_abs+0x32>
 800e988:	08017301 	.word	0x08017301
 800e98c:	08017378 	.word	0x08017378
 800e990:	080144fe 	.word	0x080144fe
 800e994:	2001409c 	.word	0x2001409c

0800e998 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e998:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e99a:	6843      	ldr	r3, [r0, #4]
{
 800e99c:	4604      	mov	r4, r0
  cyclic->handler();
 800e99e:	4798      	blx	r3

  now = sys_now();
 800e9a0:	f7f2 f85e 	bl	8000a60 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9a4:	4b07      	ldr	r3, [pc, #28]	; (800e9c4 <lwip_cyclic_timer+0x2c>)
 800e9a6:	6825      	ldr	r5, [r4, #0]
 800e9a8:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9aa:	4907      	ldr	r1, [pc, #28]	; (800e9c8 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e9ac:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e9ae:	1a1a      	subs	r2, r3, r0
 800e9b0:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e9b2:	4622      	mov	r2, r4
 800e9b4:	bfb4      	ite	lt
 800e9b6:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e9b8:	4618      	movge	r0, r3
#endif
  }
}
 800e9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e9be:	f7ff bfb9 	b.w	800e934 <sys_timeout_abs>
 800e9c2:	bf00      	nop
 800e9c4:	2001409c 	.word	0x2001409c
 800e9c8:	0800e999 	.word	0x0800e999

0800e9cc <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e9cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	460d      	mov	r5, r1
 800e9d6:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e9d8:	d306      	bcc.n	800e9e8 <sys_timeout+0x1c>
 800e9da:	4b08      	ldr	r3, [pc, #32]	; (800e9fc <sys_timeout+0x30>)
 800e9dc:	f240 1229 	movw	r2, #297	; 0x129
 800e9e0:	4907      	ldr	r1, [pc, #28]	; (800ea00 <sys_timeout+0x34>)
 800e9e2:	4808      	ldr	r0, [pc, #32]	; (800ea04 <sys_timeout+0x38>)
 800e9e4:	f000 fce2 	bl	800f3ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e9e8:	f7f2 f83a 	bl	8000a60 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4420      	add	r0, r4
#endif
}
 800e9f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e9f6:	f7ff bf9d 	b.w	800e934 <sys_timeout_abs>
 800e9fa:	bf00      	nop
 800e9fc:	08017301 	.word	0x08017301
 800ea00:	080173b5 	.word	0x080173b5
 800ea04:	080144fe 	.word	0x080144fe

0800ea08 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea08:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <tcp_timer_needed+0x24>)
 800ea0a:	689a      	ldr	r2, [r3, #8]
 800ea0c:	b962      	cbnz	r2, 800ea28 <tcp_timer_needed+0x20>
 800ea0e:	4a08      	ldr	r2, [pc, #32]	; (800ea30 <tcp_timer_needed+0x28>)
 800ea10:	6812      	ldr	r2, [r2, #0]
 800ea12:	b912      	cbnz	r2, 800ea1a <tcp_timer_needed+0x12>
 800ea14:	4a07      	ldr	r2, [pc, #28]	; (800ea34 <tcp_timer_needed+0x2c>)
 800ea16:	6812      	ldr	r2, [r2, #0]
 800ea18:	b132      	cbz	r2, 800ea28 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800ea1a:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea1c:	4906      	ldr	r1, [pc, #24]	; (800ea38 <tcp_timer_needed+0x30>)
 800ea1e:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800ea20:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea22:	2200      	movs	r2, #0
 800ea24:	f7ff bfd2 	b.w	800e9cc <sys_timeout>
}
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	2001409c 	.word	0x2001409c
 800ea30:	20014048 	.word	0x20014048
 800ea34:	20014054 	.word	0x20014054
 800ea38:	0800ea3d 	.word	0x0800ea3d

0800ea3c <tcpip_tcp_timer>:
{
 800ea3c:	b508      	push	{r3, lr}
  tcp_tmr();
 800ea3e:	f7fd fc0b 	bl	800c258 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ea42:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <tcpip_tcp_timer+0x28>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	b913      	cbnz	r3, 800ea4e <tcpip_tcp_timer+0x12>
 800ea48:	4b07      	ldr	r3, [pc, #28]	; (800ea68 <tcpip_tcp_timer+0x2c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	b133      	cbz	r3, 800ea5c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4906      	ldr	r1, [pc, #24]	; (800ea6c <tcpip_tcp_timer+0x30>)
 800ea52:	20fa      	movs	r0, #250	; 0xfa
}
 800ea54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea58:	f7ff bfb8 	b.w	800e9cc <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800ea5c:	4a04      	ldr	r2, [pc, #16]	; (800ea70 <tcpip_tcp_timer+0x34>)
 800ea5e:	6093      	str	r3, [r2, #8]
}
 800ea60:	bd08      	pop	{r3, pc}
 800ea62:	bf00      	nop
 800ea64:	20014048 	.word	0x20014048
 800ea68:	20014054 	.word	0x20014054
 800ea6c:	0800ea3d 	.word	0x0800ea3d
 800ea70:	2001409c 	.word	0x2001409c

0800ea74 <sys_timeouts_init>:
{
 800ea74:	b570      	push	{r4, r5, r6, lr}
 800ea76:	4d06      	ldr	r5, [pc, #24]	; (800ea90 <sys_timeouts_init+0x1c>)
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ea78:	2401      	movs	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ea7a:	4e06      	ldr	r6, [pc, #24]	; (800ea94 <sys_timeouts_init+0x20>)
 800ea7c:	f855 0f08 	ldr.w	r0, [r5, #8]!
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ea80:	3401      	adds	r4, #1
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ea82:	4631      	mov	r1, r6
 800ea84:	462a      	mov	r2, r5
 800ea86:	f7ff ffa1 	bl	800e9cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ea8a:	2c05      	cmp	r4, #5
 800ea8c:	d1f6      	bne.n	800ea7c <sys_timeouts_init+0x8>
}
 800ea8e:	bd70      	pop	{r4, r5, r6, pc}
 800ea90:	0801441c 	.word	0x0801441c
 800ea94:	0800e999 	.word	0x0800e999

0800ea98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ea98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ea9a:	f7f1 ffe1 	bl	8000a60 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ea9e:	4d0b      	ldr	r5, [pc, #44]	; (800eacc <sys_check_timeouts+0x34>)
  now = sys_now();
 800eaa0:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800eaa2:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800eaa4:	b181      	cbz	r1, 800eac8 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eaa6:	684b      	ldr	r3, [r1, #4]
 800eaa8:	1ae2      	subs	r2, r4, r3
 800eaaa:	2a00      	cmp	r2, #0
 800eaac:	db0c      	blt.n	800eac8 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800eaae:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eab0:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800eab2:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800eab4:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800eab6:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eaba:	f7fc f8c7 	bl	800ac4c <memp_free>
    if (handler != NULL) {
 800eabe:	2e00      	cmp	r6, #0
 800eac0:	d0ef      	beq.n	800eaa2 <sys_check_timeouts+0xa>
      handler(arg);
 800eac2:	4638      	mov	r0, r7
 800eac4:	47b0      	blx	r6
 800eac6:	e7ec      	b.n	800eaa2 <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800eac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eaca:	bf00      	nop
 800eacc:	2001409c 	.word	0x2001409c

0800ead0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ead0:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ead2:	4c07      	ldr	r4, [pc, #28]	; (800eaf0 <sys_timeouts_sleeptime+0x20>)
 800ead4:	6823      	ldr	r3, [r4, #0]
 800ead6:	b13b      	cbz	r3, 800eae8 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800ead8:	f7f1 ffc2 	bl	8000a60 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800eadc:	6823      	ldr	r3, [r4, #0]
 800eade:	685b      	ldr	r3, [r3, #4]
    return 0;
 800eae0:	1a18      	subs	r0, r3, r0
 800eae2:	bf48      	it	mi
 800eae4:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800eae6:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800eae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaec:	e7fb      	b.n	800eae6 <sys_timeouts_sleeptime+0x16>
 800eaee:	bf00      	nop
 800eaf0:	2001409c 	.word	0x2001409c

0800eaf4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eaf4:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eaf6:	f000 fce7 	bl	800f4c8 <rand>
 800eafa:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800eafe:	4b02      	ldr	r3, [pc, #8]	; (800eb08 <udp_init+0x14>)
 800eb00:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800eb04:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800eb06:	bd08      	pop	{r3, pc}
 800eb08:	20001a68 	.word	0x20001a68

0800eb0c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb10:	4688      	mov	r8, r1
 800eb12:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eb14:	4606      	mov	r6, r0
 800eb16:	b928      	cbnz	r0, 800eb24 <udp_input+0x18>
 800eb18:	4b5f      	ldr	r3, [pc, #380]	; (800ec98 <udp_input+0x18c>)
 800eb1a:	22cf      	movs	r2, #207	; 0xcf
 800eb1c:	495f      	ldr	r1, [pc, #380]	; (800ec9c <udp_input+0x190>)
 800eb1e:	4860      	ldr	r0, [pc, #384]	; (800eca0 <udp_input+0x194>)
 800eb20:	f000 fc44 	bl	800f3ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eb24:	f1b8 0f00 	cmp.w	r8, #0
 800eb28:	d105      	bne.n	800eb36 <udp_input+0x2a>
 800eb2a:	4b5b      	ldr	r3, [pc, #364]	; (800ec98 <udp_input+0x18c>)
 800eb2c:	22d0      	movs	r2, #208	; 0xd0
 800eb2e:	495d      	ldr	r1, [pc, #372]	; (800eca4 <udp_input+0x198>)
 800eb30:	485b      	ldr	r0, [pc, #364]	; (800eca0 <udp_input+0x194>)
 800eb32:	f000 fc3b 	bl	800f3ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eb36:	8973      	ldrh	r3, [r6, #10]
 800eb38:	2b07      	cmp	r3, #7
 800eb3a:	d805      	bhi.n	800eb48 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800eb3c:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800eb3e:	b005      	add	sp, #20
 800eb40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800eb44:	f7fc bae2 	b.w	800b10c <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb48:	4f57      	ldr	r7, [pc, #348]	; (800eca8 <udp_input+0x19c>)
  uncon_pcb = NULL;
 800eb4a:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800eb4c:	6874      	ldr	r4, [r6, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb4e:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800eb50:	46aa      	mov	sl, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb52:	6978      	ldr	r0, [r7, #20]
 800eb54:	f7fb f8d5 	bl	8009d02 <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb58:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800ecb8 <udp_input+0x1ac>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800eb5c:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800eb5e:	8820      	ldrh	r0, [r4, #0]
 800eb60:	f7fb fd14 	bl	800a58c <lwip_htons>
 800eb64:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800eb66:	8860      	ldrh	r0, [r4, #2]
 800eb68:	f7fb fd10 	bl	800a58c <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb6c:	f8db 4000 	ldr.w	r4, [fp]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800eb70:	f8df c124 	ldr.w	ip, [pc, #292]	; 800ec98 <udp_input+0x18c>
 800eb74:	494d      	ldr	r1, [pc, #308]	; (800ecac <udp_input+0x1a0>)
  dest = lwip_ntohs(udphdr->dest);
 800eb76:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb78:	b99c      	cbnz	r4, 800eba2 <udp_input+0x96>
  if (pcb != NULL) {
 800eb7a:	b925      	cbnz	r5, 800eb86 <udp_input+0x7a>
  if (for_us) {
 800eb7c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d1da      	bne.n	800eb3c <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eb86:	2108      	movs	r1, #8
 800eb88:	4630      	mov	r0, r6
 800eb8a:	f7fc fa8b 	bl	800b0a4 <pbuf_remove_header>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d05e      	beq.n	800ec50 <udp_input+0x144>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800eb92:	4b41      	ldr	r3, [pc, #260]	; (800ec98 <udp_input+0x18c>)
 800eb94:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800eb98:	4945      	ldr	r1, [pc, #276]	; (800ecb0 <udp_input+0x1a4>)
 800eb9a:	4841      	ldr	r0, [pc, #260]	; (800eca0 <udp_input+0x194>)
 800eb9c:	f000 fc06 	bl	800f3ac <iprintf>
 800eba0:	e7cc      	b.n	800eb3c <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800eba2:	8a62      	ldrh	r2, [r4, #18]
 800eba4:	9803      	ldr	r0, [sp, #12]
 800eba6:	4282      	cmp	r2, r0
 800eba8:	d14d      	bne.n	800ec46 <udp_input+0x13a>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ebaa:	f1b8 0f00 	cmp.w	r8, #0
 800ebae:	d107      	bne.n	800ebc0 <udp_input+0xb4>
 800ebb0:	4663      	mov	r3, ip
 800ebb2:	2288      	movs	r2, #136	; 0x88
 800ebb4:	483a      	ldr	r0, [pc, #232]	; (800eca0 <udp_input+0x194>)
 800ebb6:	f000 fbf9 	bl	800f3ac <iprintf>
 800ebba:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800ec98 <udp_input+0x18c>
 800ebbe:	493b      	ldr	r1, [pc, #236]	; (800ecac <udp_input+0x1a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebc0:	7a20      	ldrb	r0, [r4, #8]
 800ebc2:	b130      	cbz	r0, 800ebd2 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800ebca:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ebcc:	b2d2      	uxtb	r2, r2
 800ebce:	4290      	cmp	r0, r2
 800ebd0:	d139      	bne.n	800ec46 <udp_input+0x13a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebd2:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800ebd4:	f1b9 0f00 	cmp.w	r9, #0
 800ebd8:	d030      	beq.n	800ec3c <udp_input+0x130>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebda:	b13a      	cbz	r2, 800ebec <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ebdc:	6978      	ldr	r0, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	d004      	beq.n	800ebec <udp_input+0xe0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ebe2:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ebe4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebe8:	4218      	tst	r0, r3
 800ebea:	d12c      	bne.n	800ec46 <udp_input+0x13a>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ebec:	7c20      	ldrb	r0, [r4, #16]
 800ebee:	0743      	lsls	r3, r0, #29
 800ebf0:	d40e      	bmi.n	800ec10 <udp_input+0x104>
        if (uncon_pcb == NULL) {
 800ebf2:	b35d      	cbz	r5, 800ec4c <udp_input+0x140>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ebf4:	f1b9 0f00 	cmp.w	r9, #0
 800ebf8:	d00a      	beq.n	800ec10 <udp_input+0x104>
 800ebfa:	6978      	ldr	r0, [r7, #20]
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	d107      	bne.n	800ec10 <udp_input+0x104>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ec00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ec04:	682b      	ldr	r3, [r5, #0]
 800ec06:	4283      	cmp	r3, r0
 800ec08:	d002      	beq.n	800ec10 <udp_input+0x104>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ec0a:	4290      	cmp	r0, r2
 800ec0c:	bf08      	it	eq
 800ec0e:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800ec10:	8aa2      	ldrh	r2, [r4, #20]
 800ec12:	9b02      	ldr	r3, [sp, #8]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d116      	bne.n	800ec46 <udp_input+0x13a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ec18:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800ec1a:	b112      	cbz	r2, 800ec22 <udp_input+0x116>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ec1c:	6938      	ldr	r0, [r7, #16]
 800ec1e:	4282      	cmp	r2, r0
 800ec20:	d111      	bne.n	800ec46 <udp_input+0x13a>
        if (prev != NULL) {
 800ec22:	f1ba 0f00 	cmp.w	sl, #0
 800ec26:	d007      	beq.n	800ec38 <udp_input+0x12c>
          prev->next = pcb->next;
 800ec28:	68e3      	ldr	r3, [r4, #12]
 800ec2a:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800ec2e:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800ec32:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800ec36:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800ec38:	4625      	mov	r5, r4
 800ec3a:	e7a4      	b.n	800eb86 <udp_input+0x7a>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec3c:	2a00      	cmp	r2, #0
 800ec3e:	d0d5      	beq.n	800ebec <udp_input+0xe0>
 800ec40:	6978      	ldr	r0, [r7, #20]
 800ec42:	4290      	cmp	r0, r2
 800ec44:	d0d2      	beq.n	800ebec <udp_input+0xe0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec46:	46a2      	mov	sl, r4
 800ec48:	68e4      	ldr	r4, [r4, #12]
 800ec4a:	e795      	b.n	800eb78 <udp_input+0x6c>
 800ec4c:	4625      	mov	r5, r4
 800ec4e:	e7df      	b.n	800ec10 <udp_input+0x104>
    if (pcb != NULL) {
 800ec50:	b16d      	cbz	r5, 800ec6e <udp_input+0x162>
      if (pcb->recv != NULL) {
 800ec52:	69ac      	ldr	r4, [r5, #24]
 800ec54:	2c00      	cmp	r4, #0
 800ec56:	f43f af71 	beq.w	800eb3c <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ec5a:	9b02      	ldr	r3, [sp, #8]
 800ec5c:	4632      	mov	r2, r6
 800ec5e:	4629      	mov	r1, r5
 800ec60:	9300      	str	r3, [sp, #0]
 800ec62:	4b14      	ldr	r3, [pc, #80]	; (800ecb4 <udp_input+0x1a8>)
 800ec64:	69e8      	ldr	r0, [r5, #28]
 800ec66:	47a0      	blx	r4
}
 800ec68:	b005      	add	sp, #20
 800ec6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec6e:	f1b9 0f00 	cmp.w	r9, #0
 800ec72:	f47f af63 	bne.w	800eb3c <udp_input+0x30>
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec7c:	2be0      	cmp	r3, #224	; 0xe0
 800ec7e:	f43f af5d 	beq.w	800eb3c <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800ec82:	89b9      	ldrh	r1, [r7, #12]
 800ec84:	4630      	mov	r0, r6
 800ec86:	3108      	adds	r1, #8
 800ec88:	b209      	sxth	r1, r1
 800ec8a:	f7fc fa37 	bl	800b0fc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800ec8e:	2103      	movs	r1, #3
 800ec90:	4630      	mov	r0, r6
 800ec92:	f7fa fe95 	bl	80099c0 <icmp_dest_unreach>
 800ec96:	e751      	b.n	800eb3c <udp_input+0x30>
 800ec98:	080173eb 	.word	0x080173eb
 800ec9c:	0801745d 	.word	0x0801745d
 800eca0:	080144fe 	.word	0x080144fe
 800eca4:	08017475 	.word	0x08017475
 800eca8:	20010250 	.word	0x20010250
 800ecac:	0801748e 	.word	0x0801748e
 800ecb0:	080174b3 	.word	0x080174b3
 800ecb4:	20010260 	.word	0x20010260
 800ecb8:	200140a8 	.word	0x200140a8

0800ecbc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ecbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800ecc0:	4c2b      	ldr	r4, [pc, #172]	; (800ed70 <udp_bind+0xb4>)
 800ecc2:	2900      	cmp	r1, #0
 800ecc4:	bf18      	it	ne
 800ecc6:	460c      	movne	r4, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecc8:	b950      	cbnz	r0, 800ece0 <udp_bind+0x24>
 800ecca:	4b2a      	ldr	r3, [pc, #168]	; (800ed74 <udp_bind+0xb8>)
 800eccc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ecd0:	4929      	ldr	r1, [pc, #164]	; (800ed78 <udp_bind+0xbc>)
 800ecd2:	482a      	ldr	r0, [pc, #168]	; (800ed7c <udp_bind+0xc0>)
 800ecd4:	f000 fb6a 	bl	800f3ac <iprintf>
 800ecd8:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ece0:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800ed84 <udp_bind+0xc8>
 800ece4:	f8dc 5000 	ldr.w	r5, [ip]
 800ece8:	4629      	mov	r1, r5
 800ecea:	b9c9      	cbnz	r1, 800ed20 <udp_bind+0x64>
  if (port == 0) {
 800ecec:	2a00      	cmp	r2, #0
 800ecee:	d13c      	bne.n	800ed6a <udp_bind+0xae>
 800ecf0:	4f23      	ldr	r7, [pc, #140]	; (800ed80 <udp_bind+0xc4>)
 800ecf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ecf6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800ecfa:	883a      	ldrh	r2, [r7, #0]
 800ecfc:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ecfe:	462e      	mov	r6, r5
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ed00:	bf16      	itet	ne
 800ed02:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ed04:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ed08:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed0a:	b97e      	cbnz	r6, 800ed2c <udp_bind+0x70>
 800ed0c:	803a      	strh	r2, [r7, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed0e:	6823      	ldr	r3, [r4, #0]
  pcb->local_port = port;
 800ed10:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed12:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800ed14:	b911      	cbnz	r1, 800ed1c <udp_bind+0x60>
    pcb->next = udp_pcbs;
 800ed16:	60c5      	str	r5, [r0, #12]
    udp_pcbs = pcb;
 800ed18:	f8cc 0000 	str.w	r0, [ip]
  return ERR_OK;
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	e7dd      	b.n	800ecdc <udp_bind+0x20>
    if (pcb == ipcb) {
 800ed20:	4281      	cmp	r1, r0
 800ed22:	d001      	beq.n	800ed28 <udp_bind+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed24:	68c9      	ldr	r1, [r1, #12]
 800ed26:	e7e0      	b.n	800ecea <udp_bind+0x2e>
      rebind = 1;
 800ed28:	2101      	movs	r1, #1
 800ed2a:	e7df      	b.n	800ecec <udp_bind+0x30>
    if (pcb->local_port == udp_port) {
 800ed2c:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800ed30:	4590      	cmp	r8, r2
 800ed32:	d107      	bne.n	800ed44 <udp_bind+0x88>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ed34:	3b01      	subs	r3, #1
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d1df      	bne.n	800ecfc <udp_bind+0x40>
 800ed3c:	803a      	strh	r2, [r7, #0]
      return ERR_USE;
 800ed3e:	f06f 0007 	mvn.w	r0, #7
 800ed42:	e7cb      	b.n	800ecdc <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed44:	68f6      	ldr	r6, [r6, #12]
 800ed46:	e7e0      	b.n	800ed0a <udp_bind+0x4e>
      if (pcb != ipcb) {
 800ed48:	4283      	cmp	r3, r0
 800ed4a:	d00a      	beq.n	800ed62 <udp_bind+0xa6>
          if ((ipcb->local_port == port) &&
 800ed4c:	8a5e      	ldrh	r6, [r3, #18]
 800ed4e:	4296      	cmp	r6, r2
 800ed50:	d107      	bne.n	800ed62 <udp_bind+0xa6>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ed52:	6827      	ldr	r7, [r4, #0]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed54:	681e      	ldr	r6, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ed56:	42be      	cmp	r6, r7
 800ed58:	d0f1      	beq.n	800ed3e <udp_bind+0x82>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ed5a:	2f00      	cmp	r7, #0
 800ed5c:	d0ef      	beq.n	800ed3e <udp_bind+0x82>
              ip_addr_isany(&ipcb->local_ip))) {
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	d0ed      	beq.n	800ed3e <udp_bind+0x82>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ed62:	68db      	ldr	r3, [r3, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1ef      	bne.n	800ed48 <udp_bind+0x8c>
 800ed68:	e7d1      	b.n	800ed0e <udp_bind+0x52>
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	e7fa      	b.n	800ed64 <udp_bind+0xa8>
 800ed6e:	bf00      	nop
 800ed70:	080142f8 	.word	0x080142f8
 800ed74:	080173eb 	.word	0x080173eb
 800ed78:	080174ce 	.word	0x080174ce
 800ed7c:	080144fe 	.word	0x080144fe
 800ed80:	20001a68 	.word	0x20001a68
 800ed84:	200140a8 	.word	0x200140a8

0800ed88 <udp_sendto_if_src>:
{
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	b085      	sub	sp, #20
 800ed8e:	460e      	mov	r6, r1
 800ed90:	4690      	mov	r8, r2
 800ed92:	4699      	mov	r9, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed94:	4607      	mov	r7, r0
{
 800ed96:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ed9a:	b960      	cbnz	r0, 800edb6 <udp_sendto_if_src+0x2e>
 800ed9c:	4b3e      	ldr	r3, [pc, #248]	; (800ee98 <udp_sendto_if_src+0x110>)
 800ed9e:	f240 22d1 	movw	r2, #721	; 0x2d1
 800eda2:	493e      	ldr	r1, [pc, #248]	; (800ee9c <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800eda4:	f06f 040f 	mvn.w	r4, #15
 800eda8:	483d      	ldr	r0, [pc, #244]	; (800eea0 <udp_sendto_if_src+0x118>)
 800edaa:	f000 faff 	bl	800f3ac <iprintf>
}
 800edae:	4620      	mov	r0, r4
 800edb0:	b005      	add	sp, #20
 800edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800edb6:	b921      	cbnz	r1, 800edc2 <udp_sendto_if_src+0x3a>
 800edb8:	4b37      	ldr	r3, [pc, #220]	; (800ee98 <udp_sendto_if_src+0x110>)
 800edba:	f240 22d2 	movw	r2, #722	; 0x2d2
 800edbe:	4939      	ldr	r1, [pc, #228]	; (800eea4 <udp_sendto_if_src+0x11c>)
 800edc0:	e7f0      	b.n	800eda4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800edc2:	b922      	cbnz	r2, 800edce <udp_sendto_if_src+0x46>
 800edc4:	4b34      	ldr	r3, [pc, #208]	; (800ee98 <udp_sendto_if_src+0x110>)
 800edc6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800edca:	4937      	ldr	r1, [pc, #220]	; (800eea8 <udp_sendto_if_src+0x120>)
 800edcc:	e7ea      	b.n	800eda4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800edce:	f1ba 0f00 	cmp.w	sl, #0
 800edd2:	d104      	bne.n	800edde <udp_sendto_if_src+0x56>
 800edd4:	4b30      	ldr	r3, [pc, #192]	; (800ee98 <udp_sendto_if_src+0x110>)
 800edd6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800edda:	4934      	ldr	r1, [pc, #208]	; (800eeac <udp_sendto_if_src+0x124>)
 800eddc:	e7e2      	b.n	800eda4 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800edde:	f1bb 0f00 	cmp.w	fp, #0
 800ede2:	d104      	bne.n	800edee <udp_sendto_if_src+0x66>
 800ede4:	4b2c      	ldr	r3, [pc, #176]	; (800ee98 <udp_sendto_if_src+0x110>)
 800ede6:	f240 22d5 	movw	r2, #725	; 0x2d5
 800edea:	4931      	ldr	r1, [pc, #196]	; (800eeb0 <udp_sendto_if_src+0x128>)
 800edec:	e7da      	b.n	800eda4 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800edee:	8a42      	ldrh	r2, [r0, #18]
 800edf0:	b13a      	cbz	r2, 800ee02 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800edf2:	8932      	ldrh	r2, [r6, #8]
 800edf4:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d909      	bls.n	800ee10 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800edfc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee00:	e7d5      	b.n	800edae <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ee02:	4601      	mov	r1, r0
 800ee04:	f7ff ff5a 	bl	800ecbc <udp_bind>
    if (err != ERR_OK) {
 800ee08:	4604      	mov	r4, r0
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d0f1      	beq.n	800edf2 <udp_sendto_if_src+0x6a>
 800ee0e:	e7ce      	b.n	800edae <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ee10:	2108      	movs	r1, #8
 800ee12:	4630      	mov	r0, r6
 800ee14:	f7fc f942 	bl	800b09c <pbuf_add_header>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d03a      	beq.n	800ee92 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ee1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ee20:	2108      	movs	r1, #8
 800ee22:	2022      	movs	r0, #34	; 0x22
 800ee24:	f7fc f9da 	bl	800b1dc <pbuf_alloc>
    if (q == NULL) {
 800ee28:	4605      	mov	r5, r0
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d0e6      	beq.n	800edfc <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800ee2e:	8933      	ldrh	r3, [r6, #8]
 800ee30:	b113      	cbz	r3, 800ee38 <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800ee32:	4631      	mov	r1, r6
 800ee34:	f7fc fb04 	bl	800b440 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ee38:	896b      	ldrh	r3, [r5, #10]
 800ee3a:	2b07      	cmp	r3, #7
 800ee3c:	d806      	bhi.n	800ee4c <udp_sendto_if_src+0xc4>
 800ee3e:	4b16      	ldr	r3, [pc, #88]	; (800ee98 <udp_sendto_if_src+0x110>)
 800ee40:	f240 320d 	movw	r2, #781	; 0x30d
 800ee44:	491b      	ldr	r1, [pc, #108]	; (800eeb4 <udp_sendto_if_src+0x12c>)
 800ee46:	4816      	ldr	r0, [pc, #88]	; (800eea0 <udp_sendto_if_src+0x118>)
 800ee48:	f000 fab0 	bl	800f3ac <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800ee4c:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800ee4e:	8a78      	ldrh	r0, [r7, #18]
 800ee50:	f7fb fb9c 	bl	800a58c <lwip_htons>
 800ee54:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ee56:	4648      	mov	r0, r9
 800ee58:	f7fb fb98 	bl	800a58c <lwip_htons>
  udphdr->chksum = 0x0000;
 800ee5c:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800ee5e:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800ee60:	71a3      	strb	r3, [r4, #6]
 800ee62:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800ee64:	8928      	ldrh	r0, [r5, #8]
 800ee66:	f7fb fb91 	bl	800a58c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ee6a:	2311      	movs	r3, #17
    udphdr->len = lwip_htons(q->tot_len);
 800ee6c:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ee6e:	4642      	mov	r2, r8
 800ee70:	f8cd b008 	str.w	fp, [sp, #8]
 800ee74:	4651      	mov	r1, sl
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	4628      	mov	r0, r5
 800ee7a:	7abb      	ldrb	r3, [r7, #10]
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	7afb      	ldrb	r3, [r7, #11]
 800ee80:	f7fa feb2 	bl	8009be8 <ip4_output_if_src>
  if (q != p) {
 800ee84:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ee86:	4604      	mov	r4, r0
  if (q != p) {
 800ee88:	d091      	beq.n	800edae <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	f7fc f93e 	bl	800b10c <pbuf_free>
    q = NULL;
 800ee90:	e78d      	b.n	800edae <udp_sendto_if_src+0x26>
 800ee92:	4635      	mov	r5, r6
 800ee94:	e7d0      	b.n	800ee38 <udp_sendto_if_src+0xb0>
 800ee96:	bf00      	nop
 800ee98:	080173eb 	.word	0x080173eb
 800ee9c:	080174e4 	.word	0x080174e4
 800eea0:	080144fe 	.word	0x080144fe
 800eea4:	08017503 	.word	0x08017503
 800eea8:	08017523 	.word	0x08017523
 800eeac:	08017545 	.word	0x08017545
 800eeb0:	08017567 	.word	0x08017567
 800eeb4:	08017588 	.word	0x08017588

0800eeb8 <udp_sendto_if>:
{
 800eeb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeba:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800eebc:	b950      	cbnz	r0, 800eed4 <udp_sendto_if+0x1c>
 800eebe:	4b18      	ldr	r3, [pc, #96]	; (800ef20 <udp_sendto_if+0x68>)
 800eec0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eec4:	4917      	ldr	r1, [pc, #92]	; (800ef24 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800eec6:	4818      	ldr	r0, [pc, #96]	; (800ef28 <udp_sendto_if+0x70>)
 800eec8:	f000 fa70 	bl	800f3ac <iprintf>
 800eecc:	f06f 000f 	mvn.w	r0, #15
}
 800eed0:	b002      	add	sp, #8
 800eed2:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800eed4:	b921      	cbnz	r1, 800eee0 <udp_sendto_if+0x28>
 800eed6:	4b12      	ldr	r3, [pc, #72]	; (800ef20 <udp_sendto_if+0x68>)
 800eed8:	f240 2281 	movw	r2, #641	; 0x281
 800eedc:	4913      	ldr	r1, [pc, #76]	; (800ef2c <udp_sendto_if+0x74>)
 800eede:	e7f2      	b.n	800eec6 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800eee0:	b922      	cbnz	r2, 800eeec <udp_sendto_if+0x34>
 800eee2:	4b0f      	ldr	r3, [pc, #60]	; (800ef20 <udp_sendto_if+0x68>)
 800eee4:	f240 2282 	movw	r2, #642	; 0x282
 800eee8:	4911      	ldr	r1, [pc, #68]	; (800ef30 <udp_sendto_if+0x78>)
 800eeea:	e7ec      	b.n	800eec6 <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800eeec:	b924      	cbnz	r4, 800eef8 <udp_sendto_if+0x40>
 800eeee:	4b0c      	ldr	r3, [pc, #48]	; (800ef20 <udp_sendto_if+0x68>)
 800eef0:	f240 2283 	movw	r2, #643	; 0x283
 800eef4:	490f      	ldr	r1, [pc, #60]	; (800ef34 <udp_sendto_if+0x7c>)
 800eef6:	e7e6      	b.n	800eec6 <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eef8:	6805      	ldr	r5, [r0, #0]
 800eefa:	b11d      	cbz	r5, 800ef04 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800eefc:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef00:	2ee0      	cmp	r6, #224	; 0xe0
 800ef02:	d105      	bne.n	800ef10 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800ef04:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ef06:	e9cd 4500 	strd	r4, r5, [sp]
 800ef0a:	f7ff ff3d 	bl	800ed88 <udp_sendto_if_src>
 800ef0e:	e7df      	b.n	800eed0 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ef10:	6866      	ldr	r6, [r4, #4]
 800ef12:	42b5      	cmp	r5, r6
 800ef14:	d101      	bne.n	800ef1a <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ef16:	4605      	mov	r5, r0
 800ef18:	e7f5      	b.n	800ef06 <udp_sendto_if+0x4e>
        return ERR_RTE;
 800ef1a:	f06f 0003 	mvn.w	r0, #3
 800ef1e:	e7d7      	b.n	800eed0 <udp_sendto_if+0x18>
 800ef20:	080173eb 	.word	0x080173eb
 800ef24:	080175b6 	.word	0x080175b6
 800ef28:	080144fe 	.word	0x080144fe
 800ef2c:	080175d1 	.word	0x080175d1
 800ef30:	080175ed 	.word	0x080175ed
 800ef34:	0801760b 	.word	0x0801760b

0800ef38 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	460d      	mov	r5, r1
 800ef3c:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef3e:	4604      	mov	r4, r0
 800ef40:	b948      	cbnz	r0, 800ef56 <udp_connect+0x1e>
 800ef42:	4b16      	ldr	r3, [pc, #88]	; (800ef9c <udp_connect+0x64>)
 800ef44:	f240 4235 	movw	r2, #1077	; 0x435
 800ef48:	4915      	ldr	r1, [pc, #84]	; (800efa0 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ef4a:	4816      	ldr	r0, [pc, #88]	; (800efa4 <udp_connect+0x6c>)
 800ef4c:	f000 fa2e 	bl	800f3ac <iprintf>
 800ef50:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800ef54:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ef56:	b921      	cbnz	r1, 800ef62 <udp_connect+0x2a>
 800ef58:	4b10      	ldr	r3, [pc, #64]	; (800ef9c <udp_connect+0x64>)
 800ef5a:	f240 4236 	movw	r2, #1078	; 0x436
 800ef5e:	4912      	ldr	r1, [pc, #72]	; (800efa8 <udp_connect+0x70>)
 800ef60:	e7f3      	b.n	800ef4a <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800ef62:	8a42      	ldrh	r2, [r0, #18]
 800ef64:	b16a      	cbz	r2, 800ef82 <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ef66:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800ef68:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ef6a:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800ef6c:	7c23      	ldrb	r3, [r4, #16]
 800ef6e:	f043 0304 	orr.w	r3, r3, #4
 800ef72:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ef74:	4b0d      	ldr	r3, [pc, #52]	; (800efac <udp_connect+0x74>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	4610      	mov	r0, r2
 800ef7a:	b940      	cbnz	r0, 800ef8e <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800ef7c:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800ef7e:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800ef80:	e7e8      	b.n	800ef54 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ef82:	4601      	mov	r1, r0
 800ef84:	f7ff fe9a 	bl	800ecbc <udp_bind>
    if (err != ERR_OK) {
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	d0ec      	beq.n	800ef66 <udp_connect+0x2e>
 800ef8c:	e7e2      	b.n	800ef54 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800ef8e:	42a0      	cmp	r0, r4
 800ef90:	d001      	beq.n	800ef96 <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ef92:	68c0      	ldr	r0, [r0, #12]
 800ef94:	e7f1      	b.n	800ef7a <udp_connect+0x42>
      return ERR_OK;
 800ef96:	2000      	movs	r0, #0
 800ef98:	e7dc      	b.n	800ef54 <udp_connect+0x1c>
 800ef9a:	bf00      	nop
 800ef9c:	080173eb 	.word	0x080173eb
 800efa0:	080176a1 	.word	0x080176a1
 800efa4:	080144fe 	.word	0x080144fe
 800efa8:	080176ba 	.word	0x080176ba
 800efac:	200140a8 	.word	0x200140a8

0800efb0 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800efb0:	b930      	cbnz	r0, 800efc0 <udp_recv+0x10>
 800efb2:	4b05      	ldr	r3, [pc, #20]	; (800efc8 <udp_recv+0x18>)
 800efb4:	f240 428a 	movw	r2, #1162	; 0x48a
 800efb8:	4904      	ldr	r1, [pc, #16]	; (800efcc <udp_recv+0x1c>)
 800efba:	4805      	ldr	r0, [pc, #20]	; (800efd0 <udp_recv+0x20>)
 800efbc:	f000 b9f6 	b.w	800f3ac <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800efc0:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	080173eb 	.word	0x080173eb
 800efcc:	080176f2 	.word	0x080176f2
 800efd0:	080144fe 	.word	0x080144fe

0800efd4 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800efd4:	4601      	mov	r1, r0
 800efd6:	b930      	cbnz	r0, 800efe6 <udp_remove+0x12>
 800efd8:	4b0d      	ldr	r3, [pc, #52]	; (800f010 <udp_remove+0x3c>)
 800efda:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800efde:	490d      	ldr	r1, [pc, #52]	; (800f014 <udp_remove+0x40>)
 800efe0:	480d      	ldr	r0, [pc, #52]	; (800f018 <udp_remove+0x44>)
 800efe2:	f000 b9e3 	b.w	800f3ac <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800efe6:	4a0d      	ldr	r2, [pc, #52]	; (800f01c <udp_remove+0x48>)
 800efe8:	6813      	ldr	r3, [r2, #0]
 800efea:	4283      	cmp	r3, r0
 800efec:	d105      	bne.n	800effa <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800efee:	68c3      	ldr	r3, [r0, #12]
 800eff0:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800eff2:	2000      	movs	r0, #0
 800eff4:	f7fb be2a 	b.w	800ac4c <memp_free>
 800eff8:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800effa:	2b00      	cmp	r3, #0
 800effc:	d0f9      	beq.n	800eff2 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	2a00      	cmp	r2, #0
 800f002:	d0f6      	beq.n	800eff2 <udp_remove+0x1e>
 800f004:	428a      	cmp	r2, r1
 800f006:	d1f7      	bne.n	800eff8 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800f008:	68ca      	ldr	r2, [r1, #12]
 800f00a:	60da      	str	r2, [r3, #12]
        break;
 800f00c:	e7f1      	b.n	800eff2 <udp_remove+0x1e>
 800f00e:	bf00      	nop
 800f010:	080173eb 	.word	0x080173eb
 800f014:	08017708 	.word	0x08017708
 800f018:	080144fe 	.word	0x080144fe
 800f01c:	200140a8 	.word	0x200140a8

0800f020 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f020:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f022:	2000      	movs	r0, #0
 800f024:	f7fb fde2 	bl	800abec <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f028:	4604      	mov	r4, r0
 800f02a:	b128      	cbz	r0, 800f038 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f02c:	2220      	movs	r2, #32
 800f02e:	2100      	movs	r1, #0
 800f030:	f000 f9b4 	bl	800f39c <memset>
    pcb->ttl = UDP_TTL;
 800f034:	23ff      	movs	r3, #255	; 0xff
 800f036:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800f038:	4620      	mov	r0, r4
 800f03a:	bd10      	pop	{r4, pc}

0800f03c <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800f03c:	f7ff bff0 	b.w	800f020 <udp_new>

0800f040 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f040:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f042:	b138      	cbz	r0, 800f054 <udp_netif_ip_addr_changed+0x14>
 800f044:	6803      	ldr	r3, [r0, #0]
 800f046:	b12b      	cbz	r3, 800f054 <udp_netif_ip_addr_changed+0x14>
 800f048:	b121      	cbz	r1, 800f054 <udp_netif_ip_addr_changed+0x14>
 800f04a:	680b      	ldr	r3, [r1, #0]
 800f04c:	b113      	cbz	r3, 800f054 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f04e:	4b06      	ldr	r3, [pc, #24]	; (800f068 <udp_netif_ip_addr_changed+0x28>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	b903      	cbnz	r3, 800f056 <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800f054:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f056:	681c      	ldr	r4, [r3, #0]
 800f058:	6802      	ldr	r2, [r0, #0]
 800f05a:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f05c:	bf04      	itt	eq
 800f05e:	680a      	ldreq	r2, [r1, #0]
 800f060:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	e7f5      	b.n	800f052 <udp_netif_ip_addr_changed+0x12>
 800f066:	bf00      	nop
 800f068:	200140a8 	.word	0x200140a8

0800f06c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f06c:	8943      	ldrh	r3, [r0, #10]
 800f06e:	2b0e      	cmp	r3, #14
{
 800f070:	b570      	push	{r4, r5, r6, lr}
 800f072:	4604      	mov	r4, r0
 800f074:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800f076:	d91a      	bls.n	800f0ae <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f078:	7bc3      	ldrb	r3, [r0, #15]
 800f07a:	b91b      	cbnz	r3, 800f084 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800f07c:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800f080:	3301      	adds	r3, #1
 800f082:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f084:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f086:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800f088:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800f08a:	07d9      	lsls	r1, r3, #31
 800f08c:	d50a      	bpl.n	800f0a4 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f08e:	2b01      	cmp	r3, #1
 800f090:	d111      	bne.n	800f0b6 <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f092:	7843      	ldrb	r3, [r0, #1]
 800f094:	b933      	cbnz	r3, 800f0a4 <ethernet_input+0x38>
 800f096:	7883      	ldrb	r3, [r0, #2]
 800f098:	2b5e      	cmp	r3, #94	; 0x5e
 800f09a:	d103      	bne.n	800f0a4 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f09c:	7b63      	ldrb	r3, [r4, #13]
 800f09e:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f0a2:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800f0a4:	2e08      	cmp	r6, #8
 800f0a6:	d010      	beq.n	800f0ca <ethernet_input+0x5e>
 800f0a8:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800f0ac:	d01d      	beq.n	800f0ea <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f7fc f82c 	bl	800b10c <pbuf_free>
  return ERR_OK;
 800f0b4:	e017      	b.n	800f0e6 <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f0b6:	2206      	movs	r2, #6
 800f0b8:	4913      	ldr	r1, [pc, #76]	; (800f108 <ethernet_input+0x9c>)
 800f0ba:	f000 f951 	bl	800f360 <memcmp>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d1f0      	bne.n	800f0a4 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800f0c2:	7b63      	ldrb	r3, [r4, #13]
 800f0c4:	f043 0308 	orr.w	r3, r3, #8
 800f0c8:	e7eb      	b.n	800f0a2 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f0ca:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800f0ce:	071a      	lsls	r2, r3, #28
 800f0d0:	d5ed      	bpl.n	800f0ae <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f0d2:	210e      	movs	r1, #14
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	f7fb ffe5 	bl	800b0a4 <pbuf_remove_header>
 800f0da:	2800      	cmp	r0, #0
 800f0dc:	d1e7      	bne.n	800f0ae <ethernet_input+0x42>
        ip4_input(p, netif);
 800f0de:	4629      	mov	r1, r5
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f7fa fcbd 	bl	8009a60 <ip4_input>
}
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f0ea:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800f0ee:	071b      	lsls	r3, r3, #28
 800f0f0:	d5dd      	bpl.n	800f0ae <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f0f2:	210e      	movs	r1, #14
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f7fb ffd5 	bl	800b0a4 <pbuf_remove_header>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d1d7      	bne.n	800f0ae <ethernet_input+0x42>
        etharp_input(p, netif);
 800f0fe:	4629      	mov	r1, r5
 800f100:	4620      	mov	r0, r4
 800f102:	f7fa f8ff 	bl	8009304 <etharp_input>
      break;
 800f106:	e7ee      	b.n	800f0e6 <ethernet_input+0x7a>
 800f108:	08014448 	.word	0x08014448

0800f10c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	460d      	mov	r5, r1
 800f112:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f114:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800f118:	4616      	mov	r6, r2
 800f11a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800f11c:	f7fb fa36 	bl	800a58c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f120:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800f122:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f124:	4628      	mov	r0, r5
 800f126:	f7fb ffb9 	bl	800b09c <pbuf_add_header>
 800f12a:	b9e0      	cbnz	r0, 800f166 <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f12c:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800f12e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	600b      	str	r3, [r1, #0]
 800f136:	88bb      	ldrh	r3, [r7, #4]
 800f138:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f13a:	6833      	ldr	r3, [r6, #0]
 800f13c:	f8c1 3006 	str.w	r3, [r1, #6]
 800f140:	88b3      	ldrh	r3, [r6, #4]
 800f142:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f144:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800f148:	2b06      	cmp	r3, #6
 800f14a:	d006      	beq.n	800f15a <ethernet_output+0x4e>
 800f14c:	4b08      	ldr	r3, [pc, #32]	; (800f170 <ethernet_output+0x64>)
 800f14e:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f152:	4908      	ldr	r1, [pc, #32]	; (800f174 <ethernet_output+0x68>)
 800f154:	4808      	ldr	r0, [pc, #32]	; (800f178 <ethernet_output+0x6c>)
 800f156:	f000 f929 	bl	800f3ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f15a:	69a3      	ldr	r3, [r4, #24]
 800f15c:	4629      	mov	r1, r5
 800f15e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800f160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800f164:	4718      	bx	r3
}
 800f166:	f06f 0001 	mvn.w	r0, #1
 800f16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f16e:	bf00      	nop
 800f170:	08017720 	.word	0x08017720
 800f174:	08017798 	.word	0x08017798
 800f178:	080144fe 	.word	0x080144fe

0800f17c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800f17c:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800f17e:	2304      	movs	r3, #4
{
 800f180:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800f182:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800f184:	4668      	mov	r0, sp
 800f186:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800f188:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800f18a:	f7f7 fbd5 	bl	8006938 <osMessageCreate>
 800f18e:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800f190:	fab0 f080 	clz	r0, r0
 800f194:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800f196:	4240      	negs	r0, r0
 800f198:	b002      	add	sp, #8
 800f19a:	bd10      	pop	{r4, pc}

0800f19c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800f19c:	b510      	push	{r4, lr}
 800f19e:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800f1a0:	6800      	ldr	r0, [r0, #0]
 800f1a2:	f7f7 fc38 	bl	8006a16 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800f1a6:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800f1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800f1ac:	f7f7 bc3a 	b.w	8006a24 <osMessageDelete>

0800f1b0 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	6800      	ldr	r0, [r0, #0]
{
 800f1b4:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800f1b6:	f7f7 fbc4 	bl	8006942 <osMessagePut>
 800f1ba:	3800      	subs	r0, #0
 800f1bc:	bf18      	it	ne
 800f1be:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800f1c0:	4240      	negs	r0, r0
 800f1c2:	bd08      	pop	{r3, pc}

0800f1c4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800f1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1c6:	4617      	mov	r7, r2
 800f1c8:	b085      	sub	sp, #20
 800f1ca:	4606      	mov	r6, r0
 800f1cc:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800f1ce:	f7f7 faf4 	bl	80067ba <osKernelSysTick>
 800f1d2:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800f1d4:	b177      	cbz	r7, 800f1f4 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800f1d6:	463a      	mov	r2, r7
 800f1d8:	6831      	ldr	r1, [r6, #0]
 800f1da:	a801      	add	r0, sp, #4
 800f1dc:	f7f7 fbd9 	bl	8006992 <osMessageGet>

    if(event.status == osEventMessage)
 800f1e0:	9b01      	ldr	r3, [sp, #4]
 800f1e2:	2b10      	cmp	r3, #16
 800f1e4:	d10d      	bne.n	800f202 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800f1e6:	9b02      	ldr	r3, [sp, #8]
 800f1e8:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800f1ea:	f7f7 fae6 	bl	80067ba <osKernelSysTick>
 800f1ee:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800f1f0:	b005      	add	sp, #20
 800f1f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800f1f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f1f8:	6831      	ldr	r1, [r6, #0]
 800f1fa:	a801      	add	r0, sp, #4
 800f1fc:	f7f7 fbc9 	bl	8006992 <osMessageGet>
 800f200:	e7f1      	b.n	800f1e6 <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800f202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f206:	e7f3      	b.n	800f1f0 <sys_arch_mbox_fetch+0x2c>

0800f208 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800f208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f20a:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800f20c:	2200      	movs	r2, #0
 800f20e:	6801      	ldr	r1, [r0, #0]
 800f210:	a801      	add	r0, sp, #4
 800f212:	f7f7 fbbe 	bl	8006992 <osMessageGet>

  if(event.status == osEventMessage)
 800f216:	9b01      	ldr	r3, [sp, #4]
 800f218:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800f21a:	bf05      	ittet	eq
 800f21c:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800f21e:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800f220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    *msg = (void *)event.value.v;
 800f224:	6023      	streq	r3, [r4, #0]
  }
}
 800f226:	b004      	add	sp, #16
 800f228:	bd10      	pop	{r4, pc}

0800f22a <sys_mbox_valid>:
 800f22a:	6800      	ldr	r0, [r0, #0]
 800f22c:	3800      	subs	r0, #0
 800f22e:	bf18      	it	ne
 800f230:	2001      	movne	r0, #1
 800f232:	4770      	bx	lr

0800f234 <sys_mbox_set_invalid>:
 800f234:	2300      	movs	r3, #0
 800f236:	6003      	str	r3, [r0, #0]
 800f238:	4770      	bx	lr

0800f23a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800f23a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f23c:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800f23e:	2400      	movs	r4, #0
{
 800f240:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800f242:	a801      	add	r0, sp, #4
 800f244:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800f246:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800f248:	f7f7 fb38 	bl	80068bc <osSemaphoreCreate>
 800f24c:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800f24e:	b130      	cbz	r0, 800f25e <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800f250:	b945      	cbnz	r5, 800f264 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800f252:	4629      	mov	r1, r5
 800f254:	f7f7 fb47 	bl	80068e6 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800f258:	4628      	mov	r0, r5
}
 800f25a:	b002      	add	sp, #8
 800f25c:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800f25e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f262:	e7fa      	b.n	800f25a <sys_sem_new+0x20>
  return ERR_OK;
 800f264:	4620      	mov	r0, r4
 800f266:	e7f8      	b.n	800f25a <sys_sem_new+0x20>

0800f268 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800f268:	6800      	ldr	r0, [r0, #0]
 800f26a:	f7f7 bb61 	b.w	8006930 <osSemaphoreRelease>

0800f26e <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800f26e:	6800      	ldr	r0, [r0, #0]
 800f270:	f7f7 bb60 	b.w	8006934 <osSemaphoreDelete>

0800f274 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800f274:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800f276:	3800      	subs	r0, #0
 800f278:	bf18      	it	ne
 800f27a:	2001      	movne	r0, #1
 800f27c:	4770      	bx	lr

0800f27e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800f27e:	2300      	movs	r3, #0
 800f280:	6003      	str	r3, [r0, #0]
}
 800f282:	4770      	bx	lr

0800f284 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800f284:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800f286:	4803      	ldr	r0, [pc, #12]	; (800f294 <sys_init+0x10>)
 800f288:	f7f7 fac3 	bl	8006812 <osMutexCreate>
 800f28c:	4b02      	ldr	r3, [pc, #8]	; (800f298 <sys_init+0x14>)
 800f28e:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800f290:	bd08      	pop	{r3, pc}
 800f292:	bf00      	nop
 800f294:	08014454 	.word	0x08014454
 800f298:	200140ac 	.word	0x200140ac

0800f29c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f29c:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800f29e:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f2a0:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f2a2:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800f2a4:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f2a6:	f7f7 fab4 	bl	8006812 <osMutexCreate>
 800f2aa:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800f2ac:	fab0 f080 	clz	r0, r0
 800f2b0:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800f2b2:	4240      	negs	r0, r0
 800f2b4:	b002      	add	sp, #8
 800f2b6:	bd10      	pop	{r4, pc}

0800f2b8 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800f2b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f2bc:	6800      	ldr	r0, [r0, #0]
 800f2be:	f7f7 baab 	b.w	8006818 <osMutexWait>

0800f2c2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800f2c2:	6800      	ldr	r0, [r0, #0]
 800f2c4:	f7f7 bacd 	b.w	8006862 <osMutexRelease>

0800f2c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f2c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f2ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800f2ce:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800f2d0:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f2d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f2d6:	2100      	movs	r1, #0
 800f2d8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800f2dc:	4611      	mov	r1, r2
 800f2de:	f7f7 fa73 	bl	80067c8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800f2e2:	b007      	add	sp, #28
 800f2e4:	f85d fb04 	ldr.w	pc, [sp], #4

0800f2e8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f2e8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800f2ea:	4b04      	ldr	r3, [pc, #16]	; (800f2fc <sys_arch_protect+0x14>)
 800f2ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f2f0:	6818      	ldr	r0, [r3, #0]
 800f2f2:	f7f7 fa91 	bl	8006818 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800f2f6:	2001      	movs	r0, #1
 800f2f8:	bd08      	pop	{r3, pc}
 800f2fa:	bf00      	nop
 800f2fc:	200140ac 	.word	0x200140ac

0800f300 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f300:	4b01      	ldr	r3, [pc, #4]	; (800f308 <sys_arch_unprotect+0x8>)
 800f302:	6818      	ldr	r0, [r3, #0]
 800f304:	f7f7 baad 	b.w	8006862 <osMutexRelease>
 800f308:	200140ac 	.word	0x200140ac

0800f30c <__errno>:
 800f30c:	4b01      	ldr	r3, [pc, #4]	; (800f314 <__errno+0x8>)
 800f30e:	6818      	ldr	r0, [r3, #0]
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	20001a6c 	.word	0x20001a6c

0800f318 <__libc_init_array>:
 800f318:	b570      	push	{r4, r5, r6, lr}
 800f31a:	4d0d      	ldr	r5, [pc, #52]	; (800f350 <__libc_init_array+0x38>)
 800f31c:	4c0d      	ldr	r4, [pc, #52]	; (800f354 <__libc_init_array+0x3c>)
 800f31e:	1b64      	subs	r4, r4, r5
 800f320:	10a4      	asrs	r4, r4, #2
 800f322:	2600      	movs	r6, #0
 800f324:	42a6      	cmp	r6, r4
 800f326:	d109      	bne.n	800f33c <__libc_init_array+0x24>
 800f328:	4d0b      	ldr	r5, [pc, #44]	; (800f358 <__libc_init_array+0x40>)
 800f32a:	4c0c      	ldr	r4, [pc, #48]	; (800f35c <__libc_init_array+0x44>)
 800f32c:	f001 f90c 	bl	8010548 <_init>
 800f330:	1b64      	subs	r4, r4, r5
 800f332:	10a4      	asrs	r4, r4, #2
 800f334:	2600      	movs	r6, #0
 800f336:	42a6      	cmp	r6, r4
 800f338:	d105      	bne.n	800f346 <__libc_init_array+0x2e>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f340:	4798      	blx	r3
 800f342:	3601      	adds	r6, #1
 800f344:	e7ee      	b.n	800f324 <__libc_init_array+0xc>
 800f346:	f855 3b04 	ldr.w	r3, [r5], #4
 800f34a:	4798      	blx	r3
 800f34c:	3601      	adds	r6, #1
 800f34e:	e7f2      	b.n	800f336 <__libc_init_array+0x1e>
 800f350:	0801791c 	.word	0x0801791c
 800f354:	0801791c 	.word	0x0801791c
 800f358:	0801791c 	.word	0x0801791c
 800f35c:	08017920 	.word	0x08017920

0800f360 <memcmp>:
 800f360:	b510      	push	{r4, lr}
 800f362:	3901      	subs	r1, #1
 800f364:	4402      	add	r2, r0
 800f366:	4290      	cmp	r0, r2
 800f368:	d101      	bne.n	800f36e <memcmp+0xe>
 800f36a:	2000      	movs	r0, #0
 800f36c:	e005      	b.n	800f37a <memcmp+0x1a>
 800f36e:	7803      	ldrb	r3, [r0, #0]
 800f370:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f374:	42a3      	cmp	r3, r4
 800f376:	d001      	beq.n	800f37c <memcmp+0x1c>
 800f378:	1b18      	subs	r0, r3, r4
 800f37a:	bd10      	pop	{r4, pc}
 800f37c:	3001      	adds	r0, #1
 800f37e:	e7f2      	b.n	800f366 <memcmp+0x6>

0800f380 <memcpy>:
 800f380:	440a      	add	r2, r1
 800f382:	4291      	cmp	r1, r2
 800f384:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f388:	d100      	bne.n	800f38c <memcpy+0xc>
 800f38a:	4770      	bx	lr
 800f38c:	b510      	push	{r4, lr}
 800f38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f392:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f396:	4291      	cmp	r1, r2
 800f398:	d1f9      	bne.n	800f38e <memcpy+0xe>
 800f39a:	bd10      	pop	{r4, pc}

0800f39c <memset>:
 800f39c:	4402      	add	r2, r0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d100      	bne.n	800f3a6 <memset+0xa>
 800f3a4:	4770      	bx	lr
 800f3a6:	f803 1b01 	strb.w	r1, [r3], #1
 800f3aa:	e7f9      	b.n	800f3a0 <memset+0x4>

0800f3ac <iprintf>:
 800f3ac:	b40f      	push	{r0, r1, r2, r3}
 800f3ae:	4b0a      	ldr	r3, [pc, #40]	; (800f3d8 <iprintf+0x2c>)
 800f3b0:	b513      	push	{r0, r1, r4, lr}
 800f3b2:	681c      	ldr	r4, [r3, #0]
 800f3b4:	b124      	cbz	r4, 800f3c0 <iprintf+0x14>
 800f3b6:	69a3      	ldr	r3, [r4, #24]
 800f3b8:	b913      	cbnz	r3, 800f3c0 <iprintf+0x14>
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 fac2 	bl	800f944 <__sinit>
 800f3c0:	ab05      	add	r3, sp, #20
 800f3c2:	9a04      	ldr	r2, [sp, #16]
 800f3c4:	68a1      	ldr	r1, [r4, #8]
 800f3c6:	9301      	str	r3, [sp, #4]
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f000 fce5 	bl	800fd98 <_vfiprintf_r>
 800f3ce:	b002      	add	sp, #8
 800f3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3d4:	b004      	add	sp, #16
 800f3d6:	4770      	bx	lr
 800f3d8:	20001a6c 	.word	0x20001a6c

0800f3dc <_puts_r>:
 800f3dc:	b570      	push	{r4, r5, r6, lr}
 800f3de:	460e      	mov	r6, r1
 800f3e0:	4605      	mov	r5, r0
 800f3e2:	b118      	cbz	r0, 800f3ec <_puts_r+0x10>
 800f3e4:	6983      	ldr	r3, [r0, #24]
 800f3e6:	b90b      	cbnz	r3, 800f3ec <_puts_r+0x10>
 800f3e8:	f000 faac 	bl	800f944 <__sinit>
 800f3ec:	69ab      	ldr	r3, [r5, #24]
 800f3ee:	68ac      	ldr	r4, [r5, #8]
 800f3f0:	b913      	cbnz	r3, 800f3f8 <_puts_r+0x1c>
 800f3f2:	4628      	mov	r0, r5
 800f3f4:	f000 faa6 	bl	800f944 <__sinit>
 800f3f8:	4b2c      	ldr	r3, [pc, #176]	; (800f4ac <_puts_r+0xd0>)
 800f3fa:	429c      	cmp	r4, r3
 800f3fc:	d120      	bne.n	800f440 <_puts_r+0x64>
 800f3fe:	686c      	ldr	r4, [r5, #4]
 800f400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f402:	07db      	lsls	r3, r3, #31
 800f404:	d405      	bmi.n	800f412 <_puts_r+0x36>
 800f406:	89a3      	ldrh	r3, [r4, #12]
 800f408:	0598      	lsls	r0, r3, #22
 800f40a:	d402      	bmi.n	800f412 <_puts_r+0x36>
 800f40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f40e:	f000 fb49 	bl	800faa4 <__retarget_lock_acquire_recursive>
 800f412:	89a3      	ldrh	r3, [r4, #12]
 800f414:	0719      	lsls	r1, r3, #28
 800f416:	d51d      	bpl.n	800f454 <_puts_r+0x78>
 800f418:	6923      	ldr	r3, [r4, #16]
 800f41a:	b1db      	cbz	r3, 800f454 <_puts_r+0x78>
 800f41c:	3e01      	subs	r6, #1
 800f41e:	68a3      	ldr	r3, [r4, #8]
 800f420:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f424:	3b01      	subs	r3, #1
 800f426:	60a3      	str	r3, [r4, #8]
 800f428:	bb39      	cbnz	r1, 800f47a <_puts_r+0x9e>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	da38      	bge.n	800f4a0 <_puts_r+0xc4>
 800f42e:	4622      	mov	r2, r4
 800f430:	210a      	movs	r1, #10
 800f432:	4628      	mov	r0, r5
 800f434:	f000 f88e 	bl	800f554 <__swbuf_r>
 800f438:	3001      	adds	r0, #1
 800f43a:	d011      	beq.n	800f460 <_puts_r+0x84>
 800f43c:	250a      	movs	r5, #10
 800f43e:	e011      	b.n	800f464 <_puts_r+0x88>
 800f440:	4b1b      	ldr	r3, [pc, #108]	; (800f4b0 <_puts_r+0xd4>)
 800f442:	429c      	cmp	r4, r3
 800f444:	d101      	bne.n	800f44a <_puts_r+0x6e>
 800f446:	68ac      	ldr	r4, [r5, #8]
 800f448:	e7da      	b.n	800f400 <_puts_r+0x24>
 800f44a:	4b1a      	ldr	r3, [pc, #104]	; (800f4b4 <_puts_r+0xd8>)
 800f44c:	429c      	cmp	r4, r3
 800f44e:	bf08      	it	eq
 800f450:	68ec      	ldreq	r4, [r5, #12]
 800f452:	e7d5      	b.n	800f400 <_puts_r+0x24>
 800f454:	4621      	mov	r1, r4
 800f456:	4628      	mov	r0, r5
 800f458:	f000 f8ce 	bl	800f5f8 <__swsetup_r>
 800f45c:	2800      	cmp	r0, #0
 800f45e:	d0dd      	beq.n	800f41c <_puts_r+0x40>
 800f460:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f466:	07da      	lsls	r2, r3, #31
 800f468:	d405      	bmi.n	800f476 <_puts_r+0x9a>
 800f46a:	89a3      	ldrh	r3, [r4, #12]
 800f46c:	059b      	lsls	r3, r3, #22
 800f46e:	d402      	bmi.n	800f476 <_puts_r+0x9a>
 800f470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f472:	f000 fb18 	bl	800faa6 <__retarget_lock_release_recursive>
 800f476:	4628      	mov	r0, r5
 800f478:	bd70      	pop	{r4, r5, r6, pc}
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da04      	bge.n	800f488 <_puts_r+0xac>
 800f47e:	69a2      	ldr	r2, [r4, #24]
 800f480:	429a      	cmp	r2, r3
 800f482:	dc06      	bgt.n	800f492 <_puts_r+0xb6>
 800f484:	290a      	cmp	r1, #10
 800f486:	d004      	beq.n	800f492 <_puts_r+0xb6>
 800f488:	6823      	ldr	r3, [r4, #0]
 800f48a:	1c5a      	adds	r2, r3, #1
 800f48c:	6022      	str	r2, [r4, #0]
 800f48e:	7019      	strb	r1, [r3, #0]
 800f490:	e7c5      	b.n	800f41e <_puts_r+0x42>
 800f492:	4622      	mov	r2, r4
 800f494:	4628      	mov	r0, r5
 800f496:	f000 f85d 	bl	800f554 <__swbuf_r>
 800f49a:	3001      	adds	r0, #1
 800f49c:	d1bf      	bne.n	800f41e <_puts_r+0x42>
 800f49e:	e7df      	b.n	800f460 <_puts_r+0x84>
 800f4a0:	6823      	ldr	r3, [r4, #0]
 800f4a2:	250a      	movs	r5, #10
 800f4a4:	1c5a      	adds	r2, r3, #1
 800f4a6:	6022      	str	r2, [r4, #0]
 800f4a8:	701d      	strb	r5, [r3, #0]
 800f4aa:	e7db      	b.n	800f464 <_puts_r+0x88>
 800f4ac:	080178a0 	.word	0x080178a0
 800f4b0:	080178c0 	.word	0x080178c0
 800f4b4:	08017880 	.word	0x08017880

0800f4b8 <puts>:
 800f4b8:	4b02      	ldr	r3, [pc, #8]	; (800f4c4 <puts+0xc>)
 800f4ba:	4601      	mov	r1, r0
 800f4bc:	6818      	ldr	r0, [r3, #0]
 800f4be:	f7ff bf8d 	b.w	800f3dc <_puts_r>
 800f4c2:	bf00      	nop
 800f4c4:	20001a6c 	.word	0x20001a6c

0800f4c8 <rand>:
 800f4c8:	4b16      	ldr	r3, [pc, #88]	; (800f524 <rand+0x5c>)
 800f4ca:	b510      	push	{r4, lr}
 800f4cc:	681c      	ldr	r4, [r3, #0]
 800f4ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4d0:	b9b3      	cbnz	r3, 800f500 <rand+0x38>
 800f4d2:	2018      	movs	r0, #24
 800f4d4:	f000 fb4e 	bl	800fb74 <malloc>
 800f4d8:	63a0      	str	r0, [r4, #56]	; 0x38
 800f4da:	b928      	cbnz	r0, 800f4e8 <rand+0x20>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	4b12      	ldr	r3, [pc, #72]	; (800f528 <rand+0x60>)
 800f4e0:	4812      	ldr	r0, [pc, #72]	; (800f52c <rand+0x64>)
 800f4e2:	214e      	movs	r1, #78	; 0x4e
 800f4e4:	f000 f8f6 	bl	800f6d4 <__assert_func>
 800f4e8:	4a11      	ldr	r2, [pc, #68]	; (800f530 <rand+0x68>)
 800f4ea:	4b12      	ldr	r3, [pc, #72]	; (800f534 <rand+0x6c>)
 800f4ec:	e9c0 2300 	strd	r2, r3, [r0]
 800f4f0:	4b11      	ldr	r3, [pc, #68]	; (800f538 <rand+0x70>)
 800f4f2:	6083      	str	r3, [r0, #8]
 800f4f4:	230b      	movs	r3, #11
 800f4f6:	8183      	strh	r3, [r0, #12]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f500:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800f502:	4a0e      	ldr	r2, [pc, #56]	; (800f53c <rand+0x74>)
 800f504:	6920      	ldr	r0, [r4, #16]
 800f506:	6963      	ldr	r3, [r4, #20]
 800f508:	490d      	ldr	r1, [pc, #52]	; (800f540 <rand+0x78>)
 800f50a:	4342      	muls	r2, r0
 800f50c:	fb01 2203 	mla	r2, r1, r3, r2
 800f510:	fba0 0101 	umull	r0, r1, r0, r1
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	eb42 0001 	adc.w	r0, r2, r1
 800f51a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800f51e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f522:	bd10      	pop	{r4, pc}
 800f524:	20001a6c 	.word	0x20001a6c
 800f528:	080177d0 	.word	0x080177d0
 800f52c:	080177e7 	.word	0x080177e7
 800f530:	abcd330e 	.word	0xabcd330e
 800f534:	e66d1234 	.word	0xe66d1234
 800f538:	0005deec 	.word	0x0005deec
 800f53c:	5851f42d 	.word	0x5851f42d
 800f540:	4c957f2d 	.word	0x4c957f2d

0800f544 <strcpy>:
 800f544:	4603      	mov	r3, r0
 800f546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f54a:	f803 2b01 	strb.w	r2, [r3], #1
 800f54e:	2a00      	cmp	r2, #0
 800f550:	d1f9      	bne.n	800f546 <strcpy+0x2>
 800f552:	4770      	bx	lr

0800f554 <__swbuf_r>:
 800f554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f556:	460e      	mov	r6, r1
 800f558:	4614      	mov	r4, r2
 800f55a:	4605      	mov	r5, r0
 800f55c:	b118      	cbz	r0, 800f566 <__swbuf_r+0x12>
 800f55e:	6983      	ldr	r3, [r0, #24]
 800f560:	b90b      	cbnz	r3, 800f566 <__swbuf_r+0x12>
 800f562:	f000 f9ef 	bl	800f944 <__sinit>
 800f566:	4b21      	ldr	r3, [pc, #132]	; (800f5ec <__swbuf_r+0x98>)
 800f568:	429c      	cmp	r4, r3
 800f56a:	d12b      	bne.n	800f5c4 <__swbuf_r+0x70>
 800f56c:	686c      	ldr	r4, [r5, #4]
 800f56e:	69a3      	ldr	r3, [r4, #24]
 800f570:	60a3      	str	r3, [r4, #8]
 800f572:	89a3      	ldrh	r3, [r4, #12]
 800f574:	071a      	lsls	r2, r3, #28
 800f576:	d52f      	bpl.n	800f5d8 <__swbuf_r+0x84>
 800f578:	6923      	ldr	r3, [r4, #16]
 800f57a:	b36b      	cbz	r3, 800f5d8 <__swbuf_r+0x84>
 800f57c:	6923      	ldr	r3, [r4, #16]
 800f57e:	6820      	ldr	r0, [r4, #0]
 800f580:	1ac0      	subs	r0, r0, r3
 800f582:	6963      	ldr	r3, [r4, #20]
 800f584:	b2f6      	uxtb	r6, r6
 800f586:	4283      	cmp	r3, r0
 800f588:	4637      	mov	r7, r6
 800f58a:	dc04      	bgt.n	800f596 <__swbuf_r+0x42>
 800f58c:	4621      	mov	r1, r4
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 f944 	bl	800f81c <_fflush_r>
 800f594:	bb30      	cbnz	r0, 800f5e4 <__swbuf_r+0x90>
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	3b01      	subs	r3, #1
 800f59a:	60a3      	str	r3, [r4, #8]
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	1c5a      	adds	r2, r3, #1
 800f5a0:	6022      	str	r2, [r4, #0]
 800f5a2:	701e      	strb	r6, [r3, #0]
 800f5a4:	6963      	ldr	r3, [r4, #20]
 800f5a6:	3001      	adds	r0, #1
 800f5a8:	4283      	cmp	r3, r0
 800f5aa:	d004      	beq.n	800f5b6 <__swbuf_r+0x62>
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	07db      	lsls	r3, r3, #31
 800f5b0:	d506      	bpl.n	800f5c0 <__swbuf_r+0x6c>
 800f5b2:	2e0a      	cmp	r6, #10
 800f5b4:	d104      	bne.n	800f5c0 <__swbuf_r+0x6c>
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	4628      	mov	r0, r5
 800f5ba:	f000 f92f 	bl	800f81c <_fflush_r>
 800f5be:	b988      	cbnz	r0, 800f5e4 <__swbuf_r+0x90>
 800f5c0:	4638      	mov	r0, r7
 800f5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5c4:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <__swbuf_r+0x9c>)
 800f5c6:	429c      	cmp	r4, r3
 800f5c8:	d101      	bne.n	800f5ce <__swbuf_r+0x7a>
 800f5ca:	68ac      	ldr	r4, [r5, #8]
 800f5cc:	e7cf      	b.n	800f56e <__swbuf_r+0x1a>
 800f5ce:	4b09      	ldr	r3, [pc, #36]	; (800f5f4 <__swbuf_r+0xa0>)
 800f5d0:	429c      	cmp	r4, r3
 800f5d2:	bf08      	it	eq
 800f5d4:	68ec      	ldreq	r4, [r5, #12]
 800f5d6:	e7ca      	b.n	800f56e <__swbuf_r+0x1a>
 800f5d8:	4621      	mov	r1, r4
 800f5da:	4628      	mov	r0, r5
 800f5dc:	f000 f80c 	bl	800f5f8 <__swsetup_r>
 800f5e0:	2800      	cmp	r0, #0
 800f5e2:	d0cb      	beq.n	800f57c <__swbuf_r+0x28>
 800f5e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f5e8:	e7ea      	b.n	800f5c0 <__swbuf_r+0x6c>
 800f5ea:	bf00      	nop
 800f5ec:	080178a0 	.word	0x080178a0
 800f5f0:	080178c0 	.word	0x080178c0
 800f5f4:	08017880 	.word	0x08017880

0800f5f8 <__swsetup_r>:
 800f5f8:	4b32      	ldr	r3, [pc, #200]	; (800f6c4 <__swsetup_r+0xcc>)
 800f5fa:	b570      	push	{r4, r5, r6, lr}
 800f5fc:	681d      	ldr	r5, [r3, #0]
 800f5fe:	4606      	mov	r6, r0
 800f600:	460c      	mov	r4, r1
 800f602:	b125      	cbz	r5, 800f60e <__swsetup_r+0x16>
 800f604:	69ab      	ldr	r3, [r5, #24]
 800f606:	b913      	cbnz	r3, 800f60e <__swsetup_r+0x16>
 800f608:	4628      	mov	r0, r5
 800f60a:	f000 f99b 	bl	800f944 <__sinit>
 800f60e:	4b2e      	ldr	r3, [pc, #184]	; (800f6c8 <__swsetup_r+0xd0>)
 800f610:	429c      	cmp	r4, r3
 800f612:	d10f      	bne.n	800f634 <__swsetup_r+0x3c>
 800f614:	686c      	ldr	r4, [r5, #4]
 800f616:	89a3      	ldrh	r3, [r4, #12]
 800f618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f61c:	0719      	lsls	r1, r3, #28
 800f61e:	d42c      	bmi.n	800f67a <__swsetup_r+0x82>
 800f620:	06dd      	lsls	r5, r3, #27
 800f622:	d411      	bmi.n	800f648 <__swsetup_r+0x50>
 800f624:	2309      	movs	r3, #9
 800f626:	6033      	str	r3, [r6, #0]
 800f628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f62c:	81a3      	strh	r3, [r4, #12]
 800f62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f632:	e03e      	b.n	800f6b2 <__swsetup_r+0xba>
 800f634:	4b25      	ldr	r3, [pc, #148]	; (800f6cc <__swsetup_r+0xd4>)
 800f636:	429c      	cmp	r4, r3
 800f638:	d101      	bne.n	800f63e <__swsetup_r+0x46>
 800f63a:	68ac      	ldr	r4, [r5, #8]
 800f63c:	e7eb      	b.n	800f616 <__swsetup_r+0x1e>
 800f63e:	4b24      	ldr	r3, [pc, #144]	; (800f6d0 <__swsetup_r+0xd8>)
 800f640:	429c      	cmp	r4, r3
 800f642:	bf08      	it	eq
 800f644:	68ec      	ldreq	r4, [r5, #12]
 800f646:	e7e6      	b.n	800f616 <__swsetup_r+0x1e>
 800f648:	0758      	lsls	r0, r3, #29
 800f64a:	d512      	bpl.n	800f672 <__swsetup_r+0x7a>
 800f64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f64e:	b141      	cbz	r1, 800f662 <__swsetup_r+0x6a>
 800f650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f654:	4299      	cmp	r1, r3
 800f656:	d002      	beq.n	800f65e <__swsetup_r+0x66>
 800f658:	4630      	mov	r0, r6
 800f65a:	f000 fa93 	bl	800fb84 <_free_r>
 800f65e:	2300      	movs	r3, #0
 800f660:	6363      	str	r3, [r4, #52]	; 0x34
 800f662:	89a3      	ldrh	r3, [r4, #12]
 800f664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f668:	81a3      	strh	r3, [r4, #12]
 800f66a:	2300      	movs	r3, #0
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	6923      	ldr	r3, [r4, #16]
 800f670:	6023      	str	r3, [r4, #0]
 800f672:	89a3      	ldrh	r3, [r4, #12]
 800f674:	f043 0308 	orr.w	r3, r3, #8
 800f678:	81a3      	strh	r3, [r4, #12]
 800f67a:	6923      	ldr	r3, [r4, #16]
 800f67c:	b94b      	cbnz	r3, 800f692 <__swsetup_r+0x9a>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f688:	d003      	beq.n	800f692 <__swsetup_r+0x9a>
 800f68a:	4621      	mov	r1, r4
 800f68c:	4630      	mov	r0, r6
 800f68e:	f000 fa31 	bl	800faf4 <__smakebuf_r>
 800f692:	89a0      	ldrh	r0, [r4, #12]
 800f694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f698:	f010 0301 	ands.w	r3, r0, #1
 800f69c:	d00a      	beq.n	800f6b4 <__swsetup_r+0xbc>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60a3      	str	r3, [r4, #8]
 800f6a2:	6963      	ldr	r3, [r4, #20]
 800f6a4:	425b      	negs	r3, r3
 800f6a6:	61a3      	str	r3, [r4, #24]
 800f6a8:	6923      	ldr	r3, [r4, #16]
 800f6aa:	b943      	cbnz	r3, 800f6be <__swsetup_r+0xc6>
 800f6ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6b0:	d1ba      	bne.n	800f628 <__swsetup_r+0x30>
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	0781      	lsls	r1, r0, #30
 800f6b6:	bf58      	it	pl
 800f6b8:	6963      	ldrpl	r3, [r4, #20]
 800f6ba:	60a3      	str	r3, [r4, #8]
 800f6bc:	e7f4      	b.n	800f6a8 <__swsetup_r+0xb0>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e7f7      	b.n	800f6b2 <__swsetup_r+0xba>
 800f6c2:	bf00      	nop
 800f6c4:	20001a6c 	.word	0x20001a6c
 800f6c8:	080178a0 	.word	0x080178a0
 800f6cc:	080178c0 	.word	0x080178c0
 800f6d0:	08017880 	.word	0x08017880

0800f6d4 <__assert_func>:
 800f6d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f6d6:	4614      	mov	r4, r2
 800f6d8:	461a      	mov	r2, r3
 800f6da:	4b09      	ldr	r3, [pc, #36]	; (800f700 <__assert_func+0x2c>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	4605      	mov	r5, r0
 800f6e0:	68d8      	ldr	r0, [r3, #12]
 800f6e2:	b14c      	cbz	r4, 800f6f8 <__assert_func+0x24>
 800f6e4:	4b07      	ldr	r3, [pc, #28]	; (800f704 <__assert_func+0x30>)
 800f6e6:	9100      	str	r1, [sp, #0]
 800f6e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6ec:	4906      	ldr	r1, [pc, #24]	; (800f708 <__assert_func+0x34>)
 800f6ee:	462b      	mov	r3, r5
 800f6f0:	f000 f9a6 	bl	800fa40 <fiprintf>
 800f6f4:	f000 fe7a 	bl	80103ec <abort>
 800f6f8:	4b04      	ldr	r3, [pc, #16]	; (800f70c <__assert_func+0x38>)
 800f6fa:	461c      	mov	r4, r3
 800f6fc:	e7f3      	b.n	800f6e6 <__assert_func+0x12>
 800f6fe:	bf00      	nop
 800f700:	20001a6c 	.word	0x20001a6c
 800f704:	08017842 	.word	0x08017842
 800f708:	0801784f 	.word	0x0801784f
 800f70c:	080145c5 	.word	0x080145c5

0800f710 <__sflush_r>:
 800f710:	898a      	ldrh	r2, [r1, #12]
 800f712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f716:	4605      	mov	r5, r0
 800f718:	0710      	lsls	r0, r2, #28
 800f71a:	460c      	mov	r4, r1
 800f71c:	d458      	bmi.n	800f7d0 <__sflush_r+0xc0>
 800f71e:	684b      	ldr	r3, [r1, #4]
 800f720:	2b00      	cmp	r3, #0
 800f722:	dc05      	bgt.n	800f730 <__sflush_r+0x20>
 800f724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f726:	2b00      	cmp	r3, #0
 800f728:	dc02      	bgt.n	800f730 <__sflush_r+0x20>
 800f72a:	2000      	movs	r0, #0
 800f72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f732:	2e00      	cmp	r6, #0
 800f734:	d0f9      	beq.n	800f72a <__sflush_r+0x1a>
 800f736:	2300      	movs	r3, #0
 800f738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f73c:	682f      	ldr	r7, [r5, #0]
 800f73e:	602b      	str	r3, [r5, #0]
 800f740:	d032      	beq.n	800f7a8 <__sflush_r+0x98>
 800f742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f744:	89a3      	ldrh	r3, [r4, #12]
 800f746:	075a      	lsls	r2, r3, #29
 800f748:	d505      	bpl.n	800f756 <__sflush_r+0x46>
 800f74a:	6863      	ldr	r3, [r4, #4]
 800f74c:	1ac0      	subs	r0, r0, r3
 800f74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f750:	b10b      	cbz	r3, 800f756 <__sflush_r+0x46>
 800f752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f754:	1ac0      	subs	r0, r0, r3
 800f756:	2300      	movs	r3, #0
 800f758:	4602      	mov	r2, r0
 800f75a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f75c:	6a21      	ldr	r1, [r4, #32]
 800f75e:	4628      	mov	r0, r5
 800f760:	47b0      	blx	r6
 800f762:	1c43      	adds	r3, r0, #1
 800f764:	89a3      	ldrh	r3, [r4, #12]
 800f766:	d106      	bne.n	800f776 <__sflush_r+0x66>
 800f768:	6829      	ldr	r1, [r5, #0]
 800f76a:	291d      	cmp	r1, #29
 800f76c:	d82c      	bhi.n	800f7c8 <__sflush_r+0xb8>
 800f76e:	4a2a      	ldr	r2, [pc, #168]	; (800f818 <__sflush_r+0x108>)
 800f770:	40ca      	lsrs	r2, r1
 800f772:	07d6      	lsls	r6, r2, #31
 800f774:	d528      	bpl.n	800f7c8 <__sflush_r+0xb8>
 800f776:	2200      	movs	r2, #0
 800f778:	6062      	str	r2, [r4, #4]
 800f77a:	04d9      	lsls	r1, r3, #19
 800f77c:	6922      	ldr	r2, [r4, #16]
 800f77e:	6022      	str	r2, [r4, #0]
 800f780:	d504      	bpl.n	800f78c <__sflush_r+0x7c>
 800f782:	1c42      	adds	r2, r0, #1
 800f784:	d101      	bne.n	800f78a <__sflush_r+0x7a>
 800f786:	682b      	ldr	r3, [r5, #0]
 800f788:	b903      	cbnz	r3, 800f78c <__sflush_r+0x7c>
 800f78a:	6560      	str	r0, [r4, #84]	; 0x54
 800f78c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f78e:	602f      	str	r7, [r5, #0]
 800f790:	2900      	cmp	r1, #0
 800f792:	d0ca      	beq.n	800f72a <__sflush_r+0x1a>
 800f794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f798:	4299      	cmp	r1, r3
 800f79a:	d002      	beq.n	800f7a2 <__sflush_r+0x92>
 800f79c:	4628      	mov	r0, r5
 800f79e:	f000 f9f1 	bl	800fb84 <_free_r>
 800f7a2:	2000      	movs	r0, #0
 800f7a4:	6360      	str	r0, [r4, #52]	; 0x34
 800f7a6:	e7c1      	b.n	800f72c <__sflush_r+0x1c>
 800f7a8:	6a21      	ldr	r1, [r4, #32]
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	47b0      	blx	r6
 800f7b0:	1c41      	adds	r1, r0, #1
 800f7b2:	d1c7      	bne.n	800f744 <__sflush_r+0x34>
 800f7b4:	682b      	ldr	r3, [r5, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d0c4      	beq.n	800f744 <__sflush_r+0x34>
 800f7ba:	2b1d      	cmp	r3, #29
 800f7bc:	d001      	beq.n	800f7c2 <__sflush_r+0xb2>
 800f7be:	2b16      	cmp	r3, #22
 800f7c0:	d101      	bne.n	800f7c6 <__sflush_r+0xb6>
 800f7c2:	602f      	str	r7, [r5, #0]
 800f7c4:	e7b1      	b.n	800f72a <__sflush_r+0x1a>
 800f7c6:	89a3      	ldrh	r3, [r4, #12]
 800f7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7cc:	81a3      	strh	r3, [r4, #12]
 800f7ce:	e7ad      	b.n	800f72c <__sflush_r+0x1c>
 800f7d0:	690f      	ldr	r7, [r1, #16]
 800f7d2:	2f00      	cmp	r7, #0
 800f7d4:	d0a9      	beq.n	800f72a <__sflush_r+0x1a>
 800f7d6:	0793      	lsls	r3, r2, #30
 800f7d8:	680e      	ldr	r6, [r1, #0]
 800f7da:	bf08      	it	eq
 800f7dc:	694b      	ldreq	r3, [r1, #20]
 800f7de:	600f      	str	r7, [r1, #0]
 800f7e0:	bf18      	it	ne
 800f7e2:	2300      	movne	r3, #0
 800f7e4:	eba6 0807 	sub.w	r8, r6, r7
 800f7e8:	608b      	str	r3, [r1, #8]
 800f7ea:	f1b8 0f00 	cmp.w	r8, #0
 800f7ee:	dd9c      	ble.n	800f72a <__sflush_r+0x1a>
 800f7f0:	6a21      	ldr	r1, [r4, #32]
 800f7f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7f4:	4643      	mov	r3, r8
 800f7f6:	463a      	mov	r2, r7
 800f7f8:	4628      	mov	r0, r5
 800f7fa:	47b0      	blx	r6
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	dc06      	bgt.n	800f80e <__sflush_r+0xfe>
 800f800:	89a3      	ldrh	r3, [r4, #12]
 800f802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f806:	81a3      	strh	r3, [r4, #12]
 800f808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f80c:	e78e      	b.n	800f72c <__sflush_r+0x1c>
 800f80e:	4407      	add	r7, r0
 800f810:	eba8 0800 	sub.w	r8, r8, r0
 800f814:	e7e9      	b.n	800f7ea <__sflush_r+0xda>
 800f816:	bf00      	nop
 800f818:	20400001 	.word	0x20400001

0800f81c <_fflush_r>:
 800f81c:	b538      	push	{r3, r4, r5, lr}
 800f81e:	690b      	ldr	r3, [r1, #16]
 800f820:	4605      	mov	r5, r0
 800f822:	460c      	mov	r4, r1
 800f824:	b913      	cbnz	r3, 800f82c <_fflush_r+0x10>
 800f826:	2500      	movs	r5, #0
 800f828:	4628      	mov	r0, r5
 800f82a:	bd38      	pop	{r3, r4, r5, pc}
 800f82c:	b118      	cbz	r0, 800f836 <_fflush_r+0x1a>
 800f82e:	6983      	ldr	r3, [r0, #24]
 800f830:	b90b      	cbnz	r3, 800f836 <_fflush_r+0x1a>
 800f832:	f000 f887 	bl	800f944 <__sinit>
 800f836:	4b14      	ldr	r3, [pc, #80]	; (800f888 <_fflush_r+0x6c>)
 800f838:	429c      	cmp	r4, r3
 800f83a:	d11b      	bne.n	800f874 <_fflush_r+0x58>
 800f83c:	686c      	ldr	r4, [r5, #4]
 800f83e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d0ef      	beq.n	800f826 <_fflush_r+0xa>
 800f846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f848:	07d0      	lsls	r0, r2, #31
 800f84a:	d404      	bmi.n	800f856 <_fflush_r+0x3a>
 800f84c:	0599      	lsls	r1, r3, #22
 800f84e:	d402      	bmi.n	800f856 <_fflush_r+0x3a>
 800f850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f852:	f000 f927 	bl	800faa4 <__retarget_lock_acquire_recursive>
 800f856:	4628      	mov	r0, r5
 800f858:	4621      	mov	r1, r4
 800f85a:	f7ff ff59 	bl	800f710 <__sflush_r>
 800f85e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f860:	07da      	lsls	r2, r3, #31
 800f862:	4605      	mov	r5, r0
 800f864:	d4e0      	bmi.n	800f828 <_fflush_r+0xc>
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	059b      	lsls	r3, r3, #22
 800f86a:	d4dd      	bmi.n	800f828 <_fflush_r+0xc>
 800f86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f86e:	f000 f91a 	bl	800faa6 <__retarget_lock_release_recursive>
 800f872:	e7d9      	b.n	800f828 <_fflush_r+0xc>
 800f874:	4b05      	ldr	r3, [pc, #20]	; (800f88c <_fflush_r+0x70>)
 800f876:	429c      	cmp	r4, r3
 800f878:	d101      	bne.n	800f87e <_fflush_r+0x62>
 800f87a:	68ac      	ldr	r4, [r5, #8]
 800f87c:	e7df      	b.n	800f83e <_fflush_r+0x22>
 800f87e:	4b04      	ldr	r3, [pc, #16]	; (800f890 <_fflush_r+0x74>)
 800f880:	429c      	cmp	r4, r3
 800f882:	bf08      	it	eq
 800f884:	68ec      	ldreq	r4, [r5, #12]
 800f886:	e7da      	b.n	800f83e <_fflush_r+0x22>
 800f888:	080178a0 	.word	0x080178a0
 800f88c:	080178c0 	.word	0x080178c0
 800f890:	08017880 	.word	0x08017880

0800f894 <std>:
 800f894:	2300      	movs	r3, #0
 800f896:	b510      	push	{r4, lr}
 800f898:	4604      	mov	r4, r0
 800f89a:	e9c0 3300 	strd	r3, r3, [r0]
 800f89e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8a2:	6083      	str	r3, [r0, #8]
 800f8a4:	8181      	strh	r1, [r0, #12]
 800f8a6:	6643      	str	r3, [r0, #100]	; 0x64
 800f8a8:	81c2      	strh	r2, [r0, #14]
 800f8aa:	6183      	str	r3, [r0, #24]
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	2208      	movs	r2, #8
 800f8b0:	305c      	adds	r0, #92	; 0x5c
 800f8b2:	f7ff fd73 	bl	800f39c <memset>
 800f8b6:	4b05      	ldr	r3, [pc, #20]	; (800f8cc <std+0x38>)
 800f8b8:	6263      	str	r3, [r4, #36]	; 0x24
 800f8ba:	4b05      	ldr	r3, [pc, #20]	; (800f8d0 <std+0x3c>)
 800f8bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8be:	4b05      	ldr	r3, [pc, #20]	; (800f8d4 <std+0x40>)
 800f8c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8c2:	4b05      	ldr	r3, [pc, #20]	; (800f8d8 <std+0x44>)
 800f8c4:	6224      	str	r4, [r4, #32]
 800f8c6:	6323      	str	r3, [r4, #48]	; 0x30
 800f8c8:	bd10      	pop	{r4, pc}
 800f8ca:	bf00      	nop
 800f8cc:	08010341 	.word	0x08010341
 800f8d0:	08010363 	.word	0x08010363
 800f8d4:	0801039b 	.word	0x0801039b
 800f8d8:	080103bf 	.word	0x080103bf

0800f8dc <_cleanup_r>:
 800f8dc:	4901      	ldr	r1, [pc, #4]	; (800f8e4 <_cleanup_r+0x8>)
 800f8de:	f000 b8c1 	b.w	800fa64 <_fwalk_reent>
 800f8e2:	bf00      	nop
 800f8e4:	0800f81d 	.word	0x0800f81d

0800f8e8 <__sfmoreglue>:
 800f8e8:	b570      	push	{r4, r5, r6, lr}
 800f8ea:	2268      	movs	r2, #104	; 0x68
 800f8ec:	1e4d      	subs	r5, r1, #1
 800f8ee:	4355      	muls	r5, r2
 800f8f0:	460e      	mov	r6, r1
 800f8f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8f6:	f000 f9b1 	bl	800fc5c <_malloc_r>
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	b140      	cbz	r0, 800f910 <__sfmoreglue+0x28>
 800f8fe:	2100      	movs	r1, #0
 800f900:	e9c0 1600 	strd	r1, r6, [r0]
 800f904:	300c      	adds	r0, #12
 800f906:	60a0      	str	r0, [r4, #8]
 800f908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f90c:	f7ff fd46 	bl	800f39c <memset>
 800f910:	4620      	mov	r0, r4
 800f912:	bd70      	pop	{r4, r5, r6, pc}

0800f914 <__sfp_lock_acquire>:
 800f914:	4801      	ldr	r0, [pc, #4]	; (800f91c <__sfp_lock_acquire+0x8>)
 800f916:	f000 b8c5 	b.w	800faa4 <__retarget_lock_acquire_recursive>
 800f91a:	bf00      	nop
 800f91c:	200140b5 	.word	0x200140b5

0800f920 <__sfp_lock_release>:
 800f920:	4801      	ldr	r0, [pc, #4]	; (800f928 <__sfp_lock_release+0x8>)
 800f922:	f000 b8c0 	b.w	800faa6 <__retarget_lock_release_recursive>
 800f926:	bf00      	nop
 800f928:	200140b5 	.word	0x200140b5

0800f92c <__sinit_lock_acquire>:
 800f92c:	4801      	ldr	r0, [pc, #4]	; (800f934 <__sinit_lock_acquire+0x8>)
 800f92e:	f000 b8b9 	b.w	800faa4 <__retarget_lock_acquire_recursive>
 800f932:	bf00      	nop
 800f934:	200140b6 	.word	0x200140b6

0800f938 <__sinit_lock_release>:
 800f938:	4801      	ldr	r0, [pc, #4]	; (800f940 <__sinit_lock_release+0x8>)
 800f93a:	f000 b8b4 	b.w	800faa6 <__retarget_lock_release_recursive>
 800f93e:	bf00      	nop
 800f940:	200140b6 	.word	0x200140b6

0800f944 <__sinit>:
 800f944:	b510      	push	{r4, lr}
 800f946:	4604      	mov	r4, r0
 800f948:	f7ff fff0 	bl	800f92c <__sinit_lock_acquire>
 800f94c:	69a3      	ldr	r3, [r4, #24]
 800f94e:	b11b      	cbz	r3, 800f958 <__sinit+0x14>
 800f950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f954:	f7ff bff0 	b.w	800f938 <__sinit_lock_release>
 800f958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f95c:	6523      	str	r3, [r4, #80]	; 0x50
 800f95e:	4b13      	ldr	r3, [pc, #76]	; (800f9ac <__sinit+0x68>)
 800f960:	4a13      	ldr	r2, [pc, #76]	; (800f9b0 <__sinit+0x6c>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	62a2      	str	r2, [r4, #40]	; 0x28
 800f966:	42a3      	cmp	r3, r4
 800f968:	bf04      	itt	eq
 800f96a:	2301      	moveq	r3, #1
 800f96c:	61a3      	streq	r3, [r4, #24]
 800f96e:	4620      	mov	r0, r4
 800f970:	f000 f820 	bl	800f9b4 <__sfp>
 800f974:	6060      	str	r0, [r4, #4]
 800f976:	4620      	mov	r0, r4
 800f978:	f000 f81c 	bl	800f9b4 <__sfp>
 800f97c:	60a0      	str	r0, [r4, #8]
 800f97e:	4620      	mov	r0, r4
 800f980:	f000 f818 	bl	800f9b4 <__sfp>
 800f984:	2200      	movs	r2, #0
 800f986:	60e0      	str	r0, [r4, #12]
 800f988:	2104      	movs	r1, #4
 800f98a:	6860      	ldr	r0, [r4, #4]
 800f98c:	f7ff ff82 	bl	800f894 <std>
 800f990:	68a0      	ldr	r0, [r4, #8]
 800f992:	2201      	movs	r2, #1
 800f994:	2109      	movs	r1, #9
 800f996:	f7ff ff7d 	bl	800f894 <std>
 800f99a:	68e0      	ldr	r0, [r4, #12]
 800f99c:	2202      	movs	r2, #2
 800f99e:	2112      	movs	r1, #18
 800f9a0:	f7ff ff78 	bl	800f894 <std>
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	61a3      	str	r3, [r4, #24]
 800f9a8:	e7d2      	b.n	800f950 <__sinit+0xc>
 800f9aa:	bf00      	nop
 800f9ac:	080177cc 	.word	0x080177cc
 800f9b0:	0800f8dd 	.word	0x0800f8dd

0800f9b4 <__sfp>:
 800f9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	f7ff ffac 	bl	800f914 <__sfp_lock_acquire>
 800f9bc:	4b1e      	ldr	r3, [pc, #120]	; (800fa38 <__sfp+0x84>)
 800f9be:	681e      	ldr	r6, [r3, #0]
 800f9c0:	69b3      	ldr	r3, [r6, #24]
 800f9c2:	b913      	cbnz	r3, 800f9ca <__sfp+0x16>
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	f7ff ffbd 	bl	800f944 <__sinit>
 800f9ca:	3648      	adds	r6, #72	; 0x48
 800f9cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9d0:	3b01      	subs	r3, #1
 800f9d2:	d503      	bpl.n	800f9dc <__sfp+0x28>
 800f9d4:	6833      	ldr	r3, [r6, #0]
 800f9d6:	b30b      	cbz	r3, 800fa1c <__sfp+0x68>
 800f9d8:	6836      	ldr	r6, [r6, #0]
 800f9da:	e7f7      	b.n	800f9cc <__sfp+0x18>
 800f9dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9e0:	b9d5      	cbnz	r5, 800fa18 <__sfp+0x64>
 800f9e2:	4b16      	ldr	r3, [pc, #88]	; (800fa3c <__sfp+0x88>)
 800f9e4:	60e3      	str	r3, [r4, #12]
 800f9e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f9ea:	6665      	str	r5, [r4, #100]	; 0x64
 800f9ec:	f000 f859 	bl	800faa2 <__retarget_lock_init_recursive>
 800f9f0:	f7ff ff96 	bl	800f920 <__sfp_lock_release>
 800f9f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f9f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f9fc:	6025      	str	r5, [r4, #0]
 800f9fe:	61a5      	str	r5, [r4, #24]
 800fa00:	2208      	movs	r2, #8
 800fa02:	4629      	mov	r1, r5
 800fa04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa08:	f7ff fcc8 	bl	800f39c <memset>
 800fa0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa14:	4620      	mov	r0, r4
 800fa16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa18:	3468      	adds	r4, #104	; 0x68
 800fa1a:	e7d9      	b.n	800f9d0 <__sfp+0x1c>
 800fa1c:	2104      	movs	r1, #4
 800fa1e:	4638      	mov	r0, r7
 800fa20:	f7ff ff62 	bl	800f8e8 <__sfmoreglue>
 800fa24:	4604      	mov	r4, r0
 800fa26:	6030      	str	r0, [r6, #0]
 800fa28:	2800      	cmp	r0, #0
 800fa2a:	d1d5      	bne.n	800f9d8 <__sfp+0x24>
 800fa2c:	f7ff ff78 	bl	800f920 <__sfp_lock_release>
 800fa30:	230c      	movs	r3, #12
 800fa32:	603b      	str	r3, [r7, #0]
 800fa34:	e7ee      	b.n	800fa14 <__sfp+0x60>
 800fa36:	bf00      	nop
 800fa38:	080177cc 	.word	0x080177cc
 800fa3c:	ffff0001 	.word	0xffff0001

0800fa40 <fiprintf>:
 800fa40:	b40e      	push	{r1, r2, r3}
 800fa42:	b503      	push	{r0, r1, lr}
 800fa44:	4601      	mov	r1, r0
 800fa46:	ab03      	add	r3, sp, #12
 800fa48:	4805      	ldr	r0, [pc, #20]	; (800fa60 <fiprintf+0x20>)
 800fa4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa4e:	6800      	ldr	r0, [r0, #0]
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	f000 f9a1 	bl	800fd98 <_vfiprintf_r>
 800fa56:	b002      	add	sp, #8
 800fa58:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa5c:	b003      	add	sp, #12
 800fa5e:	4770      	bx	lr
 800fa60:	20001a6c 	.word	0x20001a6c

0800fa64 <_fwalk_reent>:
 800fa64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa68:	4606      	mov	r6, r0
 800fa6a:	4688      	mov	r8, r1
 800fa6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa70:	2700      	movs	r7, #0
 800fa72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa76:	f1b9 0901 	subs.w	r9, r9, #1
 800fa7a:	d505      	bpl.n	800fa88 <_fwalk_reent+0x24>
 800fa7c:	6824      	ldr	r4, [r4, #0]
 800fa7e:	2c00      	cmp	r4, #0
 800fa80:	d1f7      	bne.n	800fa72 <_fwalk_reent+0xe>
 800fa82:	4638      	mov	r0, r7
 800fa84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa88:	89ab      	ldrh	r3, [r5, #12]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d907      	bls.n	800fa9e <_fwalk_reent+0x3a>
 800fa8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa92:	3301      	adds	r3, #1
 800fa94:	d003      	beq.n	800fa9e <_fwalk_reent+0x3a>
 800fa96:	4629      	mov	r1, r5
 800fa98:	4630      	mov	r0, r6
 800fa9a:	47c0      	blx	r8
 800fa9c:	4307      	orrs	r7, r0
 800fa9e:	3568      	adds	r5, #104	; 0x68
 800faa0:	e7e9      	b.n	800fa76 <_fwalk_reent+0x12>

0800faa2 <__retarget_lock_init_recursive>:
 800faa2:	4770      	bx	lr

0800faa4 <__retarget_lock_acquire_recursive>:
 800faa4:	4770      	bx	lr

0800faa6 <__retarget_lock_release_recursive>:
 800faa6:	4770      	bx	lr

0800faa8 <__swhatbuf_r>:
 800faa8:	b570      	push	{r4, r5, r6, lr}
 800faaa:	460e      	mov	r6, r1
 800faac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fab0:	2900      	cmp	r1, #0
 800fab2:	b096      	sub	sp, #88	; 0x58
 800fab4:	4614      	mov	r4, r2
 800fab6:	461d      	mov	r5, r3
 800fab8:	da08      	bge.n	800facc <__swhatbuf_r+0x24>
 800faba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fabe:	2200      	movs	r2, #0
 800fac0:	602a      	str	r2, [r5, #0]
 800fac2:	061a      	lsls	r2, r3, #24
 800fac4:	d410      	bmi.n	800fae8 <__swhatbuf_r+0x40>
 800fac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800faca:	e00e      	b.n	800faea <__swhatbuf_r+0x42>
 800facc:	466a      	mov	r2, sp
 800face:	f000 fca5 	bl	801041c <_fstat_r>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	dbf1      	blt.n	800faba <__swhatbuf_r+0x12>
 800fad6:	9a01      	ldr	r2, [sp, #4]
 800fad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fadc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fae0:	425a      	negs	r2, r3
 800fae2:	415a      	adcs	r2, r3
 800fae4:	602a      	str	r2, [r5, #0]
 800fae6:	e7ee      	b.n	800fac6 <__swhatbuf_r+0x1e>
 800fae8:	2340      	movs	r3, #64	; 0x40
 800faea:	2000      	movs	r0, #0
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	b016      	add	sp, #88	; 0x58
 800faf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800faf4 <__smakebuf_r>:
 800faf4:	898b      	ldrh	r3, [r1, #12]
 800faf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800faf8:	079d      	lsls	r5, r3, #30
 800fafa:	4606      	mov	r6, r0
 800fafc:	460c      	mov	r4, r1
 800fafe:	d507      	bpl.n	800fb10 <__smakebuf_r+0x1c>
 800fb00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb04:	6023      	str	r3, [r4, #0]
 800fb06:	6123      	str	r3, [r4, #16]
 800fb08:	2301      	movs	r3, #1
 800fb0a:	6163      	str	r3, [r4, #20]
 800fb0c:	b002      	add	sp, #8
 800fb0e:	bd70      	pop	{r4, r5, r6, pc}
 800fb10:	ab01      	add	r3, sp, #4
 800fb12:	466a      	mov	r2, sp
 800fb14:	f7ff ffc8 	bl	800faa8 <__swhatbuf_r>
 800fb18:	9900      	ldr	r1, [sp, #0]
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	4630      	mov	r0, r6
 800fb1e:	f000 f89d 	bl	800fc5c <_malloc_r>
 800fb22:	b948      	cbnz	r0, 800fb38 <__smakebuf_r+0x44>
 800fb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb28:	059a      	lsls	r2, r3, #22
 800fb2a:	d4ef      	bmi.n	800fb0c <__smakebuf_r+0x18>
 800fb2c:	f023 0303 	bic.w	r3, r3, #3
 800fb30:	f043 0302 	orr.w	r3, r3, #2
 800fb34:	81a3      	strh	r3, [r4, #12]
 800fb36:	e7e3      	b.n	800fb00 <__smakebuf_r+0xc>
 800fb38:	4b0d      	ldr	r3, [pc, #52]	; (800fb70 <__smakebuf_r+0x7c>)
 800fb3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb3c:	89a3      	ldrh	r3, [r4, #12]
 800fb3e:	6020      	str	r0, [r4, #0]
 800fb40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb44:	81a3      	strh	r3, [r4, #12]
 800fb46:	9b00      	ldr	r3, [sp, #0]
 800fb48:	6163      	str	r3, [r4, #20]
 800fb4a:	9b01      	ldr	r3, [sp, #4]
 800fb4c:	6120      	str	r0, [r4, #16]
 800fb4e:	b15b      	cbz	r3, 800fb68 <__smakebuf_r+0x74>
 800fb50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb54:	4630      	mov	r0, r6
 800fb56:	f000 fc73 	bl	8010440 <_isatty_r>
 800fb5a:	b128      	cbz	r0, 800fb68 <__smakebuf_r+0x74>
 800fb5c:	89a3      	ldrh	r3, [r4, #12]
 800fb5e:	f023 0303 	bic.w	r3, r3, #3
 800fb62:	f043 0301 	orr.w	r3, r3, #1
 800fb66:	81a3      	strh	r3, [r4, #12]
 800fb68:	89a0      	ldrh	r0, [r4, #12]
 800fb6a:	4305      	orrs	r5, r0
 800fb6c:	81a5      	strh	r5, [r4, #12]
 800fb6e:	e7cd      	b.n	800fb0c <__smakebuf_r+0x18>
 800fb70:	0800f8dd 	.word	0x0800f8dd

0800fb74 <malloc>:
 800fb74:	4b02      	ldr	r3, [pc, #8]	; (800fb80 <malloc+0xc>)
 800fb76:	4601      	mov	r1, r0
 800fb78:	6818      	ldr	r0, [r3, #0]
 800fb7a:	f000 b86f 	b.w	800fc5c <_malloc_r>
 800fb7e:	bf00      	nop
 800fb80:	20001a6c 	.word	0x20001a6c

0800fb84 <_free_r>:
 800fb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb86:	2900      	cmp	r1, #0
 800fb88:	d044      	beq.n	800fc14 <_free_r+0x90>
 800fb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb8e:	9001      	str	r0, [sp, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f1a1 0404 	sub.w	r4, r1, #4
 800fb96:	bfb8      	it	lt
 800fb98:	18e4      	addlt	r4, r4, r3
 800fb9a:	f000 fc73 	bl	8010484 <__malloc_lock>
 800fb9e:	4a1e      	ldr	r2, [pc, #120]	; (800fc18 <_free_r+0x94>)
 800fba0:	9801      	ldr	r0, [sp, #4]
 800fba2:	6813      	ldr	r3, [r2, #0]
 800fba4:	b933      	cbnz	r3, 800fbb4 <_free_r+0x30>
 800fba6:	6063      	str	r3, [r4, #4]
 800fba8:	6014      	str	r4, [r2, #0]
 800fbaa:	b003      	add	sp, #12
 800fbac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fbb0:	f000 bc6e 	b.w	8010490 <__malloc_unlock>
 800fbb4:	42a3      	cmp	r3, r4
 800fbb6:	d908      	bls.n	800fbca <_free_r+0x46>
 800fbb8:	6825      	ldr	r5, [r4, #0]
 800fbba:	1961      	adds	r1, r4, r5
 800fbbc:	428b      	cmp	r3, r1
 800fbbe:	bf01      	itttt	eq
 800fbc0:	6819      	ldreq	r1, [r3, #0]
 800fbc2:	685b      	ldreq	r3, [r3, #4]
 800fbc4:	1949      	addeq	r1, r1, r5
 800fbc6:	6021      	streq	r1, [r4, #0]
 800fbc8:	e7ed      	b.n	800fba6 <_free_r+0x22>
 800fbca:	461a      	mov	r2, r3
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	b10b      	cbz	r3, 800fbd4 <_free_r+0x50>
 800fbd0:	42a3      	cmp	r3, r4
 800fbd2:	d9fa      	bls.n	800fbca <_free_r+0x46>
 800fbd4:	6811      	ldr	r1, [r2, #0]
 800fbd6:	1855      	adds	r5, r2, r1
 800fbd8:	42a5      	cmp	r5, r4
 800fbda:	d10b      	bne.n	800fbf4 <_free_r+0x70>
 800fbdc:	6824      	ldr	r4, [r4, #0]
 800fbde:	4421      	add	r1, r4
 800fbe0:	1854      	adds	r4, r2, r1
 800fbe2:	42a3      	cmp	r3, r4
 800fbe4:	6011      	str	r1, [r2, #0]
 800fbe6:	d1e0      	bne.n	800fbaa <_free_r+0x26>
 800fbe8:	681c      	ldr	r4, [r3, #0]
 800fbea:	685b      	ldr	r3, [r3, #4]
 800fbec:	6053      	str	r3, [r2, #4]
 800fbee:	4421      	add	r1, r4
 800fbf0:	6011      	str	r1, [r2, #0]
 800fbf2:	e7da      	b.n	800fbaa <_free_r+0x26>
 800fbf4:	d902      	bls.n	800fbfc <_free_r+0x78>
 800fbf6:	230c      	movs	r3, #12
 800fbf8:	6003      	str	r3, [r0, #0]
 800fbfa:	e7d6      	b.n	800fbaa <_free_r+0x26>
 800fbfc:	6825      	ldr	r5, [r4, #0]
 800fbfe:	1961      	adds	r1, r4, r5
 800fc00:	428b      	cmp	r3, r1
 800fc02:	bf04      	itt	eq
 800fc04:	6819      	ldreq	r1, [r3, #0]
 800fc06:	685b      	ldreq	r3, [r3, #4]
 800fc08:	6063      	str	r3, [r4, #4]
 800fc0a:	bf04      	itt	eq
 800fc0c:	1949      	addeq	r1, r1, r5
 800fc0e:	6021      	streq	r1, [r4, #0]
 800fc10:	6054      	str	r4, [r2, #4]
 800fc12:	e7ca      	b.n	800fbaa <_free_r+0x26>
 800fc14:	b003      	add	sp, #12
 800fc16:	bd30      	pop	{r4, r5, pc}
 800fc18:	200140b8 	.word	0x200140b8

0800fc1c <sbrk_aligned>:
 800fc1c:	b570      	push	{r4, r5, r6, lr}
 800fc1e:	4e0e      	ldr	r6, [pc, #56]	; (800fc58 <sbrk_aligned+0x3c>)
 800fc20:	460c      	mov	r4, r1
 800fc22:	6831      	ldr	r1, [r6, #0]
 800fc24:	4605      	mov	r5, r0
 800fc26:	b911      	cbnz	r1, 800fc2e <sbrk_aligned+0x12>
 800fc28:	f000 fb7a 	bl	8010320 <_sbrk_r>
 800fc2c:	6030      	str	r0, [r6, #0]
 800fc2e:	4621      	mov	r1, r4
 800fc30:	4628      	mov	r0, r5
 800fc32:	f000 fb75 	bl	8010320 <_sbrk_r>
 800fc36:	1c43      	adds	r3, r0, #1
 800fc38:	d00a      	beq.n	800fc50 <sbrk_aligned+0x34>
 800fc3a:	1cc4      	adds	r4, r0, #3
 800fc3c:	f024 0403 	bic.w	r4, r4, #3
 800fc40:	42a0      	cmp	r0, r4
 800fc42:	d007      	beq.n	800fc54 <sbrk_aligned+0x38>
 800fc44:	1a21      	subs	r1, r4, r0
 800fc46:	4628      	mov	r0, r5
 800fc48:	f000 fb6a 	bl	8010320 <_sbrk_r>
 800fc4c:	3001      	adds	r0, #1
 800fc4e:	d101      	bne.n	800fc54 <sbrk_aligned+0x38>
 800fc50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fc54:	4620      	mov	r0, r4
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	200140bc 	.word	0x200140bc

0800fc5c <_malloc_r>:
 800fc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc60:	1ccd      	adds	r5, r1, #3
 800fc62:	f025 0503 	bic.w	r5, r5, #3
 800fc66:	3508      	adds	r5, #8
 800fc68:	2d0c      	cmp	r5, #12
 800fc6a:	bf38      	it	cc
 800fc6c:	250c      	movcc	r5, #12
 800fc6e:	2d00      	cmp	r5, #0
 800fc70:	4607      	mov	r7, r0
 800fc72:	db01      	blt.n	800fc78 <_malloc_r+0x1c>
 800fc74:	42a9      	cmp	r1, r5
 800fc76:	d905      	bls.n	800fc84 <_malloc_r+0x28>
 800fc78:	230c      	movs	r3, #12
 800fc7a:	603b      	str	r3, [r7, #0]
 800fc7c:	2600      	movs	r6, #0
 800fc7e:	4630      	mov	r0, r6
 800fc80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc84:	4e2e      	ldr	r6, [pc, #184]	; (800fd40 <_malloc_r+0xe4>)
 800fc86:	f000 fbfd 	bl	8010484 <__malloc_lock>
 800fc8a:	6833      	ldr	r3, [r6, #0]
 800fc8c:	461c      	mov	r4, r3
 800fc8e:	bb34      	cbnz	r4, 800fcde <_malloc_r+0x82>
 800fc90:	4629      	mov	r1, r5
 800fc92:	4638      	mov	r0, r7
 800fc94:	f7ff ffc2 	bl	800fc1c <sbrk_aligned>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	d14d      	bne.n	800fd3a <_malloc_r+0xde>
 800fc9e:	6834      	ldr	r4, [r6, #0]
 800fca0:	4626      	mov	r6, r4
 800fca2:	2e00      	cmp	r6, #0
 800fca4:	d140      	bne.n	800fd28 <_malloc_r+0xcc>
 800fca6:	6823      	ldr	r3, [r4, #0]
 800fca8:	4631      	mov	r1, r6
 800fcaa:	4638      	mov	r0, r7
 800fcac:	eb04 0803 	add.w	r8, r4, r3
 800fcb0:	f000 fb36 	bl	8010320 <_sbrk_r>
 800fcb4:	4580      	cmp	r8, r0
 800fcb6:	d13a      	bne.n	800fd2e <_malloc_r+0xd2>
 800fcb8:	6821      	ldr	r1, [r4, #0]
 800fcba:	3503      	adds	r5, #3
 800fcbc:	1a6d      	subs	r5, r5, r1
 800fcbe:	f025 0503 	bic.w	r5, r5, #3
 800fcc2:	3508      	adds	r5, #8
 800fcc4:	2d0c      	cmp	r5, #12
 800fcc6:	bf38      	it	cc
 800fcc8:	250c      	movcc	r5, #12
 800fcca:	4629      	mov	r1, r5
 800fccc:	4638      	mov	r0, r7
 800fcce:	f7ff ffa5 	bl	800fc1c <sbrk_aligned>
 800fcd2:	3001      	adds	r0, #1
 800fcd4:	d02b      	beq.n	800fd2e <_malloc_r+0xd2>
 800fcd6:	6823      	ldr	r3, [r4, #0]
 800fcd8:	442b      	add	r3, r5
 800fcda:	6023      	str	r3, [r4, #0]
 800fcdc:	e00e      	b.n	800fcfc <_malloc_r+0xa0>
 800fcde:	6822      	ldr	r2, [r4, #0]
 800fce0:	1b52      	subs	r2, r2, r5
 800fce2:	d41e      	bmi.n	800fd22 <_malloc_r+0xc6>
 800fce4:	2a0b      	cmp	r2, #11
 800fce6:	d916      	bls.n	800fd16 <_malloc_r+0xba>
 800fce8:	1961      	adds	r1, r4, r5
 800fcea:	42a3      	cmp	r3, r4
 800fcec:	6025      	str	r5, [r4, #0]
 800fcee:	bf18      	it	ne
 800fcf0:	6059      	strne	r1, [r3, #4]
 800fcf2:	6863      	ldr	r3, [r4, #4]
 800fcf4:	bf08      	it	eq
 800fcf6:	6031      	streq	r1, [r6, #0]
 800fcf8:	5162      	str	r2, [r4, r5]
 800fcfa:	604b      	str	r3, [r1, #4]
 800fcfc:	4638      	mov	r0, r7
 800fcfe:	f104 060b 	add.w	r6, r4, #11
 800fd02:	f000 fbc5 	bl	8010490 <__malloc_unlock>
 800fd06:	f026 0607 	bic.w	r6, r6, #7
 800fd0a:	1d23      	adds	r3, r4, #4
 800fd0c:	1af2      	subs	r2, r6, r3
 800fd0e:	d0b6      	beq.n	800fc7e <_malloc_r+0x22>
 800fd10:	1b9b      	subs	r3, r3, r6
 800fd12:	50a3      	str	r3, [r4, r2]
 800fd14:	e7b3      	b.n	800fc7e <_malloc_r+0x22>
 800fd16:	6862      	ldr	r2, [r4, #4]
 800fd18:	42a3      	cmp	r3, r4
 800fd1a:	bf0c      	ite	eq
 800fd1c:	6032      	streq	r2, [r6, #0]
 800fd1e:	605a      	strne	r2, [r3, #4]
 800fd20:	e7ec      	b.n	800fcfc <_malloc_r+0xa0>
 800fd22:	4623      	mov	r3, r4
 800fd24:	6864      	ldr	r4, [r4, #4]
 800fd26:	e7b2      	b.n	800fc8e <_malloc_r+0x32>
 800fd28:	4634      	mov	r4, r6
 800fd2a:	6876      	ldr	r6, [r6, #4]
 800fd2c:	e7b9      	b.n	800fca2 <_malloc_r+0x46>
 800fd2e:	230c      	movs	r3, #12
 800fd30:	603b      	str	r3, [r7, #0]
 800fd32:	4638      	mov	r0, r7
 800fd34:	f000 fbac 	bl	8010490 <__malloc_unlock>
 800fd38:	e7a1      	b.n	800fc7e <_malloc_r+0x22>
 800fd3a:	6025      	str	r5, [r4, #0]
 800fd3c:	e7de      	b.n	800fcfc <_malloc_r+0xa0>
 800fd3e:	bf00      	nop
 800fd40:	200140b8 	.word	0x200140b8

0800fd44 <__sfputc_r>:
 800fd44:	6893      	ldr	r3, [r2, #8]
 800fd46:	3b01      	subs	r3, #1
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	b410      	push	{r4}
 800fd4c:	6093      	str	r3, [r2, #8]
 800fd4e:	da08      	bge.n	800fd62 <__sfputc_r+0x1e>
 800fd50:	6994      	ldr	r4, [r2, #24]
 800fd52:	42a3      	cmp	r3, r4
 800fd54:	db01      	blt.n	800fd5a <__sfputc_r+0x16>
 800fd56:	290a      	cmp	r1, #10
 800fd58:	d103      	bne.n	800fd62 <__sfputc_r+0x1e>
 800fd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd5e:	f7ff bbf9 	b.w	800f554 <__swbuf_r>
 800fd62:	6813      	ldr	r3, [r2, #0]
 800fd64:	1c58      	adds	r0, r3, #1
 800fd66:	6010      	str	r0, [r2, #0]
 800fd68:	7019      	strb	r1, [r3, #0]
 800fd6a:	4608      	mov	r0, r1
 800fd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fd70:	4770      	bx	lr

0800fd72 <__sfputs_r>:
 800fd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd74:	4606      	mov	r6, r0
 800fd76:	460f      	mov	r7, r1
 800fd78:	4614      	mov	r4, r2
 800fd7a:	18d5      	adds	r5, r2, r3
 800fd7c:	42ac      	cmp	r4, r5
 800fd7e:	d101      	bne.n	800fd84 <__sfputs_r+0x12>
 800fd80:	2000      	movs	r0, #0
 800fd82:	e007      	b.n	800fd94 <__sfputs_r+0x22>
 800fd84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd88:	463a      	mov	r2, r7
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	f7ff ffda 	bl	800fd44 <__sfputc_r>
 800fd90:	1c43      	adds	r3, r0, #1
 800fd92:	d1f3      	bne.n	800fd7c <__sfputs_r+0xa>
 800fd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd98 <_vfiprintf_r>:
 800fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	460d      	mov	r5, r1
 800fd9e:	b09d      	sub	sp, #116	; 0x74
 800fda0:	4614      	mov	r4, r2
 800fda2:	4698      	mov	r8, r3
 800fda4:	4606      	mov	r6, r0
 800fda6:	b118      	cbz	r0, 800fdb0 <_vfiprintf_r+0x18>
 800fda8:	6983      	ldr	r3, [r0, #24]
 800fdaa:	b90b      	cbnz	r3, 800fdb0 <_vfiprintf_r+0x18>
 800fdac:	f7ff fdca 	bl	800f944 <__sinit>
 800fdb0:	4b89      	ldr	r3, [pc, #548]	; (800ffd8 <_vfiprintf_r+0x240>)
 800fdb2:	429d      	cmp	r5, r3
 800fdb4:	d11b      	bne.n	800fdee <_vfiprintf_r+0x56>
 800fdb6:	6875      	ldr	r5, [r6, #4]
 800fdb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdba:	07d9      	lsls	r1, r3, #31
 800fdbc:	d405      	bmi.n	800fdca <_vfiprintf_r+0x32>
 800fdbe:	89ab      	ldrh	r3, [r5, #12]
 800fdc0:	059a      	lsls	r2, r3, #22
 800fdc2:	d402      	bmi.n	800fdca <_vfiprintf_r+0x32>
 800fdc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdc6:	f7ff fe6d 	bl	800faa4 <__retarget_lock_acquire_recursive>
 800fdca:	89ab      	ldrh	r3, [r5, #12]
 800fdcc:	071b      	lsls	r3, r3, #28
 800fdce:	d501      	bpl.n	800fdd4 <_vfiprintf_r+0x3c>
 800fdd0:	692b      	ldr	r3, [r5, #16]
 800fdd2:	b9eb      	cbnz	r3, 800fe10 <_vfiprintf_r+0x78>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f7ff fc0e 	bl	800f5f8 <__swsetup_r>
 800fddc:	b1c0      	cbz	r0, 800fe10 <_vfiprintf_r+0x78>
 800fdde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fde0:	07dc      	lsls	r4, r3, #31
 800fde2:	d50e      	bpl.n	800fe02 <_vfiprintf_r+0x6a>
 800fde4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fde8:	b01d      	add	sp, #116	; 0x74
 800fdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdee:	4b7b      	ldr	r3, [pc, #492]	; (800ffdc <_vfiprintf_r+0x244>)
 800fdf0:	429d      	cmp	r5, r3
 800fdf2:	d101      	bne.n	800fdf8 <_vfiprintf_r+0x60>
 800fdf4:	68b5      	ldr	r5, [r6, #8]
 800fdf6:	e7df      	b.n	800fdb8 <_vfiprintf_r+0x20>
 800fdf8:	4b79      	ldr	r3, [pc, #484]	; (800ffe0 <_vfiprintf_r+0x248>)
 800fdfa:	429d      	cmp	r5, r3
 800fdfc:	bf08      	it	eq
 800fdfe:	68f5      	ldreq	r5, [r6, #12]
 800fe00:	e7da      	b.n	800fdb8 <_vfiprintf_r+0x20>
 800fe02:	89ab      	ldrh	r3, [r5, #12]
 800fe04:	0598      	lsls	r0, r3, #22
 800fe06:	d4ed      	bmi.n	800fde4 <_vfiprintf_r+0x4c>
 800fe08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe0a:	f7ff fe4c 	bl	800faa6 <__retarget_lock_release_recursive>
 800fe0e:	e7e9      	b.n	800fde4 <_vfiprintf_r+0x4c>
 800fe10:	2300      	movs	r3, #0
 800fe12:	9309      	str	r3, [sp, #36]	; 0x24
 800fe14:	2320      	movs	r3, #32
 800fe16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe1e:	2330      	movs	r3, #48	; 0x30
 800fe20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ffe4 <_vfiprintf_r+0x24c>
 800fe24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe28:	f04f 0901 	mov.w	r9, #1
 800fe2c:	4623      	mov	r3, r4
 800fe2e:	469a      	mov	sl, r3
 800fe30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe34:	b10a      	cbz	r2, 800fe3a <_vfiprintf_r+0xa2>
 800fe36:	2a25      	cmp	r2, #37	; 0x25
 800fe38:	d1f9      	bne.n	800fe2e <_vfiprintf_r+0x96>
 800fe3a:	ebba 0b04 	subs.w	fp, sl, r4
 800fe3e:	d00b      	beq.n	800fe58 <_vfiprintf_r+0xc0>
 800fe40:	465b      	mov	r3, fp
 800fe42:	4622      	mov	r2, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	4630      	mov	r0, r6
 800fe48:	f7ff ff93 	bl	800fd72 <__sfputs_r>
 800fe4c:	3001      	adds	r0, #1
 800fe4e:	f000 80aa 	beq.w	800ffa6 <_vfiprintf_r+0x20e>
 800fe52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe54:	445a      	add	r2, fp
 800fe56:	9209      	str	r2, [sp, #36]	; 0x24
 800fe58:	f89a 3000 	ldrb.w	r3, [sl]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f000 80a2 	beq.w	800ffa6 <_vfiprintf_r+0x20e>
 800fe62:	2300      	movs	r3, #0
 800fe64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fe68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe6c:	f10a 0a01 	add.w	sl, sl, #1
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	9307      	str	r3, [sp, #28]
 800fe74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe78:	931a      	str	r3, [sp, #104]	; 0x68
 800fe7a:	4654      	mov	r4, sl
 800fe7c:	2205      	movs	r2, #5
 800fe7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe82:	4858      	ldr	r0, [pc, #352]	; (800ffe4 <_vfiprintf_r+0x24c>)
 800fe84:	f7f0 f9cc 	bl	8000220 <memchr>
 800fe88:	9a04      	ldr	r2, [sp, #16]
 800fe8a:	b9d8      	cbnz	r0, 800fec4 <_vfiprintf_r+0x12c>
 800fe8c:	06d1      	lsls	r1, r2, #27
 800fe8e:	bf44      	itt	mi
 800fe90:	2320      	movmi	r3, #32
 800fe92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe96:	0713      	lsls	r3, r2, #28
 800fe98:	bf44      	itt	mi
 800fe9a:	232b      	movmi	r3, #43	; 0x2b
 800fe9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fea0:	f89a 3000 	ldrb.w	r3, [sl]
 800fea4:	2b2a      	cmp	r3, #42	; 0x2a
 800fea6:	d015      	beq.n	800fed4 <_vfiprintf_r+0x13c>
 800fea8:	9a07      	ldr	r2, [sp, #28]
 800feaa:	4654      	mov	r4, sl
 800feac:	2000      	movs	r0, #0
 800feae:	f04f 0c0a 	mov.w	ip, #10
 800feb2:	4621      	mov	r1, r4
 800feb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800feb8:	3b30      	subs	r3, #48	; 0x30
 800feba:	2b09      	cmp	r3, #9
 800febc:	d94e      	bls.n	800ff5c <_vfiprintf_r+0x1c4>
 800febe:	b1b0      	cbz	r0, 800feee <_vfiprintf_r+0x156>
 800fec0:	9207      	str	r2, [sp, #28]
 800fec2:	e014      	b.n	800feee <_vfiprintf_r+0x156>
 800fec4:	eba0 0308 	sub.w	r3, r0, r8
 800fec8:	fa09 f303 	lsl.w	r3, r9, r3
 800fecc:	4313      	orrs	r3, r2
 800fece:	9304      	str	r3, [sp, #16]
 800fed0:	46a2      	mov	sl, r4
 800fed2:	e7d2      	b.n	800fe7a <_vfiprintf_r+0xe2>
 800fed4:	9b03      	ldr	r3, [sp, #12]
 800fed6:	1d19      	adds	r1, r3, #4
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	9103      	str	r1, [sp, #12]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	bfbb      	ittet	lt
 800fee0:	425b      	neglt	r3, r3
 800fee2:	f042 0202 	orrlt.w	r2, r2, #2
 800fee6:	9307      	strge	r3, [sp, #28]
 800fee8:	9307      	strlt	r3, [sp, #28]
 800feea:	bfb8      	it	lt
 800feec:	9204      	strlt	r2, [sp, #16]
 800feee:	7823      	ldrb	r3, [r4, #0]
 800fef0:	2b2e      	cmp	r3, #46	; 0x2e
 800fef2:	d10c      	bne.n	800ff0e <_vfiprintf_r+0x176>
 800fef4:	7863      	ldrb	r3, [r4, #1]
 800fef6:	2b2a      	cmp	r3, #42	; 0x2a
 800fef8:	d135      	bne.n	800ff66 <_vfiprintf_r+0x1ce>
 800fefa:	9b03      	ldr	r3, [sp, #12]
 800fefc:	1d1a      	adds	r2, r3, #4
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	9203      	str	r2, [sp, #12]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bfb8      	it	lt
 800ff06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ff0a:	3402      	adds	r4, #2
 800ff0c:	9305      	str	r3, [sp, #20]
 800ff0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fff4 <_vfiprintf_r+0x25c>
 800ff12:	7821      	ldrb	r1, [r4, #0]
 800ff14:	2203      	movs	r2, #3
 800ff16:	4650      	mov	r0, sl
 800ff18:	f7f0 f982 	bl	8000220 <memchr>
 800ff1c:	b140      	cbz	r0, 800ff30 <_vfiprintf_r+0x198>
 800ff1e:	2340      	movs	r3, #64	; 0x40
 800ff20:	eba0 000a 	sub.w	r0, r0, sl
 800ff24:	fa03 f000 	lsl.w	r0, r3, r0
 800ff28:	9b04      	ldr	r3, [sp, #16]
 800ff2a:	4303      	orrs	r3, r0
 800ff2c:	3401      	adds	r4, #1
 800ff2e:	9304      	str	r3, [sp, #16]
 800ff30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff34:	482c      	ldr	r0, [pc, #176]	; (800ffe8 <_vfiprintf_r+0x250>)
 800ff36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff3a:	2206      	movs	r2, #6
 800ff3c:	f7f0 f970 	bl	8000220 <memchr>
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d03f      	beq.n	800ffc4 <_vfiprintf_r+0x22c>
 800ff44:	4b29      	ldr	r3, [pc, #164]	; (800ffec <_vfiprintf_r+0x254>)
 800ff46:	bb1b      	cbnz	r3, 800ff90 <_vfiprintf_r+0x1f8>
 800ff48:	9b03      	ldr	r3, [sp, #12]
 800ff4a:	3307      	adds	r3, #7
 800ff4c:	f023 0307 	bic.w	r3, r3, #7
 800ff50:	3308      	adds	r3, #8
 800ff52:	9303      	str	r3, [sp, #12]
 800ff54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff56:	443b      	add	r3, r7
 800ff58:	9309      	str	r3, [sp, #36]	; 0x24
 800ff5a:	e767      	b.n	800fe2c <_vfiprintf_r+0x94>
 800ff5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff60:	460c      	mov	r4, r1
 800ff62:	2001      	movs	r0, #1
 800ff64:	e7a5      	b.n	800feb2 <_vfiprintf_r+0x11a>
 800ff66:	2300      	movs	r3, #0
 800ff68:	3401      	adds	r4, #1
 800ff6a:	9305      	str	r3, [sp, #20]
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	f04f 0c0a 	mov.w	ip, #10
 800ff72:	4620      	mov	r0, r4
 800ff74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff78:	3a30      	subs	r2, #48	; 0x30
 800ff7a:	2a09      	cmp	r2, #9
 800ff7c:	d903      	bls.n	800ff86 <_vfiprintf_r+0x1ee>
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d0c5      	beq.n	800ff0e <_vfiprintf_r+0x176>
 800ff82:	9105      	str	r1, [sp, #20]
 800ff84:	e7c3      	b.n	800ff0e <_vfiprintf_r+0x176>
 800ff86:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e7f0      	b.n	800ff72 <_vfiprintf_r+0x1da>
 800ff90:	ab03      	add	r3, sp, #12
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	462a      	mov	r2, r5
 800ff96:	4b16      	ldr	r3, [pc, #88]	; (800fff0 <_vfiprintf_r+0x258>)
 800ff98:	a904      	add	r1, sp, #16
 800ff9a:	4630      	mov	r0, r6
 800ff9c:	f3af 8000 	nop.w
 800ffa0:	4607      	mov	r7, r0
 800ffa2:	1c78      	adds	r0, r7, #1
 800ffa4:	d1d6      	bne.n	800ff54 <_vfiprintf_r+0x1bc>
 800ffa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffa8:	07d9      	lsls	r1, r3, #31
 800ffaa:	d405      	bmi.n	800ffb8 <_vfiprintf_r+0x220>
 800ffac:	89ab      	ldrh	r3, [r5, #12]
 800ffae:	059a      	lsls	r2, r3, #22
 800ffb0:	d402      	bmi.n	800ffb8 <_vfiprintf_r+0x220>
 800ffb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffb4:	f7ff fd77 	bl	800faa6 <__retarget_lock_release_recursive>
 800ffb8:	89ab      	ldrh	r3, [r5, #12]
 800ffba:	065b      	lsls	r3, r3, #25
 800ffbc:	f53f af12 	bmi.w	800fde4 <_vfiprintf_r+0x4c>
 800ffc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ffc2:	e711      	b.n	800fde8 <_vfiprintf_r+0x50>
 800ffc4:	ab03      	add	r3, sp, #12
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	462a      	mov	r2, r5
 800ffca:	4b09      	ldr	r3, [pc, #36]	; (800fff0 <_vfiprintf_r+0x258>)
 800ffcc:	a904      	add	r1, sp, #16
 800ffce:	4630      	mov	r0, r6
 800ffd0:	f000 f880 	bl	80100d4 <_printf_i>
 800ffd4:	e7e4      	b.n	800ffa0 <_vfiprintf_r+0x208>
 800ffd6:	bf00      	nop
 800ffd8:	080178a0 	.word	0x080178a0
 800ffdc:	080178c0 	.word	0x080178c0
 800ffe0:	08017880 	.word	0x08017880
 800ffe4:	080178e0 	.word	0x080178e0
 800ffe8:	080178ea 	.word	0x080178ea
 800ffec:	00000000 	.word	0x00000000
 800fff0:	0800fd73 	.word	0x0800fd73
 800fff4:	080178e6 	.word	0x080178e6

0800fff8 <_printf_common>:
 800fff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fffc:	4616      	mov	r6, r2
 800fffe:	4699      	mov	r9, r3
 8010000:	688a      	ldr	r2, [r1, #8]
 8010002:	690b      	ldr	r3, [r1, #16]
 8010004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010008:	4293      	cmp	r3, r2
 801000a:	bfb8      	it	lt
 801000c:	4613      	movlt	r3, r2
 801000e:	6033      	str	r3, [r6, #0]
 8010010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010014:	4607      	mov	r7, r0
 8010016:	460c      	mov	r4, r1
 8010018:	b10a      	cbz	r2, 801001e <_printf_common+0x26>
 801001a:	3301      	adds	r3, #1
 801001c:	6033      	str	r3, [r6, #0]
 801001e:	6823      	ldr	r3, [r4, #0]
 8010020:	0699      	lsls	r1, r3, #26
 8010022:	bf42      	ittt	mi
 8010024:	6833      	ldrmi	r3, [r6, #0]
 8010026:	3302      	addmi	r3, #2
 8010028:	6033      	strmi	r3, [r6, #0]
 801002a:	6825      	ldr	r5, [r4, #0]
 801002c:	f015 0506 	ands.w	r5, r5, #6
 8010030:	d106      	bne.n	8010040 <_printf_common+0x48>
 8010032:	f104 0a19 	add.w	sl, r4, #25
 8010036:	68e3      	ldr	r3, [r4, #12]
 8010038:	6832      	ldr	r2, [r6, #0]
 801003a:	1a9b      	subs	r3, r3, r2
 801003c:	42ab      	cmp	r3, r5
 801003e:	dc26      	bgt.n	801008e <_printf_common+0x96>
 8010040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010044:	1e13      	subs	r3, r2, #0
 8010046:	6822      	ldr	r2, [r4, #0]
 8010048:	bf18      	it	ne
 801004a:	2301      	movne	r3, #1
 801004c:	0692      	lsls	r2, r2, #26
 801004e:	d42b      	bmi.n	80100a8 <_printf_common+0xb0>
 8010050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010054:	4649      	mov	r1, r9
 8010056:	4638      	mov	r0, r7
 8010058:	47c0      	blx	r8
 801005a:	3001      	adds	r0, #1
 801005c:	d01e      	beq.n	801009c <_printf_common+0xa4>
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	68e5      	ldr	r5, [r4, #12]
 8010062:	6832      	ldr	r2, [r6, #0]
 8010064:	f003 0306 	and.w	r3, r3, #6
 8010068:	2b04      	cmp	r3, #4
 801006a:	bf08      	it	eq
 801006c:	1aad      	subeq	r5, r5, r2
 801006e:	68a3      	ldr	r3, [r4, #8]
 8010070:	6922      	ldr	r2, [r4, #16]
 8010072:	bf0c      	ite	eq
 8010074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010078:	2500      	movne	r5, #0
 801007a:	4293      	cmp	r3, r2
 801007c:	bfc4      	itt	gt
 801007e:	1a9b      	subgt	r3, r3, r2
 8010080:	18ed      	addgt	r5, r5, r3
 8010082:	2600      	movs	r6, #0
 8010084:	341a      	adds	r4, #26
 8010086:	42b5      	cmp	r5, r6
 8010088:	d11a      	bne.n	80100c0 <_printf_common+0xc8>
 801008a:	2000      	movs	r0, #0
 801008c:	e008      	b.n	80100a0 <_printf_common+0xa8>
 801008e:	2301      	movs	r3, #1
 8010090:	4652      	mov	r2, sl
 8010092:	4649      	mov	r1, r9
 8010094:	4638      	mov	r0, r7
 8010096:	47c0      	blx	r8
 8010098:	3001      	adds	r0, #1
 801009a:	d103      	bne.n	80100a4 <_printf_common+0xac>
 801009c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a4:	3501      	adds	r5, #1
 80100a6:	e7c6      	b.n	8010036 <_printf_common+0x3e>
 80100a8:	18e1      	adds	r1, r4, r3
 80100aa:	1c5a      	adds	r2, r3, #1
 80100ac:	2030      	movs	r0, #48	; 0x30
 80100ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80100b2:	4422      	add	r2, r4
 80100b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80100b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80100bc:	3302      	adds	r3, #2
 80100be:	e7c7      	b.n	8010050 <_printf_common+0x58>
 80100c0:	2301      	movs	r3, #1
 80100c2:	4622      	mov	r2, r4
 80100c4:	4649      	mov	r1, r9
 80100c6:	4638      	mov	r0, r7
 80100c8:	47c0      	blx	r8
 80100ca:	3001      	adds	r0, #1
 80100cc:	d0e6      	beq.n	801009c <_printf_common+0xa4>
 80100ce:	3601      	adds	r6, #1
 80100d0:	e7d9      	b.n	8010086 <_printf_common+0x8e>
	...

080100d4 <_printf_i>:
 80100d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100d8:	7e0f      	ldrb	r7, [r1, #24]
 80100da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80100dc:	2f78      	cmp	r7, #120	; 0x78
 80100de:	4691      	mov	r9, r2
 80100e0:	4680      	mov	r8, r0
 80100e2:	460c      	mov	r4, r1
 80100e4:	469a      	mov	sl, r3
 80100e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80100ea:	d807      	bhi.n	80100fc <_printf_i+0x28>
 80100ec:	2f62      	cmp	r7, #98	; 0x62
 80100ee:	d80a      	bhi.n	8010106 <_printf_i+0x32>
 80100f0:	2f00      	cmp	r7, #0
 80100f2:	f000 80d8 	beq.w	80102a6 <_printf_i+0x1d2>
 80100f6:	2f58      	cmp	r7, #88	; 0x58
 80100f8:	f000 80a3 	beq.w	8010242 <_printf_i+0x16e>
 80100fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010104:	e03a      	b.n	801017c <_printf_i+0xa8>
 8010106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801010a:	2b15      	cmp	r3, #21
 801010c:	d8f6      	bhi.n	80100fc <_printf_i+0x28>
 801010e:	a101      	add	r1, pc, #4	; (adr r1, 8010114 <_printf_i+0x40>)
 8010110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010114:	0801016d 	.word	0x0801016d
 8010118:	08010181 	.word	0x08010181
 801011c:	080100fd 	.word	0x080100fd
 8010120:	080100fd 	.word	0x080100fd
 8010124:	080100fd 	.word	0x080100fd
 8010128:	080100fd 	.word	0x080100fd
 801012c:	08010181 	.word	0x08010181
 8010130:	080100fd 	.word	0x080100fd
 8010134:	080100fd 	.word	0x080100fd
 8010138:	080100fd 	.word	0x080100fd
 801013c:	080100fd 	.word	0x080100fd
 8010140:	0801028d 	.word	0x0801028d
 8010144:	080101b1 	.word	0x080101b1
 8010148:	0801026f 	.word	0x0801026f
 801014c:	080100fd 	.word	0x080100fd
 8010150:	080100fd 	.word	0x080100fd
 8010154:	080102af 	.word	0x080102af
 8010158:	080100fd 	.word	0x080100fd
 801015c:	080101b1 	.word	0x080101b1
 8010160:	080100fd 	.word	0x080100fd
 8010164:	080100fd 	.word	0x080100fd
 8010168:	08010277 	.word	0x08010277
 801016c:	682b      	ldr	r3, [r5, #0]
 801016e:	1d1a      	adds	r2, r3, #4
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	602a      	str	r2, [r5, #0]
 8010174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801017c:	2301      	movs	r3, #1
 801017e:	e0a3      	b.n	80102c8 <_printf_i+0x1f4>
 8010180:	6820      	ldr	r0, [r4, #0]
 8010182:	6829      	ldr	r1, [r5, #0]
 8010184:	0606      	lsls	r6, r0, #24
 8010186:	f101 0304 	add.w	r3, r1, #4
 801018a:	d50a      	bpl.n	80101a2 <_printf_i+0xce>
 801018c:	680e      	ldr	r6, [r1, #0]
 801018e:	602b      	str	r3, [r5, #0]
 8010190:	2e00      	cmp	r6, #0
 8010192:	da03      	bge.n	801019c <_printf_i+0xc8>
 8010194:	232d      	movs	r3, #45	; 0x2d
 8010196:	4276      	negs	r6, r6
 8010198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801019c:	485e      	ldr	r0, [pc, #376]	; (8010318 <_printf_i+0x244>)
 801019e:	230a      	movs	r3, #10
 80101a0:	e019      	b.n	80101d6 <_printf_i+0x102>
 80101a2:	680e      	ldr	r6, [r1, #0]
 80101a4:	602b      	str	r3, [r5, #0]
 80101a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80101aa:	bf18      	it	ne
 80101ac:	b236      	sxthne	r6, r6
 80101ae:	e7ef      	b.n	8010190 <_printf_i+0xbc>
 80101b0:	682b      	ldr	r3, [r5, #0]
 80101b2:	6820      	ldr	r0, [r4, #0]
 80101b4:	1d19      	adds	r1, r3, #4
 80101b6:	6029      	str	r1, [r5, #0]
 80101b8:	0601      	lsls	r1, r0, #24
 80101ba:	d501      	bpl.n	80101c0 <_printf_i+0xec>
 80101bc:	681e      	ldr	r6, [r3, #0]
 80101be:	e002      	b.n	80101c6 <_printf_i+0xf2>
 80101c0:	0646      	lsls	r6, r0, #25
 80101c2:	d5fb      	bpl.n	80101bc <_printf_i+0xe8>
 80101c4:	881e      	ldrh	r6, [r3, #0]
 80101c6:	4854      	ldr	r0, [pc, #336]	; (8010318 <_printf_i+0x244>)
 80101c8:	2f6f      	cmp	r7, #111	; 0x6f
 80101ca:	bf0c      	ite	eq
 80101cc:	2308      	moveq	r3, #8
 80101ce:	230a      	movne	r3, #10
 80101d0:	2100      	movs	r1, #0
 80101d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101d6:	6865      	ldr	r5, [r4, #4]
 80101d8:	60a5      	str	r5, [r4, #8]
 80101da:	2d00      	cmp	r5, #0
 80101dc:	bfa2      	ittt	ge
 80101de:	6821      	ldrge	r1, [r4, #0]
 80101e0:	f021 0104 	bicge.w	r1, r1, #4
 80101e4:	6021      	strge	r1, [r4, #0]
 80101e6:	b90e      	cbnz	r6, 80101ec <_printf_i+0x118>
 80101e8:	2d00      	cmp	r5, #0
 80101ea:	d04d      	beq.n	8010288 <_printf_i+0x1b4>
 80101ec:	4615      	mov	r5, r2
 80101ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80101f2:	fb03 6711 	mls	r7, r3, r1, r6
 80101f6:	5dc7      	ldrb	r7, [r0, r7]
 80101f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80101fc:	4637      	mov	r7, r6
 80101fe:	42bb      	cmp	r3, r7
 8010200:	460e      	mov	r6, r1
 8010202:	d9f4      	bls.n	80101ee <_printf_i+0x11a>
 8010204:	2b08      	cmp	r3, #8
 8010206:	d10b      	bne.n	8010220 <_printf_i+0x14c>
 8010208:	6823      	ldr	r3, [r4, #0]
 801020a:	07de      	lsls	r6, r3, #31
 801020c:	d508      	bpl.n	8010220 <_printf_i+0x14c>
 801020e:	6923      	ldr	r3, [r4, #16]
 8010210:	6861      	ldr	r1, [r4, #4]
 8010212:	4299      	cmp	r1, r3
 8010214:	bfde      	ittt	le
 8010216:	2330      	movle	r3, #48	; 0x30
 8010218:	f805 3c01 	strble.w	r3, [r5, #-1]
 801021c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010220:	1b52      	subs	r2, r2, r5
 8010222:	6122      	str	r2, [r4, #16]
 8010224:	f8cd a000 	str.w	sl, [sp]
 8010228:	464b      	mov	r3, r9
 801022a:	aa03      	add	r2, sp, #12
 801022c:	4621      	mov	r1, r4
 801022e:	4640      	mov	r0, r8
 8010230:	f7ff fee2 	bl	800fff8 <_printf_common>
 8010234:	3001      	adds	r0, #1
 8010236:	d14c      	bne.n	80102d2 <_printf_i+0x1fe>
 8010238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801023c:	b004      	add	sp, #16
 801023e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010242:	4835      	ldr	r0, [pc, #212]	; (8010318 <_printf_i+0x244>)
 8010244:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010248:	6829      	ldr	r1, [r5, #0]
 801024a:	6823      	ldr	r3, [r4, #0]
 801024c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010250:	6029      	str	r1, [r5, #0]
 8010252:	061d      	lsls	r5, r3, #24
 8010254:	d514      	bpl.n	8010280 <_printf_i+0x1ac>
 8010256:	07df      	lsls	r7, r3, #31
 8010258:	bf44      	itt	mi
 801025a:	f043 0320 	orrmi.w	r3, r3, #32
 801025e:	6023      	strmi	r3, [r4, #0]
 8010260:	b91e      	cbnz	r6, 801026a <_printf_i+0x196>
 8010262:	6823      	ldr	r3, [r4, #0]
 8010264:	f023 0320 	bic.w	r3, r3, #32
 8010268:	6023      	str	r3, [r4, #0]
 801026a:	2310      	movs	r3, #16
 801026c:	e7b0      	b.n	80101d0 <_printf_i+0xfc>
 801026e:	6823      	ldr	r3, [r4, #0]
 8010270:	f043 0320 	orr.w	r3, r3, #32
 8010274:	6023      	str	r3, [r4, #0]
 8010276:	2378      	movs	r3, #120	; 0x78
 8010278:	4828      	ldr	r0, [pc, #160]	; (801031c <_printf_i+0x248>)
 801027a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801027e:	e7e3      	b.n	8010248 <_printf_i+0x174>
 8010280:	0659      	lsls	r1, r3, #25
 8010282:	bf48      	it	mi
 8010284:	b2b6      	uxthmi	r6, r6
 8010286:	e7e6      	b.n	8010256 <_printf_i+0x182>
 8010288:	4615      	mov	r5, r2
 801028a:	e7bb      	b.n	8010204 <_printf_i+0x130>
 801028c:	682b      	ldr	r3, [r5, #0]
 801028e:	6826      	ldr	r6, [r4, #0]
 8010290:	6961      	ldr	r1, [r4, #20]
 8010292:	1d18      	adds	r0, r3, #4
 8010294:	6028      	str	r0, [r5, #0]
 8010296:	0635      	lsls	r5, r6, #24
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	d501      	bpl.n	80102a0 <_printf_i+0x1cc>
 801029c:	6019      	str	r1, [r3, #0]
 801029e:	e002      	b.n	80102a6 <_printf_i+0x1d2>
 80102a0:	0670      	lsls	r0, r6, #25
 80102a2:	d5fb      	bpl.n	801029c <_printf_i+0x1c8>
 80102a4:	8019      	strh	r1, [r3, #0]
 80102a6:	2300      	movs	r3, #0
 80102a8:	6123      	str	r3, [r4, #16]
 80102aa:	4615      	mov	r5, r2
 80102ac:	e7ba      	b.n	8010224 <_printf_i+0x150>
 80102ae:	682b      	ldr	r3, [r5, #0]
 80102b0:	1d1a      	adds	r2, r3, #4
 80102b2:	602a      	str	r2, [r5, #0]
 80102b4:	681d      	ldr	r5, [r3, #0]
 80102b6:	6862      	ldr	r2, [r4, #4]
 80102b8:	2100      	movs	r1, #0
 80102ba:	4628      	mov	r0, r5
 80102bc:	f7ef ffb0 	bl	8000220 <memchr>
 80102c0:	b108      	cbz	r0, 80102c6 <_printf_i+0x1f2>
 80102c2:	1b40      	subs	r0, r0, r5
 80102c4:	6060      	str	r0, [r4, #4]
 80102c6:	6863      	ldr	r3, [r4, #4]
 80102c8:	6123      	str	r3, [r4, #16]
 80102ca:	2300      	movs	r3, #0
 80102cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80102d0:	e7a8      	b.n	8010224 <_printf_i+0x150>
 80102d2:	6923      	ldr	r3, [r4, #16]
 80102d4:	462a      	mov	r2, r5
 80102d6:	4649      	mov	r1, r9
 80102d8:	4640      	mov	r0, r8
 80102da:	47d0      	blx	sl
 80102dc:	3001      	adds	r0, #1
 80102de:	d0ab      	beq.n	8010238 <_printf_i+0x164>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	079b      	lsls	r3, r3, #30
 80102e4:	d413      	bmi.n	801030e <_printf_i+0x23a>
 80102e6:	68e0      	ldr	r0, [r4, #12]
 80102e8:	9b03      	ldr	r3, [sp, #12]
 80102ea:	4298      	cmp	r0, r3
 80102ec:	bfb8      	it	lt
 80102ee:	4618      	movlt	r0, r3
 80102f0:	e7a4      	b.n	801023c <_printf_i+0x168>
 80102f2:	2301      	movs	r3, #1
 80102f4:	4632      	mov	r2, r6
 80102f6:	4649      	mov	r1, r9
 80102f8:	4640      	mov	r0, r8
 80102fa:	47d0      	blx	sl
 80102fc:	3001      	adds	r0, #1
 80102fe:	d09b      	beq.n	8010238 <_printf_i+0x164>
 8010300:	3501      	adds	r5, #1
 8010302:	68e3      	ldr	r3, [r4, #12]
 8010304:	9903      	ldr	r1, [sp, #12]
 8010306:	1a5b      	subs	r3, r3, r1
 8010308:	42ab      	cmp	r3, r5
 801030a:	dcf2      	bgt.n	80102f2 <_printf_i+0x21e>
 801030c:	e7eb      	b.n	80102e6 <_printf_i+0x212>
 801030e:	2500      	movs	r5, #0
 8010310:	f104 0619 	add.w	r6, r4, #25
 8010314:	e7f5      	b.n	8010302 <_printf_i+0x22e>
 8010316:	bf00      	nop
 8010318:	080178f1 	.word	0x080178f1
 801031c:	08017902 	.word	0x08017902

08010320 <_sbrk_r>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4d06      	ldr	r5, [pc, #24]	; (801033c <_sbrk_r+0x1c>)
 8010324:	2300      	movs	r3, #0
 8010326:	4604      	mov	r4, r0
 8010328:	4608      	mov	r0, r1
 801032a:	602b      	str	r3, [r5, #0]
 801032c:	f7f0 f974 	bl	8000618 <_sbrk>
 8010330:	1c43      	adds	r3, r0, #1
 8010332:	d102      	bne.n	801033a <_sbrk_r+0x1a>
 8010334:	682b      	ldr	r3, [r5, #0]
 8010336:	b103      	cbz	r3, 801033a <_sbrk_r+0x1a>
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	bd38      	pop	{r3, r4, r5, pc}
 801033c:	200140b0 	.word	0x200140b0

08010340 <__sread>:
 8010340:	b510      	push	{r4, lr}
 8010342:	460c      	mov	r4, r1
 8010344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010348:	f000 f8a8 	bl	801049c <_read_r>
 801034c:	2800      	cmp	r0, #0
 801034e:	bfab      	itete	ge
 8010350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010352:	89a3      	ldrhlt	r3, [r4, #12]
 8010354:	181b      	addge	r3, r3, r0
 8010356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801035a:	bfac      	ite	ge
 801035c:	6563      	strge	r3, [r4, #84]	; 0x54
 801035e:	81a3      	strhlt	r3, [r4, #12]
 8010360:	bd10      	pop	{r4, pc}

08010362 <__swrite>:
 8010362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010366:	461f      	mov	r7, r3
 8010368:	898b      	ldrh	r3, [r1, #12]
 801036a:	05db      	lsls	r3, r3, #23
 801036c:	4605      	mov	r5, r0
 801036e:	460c      	mov	r4, r1
 8010370:	4616      	mov	r6, r2
 8010372:	d505      	bpl.n	8010380 <__swrite+0x1e>
 8010374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010378:	2302      	movs	r3, #2
 801037a:	2200      	movs	r2, #0
 801037c:	f000 f870 	bl	8010460 <_lseek_r>
 8010380:	89a3      	ldrh	r3, [r4, #12]
 8010382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801038a:	81a3      	strh	r3, [r4, #12]
 801038c:	4632      	mov	r2, r6
 801038e:	463b      	mov	r3, r7
 8010390:	4628      	mov	r0, r5
 8010392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010396:	f000 b817 	b.w	80103c8 <_write_r>

0801039a <__sseek>:
 801039a:	b510      	push	{r4, lr}
 801039c:	460c      	mov	r4, r1
 801039e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a2:	f000 f85d 	bl	8010460 <_lseek_r>
 80103a6:	1c43      	adds	r3, r0, #1
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	bf15      	itete	ne
 80103ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80103ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103b6:	81a3      	strheq	r3, [r4, #12]
 80103b8:	bf18      	it	ne
 80103ba:	81a3      	strhne	r3, [r4, #12]
 80103bc:	bd10      	pop	{r4, pc}

080103be <__sclose>:
 80103be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103c2:	f000 b81b 	b.w	80103fc <_close_r>
	...

080103c8 <_write_r>:
 80103c8:	b538      	push	{r3, r4, r5, lr}
 80103ca:	4d07      	ldr	r5, [pc, #28]	; (80103e8 <_write_r+0x20>)
 80103cc:	4604      	mov	r4, r0
 80103ce:	4608      	mov	r0, r1
 80103d0:	4611      	mov	r1, r2
 80103d2:	2200      	movs	r2, #0
 80103d4:	602a      	str	r2, [r5, #0]
 80103d6:	461a      	mov	r2, r3
 80103d8:	f7f0 f94e 	bl	8000678 <_write>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d102      	bne.n	80103e6 <_write_r+0x1e>
 80103e0:	682b      	ldr	r3, [r5, #0]
 80103e2:	b103      	cbz	r3, 80103e6 <_write_r+0x1e>
 80103e4:	6023      	str	r3, [r4, #0]
 80103e6:	bd38      	pop	{r3, r4, r5, pc}
 80103e8:	200140b0 	.word	0x200140b0

080103ec <abort>:
 80103ec:	b508      	push	{r3, lr}
 80103ee:	2006      	movs	r0, #6
 80103f0:	f000 f88e 	bl	8010510 <raise>
 80103f4:	2001      	movs	r0, #1
 80103f6:	f7f0 f939 	bl	800066c <_exit>
	...

080103fc <_close_r>:
 80103fc:	b538      	push	{r3, r4, r5, lr}
 80103fe:	4d06      	ldr	r5, [pc, #24]	; (8010418 <_close_r+0x1c>)
 8010400:	2300      	movs	r3, #0
 8010402:	4604      	mov	r4, r0
 8010404:	4608      	mov	r0, r1
 8010406:	602b      	str	r3, [r5, #0]
 8010408:	f7f0 f944 	bl	8000694 <_close>
 801040c:	1c43      	adds	r3, r0, #1
 801040e:	d102      	bne.n	8010416 <_close_r+0x1a>
 8010410:	682b      	ldr	r3, [r5, #0]
 8010412:	b103      	cbz	r3, 8010416 <_close_r+0x1a>
 8010414:	6023      	str	r3, [r4, #0]
 8010416:	bd38      	pop	{r3, r4, r5, pc}
 8010418:	200140b0 	.word	0x200140b0

0801041c <_fstat_r>:
 801041c:	b538      	push	{r3, r4, r5, lr}
 801041e:	4d07      	ldr	r5, [pc, #28]	; (801043c <_fstat_r+0x20>)
 8010420:	2300      	movs	r3, #0
 8010422:	4604      	mov	r4, r0
 8010424:	4608      	mov	r0, r1
 8010426:	4611      	mov	r1, r2
 8010428:	602b      	str	r3, [r5, #0]
 801042a:	f7f0 f936 	bl	800069a <_fstat>
 801042e:	1c43      	adds	r3, r0, #1
 8010430:	d102      	bne.n	8010438 <_fstat_r+0x1c>
 8010432:	682b      	ldr	r3, [r5, #0]
 8010434:	b103      	cbz	r3, 8010438 <_fstat_r+0x1c>
 8010436:	6023      	str	r3, [r4, #0]
 8010438:	bd38      	pop	{r3, r4, r5, pc}
 801043a:	bf00      	nop
 801043c:	200140b0 	.word	0x200140b0

08010440 <_isatty_r>:
 8010440:	b538      	push	{r3, r4, r5, lr}
 8010442:	4d06      	ldr	r5, [pc, #24]	; (801045c <_isatty_r+0x1c>)
 8010444:	2300      	movs	r3, #0
 8010446:	4604      	mov	r4, r0
 8010448:	4608      	mov	r0, r1
 801044a:	602b      	str	r3, [r5, #0]
 801044c:	f7f0 f92a 	bl	80006a4 <_isatty>
 8010450:	1c43      	adds	r3, r0, #1
 8010452:	d102      	bne.n	801045a <_isatty_r+0x1a>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	b103      	cbz	r3, 801045a <_isatty_r+0x1a>
 8010458:	6023      	str	r3, [r4, #0]
 801045a:	bd38      	pop	{r3, r4, r5, pc}
 801045c:	200140b0 	.word	0x200140b0

08010460 <_lseek_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d07      	ldr	r5, [pc, #28]	; (8010480 <_lseek_r+0x20>)
 8010464:	4604      	mov	r4, r0
 8010466:	4608      	mov	r0, r1
 8010468:	4611      	mov	r1, r2
 801046a:	2200      	movs	r2, #0
 801046c:	602a      	str	r2, [r5, #0]
 801046e:	461a      	mov	r2, r3
 8010470:	f7f0 f91a 	bl	80006a8 <_lseek>
 8010474:	1c43      	adds	r3, r0, #1
 8010476:	d102      	bne.n	801047e <_lseek_r+0x1e>
 8010478:	682b      	ldr	r3, [r5, #0]
 801047a:	b103      	cbz	r3, 801047e <_lseek_r+0x1e>
 801047c:	6023      	str	r3, [r4, #0]
 801047e:	bd38      	pop	{r3, r4, r5, pc}
 8010480:	200140b0 	.word	0x200140b0

08010484 <__malloc_lock>:
 8010484:	4801      	ldr	r0, [pc, #4]	; (801048c <__malloc_lock+0x8>)
 8010486:	f7ff bb0d 	b.w	800faa4 <__retarget_lock_acquire_recursive>
 801048a:	bf00      	nop
 801048c:	200140b4 	.word	0x200140b4

08010490 <__malloc_unlock>:
 8010490:	4801      	ldr	r0, [pc, #4]	; (8010498 <__malloc_unlock+0x8>)
 8010492:	f7ff bb08 	b.w	800faa6 <__retarget_lock_release_recursive>
 8010496:	bf00      	nop
 8010498:	200140b4 	.word	0x200140b4

0801049c <_read_r>:
 801049c:	b538      	push	{r3, r4, r5, lr}
 801049e:	4d07      	ldr	r5, [pc, #28]	; (80104bc <_read_r+0x20>)
 80104a0:	4604      	mov	r4, r0
 80104a2:	4608      	mov	r0, r1
 80104a4:	4611      	mov	r1, r2
 80104a6:	2200      	movs	r2, #0
 80104a8:	602a      	str	r2, [r5, #0]
 80104aa:	461a      	mov	r2, r3
 80104ac:	f7f0 f8fe 	bl	80006ac <_read>
 80104b0:	1c43      	adds	r3, r0, #1
 80104b2:	d102      	bne.n	80104ba <_read_r+0x1e>
 80104b4:	682b      	ldr	r3, [r5, #0]
 80104b6:	b103      	cbz	r3, 80104ba <_read_r+0x1e>
 80104b8:	6023      	str	r3, [r4, #0]
 80104ba:	bd38      	pop	{r3, r4, r5, pc}
 80104bc:	200140b0 	.word	0x200140b0

080104c0 <_raise_r>:
 80104c0:	291f      	cmp	r1, #31
 80104c2:	b538      	push	{r3, r4, r5, lr}
 80104c4:	4604      	mov	r4, r0
 80104c6:	460d      	mov	r5, r1
 80104c8:	d904      	bls.n	80104d4 <_raise_r+0x14>
 80104ca:	2316      	movs	r3, #22
 80104cc:	6003      	str	r3, [r0, #0]
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80104d2:	bd38      	pop	{r3, r4, r5, pc}
 80104d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80104d6:	b112      	cbz	r2, 80104de <_raise_r+0x1e>
 80104d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80104dc:	b94b      	cbnz	r3, 80104f2 <_raise_r+0x32>
 80104de:	4620      	mov	r0, r4
 80104e0:	f000 f830 	bl	8010544 <_getpid_r>
 80104e4:	462a      	mov	r2, r5
 80104e6:	4601      	mov	r1, r0
 80104e8:	4620      	mov	r0, r4
 80104ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104ee:	f000 b817 	b.w	8010520 <_kill_r>
 80104f2:	2b01      	cmp	r3, #1
 80104f4:	d00a      	beq.n	801050c <_raise_r+0x4c>
 80104f6:	1c59      	adds	r1, r3, #1
 80104f8:	d103      	bne.n	8010502 <_raise_r+0x42>
 80104fa:	2316      	movs	r3, #22
 80104fc:	6003      	str	r3, [r0, #0]
 80104fe:	2001      	movs	r0, #1
 8010500:	e7e7      	b.n	80104d2 <_raise_r+0x12>
 8010502:	2400      	movs	r4, #0
 8010504:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010508:	4628      	mov	r0, r5
 801050a:	4798      	blx	r3
 801050c:	2000      	movs	r0, #0
 801050e:	e7e0      	b.n	80104d2 <_raise_r+0x12>

08010510 <raise>:
 8010510:	4b02      	ldr	r3, [pc, #8]	; (801051c <raise+0xc>)
 8010512:	4601      	mov	r1, r0
 8010514:	6818      	ldr	r0, [r3, #0]
 8010516:	f7ff bfd3 	b.w	80104c0 <_raise_r>
 801051a:	bf00      	nop
 801051c:	20001a6c 	.word	0x20001a6c

08010520 <_kill_r>:
 8010520:	b538      	push	{r3, r4, r5, lr}
 8010522:	4d07      	ldr	r5, [pc, #28]	; (8010540 <_kill_r+0x20>)
 8010524:	2300      	movs	r3, #0
 8010526:	4604      	mov	r4, r0
 8010528:	4608      	mov	r0, r1
 801052a:	4611      	mov	r1, r2
 801052c:	602b      	str	r3, [r5, #0]
 801052e:	f7f0 f895 	bl	800065c <_kill>
 8010532:	1c43      	adds	r3, r0, #1
 8010534:	d102      	bne.n	801053c <_kill_r+0x1c>
 8010536:	682b      	ldr	r3, [r5, #0]
 8010538:	b103      	cbz	r3, 801053c <_kill_r+0x1c>
 801053a:	6023      	str	r3, [r4, #0]
 801053c:	bd38      	pop	{r3, r4, r5, pc}
 801053e:	bf00      	nop
 8010540:	200140b0 	.word	0x200140b0

08010544 <_getpid_r>:
 8010544:	f7f0 b888 	b.w	8000658 <_getpid>

08010548 <_init>:
 8010548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054a:	bf00      	nop
 801054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801054e:	bc08      	pop	{r3}
 8010550:	469e      	mov	lr, r3
 8010552:	4770      	bx	lr

08010554 <_fini>:
 8010554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010556:	bf00      	nop
 8010558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055a:	bc08      	pop	{r3}
 801055c:	469e      	mov	lr, r3
 801055e:	4770      	bx	lr
