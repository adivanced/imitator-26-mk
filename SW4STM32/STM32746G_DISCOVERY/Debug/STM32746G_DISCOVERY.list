
STM32746G_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f64c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000071dc  0800f81c  0800f81c  0001f81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080169f8  080169f8  000269f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016a00  08016a00  00026a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016a04  08016a04  00026a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001ad0  20000000  08016a08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .TxDecripSection 000000a0  20001ad0  080184d8  00031ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          0001251c  20001b70  08018578  00031b70  2**2
                  ALLOC
  9 ._user_heap_stack 00000664  2001408c  08018578  0003408c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00031b70  2**0
                  CONTENTS, READONLY
 11 .debug_line   00048690  00000000  00000000  00031ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000490fb  00000000  00000000  0007a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000ac65  00000000  00000000  000c332b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002530  00000000  00000000  000cdf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0011efee  00000000  00000000  000d04c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003dd8  00000000  00000000  001ef4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00029fe9  00000000  00000000  001f3288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037ada  00000000  00000000  0021d271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00254d4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007df4  00000000  00000000  00254d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .RxDecripSection 000000a0  2004c000  2004c000  0003c000  2**2
                  ALLOC

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001b70 	.word	0x20001b70
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f804 	.word	0x0800f804

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001b74 	.word	0x20001b74
 800020c:	0800f804 	.word	0x0800f804

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005ca:	e003      	b.n	80005d4 <LoopCopyDataInit>

080005cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005d2:	3104      	adds	r1, #4

080005d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005dc:	d3f6      	bcc.n	80005cc <CopyDataInit>
  ldr  r2, =_sbss
 80005de:	4a0b      	ldr	r2, [pc, #44]	; (800060c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005e0:	e002      	b.n	80005e8 <LoopFillZerobss>

080005e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005e4:	f842 3b04 	str.w	r3, [r2], #4

080005e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005ec:	d3f9      	bcc.n	80005e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ee:	f002 fc75 	bl	8002edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f2:	f00d ffef 	bl	800e5d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f6:	f001 fcc1 	bl	8001f7c <main>
  bx  lr    
 80005fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005fc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000600:	08016a08 	.word	0x08016a08
  ldr  r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000608:	20001ad0 	.word	0x20001ad0
  ldr  r2, =_sbss
 800060c:	20001b70 	.word	0x20001b70
  ldr  r3, = _ebss
 8000610:	2001408c 	.word	0x2001408c

08000614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC_IRQHandler>
	...

08000618 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <_sbrk+0x38>)
 800061a:	6811      	ldr	r1, [r2, #0]
{
 800061c:	b508      	push	{r3, lr}
 800061e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8000620:	b909      	cbnz	r1, 8000626 <_sbrk+0xe>
		heap_end = &end;
 8000622:	490c      	ldr	r1, [pc, #48]	; (8000654 <_sbrk+0x3c>)
 8000624:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000626:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	prev_heap_end = heap_end;
 800062a:	6810      	ldr	r0, [r2, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800062c:	f8d1 1d08 	ldr.w	r1, [r1, #3336]	; 0xd08
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000630:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000632:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8000634:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000638:	428b      	cmp	r3, r1
 800063a:	d906      	bls.n	800064a <_sbrk+0x32>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800063c:	f00d ffc4 	bl	800e5c8 <__errno>
 8000640:	230c      	movs	r3, #12
 8000642:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000648:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800064a:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800064c:	e7fc      	b.n	8000648 <_sbrk+0x30>
 800064e:	bf00      	nop
 8000650:	20001b8c 	.word	0x20001b8c
 8000654:	20014090 	.word	0x20014090

08000658 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000658:	2001      	movs	r0, #1
 800065a:	4770      	bx	lr

0800065c <_kill>:

int _kill(int pid, int sig)
{
 800065c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800065e:	f00d ffb3 	bl	800e5c8 <__errno>
 8000662:	2316      	movs	r3, #22
 8000664:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800066a:	bd08      	pop	{r3, pc}

0800066c <_exit>:

void _exit (int status)
{
 800066c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800066e:	f00d ffab 	bl	800e5c8 <__errno>
 8000672:	2316      	movs	r3, #22
 8000674:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}
 8000676:	e7fe      	b.n	8000676 <_exit+0xa>

08000678 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	460d      	mov	r5, r1
 800067c:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067e:	460e      	mov	r6, r1
 8000680:	1b73      	subs	r3, r6, r5
 8000682:	429c      	cmp	r4, r3
 8000684:	dc01      	bgt.n	800068a <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8000686:	4620      	mov	r0, r4
 8000688:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 800068a:	f816 0b01 	ldrb.w	r0, [r6], #1
 800068e:	f001 feb5 	bl	80023fc <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000692:	e7f5      	b.n	8000680 <_write+0x8>

08000694 <_close>:

int _close(int file)
{
	return -1;
}
 8000694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000698:	4770      	bx	lr

0800069a <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800069a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800069e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80006a0:	604b      	str	r3, [r1, #4]
}
 80006a2:	4770      	bx	lr

080006a4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006a4:	2001      	movs	r0, #1
 80006a6:	4770      	bx	lr

080006a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006a8:	2000      	movs	r0, #0
 80006aa:	4770      	bx	lr

080006ac <_read>:

int _read(int file, char *ptr, int len)
{
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	460d      	mov	r5, r1
 80006b0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b2:	460e      	mov	r6, r1
 80006b4:	1b73      	subs	r3, r6, r5
 80006b6:	429c      	cmp	r4, r3
 80006b8:	dc01      	bgt.n	80006be <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80006ba:	4620      	mov	r0, r4
 80006bc:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80006be:	f3af 8000 	nop.w
 80006c2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	e7f5      	b.n	80006b4 <_read+0x8>

080006c8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif)
{
 80006c8:	b510      	push	{r4, lr}
  if (netif_is_up(netif))
 80006ca:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
 80006ce:	b086      	sub	sp, #24
 80006d0:	4c0d      	ldr	r4, [pc, #52]	; (8000708 <ethernet_link_status_updated+0x40>)
  if (netif_is_up(netif))
 80006d2:	f013 0f01 	tst.w	r3, #1
 80006d6:	d00e      	beq.n	80006f6 <ethernet_link_status_updated+0x2e>
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#elif defined(USE_LCD)
    uint8_t iptxt[20];
    sprintf((char *)iptxt, "%s", ip4addr_ntoa(netif_ip4_addr(netif)));
 80006d8:	3004      	adds	r0, #4
 80006da:	f008 fdfd 	bl	80092d8 <ip4addr_ntoa>
 80006de:	4601      	mov	r1, r0
 80006e0:	a801      	add	r0, sp, #4
 80006e2:	f00e f88d 	bl	800e800 <strcpy>
    LCD_UsrLog ("Static IP address: %s\n", iptxt);
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <ethernet_link_status_updated+0x44>)
 80006e8:	a901      	add	r1, sp, #4
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <ethernet_link_status_updated+0x48>)
 80006ec:	6023      	str	r3, [r4, #0]
 80006ee:	f00d ffbb 	bl	800e668 <iprintf>
#else
    BSP_LED_Off(LED1);
    BSP_LED_On(LED2);
#endif /* LWIP_DHCP */
  }
}
 80006f2:	b006      	add	sp, #24
 80006f4:	bd10      	pop	{r4, pc}
    LCD_UsrLog ("The network cable is not connected \n");
 80006f6:	4b05      	ldr	r3, [pc, #20]	; (800070c <ethernet_link_status_updated+0x44>)
 80006f8:	4806      	ldr	r0, [pc, #24]	; (8000714 <ethernet_link_status_updated+0x4c>)
 80006fa:	6023      	str	r3, [r4, #0]
}
 80006fc:	b006      	add	sp, #24
 80006fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LCD_UsrLog ("The network cable is not connected \n");
 8000702:	f00e b837 	b.w	800e774 <puts>
 8000706:	bf00      	nop
 8000708:	20005c74 	.word	0x20005c74
 800070c:	ff000080 	.word	0xff000080
 8000710:	08013700 	.word	0x08013700
 8000714:	08013717 	.word	0x08013717

08000718 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8000718:	2000      	movs	r0, #0
 800071a:	4770      	bx	lr

0800071c <low_level_output>:
{
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	460c      	mov	r4, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000722:	2230      	movs	r2, #48	; 0x30
 8000724:	2100      	movs	r1, #0
 8000726:	4668      	mov	r0, sp
 8000728:	f00d ff96 	bl	800e658 <memset>
  for(q = p; q != NULL; q = q->next)
 800072c:	466a      	mov	r2, sp
 800072e:	4623      	mov	r3, r4
  uint32_t i = 0U;
 8000730:	2100      	movs	r1, #0
  for(q = p; q != NULL; q = q->next)
 8000732:	b9f3      	cbnz	r3, 8000772 <low_level_output+0x56>
  TxConfig.Length = p->tot_len;
 8000734:	4d1a      	ldr	r5, [pc, #104]	; (80007a0 <low_level_output+0x84>)
  pbuf_ref(p);
 8000736:	4620      	mov	r0, r4
  TxConfig.Length = p->tot_len;
 8000738:	8923      	ldrh	r3, [r4, #8]
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 800073a:	f105 0638 	add.w	r6, r5, #56	; 0x38
  TxConfig.TxBuffer = Txbuffer;
 800073e:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.Length = p->tot_len;
 8000742:	606b      	str	r3, [r5, #4]
  TxConfig.pData = p;
 8000744:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 8000746:	f00a f8a7 	bl	800a898 <pbuf_ref>
    if(HAL_ETH_Transmit_IT(&EthHandle, &TxConfig) == HAL_OK)
 800074a:	4629      	mov	r1, r5
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <low_level_output+0x88>)
 800074e:	f003 fa50 	bl	8003bf2 <HAL_ETH_Transmit_IT>
 8000752:	b310      	cbz	r0, 800079a <low_level_output+0x7e>
      if(HAL_ETH_GetError(&EthHandle) & HAL_ETH_ERROR_BUSY)
 8000754:	4630      	mov	r0, r6
 8000756:	f003 fc7b 	bl	8004050 <HAL_ETH_GetError>
 800075a:	0783      	lsls	r3, r0, #30
 800075c:	d518      	bpl.n	8000790 <low_level_output+0x74>
        osSemaphoreWait( TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800075e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000762:	f8d5 00e8 	ldr.w	r0, [r5, #232]	; 0xe8
 8000766:	f006 f904 	bl	8006972 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&EthHandle);
 800076a:	4630      	mov	r0, r6
 800076c:	f003 fae7 	bl	8003d3e <HAL_ETH_ReleaseTxPacket>
  }while(errval == ERR_BUF);
 8000770:	e7eb      	b.n	800074a <low_level_output+0x2e>
    if(i >= ETH_TX_DESC_CNT)
 8000772:	2904      	cmp	r1, #4
 8000774:	d00f      	beq.n	8000796 <low_level_output+0x7a>
    Txbuffer[i].buffer = q->payload;
 8000776:	6858      	ldr	r0, [r3, #4]
 8000778:	6010      	str	r0, [r2, #0]
    Txbuffer[i].len = q->len;
 800077a:	8958      	ldrh	r0, [r3, #10]
 800077c:	6050      	str	r0, [r2, #4]
    if(i>0)
 800077e:	b109      	cbz	r1, 8000784 <low_level_output+0x68>
      Txbuffer[i-1].next = &Txbuffer[i];
 8000780:	f842 2c04 	str.w	r2, [r2, #-4]
    if(q->next == NULL)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	b903      	cbnz	r3, 800078a <low_level_output+0x6e>
      Txbuffer[i].next = NULL;
 8000788:	6093      	str	r3, [r2, #8]
    i++;
 800078a:	3101      	adds	r1, #1
  for(q = p; q != NULL; q = q->next)
 800078c:	320c      	adds	r2, #12
 800078e:	e7d0      	b.n	8000732 <low_level_output+0x16>
        pbuf_free(p);
 8000790:	4620      	mov	r0, r4
 8000792:	f009 ff3d 	bl	800a610 <pbuf_free>
      return ERR_IF;
 8000796:	f06f 000b 	mvn.w	r0, #11
}
 800079a:	b00c      	add	sp, #48	; 0x30
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	bf00      	nop
 80007a0:	20001b90 	.word	0x20001b90
 80007a4:	20001bc8 	.word	0x20001bc8

080007a8 <RMII_Thread>:
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 80007a8:	4d10      	ldr	r5, [pc, #64]	; (80007ec <RMII_Thread+0x44>)
      osThreadTerminate(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80007aa:	4c11      	ldr	r4, [pc, #68]	; (80007f0 <RMII_Thread+0x48>)
{
 80007ac:	b508      	push	{r3, lr}
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 80007ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80007b0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80007b4:	b11a      	cbz	r2, 80007be <RMII_Thread+0x16>
      osThreadTerminate(NULL);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f006 f864 	bl	8006884 <osThreadTerminate>
 80007bc:	e7f7      	b.n	80007ae <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 80007be:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 80007c2:	2a0a      	cmp	r2, #10
 80007c4:	d90e      	bls.n	80007e4 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80007c6:	6862      	ldr	r2, [r4, #4]
 80007c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80007cc:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80007ce:	6862      	ldr	r2, [r4, #4]
 80007d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007d4:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 80007d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80007e2:	e7e4      	b.n	80007ae <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80007e4:	20c8      	movs	r0, #200	; 0xc8
 80007e6:	f006 f852 	bl	800688e <osDelay>
 80007ea:	e7e0      	b.n	80007ae <RMII_Thread+0x6>
 80007ec:	20001b90 	.word	0x20001b90
 80007f0:	40013800 	.word	0x40013800

080007f4 <ETH_PHY_IO_GetTick>:
  return HAL_GetTick();
 80007f4:	f002 bbb8 	b.w	8002f68 <HAL_GetTick>

080007f8 <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <ETH_PHY_IO_Init+0xc>)
{
 80007fa:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80007fc:	f003 fbfe 	bl	8003ffc <HAL_ETH_SetMDIOClockRange>
}
 8000800:	2000      	movs	r0, #0
 8000802:	bd08      	pop	{r3, pc}
 8000804:	20001bc8 	.word	0x20001bc8

08000808 <ETH_PHY_IO_ReadReg>:
{
 8000808:	b508      	push	{r3, lr}
 800080a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800080c:	460a      	mov	r2, r1
 800080e:	4601      	mov	r1, r0
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <ETH_PHY_IO_ReadReg+0x18>)
 8000812:	f003 fb33 	bl	8003e7c <HAL_ETH_ReadPHYRegister>
 8000816:	3800      	subs	r0, #0
 8000818:	bf18      	it	ne
 800081a:	2001      	movne	r0, #1
}
 800081c:	4240      	negs	r0, r0
 800081e:	bd08      	pop	{r3, pc}
 8000820:	20001bc8 	.word	0x20001bc8

08000824 <ETH_PHY_IO_WriteReg>:
{
 8000824:	b508      	push	{r3, lr}
 8000826:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000828:	460a      	mov	r2, r1
 800082a:	4601      	mov	r1, r0
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <ETH_PHY_IO_WriteReg+0x18>)
 800082e:	f003 fb4d 	bl	8003ecc <HAL_ETH_WritePHYRegister>
 8000832:	3800      	subs	r0, #0
 8000834:	bf18      	it	ne
 8000836:	2001      	movne	r0, #1
}
 8000838:	4240      	negs	r0, r0
 800083a:	bd08      	pop	{r3, pc}
 800083c:	20001bc8 	.word	0x20001bc8

08000840 <pbuf_free_custom>:
{
 8000840:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000842:	4809      	ldr	r0, [pc, #36]	; (8000868 <pbuf_free_custom+0x28>)
{
 8000844:	b508      	push	{r3, lr}
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000846:	f009 fc73 	bl	800a130 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <pbuf_free_custom+0x2c>)
 800084c:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 8000850:	2a01      	cmp	r2, #1
 8000852:	d108      	bne.n	8000866 <pbuf_free_custom+0x26>
    RxAllocStatus = RX_ALLOC_OK;
 8000854:	2200      	movs	r2, #0
    osSemaphoreRelease(RxPktSemaphore);
 8000856:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    RxAllocStatus = RX_ALLOC_OK;
 800085a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
}
 800085e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    osSemaphoreRelease(RxPktSemaphore);
 8000862:	f006 b8ab 	b.w	80069bc <osSemaphoreRelease>
}
 8000866:	bd08      	pop	{r3, pc}
 8000868:	0800f81c 	.word	0x0800f81c
 800086c:	20001b90 	.word	0x20001b90

08000870 <ethernetif_input>:
{
 8000870:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000874:	4e11      	ldr	r6, [pc, #68]	; (80008bc <ethernetif_input+0x4c>)
{
 8000876:	4604      	mov	r4, r0
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 8000878:	f106 0738 	add.w	r7, r6, #56	; 0x38
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800087c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000880:	f8d6 00f0 	ldr.w	r0, [r6, #240]	; 0xf0
 8000884:	f006 f875 	bl	8006972 <osSemaphoreWait>
 8000888:	2800      	cmp	r0, #0
 800088a:	d1f7      	bne.n	800087c <ethernetif_input+0xc>
  struct pbuf *p = NULL;
 800088c:	f04f 0800 	mov.w	r8, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8000890:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
  struct pbuf *p = NULL;
 8000894:	f8cd 8004 	str.w	r8, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8000898:	b91b      	cbnz	r3, 80008a2 <ethernetif_input+0x32>
    HAL_ETH_ReadData(&EthHandle, (void **)&p);
 800089a:	a901      	add	r1, sp, #4
 800089c:	4638      	mov	r0, r7
 800089e:	f003 f9da 	bl	8003c56 <HAL_ETH_ReadData>
  return p;
 80008a2:	9d01      	ldr	r5, [sp, #4]
        if (p != NULL)
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d0e9      	beq.n	800087c <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 80008a8:	6923      	ldr	r3, [r4, #16]
 80008aa:	4621      	mov	r1, r4
 80008ac:	4628      	mov	r0, r5
 80008ae:	4798      	blx	r3
 80008b0:	2800      	cmp	r0, #0
 80008b2:	d0ed      	beq.n	8000890 <ethernetif_input+0x20>
            pbuf_free(p);
 80008b4:	4628      	mov	r0, r5
 80008b6:	f009 feab 	bl	800a610 <pbuf_free>
 80008ba:	e7e7      	b.n	800088c <ethernetif_input+0x1c>
 80008bc:	20001b90 	.word	0x20001b90

080008c0 <ethernetif_init>:
{
 80008c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008c2:	4604      	mov	r4, r0
{
 80008c4:	b0a7      	sub	sp, #156	; 0x9c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008c6:	b930      	cbnz	r0, 80008d6 <ethernetif_init+0x16>
 80008c8:	4b57      	ldr	r3, [pc, #348]	; (8000a28 <ethernetif_init+0x168>)
 80008ca:	f240 1295 	movw	r2, #405	; 0x195
 80008ce:	4957      	ldr	r1, [pc, #348]	; (8000a2c <ethernetif_init+0x16c>)
 80008d0:	4857      	ldr	r0, [pc, #348]	; (8000a30 <ethernetif_init+0x170>)
 80008d2:	f00d fec9 	bl	800e668 <iprintf>
  netif->name[0] = IFNAME0;
 80008d6:	f247 4373 	movw	r3, #29811	; 0x7473
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008da:	4e56      	ldr	r6, [pc, #344]	; (8000a34 <ethernetif_init+0x174>)
  ETH_MACConfigTypeDef MACConf = {0};
 80008dc:	2264      	movs	r2, #100	; 0x64
 80008de:	2100      	movs	r1, #0
  netif->name[0] = IFNAME0;
 80008e0:	85e3      	strh	r3, [r4, #46]	; 0x2e
  ETH_MACConfigTypeDef MACConf = {0};
 80008e2:	a80d      	add	r0, sp, #52	; 0x34
  netif->output = etharp_output;
 80008e4:	4b54      	ldr	r3, [pc, #336]	; (8000a38 <ethernetif_init+0x178>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80008e6:	af03      	add	r7, sp, #12
  EthHandle.Instance = ETH;
 80008e8:	4d54      	ldr	r5, [pc, #336]	; (8000a3c <ethernetif_init+0x17c>)
  netif->output = etharp_output;
 80008ea:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <ethernetif_init+0x180>)
 80008ee:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 80008f0:	f00d feb2 	bl	800e658 <memset>
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008f4:	8a33      	ldrh	r3, [r6, #16]
 80008f6:	68f0      	ldr	r0, [r6, #12]
 80008f8:	f8ad 3008 	strh.w	r3, [sp, #8]
  EthHandle.Instance = ETH;
 80008fc:	4b51      	ldr	r3, [pc, #324]	; (8000a44 <ethernetif_init+0x184>)
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80008fe:	9001      	str	r0, [sp, #4]
  HAL_ETH_Init(&EthHandle);
 8000900:	f105 0038 	add.w	r0, r5, #56	; 0x38
  EthHandle.Instance = ETH;
 8000904:	63ab      	str	r3, [r5, #56]	; 0x38
  EthHandle.Init.MACAddr = macaddress;
 8000906:	ab01      	add	r3, sp, #4
 8000908:	63eb      	str	r3, [r5, #60]	; 0x3c
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800090a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800090e:	642b      	str	r3, [r5, #64]	; 0x40
  EthHandle.Init.RxDesc = DMARxDscrTab;
 8000910:	4b4d      	ldr	r3, [pc, #308]	; (8000a48 <ethernetif_init+0x188>)
 8000912:	64ab      	str	r3, [r5, #72]	; 0x48
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <ethernetif_init+0x18c>)
 8000916:	646b      	str	r3, [r5, #68]	; 0x44
  EthHandle.Init.RxBuffLen = ETH_RX_BUF_SIZE;
 8000918:	f44f 63bf 	mov.w	r3, #1528	; 0x5f8
 800091c:	64eb      	str	r3, [r5, #76]	; 0x4c
  HAL_ETH_Init(&EthHandle);
 800091e:	f002 ffe7 	bl	80038f0 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000922:	2100      	movs	r1, #0
 8000924:	4b4a      	ldr	r3, [pc, #296]	; (8000a50 <ethernetif_init+0x190>)
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000926:	4630      	mov	r0, r6
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000928:	e9c4 3109 	strd	r3, r1, [r4, #36]	; 0x24
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800092c:	2306      	movs	r3, #6
 800092e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000932:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8000936:	f043 030a 	orr.w	r3, r3, #10
 800093a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  LWIP_MEMPOOL_INIT(RX_POOL);
 800093e:	f009 fba3 	bl	800a088 <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000942:	2234      	movs	r2, #52	; 0x34
 8000944:	2100      	movs	r1, #0
 8000946:	1d28      	adds	r0, r5, #4
 8000948:	f00d fe86 	bl	800e658 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800094c:	2321      	movs	r3, #33	; 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 800094e:	2203      	movs	r2, #3
 8000950:	2100      	movs	r1, #0
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000952:	602b      	str	r3, [r5, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000954:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000958:	2001      	movs	r0, #1
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800095a:	616b      	str	r3, [r5, #20]
  RxPktSemaphore = xSemaphoreCreateBinary();
 800095c:	f004 fea7 	bl	80056ae <xQueueGenericCreate>
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000960:	2203      	movs	r2, #3
 8000962:	2100      	movs	r1, #0
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000964:	f8c5 00f0 	str.w	r0, [r5, #240]	; 0xf0
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000968:	2001      	movs	r0, #1
 800096a:	f004 fea0 	bl	80056ae <xQueueGenericCreate>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800096e:	f106 0c14 	add.w	ip, r6, #20
  TxPktSemaphore = xSemaphoreCreateBinary();
 8000972:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000976:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800097a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800097c:	f8dc 3000 	ldr.w	r3, [ip]
  osThreadCreate (osThread(EthIf), netif);
 8000980:	4621      	mov	r1, r4
 8000982:	a803      	add	r0, sp, #12
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000984:	603b      	str	r3, [r7, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000986:	f005 ff65 	bl	8006854 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800098a:	4932      	ldr	r1, [pc, #200]	; (8000a54 <ethernetif_init+0x194>)
 800098c:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000990:	f001 fdaa 	bl	80024e8 <LAN8742_RegisterBusIO>
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8000994:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 8000998:	f001 fdba 	bl	8002510 <LAN8742_Init>
 800099c:	b140      	cbz	r0, 80009b0 <ethernetif_init+0xf0>
    netif_set_link_down(netif);
 800099e:	4620      	mov	r0, r4
 80009a0:	f009 fd5e 	bl	800a460 <netif_set_link_down>
    netif_set_down(netif);
 80009a4:	4620      	mov	r0, r4
 80009a6:	f009 fd1b 	bl	800a3e0 <netif_set_down>
}
 80009aa:	2000      	movs	r0, #0
 80009ac:	b027      	add	sp, #156	; 0x9c
 80009ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80009b0:	f105 00f4 	add.w	r0, r5, #244	; 0xf4
 80009b4:	f001 fdd9 	bl	800256a <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80009b8:	2801      	cmp	r0, #1
 80009ba:	dc15      	bgt.n	80009e8 <ethernetif_init+0x128>
    netif_set_link_down(netif);
 80009bc:	4620      	mov	r0, r4
 80009be:	f009 fd4f 	bl	800a460 <netif_set_link_down>
    netif_set_down(netif);
 80009c2:	4620      	mov	r0, r4
 80009c4:	f009 fd0c 	bl	800a3e0 <netif_set_down>
  if(HAL_GetREVID() == 0x1000)
 80009c8:	f002 fae6 	bl	8002f98 <HAL_GetREVID>
 80009cc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80009d0:	d1eb      	bne.n	80009aa <ethernetif_init+0xea>
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80009d2:	4d21      	ldr	r5, [pc, #132]	; (8000a58 <ethernetif_init+0x198>)
 80009d4:	ac08      	add	r4, sp, #32
 80009d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009da:	682b      	ldr	r3, [r5, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80009dc:	2100      	movs	r1, #0
 80009de:	a808      	add	r0, sp, #32
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80009e0:	6023      	str	r3, [r4, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80009e2:	f005 ff37 	bl	8006854 <osThreadCreate>
 80009e6:	e7e0      	b.n	80009aa <ethernetif_init+0xea>
    switch (PHYLinkState)
 80009e8:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80009ea:	a90d      	add	r1, sp, #52	; 0x34
 80009ec:	2802      	cmp	r0, #2
 80009ee:	bf92      	itee	ls
 80009f0:	eb06 0640 	addls.w	r6, r6, r0, lsl #1
    switch (PHYLinkState)
 80009f4:	f44f 4580 	movhi.w	r5, #16384	; 0x4000
 80009f8:	f44f 6700 	movhi.w	r7, #2048	; 0x800
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 80009fc:	4817      	ldr	r0, [pc, #92]	; (8000a5c <ethernetif_init+0x19c>)
 80009fe:	bf9c      	itt	ls
 8000a00:	8d37      	ldrhls	r7, [r6, #40]	; 0x28
 8000a02:	8df5      	ldrhls	r5, [r6, #46]	; 0x2e
 8000a04:	f003 fa87 	bl	8003f16 <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000a08:	a90d      	add	r1, sp, #52	; 0x34
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <ethernetif_init+0x19c>)
    MACConf.Speed = speed;
 8000a0c:	e9cd 5712 	strd	r5, r7, [sp, #72]	; 0x48
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000a10:	f003 fae7 	bl	8003fe2 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <ethernetif_init+0x19c>)
 8000a16:	f003 f867 	bl	8003ae8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f009 fcc6 	bl	800a3ac <netif_set_up>
    netif_set_link_up(netif);
 8000a20:	4620      	mov	r0, r4
 8000a22:	f009 fcf9 	bl	800a418 <netif_set_link_up>
 8000a26:	e7cf      	b.n	80009c8 <ethernetif_init+0x108>
 8000a28:	0801374f 	.word	0x0801374f
 8000a2c:	080137a6 	.word	0x080137a6
 8000a30:	080137b4 	.word	0x080137b4
 8000a34:	0800f81c 	.word	0x0800f81c
 8000a38:	08008be9 	.word	0x08008be9
 8000a3c:	20001b90 	.word	0x20001b90
 8000a40:	0800071d 	.word	0x0800071d
 8000a44:	40028000 	.word	0x40028000
 8000a48:	2004c000 	.word	0x2004c000
 8000a4c:	20001ad0 	.word	0x20001ad0
 8000a50:	000205dc 	.word	0x000205dc
 8000a54:	20000000 	.word	0x20000000
 8000a58:	0800f850 	.word	0x0800f850
 8000a5c:	20001bc8 	.word	0x20001bc8

08000a60 <sys_now>:
  return HAL_GetTick();
 8000a60:	f002 ba82 	b.w	8002f68 <HAL_GetTick>

08000a64 <HAL_ETH_MspInit>:
{
 8000a64:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4c2e      	ldr	r4, [pc, #184]	; (8000b20 <HAL_ETH_MspInit+0xbc>)
{
 8000a68:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000a6a:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a6c:	482d      	ldr	r0, [pc, #180]	; (8000b24 <HAL_ETH_MspInit+0xc0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a70:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6323      	str	r3, [r4, #48]	; 0x30
 8000a78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6323      	str	r3, [r4, #48]	; 0x30
 8000a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a8c:	f003 0304 	and.w	r3, r3, #4
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a9a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	9303      	str	r3, [sp, #12]
 8000aa4:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000ab4:	2386      	movs	r3, #134	; 0x86
 8000ab6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ab8:	f003 fad0 	bl	800405c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000abc:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000abe:	a907      	add	r1, sp, #28
 8000ac0:	4819      	ldr	r0, [pc, #100]	; (8000b28 <HAL_ETH_MspInit+0xc4>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000ac2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000ac4:	f003 faca 	bl	800405c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000ac8:	f646 0304 	movw	r3, #26628	; 0x6804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000acc:	a907      	add	r1, sp, #28
 8000ace:	4817      	ldr	r0, [pc, #92]	; (8000b2c <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000ad0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ad2:	f003 fac3 	bl	800405c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000ad6:	462a      	mov	r2, r5
 8000ad8:	2107      	movs	r1, #7
 8000ada:	203d      	movs	r0, #61	; 0x3d
 8000adc:	f002 fa74 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000ae0:	203d      	movs	r0, #61	; 0x3d
 8000ae2:	f002 faa3 	bl	800302c <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000ae6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ae8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aec:	6323      	str	r3, [r4, #48]	; 0x30
 8000aee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af4:	9304      	str	r3, [sp, #16]
 8000af6:	9b04      	ldr	r3, [sp, #16]
 8000af8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000afa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000afe:	6323      	str	r3, [r4, #48]	; 0x30
 8000b00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	9b05      	ldr	r3, [sp, #20]
 8000b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b10:	6323      	str	r3, [r4, #48]	; 0x30
 8000b12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b18:	9306      	str	r3, [sp, #24]
 8000b1a:	9b06      	ldr	r3, [sp, #24]
}
 8000b1c:	b00d      	add	sp, #52	; 0x34
 8000b1e:	bd30      	pop	{r4, r5, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40021800 	.word	0x40021800

08000b30 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8000b30:	4b02      	ldr	r3, [pc, #8]	; (8000b3c <HAL_ETH_RxCpltCallback+0xc>)
 8000b32:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
 8000b36:	f005 bf41 	b.w	80069bc <osSemaphoreRelease>
 8000b3a:	bf00      	nop
 8000b3c:	20001b90 	.word	0x20001b90

08000b40 <HAL_ETH_TxCpltCallback>:
  osSemaphoreRelease(TxPktSemaphore);
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <HAL_ETH_TxCpltCallback+0xc>)
 8000b42:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8000b46:	f005 bf39 	b.w	80069bc <osSemaphoreRelease>
 8000b4a:	bf00      	nop
 8000b4c:	20001b90 	.word	0x20001b90

08000b50 <HAL_ETH_ErrorCallback>:
{
 8000b50:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(heth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8000b52:	f003 fa80 	bl	8004056 <HAL_ETH_GetDMAError>
 8000b56:	0603      	lsls	r3, r0, #24
 8000b58:	d506      	bpl.n	8000b68 <HAL_ETH_ErrorCallback+0x18>
     osSemaphoreRelease(RxPktSemaphore);
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_ETH_ErrorCallback+0x1c>)
 8000b5c:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
}
 8000b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 8000b64:	f005 bf2a 	b.w	80069bc <osSemaphoreRelease>
}
 8000b68:	bd08      	pop	{r3, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20001b90 	.word	0x20001b90

08000b70 <ethernet_link_thread>:
{
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b74:	2500      	movs	r5, #0
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b76:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8000c30 <ethernet_link_thread+0xc0>
{
 8000b7a:	b09a      	sub	sp, #104	; 0x68
        netifapi_netif_set_up(netif);
 8000b7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 8000c34 <ethernet_link_thread+0xc4>
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b80:	46a8      	mov	r8, r5
 8000b82:	462f      	mov	r7, r5
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000b84:	f1a9 06bc 	sub.w	r6, r9, #188	; 0xbc
{
 8000b88:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8000b8a:	2264      	movs	r2, #100	; 0x64
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	a801      	add	r0, sp, #4
 8000b90:	f00d fd62 	bl	800e658 <memset>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b94:	4648      	mov	r0, r9
 8000b96:	f001 fce8 	bl	800256a <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b9a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b9e:	4603      	mov	r3, r0
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000ba0:	0751      	lsls	r1, r2, #29
 8000ba2:	d514      	bpl.n	8000bce <ethernet_link_thread+0x5e>
 8000ba4:	2801      	cmp	r0, #1
 8000ba6:	dc10      	bgt.n	8000bca <ethernet_link_thread+0x5a>
      HAL_ETH_Stop_IT(&EthHandle);
 8000ba8:	4630      	mov	r0, r6
 8000baa:	f002 ffdd 	bl	8003b68 <HAL_ETH_Stop_IT>
      netifapi_netif_set_down(netif);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	491b      	ldr	r1, [pc, #108]	; (8000c20 <ethernet_link_thread+0xb0>)
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f007 fc1e 	bl	80083f4 <netifapi_netif_common>
      netifapi_netif_set_link_down(netif);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	491a      	ldr	r1, [pc, #104]	; (8000c24 <ethernet_link_thread+0xb4>)
 8000bbc:	4620      	mov	r0, r4
 8000bbe:	f007 fc19 	bl	80083f4 <netifapi_netif_common>
    osDelay(100);
 8000bc2:	2064      	movs	r0, #100	; 0x64
 8000bc4:	f005 fe63 	bl	800688e <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000bc8:	e7e4      	b.n	8000b94 <ethernet_link_thread+0x24>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000bca:	0752      	lsls	r2, r2, #29
 8000bcc:	d4f9      	bmi.n	8000bc2 <ethernet_link_thread+0x52>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	ddf7      	ble.n	8000bc2 <ethernet_link_thread+0x52>
      switch (PHYLinkState)
 8000bd2:	3b02      	subs	r3, #2
 8000bd4:	2b03      	cmp	r3, #3
 8000bd6:	d81f      	bhi.n	8000c18 <ethernet_link_thread+0xa8>
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <ethernet_link_thread+0xb8>)
 8000bda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000bde:	f8b3 8048 	ldrh.w	r8, [r3, #72]	; 0x48
 8000be2:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf);
 8000be6:	a901      	add	r1, sp, #4
 8000be8:	4630      	mov	r0, r6
 8000bea:	f003 f994 	bl	8003f16 <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000bee:	a901      	add	r1, sp, #4
 8000bf0:	4630      	mov	r0, r6
        netifapi_netif_set_link_up(netif);
 8000bf2:	2701      	movs	r7, #1
        MACConf.Speed = speed;
 8000bf4:	e9cd 8506 	strd	r8, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000bf8:	f003 f9f3 	bl	8003fe2 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f002 ff73 	bl	8003ae8 <HAL_ETH_Start_IT>
        netifapi_netif_set_up(netif);
 8000c02:	2200      	movs	r2, #0
 8000c04:	4651      	mov	r1, sl
 8000c06:	4620      	mov	r0, r4
 8000c08:	f007 fbf4 	bl	80083f4 <netifapi_netif_common>
        netifapi_netif_set_link_up(netif);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4907      	ldr	r1, [pc, #28]	; (8000c2c <ethernet_link_thread+0xbc>)
 8000c10:	4620      	mov	r0, r4
 8000c12:	f007 fbef 	bl	80083f4 <netifapi_netif_common>
 8000c16:	e7d4      	b.n	8000bc2 <ethernet_link_thread+0x52>
      if(linkchanged)
 8000c18:	2f00      	cmp	r7, #0
 8000c1a:	d0d2      	beq.n	8000bc2 <ethernet_link_thread+0x52>
 8000c1c:	e7e3      	b.n	8000be6 <ethernet_link_thread+0x76>
 8000c1e:	bf00      	nop
 8000c20:	0800a3e1 	.word	0x0800a3e1
 8000c24:	0800a461 	.word	0x0800a461
 8000c28:	0800f81c 	.word	0x0800f81c
 8000c2c:	0800a419 	.word	0x0800a419
 8000c30:	20001c84 	.word	0x20001c84
 8000c34:	0800a3ad 	.word	0x0800a3ad

08000c38 <HAL_ETH_RxAllocateCallback>:
{
 8000c38:	b513      	push	{r0, r1, r4, lr}
 8000c3a:	4604      	mov	r4, r0
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <HAL_ETH_RxAllocateCallback+0x3c>)
 8000c3e:	f009 fa45 	bl	800a0cc <memp_malloc_pool>
  if (p)
 8000c42:	4603      	mov	r3, r0
 8000c44:	b178      	cbz	r0, 8000c66 <HAL_ETH_RxAllocateCallback+0x2e>
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000c46:	f100 0214 	add.w	r2, r0, #20
    p->custom_free_function = pbuf_free_custom;
 8000c4a:	490b      	ldr	r1, [pc, #44]	; (8000c78 <HAL_ETH_RxAllocateCallback+0x40>)
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8000c4c:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 8000c4e:	6101      	str	r1, [r0, #16]
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8000c50:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
 8000c54:	e9cd 2100 	strd	r2, r1, [sp]
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2241      	movs	r2, #65	; 0x41
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	f009 fc85 	bl	800a56c <pbuf_alloced_custom>
}
 8000c62:	b002      	add	sp, #8
 8000c64:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_ETH_RxAllocateCallback+0x44>)
 8000c68:	2101      	movs	r1, #1
    *buff = NULL;
 8000c6a:	6020      	str	r0, [r4, #0]
    RxAllocStatus = RX_ALLOC_ERROR;
 8000c6c:	f882 10ec 	strb.w	r1, [r2, #236]	; 0xec
}
 8000c70:	e7f7      	b.n	8000c62 <HAL_ETH_RxAllocateCallback+0x2a>
 8000c72:	bf00      	nop
 8000c74:	0800f81c 	.word	0x0800f81c
 8000c78:	08000841 	.word	0x08000841
 8000c7c:	20001b90 	.word	0x20001b90

08000c80 <HAL_ETH_RxLinkCallback>:
{
 8000c80:	b530      	push	{r4, r5, lr}
  p->next = NULL;
 8000c82:	2500      	movs	r5, #0
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8000c84:	f1a2 0414 	sub.w	r4, r2, #20
  p->len = Length;
 8000c88:	f822 3c0a 	strh.w	r3, [r2, #-10]
  p->next = NULL;
 8000c8c:	f842 5c14 	str.w	r5, [r2, #-20]
  p->tot_len = 0;
 8000c90:	f822 5c0c 	strh.w	r5, [r2, #-12]
  if (!*ppStart)
 8000c94:	6802      	ldr	r2, [r0, #0]
 8000c96:	b922      	cbnz	r2, 8000ca2 <HAL_ETH_RxLinkCallback+0x22>
    *ppStart = p;
 8000c98:	6004      	str	r4, [r0, #0]
  *ppEnd  = p;
 8000c9a:	600c      	str	r4, [r1, #0]
  for (p = *ppStart; p != NULL; p = p->next)
 8000c9c:	6802      	ldr	r2, [r0, #0]
 8000c9e:	b91a      	cbnz	r2, 8000ca8 <HAL_ETH_RxLinkCallback+0x28>
}
 8000ca0:	bd30      	pop	{r4, r5, pc}
    (*ppEnd)->next = p;
 8000ca2:	680a      	ldr	r2, [r1, #0]
 8000ca4:	6014      	str	r4, [r2, #0]
 8000ca6:	e7f8      	b.n	8000c9a <HAL_ETH_RxLinkCallback+0x1a>
    p->tot_len += Length;
 8000ca8:	8911      	ldrh	r1, [r2, #8]
 8000caa:	4419      	add	r1, r3
 8000cac:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	e7f5      	b.n	8000c9e <HAL_ETH_RxLinkCallback+0x1e>

08000cb2 <HAL_ETH_TxFreeCallback>:
  pbuf_free((struct pbuf *)buff);
 8000cb2:	f009 bcad 	b.w	800a610 <pbuf_free>

08000cb6 <print_rectangle>:
			BSP_LCD_DrawPixel(j, i, color);
		}
	}
}

void print_rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint32_t color){
 8000cb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cba:	4605      	mov	r5, r0
	for(uint32_t i = y; i < y+h; i++){
 8000cbc:	460c      	mov	r4, r1
 8000cbe:	18cf      	adds	r7, r1, r3
		for(uint32_t j = x; j < x+w; j++){
 8000cc0:	eb00 0802 	add.w	r8, r0, r2
	for(uint32_t i = y; i < y+h; i++){
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d80b      	bhi.n	8000ce0 <print_rectangle+0x2a>
			//framebuf[i*SCRWIDTH+j] = color;
			BSP_LCD_DrawPixel(j, i, color);
		}
	}
}
 8000cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			BSP_LCD_DrawPixel(j, i, color);
 8000ccc:	b2b0      	uxth	r0, r6
		for(uint32_t j = x; j < x+w; j++){
 8000cce:	3601      	adds	r6, #1
			BSP_LCD_DrawPixel(j, i, color);
 8000cd0:	9a08      	ldr	r2, [sp, #32]
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	f001 fd76 	bl	80027c4 <BSP_LCD_DrawPixel>
		for(uint32_t j = x; j < x+w; j++){
 8000cd8:	45b0      	cmp	r8, r6
 8000cda:	d8f7      	bhi.n	8000ccc <print_rectangle+0x16>
	for(uint32_t i = y; i < y+h; i++){
 8000cdc:	3401      	adds	r4, #1
 8000cde:	e7f1      	b.n	8000cc4 <print_rectangle+0xe>
		for(uint32_t j = x; j < x+w; j++){
 8000ce0:	462e      	mov	r6, r5
			BSP_LCD_DrawPixel(j, i, color);
 8000ce2:	fa1f f984 	uxth.w	r9, r4
 8000ce6:	e7f7      	b.n	8000cd8 <print_rectangle+0x22>

08000ce8 <print_rectangle_empty>:

void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint32_t color){
 8000ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint32_t i = y; i < y+h; i++){
 8000cec:	18cf      	adds	r7, r1, r3
void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint32_t color){
 8000cee:	4605      	mov	r5, r0
 8000cf0:	460e      	mov	r6, r1
 8000cf2:	4690      	mov	r8, r2
 8000cf4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	for(uint32_t i = y; i < y+h; i++){
 8000cf8:	460c      	mov	r4, r1
		for(uint32_t j = x; j < x+w; j++){
			if(i != y && i != y+h-1){
 8000cfa:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
	for(uint32_t i = y; i < y+h; i++){
 8000cfe:	42a7      	cmp	r7, r4
 8000d00:	d824      	bhi.n	8000d4c <print_rectangle_empty+0x64>
			}
			//framebuf[i*SCRWIDTH+j] = color;
			BSP_LCD_DrawPixel(j, i, color);
		}
	}
}
 8000d02:	b003      	add	sp, #12
 8000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			BSP_LCD_DrawPixel(j, i, color);
 8000d08:	fa1f f089 	uxth.w	r0, r9
 8000d0c:	4652      	mov	r2, sl
 8000d0e:	9301      	str	r3, [sp, #4]
		for(uint32_t j = x; j < x+w; j++){
 8000d10:	f109 0901 	add.w	r9, r9, #1
			BSP_LCD_DrawPixel(j, i, color);
 8000d14:	9100      	str	r1, [sp, #0]
 8000d16:	f001 fd55 	bl	80027c4 <BSP_LCD_DrawPixel>
		for(uint32_t j = x; j < x+w; j++){
 8000d1a:	e9dd 1300 	ldrd	r1, r3, [sp]
 8000d1e:	454b      	cmp	r3, r9
 8000d20:	d912      	bls.n	8000d48 <print_rectangle_empty+0x60>
			if(i != y && i != y+h-1){
 8000d22:	42b4      	cmp	r4, r6
 8000d24:	d0f0      	beq.n	8000d08 <print_rectangle_empty+0x20>
 8000d26:	45a3      	cmp	fp, r4
 8000d28:	d0ee      	beq.n	8000d08 <print_rectangle_empty+0x20>
				BSP_LCD_DrawPixel(x, i, color);
 8000d2a:	fa1f f985 	uxth.w	r9, r5
 8000d2e:	4652      	mov	r2, sl
 8000d30:	9100      	str	r1, [sp, #0]
 8000d32:	4648      	mov	r0, r9
 8000d34:	f001 fd46 	bl	80027c4 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(x+w-1, i, color);
 8000d38:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d3c:	4652      	mov	r2, sl
 8000d3e:	9900      	ldr	r1, [sp, #0]
 8000d40:	4448      	add	r0, r9
 8000d42:	b280      	uxth	r0, r0
 8000d44:	f001 fd3e 	bl	80027c4 <BSP_LCD_DrawPixel>
	for(uint32_t i = y; i < y+h; i++){
 8000d48:	3401      	adds	r4, #1
 8000d4a:	e7d8      	b.n	8000cfe <print_rectangle_empty+0x16>
		for(uint32_t j = x; j < x+w; j++){
 8000d4c:	46a9      	mov	r9, r5
 8000d4e:	eb05 0308 	add.w	r3, r5, r8
 8000d52:	b2a1      	uxth	r1, r4
 8000d54:	e7e3      	b.n	8000d1e <print_rectangle_empty+0x36>
	...

08000d58 <print_char>:


void print_char(uint32_t x, uint32_t y, uint8_t index, uint32_t color){
 8000d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000d5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000d60:	4c26      	ldr	r4, [pc, #152]	; (8000dfc <print_char+0xa4>)
void print_char(uint32_t x, uint32_t y, uint8_t index, uint32_t color){
 8000d62:	4605      	mov	r5, r0
 8000d64:	460e      	mov	r6, r1
 8000d66:	4699      	mov	r9, r3
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000d68:	eb04 04c2 	add.w	r4, r4, r2, lsl #3

	uint32_t xiter = x;
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	f101 0a08 	add.w	sl, r1, #8
 8000d72:	2f0c      	cmp	r7, #12
 8000d74:	f104 080c 	add.w	r8, r4, #12
 8000d78:	d107      	bne.n	8000d8a <print_char+0x32>
 8000d7a:	3418      	adds	r4, #24
 8000d7c:	f106 0b10 	add.w	fp, r6, #16
			yiter++;
		}
		xiter++;
	}
	xiter = x;
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000d80:	4544      	cmp	r4, r8
 8000d82:	d11e      	bne.n	8000dc2 <print_char+0x6a>
			yiter++;
		}
		xiter++;
	}

}
 8000d84:	b003      	add	sp, #12
 8000d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8a:	1978      	adds	r0, r7, r5
		uint32_t yiter = y;
 8000d8c:	46b3      	mov	fp, r6
		uint8_t mask = 0b00000001;
 8000d8e:	f04f 0801 	mov.w	r8, #1
 8000d92:	b280      	uxth	r0, r0
			if(*fptr & mask){
 8000d94:	5de3      	ldrb	r3, [r4, r7]
 8000d96:	fa1f f18b 	uxth.w	r1, fp
			yiter++;
 8000d9a:	f10b 0b01 	add.w	fp, fp, #1
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000d9e:	9001      	str	r0, [sp, #4]
			if(*fptr & mask){
 8000da0:	ea18 0f03 	tst.w	r8, r3
			mask = mask << 1;
 8000da4:	ea4f 0848 	mov.w	r8, r8, lsl #1
				BSP_LCD_DrawPixel(xiter, yiter, color);
 8000da8:	bf14      	ite	ne
 8000daa:	464a      	movne	r2, r9
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000dac:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8000db0:	f001 fd08 	bl	80027c4 <BSP_LCD_DrawPixel>
		for(uint32_t i = 0; i < 8; i++){
 8000db4:	45d3      	cmp	fp, sl
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000db6:	9801      	ldr	r0, [sp, #4]
			mask = mask << 1;
 8000db8:	fa5f f888 	uxtb.w	r8, r8
		for(uint32_t i = 0; i < 8; i++){
 8000dbc:	d1ea      	bne.n	8000d94 <print_char+0x3c>
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000dbe:	3701      	adds	r7, #1
 8000dc0:	e7d7      	b.n	8000d72 <print_char+0x1a>
		uint32_t yiter = y+8;
 8000dc2:	f106 0a08 	add.w	sl, r6, #8
		uint8_t mask = 0b00000001;
 8000dc6:	2701      	movs	r7, #1
 8000dc8:	b2a8      	uxth	r0, r5
			if(*fptr & mask){
 8000dca:	f898 3000 	ldrb.w	r3, [r8]
 8000dce:	fa1f f18a 	uxth.w	r1, sl
			yiter++;
 8000dd2:	f10a 0a01 	add.w	sl, sl, #1
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000dd6:	9001      	str	r0, [sp, #4]
			if(*fptr & mask){
 8000dd8:	421f      	tst	r7, r3
			mask = mask << 1;
 8000dda:	ea4f 0747 	mov.w	r7, r7, lsl #1
				BSP_LCD_DrawPixel(xiter, yiter, color);
 8000dde:	bf14      	ite	ne
 8000de0:	464a      	movne	r2, r9
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000de2:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
 8000de6:	f001 fced 	bl	80027c4 <BSP_LCD_DrawPixel>
		for(uint32_t i = 0; i < 8; i++){
 8000dea:	45d3      	cmp	fp, sl
				BSP_LCD_DrawPixel(xiter, yiter, 0xFF000000);
 8000dec:	9801      	ldr	r0, [sp, #4]
			mask = mask << 1;
 8000dee:	b2ff      	uxtb	r7, r7
		for(uint32_t i = 0; i < 8; i++){
 8000df0:	d1eb      	bne.n	8000dca <print_char+0x72>
		xiter++;
 8000df2:	3501      	adds	r5, #1
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000df4:	f108 0801 	add.w	r8, r8, #1
 8000df8:	e7c2      	b.n	8000d80 <print_char+0x28>
 8000dfa:	bf00      	nop
 8000dfc:	20000224 	.word	0x20000224

08000e00 <print_char_scaled>:


void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e04:	eb02 0242 	add.w	r2, r2, r2, lsl #1

	uint32_t xiter = x;
 8000e08:	4606      	mov	r6, r0
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e0a:	ed2d 8b02 	vpush	{d8}
 8000e0e:	ee08 3a10 	vmov	s16, r3
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e12:	4b55      	ldr	r3, [pc, #340]	; (8000f68 <print_char_scaled+0x168>)
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e14:	b089      	sub	sp, #36	; 0x24
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000e16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e1a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8000e1c:	f103 020c 	add.w	r2, r3, #12
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000e20:	461f      	mov	r7, r3
void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000e22:	9001      	str	r0, [sp, #4]
 8000e24:	9104      	str	r1, [sp, #16]
 8000e26:	9202      	str	r2, [sp, #8]
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000e28:	9a02      	ldr	r2, [sp, #8]
 8000e2a:	4297      	cmp	r7, r2
 8000e2c:	d10d      	bne.n	8000e4a <print_char_scaled+0x4a>
		}
		xiter+=scale;
	}
	xiter = x;
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
		uint32_t yiter = y+8*scale;
 8000e2e:	9a04      	ldr	r2, [sp, #16]
 8000e30:	3318      	adds	r3, #24
 8000e32:	eb02 0bc4 	add.w	fp, r2, r4, lsl #3
 8000e36:	9303      	str	r3, [sp, #12]
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d14d      	bne.n	8000edc <print_char_scaled+0xdc>
			mask = mask << 1;
			yiter+=scale;
		}
		xiter+=scale;
	}
}
 8000e40:	b009      	add	sp, #36	; 0x24
 8000e42:	ecbd 8b02 	vpop	{d8}
 8000e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e4a:	2208      	movs	r2, #8
		uint32_t yiter = y;
 8000e4c:	9d04      	ldr	r5, [sp, #16]
		uint8_t mask = 0b00000001;
 8000e4e:	f04f 0b01 	mov.w	fp, #1
 8000e52:	9203      	str	r2, [sp, #12]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e54:	1932      	adds	r2, r6, r4
 8000e56:	9205      	str	r2, [sp, #20]
			if(*fptr & mask){
 8000e58:	783a      	ldrb	r2, [r7, #0]
 8000e5a:	46a8      	mov	r8, r5
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000e5c:	eb04 0a05 	add.w	sl, r4, r5
			if(*fptr & mask){
 8000e60:	ea1b 0f02 	tst.w	fp, r2
 8000e64:	d116      	bne.n	8000e94 <print_char_scaled+0x94>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000e66:	45d0      	cmp	r8, sl
 8000e68:	d216      	bcs.n	8000e98 <print_char_scaled+0x98>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e6a:	46b1      	mov	r9, r6
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000e6c:	fa1f f188 	uxth.w	r1, r8
 8000e70:	e02e      	b.n	8000ed0 <print_char_scaled+0xd0>
						BSP_LCD_DrawPixel(ix, iy, color);
 8000e72:	fa1f f089 	uxth.w	r0, r9
 8000e76:	ee18 2a10 	vmov	r2, s16
 8000e7a:	9307      	str	r3, [sp, #28]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e7c:	f109 0901 	add.w	r9, r9, #1
						BSP_LCD_DrawPixel(ix, iy, color);
 8000e80:	9106      	str	r1, [sp, #24]
 8000e82:	f001 fc9f 	bl	80027c4 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000e86:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8000e8a:	9a05      	ldr	r2, [sp, #20]
 8000e8c:	4591      	cmp	r9, r2
 8000e8e:	d3f0      	bcc.n	8000e72 <print_char_scaled+0x72>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000e90:	f108 0801 	add.w	r8, r8, #1
 8000e94:	45d0      	cmp	r8, sl
 8000e96:	d30b      	bcc.n	8000eb0 <print_char_scaled+0xb0>
		for(uint32_t i = 0; i < 8; i++){
 8000e98:	9a03      	ldr	r2, [sp, #12]
			mask = mask << 1;
 8000e9a:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
			yiter+=scale;
 8000e9e:	4425      	add	r5, r4
		for(uint32_t i = 0; i < 8; i++){
 8000ea0:	3a01      	subs	r2, #1
			mask = mask << 1;
 8000ea2:	fa5f fb8b 	uxtb.w	fp, fp
		for(uint32_t i = 0; i < 8; i++){
 8000ea6:	9203      	str	r2, [sp, #12]
 8000ea8:	d1d6      	bne.n	8000e58 <print_char_scaled+0x58>
		xiter+=scale;
 8000eaa:	4426      	add	r6, r4
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000eac:	3701      	adds	r7, #1
 8000eae:	e7bb      	b.n	8000e28 <print_char_scaled+0x28>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000eb0:	46b1      	mov	r9, r6
						BSP_LCD_DrawPixel(ix, iy, color);
 8000eb2:	fa1f f188 	uxth.w	r1, r8
 8000eb6:	e7e8      	b.n	8000e8a <print_char_scaled+0x8a>
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000eb8:	fa1f f089 	uxth.w	r0, r9
 8000ebc:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000ec0:	9307      	str	r3, [sp, #28]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000ec2:	f109 0901 	add.w	r9, r9, #1
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000ec6:	9106      	str	r1, [sp, #24]
 8000ec8:	f001 fc7c 	bl	80027c4 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000ecc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8000ed0:	9a05      	ldr	r2, [sp, #20]
 8000ed2:	4591      	cmp	r9, r2
 8000ed4:	d3f0      	bcc.n	8000eb8 <print_char_scaled+0xb8>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ed6:	f108 0801 	add.w	r8, r8, #1
 8000eda:	e7c4      	b.n	8000e66 <print_char_scaled+0x66>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000edc:	9b01      	ldr	r3, [sp, #4]
		uint32_t yiter = y+8*scale;
 8000ede:	465d      	mov	r5, fp
 8000ee0:	f04f 0908 	mov.w	r9, #8
		uint8_t mask = 0b00000001;
 8000ee4:	2601      	movs	r6, #1
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000ee6:	eb03 0a04 	add.w	sl, r3, r4
			if(*fptr & mask){
 8000eea:	9b02      	ldr	r3, [sp, #8]
 8000eec:	462f      	mov	r7, r5
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	421e      	tst	r6, r3
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ef2:	eb04 0305 	add.w	r3, r4, r5
			if(*fptr & mask){
 8000ef6:	d114      	bne.n	8000f22 <print_char_scaled+0x122>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ef8:	42bb      	cmp	r3, r7
 8000efa:	d914      	bls.n	8000f26 <print_char_scaled+0x126>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000efc:	f8dd 8004 	ldr.w	r8, [sp, #4]
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000f00:	b2b9      	uxth	r1, r7
 8000f02:	e02d      	b.n	8000f60 <print_char_scaled+0x160>
						BSP_LCD_DrawPixel(ix, iy, color);
 8000f04:	fa1f f088 	uxth.w	r0, r8
 8000f08:	ee18 2a10 	vmov	r2, s16
 8000f0c:	9305      	str	r3, [sp, #20]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f0e:	f108 0801 	add.w	r8, r8, #1
						BSP_LCD_DrawPixel(ix, iy, color);
 8000f12:	9104      	str	r1, [sp, #16]
 8000f14:	f001 fc56 	bl	80027c4 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f18:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8000f1c:	45d0      	cmp	r8, sl
 8000f1e:	d3f1      	bcc.n	8000f04 <print_char_scaled+0x104>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000f20:	3701      	adds	r7, #1
 8000f22:	429f      	cmp	r7, r3
 8000f24:	d30c      	bcc.n	8000f40 <print_char_scaled+0x140>
			mask = mask << 1;
 8000f26:	0076      	lsls	r6, r6, #1
		for(uint32_t i = 0; i < 8; i++){
 8000f28:	f1b9 0901 	subs.w	r9, r9, #1
			yiter+=scale;
 8000f2c:	4425      	add	r5, r4
			mask = mask << 1;
 8000f2e:	b2f6      	uxtb	r6, r6
		for(uint32_t i = 0; i < 8; i++){
 8000f30:	d1db      	bne.n	8000eea <print_char_scaled+0xea>
		xiter+=scale;
 8000f32:	9b01      	ldr	r3, [sp, #4]
 8000f34:	4423      	add	r3, r4
 8000f36:	9301      	str	r3, [sp, #4]
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000f38:	9b02      	ldr	r3, [sp, #8]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	e77b      	b.n	8000e38 <print_char_scaled+0x38>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f40:	f8dd 8004 	ldr.w	r8, [sp, #4]
						BSP_LCD_DrawPixel(ix, iy, color);
 8000f44:	b2b9      	uxth	r1, r7
 8000f46:	e7e9      	b.n	8000f1c <print_char_scaled+0x11c>
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000f48:	fa1f f088 	uxth.w	r0, r8
 8000f4c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000f50:	9305      	str	r3, [sp, #20]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f52:	f108 0801 	add.w	r8, r8, #1
						BSP_LCD_DrawPixel(ix, iy, 0xFF000000);
 8000f56:	9104      	str	r1, [sp, #16]
 8000f58:	f001 fc34 	bl	80027c4 <BSP_LCD_DrawPixel>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8000f5c:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
 8000f60:	45c2      	cmp	sl, r8
 8000f62:	d8f1      	bhi.n	8000f48 <print_char_scaled+0x148>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000f64:	3701      	adds	r7, #1
 8000f66:	e7c7      	b.n	8000ef8 <print_char_scaled+0xf8>
 8000f68:	20000224 	.word	0x20000224

08000f6c <print_char_scaled_y>:


void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f74:	4698      	mov	r8, r3
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <print_char_scaled_y+0xf8>)
void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f78:	b087      	sub	sp, #28
 8000f7a:	4604      	mov	r4, r0
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000f7c:	eb03 0bc2 	add.w	fp, r3, r2, lsl #3
void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint32_t color, uint32_t scale){
 8000f80:	9103      	str	r1, [sp, #12]

	uint32_t xiter = x;
 8000f82:	9001      	str	r0, [sp, #4]
 8000f84:	f10b 060c 	add.w	r6, fp, #12
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000f88:	46d9      	mov	r9, fp
 8000f8a:	45b1      	cmp	r9, r6
 8000f8c:	d10b      	bne.n	8000fa6 <print_char_scaled_y+0x3a>
		}
		xiter++;
	}
	xiter = x;
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
		uint32_t yiter = y+8*scale;
 8000f8e:	9b03      	ldr	r3, [sp, #12]
 8000f90:	f10b 0b18 	add.w	fp, fp, #24
 8000f94:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000f9a:	9301      	str	r3, [sp, #4]
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8000f9c:	455e      	cmp	r6, fp
 8000f9e:	d139      	bne.n	8001014 <print_char_scaled_y+0xa8>
			mask = mask << 1;
			yiter+=scale;
		}
		xiter++;
	}
}
 8000fa0:	b007      	add	sp, #28
 8000fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fa6:	2308      	movs	r3, #8
		uint32_t yiter = y;
 8000fa8:	9d03      	ldr	r5, [sp, #12]
		uint8_t mask = 0b00000001;
 8000faa:	2701      	movs	r7, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 8000fac:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8000fb0:	9302      	str	r3, [sp, #8]
			if(*fptr & mask){
 8000fb2:	f899 3000 	ldrb.w	r3, [r9]
 8000fb6:	46aa      	mov	sl, r5
 8000fb8:	421f      	tst	r7, r3
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000fbc:	442b      	add	r3, r5
			if(*fptr & mask){
 8000fbe:	d119      	bne.n	8000ff4 <print_char_scaled_y+0x88>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fc0:	459a      	cmp	sl, r3
 8000fc2:	d219      	bcs.n	8000ff8 <print_char_scaled_y+0x8c>
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 8000fc4:	fa1f f18a 	uxth.w	r1, sl
 8000fc8:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8000fcc:	9305      	str	r3, [sp, #20]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fce:	f10a 0a01 	add.w	sl, sl, #1
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 8000fd2:	9004      	str	r0, [sp, #16]
 8000fd4:	f001 fbf6 	bl	80027c4 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fd8:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8000fdc:	e7f0      	b.n	8000fc0 <print_char_scaled_y+0x54>
					BSP_LCD_DrawPixel(xiter, iy, color);
 8000fde:	fa1f f18a 	uxth.w	r1, sl
 8000fe2:	4642      	mov	r2, r8
 8000fe4:	9305      	str	r3, [sp, #20]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000fe6:	f10a 0a01 	add.w	sl, sl, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 8000fea:	9004      	str	r0, [sp, #16]
 8000fec:	f001 fbea 	bl	80027c4 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8000ff0:	e9dd 0304 	ldrd	r0, r3, [sp, #16]
 8000ff4:	459a      	cmp	sl, r3
 8000ff6:	d3f2      	bcc.n	8000fde <print_char_scaled_y+0x72>
			yiter+=scale;
 8000ff8:	9b10      	ldr	r3, [sp, #64]	; 0x40
			mask = mask << 1;
 8000ffa:	007f      	lsls	r7, r7, #1
			yiter+=scale;
 8000ffc:	441d      	add	r5, r3
		for(uint32_t i = 0; i < 8; i++){
 8000ffe:	9b02      	ldr	r3, [sp, #8]
			mask = mask << 1;
 8001000:	b2ff      	uxtb	r7, r7
		for(uint32_t i = 0; i < 8; i++){
 8001002:	3b01      	subs	r3, #1
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	d1d4      	bne.n	8000fb2 <print_char_scaled_y+0x46>
		xiter++;
 8001008:	9b01      	ldr	r3, [sp, #4]
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 800100a:	f109 0901 	add.w	r9, r9, #1
		xiter++;
 800100e:	3301      	adds	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001012:	e7ba      	b.n	8000f8a <print_char_scaled_y+0x1e>
		uint32_t yiter = y+8*scale;
 8001014:	9d01      	ldr	r5, [sp, #4]
 8001016:	f04f 0908 	mov.w	r9, #8
		uint8_t mask = 0b00000001;
 800101a:	2701      	movs	r7, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 800101c:	b2a0      	uxth	r0, r4
			if(*fptr & mask){
 800101e:	7833      	ldrb	r3, [r6, #0]
 8001020:	421f      	tst	r7, r3
 8001022:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001024:	eb03 0a05 	add.w	sl, r3, r5
 8001028:	d111      	bne.n	800104e <print_char_scaled_y+0xe2>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800102a:	4555      	cmp	r5, sl
 800102c:	d211      	bcs.n	8001052 <print_char_scaled_y+0xe6>
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 800102e:	b2a9      	uxth	r1, r5
 8001030:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001034:	9002      	str	r0, [sp, #8]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001036:	3501      	adds	r5, #1
					BSP_LCD_DrawPixel(xiter, iy, 0xFF000000);
 8001038:	f001 fbc4 	bl	80027c4 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800103c:	9802      	ldr	r0, [sp, #8]
 800103e:	e7f4      	b.n	800102a <print_char_scaled_y+0xbe>
					BSP_LCD_DrawPixel(xiter, iy, color);
 8001040:	b2a9      	uxth	r1, r5
 8001042:	4642      	mov	r2, r8
 8001044:	9002      	str	r0, [sp, #8]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001046:	3501      	adds	r5, #1
					BSP_LCD_DrawPixel(xiter, iy, color);
 8001048:	f001 fbbc 	bl	80027c4 <BSP_LCD_DrawPixel>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800104c:	9802      	ldr	r0, [sp, #8]
 800104e:	4555      	cmp	r5, sl
 8001050:	d3f6      	bcc.n	8001040 <print_char_scaled_y+0xd4>
			mask = mask << 1;
 8001052:	007f      	lsls	r7, r7, #1
		for(uint32_t i = 0; i < 8; i++){
 8001054:	f1b9 0901 	subs.w	r9, r9, #1
			yiter+=scale;
 8001058:	4655      	mov	r5, sl
			mask = mask << 1;
 800105a:	b2ff      	uxtb	r7, r7
		for(uint32_t i = 0; i < 8; i++){
 800105c:	d1df      	bne.n	800101e <print_char_scaled_y+0xb2>
		xiter++;
 800105e:	3401      	adds	r4, #1
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001060:	3601      	adds	r6, #1
 8001062:	e79b      	b.n	8000f9c <print_char_scaled_y+0x30>
 8001064:	20000224 	.word	0x20000224

08001068 <print_string>:
// . . . . .     . . . . . .    . . . . .
// 0 0 0 0 0     1 1 1 1 0 0    1 0 1 1 1    
// ARGB - 0xFF00FFFF


void print_string(uint32_t x, uint32_t y, char* string, uint32_t color){
 8001068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800106c:	4614      	mov	r4, r2
 800106e:	4605      	mov	r5, r0
	uint32_t len = strlen(string);
 8001070:	4610      	mov	r0, r2
void print_string(uint32_t x, uint32_t y, char* string, uint32_t color){
 8001072:	460f      	mov	r7, r1
 8001074:	4698      	mov	r8, r3
	uint32_t len = strlen(string);
 8001076:	f7ff f8cb 	bl	8000210 <strlen>
	for(char* i = string; i < string+len; i++){
 800107a:	1826      	adds	r6, r4, r0
 800107c:	42b4      	cmp	r4, r6
 800107e:	d301      	bcc.n	8001084 <print_string+0x1c>
		print_char(x, y, *i, color);
		x += 12;
		//y += 16;
	}
}
 8001080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		print_char(x, y, *i, color);
 8001084:	4628      	mov	r0, r5
 8001086:	4643      	mov	r3, r8
 8001088:	f814 2b01 	ldrb.w	r2, [r4], #1
 800108c:	4639      	mov	r1, r7
		x += 12;
 800108e:	350c      	adds	r5, #12
		print_char(x, y, *i, color);
 8001090:	f7ff fe62 	bl	8000d58 <print_char>
	for(char* i = string; i < string+len; i++){
 8001094:	e7f2      	b.n	800107c <print_string+0x14>

08001096 <print_string_scaled>:

void print_string_scaled(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 8001096:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800109a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800109e:	4614      	mov	r4, r2
	uint32_t len = strlen(string);
	for(char* i = string; i < string+len; i++){
		print_char_scaled(x, y, *i, color, scale);
		x += 12*scale;
 80010a0:	270c      	movs	r7, #12
void print_string_scaled(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010a2:	4605      	mov	r5, r0
	uint32_t len = strlen(string);
 80010a4:	4610      	mov	r0, r2
void print_string_scaled(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010a6:	4688      	mov	r8, r1
 80010a8:	469a      	mov	sl, r3
		x += 12*scale;
 80010aa:	fb07 f709 	mul.w	r7, r7, r9
	uint32_t len = strlen(string);
 80010ae:	f7ff f8af 	bl	8000210 <strlen>
	for(char* i = string; i < string+len; i++){
 80010b2:	1826      	adds	r6, r4, r0
 80010b4:	42b4      	cmp	r4, r6
 80010b6:	d302      	bcc.n	80010be <print_string_scaled+0x28>
		//y += 16*scale;
	}
}
 80010b8:	b002      	add	sp, #8
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_char_scaled(x, y, *i, color, scale);
 80010be:	4628      	mov	r0, r5
 80010c0:	4653      	mov	r3, sl
 80010c2:	f814 2b01 	ldrb.w	r2, [r4], #1
 80010c6:	4641      	mov	r1, r8
 80010c8:	f8cd 9000 	str.w	r9, [sp]
		x += 12*scale;
 80010cc:	443d      	add	r5, r7
		print_char_scaled(x, y, *i, color, scale);
 80010ce:	f7ff fe97 	bl	8000e00 <print_char_scaled>
	for(char* i = string; i < string+len; i++){
 80010d2:	e7ef      	b.n	80010b4 <print_string_scaled+0x1e>

080010d4 <print_string_scaled_y>:

void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010d8:	4614      	mov	r4, r2
 80010da:	4605      	mov	r5, r0
	uint32_t len = strlen(string);
 80010dc:	4610      	mov	r0, r2
void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint32_t color, uint32_t scale){
 80010de:	4688      	mov	r8, r1
 80010e0:	4699      	mov	r9, r3
 80010e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
	uint32_t len = strlen(string);
 80010e4:	f7ff f894 	bl	8000210 <strlen>
	for(char* i = string; i < string+len; i++){
 80010e8:	1827      	adds	r7, r4, r0
 80010ea:	42bc      	cmp	r4, r7
 80010ec:	d302      	bcc.n	80010f4 <print_string_scaled_y+0x20>
		print_char_scaled_y(x, y, *i, color, scale);
		x += 12;
		//y += 16*scale;
	}
}
 80010ee:	b003      	add	sp, #12
 80010f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		print_char_scaled_y(x, y, *i, color, scale);
 80010f4:	4628      	mov	r0, r5
 80010f6:	464b      	mov	r3, r9
 80010f8:	f814 2b01 	ldrb.w	r2, [r4], #1
 80010fc:	4641      	mov	r1, r8
 80010fe:	9600      	str	r6, [sp, #0]
		x += 12;
 8001100:	350c      	adds	r5, #12
		print_char_scaled_y(x, y, *i, color, scale);
 8001102:	f7ff ff33 	bl	8000f6c <print_char_scaled_y>
	for(char* i = string; i < string+len; i++){
 8001106:	e7f0      	b.n	80010ea <print_string_scaled_y+0x16>

08001108 <fill_screen>:
// 16
// 12
// 272
// 4

void fill_screen(uint32_t color){
 8001108:	b507      	push	{r0, r1, r2, lr}
	//for(uint16_t* i = framebuf; i < framebuf+SCRWIDTH*SCRHEIGHT; i++){
	//	*i = color;
	//}
	print_rectangle(0, 0, SCRWIDTH, SCRHEIGHT, color);
 800110a:	2100      	movs	r1, #0
 800110c:	9000      	str	r0, [sp, #0]
 800110e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001112:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001116:	4608      	mov	r0, r1
 8001118:	f7ff fdcd 	bl	8000cb6 <print_rectangle>
}
 800111c:	b003      	add	sp, #12
 800111e:	f85d fb04 	ldr.w	pc, [sp], #4

08001122 <print_number>:


void print_number(uint32_t x, uint32_t y, uint32_t number, uint32_t color, uint32_t scale){
 8001122:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001126:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
	if(!number){
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 800112a:	260c      	movs	r6, #12
void print_number(uint32_t x, uint32_t y, uint32_t number, uint32_t color, uint32_t scale){
 800112c:	4605      	mov	r5, r0
 800112e:	460f      	mov	r7, r1
 8001130:	4698      	mov	r8, r3
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 8001132:	fb06 f609 	mul.w	r6, r6, r9
	if(!number){
 8001136:	4614      	mov	r4, r2
 8001138:	b972      	cbnz	r2, 8001158 <print_number+0x36>
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 800113a:	4430      	add	r0, r6
 800113c:	2230      	movs	r2, #48	; 0x30
 800113e:	f8cd 9000 	str.w	r9, [sp]
 8001142:	f7ff fe5d 	bl	8000e00 <print_char_scaled>
	}

	uint32_t numlen = 0;
 8001146:	4620      	mov	r0, r4
	while(num_cp){
		numlen++;
		num_cp /= 10;
	}

	x += numlen * scale * 12;
 8001148:	fb06 5500 	mla	r5, r6, r0, r5
	while(number){
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 800114c:	f04f 0a0a 	mov.w	sl, #10
	while(number){
 8001150:	b964      	cbnz	r4, 800116c <print_number+0x4a>
		x -= scale * 12;
		number /= 10;
	}
}
 8001152:	b003      	add	sp, #12
 8001154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001158:	4613      	mov	r3, r2
	uint32_t numlen = 0;
 800115a:	2000      	movs	r0, #0
		num_cp /= 10;
 800115c:	210a      	movs	r1, #10
		numlen++;
 800115e:	461a      	mov	r2, r3
 8001160:	3001      	adds	r0, #1
	while(num_cp){
 8001162:	2a09      	cmp	r2, #9
		num_cp /= 10;
 8001164:	fbb3 f3f1 	udiv	r3, r3, r1
	while(num_cp){
 8001168:	d8f9      	bhi.n	800115e <print_number+0x3c>
 800116a:	e7ed      	b.n	8001148 <print_number+0x26>
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 800116c:	fbb4 fbfa 	udiv	fp, r4, sl
 8001170:	fb0a 421b 	mls	r2, sl, fp, r4
 8001174:	4628      	mov	r0, r5
 8001176:	4643      	mov	r3, r8
 8001178:	4639      	mov	r1, r7
 800117a:	3230      	adds	r2, #48	; 0x30
 800117c:	f8cd 9000 	str.w	r9, [sp]
		x -= scale * 12;
 8001180:	1bad      	subs	r5, r5, r6
		number /= 10;
 8001182:	465c      	mov	r4, fp
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f7ff fe3b 	bl	8000e00 <print_char_scaled>
		number /= 10;
 800118a:	e7e1      	b.n	8001150 <print_number+0x2e>

0800118c <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 800118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001190:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001192:	4d24      	ldr	r5, [pc, #144]	; (8001224 <keyboard_GPIO_init+0x98>)
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8001194:	4f24      	ldr	r7, [pc, #144]	; (8001228 <keyboard_GPIO_init+0x9c>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	2214      	movs	r2, #20
 8001198:	2100      	movs	r1, #0
 800119a:	a801      	add	r0, sp, #4
 800119c:	f00d fa5c 	bl	800e658 <memset>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80011a0:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001230 <keyboard_GPIO_init+0xa4>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011a4:	4628      	mov	r0, r5
 80011a6:	2200      	movs	r2, #0
 80011a8:	2110      	movs	r1, #16

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011ac:	f003 f840 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80011b0:	4638      	mov	r0, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	2101      	movs	r1, #1
 80011b6:	f003 f83b 	bl	8004230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	4640      	mov	r0, r8
 80011be:	21c0      	movs	r1, #192	; 0xc0
 80011c0:	f003 f836 	bl	8004230 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2601      	movs	r6, #1
 80011c6:	2310      	movs	r3, #16
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	a901      	add	r1, sp, #4
 80011ca:	4628      	mov	r0, r5

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	2502      	movs	r5, #2
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	e9cd 3601 	strd	r3, r6, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	e9cd 4403 	strd	r4, r4, [sp, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f002 ff41 	bl	800405c <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80011da:	230c      	movs	r3, #12
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011dc:	a901      	add	r1, sp, #4
 80011de:	4638      	mov	r0, r7
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e0:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011e6:	f002 ff39 	bl	800405c <HAL_GPIO_Init>
	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011ea:	a901      	add	r1, sp, #4
 80011ec:	4638      	mov	r0, r7
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	e9cd 6601 	strd	r6, r6, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	e9cd 5403 	strd	r5, r4, [sp, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011f6:	f002 ff31 	bl	800405c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80011fa:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011fc:	a901      	add	r1, sp, #4
 80011fe:	4640      	mov	r0, r8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	e9cd 3601 	strd	r3, r6, [sp, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	e9cd 5403 	strd	r5, r4, [sp, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001208:	f002 ff28 	bl	800405c <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800120c:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800120e:	a901      	add	r1, sp, #4
 8001210:	4806      	ldr	r0, [pc, #24]	; (800122c <keyboard_GPIO_init+0xa0>)
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001212:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001214:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001218:	f002 ff20 	bl	800405c <HAL_GPIO_Init>
}
 800121c:	b006      	add	sp, #24
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001222:	bf00      	nop
 8001224:	40020400 	.word	0x40020400
 8001228:	40022000 	.word	0x40022000
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40021800 	.word	0x40021800

08001234 <get_current_keyboard_state>:

void get_current_keyboard_state(){
 8001234:	b510      	push	{r4, lr}
	stage = (stage+1)%8;
 8001236:	4c99      	ldr	r4, [pc, #612]	; (800149c <get_current_keyboard_state+0x268>)
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	6023      	str	r3, [r4, #0]
	switch(stage){
 8001242:	3b01      	subs	r3, #1
 8001244:	2b06      	cmp	r3, #6
 8001246:	d808      	bhi.n	800125a <get_current_keyboard_state+0x26>
 8001248:	e8df f013 	tbh	[pc, r3, lsl #1]
 800124c:	0061001a 	.word	0x0061001a
 8001250:	00bd0077 	.word	0x00bd0077
 8001254:	011500cf 	.word	0x011500cf
 8001258:	0132      	.short	0x0132
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2180      	movs	r1, #128	; 0x80
 800125e:	4890      	ldr	r0, [pc, #576]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001260:	f002 ffe6 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 8001264:	2200      	movs	r2, #0
 8001266:	2110      	movs	r1, #16
 8001268:	488e      	ldr	r0, [pc, #568]	; (80014a4 <get_current_keyboard_state+0x270>)
 800126a:	f002 ffe1 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2101      	movs	r1, #1
 8001272:	488d      	ldr	r0, [pc, #564]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001274:	f002 ffdc 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2140      	movs	r1, #64	; 0x40
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 800127c:	4888      	ldr	r0, [pc, #544]	; (80014a0 <get_current_keyboard_state+0x26c>)
 800127e:	e058      	b.n	8001332 <get_current_keyboard_state+0xfe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 8001280:	2140      	movs	r1, #64	; 0x40
 8001282:	488a      	ldr	r0, [pc, #552]	; (80014ac <get_current_keyboard_state+0x278>)
 8001284:	f002 ffce 	bl	8004224 <HAL_GPIO_ReadPin>
 8001288:	2801      	cmp	r0, #1
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	d133      	bne.n	80012f6 <get_current_keyboard_state+0xc2>
 800128e:	2b15      	cmp	r3, #21
 8001290:	d801      	bhi.n	8001296 <get_current_keyboard_state+0x62>
 8001292:	3301      	adds	r3, #1
 8001294:	6063      	str	r3, [r4, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 8001296:	2108      	movs	r1, #8
 8001298:	4883      	ldr	r0, [pc, #524]	; (80014a8 <get_current_keyboard_state+0x274>)
 800129a:	f002 ffc3 	bl	8004224 <HAL_GPIO_ReadPin>
 800129e:	2801      	cmp	r0, #1
 80012a0:	68a3      	ldr	r3, [r4, #8]
 80012a2:	d12c      	bne.n	80012fe <get_current_keyboard_state+0xca>
 80012a4:	2b15      	cmp	r3, #21
 80012a6:	d801      	bhi.n	80012ac <get_current_keyboard_state+0x78>
 80012a8:	3301      	adds	r3, #1
 80012aa:	60a3      	str	r3, [r4, #8]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 80012ac:	2104      	movs	r1, #4
 80012ae:	487e      	ldr	r0, [pc, #504]	; (80014a8 <get_current_keyboard_state+0x274>)
 80012b0:	f002 ffb8 	bl	8004224 <HAL_GPIO_ReadPin>
 80012b4:	2801      	cmp	r0, #1
 80012b6:	68e3      	ldr	r3, [r4, #12]
 80012b8:	d125      	bne.n	8001306 <get_current_keyboard_state+0xd2>
 80012ba:	2b15      	cmp	r3, #21
 80012bc:	d801      	bhi.n	80012c2 <get_current_keyboard_state+0x8e>
 80012be:	3301      	adds	r3, #1
 80012c0:	60e3      	str	r3, [r4, #12]
			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 80012c2:	6862      	ldr	r2, [r4, #4]
 80012c4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80012c6:	2a0e      	cmp	r2, #14
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80012c8:	68a2      	ldr	r2, [r4, #8]
			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 80012ca:	bf96      	itet	ls
 80012cc:	f023 0301 	bicls.w	r3, r3, #1
 80012d0:	f043 0301 	orrhi.w	r3, r3, #1
 80012d4:	b29b      	uxthls	r3, r3
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80012d6:	2a0e      	cmp	r2, #14
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80012d8:	68e2      	ldr	r2, [r4, #12]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80012da:	bf96      	itet	ls
 80012dc:	f023 0302 	bicls.w	r3, r3, #2
 80012e0:	f043 0302 	orrhi.w	r3, r3, #2
 80012e4:	b29b      	uxthls	r3, r3
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80012e6:	2a0e      	cmp	r2, #14
 80012e8:	bf8c      	ite	hi
 80012ea:	f043 0304 	orrhi.w	r3, r3, #4
 80012ee:	f023 0304 	bicls.w	r3, r3, #4
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 80012f2:	86a3      	strh	r3, [r4, #52]	; 0x34
			break;
		}

	}
}
 80012f4:	bd10      	pop	{r4, pc}
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0cd      	beq.n	8001296 <get_current_keyboard_state+0x62>
 80012fa:	3b01      	subs	r3, #1
 80012fc:	e7ca      	b.n	8001294 <get_current_keyboard_state+0x60>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0d4      	beq.n	80012ac <get_current_keyboard_state+0x78>
 8001302:	3b01      	subs	r3, #1
 8001304:	e7d1      	b.n	80012aa <get_current_keyboard_state+0x76>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0db      	beq.n	80012c2 <get_current_keyboard_state+0x8e>
 800130a:	3b01      	subs	r3, #1
 800130c:	e7d8      	b.n	80012c0 <get_current_keyboard_state+0x8c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4863      	ldr	r0, [pc, #396]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001314:	f002 ff8c 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	4860      	ldr	r0, [pc, #384]	; (80014a0 <get_current_keyboard_state+0x26c>)
 800131e:	f002 ff87 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 8001322:	2200      	movs	r2, #0
 8001324:	2101      	movs	r1, #1
 8001326:	4860      	ldr	r0, [pc, #384]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001328:	f002 ff82 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 800132c:	2201      	movs	r2, #1
 800132e:	2110      	movs	r1, #16
 8001330:	485c      	ldr	r0, [pc, #368]	; (80014a4 <get_current_keyboard_state+0x270>)
}
 8001332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8001336:	f002 bf7b 	b.w	8004230 <HAL_GPIO_WritePin>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	485b      	ldr	r0, [pc, #364]	; (80014ac <get_current_keyboard_state+0x278>)
 800133e:	f002 ff71 	bl	8004224 <HAL_GPIO_ReadPin>
 8001342:	2801      	cmp	r0, #1
 8001344:	6923      	ldr	r3, [r4, #16]
 8001346:	d132      	bne.n	80013ae <get_current_keyboard_state+0x17a>
 8001348:	2b15      	cmp	r3, #21
 800134a:	d801      	bhi.n	8001350 <get_current_keyboard_state+0x11c>
 800134c:	3301      	adds	r3, #1
 800134e:	6123      	str	r3, [r4, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 8001350:	2108      	movs	r1, #8
 8001352:	4855      	ldr	r0, [pc, #340]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001354:	f002 ff66 	bl	8004224 <HAL_GPIO_ReadPin>
 8001358:	2801      	cmp	r0, #1
 800135a:	6963      	ldr	r3, [r4, #20]
 800135c:	d12b      	bne.n	80013b6 <get_current_keyboard_state+0x182>
 800135e:	2b15      	cmp	r3, #21
 8001360:	d801      	bhi.n	8001366 <get_current_keyboard_state+0x132>
 8001362:	3301      	adds	r3, #1
 8001364:	6163      	str	r3, [r4, #20]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 8001366:	2104      	movs	r1, #4
 8001368:	484f      	ldr	r0, [pc, #316]	; (80014a8 <get_current_keyboard_state+0x274>)
 800136a:	f002 ff5b 	bl	8004224 <HAL_GPIO_ReadPin>
 800136e:	2801      	cmp	r0, #1
 8001370:	69a3      	ldr	r3, [r4, #24]
 8001372:	d124      	bne.n	80013be <get_current_keyboard_state+0x18a>
 8001374:	2b15      	cmp	r3, #21
 8001376:	d801      	bhi.n	800137c <get_current_keyboard_state+0x148>
 8001378:	3301      	adds	r3, #1
 800137a:	61a3      	str	r3, [r4, #24]
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 800137c:	6922      	ldr	r2, [r4, #16]
 800137e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8001380:	2a0e      	cmp	r2, #14
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8001382:	6962      	ldr	r2, [r4, #20]
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 8001384:	bf96      	itet	ls
 8001386:	f023 0308 	bicls.w	r3, r3, #8
 800138a:	f043 0308 	orrhi.w	r3, r3, #8
 800138e:	b29b      	uxthls	r3, r3
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8001390:	2a0e      	cmp	r2, #14
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8001392:	69a2      	ldr	r2, [r4, #24]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 8001394:	bf96      	itet	ls
 8001396:	f023 0310 	bicls.w	r3, r3, #16
 800139a:	f043 0310 	orrhi.w	r3, r3, #16
 800139e:	b29b      	uxthls	r3, r3
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 80013a0:	2a0e      	cmp	r2, #14
 80013a2:	bf8c      	ite	hi
 80013a4:	f043 0320 	orrhi.w	r3, r3, #32
 80013a8:	f023 0320 	bicls.w	r3, r3, #32
 80013ac:	e7a1      	b.n	80012f2 <get_current_keyboard_state+0xbe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0ce      	beq.n	8001350 <get_current_keyboard_state+0x11c>
 80013b2:	3b01      	subs	r3, #1
 80013b4:	e7cb      	b.n	800134e <get_current_keyboard_state+0x11a>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0d5      	beq.n	8001366 <get_current_keyboard_state+0x132>
 80013ba:	3b01      	subs	r3, #1
 80013bc:	e7d2      	b.n	8001364 <get_current_keyboard_state+0x130>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0dc      	beq.n	800137c <get_current_keyboard_state+0x148>
 80013c2:	3b01      	subs	r3, #1
 80013c4:	e7d9      	b.n	800137a <get_current_keyboard_state+0x146>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2110      	movs	r1, #16
 80013ca:	4836      	ldr	r0, [pc, #216]	; (80014a4 <get_current_keyboard_state+0x270>)
 80013cc:	f002 ff30 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2140      	movs	r1, #64	; 0x40
 80013d4:	4832      	ldr	r0, [pc, #200]	; (80014a0 <get_current_keyboard_state+0x26c>)
 80013d6:	f002 ff2b 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2101      	movs	r1, #1
 80013de:	4832      	ldr	r0, [pc, #200]	; (80014a8 <get_current_keyboard_state+0x274>)
 80013e0:	f002 ff26 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 80013e4:	2201      	movs	r2, #1
 80013e6:	2180      	movs	r1, #128	; 0x80
 80013e8:	e748      	b.n	800127c <get_current_keyboard_state+0x48>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 80013ea:	2140      	movs	r1, #64	; 0x40
 80013ec:	482f      	ldr	r0, [pc, #188]	; (80014ac <get_current_keyboard_state+0x278>)
 80013ee:	f002 ff19 	bl	8004224 <HAL_GPIO_ReadPin>
 80013f2:	2801      	cmp	r0, #1
 80013f4:	69e3      	ldr	r3, [r4, #28]
 80013f6:	d132      	bne.n	800145e <get_current_keyboard_state+0x22a>
 80013f8:	2b15      	cmp	r3, #21
 80013fa:	d801      	bhi.n	8001400 <get_current_keyboard_state+0x1cc>
 80013fc:	3301      	adds	r3, #1
 80013fe:	61e3      	str	r3, [r4, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 8001400:	2108      	movs	r1, #8
 8001402:	4829      	ldr	r0, [pc, #164]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001404:	f002 ff0e 	bl	8004224 <HAL_GPIO_ReadPin>
 8001408:	2801      	cmp	r0, #1
 800140a:	6a23      	ldr	r3, [r4, #32]
 800140c:	d12b      	bne.n	8001466 <get_current_keyboard_state+0x232>
 800140e:	2b15      	cmp	r3, #21
 8001410:	d801      	bhi.n	8001416 <get_current_keyboard_state+0x1e2>
 8001412:	3301      	adds	r3, #1
 8001414:	6223      	str	r3, [r4, #32]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 8001416:	2104      	movs	r1, #4
 8001418:	4823      	ldr	r0, [pc, #140]	; (80014a8 <get_current_keyboard_state+0x274>)
 800141a:	f002 ff03 	bl	8004224 <HAL_GPIO_ReadPin>
 800141e:	2801      	cmp	r0, #1
 8001420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001422:	d124      	bne.n	800146e <get_current_keyboard_state+0x23a>
 8001424:	2b15      	cmp	r3, #21
 8001426:	d801      	bhi.n	800142c <get_current_keyboard_state+0x1f8>
 8001428:	3301      	adds	r3, #1
 800142a:	6263      	str	r3, [r4, #36]	; 0x24
			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 800142c:	69e2      	ldr	r2, [r4, #28]
 800142e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8001430:	2a0e      	cmp	r2, #14
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8001432:	6a22      	ldr	r2, [r4, #32]
			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 8001434:	bf96      	itet	ls
 8001436:	f023 0340 	bicls.w	r3, r3, #64	; 0x40
 800143a:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 800143e:	b29b      	uxthls	r3, r3
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8001440:	2a0e      	cmp	r2, #14
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8001442:	6a62      	ldr	r2, [r4, #36]	; 0x24
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8001444:	bf96      	itet	ls
 8001446:	f023 0380 	bicls.w	r3, r3, #128	; 0x80
 800144a:	f043 0380 	orrhi.w	r3, r3, #128	; 0x80
 800144e:	b29b      	uxthls	r3, r3
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8001450:	2a0e      	cmp	r2, #14
 8001452:	bf8c      	ite	hi
 8001454:	f443 7380 	orrhi.w	r3, r3, #256	; 0x100
 8001458:	f423 7380 	bicls.w	r3, r3, #256	; 0x100
 800145c:	e749      	b.n	80012f2 <get_current_keyboard_state+0xbe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0ce      	beq.n	8001400 <get_current_keyboard_state+0x1cc>
 8001462:	3b01      	subs	r3, #1
 8001464:	e7cb      	b.n	80013fe <get_current_keyboard_state+0x1ca>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0d5      	beq.n	8001416 <get_current_keyboard_state+0x1e2>
 800146a:	3b01      	subs	r3, #1
 800146c:	e7d2      	b.n	8001414 <get_current_keyboard_state+0x1e0>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0dc      	beq.n	800142c <get_current_keyboard_state+0x1f8>
 8001472:	3b01      	subs	r3, #1
 8001474:	e7d9      	b.n	800142a <get_current_keyboard_state+0x1f6>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2110      	movs	r1, #16
 800147a:	480a      	ldr	r0, [pc, #40]	; (80014a4 <get_current_keyboard_state+0x270>)
 800147c:	f002 fed8 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	4806      	ldr	r0, [pc, #24]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001486:	f002 fed3 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2180      	movs	r1, #128	; 0x80
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <get_current_keyboard_state+0x26c>)
 8001490:	f002 fece 	bl	8004230 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8001494:	2201      	movs	r2, #1
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <get_current_keyboard_state+0x274>)
 8001498:	4611      	mov	r1, r2
 800149a:	e74a      	b.n	8001332 <get_current_keyboard_state+0xfe>
 800149c:	20005978 	.word	0x20005978
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40021c00 	.word	0x40021c00
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 80014b0:	2140      	movs	r1, #64	; 0x40
 80014b2:	4822      	ldr	r0, [pc, #136]	; (800153c <get_current_keyboard_state+0x308>)
 80014b4:	f002 feb6 	bl	8004224 <HAL_GPIO_ReadPin>
 80014b8:	2801      	cmp	r0, #1
 80014ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014bc:	d132      	bne.n	8001524 <get_current_keyboard_state+0x2f0>
 80014be:	2b15      	cmp	r3, #21
 80014c0:	d801      	bhi.n	80014c6 <get_current_keyboard_state+0x292>
 80014c2:	3301      	adds	r3, #1
 80014c4:	62a3      	str	r3, [r4, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 80014c6:	2108      	movs	r1, #8
 80014c8:	481d      	ldr	r0, [pc, #116]	; (8001540 <get_current_keyboard_state+0x30c>)
 80014ca:	f002 feab 	bl	8004224 <HAL_GPIO_ReadPin>
 80014ce:	2801      	cmp	r0, #1
 80014d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014d2:	d12b      	bne.n	800152c <get_current_keyboard_state+0x2f8>
 80014d4:	2b15      	cmp	r3, #21
 80014d6:	d801      	bhi.n	80014dc <get_current_keyboard_state+0x2a8>
 80014d8:	3301      	adds	r3, #1
 80014da:	62e3      	str	r3, [r4, #44]	; 0x2c
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 80014dc:	2104      	movs	r1, #4
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <get_current_keyboard_state+0x30c>)
 80014e0:	f002 fea0 	bl	8004224 <HAL_GPIO_ReadPin>
 80014e4:	2801      	cmp	r0, #1
 80014e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014e8:	d124      	bne.n	8001534 <get_current_keyboard_state+0x300>
 80014ea:	2b15      	cmp	r3, #21
 80014ec:	d801      	bhi.n	80014f2 <get_current_keyboard_state+0x2be>
 80014ee:	3301      	adds	r3, #1
 80014f0:	6323      	str	r3, [r4, #48]	; 0x30
			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 80014f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80014f6:	2a0e      	cmp	r2, #14
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 80014f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 80014fa:	bf96      	itet	ls
 80014fc:	f423 7300 	bicls.w	r3, r3, #512	; 0x200
 8001500:	f443 7300 	orrhi.w	r3, r3, #512	; 0x200
 8001504:	b29b      	uxthls	r3, r3
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8001506:	2a0e      	cmp	r2, #14
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8001508:	6b22      	ldr	r2, [r4, #48]	; 0x30
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 800150a:	bf96      	itet	ls
 800150c:	f423 6380 	bicls.w	r3, r3, #1024	; 0x400
 8001510:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
 8001514:	b29b      	uxthls	r3, r3
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8001516:	2a0e      	cmp	r2, #14
 8001518:	bf8c      	ite	hi
 800151a:	f443 6300 	orrhi.w	r3, r3, #2048	; 0x800
 800151e:	f423 6300 	bicls.w	r3, r3, #2048	; 0x800
 8001522:	e6e6      	b.n	80012f2 <get_current_keyboard_state+0xbe>
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0ce      	beq.n	80014c6 <get_current_keyboard_state+0x292>
 8001528:	3b01      	subs	r3, #1
 800152a:	e7cb      	b.n	80014c4 <get_current_keyboard_state+0x290>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0d5      	beq.n	80014dc <get_current_keyboard_state+0x2a8>
 8001530:	3b01      	subs	r3, #1
 8001532:	e7d2      	b.n	80014da <get_current_keyboard_state+0x2a6>
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0dc      	beq.n	80014f2 <get_current_keyboard_state+0x2be>
 8001538:	3b01      	subs	r3, #1
 800153a:	e7d9      	b.n	80014f0 <get_current_keyboard_state+0x2bc>
 800153c:	40021c00 	.word	0x40021c00
 8001540:	40022000 	.word	0x40022000

08001544 <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8001544:	b510      	push	{r4, lr}
 8001546:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	2210      	movs	r2, #16
 800154a:	2100      	movs	r1, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2400      	movs	r4, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154e:	a802      	add	r0, sp, #8
 8001550:	f00d f882 	bl	800e658 <memset>
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001554:	f44f 7380 	mov.w	r3, #256	; 0x100
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001558:	a901      	add	r1, sp, #4
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <spinner_GPIO_init+0x44>)
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800155c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155e:	f002 fd7d 	bl	800405c <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001562:	2340      	movs	r3, #64	; 0x40
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	a901      	add	r1, sp, #4
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <spinner_GPIO_init+0x48>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f002 fd75 	bl	800405c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001572:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8001574:	a901      	add	r1, sp, #4
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <spinner_GPIO_init+0x48>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	e9cd 3401 	strd	r3, r4, [sp, #4]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 800157e:	f002 fd6d 	bl	800405c <HAL_GPIO_Init>
}
 8001582:	b006      	add	sp, #24
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	40021400 	.word	0x40021400
 800158c:	40020800 	.word	0x40020800

08001590 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8001590:	b508      	push	{r3, lr}
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8001592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <get_current_spinner_button_state+0x30>)
 8001598:	f002 fe44 	bl	8004224 <HAL_GPIO_ReadPin>
	if(val == GPIO_PIN_RESET){
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <get_current_spinner_button_state+0x34>)
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 800159e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	if(val == GPIO_PIN_RESET){
 80015a0:	b950      	cbnz	r0, 80015b8 <get_current_spinner_button_state+0x28>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 80015a2:	2a3b      	cmp	r2, #59	; 0x3b
 80015a4:	d801      	bhi.n	80015aa <get_current_spinner_button_state+0x1a>
				spinner_button_count++;
 80015a6:	3201      	adds	r2, #1
		}
	}else{
		if(spinner_button_count >= 3){
			spinner_button_count-=3;
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 80015aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ac:	2a27      	cmp	r2, #39	; 0x27
 80015ae:	bf94      	ite	ls
 80015b0:	2200      	movls	r2, #0
 80015b2:	2201      	movhi	r2, #1
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c
		spinner_button_state=1;
	}else{
		spinner_button_state=0;
	}
}
 80015b6:	bd08      	pop	{r3, pc}
		if(spinner_button_count >= 3){
 80015b8:	2a02      	cmp	r2, #2
 80015ba:	d9f6      	bls.n	80015aa <get_current_spinner_button_state+0x1a>
			spinner_button_count-=3;
 80015bc:	3a03      	subs	r2, #3
 80015be:	e7f3      	b.n	80015a8 <get_current_spinner_button_state+0x18>
 80015c0:	40021400 	.word	0x40021400
 80015c4:	20005978 	.word	0x20005978

080015c8 <get_spinner_position_change>:


void get_spinner_position_change(){
 80015c8:	b510      	push	{r4, lr}
	switch(spinner_stage){
 80015ca:	4c2a      	ldr	r4, [pc, #168]	; (8001674 <get_spinner_position_change+0xac>)
 80015cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d813      	bhi.n	80015fa <get_spinner_position_change+0x32>
 80015d2:	e8df f003 	tbb	[pc, r3]
 80015d6:	1503      	.short	0x1503
 80015d8:	4c443129 	.word	0x4c443129
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 80015dc:	2180      	movs	r1, #128	; 0x80
 80015de:	4826      	ldr	r0, [pc, #152]	; (8001678 <get_spinner_position_change+0xb0>)
 80015e0:	f002 fe20 	bl	8004224 <HAL_GPIO_ReadPin>
 80015e4:	b948      	cbnz	r0, 80015fa <get_spinner_position_change+0x32>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 80015e6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80015ea:	2140      	movs	r1, #64	; 0x40
 80015ec:	f500 3002 	add.w	r0, r0, #133120	; 0x20800
 80015f0:	f002 fe18 	bl	8004224 <HAL_GPIO_ReadPin>
 80015f4:	b910      	cbnz	r0, 80015fc <get_spinner_position_change+0x34>
					spinner_stage = 1;
 80015f6:	2301      	movs	r3, #1
			}
			break;			
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
				spinner_stage = 5;
 80015f8:	6423      	str	r3, [r4, #64]	; 0x40
				spinner_stage = 0;
			}
			break;
		}
	}
}
 80015fa:	bd10      	pop	{r4, pc}
					spinner_stage = 3;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e7fb      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	481d      	ldr	r0, [pc, #116]	; (8001678 <get_spinner_position_change+0xb0>)
 8001604:	f002 fe0e 	bl	8004224 <HAL_GPIO_ReadPin>
 8001608:	2801      	cmp	r0, #1
 800160a:	d1f6      	bne.n	80015fa <get_spinner_position_change+0x32>
				minuscnt++;
 800160c:	6c63      	ldr	r3, [r4, #68]	; 0x44
				pluscnt=0;
 800160e:	2200      	movs	r2, #0
				minuscnt++;
 8001610:	3301      	adds	r3, #1
				pluscnt=0;
 8001612:	64a2      	str	r2, [r4, #72]	; 0x48
				if(minuscnt >= 4){
 8001614:	2b03      	cmp	r3, #3
				minuscnt++;
 8001616:	6463      	str	r3, [r4, #68]	; 0x44
				if(minuscnt >= 4){
 8001618:	d904      	bls.n	8001624 <get_spinner_position_change+0x5c>
					spinner_position--;
 800161a:	4918      	ldr	r1, [pc, #96]	; (800167c <get_spinner_position_change+0xb4>)
					minuscnt=0;
 800161c:	6462      	str	r2, [r4, #68]	; 0x44
					spinner_position--;
 800161e:	680b      	ldr	r3, [r1, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	600b      	str	r3, [r1, #0]
				spinner_stage = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	e7e7      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <get_spinner_position_change+0xb0>)
 800162c:	f002 fdfa 	bl	8004224 <HAL_GPIO_ReadPin>
 8001630:	2801      	cmp	r0, #1
 8001632:	d1e2      	bne.n	80015fa <get_spinner_position_change+0x32>
				spinner_stage = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e7df      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8001638:	2140      	movs	r1, #64	; 0x40
 800163a:	480f      	ldr	r0, [pc, #60]	; (8001678 <get_spinner_position_change+0xb0>)
 800163c:	f002 fdf2 	bl	8004224 <HAL_GPIO_ReadPin>
 8001640:	2800      	cmp	r0, #0
 8001642:	d1da      	bne.n	80015fa <get_spinner_position_change+0x32>
				pluscnt++;
 8001644:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001646:	3301      	adds	r3, #1
				if(pluscnt>=2){
 8001648:	2b01      	cmp	r3, #1
				minuscnt=0;
 800164a:	e9c4 0311 	strd	r0, r3, [r4, #68]	; 0x44
				if(pluscnt>=2){
 800164e:	d904      	bls.n	800165a <get_spinner_position_change+0x92>
					spinner_position++;
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <get_spinner_position_change+0xb4>)
					pluscnt=0;
 8001652:	64a0      	str	r0, [r4, #72]	; 0x48
					spinner_position++;
 8001654:	6813      	ldr	r3, [r2, #0]
 8001656:	3301      	adds	r3, #1
 8001658:	6013      	str	r3, [r2, #0]
				spinner_stage = 4;
 800165a:	2304      	movs	r3, #4
 800165c:	e7cc      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <get_spinner_position_change+0xb0>)
 8001662:	f002 fddf 	bl	8004224 <HAL_GPIO_ReadPin>
 8001666:	2801      	cmp	r0, #1
 8001668:	d1c7      	bne.n	80015fa <get_spinner_position_change+0x32>
				spinner_stage = 5;
 800166a:	2305      	movs	r3, #5
 800166c:	e7c4      	b.n	80015f8 <get_spinner_position_change+0x30>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	e7db      	b.n	800162a <get_spinner_position_change+0x62>
 8001672:	bf00      	nop
 8001674:	20005978 	.word	0x20005978
 8001678:	40020800 	.word	0x40020800
 800167c:	20000014 	.word	0x20000014

08001680 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8001680:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	2210      	movs	r2, #16
 8001684:	2100      	movs	r1, #0
 8001686:	a802      	add	r0, sp, #8
 8001688:	f00c ffe6 	bl	800e658 <memset>

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800168c:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001690:	a901      	add	r1, sp, #4
 8001692:	4804      	ldr	r0, [pc, #16]	; (80016a4 <switch_GPIO_init+0x24>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001694:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001696:	2301      	movs	r3, #1
 8001698:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800169a:	f002 fcdf 	bl	800405c <HAL_GPIO_Init>
}
 800169e:	b007      	add	sp, #28
 80016a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a4:	40021400 	.word	0x40021400

080016a8 <get_current_switch_state>:

void get_current_switch_state(){
 80016a8:	b508      	push	{r3, lr}
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 80016aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ae:	4804      	ldr	r0, [pc, #16]	; (80016c0 <get_current_switch_state+0x18>)
 80016b0:	f002 fdb8 	bl	8004224 <HAL_GPIO_ReadPin>
	if(val == GPIO_PIN_SET){
 80016b4:	3801      	subs	r0, #1
 80016b6:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <get_current_switch_state+0x1c>)
 80016b8:	bf18      	it	ne
 80016ba:	2001      	movne	r0, #1
 80016bc:	64d8      	str	r0, [r3, #76]	; 0x4c
		switch_state = 0;
	}else{
		switch_state = 1;
	}
}
 80016be:	bd08      	pop	{r3, pc}
 80016c0:	40021400 	.word	0x40021400
 80016c4:	20005978 	.word	0x20005978

080016c8 <print_fat_rectangle>:

uint32_t state_progress = 0;
uint32_t mem_sp_st = 0; // memorized spinner position for diff
uint32_t system_angle = 180;

void print_fat_rectangle(){
 80016c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint32_t x = 80;
	uint32_t y = 80;
	uint32_t width = 320;
 80016ca:	f44f 75a0 	mov.w	r5, #320	; 0x140
	uint32_t x = 80;
 80016ce:	2450      	movs	r4, #80	; 0x50
	uint32_t height = 100;
	for(uint8_t i = 0; i < 6; i++){
		print_rectangle_empty(x, y, width, height, 0xFF00FFFF);
 80016d0:	f46f 067f 	mvn.w	r6, #16711680	; 0xff0000
 80016d4:	4621      	mov	r1, r4
 80016d6:	4620      	mov	r0, r4
		x++;
 80016d8:	3401      	adds	r4, #1
		print_rectangle_empty(x, y, width, height, 0xFF00FFFF);
 80016da:	f1a5 03dc 	sub.w	r3, r5, #220	; 0xdc
 80016de:	462a      	mov	r2, r5
 80016e0:	9600      	str	r6, [sp, #0]
 80016e2:	f7ff fb01 	bl	8000ce8 <print_rectangle_empty>
	for(uint8_t i = 0; i < 6; i++){
 80016e6:	2c56      	cmp	r4, #86	; 0x56
		y++;
		width -= 2;
 80016e8:	f1a5 0502 	sub.w	r5, r5, #2
	for(uint8_t i = 0; i < 6; i++){
 80016ec:	d1f2      	bne.n	80016d4 <print_fat_rectangle+0xc>
		height -= 2;
	}
}
 80016ee:	b002      	add	sp, #8
 80016f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080016f4 <state_machine>:





void state_machine(){
 80016f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t kbd_st = keyboard_state;
 80016f8:	4c8c      	ldr	r4, [pc, #560]	; (800192c <state_machine+0x238>)
	uint32_t sp_st = spinner_position;


	static uint32_t state_time = 0;

	switch(system_state){
 80016fa:	e9d4 7313 	ldrd	r7, r3, [r4, #76]	; 0x4c
	uint32_t kbd_st = keyboard_state;
 80016fe:	8ea5      	ldrh	r5, [r4, #52]	; 0x34
	switch(system_state){
 8001700:	2b11      	cmp	r3, #17
 8001702:	d822      	bhi.n	800174a <state_machine+0x56>
 8001704:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001708:	00240012 	.word	0x00240012
 800170c:	00880066 	.word	0x00880066
 8001710:	00f200a6 	.word	0x00f200a6
 8001714:	0165011a 	.word	0x0165011a
 8001718:	020f01c4 	.word	0x020f01c4
 800171c:	0244022a 	.word	0x0244022a
 8001720:	0288025a 	.word	0x0288025a
 8001724:	02b702a0 	.word	0x02b702a0
 8001728:	02e502ce 	.word	0x02e502ce
		case 0:{
			if(need_out){
 800172c:	4d80      	ldr	r5, [pc, #512]	; (8001930 <state_machine+0x23c>)
 800172e:	686b      	ldr	r3, [r5, #4]
 8001730:	b123      	cbz	r3, 800173c <state_machine+0x48>
				fill_screen(0);
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fce8 	bl	8001108 <fill_screen>
				need_out = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	606b      	str	r3, [r5, #4]
			}


			if(sw_st){
 800173c:	b12f      	cbz	r7, 800174a <state_machine+0x56>
				system_state = 1;
 800173e:	2301      	movs	r3, #1
 8001740:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 8001742:	606b      	str	r3, [r5, #4]

				state_time = tick_fun();
 8001744:	f004 fd6c 	bl	8006220 <xTaskGetTickCount>
 8001748:	6560      	str	r0, [r4, #84]	; 0x54
			check_brightness();
			check_switch();
			break;			
		}																				
	}
}
 800174a:	b002      	add	sp, #8
 800174c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if(need_out){
 8001750:	4e77      	ldr	r6, [pc, #476]	; (8001930 <state_machine+0x23c>)
 8001752:	6873      	ldr	r3, [r6, #4]
 8001754:	b183      	cbz	r3, 8001778 <state_machine+0x84>
				fill_screen(0);
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fcd6 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 800175c:	f7ff ffb4 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state1_string, 0xFF00FFFF, 2);
 8001760:	2302      	movs	r3, #2
 8001762:	f106 0208 	add.w	r2, r6, #8
 8001766:	2178      	movs	r1, #120	; 0x78
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2073      	movs	r0, #115	; 0x73
 800176c:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001770:	f7ff fcb0 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	6073      	str	r3, [r6, #4]
			if(tick_fun() - state_time >= 1000){
 8001778:	f004 fd52 	bl	8006220 <xTaskGetTickCount>
 800177c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800177e:	1ac0      	subs	r0, r0, r3
 8001780:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001784:	d306      	bcc.n	8001794 <state_machine+0xa0>
				system_state = 2;
 8001786:	2302      	movs	r3, #2
 8001788:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	6073      	str	r3, [r6, #4]
				state_time = tick_fun();
 800178e:	f004 fd47 	bl	8006220 <xTaskGetTickCount>
 8001792:	6560      	str	r0, [r4, #84]	; 0x54
			check_brightness();
 8001794:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001796:	b98b      	cbnz	r3, 80017bc <state_machine+0xc8>
 8001798:	2201      	movs	r2, #1
 800179a:	65a2      	str	r2, [r4, #88]	; 0x58
 800179c:	066a      	lsls	r2, r5, #25
 800179e:	d50f      	bpl.n	80017c0 <state_machine+0xcc>
 80017a0:	69f2      	ldr	r2, [r6, #28]
 80017a2:	4864      	ldr	r0, [pc, #400]	; (8001934 <state_machine+0x240>)
 80017a4:	2a02      	cmp	r2, #2
 80017a6:	bf18      	it	ne
 80017a8:	1c53      	addne	r3, r2, #1
 80017aa:	61f3      	str	r3, [r6, #28]
 80017ac:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <state_machine+0x244>)
 80017b2:	6a31      	ldr	r1, [r6, #32]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f002 fe60 	bl	800447a <HAL_LTDC_SetAlpha>
 80017ba:	e001      	b.n	80017c0 <state_machine+0xcc>
			check_brightness();
 80017bc:	2300      	movs	r3, #0
 80017be:	65a3      	str	r3, [r4, #88]	; 0x58
			check_switch();
 80017c0:	2f00      	cmp	r7, #0
 80017c2:	d1c2      	bne.n	800174a <state_machine+0x56>
 80017c4:	2300      	movs	r3, #0
 80017c6:	22b4      	movs	r2, #180	; 0xb4
 80017c8:	6523      	str	r3, [r4, #80]	; 0x50
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <state_machine+0x23c>)
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017ce:	2201      	movs	r2, #1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e7ba      	b.n	800174a <state_machine+0x56>
			if(need_out){
 80017d4:	4e56      	ldr	r6, [pc, #344]	; (8001930 <state_machine+0x23c>)
 80017d6:	6873      	ldr	r3, [r6, #4]
 80017d8:	b183      	cbz	r3, 80017fc <state_machine+0x108>
				fill_screen(0);
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff fc94 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 80017e0:	f7ff ff72 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state2_string, 0xFF00FFFF, 2);
 80017e4:	2302      	movs	r3, #2
 80017e6:	f106 0230 	add.w	r2, r6, #48	; 0x30
 80017ea:	2178      	movs	r1, #120	; 0x78
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2073      	movs	r0, #115	; 0x73
 80017f0:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 80017f4:	f7ff fc6e 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	6073      	str	r3, [r6, #4]
			if(tick_fun() - state_time >= 1000){
 80017fc:	f004 fd10 	bl	8006220 <xTaskGetTickCount>
 8001800:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001802:	1ac0      	subs	r0, r0, r3
 8001804:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001808:	d3c4      	bcc.n	8001794 <state_machine+0xa0>
				system_state = 3;
 800180a:	2303      	movs	r3, #3
 800180c:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	6073      	str	r3, [r6, #4]
				state_time = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	6563      	str	r3, [r4, #84]	; 0x54
			check_brightness();
 8001816:	e7bd      	b.n	8001794 <state_machine+0xa0>
			if(need_out){
 8001818:	4e45      	ldr	r6, [pc, #276]	; (8001930 <state_machine+0x23c>)
 800181a:	6873      	ldr	r3, [r6, #4]
 800181c:	b183      	cbz	r3, 8001840 <state_machine+0x14c>
				fill_screen(0);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fc72 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001824:	f7ff ff50 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(90, 120, state3_string, 0xFF00FFFF, 2);
 8001828:	2302      	movs	r3, #2
 800182a:	f106 0246 	add.w	r2, r6, #70	; 0x46
 800182e:	2178      	movs	r1, #120	; 0x78
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	205a      	movs	r0, #90	; 0x5a
 8001834:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001838:	f7ff fc4c 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	6073      	str	r3, [r6, #4]
			if(kbd_st & BUTTON_TEST){
 8001840:	07e8      	lsls	r0, r5, #31
 8001842:	d5a7      	bpl.n	8001794 <state_machine+0xa0>
				state_progress = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 8001848:	6563      	str	r3, [r4, #84]	; 0x54
				system_state = 4;
 800184a:	2304      	movs	r3, #4
 800184c:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	6073      	str	r3, [r6, #4]
			check_brightness();
 8001852:	e79f      	b.n	8001794 <state_machine+0xa0>
			if(need_out){
 8001854:	4e36      	ldr	r6, [pc, #216]	; (8001930 <state_machine+0x23c>)
 8001856:	6873      	ldr	r3, [r6, #4]
 8001858:	b1d3      	cbz	r3, 8001890 <state_machine+0x19c>
				fill_screen(0);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fc54 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001860:	f7ff ff32 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled(185, 105, state4_string, 0xFF00FFFF, 2);
 8001864:	2302      	movs	r3, #2
 8001866:	f106 0260 	add.w	r2, r6, #96	; 0x60
 800186a:	2169      	movs	r1, #105	; 0x69
 800186c:	20b9      	movs	r0, #185	; 0xb9
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001874:	f7ff fc0f 	bl	8001096 <print_string_scaled>
				print_rectangle_empty(100, 150, 280, 10, 0xFF00FFFF);
 8001878:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 800187c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001880:	2196      	movs	r1, #150	; 0x96
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2064      	movs	r0, #100	; 0x64
 8001886:	230a      	movs	r3, #10
 8001888:	f7ff fa2e 	bl	8000ce8 <print_rectangle_empty>
				need_out = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	6073      	str	r3, [r6, #4]
			if(!state_time){state_time = tick_fun();}else{
 8001890:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001892:	b9f3      	cbnz	r3, 80018d2 <state_machine+0x1de>
 8001894:	f004 fcc4 	bl	8006220 <xTaskGetTickCount>
 8001898:	6560      	str	r0, [r4, #84]	; 0x54
			if(state_progress){
 800189a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800189c:	2a00      	cmp	r2, #0
 800189e:	f43f af79 	beq.w	8001794 <state_machine+0xa0>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0xFF00FFFF);
 80018a2:	230a      	movs	r3, #10
 80018a4:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 80018a8:	2064      	movs	r0, #100	; 0x64
 80018aa:	9100      	str	r1, [sp, #0]
 80018ac:	211c      	movs	r1, #28
 80018ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80018b2:	434a      	muls	r2, r1
 80018b4:	2196      	movs	r1, #150	; 0x96
 80018b6:	f7ff f9fe 	bl	8000cb6 <print_rectangle>
			if(state_progress == 100){
 80018ba:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018bc:	2b64      	cmp	r3, #100	; 0x64
 80018be:	f47f af69 	bne.w	8001794 <state_machine+0xa0>
				state_progress = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 80018c6:	6563      	str	r3, [r4, #84]	; 0x54
				need_out = 1;
 80018c8:	2301      	movs	r3, #1
 80018ca:	6073      	str	r3, [r6, #4]
				system_state = 5;
 80018cc:	2305      	movs	r3, #5
			check_data();
 80018ce:	6523      	str	r3, [r4, #80]	; 0x50
 80018d0:	e760      	b.n	8001794 <state_machine+0xa0>
				if(tick_fun() - state_time >= 300){
 80018d2:	f004 fca5 	bl	8006220 <xTaskGetTickCount>
 80018d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018d8:	1ac0      	subs	r0, r0, r3
 80018da:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80018de:	d3dc      	bcc.n	800189a <state_machine+0x1a6>
					state_time = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	6563      	str	r3, [r4, #84]	; 0x54
					state_progress += 10;
 80018e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80018e6:	330a      	adds	r3, #10
 80018e8:	65e3      	str	r3, [r4, #92]	; 0x5c
 80018ea:	e7d6      	b.n	800189a <state_machine+0x1a6>
			if(need_out){
 80018ec:	4e10      	ldr	r6, [pc, #64]	; (8001930 <state_machine+0x23c>)
 80018ee:	6873      	ldr	r3, [r6, #4]
 80018f0:	b183      	cbz	r3, 8001914 <state_machine+0x220>
				fill_screen(0);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fc08 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 80018f8:	f7ff fee6 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(120, 120, state5_string, 0xFF00FFFF, 2);
 80018fc:	2302      	movs	r3, #2
 80018fe:	2178      	movs	r1, #120	; 0x78
 8001900:	f106 0265 	add.w	r2, r6, #101	; 0x65
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 800190a:	4608      	mov	r0, r1
 800190c:	f7ff fbe2 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	6073      	str	r3, [r6, #4]
			if(kbd_st & BUTTON_CALIBRATION){
 8001914:	0729      	lsls	r1, r5, #28
 8001916:	f57f af3d 	bpl.w	8001794 <state_machine+0xa0>
				system_state = 6;
 800191a:	2306      	movs	r3, #6
 800191c:	6523      	str	r3, [r4, #80]	; 0x50
				need_out = 1;
 800191e:	2301      	movs	r3, #1
 8001920:	6073      	str	r3, [r6, #4]
				state_time = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	6563      	str	r3, [r4, #84]	; 0x54
				state_progress = 0;
 8001926:	65e3      	str	r3, [r4, #92]	; 0x5c
			check_brightness();
 8001928:	e734      	b.n	8001794 <state_machine+0xa0>
 800192a:	bf00      	nop
 800192c:	20005978 	.word	0x20005978
 8001930:	20000014 	.word	0x20000014
 8001934:	2000991c 	.word	0x2000991c
 8001938:	200099c4 	.word	0x200099c4
			if(need_out){
 800193c:	4ec1      	ldr	r6, [pc, #772]	; (8001c44 <state_machine+0x550>)
 800193e:	6873      	ldr	r3, [r6, #4]
 8001940:	b1d3      	cbz	r3, 8001978 <state_machine+0x284>
				fill_screen(0);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff fbe0 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001948:	f7ff febe 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state6_string, 0xFF00FFFF, 2);
 800194c:	2302      	movs	r3, #2
 800194e:	f106 027a 	add.w	r2, r6, #122	; 0x7a
 8001952:	2164      	movs	r1, #100	; 0x64
 8001954:	20b4      	movs	r0, #180	; 0xb4
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 800195c:	f7ff fbba 	bl	80010d4 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0xFF00FFFF);
 8001960:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001964:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001968:	2196      	movs	r1, #150	; 0x96
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	230a      	movs	r3, #10
 8001970:	f7ff f9ba 	bl	8000ce8 <print_rectangle_empty>
				need_out = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	6073      	str	r3, [r6, #4]
			if(!state_time){state_time = tick_fun();}else{
 8001978:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800197a:	b9eb      	cbnz	r3, 80019b8 <state_machine+0x2c4>
 800197c:	f004 fc50 	bl	8006220 <xTaskGetTickCount>
 8001980:	6560      	str	r0, [r4, #84]	; 0x54
			if(state_progress){
 8001982:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001984:	2a00      	cmp	r2, #0
 8001986:	f43f af05 	beq.w	8001794 <state_machine+0xa0>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0xFF00FFFF);
 800198a:	230a      	movs	r3, #10
 800198c:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	9100      	str	r1, [sp, #0]
 8001994:	211c      	movs	r1, #28
 8001996:	fbb2 f2f3 	udiv	r2, r2, r3
 800199a:	434a      	muls	r2, r1
 800199c:	2196      	movs	r1, #150	; 0x96
 800199e:	f7ff f98a 	bl	8000cb6 <print_rectangle>
			if(state_progress == 100){
 80019a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019a4:	2b64      	cmp	r3, #100	; 0x64
 80019a6:	f47f aef5 	bne.w	8001794 <state_machine+0xa0>
				state_progress = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 80019ae:	6563      	str	r3, [r4, #84]	; 0x54
				need_out = 1;
 80019b0:	2301      	movs	r3, #1
 80019b2:	6073      	str	r3, [r6, #4]
				system_state = 7;
 80019b4:	2307      	movs	r3, #7
 80019b6:	e78a      	b.n	80018ce <state_machine+0x1da>
				if(tick_fun() - state_time >= 300){
 80019b8:	f004 fc32 	bl	8006220 <xTaskGetTickCount>
 80019bc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80019be:	1ac0      	subs	r0, r0, r3
 80019c0:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80019c4:	d3dd      	bcc.n	8001982 <state_machine+0x28e>
					state_time = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	6563      	str	r3, [r4, #84]	; 0x54
					state_progress += 10;
 80019ca:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80019cc:	330a      	adds	r3, #10
 80019ce:	65e3      	str	r3, [r4, #92]	; 0x5c
 80019d0:	e7d7      	b.n	8001982 <state_machine+0x28e>
	uint32_t sp_st = spinner_position;
 80019d2:	4e9c      	ldr	r6, [pc, #624]	; (8001c44 <state_machine+0x550>)
	uint32_t spb_st = spinner_button_state;
 80019d4:	f8d4 903c 	ldr.w	r9, [r4, #60]	; 0x3c
			if(need_out){
 80019d8:	e9d6 8300 	ldrd	r8, r3, [r6]
 80019dc:	b1db      	cbz	r3, 8001a16 <state_machine+0x322>
				print_string_scaled_y(110, 90, state7_string, 0xFF00FFFF, 2);	
 80019de:	f04f 0a02 	mov.w	sl, #2
				fill_screen(0);
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fb90 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 80019e8:	f7ff fe6e 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(110, 90, state7_string, 0xFF00FFFF, 2);	
 80019ec:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 80019f0:	f106 0285 	add.w	r2, r6, #133	; 0x85
 80019f4:	215a      	movs	r1, #90	; 0x5a
 80019f6:	206e      	movs	r0, #110	; 0x6e
 80019f8:	f8cd a000 	str.w	sl, [sp]
 80019fc:	f7ff fb6a 	bl	80010d4 <print_string_scaled_y>
				print_number(180, 130, system_angle, 0xFF00FFFF, 2);
 8001a00:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001a04:	f8cd a000 	str.w	sl, [sp]
 8001a08:	2182      	movs	r1, #130	; 0x82
 8001a0a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a0c:	20b4      	movs	r0, #180	; 0xb4
 8001a0e:	f7ff fb88 	bl	8001122 <print_number>
				need_out = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	6073      	str	r3, [r6, #4]
			if(!mem_sp_st){
 8001a16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a18:	b95b      	cbnz	r3, 8001a32 <state_machine+0x33e>
					mem_sp_st = 0;
 8001a1a:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
			if(spb_st){
 8001a1e:	f1b9 0f00 	cmp.w	r9, #0
 8001a22:	f43f aeb7 	beq.w	8001794 <state_machine+0xa0>
				mem_sp_st = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	6623      	str	r3, [r4, #96]	; 0x60
				need_out = 1;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	6073      	str	r3, [r6, #4]
				system_state = 8;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	e74d      	b.n	80018ce <state_machine+0x1da>
				if(mem_sp_st > sp_st){
 8001a32:	4543      	cmp	r3, r8
 8001a34:	d91b      	bls.n	8001a6e <state_machine+0x37a>
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001a36:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a38:	eba3 0308 	sub.w	r3, r3, r8
					print_rectangle(180, 130, 100, 40, 0);
 8001a3c:	f04f 0800 	mov.w	r8, #0
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001a40:	ebb2 0343 	subs.w	r3, r2, r3, lsl #1
					print_rectangle(180, 130, 100, 40, 0);
 8001a44:	f04f 0264 	mov.w	r2, #100	; 0x64
						system_angle -= (mem_sp_st - sp_st)*2;
 8001a48:	bf58      	it	pl
 8001a4a:	62f3      	strpl	r3, [r6, #44]	; 0x2c
					print_rectangle(180, 130, 100, 40, 0);
 8001a4c:	2328      	movs	r3, #40	; 0x28
 8001a4e:	f8cd 8000 	str.w	r8, [sp]
					print_rectangle(180, 130, 20, 20, 0);
 8001a52:	2182      	movs	r1, #130	; 0x82
 8001a54:	20b4      	movs	r0, #180	; 0xb4
 8001a56:	f7ff f92e 	bl	8000cb6 <print_rectangle>
					print_number(180, 130, system_angle, 0xFF00FFFF, 2);
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	2182      	movs	r1, #130	; 0x82
 8001a5e:	20b4      	movs	r0, #180	; 0xb4
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001a66:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a68:	f7ff fb5b 	bl	8001122 <print_number>
 8001a6c:	e7d5      	b.n	8001a1a <state_machine+0x326>
				}else if(mem_sp_st < sp_st){
 8001a6e:	d2d6      	bcs.n	8001a1e <state_machine+0x32a>
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001a70:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8001a72:	eba8 0303 	sub.w	r3, r8, r3
					print_rectangle(180, 130, 20, 20, 0);
 8001a76:	f04f 0800 	mov.w	r8, #0
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001a7a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001a7e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
						system_angle += (sp_st - mem_sp_st)*2;
 8001a82:	bf98      	it	ls
 8001a84:	62f3      	strls	r3, [r6, #44]	; 0x2c
					print_rectangle(180, 130, 20, 20, 0);
 8001a86:	2314      	movs	r3, #20
 8001a88:	f8cd 8000 	str.w	r8, [sp]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	e7e0      	b.n	8001a52 <state_machine+0x35e>
			if(need_out){
 8001a90:	4e6c      	ldr	r6, [pc, #432]	; (8001c44 <state_machine+0x550>)
 8001a92:	6873      	ldr	r3, [r6, #4]
 8001a94:	b1d3      	cbz	r3, 8001acc <state_machine+0x3d8>
				fill_screen(0);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fb36 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001a9c:	f7ff fe14 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state8_string, 0xFF00FFFF, 2);
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	f106 029c 	add.w	r2, r6, #156	; 0x9c
 8001aa6:	2164      	movs	r1, #100	; 0x64
 8001aa8:	20b4      	movs	r0, #180	; 0xb4
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ab0:	f7ff fb10 	bl	80010d4 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0xFF00FFFF);
 8001ab4:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ab8:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001abc:	2196      	movs	r1, #150	; 0x96
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2064      	movs	r0, #100	; 0x64
 8001ac2:	230a      	movs	r3, #10
 8001ac4:	f7ff f910 	bl	8000ce8 <print_rectangle_empty>
				need_out = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	6073      	str	r3, [r6, #4]
			if(!state_time){state_time = tick_fun();}else{
 8001acc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ace:	b9eb      	cbnz	r3, 8001b0c <state_machine+0x418>
 8001ad0:	f004 fba6 	bl	8006220 <xTaskGetTickCount>
 8001ad4:	6560      	str	r0, [r4, #84]	; 0x54
			if(state_progress){
 8001ad6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ad8:	2a00      	cmp	r2, #0
 8001ada:	f43f ae5b 	beq.w	8001794 <state_machine+0xa0>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0xFF00FFFF);
 8001ade:	230a      	movs	r3, #10
 8001ae0:	f46f 017f 	mvn.w	r1, #16711680	; 0xff0000
 8001ae4:	2064      	movs	r0, #100	; 0x64
 8001ae6:	9100      	str	r1, [sp, #0]
 8001ae8:	211c      	movs	r1, #28
 8001aea:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aee:	434a      	muls	r2, r1
 8001af0:	2196      	movs	r1, #150	; 0x96
 8001af2:	f7ff f8e0 	bl	8000cb6 <print_rectangle>
			if(state_progress == 100){
 8001af6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	f47f ae4b 	bne.w	8001794 <state_machine+0xa0>
				state_progress = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	65e3      	str	r3, [r4, #92]	; 0x5c
				state_time = 0;
 8001b02:	6563      	str	r3, [r4, #84]	; 0x54
				need_out = 1;
 8001b04:	2301      	movs	r3, #1
 8001b06:	6073      	str	r3, [r6, #4]
				system_state = 9;
 8001b08:	2309      	movs	r3, #9
 8001b0a:	e6e0      	b.n	80018ce <state_machine+0x1da>
				if(tick_fun() - state_time >= 300){
 8001b0c:	f004 fb88 	bl	8006220 <xTaskGetTickCount>
 8001b10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b12:	1ac0      	subs	r0, r0, r3
 8001b14:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8001b18:	d3dd      	bcc.n	8001ad6 <state_machine+0x3e2>
					state_time = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6563      	str	r3, [r4, #84]	; 0x54
					state_progress += 10;
 8001b1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b20:	330a      	adds	r3, #10
 8001b22:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001b24:	e7d7      	b.n	8001ad6 <state_machine+0x3e2>
			if(need_out){
 8001b26:	4e47      	ldr	r6, [pc, #284]	; (8001c44 <state_machine+0x550>)
 8001b28:	6873      	ldr	r3, [r6, #4]
 8001b2a:	b183      	cbz	r3, 8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff faeb 	bl	8001108 <fill_screen>
				print_fat_rectangle();
 8001b32:	f7ff fdc9 	bl	80016c8 <print_fat_rectangle>
				print_string_scaled_y(165, 105, state9_string, 0xFF00FFFF, 2);
 8001b36:	2302      	movs	r3, #2
 8001b38:	f106 02a6 	add.w	r2, r6, #166	; 0xa6
 8001b3c:	2169      	movs	r1, #105	; 0x69
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	20a5      	movs	r0, #165	; 0xa5
 8001b42:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
				print_string_scaled_y(50, 180, state12_string_4, 0xFF00FFFF, 2);
 8001b46:	f7ff fac5 	bl	80010d4 <print_string_scaled_y>
				need_out = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	6073      	str	r3, [r6, #4]
			check_data();
 8001b4e:	07aa      	lsls	r2, r5, #30
 8001b50:	f140 80d6 	bpl.w	8001d00 <state_machine+0x60c>
 8001b54:	2301      	movs	r3, #1
 8001b56:	6073      	str	r3, [r6, #4]
 8001b58:	230a      	movs	r3, #10
 8001b5a:	e6b8      	b.n	80018ce <state_machine+0x1da>
			if(need_out){
 8001b5c:	4e39      	ldr	r6, [pc, #228]	; (8001c44 <state_machine+0x550>)
 8001b5e:	6873      	ldr	r3, [r6, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f4      	beq.n	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff facf 	bl	8001108 <fill_screen>
				print_string(10, 40, state10_string, 0xFF00FFFF);
 8001b6a:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001b6e:	f106 02b4 	add.w	r2, r6, #180	; 0xb4
 8001b72:	2128      	movs	r1, #40	; 0x28
 8001b74:	200a      	movs	r0, #10
 8001b76:	f7ff fa77 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state10_string_2, 0xFF00FFFF, 3);
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	f106 02c8 	add.w	r2, r6, #200	; 0xc8
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
				print_string_scaled(10, 100, state17_string_2, 0xFF00FFFF, 3);
 8001b86:	2164      	movs	r1, #100	; 0x64
 8001b88:	200a      	movs	r0, #10
 8001b8a:	f7ff fa84 	bl	8001096 <print_string_scaled>
 8001b8e:	e7dc      	b.n	8001b4a <state_machine+0x456>
			if(need_out){
 8001b90:	4e2c      	ldr	r6, [pc, #176]	; (8001c44 <state_machine+0x550>)
 8001b92:	6873      	ldr	r3, [r6, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0da      	beq.n	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f7ff fab5 	bl	8001108 <fill_screen>
				print_string(10, 40, state11_string, 0xFF00FFFF);
 8001b9e:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ba2:	f106 02d1 	add.w	r2, r6, #209	; 0xd1
 8001ba6:	2128      	movs	r1, #40	; 0x28
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f7ff fa5d 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state11_string_2, 0xFF00FFFF, 3);
 8001bae:	2303      	movs	r3, #3
 8001bb0:	f106 02f0 	add.w	r2, r6, #240	; 0xf0
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001bba:	e7e4      	b.n	8001b86 <state_machine+0x492>
			if(need_out){
 8001bbc:	4e21      	ldr	r6, [pc, #132]	; (8001c44 <state_machine+0x550>)
 8001bbe:	6873      	ldr	r3, [r6, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0c4      	beq.n	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001bc4:	2000      	movs	r0, #0
				print_string_scaled_y(10, 145, state12_string_3, 0xFF00FFFF, 2);
 8001bc6:	f04f 0802 	mov.w	r8, #2
				fill_screen(0);
 8001bca:	f7ff fa9d 	bl	8001108 <fill_screen>
				print_string(10, 40, state12_string, 0xFF00FFFF);
 8001bce:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001bd2:	f106 02f9 	add.w	r2, r6, #249	; 0xf9
 8001bd6:	2128      	movs	r1, #40	; 0x28
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f7ff fa45 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state12_string_2, 0xFF00FFFF, 3);
 8001bde:	2303      	movs	r3, #3
 8001be0:	f206 121b 	addw	r2, r6, #283	; 0x11b
 8001be4:	2164      	movs	r1, #100	; 0x64
 8001be6:	200a      	movs	r0, #10
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001bee:	f7ff fa52 	bl	8001096 <print_string_scaled>
				print_string_scaled_y(10, 145, state12_string_3, 0xFF00FFFF, 2);
 8001bf2:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001bf6:	f506 7294 	add.w	r2, r6, #296	; 0x128
 8001bfa:	2191      	movs	r1, #145	; 0x91
 8001bfc:	200a      	movs	r0, #10
 8001bfe:	f8cd 8000 	str.w	r8, [sp]
 8001c02:	f7ff fa67 	bl	80010d4 <print_string_scaled_y>
				print_string_scaled_y(50, 180, state12_string_4, 0xFF00FFFF, 2);
 8001c06:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c0a:	f206 123f 	addw	r2, r6, #319	; 0x13f
 8001c0e:	21b4      	movs	r1, #180	; 0xb4
 8001c10:	2032      	movs	r0, #50	; 0x32
 8001c12:	f8cd 8000 	str.w	r8, [sp]
 8001c16:	e796      	b.n	8001b46 <state_machine+0x452>
			if(need_out){
 8001c18:	4e0a      	ldr	r6, [pc, #40]	; (8001c44 <state_machine+0x550>)
 8001c1a:	6873      	ldr	r3, [r6, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d096      	beq.n	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fa71 	bl	8001108 <fill_screen>
				print_string(10, 40, state13_string, 0xFF00FFFF);
 8001c26:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c2a:	f506 72aa 	add.w	r2, r6, #340	; 0x154
 8001c2e:	2128      	movs	r1, #40	; 0x28
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7ff fa19 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state13_string_2, 0xFF00FFFF, 3);
 8001c36:	2303      	movs	r3, #3
 8001c38:	f206 1271 	addw	r2, r6, #369	; 0x171
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c42:	e7a0      	b.n	8001b86 <state_machine+0x492>
 8001c44:	20000014 	.word	0x20000014
			if(need_out){
 8001c48:	4e43      	ldr	r6, [pc, #268]	; (8001d58 <state_machine+0x664>)
 8001c4a:	6873      	ldr	r3, [r6, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f43f af7e 	beq.w	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fa58 	bl	8001108 <fill_screen>
				print_string(10, 40, state14_string, 0xFF00FFFF);
 8001c58:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c5c:	f506 72bd 	add.w	r2, r6, #378	; 0x17a
 8001c60:	2128      	movs	r1, #40	; 0x28
 8001c62:	200a      	movs	r0, #10
 8001c64:	f7ff fa00 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state14_string_2, 0xFF00FFFF, 3);
 8001c68:	2303      	movs	r3, #3
 8001c6a:	f506 72c6 	add.w	r2, r6, #396	; 0x18c
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c74:	e787      	b.n	8001b86 <state_machine+0x492>
			if(need_out){
 8001c76:	4e38      	ldr	r6, [pc, #224]	; (8001d58 <state_machine+0x664>)
 8001c78:	6873      	ldr	r3, [r6, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f43f af67 	beq.w	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fa41 	bl	8001108 <fill_screen>
				print_string(10, 40, state15_string, 0xFF00FFFF);
 8001c86:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001c8a:	f506 72ca 	add.w	r2, r6, #404	; 0x194
 8001c8e:	2128      	movs	r1, #40	; 0x28
 8001c90:	200a      	movs	r0, #10
 8001c92:	f7ff f9e9 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state15_string_2, 0xFF00FFFF, 2);
 8001c96:	2302      	movs	r3, #2
 8001c98:	f206 12a9 	addw	r2, r6, #425	; 0x1a9
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ca2:	e770      	b.n	8001b86 <state_machine+0x492>
			if(need_out){
 8001ca4:	4e2c      	ldr	r6, [pc, #176]	; (8001d58 <state_machine+0x664>)
 8001ca6:	6873      	ldr	r3, [r6, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f43f af50 	beq.w	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff fa2a 	bl	8001108 <fill_screen>
				print_string(10, 40, state16_string, 0xFF00FFFF);
 8001cb4:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001cb8:	f206 12b9 	addw	r2, r6, #441	; 0x1b9
 8001cbc:	2128      	movs	r1, #40	; 0x28
 8001cbe:	200a      	movs	r0, #10
 8001cc0:	f7ff f9d2 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state16_string_2, 0xFF00FFFF, 3);
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f206 12cd 	addw	r2, r6, #461	; 0x1cd
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001cd0:	e759      	b.n	8001b86 <state_machine+0x492>
			if(need_out){
 8001cd2:	4e21      	ldr	r6, [pc, #132]	; (8001d58 <state_machine+0x664>)
 8001cd4:	6873      	ldr	r3, [r6, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f43f af39 	beq.w	8001b4e <state_machine+0x45a>
				fill_screen(0);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7ff fa13 	bl	8001108 <fill_screen>
				print_string(10, 40, state17_string, 0xFF00FFFF);
 8001ce2:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001ce6:	f206 12d5 	addw	r2, r6, #469	; 0x1d5
 8001cea:	2128      	movs	r1, #40	; 0x28
 8001cec:	200a      	movs	r0, #10
 8001cee:	f7ff f9bb 	bl	8001068 <print_string>
				print_string_scaled(10, 100, state17_string_2, 0xFF00FFFF, 3);
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f206 12f7 	addw	r2, r6, #503	; 0x1f7
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	f46f 037f 	mvn.w	r3, #16711680	; 0xff0000
 8001cfe:	e742      	b.n	8001b86 <state_machine+0x492>
			check_data();
 8001d00:	06eb      	lsls	r3, r5, #27
 8001d02:	d503      	bpl.n	8001d0c <state_machine+0x618>
 8001d04:	2301      	movs	r3, #1
 8001d06:	6073      	str	r3, [r6, #4]
 8001d08:	230b      	movs	r3, #11
 8001d0a:	e5e0      	b.n	80018ce <state_machine+0x1da>
 8001d0c:	0628      	lsls	r0, r5, #24
 8001d0e:	d503      	bpl.n	8001d18 <state_machine+0x624>
 8001d10:	2301      	movs	r3, #1
 8001d12:	6073      	str	r3, [r6, #4]
 8001d14:	230c      	movs	r3, #12
 8001d16:	e5da      	b.n	80018ce <state_machine+0x1da>
 8001d18:	0569      	lsls	r1, r5, #21
 8001d1a:	d503      	bpl.n	8001d24 <state_machine+0x630>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	6073      	str	r3, [r6, #4]
 8001d20:	230d      	movs	r3, #13
 8001d22:	e5d4      	b.n	80018ce <state_machine+0x1da>
 8001d24:	076a      	lsls	r2, r5, #29
 8001d26:	d503      	bpl.n	8001d30 <state_machine+0x63c>
 8001d28:	2301      	movs	r3, #1
 8001d2a:	6073      	str	r3, [r6, #4]
 8001d2c:	230e      	movs	r3, #14
 8001d2e:	e5ce      	b.n	80018ce <state_machine+0x1da>
 8001d30:	06ab      	lsls	r3, r5, #26
 8001d32:	d503      	bpl.n	8001d3c <state_machine+0x648>
 8001d34:	2301      	movs	r3, #1
 8001d36:	6073      	str	r3, [r6, #4]
 8001d38:	230f      	movs	r3, #15
 8001d3a:	e5c8      	b.n	80018ce <state_machine+0x1da>
 8001d3c:	05e8      	lsls	r0, r5, #23
 8001d3e:	d503      	bpl.n	8001d48 <state_machine+0x654>
 8001d40:	2301      	movs	r3, #1
 8001d42:	6073      	str	r3, [r6, #4]
 8001d44:	2310      	movs	r3, #16
 8001d46:	e5c2      	b.n	80018ce <state_machine+0x1da>
 8001d48:	0529      	lsls	r1, r5, #20
 8001d4a:	f57f ad23 	bpl.w	8001794 <state_machine+0xa0>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	6073      	str	r3, [r6, #4]
 8001d52:	2311      	movs	r3, #17
 8001d54:	e5bb      	b.n	80018ce <state_machine+0x1da>
 8001d56:	bf00      	nop
 8001d58:	20000014 	.word	0x20000014

08001d5c <get_holding_reg_val>:
		return 0;
	}
}


uint16_t get_holding_reg_val(){
 8001d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return keyboard_state | (switch_state << 12) | (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) << 13) | (spinner_button_state << 14) | (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) << 15);
 8001d60:	4f0d      	ldr	r7, [pc, #52]	; (8001d98 <get_holding_reg_val+0x3c>)
 8001d62:	2180      	movs	r1, #128	; 0x80
 8001d64:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8001d9c <get_holding_reg_val+0x40>
 8001d68:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8001d6a:	4640      	mov	r0, r8
 8001d6c:	032d      	lsls	r5, r5, #12
 8001d6e:	b2ae      	uxth	r6, r5
 8001d70:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
 8001d72:	f002 fa57 	bl	8004224 <HAL_GPIO_ReadPin>
 8001d76:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001d78:	2140      	movs	r1, #64	; 0x40
 8001d7a:	ea46 3684 	orr.w	r6, r6, r4, lsl #14
 8001d7e:	4335      	orrs	r5, r6
 8001d80:	ea45 3040 	orr.w	r0, r5, r0, lsl #13
 8001d84:	b284      	uxth	r4, r0
 8001d86:	4640      	mov	r0, r8
 8001d88:	f002 fa4c 	bl	8004224 <HAL_GPIO_ReadPin>
 8001d8c:	ea44 30c0 	orr.w	r0, r4, r0, lsl #15
}
 8001d90:	b280      	uxth	r0, r0
 8001d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d96:	bf00      	nop
 8001d98:	20005978 	.word	0x20005978
 8001d9c:	40020800 	.word	0x40020800

08001da0 <nmbs_crc_calc>:


// 01 03 01 00 00 01 85 f6


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8001da0:	b530      	push	{r4, r5, lr}
 8001da2:	4401      	add	r1, r0
    uint16_t crc = 0xFFFF;
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    for (uint32_t i = 0; i < length; i++) {
        crc ^= (uint16_t) data[i];
        for (int j = 8; j != 0; j--) {
            if ((crc & 0x0001) != 0) {
                crc >>= 1;
                crc ^= 0xA001;
 8001da8:	f24a 0401 	movw	r4, #40961	; 0xa001
    for (uint32_t i = 0; i < length; i++) {
 8001dac:	4288      	cmp	r0, r1
 8001dae:	d102      	bne.n	8001db6 <nmbs_crc_calc+0x16>
            else
                crc >>= 1;
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);	
 8001db0:	ba58      	rev16	r0, r3
}	
 8001db2:	b280      	uxth	r0, r0
 8001db4:	bd30      	pop	{r4, r5, pc}
        crc ^= (uint16_t) data[i];
 8001db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001dba:	4053      	eors	r3, r2
 8001dbc:	2208      	movs	r2, #8
            if ((crc & 0x0001) != 0) {
 8001dbe:	f003 0501 	and.w	r5, r3, #1
                crc >>= 1;
 8001dc2:	085b      	lsrs	r3, r3, #1
            if ((crc & 0x0001) != 0) {
 8001dc4:	b10d      	cbz	r5, 8001dca <nmbs_crc_calc+0x2a>
                crc ^= 0xA001;
 8001dc6:	4063      	eors	r3, r4
 8001dc8:	b29b      	uxth	r3, r3
        for (int j = 8; j != 0; j--) {
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	d1f7      	bne.n	8001dbe <nmbs_crc_calc+0x1e>
 8001dce:	e7ed      	b.n	8001dac <nmbs_crc_calc+0xc>

08001dd0 <mb_process>:


uint16_t mb_process(char* mb_repl_buf, char* mb_req_buf, uint16_t req_buf_len){
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	460d      	mov	r5, r1
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);
 8001dd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd8:	2100      	movs	r1, #0
uint16_t mb_process(char* mb_repl_buf, char* mb_req_buf, uint16_t req_buf_len){
 8001dda:	4604      	mov	r4, r0
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);
 8001ddc:	f00c fc3c 	bl	800e658 <memset>
	char* MB_BUFFER = mb_repl_buf + 7;

	switch(mb_req_buf[1]){
 8001de0:	786b      	ldrb	r3, [r5, #1]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d112      	bne.n	8001e0c <mb_process+0x3c>
		case 3:{
			MB_BUFFER[0] = 1;
 8001de6:	2201      	movs	r2, #1
			MB_BUFFER[1] = 3;
 8001de8:	7223      	strb	r3, [r4, #8]
			MB_BUFFER[2] = 2;
 8001dea:	2302      	movs	r3, #2
			MB_BUFFER[0] = 1;
 8001dec:	71e2      	strb	r2, [r4, #7]
			MB_BUFFER[2] = 2;
 8001dee:	7263      	strb	r3, [r4, #9]

			uint16_t val = get_holding_reg_val();
 8001df0:	f7ff ffb4 	bl	8001d5c <get_holding_reg_val>
			MB_BUFFER[3] = (uint8_t)(val>>8);
			MB_BUFFER[4] = (uint8_t)(val);

			uint16_t crc_answer = nmbs_crc_calc(MB_BUFFER, 3 + 2);
 8001df4:	2105      	movs	r1, #5
			MB_BUFFER[3] = (uint8_t)(val>>8);
 8001df6:	0a03      	lsrs	r3, r0, #8
			MB_BUFFER[4] = (uint8_t)(val);
 8001df8:	72e0      	strb	r0, [r4, #11]
			uint16_t crc_answer = nmbs_crc_calc(MB_BUFFER, 3 + 2);
 8001dfa:	1de0      	adds	r0, r4, #7
			MB_BUFFER[3] = (uint8_t)(val>>8);
 8001dfc:	72a3      	strb	r3, [r4, #10]
			uint16_t crc_answer = nmbs_crc_calc(MB_BUFFER, 3 + 2);
 8001dfe:	f7ff ffcf 	bl	8001da0 <nmbs_crc_calc>

			MB_BUFFER[5] = crc_answer >> 8;
			MB_BUFFER[6] = crc_answer;
 8001e02:	7360      	strb	r0, [r4, #13]
			MB_BUFFER[5] = crc_answer >> 8;
 8001e04:	0a03      	lsrs	r3, r0, #8

			return 7;
 8001e06:	2007      	movs	r0, #7
			MB_BUFFER[5] = crc_answer >> 8;
 8001e08:	7323      	strb	r3, [r4, #12]
		}
		default:{
			return 0;
		}
	}	
}
 8001e0a:	bd38      	pop	{r3, r4, r5, pc}
			return 0;
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	e7fc      	b.n	8001e0a <mb_process+0x3a>

08001e10 <tcp_ether_init>:
char mb_repl_buf[MB_ADU_MAXSIZE];



int tcp_ether_init(){
	conn = netconn_new(NETCONN_TCP);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2010      	movs	r0, #16
int tcp_ether_init(){
 8001e14:	b538      	push	{r3, r4, r5, lr}
	conn = netconn_new(NETCONN_TCP);
 8001e16:	4c0f      	ldr	r4, [pc, #60]	; (8001e54 <tcp_ether_init+0x44>)
 8001e18:	4611      	mov	r1, r2
 8001e1a:	f005 f90b 	bl	8007034 <netconn_new_with_proto_and_callback>
 8001e1e:	6660      	str	r0, [r4, #100]	; 0x64
	if(conn == NULL){return -1;}
 8001e20:	b190      	cbz	r0, 8001e48 <tcp_ether_init+0x38>
	if(netconn_bind(conn, IP_ADDR_ANY, 502) == ERR_OK){
 8001e22:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8001e26:	490c      	ldr	r1, [pc, #48]	; (8001e58 <tcp_ether_init+0x48>)
 8001e28:	f005 f95e 	bl	80070e8 <netconn_bind>
 8001e2c:	b978      	cbnz	r0, 8001e4e <tcp_ether_init+0x3e>
		netconn_listen(conn);
		for(;;){
			int stt = 228;
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8001e2e:	f104 0568 	add.w	r5, r4, #104	; 0x68
		netconn_listen(conn);
 8001e32:	21ff      	movs	r1, #255	; 0xff
 8001e34:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e36:	f005 f97d 	bl	8007134 <netconn_listen_with_backlog>
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8001e3a:	4629      	mov	r1, r5
 8001e3c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e3e:	f005 fa1f 	bl	8007280 <netconn_accept>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d1f9      	bne.n	8001e3a <tcp_ether_init+0x2a>
			}
		}
	}else{
		return -2;
	}
}
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
	if(conn == NULL){return -1;}
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e4c:	e7fb      	b.n	8001e46 <tcp_ether_init+0x36>
		return -2;
 8001e4e:	f06f 0001 	mvn.w	r0, #1
 8001e52:	e7f8      	b.n	8001e46 <tcp_ether_init+0x36>
 8001e54:	20005978 	.word	0x20005978
 8001e58:	080135b0 	.word	0x080135b0

08001e5c <state_ether>:

int ether_state = 0;

void state_ether(){
 8001e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}

	switch(ether_state){
 8001e5e:	4c1a      	ldr	r4, [pc, #104]	; (8001ec8 <state_ether+0x6c>)
 8001e60:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001e62:	b303      	cbz	r3, 8001ea6 <state_ether+0x4a>
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d126      	bne.n	8001eb6 <state_ether+0x5a>
				ether_state = 1;
			}
			break;
		}
		case 1:{
			for(uint32_t i = 0; i < netbuf->p->len; i++){mb_req_buf[i]=((char*)netbuf->p->payload)[i];} // get the message from the client
 8001e68:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8001e6a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8001e6e:	2300      	movs	r3, #0
 8001e70:	6829      	ldr	r1, [r5, #0]
 8001e72:	894a      	ldrh	r2, [r1, #10]
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d320      	bcc.n	8001eba <state_ether+0x5e>
			uint16_t buf_len = netbuf->p->len;
			buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len); // process the data
 8001e78:	4914      	ldr	r1, [pc, #80]	; (8001ecc <state_ether+0x70>)
			netconn_write(newconn, mb_repl_buf, buf_len, NETCONN_COPY); // send the message back to the client
 8001e7a:	2500      	movs	r5, #0
			buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len); // process the data
 8001e7c:	f501 7082 	add.w	r0, r1, #260	; 0x104
 8001e80:	f7ff ffa6 	bl	8001dd0 <mb_process>
			netconn_write(newconn, mb_repl_buf, buf_len, NETCONN_COPY); // send the message back to the client
 8001e84:	2301      	movs	r3, #1
			buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len); // process the data
 8001e86:	4602      	mov	r2, r0
			netconn_write(newconn, mb_repl_buf, buf_len, NETCONN_COPY); // send the message back to the client
 8001e88:	4911      	ldr	r1, [pc, #68]	; (8001ed0 <state_ether+0x74>)
 8001e8a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001e8c:	9500      	str	r5, [sp, #0]
 8001e8e:	f005 f9db 	bl	8007248 <netconn_write_partly>
			if(netbuf_next(netbuf) <= 0){
 8001e92:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e94:	f006 fa84 	bl	80083a0 <netbuf_next>
 8001e98:	42a8      	cmp	r0, r5
 8001e9a:	dc0c      	bgt.n	8001eb6 <state_ether+0x5a>
				netbuf_delete(netbuf);
 8001e9c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e9e:	f006 fa6d 	bl	800837c <netbuf_delete>
				ether_state = 0;
 8001ea2:	66e5      	str	r5, [r4, #108]	; 0x6c
			}
			break;
		}
	}

}
 8001ea4:	e007      	b.n	8001eb6 <state_ether+0x5a>
			if(netconn_recv(newconn, &netbuf) == ERR_OK){
 8001ea6:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8001eaa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001eac:	f005 fb00 	bl	80074b0 <netconn_recv>
 8001eb0:	b908      	cbnz	r0, 8001eb6 <state_ether+0x5a>
				ether_state = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8001eb6:	b003      	add	sp, #12
 8001eb8:	bd30      	pop	{r4, r5, pc}
			for(uint32_t i = 0; i < netbuf->p->len; i++){mb_req_buf[i]=((char*)netbuf->p->payload)[i];} // get the message from the client
 8001eba:	684a      	ldr	r2, [r1, #4]
 8001ebc:	5cd2      	ldrb	r2, [r2, r3]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f800 2b01 	strb.w	r2, [r0], #1
 8001ec4:	e7d4      	b.n	8001e70 <state_ether+0x14>
 8001ec6:	bf00      	nop
 8001ec8:	20005978 	.word	0x20005978
 8001ecc:	200059ec 	.word	0x200059ec
 8001ed0:	20005af0 	.word	0x20005af0

08001ed4 <StartThread>:
  */

static void StartThread(void const * argument)
{
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001ed4:	2100      	movs	r1, #0
  ethernet_link_status_updated(&gnetif);

#if LWIP_NETIF_LINK_CALLBACK
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);

  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001ed6:	4d21      	ldr	r5, [pc, #132]	; (8001f5c <StartThread+0x88>)
{
 8001ed8:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8001eda:	4608      	mov	r0, r1
{
 8001edc:	b08d      	sub	sp, #52	; 0x34
  tcpip_init(NULL, NULL);
 8001ede:	f006 fb55 	bl	800858c <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <StartThread+0x8c>)
 8001ee4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001ee8:	a904      	add	r1, sp, #16
 8001eea:	481e      	ldr	r0, [pc, #120]	; (8001f64 <StartThread+0x90>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001eec:	ac07      	add	r4, sp, #28
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001ef2:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001ef6:	aa05      	add	r2, sp, #20
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001ef8:	33c1      	adds	r3, #193	; 0xc1
 8001efa:	9306      	str	r3, [sp, #24]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <StartThread+0x94>)
 8001efe:	9302      	str	r3, [sp, #8]
 8001f00:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <StartThread+0x98>)
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2300      	movs	r3, #0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	ab06      	add	r3, sp, #24
 8001f0a:	f008 f9b9 	bl	800a280 <netif_add>
  netif_set_default(&gnetif);
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <StartThread+0x90>)
 8001f10:	f008 fa46 	bl	800a3a0 <netif_set_default>
  ethernet_link_status_updated(&gnetif);
 8001f14:	4813      	ldr	r0, [pc, #76]	; (8001f64 <StartThread+0x90>)
 8001f16:	f7fe fbd7 	bl	80006c8 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8001f1a:	4915      	ldr	r1, [pc, #84]	; (8001f70 <StartThread+0x9c>)
 8001f1c:	4811      	ldr	r0, [pc, #68]	; (8001f64 <StartThread+0x90>)
 8001f1e:	f008 fab9 	bl	800a494 <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f26:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8001f28:	a807      	add	r0, sp, #28
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <StartThread+0x90>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8001f2c:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8001f2e:	f004 fc91 	bl	8006854 <osThreadCreate>
  if(tcp_ether_init() != 0){
 8001f32:	f7ff ff6d 	bl	8001e10 <tcp_ether_init>
 8001f36:	b140      	cbz	r0, 8001f4a <StartThread+0x76>
      print_string(10, 10, "ETHERNET FAILURE", 0xFFFF0000);
 8001f38:	4d0e      	ldr	r5, [pc, #56]	; (8001f74 <StartThread+0xa0>)
 8001f3a:	4c0f      	ldr	r4, [pc, #60]	; (8001f78 <StartThread+0xa4>)
 8001f3c:	210a      	movs	r1, #10
 8001f3e:	462b      	mov	r3, r5
 8001f40:	4622      	mov	r2, r4
 8001f42:	4608      	mov	r0, r1
 8001f44:	f7ff f890 	bl	8001068 <print_string>
    for(;;){
 8001f48:	e7f8      	b.n	8001f3c <StartThread+0x68>
    state_machine();
 8001f4a:	f7ff fbd3 	bl	80016f4 <state_machine>
    state_ether();
 8001f4e:	f7ff ff85 	bl	8001e5c <state_ether>
    osDelay(10);
 8001f52:	200a      	movs	r0, #10
 8001f54:	f004 fc9b 	bl	800688e <osDelay>
  for(;;){
 8001f58:	e7f7      	b.n	8001f4a <StartThread+0x76>
 8001f5a:	bf00      	nop
 8001f5c:	0800f874 	.word	0x0800f874
 8001f60:	7b01a8c0 	.word	0x7b01a8c0
 8001f64:	20005bf4 	.word	0x20005bf4
 8001f68:	0800852d 	.word	0x0800852d
 8001f6c:	080008c1 	.word	0x080008c1
 8001f70:	080006c9 	.word	0x080006c9
 8001f74:	ffff0000 	.word	0xffff0000
 8001f78:	080137ea 	.word	0x080137ea

08001f7c <main>:
{
 8001f7c:	b500      	push	{lr}
 8001f7e:	b093      	sub	sp, #76	; 0x4c
  HAL_MPU_Disable();
  
  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x00;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f80:	2400      	movs	r4, #0
  HAL_MPU_Disable();
 8001f82:	f001 f861 	bl	8003048 <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f86:	2301      	movs	r3, #1
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f88:	f240 1501 	movw	r5, #257	; 0x101

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f8c:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f8e:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f92:	f248 731f 	movw	r3, #34591	; 0x871f
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001f96:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0xC0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001f98:	f04f 4640 	mov.w	r6, #3221225472	; 0xc0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001f9c:	e9cd 4307 	strd	r4, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fa0:	f001 f870 	bl	8003084 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <main+0x1d4>)
 8001fa6:	486b      	ldr	r0, [pc, #428]	; (8002154 <main+0x1d8>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fa8:	f8ad 5018 	strh.w	r5, [sp, #24]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001fac:	9409      	str	r4, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001fae:	4d6a      	ldr	r5, [pc, #424]	; (8002158 <main+0x1dc>)
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001fb0:	e9cd 0307 	strd	r0, r3, [sp, #28]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fb4:	a806      	add	r0, sp, #24
 8001fb6:	f001 f865 	bl	8003084 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fba:	f240 2301 	movw	r3, #513	; 0x201
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fbe:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fc0:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8001fc4:	4b65      	ldr	r3, [pc, #404]	; (800215c <main+0x1e0>)
 8001fc6:	e9cd 5307 	strd	r5, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001fca:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8001fce:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fd0:	f001 f858 	bl	8003084 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fd4:	f240 3301 	movw	r3, #769	; 0x301
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fd8:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fda:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8001fde:	4b60      	ldr	r3, [pc, #384]	; (8002160 <main+0x1e4>)
 8001fe0:	e9cd 6307 	strd	r6, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fe8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fea:	f001 f84b 	bl	8003084 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes FMC control registers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fee:	f240 4301 	movw	r3, #1025	; 0x401
  MPU_InitStruct.BaseAddress = 0xA0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001ff2:	f04f 4c20 	mov.w	ip, #2684354560	; 0xa0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ff6:	a806      	add	r0, sp, #24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ff8:	f8ad 3018 	strh.w	r3, [sp, #24]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8KB;
 8001ffc:	4b59      	ldr	r3, [pc, #356]	; (8002164 <main+0x1e8>)
 8001ffe:	e9cd c307 	strd	ip, r3, [sp, #28]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002002:	4b59      	ldr	r3, [pc, #356]	; (8002168 <main+0x1ec>)
 8002004:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002006:	f001 f83d 	bl	8003084 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800200a:	2004      	movs	r0, #4
 800200c:	f001 f82a 	bl	8003064 <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002014:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <main+0x1f0>)
 800201a:	f8c2 4250 	str.w	r4, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800201e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002022:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002026:	6953      	ldr	r3, [r2, #20]
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800202e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002032:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002036:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800203a:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800203e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002042:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002046:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800204a:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800204e:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002050:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002054:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002056:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800205a:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800205c:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8002060:	d2f9      	bcs.n	8002056 <main+0xda>
    } while(sets-- != 0U);
 8002062:	3b20      	subs	r3, #32
 8002064:	f113 0f20 	cmn.w	r3, #32
 8002068:	d1f2      	bne.n	8002050 <main+0xd4>
 800206a:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800206e:	6953      	ldr	r3, [r2, #20]
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6153      	str	r3, [r2, #20]
 8002076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800207a:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 800207e:	f000 ff55 	bl	8002f2c <HAL_Init>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002082:	2401      	movs	r4, #1
 8002084:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002088:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 800208a:	2119      	movs	r1, #25
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800208c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800208e:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002090:	e9cd 4306 	strd	r4, r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8002094:	2300      	movs	r3, #0
 8002096:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209c:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 400;
 80020a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80020a4:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80020a8:	2309      	movs	r3, #9
 80020aa:	9311      	str	r3, [sp, #68]	; 0x44
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ac:	f002 fa40 	bl	8004530 <HAL_RCC_OscConfig>
 80020b0:	b100      	cbz	r0, 80020b4 <main+0x138>
  while(1)
 80020b2:	e7fe      	b.n	80020b2 <main+0x136>
  if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020b4:	f002 fa04 	bl	80044c0 <HAL_PWREx_EnableOverDrive>
 80020b8:	b100      	cbz	r0, 80020bc <main+0x140>
  while(1)
 80020ba:	e7fe      	b.n	80020ba <main+0x13e>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80020bc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80020be:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c2:	9003      	str	r0, [sp, #12]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020c4:	2107      	movs	r1, #7
 80020c6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c8:	e9cd 3501 	strd	r3, r5, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80020d4:	f002 fc18 	bl	8004908 <HAL_RCC_ClockConfig>
 80020d8:	4606      	mov	r6, r0
 80020da:	b100      	cbz	r0, 80020de <main+0x162>
  while(1)
 80020dc:	e7fe      	b.n	80020dc <main+0x160>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <main+0x1f4>)
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 80020e0:	4d24      	ldr	r5, [pc, #144]	; (8002174 <main+0x1f8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e4:	f042 0202 	orr.w	r2, r2, #2
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	9b00      	ldr	r3, [sp, #0]
  BSP_LCD_Init();
 80020f4:	f000 fd56 	bl	8002ba4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 80020f8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80020fc:	4620      	mov	r0, r4
 80020fe:	f000 fad3 	bl	80026a8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8002102:	4620      	mov	r0, r4
 8002104:	f000 fb0c 	bl	8002720 <BSP_LCD_SelectLayer>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002108:	481b      	ldr	r0, [pc, #108]	; (8002178 <main+0x1fc>)
 800210a:	f000 fb27 	bl	800275c <BSP_LCD_SetFont>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 800210e:	ac06      	add	r4, sp, #24
  LCD_LOG_Init();
 8002110:	f000 f8b4 	bl	800227c <LCD_LOG_Init>
  LCD_LOG_SetHeader((uint8_t *)"Webserver Application Netconn API");
 8002114:	4819      	ldr	r0, [pc, #100]	; (800217c <main+0x200>)
 8002116:	f000 f8bb 	bl	8002290 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t *)"STM32746G-DISCO board");
 800211a:	4819      	ldr	r0, [pc, #100]	; (8002180 <main+0x204>)
 800211c:	f000 f8ee 	bl	80022fc <LCD_LOG_SetFooter>
  LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <main+0x208>)
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <main+0x20c>)
 8002124:	4819      	ldr	r0, [pc, #100]	; (800218c <main+0x210>)
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	f00c fb24 	bl	800e774 <puts>
  spinner_GPIO_init();
 800212c:	f7ff fa0a 	bl	8001544 <spinner_GPIO_init>
  switch_GPIO_init();
 8002130:	f7ff faa6 	bl	8001680 <switch_GPIO_init>
  keyboard_GPIO_init();
 8002134:	f7ff f82a 	bl	800118c <keyboard_GPIO_init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8002138:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213c:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 800213e:	4631      	mov	r1, r6
 8002140:	a806      	add	r0, sp, #24
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8002142:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8002144:	f004 fb86 	bl	8006854 <osThreadCreate>
  osKernelStart();
 8002148:	f004 fb78 	bl	800683c <osKernelStart>
  for( ;; );
 800214c:	e7fe      	b.n	800214c <main+0x1d0>
 800214e:	bf00      	nop
 8002150:	0301000d 	.word	0x0301000d
 8002154:	20048000 	.word	0x20048000
 8002158:	2004c000 	.word	0x2004c000
 800215c:	03000009 	.word	0x03000009
 8002160:	03000018 	.word	0x03000018
 8002164:	0300000c 	.word	0x0300000c
 8002168:	01000101 	.word	0x01000101
 800216c:	e000ed00 	.word	0xe000ed00
 8002170:	40023800 	.word	0x40023800
 8002174:	0800f888 	.word	0x0800f888
 8002178:	20001a24 	.word	0x20001a24
 800217c:	080137fb 	.word	0x080137fb
 8002180:	0801381d 	.word	0x0801381d
 8002184:	20005c74 	.word	0x20005c74
 8002188:	ff000080 	.word	0xff000080
 800218c:	08013833 	.word	0x08013833

08002190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8002190:	4601      	mov	r1, r0
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002192:	2200      	movs	r2, #0
 8002194:	2036      	movs	r0, #54	; 0x36
{
 8002196:	b510      	push	{r4, lr}
 8002198:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800219a:	f000 ff15 	bl	8002fc8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800219e:	2036      	movs	r0, #54	; 0x36
 80021a0:	f000 ff44 	bl	800302c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021a4:	4b17      	ldr	r3, [pc, #92]	; (8002204 <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021a6:	a901      	add	r1, sp, #4
 80021a8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ac:	f042 0210 	orr.w	r2, r2, #16
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	9302      	str	r3, [sp, #8]
 80021ba:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021bc:	f002 fc5a 	bl	8004a74 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80021c0:	9b06      	ldr	r3, [sp, #24]
 80021c2:	b9c3      	cbnz	r3, 80021f6 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c4:	f002 fc46 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80021c8:	4c0f      	ldr	r4, [pc, #60]	; (8002208 <HAL_InitTick+0x78>)
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_InitTick+0x7c>)
 80021cc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80021ce:	f240 33e7 	movw	r3, #999	; 0x3e7
 80021d2:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_InitTick+0x80>)
 80021d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80021da:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 80021dc:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80021de:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80021e0:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 80021e2:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e4:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80021e6:	f003 f893 	bl	8005310 <HAL_TIM_Base_Init>
 80021ea:	b940      	cbnz	r0, 80021fe <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80021ec:	4620      	mov	r0, r4
 80021ee:	f002 ff41 	bl	8005074 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80021f2:	b008      	add	sp, #32
 80021f4:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80021f6:	f002 fc2d 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 80021fa:	0040      	lsls	r0, r0, #1
 80021fc:	e7e4      	b.n	80021c8 <HAL_InitTick+0x38>
  return HAL_ERROR;
 80021fe:	2001      	movs	r0, #1
 8002200:	e7f7      	b.n	80021f2 <HAL_InitTick+0x62>
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	20005c28 	.word	0x20005c28
 800220c:	40001000 	.word	0x40001000
 8002210:	000f4240 	.word	0x000f4240

08002214 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 8002214:	f000 be9c 	b.w	8002f50 <HAL_IncTick>

08002218 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8002218:	b508      	push	{r3, lr}
  get_current_keyboard_state();
 800221a:	f7ff f80b 	bl	8001234 <get_current_keyboard_state>
  get_current_spinner_button_state();
 800221e:	f7ff f9b7 	bl	8001590 <get_current_spinner_button_state>
  get_spinner_position_change();
 8002222:	f7ff f9d1 	bl	80015c8 <get_spinner_position_change>
  get_current_switch_state();
 8002226:	f7ff fa3f 	bl	80016a8 <get_current_switch_state>
  HAL_TIM_IRQHandler(&TimHandle);
 800222a:	4802      	ldr	r0, [pc, #8]	; (8002234 <TIM6_DAC_IRQHandler+0x1c>)
}
 800222c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&TimHandle);
 8002230:	f002 bf62 	b.w	80050f8 <HAL_TIM_IRQHandler>
 8002234:	20005c28 	.word	0x20005c28

08002238 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8002238:	4770      	bx	lr

0800223a <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler>

0800223c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler>

0800223e <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler>

08002240 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler>

08002242 <DebugMon_Handler>:
 8002242:	4770      	bx	lr

08002244 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8002244:	f004 bc23 	b.w	8006a8e <osSystickHandler>

08002248 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8002248:	4801      	ldr	r0, [pc, #4]	; (8002250 <ETH_IRQHandler+0x8>)
 800224a:	f001 bda9 	b.w	8003da0 <HAL_ETH_IRQHandler>
 800224e:	bf00      	nop
 8002250:	20001bc8 	.word	0x20001bc8

08002254 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8002254:	4b07      	ldr	r3, [pc, #28]	; (8002274 <LCD_LOG_DeInit+0x20>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8002256:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <LCD_LOG_DeInit+0x24>)
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800225a:	7399      	strb	r1, [r3, #14]
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800225c:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 800225e:	2200      	movs	r2, #0
 8002260:	809a      	strh	r2, [r3, #4]
  LCD_CacheBuffer_yptr_top = 0;
 8002262:	80da      	strh	r2, [r3, #6]
  LCD_CacheBuffer_yptr_bottom = 0;
 8002264:	811a      	strh	r2, [r3, #8]
  LCD_CacheBuffer_yptr_top_bak = 0;
 8002266:	815a      	strh	r2, [r3, #10]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8002268:	819a      	strh	r2, [r3, #12]
  LCD_ScrollActive = DISABLE;
 800226a:	73da      	strb	r2, [r3, #15]
  LCD_Lock = DISABLE;
 800226c:	741a      	strb	r2, [r3, #16]
  LCD_Scrolled = DISABLE;
 800226e:	745a      	strb	r2, [r3, #17]
  LCD_ScrollBackStep = 0;
 8002270:	825a      	strh	r2, [r3, #18]
}
 8002272:	4770      	bx	lr
 8002274:	20005c74 	.word	0x20005c74
 8002278:	ff000080 	.word	0xff000080

0800227c <LCD_LOG_Init>:
{
 800227c:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800227e:	f7ff ffe9 	bl	8002254 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8002282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002286:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800228a:	f000 ba7f 	b.w	800278c <BSP_LCD_Clear>
	...

08002290 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 8002290:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8002292:	4c16      	ldr	r4, [pc, #88]	; (80022ec <LCD_LOG_SetHeader+0x5c>)
{
 8002294:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8002296:	4e16      	ldr	r6, [pc, #88]	; (80022f0 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 8002298:	4620      	mov	r0, r4
 800229a:	f000 fa5f 	bl	800275c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800229e:	4630      	mov	r0, r6
 80022a0:	f000 fa44 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80022a4:	f000 f9e8 	bl	8002678 <BSP_LCD_GetXSize>
 80022a8:	88e3      	ldrh	r3, [r4, #6]
 80022aa:	2100      	movs	r1, #0
 80022ac:	b282      	uxth	r2, r0
 80022ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022b2:	4608      	mov	r0, r1
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f000 fb81 	bl	80029bc <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80022ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022be:	f000 fa35 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80022c2:	4630      	mov	r0, r6
 80022c4:	f000 fa3e 	bl	8002744 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80022c8:	462a      	mov	r2, r5
 80022ca:	88e1      	ldrh	r1, [r4, #6]
 80022cc:	2301      	movs	r3, #1
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 fb00 	bl	80028d4 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d8:	f000 fa34 	bl	8002744 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <LCD_LOG_SetHeader+0x64>)
 80022de:	f000 fa25 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <LCD_LOG_SetHeader+0x68>)
}
 80022e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80022e8:	f000 ba38 	b.w	800275c <BSP_LCD_SetFont>
 80022ec:	20001a3c 	.word	0x20001a3c
 80022f0:	ff0000ff 	.word	0xff0000ff
 80022f4:	ff000080 	.word	0xff000080
 80022f8:	20001a34 	.word	0x20001a34

080022fc <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 80022fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 80022fe:	4c1d      	ldr	r4, [pc, #116]	; (8002374 <LCD_LOG_SetFooter+0x78>)
{
 8002300:	4605      	mov	r5, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8002302:	4e1d      	ldr	r6, [pc, #116]	; (8002378 <LCD_LOG_SetFooter+0x7c>)
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8002304:	4620      	mov	r0, r4
 8002306:	f000 fa29 	bl	800275c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800230a:	4630      	mov	r0, r6
 800230c:	f000 fa0e 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8002310:	f000 f9be 	bl	8002690 <BSP_LCD_GetYSize>
 8002314:	88e1      	ldrh	r1, [r4, #6]
 8002316:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 800231a:	31fc      	adds	r1, #252	; 0xfc
 800231c:	4401      	add	r1, r0
 800231e:	b289      	uxth	r1, r1
 8002320:	9101      	str	r1, [sp, #4]
 8002322:	f000 f9a9 	bl	8002678 <BSP_LCD_GetXSize>
 8002326:	88e3      	ldrh	r3, [r4, #6]
 8002328:	b282      	uxth	r2, r0
 800232a:	9901      	ldr	r1, [sp, #4]
 800232c:	2000      	movs	r0, #0
 800232e:	3304      	adds	r3, #4
 8002330:	b29b      	uxth	r3, r3
 8002332:	f000 fb43 	bl	80029bc <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8002336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800233a:	f000 f9f7 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800233e:	4630      	mov	r0, r6
 8002340:	f000 fa00 	bl	8002744 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8002344:	f000 f9a4 	bl	8002690 <BSP_LCD_GetYSize>
 8002348:	88e1      	ldrh	r1, [r4, #6]
 800234a:	2301      	movs	r3, #1
 800234c:	462a      	mov	r2, r5
 800234e:	1a41      	subs	r1, r0, r1
 8002350:	2000      	movs	r0, #0
 8002352:	b289      	uxth	r1, r1
 8002354:	f000 fabe 	bl	80028d4 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8002358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800235c:	f000 f9f2 	bl	8002744 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <LCD_LOG_SetFooter+0x80>)
 8002362:	f000 f9e3 	bl	800272c <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8002366:	4620      	mov	r0, r4
}
 8002368:	b002      	add	sp, #8
 800236a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800236e:	f000 b9f5 	b.w	800275c <BSP_LCD_SetFont>
 8002372:	bf00      	nop
 8002374:	20001a34 	.word	0x20001a34
 8002378:	ff0000ff 	.word	0xff0000ff
 800237c:	ff000080 	.word	0xff000080

08002380 <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 8002380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8002384:	4c1b      	ldr	r4, [pc, #108]	; (80023f4 <LCD_LOG_UpdateDisplay+0x74>)
 8002386:	4f1c      	ldr	r7, [pc, #112]	; (80023f8 <LCD_LOG_UpdateDisplay+0x78>)
 8002388:	8923      	ldrh	r3, [r4, #8]
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 800238a:	88e2      	ldrh	r2, [r4, #6]
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d811      	bhi.n	80023b4 <LCD_LOG_UpdateDisplay+0x34>
 8002390:	4293      	cmp	r3, r2
 8002392:	d311      	bcc.n	80023b8 <LCD_LOG_UpdateDisplay+0x38>
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8002394:	2584      	movs	r5, #132	; 0x84
 8002396:	fb05 7303 	mla	r3, r5, r3, r7
 800239a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800239e:	f000 f9c5 	bl	800272c <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80023a2:	8921      	ldrh	r1, [r4, #8]
 80023a4:	1d08      	adds	r0, r1, #4
 80023a6:	fb05 7101 	mla	r1, r5, r1, r7
 80023aa:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 80023ac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80023b0:	f000 baf2 	b.w	8002998 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d201      	bcs.n	80023bc <LCD_LOG_UpdateDisplay+0x3c>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80023b8:	3375      	adds	r3, #117	; 0x75
 80023ba:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 80023bc:	3b10      	subs	r3, #16
 80023be:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80023c0:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80023c4:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 80023c8:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80023ca:	19a5      	adds	r5, r4, r6
 80023cc:	fbb5 f1f8 	udiv	r1, r5, r8
 80023d0:	fb08 5511 	mls	r5, r8, r1, r5
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80023d4:	fb09 7505 	mla	r5, r9, r5, r7
 80023d8:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80023dc:	f000 f9a6 	bl	800272c <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80023e0:	1d30      	adds	r0, r6, #4
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80023e2:	3601      	adds	r6, #1
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80023e4:	4629      	mov	r1, r5
 80023e6:	b280      	uxth	r0, r0
 80023e8:	f000 fad6 	bl	8002998 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80023ec:	2e11      	cmp	r6, #17
 80023ee:	d1ec      	bne.n	80023ca <LCD_LOG_UpdateDisplay+0x4a>
}
 80023f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023f4:	20005c74 	.word	0x20005c74
 80023f8:	20005c88 	.word	0x20005c88

080023fc <__io_putchar>:
{
 80023fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(LCD_Lock == DISABLE)
 8002400:	4c37      	ldr	r4, [pc, #220]	; (80024e0 <__io_putchar+0xe4>)
{
 8002402:	4605      	mov	r5, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8002404:	f000 f9b6 	bl	8002774 <BSP_LCD_GetFont>
 8002408:	4607      	mov	r7, r0
  if(LCD_Lock == DISABLE)
 800240a:	7c23      	ldrb	r3, [r4, #16]
 800240c:	b9e3      	cbnz	r3, 8002448 <__io_putchar+0x4c>
    if(LCD_ScrollActive == ENABLE)
 800240e:	7be2      	ldrb	r2, [r4, #15]
 8002410:	2a01      	cmp	r2, #1
 8002412:	d106      	bne.n	8002422 <__io_putchar+0x26>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8002414:	89a2      	ldrh	r2, [r4, #12]
      LCD_ScrollActive = DISABLE;
 8002416:	73e3      	strb	r3, [r4, #15]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8002418:	8122      	strh	r2, [r4, #8]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800241a:	8962      	ldrh	r2, [r4, #10]
      LCD_Scrolled = DISABLE;
 800241c:	7463      	strb	r3, [r4, #17]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800241e:	80e2      	strh	r2, [r4, #6]
      LCD_ScrollBackStep = 0;
 8002420:	8263      	strh	r3, [r4, #18]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8002422:	88a6      	ldrh	r6, [r4, #4]
 8002424:	f000 f928 	bl	8002678 <BSP_LCD_GetXSize>
 8002428:	88bb      	ldrh	r3, [r7, #4]
 800242a:	fbb0 f0f3 	udiv	r0, r0, r3
 800242e:	4286      	cmp	r6, r0
 8002430:	4e2c      	ldr	r6, [pc, #176]	; (80024e4 <__io_putchar+0xe8>)
 8002432:	d20c      	bcs.n	800244e <__io_putchar+0x52>
 8002434:	2d0a      	cmp	r5, #10
 8002436:	d00a      	beq.n	800244e <__io_putchar+0x52>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8002438:	88a2      	ldrh	r2, [r4, #4]
 800243a:	8923      	ldrh	r3, [r4, #8]
 800243c:	1c51      	adds	r1, r2, #1
 800243e:	80a1      	strh	r1, [r4, #4]
 8002440:	2184      	movs	r1, #132	; 0x84
 8002442:	fb01 6603 	mla	r6, r1, r3, r6
 8002446:	54b5      	strb	r5, [r6, r2]
}
 8002448:	4628      	mov	r0, r5
 800244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800244e:	88e3      	ldrh	r3, [r4, #6]
 8002450:	8922      	ldrh	r2, [r4, #8]
 8002452:	429a      	cmp	r2, r3
 8002454:	d808      	bhi.n	8002468 <__io_putchar+0x6c>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8002456:	7ba2      	ldrb	r2, [r4, #14]
 8002458:	2a00      	cmp	r2, #0
 800245a:	d133      	bne.n	80024c4 <__io_putchar+0xc8>
          LCD_CacheBuffer_yptr_top++;
 800245c:	3301      	adds	r3, #1
 800245e:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8002460:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 8002462:	bf14      	ite	ne
 8002464:	80e3      	strhne	r3, [r4, #6]
            LCD_CacheBuffer_yptr_top = 0;  
 8002466:	80e2      	strheq	r2, [r4, #6]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8002468:	f8b4 8004 	ldrh.w	r8, [r4, #4]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800246c:	f04f 0984 	mov.w	r9, #132	; 0x84
 8002470:	f04f 0a20 	mov.w	sl, #32
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8002474:	f000 f900 	bl	8002678 <BSP_LCD_GetXSize>
 8002478:	88bb      	ldrh	r3, [r7, #4]
 800247a:	fbb0 f0f3 	udiv	r0, r0, r3
 800247e:	4540      	cmp	r0, r8
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8002480:	8923      	ldrh	r3, [r4, #8]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8002482:	d822      	bhi.n	80024ca <__io_putchar+0xce>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8002484:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 8002486:	2700      	movs	r7, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8002488:	fb02 6303 	mla	r3, r2, r3, r6
 800248c:	6822      	ldr	r2, [r4, #0]
      LCD_CacheBuffer_xptr = 0;
 800248e:	80a7      	strh	r7, [r4, #4]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8002490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 8002494:	f7ff ff74 	bl	8002380 <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 8002498:	8923      	ldrh	r3, [r4, #8]
 800249a:	3301      	adds	r3, #1
 800249c:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 800249e:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 80024a0:	bf09      	itett	eq
 80024a2:	2301      	moveq	r3, #1
      LCD_CacheBuffer_yptr_bottom ++; 
 80024a4:	8123      	strhne	r3, [r4, #8]
        LCD_CacheBuffer_yptr_bottom = 0;
 80024a6:	8127      	strheq	r7, [r4, #8]
        LCD_CacheBuffer_yptr_top = 1;    
 80024a8:	80e3      	strheq	r3, [r4, #6]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80024aa:	bf08      	it	eq
 80024ac:	73a3      	strbeq	r3, [r4, #14]
      if( ch != '\n')
 80024ae:	2d0a      	cmp	r5, #10
 80024b0:	d0ca      	beq.n	8002448 <__io_putchar+0x4c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80024b2:	88a3      	ldrh	r3, [r4, #4]
 80024b4:	8922      	ldrh	r2, [r4, #8]
 80024b6:	1c59      	adds	r1, r3, #1
 80024b8:	80a1      	strh	r1, [r4, #4]
 80024ba:	2184      	movs	r1, #132	; 0x84
 80024bc:	fb01 6602 	mla	r6, r1, r2, r6
 80024c0:	54f5      	strb	r5, [r6, r3]
 80024c2:	e7c1      	b.n	8002448 <__io_putchar+0x4c>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73a3      	strb	r3, [r4, #14]
 80024c8:	e7ce      	b.n	8002468 <__io_putchar+0x6c>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80024ca:	88a2      	ldrh	r2, [r4, #4]
 80024cc:	fb09 6303 	mla	r3, r9, r3, r6
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80024d0:	f108 0801 	add.w	r8, r8, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80024d4:	1c51      	adds	r1, r2, #1
 80024d6:	f803 a002 	strb.w	sl, [r3, r2]
 80024da:	80a1      	strh	r1, [r4, #4]
 80024dc:	e7ca      	b.n	8002474 <__io_putchar+0x78>
 80024de:	bf00      	nop
 80024e0:	20005c74 	.word	0x20005c74
 80024e4:	20005c88 	.word	0x20005c88

080024e8 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80024e8:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80024ea:	b170      	cbz	r0, 800250a <LAN8742_RegisterBusIO+0x22>
 80024ec:	68cc      	ldr	r4, [r1, #12]
 80024ee:	b164      	cbz	r4, 800250a <LAN8742_RegisterBusIO+0x22>
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	b152      	cbz	r2, 800250a <LAN8742_RegisterBusIO+0x22>
 80024f4:	690b      	ldr	r3, [r1, #16]
 80024f6:	b143      	cbz	r3, 800250a <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }

  pObj->IO.Init = ioctx->Init;
 80024f8:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 80024fa:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 80024fc:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80024fe:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 8002500:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002502:	e9c0 2404 	strd	r2, r4, [r0, #16]

  return LAN8742_STATUS_OK;
 8002506:	2000      	movs	r0, #0
}
 8002508:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 800250a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800250e:	e7fb      	b.n	8002508 <LAN8742_RegisterBusIO+0x20>

08002510 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002510:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t regvalue = 0, addr = 0;
 8002512:	2400      	movs	r4, #0
   int32_t status = LAN8742_STATUS_OK;

   if(pObj->Is_Initialized == 0)
 8002514:	6846      	ldr	r6, [r0, #4]
 {
 8002516:	4605      	mov	r5, r0
   uint32_t regvalue = 0, addr = 0;
 8002518:	9401      	str	r4, [sp, #4]
   if(pObj->Is_Initialized == 0)
 800251a:	bb06      	cbnz	r6, 800255e <LAN8742_Init+0x4e>
   {
     if(pObj->IO.Init != 0)
 800251c:	6883      	ldr	r3, [r0, #8]
 800251e:	b103      	cbz	r3, 8002522 <LAN8742_Init+0x12>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002520:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002522:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8002524:	2400      	movs	r4, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002526:	602b      	str	r3, [r5, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002528:	696b      	ldr	r3, [r5, #20]
 800252a:	aa01      	add	r2, sp, #4
 800252c:	2112      	movs	r1, #18
 800252e:	4630      	mov	r0, r6
 8002530:	4798      	blx	r3
 8002532:	2800      	cmp	r0, #0
 8002534:	db09      	blt.n	800254a <LAN8742_Init+0x3a>
         /* Can't read from this device address
            continue with next address */
         continue;
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002536:	9b01      	ldr	r3, [sp, #4]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	42b3      	cmp	r3, r6
 800253e:	d106      	bne.n	800254e <LAN8742_Init+0x3e>
       {
         pObj->DevAddr = addr;
 8002540:	602e      	str	r6, [r5, #0]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       pObj->Is_Initialized = 1;
 8002542:	2301      	movs	r3, #1
 8002544:	2400      	movs	r4, #0
 8002546:	606b      	str	r3, [r5, #4]
 8002548:	e009      	b.n	800255e <LAN8742_Init+0x4e>
         status = LAN8742_STATUS_READ_ERROR;
 800254a:	f06f 0404 	mvn.w	r4, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800254e:	3601      	adds	r6, #1
 8002550:	2e20      	cmp	r6, #32
 8002552:	d1e9      	bne.n	8002528 <LAN8742_Init+0x18>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	2b1f      	cmp	r3, #31
 8002558:	d804      	bhi.n	8002564 <LAN8742_Init+0x54>
     if(status == LAN8742_STATUS_OK)
 800255a:	2c00      	cmp	r4, #0
 800255c:	d0f1      	beq.n	8002542 <LAN8742_Init+0x32>
     }
   }

   return status;
 }
 800255e:	4620      	mov	r0, r4
 8002560:	b002      	add	sp, #8
 8002562:	bd70      	pop	{r4, r5, r6, pc}
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002564:	f06f 0402 	mvn.w	r4, #2
   return status;
 8002568:	e7f9      	b.n	800255e <LAN8742_Init+0x4e>

0800256a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800256a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 800256c:	2500      	movs	r5, #0

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800256e:	6943      	ldr	r3, [r0, #20]
{
 8002570:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002572:	aa01      	add	r2, sp, #4
 8002574:	2101      	movs	r1, #1
 8002576:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8002578:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800257a:	4798      	blx	r3
 800257c:	42a8      	cmp	r0, r5
 800257e:	da03      	bge.n	8002588 <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002580:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }
  }
}
 8002584:	b003      	add	sp, #12
 8002586:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002588:	6963      	ldr	r3, [r4, #20]
 800258a:	aa01      	add	r2, sp, #4
 800258c:	2101      	movs	r1, #1
 800258e:	6820      	ldr	r0, [r4, #0]
 8002590:	4798      	blx	r3
 8002592:	2800      	cmp	r0, #0
 8002594:	dbf4      	blt.n	8002580 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	075b      	lsls	r3, r3, #29
 800259a:	d52c      	bpl.n	80025f6 <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800259c:	6963      	ldr	r3, [r4, #20]
 800259e:	aa01      	add	r2, sp, #4
 80025a0:	4629      	mov	r1, r5
 80025a2:	6820      	ldr	r0, [r4, #0]
 80025a4:	4798      	blx	r3
 80025a6:	2800      	cmp	r0, #0
 80025a8:	dbea      	blt.n	8002580 <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80025aa:	9b01      	ldr	r3, [sp, #4]
 80025ac:	04dd      	lsls	r5, r3, #19
 80025ae:	d40e      	bmi.n	80025ce <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80025b0:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 80025b4:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 80025b8:	d101      	bne.n	80025be <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80025ba:	2002      	movs	r0, #2
 80025bc:	e7e2      	b.n	8002584 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80025be:	0498      	lsls	r0, r3, #18
 80025c0:	d501      	bpl.n	80025c6 <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80025c2:	2003      	movs	r0, #3
 80025c4:	e7de      	b.n	8002584 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80025c6:	05d9      	lsls	r1, r3, #23
 80025c8:	d513      	bpl.n	80025f2 <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80025ca:	2004      	movs	r0, #4
 80025cc:	e7da      	b.n	8002584 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80025ce:	6963      	ldr	r3, [r4, #20]
 80025d0:	aa01      	add	r2, sp, #4
 80025d2:	211f      	movs	r1, #31
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	4798      	blx	r3
 80025d8:	2800      	cmp	r0, #0
 80025da:	dbd1      	blt.n	8002580 <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80025dc:	9b01      	ldr	r3, [sp, #4]
 80025de:	04da      	lsls	r2, r3, #19
 80025e0:	d50b      	bpl.n	80025fa <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80025e2:	f003 031c 	and.w	r3, r3, #28
 80025e6:	2b18      	cmp	r3, #24
 80025e8:	d0e7      	beq.n	80025ba <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d0e9      	beq.n	80025c2 <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80025ee:	2b14      	cmp	r3, #20
 80025f0:	d0eb      	beq.n	80025ca <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80025f2:	2005      	movs	r0, #5
 80025f4:	e7c6      	b.n	8002584 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;
 80025f6:	2001      	movs	r0, #1
 80025f8:	e7c4      	b.n	8002584 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80025fa:	2006      	movs	r0, #6
 80025fc:	e7c2      	b.n	8002584 <LAN8742_GetLinkState+0x1a>
	...

08002600 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002604:	4c1a      	ldr	r4, [pc, #104]	; (8002670 <LL_FillBuffer+0x70>)
{
 8002606:	4698      	mov	r8, r3
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002608:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 800260c:	4617      	mov	r7, r2
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800260e:	2234      	movs	r2, #52	; 0x34
{
 8002610:	4681      	mov	r9, r0
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002612:	6063      	str	r3, [r4, #4]
  hDma2dHandler.Init.OutputOffset = OffLine;      
  
  hDma2dHandler.Instance = DMA2D;
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002614:	4620      	mov	r0, r4
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002616:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
{
 800261a:	460e      	mov	r6, r1
 800261c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002620:	fb02 4303 	mla	r3, r2, r3, r4
 8002624:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800262a:	2d02      	cmp	r5, #2
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800262c:	60e3      	str	r3, [r4, #12]
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800262e:	bf18      	it	ne
 8002630:	2500      	movne	r5, #0
  hDma2dHandler.Instance = DMA2D;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <LL_FillBuffer+0x74>)
 8002634:	60a5      	str	r5, [r4, #8]
 8002636:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002638:	f000 fe53 	bl	80032e2 <HAL_DMA2D_Init>
 800263c:	b9a0      	cbnz	r0, 8002668 <LL_FillBuffer+0x68>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800263e:	4649      	mov	r1, r9
 8002640:	4620      	mov	r0, r4
 8002642:	f000 ff15 	bl	8003470 <HAL_DMA2D_ConfigLayer>
 8002646:	b978      	cbnz	r0, 8002668 <LL_FillBuffer+0x68>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002648:	463b      	mov	r3, r7
 800264a:	4632      	mov	r2, r6
 800264c:	4651      	mov	r1, sl
 800264e:	4620      	mov	r0, r4
 8002650:	f8cd 8000 	str.w	r8, [sp]
 8002654:	f000 fe71 	bl	800333a <HAL_DMA2D_Start>
 8002658:	b930      	cbnz	r0, 8002668 <LL_FillBuffer+0x68>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800265a:	210a      	movs	r1, #10
 800265c:	4620      	mov	r0, r4
      }
    }
  } 
}
 800265e:	b002      	add	sp, #8
 8002660:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002664:	f000 be83 	b.w	800336e <HAL_DMA2D_PollForTransfer>
}
 8002668:	b002      	add	sp, #8
 800266a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800266e:	bf00      	nop
 8002670:	200098dc 	.word	0x200098dc
 8002674:	4002b000 	.word	0x4002b000

08002678 <BSP_LCD_GetXSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <BSP_LCD_GetXSize+0x14>)
 800267a:	2134      	movs	r1, #52	; 0x34
 800267c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002680:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002684:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200098dc 	.word	0x200098dc

08002690 <BSP_LCD_GetYSize>:
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <BSP_LCD_GetYSize+0x14>)
 8002692:	2134      	movs	r1, #52	; 0x34
 8002694:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002698:	fb01 3302 	mla	r3, r1, r2, r3
}
 800269c:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	200098dc 	.word	0x200098dc

080026a8 <BSP_LCD_LayerDefaultInit>:
{     
 80026a8:	b570      	push	{r4, r5, r6, lr}
  layer_cfg.WindowX0 = 0;
 80026aa:	2400      	movs	r4, #0
{     
 80026ac:	b08e      	sub	sp, #56	; 0x38
 80026ae:	460e      	mov	r6, r1
 80026b0:	4605      	mov	r5, r0
  layer_cfg.WindowX0 = 0;
 80026b2:	9401      	str	r4, [sp, #4]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80026b4:	f7ff ffe0 	bl	8002678 <BSP_LCD_GetXSize>
  layer_cfg.WindowY0 = 0;
 80026b8:	e9cd 0402 	strd	r0, r4, [sp, #8]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026bc:	f7ff ffe8 	bl	8002690 <BSP_LCD_GetYSize>
  layer_cfg.Alpha = 255;
 80026c0:	23ff      	movs	r3, #255	; 0xff
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  layer_cfg.Backcolor.Blue = 0;
 80026c6:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  layer_cfg.Backcolor.Red = 0;
 80026ca:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  layer_cfg.FBStartAdress = FB_Address;
 80026ce:	960a      	str	r6, [sp, #40]	; 0x28
  layer_cfg.Alpha0 = 0;
 80026d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026d4:	e9cd 0404 	strd	r0, r4, [sp, #16]
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026d8:	2307      	movs	r3, #7
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026da:	4c0f      	ldr	r4, [pc, #60]	; (8002718 <BSP_LCD_LayerDefaultInit+0x70>)
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80026dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80026e0:	f7ff ffca 	bl	8002678 <BSP_LCD_GetXSize>
 80026e4:	900b      	str	r0, [sp, #44]	; 0x2c
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026e6:	f7ff ffd3 	bl	8002690 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026ea:	462a      	mov	r2, r5
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026ec:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026ee:	a901      	add	r1, sp, #4
 80026f0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80026f4:	f001 fe94 	bl	8004420 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80026f8:	200c      	movs	r0, #12
 80026fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026fe:	fb00 4005 	mla	r0, r0, r5, r4
 8002702:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <BSP_LCD_LayerDefaultInit+0x74>)
 8002708:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800270c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002710:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
}
 8002714:	b00e      	add	sp, #56	; 0x38
 8002716:	bd70      	pop	{r4, r5, r6, pc}
 8002718:	200098dc 	.word	0x200098dc
 800271c:	20001a24 	.word	0x20001a24

08002720 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <BSP_LCD_SelectLayer+0x8>)
 8002722:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
} 
 8002726:	4770      	bx	lr
 8002728:	200098dc 	.word	0x200098dc

0800272c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <BSP_LCD_SetTextColor+0x14>)
 800272e:	210c      	movs	r1, #12
 8002730:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002734:	fb01 3302 	mla	r3, r1, r2, r3
 8002738:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	200098dc 	.word	0x200098dc

08002744 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <BSP_LCD_SetBackColor+0x14>)
 8002746:	210c      	movs	r1, #12
 8002748:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800274c:	fb01 3302 	mla	r3, r1, r2, r3
 8002750:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	200098dc 	.word	0x200098dc

0800275c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <BSP_LCD_SetFont+0x14>)
 800275e:	210c      	movs	r1, #12
 8002760:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002764:	fb01 3302 	mla	r3, r1, r2, r3
 8002768:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	200098dc 	.word	0x200098dc

08002774 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <BSP_LCD_GetFont+0x14>)
 8002776:	210c      	movs	r1, #12
 8002778:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800277c:	fb01 3302 	mla	r3, r1, r2, r3
}
 8002780:	f8d3 00f4 	ldr.w	r0, [r3, #244]	; 0xf4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	200098dc 	.word	0x200098dc

0800278c <BSP_LCD_Clear>:
{ 
 800278c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800278e:	4c0c      	ldr	r4, [pc, #48]	; (80027c0 <BSP_LCD_Clear+0x34>)
{ 
 8002790:	4605      	mov	r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002792:	f7ff ff71 	bl	8002678 <BSP_LCD_GetXSize>
 8002796:	9003      	str	r0, [sp, #12]
 8002798:	f8d4 60e8 	ldr.w	r6, [r4, #232]	; 0xe8
 800279c:	f7ff ff78 	bl	8002690 <BSP_LCD_GetYSize>
 80027a0:	2134      	movs	r1, #52	; 0x34
 80027a2:	4603      	mov	r3, r0
 80027a4:	9501      	str	r5, [sp, #4]
 80027a6:	4630      	mov	r0, r6
 80027a8:	fb01 4406 	mla	r4, r1, r6, r4
 80027ac:	2100      	movs	r1, #0
 80027ae:	9a03      	ldr	r2, [sp, #12]
 80027b0:	9100      	str	r1, [sp, #0]
 80027b2:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80027b6:	f7ff ff23 	bl	8002600 <LL_FillBuffer>
}
 80027ba:	b004      	add	sp, #16
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	bf00      	nop
 80027c0:	200098dc 	.word	0x200098dc

080027c4 <BSP_LCD_DrawPixel>:
{
 80027c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027c8:	4d0d      	ldr	r5, [pc, #52]	; (8002800 <BSP_LCD_DrawPixel+0x3c>)
{
 80027ca:	4614      	mov	r4, r2
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80027cc:	2234      	movs	r2, #52	; 0x34
{
 80027ce:	4606      	mov	r6, r0
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027d0:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
 80027d4:	460f      	mov	r7, r1
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80027d6:	fb02 5503 	mla	r5, r2, r3, r5
 80027da:	f7ff ff4d 	bl	8002678 <BSP_LCD_GetXSize>
 80027de:	fb00 6007 	mla	r0, r0, r7, r6
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027e2:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80027e6:	f8d5 809c 	ldr.w	r8, [r5, #156]	; 0x9c
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d104      	bne.n	80027f8 <BSP_LCD_DrawPixel+0x34>
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80027ee:	b2a4      	uxth	r4, r4
 80027f0:	f828 4010 	strh.w	r4, [r8, r0, lsl #1]
}
 80027f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80027f8:	f848 4020 	str.w	r4, [r8, r0, lsl #2]
}
 80027fc:	e7fa      	b.n	80027f4 <BSP_LCD_DrawPixel+0x30>
 80027fe:	bf00      	nop
 8002800:	200098dc 	.word	0x200098dc

08002804 <BSP_LCD_DisplayChar>:
{
 8002804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002808:	4f31      	ldr	r7, [pc, #196]	; (80028d0 <BSP_LCD_DisplayChar+0xcc>)
{
 800280a:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800280c:	3a20      	subs	r2, #32
  for(i = 0; i < height; i++)
 800280e:	f04f 0900 	mov.w	r9, #0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002812:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
{
 8002816:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800281a:	210c      	movs	r1, #12
 800281c:	fb01 7303 	mla	r3, r1, r3, r7
 8002820:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002824:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8002828:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800282c:	f10b 0607 	add.w	r6, fp, #7
 8002830:	680d      	ldr	r5, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002832:	fb0a f202 	mul.w	r2, sl, r2
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002836:	10f6      	asrs	r6, r6, #3
  offset =  8 *((width + 7)/8) -  width ;
 8002838:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 800283c:	fb06 5502 	mla	r5, r6, r2, r5
 8002840:	b2c3      	uxtb	r3, r0
 8002842:	9300      	str	r3, [sp, #0]
      if(line & (1 << (width- j + offset- 1))) 
 8002844:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8002848:	9304      	str	r3, [sp, #16]
 800284a:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 800284c:	45d1      	cmp	r9, sl
 800284e:	eb03 0109 	add.w	r1, r3, r9
 8002852:	b289      	uxth	r1, r1
 8002854:	d302      	bcc.n	800285c <BSP_LCD_DisplayChar+0x58>
}
 8002856:	b007      	add	sp, #28
 8002858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 800285c:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 800285e:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8002860:	d004      	beq.n	800286c <BSP_LCD_DisplayChar+0x68>
 8002862:	2e02      	cmp	r6, #2
 8002864:	d10e      	bne.n	8002884 <BSP_LCD_DisplayChar+0x80>
      line =  (pchar[0]<< 8) | pchar[1];      
 8002866:	882c      	ldrh	r4, [r5, #0]
 8002868:	ba64      	rev16	r4, r4
 800286a:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 800286c:	9b04      	ldr	r3, [sp, #16]
    for (j = 0; j < width; j++)
 800286e:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8002872:	9a00      	ldr	r2, [sp, #0]
 8002874:	4413      	add	r3, r2
 8002876:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 8002878:	45c3      	cmp	fp, r8
 800287a:	d80a      	bhi.n	8002892 <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 800287c:	f109 0901 	add.w	r9, r9, #1
 8002880:	4435      	add	r5, r6
 8002882:	e7e2      	b.n	800284a <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8002884:	786a      	ldrb	r2, [r5, #1]
 8002886:	0424      	lsls	r4, r4, #16
 8002888:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800288c:	78aa      	ldrb	r2, [r5, #2]
 800288e:	4314      	orrs	r4, r2
      break;
 8002890:	e7ec      	b.n	800286c <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 8002892:	9b01      	ldr	r3, [sp, #4]
 8002894:	f04f 0c01 	mov.w	ip, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002898:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800289c:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 80028a0:	9b03      	ldr	r3, [sp, #12]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80028a2:	9105      	str	r1, [sp, #20]
      if(line & (1 << (width- j + offset- 1))) 
 80028a4:	eba3 0e08 	sub.w	lr, r3, r8
 80028a8:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 80028aa:	f108 0801 	add.w	r8, r8, #1
      if(line & (1 << (width- j + offset- 1))) 
 80028ae:	fa0c fc0e 	lsl.w	ip, ip, lr
 80028b2:	ea1c 0f04 	tst.w	ip, r4
 80028b6:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80028ba:	fb0c 7202 	mla	r2, ip, r2, r7
 80028be:	bf14      	ite	ne
 80028c0:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80028c4:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 80028c8:	f7ff ff7c 	bl	80027c4 <BSP_LCD_DrawPixel>
 80028cc:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 80028ce:	e7d3      	b.n	8002878 <BSP_LCD_DisplayChar+0x74>
 80028d0:	200098dc 	.word	0x200098dc

080028d4 <BSP_LCD_DisplayStringAt>:
{
 80028d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	4699      	mov	r9, r3
 80028da:	4605      	mov	r5, r0
 80028dc:	460f      	mov	r7, r1
 80028de:	4616      	mov	r6, r2
  uint8_t  *ptr = Text;
 80028e0:	4613      	mov	r3, r2
 80028e2:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 80028e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028e8:	2a00      	cmp	r2, #0
 80028ea:	d1fa      	bne.n	80028e2 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028ec:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002994 <BSP_LCD_DisplayStringAt+0xc0>
 80028f0:	f7ff fec2 	bl	8002678 <BSP_LCD_GetXSize>
 80028f4:	220c      	movs	r2, #12
  switch (Mode)
 80028f6:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80028fa:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
 80028fe:	fb02 8303 	mla	r3, r2, r3, r8
 8002902:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002906:	889b      	ldrh	r3, [r3, #4]
 8002908:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (Mode)
 800290c:	d026      	beq.n	800295c <BSP_LCD_DisplayStringAt+0x88>
 800290e:	f1b9 0f02 	cmp.w	r9, #2
 8002912:	d02a      	beq.n	800296a <BSP_LCD_DisplayStringAt+0x96>
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002914:	b22b      	sxth	r3, r5
    ref_column = 1;
 8002916:	f04f 0900 	mov.w	r9, #0
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800291a:	240c      	movs	r4, #12
    ref_column = 1;
 800291c:	2b00      	cmp	r3, #0
 800291e:	bfd8      	it	le
 8002920:	2501      	movle	r5, #1
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002922:	f7ff fea9 	bl	8002678 <BSP_LCD_GetXSize>
 8002926:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
 800292a:	fa1f f289 	uxth.w	r2, r9
 800292e:	f816 a009 	ldrb.w	sl, [r6, r9]
 8002932:	fb04 8303 	mla	r3, r4, r3, r8
 8002936:	f109 0901 	add.w	r9, r9, #1
 800293a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800293e:	889b      	ldrh	r3, [r3, #4]
 8002940:	fb03 0012 	mls	r0, r3, r2, r0
 8002944:	b280      	uxth	r0, r0
 8002946:	4298      	cmp	r0, r3
 8002948:	bf34      	ite	cc
 800294a:	2000      	movcc	r0, #0
 800294c:	2001      	movcs	r0, #1
 800294e:	f1ba 0f00 	cmp.w	sl, #0
 8002952:	bf08      	it	eq
 8002954:	2000      	moveq	r0, #0
 8002956:	b970      	cbnz	r0, 8002976 <BSP_LCD_DisplayStringAt+0xa2>
}
 8002958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800295c:	1b34      	subs	r4, r6, r4
 800295e:	4420      	add	r0, r4
 8002960:	4358      	muls	r0, r3
 8002962:	eb05 0050 	add.w	r0, r5, r0, lsr #1
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002966:	b285      	uxth	r5, r0
      break;
 8002968:	e7d4      	b.n	8002914 <BSP_LCD_DisplayStringAt+0x40>
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800296a:	1b34      	subs	r4, r6, r4
 800296c:	4404      	add	r4, r0
 800296e:	fb14 f403 	smulbb	r4, r4, r3
 8002972:	1b60      	subs	r0, r4, r5
 8002974:	e7f7      	b.n	8002966 <BSP_LCD_DisplayStringAt+0x92>
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002976:	4628      	mov	r0, r5
 8002978:	4652      	mov	r2, sl
 800297a:	4639      	mov	r1, r7
 800297c:	f7ff ff42 	bl	8002804 <BSP_LCD_DisplayChar>
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002980:	f8d8 30e8 	ldr.w	r3, [r8, #232]	; 0xe8
 8002984:	fb04 8303 	mla	r3, r4, r3, r8
 8002988:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800298c:	8898      	ldrh	r0, [r3, #4]
 800298e:	4428      	add	r0, r5
 8002990:	b285      	uxth	r5, r0
    i++;
 8002992:	e7c6      	b.n	8002922 <BSP_LCD_DisplayStringAt+0x4e>
 8002994:	200098dc 	.word	0x200098dc

08002998 <BSP_LCD_DisplayStringAtLine>:
{  
 8002998:	b513      	push	{r0, r1, r4, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	9101      	str	r1, [sp, #4]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 800299e:	f7ff fee9 	bl	8002774 <BSP_LCD_GetFont>
 80029a2:	88c3      	ldrh	r3, [r0, #6]
 80029a4:	9a01      	ldr	r2, [sp, #4]
 80029a6:	2000      	movs	r0, #0
 80029a8:	fb13 f104 	smulbb	r1, r3, r4
 80029ac:	2303      	movs	r3, #3
 80029ae:	b289      	uxth	r1, r1
}
 80029b0:	b002      	add	sp, #8
 80029b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 80029b6:	f7ff bf8d 	b.w	80028d4 <BSP_LCD_DisplayStringAt>
	...

080029bc <BSP_LCD_FillRect>:
{
 80029bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029c0:	4d1c      	ldr	r5, [pc, #112]	; (8002a34 <BSP_LCD_FillRect+0x78>)
{
 80029c2:	4616      	mov	r6, r2
 80029c4:	4698      	mov	r8, r3
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029c6:	220c      	movs	r2, #12
 80029c8:	f8d5 30e8 	ldr.w	r3, [r5, #232]	; 0xe8
{
 80029cc:	4604      	mov	r4, r0
 80029ce:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80029d0:	fb02 5303 	mla	r3, r2, r3, r5
 80029d4:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80029d8:	f7ff fea8 	bl	800272c <BSP_LCD_SetTextColor>
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80029dc:	f8d5 70e8 	ldr.w	r7, [r5, #232]	; 0xe8
 80029e0:	2334      	movs	r3, #52	; 0x34
 80029e2:	fb03 5307 	mla	r3, r3, r7, r5
 80029e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029ea:	f8d3 a09c 	ldr.w	sl, [r3, #156]	; 0x9c
 80029ee:	2a02      	cmp	r2, #2
 80029f0:	d118      	bne.n	8002a24 <BSP_LCD_FillRect+0x68>
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80029f2:	f7ff fe41 	bl	8002678 <BSP_LCD_GetXSize>
 80029f6:	fb09 4000 	mla	r0, r9, r0, r4
 80029fa:	eb0a 0a40 	add.w	sl, sl, r0, lsl #1
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80029fe:	f7ff fe3b 	bl	8002678 <BSP_LCD_GetXSize>
 8002a02:	210c      	movs	r1, #12
 8002a04:	1b80      	subs	r0, r0, r6
 8002a06:	4632      	mov	r2, r6
 8002a08:	fb01 5107 	mla	r1, r1, r7, r5
 8002a0c:	f8d1 30ec 	ldr.w	r3, [r1, #236]	; 0xec
 8002a10:	4651      	mov	r1, sl
 8002a12:	9000      	str	r0, [sp, #0]
 8002a14:	4638      	mov	r0, r7
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	4643      	mov	r3, r8
 8002a1a:	f7ff fdf1 	bl	8002600 <LL_FillBuffer>
}
 8002a1e:	b002      	add	sp, #8
 8002a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a24:	f7ff fe28 	bl	8002678 <BSP_LCD_GetXSize>
 8002a28:	fb09 4000 	mla	r0, r9, r0, r4
 8002a2c:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
 8002a30:	e7e5      	b.n	80029fe <BSP_LCD_FillRect+0x42>
 8002a32:	bf00      	nop
 8002a34:	200098dc 	.word	0x200098dc

08002a38 <BSP_LCD_MspInit>:
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a38:	4b4b      	ldr	r3, [pc, #300]	; (8002b68 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a3a:	484c      	ldr	r0, [pc, #304]	; (8002b6c <BSP_LCD_MspInit+0x134>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
{
 8002a42:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
{
 8002a46:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a4a:	2402      	movs	r4, #2
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002a4c:	250e      	movs	r5, #14
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a4e:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a50:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002a54:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002a58:	4e45      	ldr	r6, [pc, #276]	; (8002b70 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002a5a:	9200      	str	r2, [sp, #0]
 8002a5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
 8002a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a68:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8002a6c:	9201      	str	r2, [sp, #4]
 8002a6e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a72:	f042 0210 	orr.w	r2, r2, #16
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
 8002a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a7a:	f002 0210 	and.w	r2, r2, #16
 8002a7e:	9202      	str	r2, [sp, #8]
 8002a80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
 8002a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a8c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002a90:	9203      	str	r2, [sp, #12]
 8002a92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002a94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002aa2:	9204      	str	r2, [sp, #16]
 8002aa4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
 8002aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002ab4:	9205      	str	r2, [sp, #20]
 8002ab6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002ac6:	9206      	str	r2, [sp, #24]
 8002ac8:	9a06      	ldr	r2, [sp, #24]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002acc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002ad8:	9207      	str	r2, [sp, #28]
 8002ada:	9a07      	ldr	r2, [sp, #28]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ade:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002ae6:	950d      	str	r5, [sp, #52]	; 0x34
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	9308      	str	r3, [sp, #32]
 8002aee:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002af0:	2310      	movs	r3, #16
 8002af2:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002af8:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002afc:	f001 faae 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002b00:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002b02:	a909      	add	r1, sp, #36	; 0x24
 8002b04:	481b      	ldr	r0, [pc, #108]	; (8002b74 <BSP_LCD_MspInit+0x13c>)
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002b06:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b08:	e9cd 7409 	strd	r7, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002b0c:	f001 faa6 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002b10:	f44f 4346 	mov.w	r3, #50688	; 0xc600
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002b14:	a909      	add	r1, sp, #36	; 0x24
 8002b16:	4630      	mov	r0, r6
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b18:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b1a:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002b1e:	f001 fa9d 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002b22:	f64e 73ff 	movw	r3, #61439	; 0xefff
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002b26:	a909      	add	r1, sp, #36	; 0x24
 8002b28:	4813      	ldr	r0, [pc, #76]	; (8002b78 <BSP_LCD_MspInit+0x140>)
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b2a:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b2c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002b30:	f001 fa94 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002b34:	23f7      	movs	r3, #247	; 0xf7
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002b36:	a909      	add	r1, sp, #36	; 0x24
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002b38:	950d      	str	r5, [sp, #52]	; 0x34
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b3a:	2501      	movs	r5, #1
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002b3c:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002b40:	4c0e      	ldr	r4, [pc, #56]	; (8002b7c <BSP_LCD_MspInit+0x144>)
 8002b42:	4620      	mov	r0, r4
 8002b44:	f001 fa8a 	bl	800405c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002b48:	a909      	add	r1, sp, #36	; 0x24
 8002b4a:	4630      	mov	r0, r6
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002b4c:	9709      	str	r7, [sp, #36]	; 0x24
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b4e:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002b50:	f001 fa84 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002b54:	2308      	movs	r3, #8
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002b56:	a909      	add	r1, sp, #36	; 0x24
 8002b58:	4620      	mov	r0, r4
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002b5a:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002b5e:	f001 fa7d 	bl	800405c <HAL_GPIO_Init>
}
 8002b62:	b00f      	add	sp, #60	; 0x3c
 8002b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40022000 	.word	0x40022000
 8002b74:	40021800 	.word	0x40021800
 8002b78:	40022400 	.word	0x40022400
 8002b7c:	40022800 	.word	0x40022800

08002b80 <BSP_LCD_ClockConfig>:
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002b80:	4807      	ldr	r0, [pc, #28]	; (8002ba0 <BSP_LCD_ClockConfig+0x20>)
 8002b82:	2308      	movs	r3, #8
 8002b84:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b88:	23c0      	movs	r3, #192	; 0xc0
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b8a:	f500 7082 	add.w	r0, r0, #260	; 0x104
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8002b8e:	6143      	str	r3, [r0, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8002b90:	2305      	movs	r3, #5
 8002b92:	61c3      	str	r3, [r0, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b98:	62c3      	str	r3, [r0, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8002b9a:	f001 bf89 	b.w	8004ab0 <HAL_RCCEx_PeriphCLKConfig>
 8002b9e:	bf00      	nop
 8002ba0:	200098dc 	.word	0x200098dc

08002ba4 <BSP_LCD_Init>:
{    
 8002ba4:	b510      	push	{r4, lr}
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002ba6:	2228      	movs	r2, #40	; 0x28
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002ba8:	4c24      	ldr	r4, [pc, #144]	; (8002c3c <BSP_LCD_Init+0x98>)
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002baa:	2309      	movs	r3, #9
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002bac:	2135      	movs	r1, #53	; 0x35
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002bae:	f240 101b 	movw	r0, #283	; 0x11b
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002bb2:	f240 1c1d 	movw	ip, #285	; 0x11d
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002bb6:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002bba:	230b      	movs	r3, #11
 8002bbc:	e9c4 1317 	strd	r1, r3, [r4, #92]	; 0x5c
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002bc0:	f240 2315 	movw	r3, #533	; 0x215
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002bc4:	2100      	movs	r1, #0
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002bc6:	e9c4 3019 	strd	r3, r0, [r4, #100]	; 0x64
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002bca:	f240 2335 	movw	r3, #565	; 0x235
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002bce:	f104 0040 	add.w	r0, r4, #64	; 0x40
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002bd2:	e9c4 3c1b 	strd	r3, ip, [r4, #108]	; 0x6c
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002bd6:	f7ff ffd3 	bl	8002b80 <BSP_LCD_ClockConfig>
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002bda:	f44f 7ef0 	mov.w	lr, #480	; 0x1e0
 8002bde:	f44f 7388 	mov.w	r3, #272	; 0x110
  hLtdcHandler.Instance = LTDC;
 8002be2:	4620      	mov	r0, r4
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002be4:	e9c4 e328 	strd	lr, r3, [r4, #160]	; 0xa0
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8a4 3074 	strh.w	r3, [r4, #116]	; 0x74
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002bee:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002bf2:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002bf6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hLtdcHandler.Instance = LTDC;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <BSP_LCD_Init+0x9c>)
 8002bfc:	f840 3f40 	str.w	r3, [r0, #64]!
  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002c00:	f001 fc5b 	bl	80044ba <HAL_LTDC_GetState>
 8002c04:	4601      	mov	r1, r0
 8002c06:	b918      	cbnz	r0, 8002c10 <BSP_LCD_Init+0x6c>
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002c08:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002c0c:	f7ff ff14 	bl	8002a38 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&hLtdcHandler);
 8002c10:	480c      	ldr	r0, [pc, #48]	; (8002c44 <BSP_LCD_Init+0xa0>)
 8002c12:	f001 fb99 	bl	8004348 <HAL_LTDC_Init>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002c16:	2201      	movs	r2, #1
 8002c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c1c:	480a      	ldr	r0, [pc, #40]	; (8002c48 <BSP_LCD_Init+0xa4>)
 8002c1e:	f001 fb07 	bl	8004230 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c22:	2201      	movs	r2, #1
 8002c24:	2108      	movs	r1, #8
 8002c26:	4809      	ldr	r0, [pc, #36]	; (8002c4c <BSP_LCD_Init+0xa8>)
 8002c28:	f001 fb02 	bl	8004230 <HAL_GPIO_WritePin>
  BSP_SDRAM_Init();
 8002c2c:	f000 f918 	bl	8002e60 <BSP_SDRAM_Init>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c30:	4807      	ldr	r0, [pc, #28]	; (8002c50 <BSP_LCD_Init+0xac>)
 8002c32:	f7ff fd93 	bl	800275c <BSP_LCD_SetFont>
}
 8002c36:	2000      	movs	r0, #0
 8002c38:	bd10      	pop	{r4, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200098dc 	.word	0x200098dc
 8002c40:	40016800 	.word	0x40016800
 8002c44:	2000991c 	.word	0x2000991c
 8002c48:	40022000 	.word	0x40022000
 8002c4c:	40022800 	.word	0x40022800
 8002c50:	20001a24 	.word	0x20001a24

08002c54 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c58:	4c21      	ldr	r4, [pc, #132]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c5a:	2710      	movs	r7, #16
 8002c5c:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd = 0;
 8002c5e:	f04f 0800 	mov.w	r8, #0
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c62:	19e5      	adds	r5, r4, r7
 8002c64:	4621      	mov	r1, r4
{
 8002c66:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c6c:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8002c6e:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c72:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002c76:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c7a:	f002 f9c2 	bl	8005002 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f000 f978 	bl	8002f74 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002c84:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c86:	4621      	mov	r1, r4
 8002c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c8c:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c8e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8002c92:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c96:	f002 f9b4 	bl	8005002 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c9a:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c9c:	4621      	mov	r1, r4
 8002c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ca2:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002ca4:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8002ca8:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8002caa:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cae:	f002 f9a8 	bl	8005002 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002cb2:	f44f 7308 	mov.w	r3, #544	; 0x220
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002cbc:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002cbe:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cc0:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8002cc2:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002cc4:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8002cc8:	9b01      	ldr	r3, [sp, #4]
 8002cca:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002ccc:	f002 f999 	bl	8005002 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	4628      	mov	r0, r5
}
 8002cd4:	b003      	add	sp, #12
 8002cd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002cda:	f002 b9b1 	b.w	8005040 <HAL_SDRAM_ProgramRefreshRate>
 8002cde:	bf00      	nop
 8002ce0:	20009a64 	.word	0x20009a64

08002ce4 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ce4:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <BSP_SDRAM_MspInit+0x158>)
 8002ce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
{  
 8002cec:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cee:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8002cf0:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
{  
 8002cf4:	4606      	mov	r6, r0
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002cf6:	a909      	add	r1, sp, #36	; 0x24
 8002cf8:	4851      	ldr	r0, [pc, #324]	; (8002e40 <BSP_SDRAM_MspInit+0x15c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cfa:	f002 0201 	and.w	r2, r2, #1
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002cfe:	2400      	movs	r4, #0
  __HAL_RCC_FMC_CLK_ENABLE();
 8002d00:	9201      	str	r2, [sp, #4]
 8002d02:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8002d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d06:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d0e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002d12:	9202      	str	r2, [sp, #8]
 8002d14:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d18:	f042 0204 	orr.w	r2, r2, #4
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d20:	f002 0204 	and.w	r2, r2, #4
 8002d24:	9203      	str	r2, [sp, #12]
 8002d26:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2a:	f042 0208 	orr.w	r2, r2, #8
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d32:	f002 0208 	and.w	r2, r2, #8
 8002d36:	9204      	str	r2, [sp, #16]
 8002d38:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3c:	f042 0210 	orr.w	r2, r2, #16
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
 8002d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d44:	f002 0210 	and.w	r2, r2, #16
 8002d48:	9205      	str	r2, [sp, #20]
 8002d4a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d4e:	f042 0220 	orr.w	r2, r2, #32
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	f002 0220 	and.w	r2, r2, #32
 8002d5a:	9206      	str	r2, [sp, #24]
 8002d5c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
 8002d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d68:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002d6c:	9207      	str	r2, [sp, #28]
 8002d6e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d78:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d80:	9308      	str	r3, [sp, #32]
 8002d82:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002d8a:	930c      	str	r3, [sp, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002d90:	2308      	movs	r3, #8
 8002d92:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002d94:	f001 f962 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002d98:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d9c:	a909      	add	r1, sp, #36	; 0x24
 8002d9e:	4829      	ldr	r0, [pc, #164]	; (8002e44 <BSP_SDRAM_MspInit+0x160>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002da0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002da2:	f001 f95b 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002da6:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002daa:	a909      	add	r1, sp, #36	; 0x24
 8002dac:	4826      	ldr	r0, [pc, #152]	; (8002e48 <BSP_SDRAM_MspInit+0x164>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002dae:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002db0:	f001 f954 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002db4:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002db8:	a909      	add	r1, sp, #36	; 0x24
 8002dba:	4824      	ldr	r0, [pc, #144]	; (8002e4c <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002dbc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002dbe:	f001 f94d 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002dc2:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002dc6:	a909      	add	r1, sp, #36	; 0x24
 8002dc8:	4821      	ldr	r0, [pc, #132]	; (8002e50 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002dca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002dcc:	f001 f946 	bl	800405c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002dd0:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002dd2:	a909      	add	r1, sp, #36	; 0x24
 8002dd4:	481f      	ldr	r0, [pc, #124]	; (8002e54 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002dd6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002dd8:	f001 f940 	bl	800405c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <BSP_SDRAM_MspInit+0x174>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002dde:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002de0:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002de4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002de8:	461d      	mov	r5, r3
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002dea:	675c      	str	r4, [r3, #116]	; 0x74
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002dec:	661c      	str	r4, [r3, #96]	; 0x60
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002dee:	e9c3 4212 	strd	r4, r2, [r3, #72]	; 0x48
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df6:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002dfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dfe:	e9c3 0216 	strd	r0, r2, [r3, #88]	; 0x58
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002e06:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e0a:	2203      	movs	r2, #3
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e0c:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <BSP_SDRAM_MspInit+0x178>)
 8002e12:	f845 2f44 	str.w	r2, [r5, #68]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002e16:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002e18:	6335      	str	r5, [r6, #48]	; 0x30
 8002e1a:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dma_handle);
 8002e1c:	f000 f9f4 	bl	8003208 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002e20:	4628      	mov	r0, r5
 8002e22:	f000 f971 	bl	8003108 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e26:	4622      	mov	r2, r4
 8002e28:	210f      	movs	r1, #15
 8002e2a:	2038      	movs	r0, #56	; 0x38
 8002e2c:	f000 f8cc 	bl	8002fc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e30:	2038      	movs	r0, #56	; 0x38
 8002e32:	f000 f8fb 	bl	800302c <HAL_NVIC_EnableIRQ>
}
 8002e36:	b00e      	add	sp, #56	; 0x38
 8002e38:	bd70      	pop	{r4, r5, r6, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40021400 	.word	0x40021400
 8002e50:	40021800 	.word	0x40021800
 8002e54:	40021c00 	.word	0x40021c00
 8002e58:	20009a64 	.word	0x20009a64
 8002e5c:	40026410 	.word	0x40026410

08002e60 <BSP_SDRAM_Init>:
{ 
 8002e60:	b510      	push	{r4, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 8002e64:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002e66:	4c1b      	ldr	r4, [pc, #108]	; (8002ed4 <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8002e68:	2204      	movs	r2, #4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e6a:	2010      	movs	r0, #16
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002e6c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002e70:	6123      	str	r3, [r4, #16]
  Timing.ExitSelfRefreshDelay = 7;
 8002e72:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002e74:	61e2      	str	r2, [r4, #28]
  Timing.RCDDelay             = 2;
 8002e76:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  Timing.ExitSelfRefreshDelay = 7;
 8002e7a:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8002e7e:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e82:	2340      	movs	r3, #64	; 0x40
  Timing.RowCycleDelay        = 7;
 8002e84:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002e88:	e9c4 0308 	strd	r0, r3, [r4, #32]
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002e8c:	2100      	movs	r1, #0
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002e92:	f104 0010 	add.w	r0, r4, #16
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002e96:	63a1      	str	r1, [r4, #56]	; 0x38
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002e98:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ea0:	e9c4 1105 	strd	r1, r1, [r4, #20]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002ea4:	e9c4 c30c 	strd	ip, r3, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002ea8:	f7ff ff1c 	bl	8002ce4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002eac:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8002eb0:	4c09      	ldr	r4, [pc, #36]	; (8002ed8 <BSP_SDRAM_Init+0x78>)
 8002eb2:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8002eb6:	f002 f884 	bl	8004fc2 <HAL_SDRAM_Init>
 8002eba:	3800      	subs	r0, #0
 8002ebc:	bf18      	it	ne
 8002ebe:	2001      	movne	r0, #1
 8002ec0:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002ec2:	f240 6003 	movw	r0, #1539	; 0x603
 8002ec6:	f7ff fec5 	bl	8002c54 <BSP_SDRAM_Initialization_sequence>
}
 8002eca:	7820      	ldrb	r0, [r4, #0]
 8002ecc:	bd10      	pop	{r4, pc}
 8002ece:	bf00      	nop
 8002ed0:	a0000140 	.word	0xa0000140
 8002ed4:	20009a64 	.word	0x20009a64
 8002ed8:	20001a4c 	.word	0x20001a4c

08002edc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002edc:	490f      	ldr	r1, [pc, #60]	; (8002f1c <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ede:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee0:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002eec:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <SystemInit+0x44>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002ef6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002efe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f02:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <SystemInit+0x48>)
 8002f06:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f10:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f16:	608b      	str	r3, [r1, #8]
#endif
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	e000ed00 	.word	0xe000ed00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	24003010 	.word	0x24003010

08002f28 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8002f28:	4770      	bx	lr
	...

08002f2c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <HAL_Init+0x20>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2e:	2003      	movs	r0, #3
{
 8002f30:	b508      	push	{r3, lr}
  __HAL_FLASH_ART_ENABLE();
 8002f32:	6813      	ldr	r3, [r2, #0]
 8002f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f38:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3a:	f000 f833 	bl	8002fa4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f3e:	200f      	movs	r0, #15
 8002f40:	f7ff f926 	bl	8002190 <HAL_InitTick>
  HAL_MspInit();
 8002f44:	f7ff fff0 	bl	8002f28 <HAL_MspInit>
}
 8002f48:	2000      	movs	r0, #0
 8002f4a:	bd08      	pop	{r3, pc}
 8002f4c:	40023c00 	.word	0x40023c00

08002f50 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002f50:	4a03      	ldr	r2, [pc, #12]	; (8002f60 <HAL_IncTick+0x10>)
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_IncTick+0x14>)
 8002f54:	6811      	ldr	r1, [r2, #0]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	440b      	add	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20009b84 	.word	0x20009b84
 8002f64:	20001a54 	.word	0x20001a54

08002f68 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002f68:	4b01      	ldr	r3, [pc, #4]	; (8002f70 <HAL_GetTick+0x8>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20009b84 	.word	0x20009b84

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff fff6 	bl	8002f68 <HAL_GetTick>
 8002f7c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f7e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002f80:	bf1e      	ittt	ne
 8002f82:	4b04      	ldrne	r3, [pc, #16]	; (8002f94 <HAL_Delay+0x20>)
 8002f84:	781b      	ldrbne	r3, [r3, #0]
 8002f86:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f88:	f7ff ffee 	bl	8002f68 <HAL_GetTick>
 8002f8c:	1b43      	subs	r3, r0, r5
 8002f8e:	42a3      	cmp	r3, r4
 8002f90:	d3fa      	bcc.n	8002f88 <HAL_Delay+0x14>
  {
  }
}
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	20001a54 	.word	0x20001a54

08002f98 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <HAL_GetREVID+0x8>)
 8002f9a:	6818      	ldr	r0, [r3, #0]
}
 8002f9c:	0c00      	lsrs	r0, r0, #16
 8002f9e:	4770      	bx	lr
 8002fa0:	e0042000 	.word	0xe0042000

08002fa4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fa6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002fb2:	0412      	lsls	r2, r2, #16
 8002fb4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002fc0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002fc2:	4770      	bx	lr
 8002fc4:	e000ed00 	.word	0xe000ed00

08002fc8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc8:	4b16      	ldr	r3, [pc, #88]	; (8003024 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fca:	b530      	push	{r4, r5, lr}
 8002fcc:	68dc      	ldr	r4, [r3, #12]
 8002fce:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	2d04      	cmp	r5, #4
 8002fda:	bf28      	it	cs
 8002fdc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe4:	bf8c      	ite	hi
 8002fe6:	3c03      	subhi	r4, #3
 8002fe8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fea:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8002fee:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ffc:	fa01 f104 	lsl.w	r1, r1, r4
 8003000:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003008:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800300a:	db06      	blt.n	800301a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800300c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003010:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003014:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003018:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	f000 000f 	and.w	r0, r0, #15
 800301e:	4a02      	ldr	r2, [pc, #8]	; (8003028 <HAL_NVIC_SetPriority+0x60>)
 8003020:	5413      	strb	r3, [r2, r0]
 8003022:	e7f9      	b.n	8003018 <HAL_NVIC_SetPriority+0x50>
 8003024:	e000ed00 	.word	0xe000ed00
 8003028:	e000ed14 	.word	0xe000ed14

0800302c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800302c:	2800      	cmp	r0, #0
 800302e:	db08      	blt.n	8003042 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003030:	0942      	lsrs	r2, r0, #5
 8003032:	2301      	movs	r3, #1
 8003034:	f000 001f 	and.w	r0, r0, #31
 8003038:	fa03 f000 	lsl.w	r0, r3, r0
 800303c:	4b01      	ldr	r3, [pc, #4]	; (8003044 <HAL_NVIC_EnableIRQ+0x18>)
 800303e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100

08003048 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003048:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_MPU_Disable+0x18>)
 800304e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003050:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003054:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003056:	2200      	movs	r2, #0
 8003058:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_MPU_Enable+0x1c>)
 8003066:	f040 0001 	orr.w	r0, r0, #1
 800306a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003076:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800307a:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003084:	7843      	ldrb	r3, [r0, #1]
 8003086:	4a14      	ldr	r2, [pc, #80]	; (80030d8 <HAL_MPU_ConfigRegion+0x54>)
 8003088:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800308c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003098:	6843      	ldr	r3, [r0, #4]
 800309a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800309e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030a0:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030a4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030a8:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030aa:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030ac:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030ae:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030b2:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030b4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030b8:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030ba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030be:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030c4:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80030ca:	7a01      	ldrb	r1, [r0, #8]
 80030cc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030dc:	6803      	ldr	r3, [r0, #0]
{
 80030de:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e0:	2018      	movs	r0, #24
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	3910      	subs	r1, #16
 80030e6:	fbb1 f0f0 	udiv	r0, r1, r0
{
 80030ea:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ec:	4c05      	ldr	r4, [pc, #20]	; (8003104 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80030ee:	295f      	cmp	r1, #95	; 0x5f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f0:	5c20      	ldrb	r0, [r4, r0]
 80030f2:	65d0      	str	r0, [r2, #92]	; 0x5c
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030f4:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 80030f8:	f020 0003 	bic.w	r0, r0, #3
 80030fc:	bf88      	it	hi
 80030fe:	3004      	addhi	r0, #4
 8003100:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8003102:	bd10      	pop	{r4, pc}
 8003104:	08013590 	.word	0x08013590

08003108 <HAL_DMA_Init>:
{
 8003108:	b570      	push	{r4, r5, r6, lr}
 800310a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff ff2c 	bl	8002f68 <HAL_GetTick>
 8003110:	4605      	mov	r5, r0
  if(hdma == NULL)
 8003112:	2c00      	cmp	r4, #0
 8003114:	d062      	beq.n	80031dc <HAL_DMA_Init+0xd4>
  hdma->State = HAL_DMA_STATE_BUSY;
 8003116:	2302      	movs	r3, #2
  __HAL_DMA_DISABLE(hdma);
 8003118:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800311a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800311e:	2300      	movs	r3, #0
 8003120:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800312c:	6821      	ldr	r1, [r4, #0]
 800312e:	680b      	ldr	r3, [r1, #0]
 8003130:	07d8      	lsls	r0, r3, #31
 8003132:	d42f      	bmi.n	8003194 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8003134:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003136:	4d33      	ldr	r5, [pc, #204]	; (8003204 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003138:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800313a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800313c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8003140:	4313      	orrs	r3, r2
 8003142:	68e2      	ldr	r2, [r4, #12]
 8003144:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003146:	6922      	ldr	r2, [r4, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	6962      	ldr	r2, [r4, #20]
 800314c:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314e:	69e2      	ldr	r2, [r4, #28]
 8003150:	4303      	orrs	r3, r0
 8003152:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8003154:	6a22      	ldr	r2, [r4, #32]
 8003156:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003158:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800315a:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315c:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003160:	bf02      	ittt	eq
 8003162:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8003166:	4335      	orreq	r5, r6
 8003168:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800316a:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 800316c:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 800316e:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003170:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8003174:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003178:	d136      	bne.n	80031e8 <HAL_DMA_Init+0xe0>
    tmp |= hdma->Init.FIFOThreshold;
 800317a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800317c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800317e:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003180:	b395      	cbz	r5, 80031e8 <HAL_DMA_Init+0xe0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003182:	b990      	cbnz	r0, 80031aa <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8003184:	2a01      	cmp	r2, #1
 8003186:	d021      	beq.n	80031cc <HAL_DMA_Init+0xc4>
 8003188:	f032 0202 	bics.w	r2, r2, #2
 800318c:	d12c      	bne.n	80031e8 <HAL_DMA_Init+0xe0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800318e:	01ea      	lsls	r2, r5, #7
 8003190:	d52a      	bpl.n	80031e8 <HAL_DMA_Init+0xe0>
 8003192:	e01e      	b.n	80031d2 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003194:	f7ff fee8 	bl	8002f68 <HAL_GetTick>
 8003198:	1b40      	subs	r0, r0, r5
 800319a:	2805      	cmp	r0, #5
 800319c:	d9c6      	bls.n	800312c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800319e:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031a2:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031a4:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031aa:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80031ae:	d117      	bne.n	80031e0 <HAL_DMA_Init+0xd8>
    switch (tmp)
 80031b0:	2a03      	cmp	r2, #3
 80031b2:	d819      	bhi.n	80031e8 <HAL_DMA_Init+0xe0>
 80031b4:	a001      	add	r0, pc, #4	; (adr r0, 80031bc <HAL_DMA_Init+0xb4>)
 80031b6:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031d3 	.word	0x080031d3
 80031c0:	0800318f 	.word	0x0800318f
 80031c4:	080031d3 	.word	0x080031d3
 80031c8:	080031cd 	.word	0x080031cd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031cc:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80031d0:	d10a      	bne.n	80031e8 <HAL_DMA_Init+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_RESET;
 80031d6:	2300      	movs	r3, #0
 80031d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 80031dc:	2001      	movs	r0, #1
 80031de:	e7e3      	b.n	80031a8 <HAL_DMA_Init+0xa0>
    switch (tmp)
 80031e0:	2a02      	cmp	r2, #2
 80031e2:	d9f6      	bls.n	80031d2 <HAL_DMA_Init+0xca>
 80031e4:	2a03      	cmp	r2, #3
 80031e6:	d0d2      	beq.n	800318e <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80031e8:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff ff76 	bl	80030dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031f0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80031f2:	233f      	movs	r3, #63	; 0x3f
 80031f4:	4093      	lsls	r3, r2
 80031f6:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031f8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80031fa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80031fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003202:	e7d1      	b.n	80031a8 <HAL_DMA_Init+0xa0>
 8003204:	f010803f 	.word	0xf010803f

08003208 <HAL_DMA_DeInit>:
{
 8003208:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800320a:	4605      	mov	r5, r0
 800320c:	b320      	cbz	r0, 8003258 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800320e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003212:	2b02      	cmp	r3, #2
 8003214:	b2dc      	uxtb	r4, r3
 8003216:	d01d      	beq.n	8003254 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8003218:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 800321a:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003224:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8003226:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8003228:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800322a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800322c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800322e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003230:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003232:	f7ff ff53 	bl	80030dc <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003236:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8003238:	233f      	movs	r3, #63	; 0x3f
 800323a:	4093      	lsls	r3, r2
 800323c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8003240:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8003244:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8003248:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 800324c:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8003250:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
}
 8003254:	4620      	mov	r0, r4
 8003256:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003258:	2401      	movs	r4, #1
 800325a:	e7fb      	b.n	8003254 <HAL_DMA_DeInit+0x4c>

0800325c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800325e:	6804      	ldr	r4, [r0, #0]
 8003260:	9d04      	ldr	r5, [sp, #16]
 8003262:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8003264:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003268:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 800326c:	4333      	orrs	r3, r6
 800326e:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003270:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003272:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003274:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003278:	d130      	bne.n	80032dc <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800327a:	6886      	ldr	r6, [r0, #8]
 800327c:	b11e      	cbz	r6, 8003286 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800327e:	2e01      	cmp	r6, #1
 8003280:	d103      	bne.n	800328a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003282:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003286:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003288:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800328a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800328c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003290:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003294:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003296:	d107      	bne.n	80032a8 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8003298:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800329a:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800329c:	02db      	lsls	r3, r3, #11
 800329e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80032a2:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 80032a6:	e7ee      	b.n	8003286 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80032a8:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80032aa:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80032ae:	d10a      	bne.n	80032c6 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 80032b0:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 80032b2:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80032b4:	0289      	lsls	r1, r1, #10
      tmp1 = (tmp1 >> 31U);
 80032b6:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80032b8:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 80032bc:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 80032c0:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 80032c4:	e7df      	b.n	8003286 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 80032c6:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 80032c8:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032ca:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 80032cc:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80032ce:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 80032d2:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 80032d6:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 80032da:	e7d4      	b.n	8003286 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80032dc:	60e1      	str	r1, [r4, #12]
}
 80032de:	e7d3      	b.n	8003288 <DMA2D_SetConfig+0x2c>

080032e0 <HAL_DMA2D_MspInit>:
}
 80032e0:	4770      	bx	lr

080032e2 <HAL_DMA2D_Init>:
{
 80032e2:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 80032e4:	4604      	mov	r4, r0
 80032e6:	b330      	cbz	r0, 8003336 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80032e8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032f0:	b91b      	cbnz	r3, 80032fa <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80032f2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 80032f6:	f7ff fff3 	bl	80032e0 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032fa:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80032fc:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80032fe:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003300:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003302:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003306:	6813      	ldr	r3, [r2, #0]
 8003308:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800330c:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800330e:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003310:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003312:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800331a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800331c:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800331e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003320:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003324:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003328:	430b      	orrs	r3, r1
 800332a:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800332c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800332e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003330:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003334:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003336:	2001      	movs	r0, #1
 8003338:	e7fc      	b.n	8003334 <HAL_DMA2D_Init+0x52>

0800333a <HAL_DMA2D_Start>:
{
 800333a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800333c:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
{
 8003340:	4604      	mov	r4, r0
  __HAL_LOCK(hdma2d);
 8003342:	2d01      	cmp	r5, #1
 8003344:	f04f 0502 	mov.w	r5, #2
 8003348:	d00f      	beq.n	800336a <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800334a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 800334e:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003350:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8003352:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003356:	9500      	str	r5, [sp, #0]
 8003358:	f7ff ff80 	bl	800325c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 800335c:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
 800335e:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	4333      	orrs	r3, r6
 8003364:	6013      	str	r3, [r2, #0]
}
 8003366:	b002      	add	sp, #8
 8003368:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800336a:	4628      	mov	r0, r5
 800336c:	e7fb      	b.n	8003366 <HAL_DMA2D_Start+0x2c>

0800336e <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 800336e:	2300      	movs	r3, #0
{
 8003370:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8003372:	9301      	str	r3, [sp, #4]
{
 8003374:	4604      	mov	r4, r0
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003376:	6803      	ldr	r3, [r0, #0]
{
 8003378:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	07db      	lsls	r3, r3, #31
 800337e:	d417      	bmi.n	80033b0 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003384:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003386:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8003388:	069e      	lsls	r6, r3, #26
 800338a:	d506      	bpl.n	800339a <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 800338c:	f7ff fdec 	bl	8002f68 <HAL_GetTick>
 8003390:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	06d2      	lsls	r2, r2, #27
 8003398:	d543      	bpl.n	8003422 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 800339e:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80033a0:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033a2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 80033a4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80033ac:	b002      	add	sp, #8
 80033ae:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 80033b0:	f7ff fdda 	bl	8002f68 <HAL_GetTick>
 80033b4:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	0792      	lsls	r2, r2, #30
 80033bc:	d4e0      	bmi.n	8003380 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80033c2:	9a01      	ldr	r2, [sp, #4]
 80033c4:	f012 0f21 	tst.w	r2, #33	; 0x21
 80033c8:	d017      	beq.n	80033fa <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80033ca:	9a01      	ldr	r2, [sp, #4]
 80033cc:	0695      	lsls	r5, r2, #26
 80033ce:	d503      	bpl.n	80033d8 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80033d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033d2:	f042 0202 	orr.w	r2, r2, #2
 80033d6:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033d8:	9a01      	ldr	r2, [sp, #4]
 80033da:	07d0      	lsls	r0, r2, #31
 80033dc:	d503      	bpl.n	80033e6 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033e6:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033e8:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033ea:	2304      	movs	r3, #4
        return HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80033ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 80033f2:	2300      	movs	r3, #0
 80033f4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 80033f8:	e7d8      	b.n	80033ac <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 80033fa:	1c69      	adds	r1, r5, #1
 80033fc:	d0dc      	beq.n	80033b8 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80033fe:	f7ff fdb3 	bl	8002f68 <HAL_GetTick>
 8003402:	1b80      	subs	r0, r0, r6
 8003404:	42a8      	cmp	r0, r5
 8003406:	d801      	bhi.n	800340c <HAL_DMA2D_PollForTransfer+0x9e>
 8003408:	2d00      	cmp	r5, #0
 800340a:	d1d4      	bne.n	80033b6 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800340c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800340e:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003410:	f043 0320 	orr.w	r3, r3, #32
 8003414:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8003416:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003418:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800341c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8003420:	e7c4      	b.n	80033ac <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003426:	9a01      	ldr	r2, [sp, #4]
 8003428:	f012 0f29 	tst.w	r2, #41	; 0x29
 800342c:	d016      	beq.n	800345c <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800342e:	9a01      	ldr	r2, [sp, #4]
 8003430:	0716      	lsls	r6, r2, #28
 8003432:	d503      	bpl.n	800343c <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003434:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003436:	f042 0204 	orr.w	r2, r2, #4
 800343a:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800343c:	9a01      	ldr	r2, [sp, #4]
 800343e:	0695      	lsls	r5, r2, #26
 8003440:	d503      	bpl.n	800344a <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003442:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003444:	f042 0202 	orr.w	r2, r2, #2
 8003448:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800344a:	9a01      	ldr	r2, [sp, #4]
 800344c:	07d0      	lsls	r0, r2, #31
 800344e:	d503      	bpl.n	8003458 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003450:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003458:	2229      	movs	r2, #41	; 0x29
 800345a:	e7c5      	b.n	80033e8 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 800345c:	1c69      	adds	r1, r5, #1
 800345e:	d099      	beq.n	8003394 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003460:	f7ff fd82 	bl	8002f68 <HAL_GetTick>
 8003464:	1b80      	subs	r0, r0, r6
 8003466:	42a8      	cmp	r0, r5
 8003468:	d8d0      	bhi.n	800340c <HAL_DMA2D_PollForTransfer+0x9e>
 800346a:	2d00      	cmp	r5, #0
 800346c:	d191      	bne.n	8003392 <HAL_DMA2D_PollForTransfer+0x24>
 800346e:	e7cd      	b.n	800340c <HAL_DMA2D_PollForTransfer+0x9e>

08003470 <HAL_DMA2D_ConfigLayer>:
{
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8003472:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003476:	2b01      	cmp	r3, #1
 8003478:	f04f 0302 	mov.w	r3, #2
 800347c:	d02b      	beq.n	80034d6 <HAL_DMA2D_ConfigLayer+0x66>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800347e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8003482:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003484:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003488:	4f1c      	ldr	r7, [pc, #112]	; (80034fc <HAL_DMA2D_ConfigLayer+0x8c>)
  __HAL_LOCK(hdma2d);
 800348a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800348e:	010e      	lsls	r6, r1, #4
 8003490:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003492:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8003496:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800349a:	3c09      	subs	r4, #9
 800349c:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800349e:	bf96      	itet	ls
 80034a0:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80034a4:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80034a8:	431a      	orrls	r2, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034aa:	6803      	ldr	r3, [r0, #0]
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80034ac:	b9a9      	cbnz	r1, 80034da <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034b0:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80034b2:	ea01 0107 	and.w	r1, r1, r7
 80034b6:	ea42 0201 	orr.w	r2, r2, r1
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80034bc:	6982      	ldr	r2, [r0, #24]
 80034be:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034c0:	d803      	bhi.n	80034ca <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80034c2:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80034c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80034c8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 80034d0:	2300      	movs	r3, #0
 80034d2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 80034d6:	4618      	mov	r0, r3
}
 80034d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80034da:	69d9      	ldr	r1, [r3, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034dc:	2c01      	cmp	r4, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80034de:	ea01 0107 	and.w	r1, r1, r7
 80034e2:	ea42 0201 	orr.w	r2, r2, r1
 80034e6:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80034e8:	eb00 0206 	add.w	r2, r0, r6
 80034ec:	6992      	ldr	r2, [r2, #24]
 80034ee:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80034f0:	d8eb      	bhi.n	80034ca <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80034f2:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 80034f6:	621d      	str	r5, [r3, #32]
 80034f8:	e7e7      	b.n	80034ca <HAL_DMA2D_ConfigLayer+0x5a>
 80034fa:	bf00      	nop
 80034fc:	00fcfff0 	.word	0x00fcfff0

08003500 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003504:	6a86      	ldr	r6, [r0, #40]	; 0x28
{
 8003506:	4691      	mov	r9, r2
 8003508:	eb00 0786 	add.w	r7, r0, r6, lsl #2
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800350c:	69bb      	ldr	r3, [r7, #24]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800350e:	681c      	ldr	r4, [r3, #0]
 8003510:	2c00      	cmp	r4, #0
 8003512:	da02      	bge.n	800351a <ETH_Prepare_Tx_Descriptors+0x1a>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
  {
    return HAL_ETH_ERROR_BUSY;
 8003514:	2002      	movs	r0, #2
  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 8003516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800351a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800351c:	2c00      	cmp	r4, #0
 800351e:	d1f9      	bne.n	8003514 <ETH_Prepare_Tx_Descriptors+0x14>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003520:	688c      	ldr	r4, [r1, #8]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003522:	f8d1 e000 	ldr.w	lr, [r1]
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003526:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003528:	6862      	ldr	r2, [r4, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800352a:	f01e 0f01 	tst.w	lr, #1
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800352e:	609d      	str	r5, [r3, #8]
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003530:	685d      	ldr	r5, [r3, #4]
 8003532:	f425 55ff 	bic.w	r5, r5, #8160	; 0x1fe0
 8003536:	f025 051f 	bic.w	r5, r5, #31
 800353a:	ea45 0502 	orr.w	r5, r5, r2
 800353e:	605d      	str	r5, [r3, #4]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003540:	d006      	beq.n	8003550 <ETH_Prepare_Tx_Descriptors+0x50>
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003542:	681d      	ldr	r5, [r3, #0]
 8003544:	f425 0c40 	bic.w	ip, r5, #12582912	; 0xc00000
 8003548:	694d      	ldr	r5, [r1, #20]
 800354a:	ea4c 0505 	orr.w	r5, ip, r5
 800354e:	601d      	str	r5, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003550:	f01e 0f20 	tst.w	lr, #32
 8003554:	d005      	beq.n	8003562 <ETH_Prepare_Tx_Descriptors+0x62>
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003556:	681d      	ldr	r5, [r3, #0]
 8003558:	6909      	ldr	r1, [r1, #16]
 800355a:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
 800355e:	4329      	orrs	r1, r5
 8003560:	6019      	str	r1, [r3, #0]
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003562:	f01e 0f04 	tst.w	lr, #4
 8003566:	d003      	beq.n	8003570 <ETH_Prepare_Tx_Descriptors+0x70>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800356e:	6019      	str	r1, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003570:	6819      	ldr	r1, [r3, #0]
  uint32_t           bd_count = 0;
 8003572:	2500      	movs	r5, #0
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003574:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8003664 <ETH_Prepare_Tx_Descriptors+0x164>
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003578:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800357c:	6019      	str	r1, [r3, #0]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800357e:	4631      	mov	r1, r6
  while (txbuffer->next != NULL)
 8003580:	68a4      	ldr	r4, [r4, #8]
 8003582:	f105 0e01 	add.w	lr, r5, #1
 8003586:	bb1c      	cbnz	r4, 80035d0 <ETH_Prepare_Tx_Descriptors+0xd0>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003588:	681a      	ldr	r2, [r3, #0]
  if (ItMode != ((uint32_t)RESET))
 800358a:	f1b9 0f00 	cmp.w	r9, #0
 800358e:	d066      	beq.n	800365e <ETH_Prepare_Tx_Descriptors+0x15e>
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003590:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003594:	601a      	str	r2, [r3, #0]
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800359c:	601a      	str	r2, [r3, #0]
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800359e:	69ba      	ldr	r2, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80035a0:	f3bf 8f5f 	dmb	sy
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035a4:	6813      	ldr	r3, [r2, #0]
 80035a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035aa:	6013      	str	r3, [r2, #0]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80035ac:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80035b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80035b2:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80035b4:	6281      	str	r1, [r0, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ba:	2301      	movs	r3, #1
 80035bc:	f383 8810 	msr	PRIMASK, r3
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80035c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035c2:	3301      	adds	r3, #1
 80035c4:	442b      	add	r3, r5
 80035c6:	6403      	str	r3, [r0, #64]	; 0x40
 80035c8:	f382 8810 	msr	PRIMASK, r2
  return HAL_ETH_ERROR_NONE;
 80035cc:	2000      	movs	r0, #0
 80035ce:	e7a2      	b.n	8003516 <ETH_Prepare_Tx_Descriptors+0x16>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80035d0:	681d      	ldr	r5, [r3, #0]
 80035d2:	f025 5500 	bic.w	r5, r5, #536870912	; 0x20000000
 80035d6:	601d      	str	r5, [r3, #0]
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035d8:	681d      	ldr	r5, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80035da:	f1b9 0f00 	cmp.w	r9, #0
 80035de:	d023      	beq.n	8003628 <ETH_Prepare_Tx_Descriptors+0x128>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035e0:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035e4:	f101 0c01 	add.w	ip, r1, #1
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80035e8:	601d      	str	r5, [r3, #0]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80035ea:	f1bc 0f03 	cmp.w	ip, #3
 80035ee:	bf88      	it	hi
 80035f0:	f1a1 0c03 	subhi.w	ip, r1, #3
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80035f4:	eb00 018c 	add.w	r1, r0, ip, lsl #2
 80035f8:	698b      	ldr	r3, [r1, #24]
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80035fa:	681d      	ldr	r5, [r3, #0]
 80035fc:	2d00      	cmp	r5, #0
 80035fe:	da16      	bge.n	800362e <ETH_Prepare_Tx_Descriptors+0x12e>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003600:	69b9      	ldr	r1, [r7, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8003602:	2200      	movs	r2, #0
 8003604:	4572      	cmp	r2, lr
 8003606:	d085      	beq.n	8003514 <ETH_Prepare_Tx_Descriptors+0x14>
  __ASM volatile ("dmb 0xF":::"memory");
 8003608:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800360c:	680b      	ldr	r3, [r1, #0]
      for (idx = 0; idx < descnbr; idx ++)
 800360e:	3201      	adds	r2, #1
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003610:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003614:	600b      	str	r3, [r1, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003616:	1c73      	adds	r3, r6, #1
 8003618:	2b03      	cmp	r3, #3
 800361a:	bf88      	it	hi
 800361c:	1ef3      	subhi	r3, r6, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800361e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
      for (idx = 0; idx < descnbr; idx ++)
 8003622:	461e      	mov	r6, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003624:	6989      	ldr	r1, [r1, #24]
      for (idx = 0; idx < descnbr; idx ++)
 8003626:	e7ed      	b.n	8003604 <ETH_Prepare_Tx_Descriptors+0x104>
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003628:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 800362c:	e7da      	b.n	80035e4 <ETH_Prepare_Tx_Descriptors+0xe4>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800362e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8003630:	2900      	cmp	r1, #0
 8003632:	d1e5      	bne.n	8003600 <ETH_Prepare_Tx_Descriptors+0x100>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003634:	6819      	ldr	r1, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003636:	6865      	ldr	r5, [r4, #4]
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003638:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800363c:	6019      	str	r1, [r3, #0]
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800363e:	6821      	ldr	r1, [r4, #0]
 8003640:	6099      	str	r1, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	ea01 0108 	and.w	r1, r1, r8
 8003648:	4329      	orrs	r1, r5
 800364a:	6059      	str	r1, [r3, #4]
 800364c:	f3bf 8f5f 	dmb	sy
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003650:	6819      	ldr	r1, [r3, #0]
 8003652:	4675      	mov	r5, lr
 8003654:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003658:	6019      	str	r1, [r3, #0]
 800365a:	4661      	mov	r1, ip
 800365c:	e790      	b.n	8003580 <ETH_Prepare_Tx_Descriptors+0x80>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800365e:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003662:	e797      	b.n	8003594 <ETH_Prepare_Tx_Descriptors+0x94>
 8003664:	ffffe000 	.word	0xffffe000

08003668 <ETH_SetMACConfig>:
  tmpreg1 = (heth->Instance)->MACCR;
 8003668:	6802      	ldr	r2, [r0, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800366a:	f8df c108 	ldr.w	ip, [pc, #264]	; 8003774 <ETH_SetMACConfig+0x10c>
{
 800366e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tmpreg1 = (heth->Instance)->MACCR;
 8003672:	6813      	ldr	r3, [r2, #0]
{
 8003674:	460d      	mov	r5, r1
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003676:	f891 e01f 	ldrb.w	lr, [r1, #31]
{
 800367a:	4604      	mov	r4, r0
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800367c:	ea03 0c0c 	and.w	ip, r3, ip
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003680:	7c0b      	ldrb	r3, [r1, #16]
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003682:	f891 800e 	ldrb.w	r8, [r1, #14]
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003686:	2b00      	cmp	r3, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003688:	7c4b      	ldrb	r3, [r1, #17]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800368a:	f895 a01c 	ldrb.w	sl, [r5, #28]
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800368e:	bf0c      	ite	eq
 8003690:	f44f 0700 	moveq.w	r7, #8388608	; 0x800000
 8003694:	2700      	movne	r7, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003696:	2b00      	cmp	r3, #0
 8003698:	688b      	ldr	r3, [r1, #8]
 800369a:	6949      	ldr	r1, [r1, #20]
 800369c:	bf0c      	ite	eq
 800369e:	f44f 0680 	moveq.w	r6, #4194304	; 0x400000
 80036a2:	2600      	movne	r6, #0
 80036a4:	430b      	orrs	r3, r1
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80036a6:	7fa9      	ldrb	r1, [r5, #30]
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80036a8:	f895 9004 	ldrb.w	r9, [r5, #4]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80036ac:	2900      	cmp	r1, #0
 80036ae:	69a9      	ldr	r1, [r5, #24]
 80036b0:	ea43 0301 	orr.w	r3, r3, r1
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80036b4:	f895 1020 	ldrb.w	r1, [r5, #32]
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80036b8:	bf0c      	ite	eq
 80036ba:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 80036be:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80036c0:	2900      	cmp	r1, #0
 80036c2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80036c4:	ea43 0301 	orr.w	r3, r3, r1
 80036c8:	bf0c      	ite	eq
 80036ca:	f44f 7b00 	moveq.w	fp, #512	; 0x200
 80036ce:	f04f 0b00 	movne.w	fp, #0
 80036d2:	ea43 6348 	orr.w	r3, r3, r8, lsl #25
 80036d6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80036da:	f895 e00f 	ldrb.w	lr, [r5, #15]
 80036de:	ea43 330a 	orr.w	r3, r3, sl, lsl #12
 80036e2:	ea43 2389 	orr.w	r3, r3, r9, lsl #10
 80036e6:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80036ea:	f895 e028 	ldrb.w	lr, [r5, #40]	; 0x28
 80036ee:	ea43 130e 	orr.w	r3, r3, lr, lsl #4
 80036f2:	ea43 030c 	orr.w	r3, r3, ip
 80036f6:	433b      	orrs	r3, r7
 80036f8:	4333      	orrs	r3, r6
 80036fa:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036fc:	2001      	movs	r0, #1
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80036fe:	ea43 030b 	orr.w	r3, r3, fp
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003702:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8003704:	6816      	ldr	r6, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003706:	f7ff fc35 	bl	8002f74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 800370e:	600e      	str	r6, [r1, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 8003710:	6988      	ldr	r0, [r1, #24]
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003712:	6cae      	ldr	r6, [r5, #72]	; 0x48
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003714:	f020 00be 	bic.w	r0, r0, #190	; 0xbe
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003718:	f895 304c 	ldrb.w	r3, [r5, #76]	; 0x4c
 800371c:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003720:	0400      	lsls	r0, r0, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003722:	2b00      	cmp	r3, #0
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003724:	ea4f 4010 	mov.w	r0, r0, lsr #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003728:	bf0c      	ite	eq
 800372a:	2380      	moveq	r3, #128	; 0x80
 800372c:	2300      	movne	r3, #0
 800372e:	4302      	orrs	r2, r0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003730:	f895 0055 	ldrb.w	r0, [r5, #85]	; 0x55
 8003734:	2801      	cmp	r0, #1
 8003736:	ea42 0203 	orr.w	r2, r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800373a:	f895 3056 	ldrb.w	r3, [r5, #86]	; 0x56
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800373e:	bf0c      	ite	eq
 8003740:	2008      	moveq	r0, #8
 8003742:	2000      	movne	r0, #0
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003744:	2b01      	cmp	r3, #1
 8003746:	ea42 0200 	orr.w	r2, r2, r0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800374a:	f895 0054 	ldrb.w	r0, [r5, #84]	; 0x54
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800374e:	bf0c      	ite	eq
 8003750:	2304      	moveq	r3, #4
 8003752:	2300      	movne	r3, #0
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003754:	2801      	cmp	r0, #1
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003756:	ea43 0302 	orr.w	r3, r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800375a:	bf0c      	ite	eq
 800375c:	2002      	moveq	r0, #2
 800375e:	2000      	movne	r0, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003760:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003762:	2001      	movs	r0, #1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003764:	618b      	str	r3, [r1, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8003766:	698d      	ldr	r5, [r1, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003768:	f7ff fc04 	bl	8002f74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800376c:	6823      	ldr	r3, [r4, #0]
 800376e:	619d      	str	r5, [r3, #24]
}
 8003770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003774:	fd20810f 	.word	0xfd20810f

08003778 <ETH_SetDMAConfig>:
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003778:	6802      	ldr	r2, [r0, #0]
 800377a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
{
 800377e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003780:	6993      	ldr	r3, [r2, #24]
{
 8003782:	4605      	mov	r5, r0
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003784:	4826      	ldr	r0, [pc, #152]	; (8003820 <ETH_SetDMAConfig+0xa8>)
{
 8003786:	460c      	mov	r4, r1
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003788:	f891 c00d 	ldrb.w	ip, [r1, #13]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800378c:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800378e:	7b0b      	ldrb	r3, [r1, #12]
 8003790:	6a27      	ldr	r7, [r4, #32]
 8003792:	2b00      	cmp	r3, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003794:	7f4b      	ldrb	r3, [r1, #29]
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003796:	bf0c      	ite	eq
 8003798:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 800379c:	2600      	movne	r6, #0
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800379e:	2b00      	cmp	r3, #0
 80037a0:	6963      	ldr	r3, [r4, #20]
 80037a2:	ea43 0307 	orr.w	r3, r3, r7
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80037a6:	7ba7      	ldrb	r7, [r4, #14]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80037a8:	bf0c      	ite	eq
 80037aa:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 80037ae:	2100      	movne	r1, #0
 80037b0:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
 80037b4:	ea43 5347 	orr.w	r3, r3, r7, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80037b8:	7f27      	ldrb	r7, [r4, #28]
 80037ba:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80037be:	7fa7      	ldrb	r7, [r4, #30]
 80037c0:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80037c4:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 80037c8:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
 80037cc:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037ce:	2001      	movs	r0, #1
 80037d0:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80037d2:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80037d4:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80037d6:	6996      	ldr	r6, [r2, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037d8:	f7ff fbcc 	bl	8002f74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80037dc:	682a      	ldr	r2, [r5, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037de:	2001      	movs	r0, #1
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037e0:	69a1      	ldr	r1, [r4, #24]
  (heth->Instance)->DMAOMR = tmpreg1;
 80037e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037e6:	68a3      	ldr	r3, [r4, #8]
  (heth->Instance)->DMAOMR = tmpreg1;
 80037e8:	6196      	str	r6, [r2, #24]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037ea:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80037ec:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037f0:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80037f4:	6921      	ldr	r1, [r4, #16]
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6821      	ldr	r1, [r4, #0]
 80037fa:	430b      	orrs	r3, r1
 80037fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80037fe:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003802:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003804:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003808:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800380c:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 800380e:	6814      	ldr	r4, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003810:	f7ff fbb0 	bl	8002f74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800381a:	601c      	str	r4, [r3, #0]
}
 800381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800381e:	bf00      	nop
 8003820:	f8de3f23 	.word	0xf8de3f23

08003824 <ETH_FlushTransmitFIFO>:
  __IO uint32_t tmpreg = 0;
 8003824:	2300      	movs	r3, #0
{
 8003826:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmpreg = 0;
 8003828:	9301      	str	r3, [sp, #4]
{
 800382a:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800382c:	6803      	ldr	r3, [r0, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800382e:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800383a:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003840:	f7ff fb98 	bl	8002f74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	9a01      	ldr	r2, [sp, #4]
 8003848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384c:	619a      	str	r2, [r3, #24]
}
 800384e:	b002      	add	sp, #8
 8003850:	bd10      	pop	{r4, pc}
	...

08003854 <ETH_UpdateDescriptor>:
{
 8003854:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t *buff = NULL;
 8003858:	2300      	movs	r3, #0
  descidx = heth->RxDescList.RxBuildDescIdx;
 800385a:	6e86      	ldr	r6, [r0, #104]	; 0x68
{
 800385c:	4604      	mov	r4, r0
  desccount = heth->RxDescList.RxBuildDescCnt;
 800385e:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
  uint8_t *buff = NULL;
 8003860:	9301      	str	r3, [sp, #4]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003862:	f106 0312 	add.w	r3, r6, #18
  uint8_t allocStatus = 1U;
 8003866:	f04f 0801 	mov.w	r8, #1
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800386a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80038ec <ETH_UpdateDescriptor+0x98>
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800386e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003872:	b117      	cbz	r7, 800387a <ETH_UpdateDescriptor+0x26>
 8003874:	f1b8 0f00 	cmp.w	r8, #0
 8003878:	d114      	bne.n	80038a4 <ETH_UpdateDescriptor+0x50>
  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800387a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800387c:	42bb      	cmp	r3, r7
 800387e:	d00e      	beq.n	800389e <ETH_UpdateDescriptor+0x4a>
 8003880:	f3bf 8f5f 	dmb	sy
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003884:	1c72      	adds	r2, r6, #1
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	2028      	movs	r0, #40	; 0x28
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800388a:	f002 0103 	and.w	r1, r2, #3
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800388e:	6922      	ldr	r2, [r4, #16]
 8003890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003894:	fb00 2201 	mla	r2, r0, r1, r2
 8003898:	609a      	str	r2, [r3, #8]
    heth->RxDescList.RxBuildDescCnt = desccount;
 800389a:	e9c4 671a 	strd	r6, r7, [r4, #104]	; 0x68
}
 800389e:	b003      	add	sp, #12
 80038a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80038a4:	6a2b      	ldr	r3, [r5, #32]
 80038a6:	b933      	cbnz	r3, 80038b6 <ETH_UpdateDescriptor+0x62>
      HAL_ETH_RxAllocateCallback(&buff);
 80038a8:	a801      	add	r0, sp, #4
 80038aa:	f7fd f9c5 	bl	8000c38 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 80038ae:	9b01      	ldr	r3, [sp, #4]
 80038b0:	b1cb      	cbz	r3, 80038e6 <ETH_UpdateDescriptor+0x92>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80038b2:	622b      	str	r3, [r5, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80038b4:	60ab      	str	r3, [r5, #8]
      if (heth->RxDescList.ItMode == 0U)
 80038b6:	6da2      	ldr	r2, [r4, #88]	; 0x58
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80038b8:	6963      	ldr	r3, [r4, #20]
      if (heth->RxDescList.ItMode == 0U)
 80038ba:	b98a      	cbnz	r2, 80038e0 <ETH_UpdateDescriptor+0x8c>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80038bc:	ea43 0309 	orr.w	r3, r3, r9
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80038c0:	606b      	str	r3, [r5, #4]
      desccount--;
 80038c2:	3f01      	subs	r7, #1
      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80038c4:	682b      	ldr	r3, [r5, #0]
 80038c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038ca:	602b      	str	r3, [r5, #0]
      INCR_RX_DESC_INDEX(descidx, 1U);
 80038cc:	1c73      	adds	r3, r6, #1
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	bf88      	it	hi
 80038d2:	1ef3      	subhi	r3, r6, #3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038d4:	f103 0212 	add.w	r2, r3, #18
      desccount--;
 80038d8:	461e      	mov	r6, r3
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80038da:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
      desccount--;
 80038de:	e7c8      	b.n	8003872 <ETH_UpdateDescriptor+0x1e>
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80038e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e4:	e7ec      	b.n	80038c0 <ETH_UpdateDescriptor+0x6c>
        allocStatus = 0U;
 80038e6:	4698      	mov	r8, r3
 80038e8:	e7c3      	b.n	8003872 <ETH_UpdateDescriptor+0x1e>
 80038ea:	bf00      	nop
 80038ec:	80004000 	.word	0x80004000

080038f0 <HAL_ETH_Init>:
{
 80038f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (heth == NULL)
 80038f2:	4604      	mov	r4, r0
{
 80038f4:	b0a7      	sub	sp, #156	; 0x9c
  if (heth == NULL)
 80038f6:	2800      	cmp	r0, #0
 80038f8:	f000 80e9 	beq.w	8003ace <HAL_ETH_Init+0x1de>
  if (heth->gState == HAL_ETH_STATE_RESET)
 80038fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003900:	b923      	cbnz	r3, 800390c <HAL_ETH_Init+0x1c>
    heth->gState = HAL_ETH_STATE_BUSY;
 8003902:	2323      	movs	r3, #35	; 0x23
 8003904:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8003908:	f7fd f8ac 	bl	8000a64 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800390c:	4b73      	ldr	r3, [pc, #460]	; (8003adc <HAL_ETH_Init+0x1ec>)
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800390e:	68a1      	ldr	r1, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003912:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003916:	645a      	str	r2, [r3, #68]	; 0x44
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003922:	4b6f      	ldr	r3, [pc, #444]	; (8003ae0 <HAL_ETH_Init+0x1f0>)
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800392a:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8003932:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003942:	f7ff fb11 	bl	8002f68 <HAL_GetTick>
 8003946:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003948:	6823      	ldr	r3, [r4, #0]
 800394a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800394e:	681d      	ldr	r5, [r3, #0]
 8003950:	f015 0501 	ands.w	r5, r5, #1
 8003954:	f040 80ae 	bne.w	8003ab4 <HAL_ETH_Init+0x1c4>
  macDefaultConf.ChecksumOffload = ENABLE;
 8003958:	2601      	movs	r6, #1
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800395a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  macDefaultConf.Watchdog = ENABLE;
 800395e:	f240 1701 	movw	r7, #257	; 0x101
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003962:	f44f 6300 	mov.w	r3, #2048	; 0x800
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003966:	a90d      	add	r1, sp, #52	; 0x34
 8003968:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 800396a:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  macDefaultConf.ReceiveOwn = ENABLE;
 800396e:	f8ad 6052 	strh.w	r6, [sp, #82]	; 0x52
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003972:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003976:	950f      	str	r5, [sp, #60]	; 0x3c
  macDefaultConf.LoopbackMode = DISABLE;
 8003978:	f88d 5050 	strb.w	r5, [sp, #80]	; 0x50
  macDefaultConf.RetryTransmission = DISABLE;
 800397c:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.Watchdog = ENABLE;
 8003980:	f8ad 7044 	strh.w	r7, [sp, #68]	; 0x44
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003984:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003986:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800398a:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800398c:	f88d 5080 	strb.w	r5, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003990:	9521      	str	r5, [sp, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003992:	f8ad 5088 	strh.w	r5, [sp, #136]	; 0x88
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003996:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800399a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  ETH_SetMACConfig(heth, &macDefaultConf);
 800399e:	f7ff fe63 	bl	8003668 <ETH_SetMACConfig>
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80039a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80039a6:	4620      	mov	r0, r4
 80039a8:	a902      	add	r1, sp, #8
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80039aa:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80039ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80039b0:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80039b4:	f88d 6016 	strb.w	r6, [sp, #22]
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80039b8:	f8ad 7014 	strh.w	r7, [sp, #20]
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80039bc:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80039c0:	950a      	str	r5, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80039c2:	f8ad 702c 	strh.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80039c6:	950c      	str	r5, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80039c8:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80039ca:	e9cd 3506 	strd	r3, r5, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80039ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039d2:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80039d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039d8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80039dc:	f7ff fecc 	bl	8003778 <ETH_SetDMAConfig>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80039e0:	68e6      	ldr	r6, [r4, #12]
 80039e2:	f104 0c18 	add.w	ip, r4, #24
 80039e6:	462a      	mov	r2, r5
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80039e8:	4628      	mov	r0, r5
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80039ea:	4633      	mov	r3, r6
    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80039ec:	6018      	str	r0, [r3, #0]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80039ee:	4619      	mov	r1, r3
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80039f0:	6058      	str	r0, [r3, #4]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80039f2:	2a03      	cmp	r2, #3
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80039f4:	6098      	str	r0, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80039f6:	60d8      	str	r0, [r3, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80039f8:	f84c 3b04 	str.w	r3, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80039fc:	681f      	ldr	r7, [r3, #0]
 80039fe:	f447 1780 	orr.w	r7, r7, #1048576	; 0x100000
 8003a02:	f841 7b28 	str.w	r7, [r1], #40
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003a06:	d064      	beq.n	8003ad2 <HAL_ETH_Init+0x1e2>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003a08:	60d9      	str	r1, [r3, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a0a:	681f      	ldr	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a0c:	3201      	adds	r2, #1
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a0e:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a12:	2a04      	cmp	r2, #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003a14:	601f      	str	r7, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003a16:	460b      	mov	r3, r1
 8003a18:	d1e8      	bne.n	80039ec <HAL_ETH_Init+0xfc>
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a1a:	6822      	ldr	r2, [r4, #0]
  heth->TxDescList.CurTxDesc = 0;
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	f104 0c48 	add.w	ip, r4, #72	; 0x48
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a22:	f04f 4e00 	mov.w	lr, #2147483648	; 0x80000000
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a26:	f502 5780 	add.w	r7, r2, #4096	; 0x1000
  heth->TxDescList.CurTxDesc = 0;
 8003a2a:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003a2c:	613e      	str	r6, [r7, #16]
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a2e:	6926      	ldr	r6, [r4, #16]
 8003a30:	4633      	mov	r3, r6
    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003a32:	6019      	str	r1, [r3, #0]
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a34:	2d03      	cmp	r5, #3
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003a36:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003a38:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003a3a:	60d9      	str	r1, [r3, #12]
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a3c:	f8c3 e000 	str.w	lr, [r3]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003a40:	e9c3 1108 	strd	r1, r1, [r3, #32]
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003a44:	6960      	ldr	r0, [r4, #20]
 8003a46:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8003a4a:	6058      	str	r0, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a4c:	6858      	ldr	r0, [r3, #4]
 8003a4e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a52:	6058      	str	r0, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a54:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003a58:	f84c 3b04 	str.w	r3, [ip], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a5c:	d03b      	beq.n	8003ad6 <HAL_ETH_Init+0x1e6>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a5e:	60d8      	str	r0, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a60:	3501      	adds	r5, #1
 8003a62:	4603      	mov	r3, r0
 8003a64:	2d04      	cmp	r5, #4
 8003a66:	d1e4      	bne.n	8003a32 <HAL_ETH_Init+0x142>
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003a68:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003a6a:	2000      	movs	r0, #0
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <HAL_ETH_Init+0x1f4>)
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003a6e:	65a0      	str	r0, [r4, #88]	; 0x58
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003a70:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003a74:	e9c4 001a 	strd	r0, r0, [r4, #104]	; 0x68
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a78:	60fe      	str	r6, [r7, #12]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a7a:	888d      	ldrh	r5, [r1, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a7c:	641d      	str	r5, [r3, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a7e:	6809      	ldr	r1, [r1, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a80:	6459      	str	r1, [r3, #68]	; 0x44
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003a82:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003a84:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 8003a88:	63d3      	str	r3, [r2, #60]	; 0x3c
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003a8a:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a96:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003a9a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 8003a9e:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 8003aa2:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  heth->gState = HAL_ETH_STATE_READY;
 8003aa6:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003aa8:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003aac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003ab0:	b027      	add	sp, #156	; 0x9c
 8003ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003ab4:	f7ff fa58 	bl	8002f68 <HAL_GetTick>
 8003ab8:	1b80      	subs	r0, r0, r6
 8003aba:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003abe:	f67f af43 	bls.w	8003948 <HAL_ETH_Init+0x58>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003ac2:	2304      	movs	r3, #4
 8003ac4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ac8:	23e0      	movs	r3, #224	; 0xe0
 8003aca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_ERROR;
 8003ace:	2001      	movs	r0, #1
 8003ad0:	e7ee      	b.n	8003ab0 <HAL_ETH_Init+0x1c0>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003ad2:	60de      	str	r6, [r3, #12]
 8003ad4:	e799      	b.n	8003a0a <HAL_ETH_Init+0x11a>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003ad6:	60de      	str	r6, [r3, #12]
 8003ad8:	e7c2      	b.n	8003a60 <HAL_ETH_Init+0x170>
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40028000 	.word	0x40028000

08003ae8 <HAL_ETH_Start_IT>:
{
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8003aea:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003aee:	4604      	mov	r4, r0
 8003af0:	2501      	movs	r5, #1
  if (heth->gState == HAL_ETH_STATE_READY)
 8003af2:	2b10      	cmp	r3, #16
 8003af4:	d136      	bne.n	8003b64 <HAL_ETH_Start_IT+0x7c>
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003af6:	2304      	movs	r3, #4
    heth->gState = HAL_ETH_STATE_BUSY;
 8003af8:	2623      	movs	r6, #35	; 0x23
    heth->RxDescList.ItMode = 1U;
 8003afa:	6585      	str	r5, [r0, #88]	; 0x58
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003afc:	66c3      	str	r3, [r0, #108]	; 0x6c
    heth->gState = HAL_ETH_STATE_BUSY;
 8003afe:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    ETH_UpdateDescriptor(heth);
 8003b02:	f7ff fea7 	bl	8003854 <ETH_UpdateDescriptor>
    tmpreg1 = (heth->Instance)->MACCR;
 8003b06:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b08:	4628      	mov	r0, r5
    tmpreg1 = (heth->Instance)->MACCR;
 8003b0a:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b0c:	f7ff fa32 	bl	8002f74 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b10:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8003b12:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8003b14:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b1a:	699a      	ldr	r2, [r3, #24]
 8003b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b20:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	f042 0202 	orr.w	r2, r2, #2
 8003b28:	619a      	str	r2, [r3, #24]
    ETH_FlushTransmitFIFO(heth);
 8003b2a:	f7ff fe7b 	bl	8003824 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b2e:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b30:	4628      	mov	r0, r5
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f042 0208 	orr.w	r2, r2, #8
 8003b38:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8003b3a:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b3c:	f7ff fa1a 	bl	8002f74 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003b40:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003b42:	2000      	movs	r0, #0
    (heth->Instance)->MACCR = tmpreg1;
 8003b44:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f042 0204 	orr.w	r2, r2, #4
 8003b4c:	601a      	str	r2, [r3, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	f442 32d0 	orr.w	r2, r2, #106496	; 0x1a000
 8003b58:	f042 02c1 	orr.w	r2, r2, #193	; 0xc1
 8003b5c:	61da      	str	r2, [r3, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8003b5e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
}
 8003b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003b64:	4628      	mov	r0, r5
 8003b66:	e7fc      	b.n	8003b62 <HAL_ETH_Start_IT+0x7a>

08003b68 <HAL_ETH_Stop_IT>:
{
 8003b68:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b6a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8003b6e:	4604      	mov	r4, r0
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003b70:	2b23      	cmp	r3, #35	; 0x23
 8003b72:	d13c      	bne.n	8003bee <HAL_ETH_Stop_IT+0x86>
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003b74:	6801      	ldr	r1, [r0, #0]
    heth->gState = HAL_ETH_STATE_BUSY;
 8003b76:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b7a:	2001      	movs	r0, #1
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003b7c:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003b80:	69da      	ldr	r2, [r3, #28]
 8003b82:	f422 32d0 	bic.w	r2, r2, #106496	; 0x1a000
 8003b86:	f022 02c1 	bic.w	r2, r2, #193	; 0xc1
 8003b8a:	61da      	str	r2, [r3, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b92:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	f022 0202 	bic.w	r2, r2, #2
 8003b9a:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003b9c:	680b      	ldr	r3, [r1, #0]
 8003b9e:	f023 0304 	bic.w	r3, r3, #4
 8003ba2:	600b      	str	r3, [r1, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8003ba4:	680d      	ldr	r5, [r1, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ba6:	f7ff f9e5 	bl	8002f74 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003baa:	6823      	ldr	r3, [r4, #0]
    ETH_FlushTransmitFIFO(heth);
 8003bac:	4620      	mov	r0, r4
    (heth->Instance)->MACCR = tmpreg1;
 8003bae:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8003bb0:	f7ff fe38 	bl	8003824 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003bb4:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bb6:	2001      	movs	r0, #1
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	f022 0208 	bic.w	r2, r2, #8
 8003bbe:	601a      	str	r2, [r3, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8003bc0:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bc2:	f7ff f9d7 	bl	8002f74 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003bcc:	f853 2b48 	ldr.w	r2, [r3], #72
 8003bd0:	6015      	str	r5, [r2, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003bd2:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003bd6:	684a      	ldr	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003bd8:	4298      	cmp	r0, r3
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bde:	604a      	str	r2, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003be0:	d1f7      	bne.n	8003bd2 <HAL_ETH_Stop_IT+0x6a>
    heth->RxDescList.ItMode = 0U;
 8003be2:	2000      	movs	r0, #0
    heth->gState = HAL_ETH_STATE_READY;
 8003be4:	2310      	movs	r3, #16
    heth->RxDescList.ItMode = 0U;
 8003be6:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8003be8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
}
 8003bec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003bee:	2001      	movs	r0, #1
 8003bf0:	e7fc      	b.n	8003bec <HAL_ETH_Stop_IT+0x84>

08003bf2 <HAL_ETH_Transmit_IT>:
{
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8003bf6:	b939      	cbnz	r1, 8003c08 <HAL_ETH_Transmit_IT+0x16>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003bf8:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003c00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_ERROR;
 8003c04:	2001      	movs	r0, #1
 8003c06:	e025      	b.n	8003c54 <HAL_ETH_Transmit_IT+0x62>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003c08:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8003c0c:	2a23      	cmp	r2, #35	; 0x23
 8003c0e:	d1f9      	bne.n	8003c04 <HAL_ETH_Transmit_IT+0x12>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003c10:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003c12:	2201      	movs	r2, #1
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003c14:	63c3      	str	r3, [r0, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003c16:	f7ff fc73 	bl	8003500 <ETH_Prepare_Tx_Descriptors>
 8003c1a:	b120      	cbz	r0, 8003c26 <HAL_ETH_Transmit_IT+0x34>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003c1c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	e7ec      	b.n	8003c00 <HAL_ETH_Transmit_IT+0xe>
  __ASM volatile ("dsb 0xF":::"memory");
 8003c26:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003c2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	2a03      	cmp	r2, #3
 8003c30:	bf8c      	ite	hi
 8003c32:	3b03      	subhi	r3, #3
 8003c34:	62a2      	strls	r2, [r4, #40]	; 0x28
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	bf88      	it	hi
 8003c3c:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c44:	6958      	ldr	r0, [r3, #20]
 8003c46:	f010 0004 	ands.w	r0, r0, #4
 8003c4a:	d003      	beq.n	8003c54 <HAL_ETH_Transmit_IT+0x62>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003c4c:	2104      	movs	r1, #4
    return HAL_OK;
 8003c4e:	4610      	mov	r0, r2
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003c50:	6159      	str	r1, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 8003c52:	605a      	str	r2, [r3, #4]
}
 8003c54:	bd10      	pop	{r4, pc}

08003c56 <HAL_ETH_ReadData>:
{
 8003c56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	b085      	sub	sp, #20
  if (pAppBuff == NULL)
 8003c5e:	4689      	mov	r9, r1
 8003c60:	b949      	cbnz	r1, 8003c76 <HAL_ETH_ReadData+0x20>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003c62:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8003c6e:	2001      	movs	r0, #1
}
 8003c70:	b005      	add	sp, #20
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003c76:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003c7a:	2b23      	cmp	r3, #35	; 0x23
 8003c7c:	d1f7      	bne.n	8003c6e <HAL_ETH_ReadData+0x18>
  descidx = heth->RxDescList.RxDescIdx;
 8003c7e:	f8d0 805c 	ldr.w	r8, [r0, #92]	; 0x5c
  uint8_t rxdataready = 0U;
 8003c82:	2700      	movs	r7, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c84:	f100 0180 	add.w	r1, r0, #128	; 0x80
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c88:	f108 0312 	add.w	r3, r8, #18
  uint32_t desccnt = 0U;
 8003c8c:	463e      	mov	r6, r7
      dmarxdesc->BackupAddr0 = 0;
 8003c8e:	46bb      	mov	fp, r7
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003c90:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003c94:	307c      	adds	r0, #124	; 0x7c
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003c96:	f850 3c10 	ldr.w	r3, [r0, #-16]
 8003c9a:	f1c3 0a04 	rsb	sl, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003c9e:	682b      	ldr	r3, [r5, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	db02      	blt.n	8003caa <HAL_ETH_ReadData+0x54>
 8003ca4:	4556      	cmp	r6, sl
 8003ca6:	d000      	beq.n	8003caa <HAL_ETH_ReadData+0x54>
         && (rxdataready == 0U))
 8003ca8:	b187      	cbz	r7, 8003ccc <HAL_ETH_ReadData+0x76>
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003caa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003cac:	441e      	add	r6, r3
 8003cae:	66e6      	str	r6, [r4, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003cb0:	b116      	cbz	r6, 8003cb8 <HAL_ETH_ReadData+0x62>
    ETH_UpdateDescriptor(heth);
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	f7ff fdce 	bl	8003854 <ETH_UpdateDescriptor>
  heth->RxDescList.RxDescIdx = descidx;
 8003cb8:	f8c4 805c 	str.w	r8, [r4, #92]	; 0x5c
  if (rxdataready == 1U)
 8003cbc:	2f00      	cmp	r7, #0
 8003cbe:	d0d6      	beq.n	8003c6e <HAL_ETH_ReadData+0x18>
    *pAppBuff = heth->RxDescList.pRxStart;
 8003cc0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    heth->RxDescList.pRxStart = NULL;
 8003cc2:	2000      	movs	r0, #0
    *pAppBuff = heth->RxDescList.pRxStart;
 8003cc4:	f8c9 3000 	str.w	r3, [r9]
    heth->RxDescList.pRxStart = NULL;
 8003cc8:	67e0      	str	r0, [r4, #124]	; 0x7c
    return HAL_OK;
 8003cca:	e7d1      	b.n	8003c70 <HAL_ETH_ReadData+0x1a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	05db      	lsls	r3, r3, #23
 8003cd0:	d503      	bpl.n	8003cda <HAL_ETH_ReadData+0x84>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003cd2:	69eb      	ldr	r3, [r5, #28]
 8003cd4:	67a3      	str	r3, [r4, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003cd6:	69ab      	ldr	r3, [r5, #24]
 8003cd8:	6763      	str	r3, [r4, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	059a      	lsls	r2, r3, #22
 8003cde:	d401      	bmi.n	8003ce4 <HAL_ETH_ReadData+0x8e>
 8003ce0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003ce2:	b1fb      	cbz	r3, 8003d24 <HAL_ETH_ReadData+0xce>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	059b      	lsls	r3, r3, #22
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003ce8:	682b      	ldr	r3, [r5, #0]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003cea:	682a      	ldr	r2, [r5, #0]
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8003cec:	f3c3 430d 	ubfx	r3, r3, #16, #14
        heth->RxDescList.RxDataLength = 0;
 8003cf0:	bf48      	it	mi
 8003cf2:	e9c4 bb18 	strdmi	fp, fp, [r4, #96]	; 0x60
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003cf6:	05d2      	lsls	r2, r2, #23
 8003cf8:	d502      	bpl.n	8003d00 <HAL_ETH_ReadData+0xaa>
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003cfa:	682a      	ldr	r2, [r5, #0]
        rxdataready = 1;
 8003cfc:	2701      	movs	r7, #1
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003cfe:	6722      	str	r2, [r4, #112]	; 0x70
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003d00:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d02:	9001      	str	r0, [sp, #4]
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003d04:	622a      	str	r2, [r5, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003d06:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8003d0a:	f7fc ffb9 	bl	8000c80 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8003d0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d10:	9b03      	ldr	r3, [sp, #12]
      heth->RxDescList.RxDescCnt++;
 8003d12:	3201      	adds	r2, #1
 8003d14:	6622      	str	r2, [r4, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003d16:	6e62      	ldr	r2, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8003d18:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
      heth->RxDescList.RxDataLength += bufflength;
 8003d1c:	4413      	add	r3, r2
 8003d1e:	6663      	str	r3, [r4, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8003d20:	f8c5 b020 	str.w	fp, [r5, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d24:	f108 0301 	add.w	r3, r8, #1
    desccnt++;
 8003d28:	3601      	adds	r6, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	bf88      	it	hi
 8003d2e:	f1a8 0303 	subhi.w	r3, r8, #3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d32:	f103 0212 	add.w	r2, r3, #18
    desccnt++;
 8003d36:	4698      	mov	r8, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003d38:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
    desccnt++;
 8003d3c:	e7af      	b.n	8003c9e <HAL_ETH_ReadData+0x48>

08003d3e <HAL_ETH_ReleaseTxPacket>:
{
 8003d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d42:	4605      	mov	r5, r0
  uint8_t pktTxStatus = 1U;
 8003d44:	2701      	movs	r7, #1
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003d46:	f04f 0928 	mov.w	r9, #40	; 0x28
 8003d4a:	f04f 0a00 	mov.w	sl, #0
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8003d4e:	e9d0 6410 	ldrd	r6, r4, [r0, #64]	; 0x40
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003d52:	b106      	cbz	r6, 8003d56 <HAL_ETH_ReleaseTxPacket+0x18>
 8003d54:	b917      	cbnz	r7, 8003d5c <HAL_ETH_ReleaseTxPacket+0x1e>
}
 8003d56:	2000      	movs	r0, #0
 8003d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    numOfBuf--;
 8003d5c:	eb05 0884 	add.w	r8, r5, r4, lsl #2
 8003d60:	3e01      	subs	r6, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8003d62:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
 8003d66:	b148      	cbz	r0, 8003d7c <HAL_ETH_ReleaseTxPacket+0x3e>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8003d68:	fb09 f304 	mul.w	r3, r9, r4
 8003d6c:	68ea      	ldr	r2, [r5, #12]
 8003d6e:	58d3      	ldr	r3, [r2, r3]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da08      	bge.n	8003d86 <HAL_ETH_ReleaseTxPacket+0x48>
 8003d74:	4623      	mov	r3, r4
        pktTxStatus = 0U;
 8003d76:	2700      	movs	r7, #0
 8003d78:	461c      	mov	r4, r3
 8003d7a:	e7ea      	b.n	8003d52 <HAL_ETH_ReleaseTxPacket+0x14>
      INCR_TX_DESC_INDEX(idx, 1U);
 8003d7c:	1c63      	adds	r3, r4, #1
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d9fa      	bls.n	8003d78 <HAL_ETH_ReleaseTxPacket+0x3a>
 8003d82:	1ee3      	subs	r3, r4, #3
 8003d84:	e7f8      	b.n	8003d78 <HAL_ETH_ReleaseTxPacket+0x3a>
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003d86:	f7fc ff94 	bl	8000cb2 <HAL_ETH_TxFreeCallback>
        INCR_TX_DESC_INDEX(idx, 1U);
 8003d8a:	1c63      	adds	r3, r4, #1
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003d8c:	f8c8 a02c 	str.w	sl, [r8, #44]	; 0x2c
        INCR_TX_DESC_INDEX(idx, 1U);
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	bf88      	it	hi
 8003d94:	1ee3      	subhi	r3, r4, #3
        dmatxdesclist->releaseIndex = idx;
 8003d96:	e9c5 6310 	strd	r6, r3, [r5, #64]	; 0x40
 8003d9a:	e7ed      	b.n	8003d78 <HAL_ETH_ReleaseTxPacket+0x3a>

08003d9c <HAL_ETH_PMTCallback>:
 8003d9c:	4770      	bx	lr

08003d9e <HAL_ETH_WakeUpCallback>:
 8003d9e:	4770      	bx	lr

08003da0 <HAL_ETH_IRQHandler>:
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003da0:	6803      	ldr	r3, [r0, #0]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003da2:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <HAL_ETH_IRQHandler+0xd4>)
{
 8003da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003da8:	6b9f      	ldr	r7, [r3, #56]	; 0x38
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
{
 8003dae:	4604      	mov	r4, r0
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003db0:	695d      	ldr	r5, [r3, #20]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003db2:	f8d3 801c 	ldr.w	r8, [r3, #28]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003db6:	6956      	ldr	r6, [r2, #20]
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003db8:	066a      	lsls	r2, r5, #25
 8003dba:	d506      	bpl.n	8003dca <HAL_ETH_IRQHandler+0x2a>
 8003dbc:	f018 0f40 	tst.w	r8, #64	; 0x40
 8003dc0:	d003      	beq.n	8003dca <HAL_ETH_IRQHandler+0x2a>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8003dc2:	4a2d      	ldr	r2, [pc, #180]	; (8003e78 <HAL_ETH_IRQHandler+0xd8>)
 8003dc4:	615a      	str	r2, [r3, #20]
    HAL_ETH_RxCpltCallback(heth);
 8003dc6:	f7fc feb3 	bl	8000b30 <HAL_ETH_RxCpltCallback>
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8003dca:	07e8      	lsls	r0, r5, #31
 8003dcc:	d50b      	bpl.n	8003de6 <HAL_ETH_IRQHandler+0x46>
 8003dce:	f018 0f01 	tst.w	r8, #1
 8003dd2:	d008      	beq.n	8003de6 <HAL_ETH_IRQHandler+0x46>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    HAL_ETH_TxCpltCallback(heth);
 8003dda:	4620      	mov	r0, r4
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8003ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003de0:	615a      	str	r2, [r3, #20]
    HAL_ETH_TxCpltCallback(heth);
 8003de2:	f7fc fead 	bl	8000b40 <HAL_ETH_TxCpltCallback>
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8003de6:	0429      	lsls	r1, r5, #16
 8003de8:	d523      	bpl.n	8003e32 <HAL_ETH_IRQHandler+0x92>
 8003dea:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8003dee:	d020      	beq.n	8003e32 <HAL_ETH_IRQHandler+0x92>
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003df0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003df4:	f415 5f00 	tst.w	r5, #8192	; 0x2000
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003df8:	f043 0308 	orr.w	r3, r3, #8
 8003dfc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003e00:	6823      	ldr	r3, [r4, #0]
 8003e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e06:	695a      	ldr	r2, [r3, #20]
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003e08:	d02c      	beq.n	8003e64 <HAL_ETH_IRQHandler+0xc4>
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003e0a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003e0e:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8003e12:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8003e16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e1a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8003e24:	61da      	str	r2, [r3, #28]
      heth->gState = HAL_ETH_STATE_ERROR;
 8003e26:	23e0      	movs	r3, #224	; 0xe0
 8003e28:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    HAL_ETH_ErrorCallback(heth);
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f7fc fe8f 	bl	8000b50 <HAL_ETH_ErrorCallback>
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003e32:	073a      	lsls	r2, r7, #28
 8003e34:	d50b      	bpl.n	8003e4e <HAL_ETH_IRQHandler+0xae>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003e36:	6823      	ldr	r3, [r4, #0]
    HAL_ETH_PMTCallback(heth);
 8003e38:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e40:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8003e44:	f7ff ffaa 	bl	8003d9c <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003e4e:	0333      	lsls	r3, r6, #12
 8003e50:	d506      	bpl.n	8003e60 <HAL_ETH_IRQHandler+0xc0>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_ETH_IRQHandler+0xd4>)
 8003e54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    HAL_ETH_WakeUpCallback(heth);
 8003e58:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003e5a:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8003e5c:	f7ff ff9f 	bl	8003d9e <HAL_ETH_WakeUpCallback>
}
 8003e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003e64:	f248 6180 	movw	r1, #34432	; 0x8680
 8003e68:	400a      	ands	r2, r1
 8003e6a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003e6e:	6159      	str	r1, [r3, #20]
 8003e70:	e7dc      	b.n	8003e2c <HAL_ETH_IRQHandler+0x8c>
 8003e72:	bf00      	nop
 8003e74:	40013c00 	.word	0x40013c00
 8003e78:	00010040 	.word	0x00010040

08003e7c <HAL_ETH_ReadPHYRegister>:
{
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e80:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003e82:	0192      	lsls	r2, r2, #6
{
 8003e84:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8003e86:	6903      	ldr	r3, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003e88:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003e8c:	f003 021c 	and.w	r2, r3, #28
 8003e90:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003e92:	02cc      	lsls	r4, r1, #11
 8003e94:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003e96:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003e98:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8003e9c:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8003e9e:	f7ff f863 	bl	8002f68 <HAL_GetTick>
 8003ea2:	4607      	mov	r7, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ea4:	f014 0401 	ands.w	r4, r4, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_ETH_ReadPHYRegister+0x3a>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003eaa:	682b      	ldr	r3, [r5, #0]
  return HAL_OK;
 8003eac:	4620      	mov	r0, r4
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	6033      	str	r3, [r6, #0]
}
 8003eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003eb6:	f7ff f857 	bl	8002f68 <HAL_GetTick>
 8003eba:	1bc0      	subs	r0, r0, r7
 8003ebc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003ec0:	d202      	bcs.n	8003ec8 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg1 = heth->Instance->MACMIIAR;
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	691c      	ldr	r4, [r3, #16]
 8003ec6:	e7ed      	b.n	8003ea4 <HAL_ETH_ReadPHYRegister+0x28>
      return HAL_ERROR;
 8003ec8:	2001      	movs	r0, #1
 8003eca:	e7f3      	b.n	8003eb4 <HAL_ETH_ReadPHYRegister+0x38>

08003ecc <HAL_ETH_WritePHYRegister>:
{
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	4605      	mov	r5, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8003ed0:	6800      	ldr	r0, [r0, #0]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003ed2:	0192      	lsls	r2, r2, #6
  tmpreg1 = heth->Instance->MACMIIAR;
 8003ed4:	6906      	ldr	r6, [r0, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f402 64f8 	and.w	r4, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003edc:	f006 021c 	and.w	r2, r6, #28
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003ee0:	6143      	str	r3, [r0, #20]
 8003ee2:	4322      	orrs	r2, r4
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003ee4:	02cc      	lsls	r4, r1, #11
 8003ee6:	b2a4      	uxth	r4, r4
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003ee8:	4314      	orrs	r4, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003eea:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg1;
 8003eee:	6104      	str	r4, [r0, #16]
  tickstart = HAL_GetTick();
 8003ef0:	f7ff f83a 	bl	8002f68 <HAL_GetTick>
 8003ef4:	4606      	mov	r6, r0
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ef6:	f014 0401 	ands.w	r4, r4, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_ETH_WritePHYRegister+0x34>
  return HAL_OK;
 8003efc:	4620      	mov	r0, r4
}
 8003efe:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003f00:	f7ff f832 	bl	8002f68 <HAL_GetTick>
 8003f04:	1b80      	subs	r0, r0, r6
 8003f06:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003f0a:	d202      	bcs.n	8003f12 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	691c      	ldr	r4, [r3, #16]
 8003f10:	e7f1      	b.n	8003ef6 <HAL_ETH_WritePHYRegister+0x2a>
      return HAL_ERROR;
 8003f12:	2001      	movs	r0, #1
 8003f14:	e7f3      	b.n	8003efe <HAL_ETH_WritePHYRegister+0x32>

08003f16 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8003f16:	2900      	cmp	r1, #0
 8003f18:	d061      	beq.n	8003fde <HAL_ETH_GetMACConfig+0xc8>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003f1a:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8003f1c:	2000      	movs	r0, #0
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003f24:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003f2e:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8003f36:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8003f3a:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003f3e:	681a      	ldr	r2, [r3, #0]
                                        ? ENABLE : DISABLE;
 8003f40:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003f44:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003f4c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8003f50:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8003f58:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f60:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f68:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8003f70:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8003f74:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8003f7c:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8003f80:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003f88:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8003f90:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8003f98:	710a      	strb	r2, [r1, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f3c2 6240 	ubfx	r2, r2, #25, #1
 8003fa0:	738a      	strb	r2, [r1, #14]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003fa2:	699a      	ldr	r2, [r3, #24]
 8003fa4:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003fa8:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8003fb2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8003fb6:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003fba:	699a      	ldr	r2, [r3, #24]
 8003fbc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8003fc0:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003fc2:	699a      	ldr	r2, [r3, #24]
 8003fc4:	0c12      	lsrs	r2, r2, #16
 8003fc6:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8003fce:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003fd2:	699b      	ldr	r3, [r3, #24]
                                      ? ENABLE : DISABLE;
 8003fd4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003fd8:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
  return HAL_OK;
 8003fdc:	4770      	bx	lr
    return HAL_ERROR;
 8003fde:	2001      	movs	r0, #1
}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_ETH_SetMACConfig>:
{
 8003fe2:	b508      	push	{r3, lr}
  if (macconf == NULL)
 8003fe4:	b139      	cbz	r1, 8003ff6 <HAL_ETH_SetMACConfig+0x14>
  if (heth->gState == HAL_ETH_STATE_READY)
 8003fe6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	d103      	bne.n	8003ff6 <HAL_ETH_SetMACConfig+0x14>
    ETH_SetMACConfig(heth, macconf);
 8003fee:	f7ff fb3b 	bl	8003668 <ETH_SetMACConfig>
    return HAL_OK;
 8003ff2:	2000      	movs	r0, #0
}
 8003ff4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	e7fc      	b.n	8003ff4 <HAL_ETH_SetMACConfig+0x12>
	...

08003ffc <HAL_ETH_SetMDIOClockRange>:
{
 8003ffc:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMIIAR;
 8003ffe:	6803      	ldr	r3, [r0, #0]
{
 8004000:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8004002:	691c      	ldr	r4, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8004004:	f000 fd20 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
  if (hclk < 35000000U)
 8004008:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_ETH_SetMDIOClockRange+0x44>)
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800400a:	f024 041c 	bic.w	r4, r4, #28
  if (hclk < 35000000U)
 800400e:	4298      	cmp	r0, r3
 8004010:	d804      	bhi.n	800401c <HAL_ETH_SetMDIOClockRange+0x20>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004012:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004016:	682b      	ldr	r3, [r5, #0]
 8004018:	611c      	str	r4, [r3, #16]
}
 800401a:	bd38      	pop	{r3, r4, r5, pc}
  else if (hclk < 60000000U)
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <HAL_ETH_SetMDIOClockRange+0x48>)
 800401e:	4298      	cmp	r0, r3
 8004020:	d202      	bcs.n	8004028 <HAL_ETH_SetMDIOClockRange+0x2c>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004022:	f044 040c 	orr.w	r4, r4, #12
 8004026:	e7f6      	b.n	8004016 <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 100000000U)
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_ETH_SetMDIOClockRange+0x4c>)
 800402a:	4298      	cmp	r0, r3
 800402c:	d9f3      	bls.n	8004016 <HAL_ETH_SetMDIOClockRange+0x1a>
  else if (hclk < 150000000U)
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <HAL_ETH_SetMDIOClockRange+0x50>)
 8004030:	4298      	cmp	r0, r3
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004032:	bf94      	ite	ls
 8004034:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004038:	f044 0410 	orrhi.w	r4, r4, #16
 800403c:	e7eb      	b.n	8004016 <HAL_ETH_SetMDIOClockRange+0x1a>
 800403e:	bf00      	nop
 8004040:	02160ebf 	.word	0x02160ebf
 8004044:	03938700 	.word	0x03938700
 8004048:	05f5e0ff 	.word	0x05f5e0ff
 800404c:	08f0d17f 	.word	0x08f0d17f

08004050 <HAL_ETH_GetError>:
  return heth->ErrorCode;
 8004050:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
 8004054:	4770      	bx	lr

08004056 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8004056:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 800405a:	4770      	bx	lr

0800405c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800405c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004060:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8004220 <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004066:	4a6c      	ldr	r2, [pc, #432]	; (8004218 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8004068:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406a:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800406c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800406e:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8004072:	43ac      	bics	r4, r5
 8004074:	f040 80b6 	bne.w	80041e4 <HAL_GPIO_Init+0x188>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004078:	684d      	ldr	r5, [r1, #4]
 800407a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800407e:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004080:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004084:	fa06 f608 	lsl.w	r6, r6, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004088:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800408a:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800408c:	2f01      	cmp	r7, #1
 800408e:	d834      	bhi.n	80040fa <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR;
 8004090:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004092:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8004096:	68cf      	ldr	r7, [r1, #12]
 8004098:	fa07 f708 	lsl.w	r7, r7, r8
 800409c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80040a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80040a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040a4:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a8:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80040ac:	409f      	lsls	r7, r3
 80040ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80040b2:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80040b4:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b6:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040b8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80040bc:	688f      	ldr	r7, [r1, #8]
 80040be:	fa07 f708 	lsl.w	r7, r7, r8
 80040c2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80040c6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040c8:	d119      	bne.n	80040fe <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 80040ca:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040ce:	f003 0b07 	and.w	fp, r3, #7
 80040d2:	f04f 0e0f 	mov.w	lr, #15
 80040d6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80040da:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80040de:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80040e2:	fa0e fe0b 	lsl.w	lr, lr, fp
 80040e6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040ea:	690f      	ldr	r7, [r1, #16]
 80040ec:	fa07 f70b 	lsl.w	r7, r7, fp
 80040f0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80040f4:	f8ca 7020 	str.w	r7, [sl, #32]
 80040f8:	e001      	b.n	80040fe <HAL_GPIO_Init+0xa2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040fa:	2c03      	cmp	r4, #3
 80040fc:	d1da      	bne.n	80040b4 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80040fe:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004100:	fa04 f408 	lsl.w	r4, r4, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004104:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004108:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800410c:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 8004110:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004112:	d067      	beq.n	80041e4 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004114:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8004118:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800411c:	f003 0703 	and.w	r7, r3, #3
 8004120:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004124:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004128:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800412c:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800412e:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 8004132:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8004136:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 800413a:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800413e:	9401      	str	r4, [sp, #4]
 8004140:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004142:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 8004146:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800414a:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800414e:	4c33      	ldr	r4, [pc, #204]	; (800421c <HAL_GPIO_Init+0x1c0>)
 8004150:	42a0      	cmp	r0, r4
 8004152:	d04e      	beq.n	80041f2 <HAL_GPIO_Init+0x196>
 8004154:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004158:	42a0      	cmp	r0, r4
 800415a:	d04c      	beq.n	80041f6 <HAL_GPIO_Init+0x19a>
 800415c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004160:	42a0      	cmp	r0, r4
 8004162:	d04a      	beq.n	80041fa <HAL_GPIO_Init+0x19e>
 8004164:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004168:	42a0      	cmp	r0, r4
 800416a:	d048      	beq.n	80041fe <HAL_GPIO_Init+0x1a2>
 800416c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004170:	42a0      	cmp	r0, r4
 8004172:	d046      	beq.n	8004202 <HAL_GPIO_Init+0x1a6>
 8004174:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004178:	42a0      	cmp	r0, r4
 800417a:	d044      	beq.n	8004206 <HAL_GPIO_Init+0x1aa>
 800417c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004180:	42a0      	cmp	r0, r4
 8004182:	d042      	beq.n	800420a <HAL_GPIO_Init+0x1ae>
 8004184:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004188:	42a0      	cmp	r0, r4
 800418a:	d040      	beq.n	800420e <HAL_GPIO_Init+0x1b2>
 800418c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004190:	42a0      	cmp	r0, r4
 8004192:	d03e      	beq.n	8004212 <HAL_GPIO_Init+0x1b6>
 8004194:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004198:	42a0      	cmp	r0, r4
 800419a:	bf0c      	ite	eq
 800419c:	2409      	moveq	r4, #9
 800419e:	240a      	movne	r4, #10
 80041a0:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041a2:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041a4:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80041a8:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80041aa:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 80041ae:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	bf54      	ite	pl
 80041b2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041b4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041b8:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 80041ba:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 80041bc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80041be:	bf54      	ite	pl
 80041c0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041c2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041c6:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 80041c8:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 80041ca:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80041cc:	bf54      	ite	pl
 80041ce:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041d0:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041d4:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80041d6:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 80041d8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80041da:	bf54      	ite	pl
 80041dc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80041de:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80041e2:	6014      	str	r4, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80041e4:	3301      	adds	r3, #1
 80041e6:	2b10      	cmp	r3, #16
 80041e8:	f47f af3e 	bne.w	8004068 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80041ec:	b003      	add	sp, #12
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80041f2:	2400      	movs	r4, #0
 80041f4:	e7d4      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 80041f6:	2401      	movs	r4, #1
 80041f8:	e7d2      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 80041fa:	2402      	movs	r4, #2
 80041fc:	e7d0      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 80041fe:	2403      	movs	r4, #3
 8004200:	e7ce      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 8004202:	2404      	movs	r4, #4
 8004204:	e7cc      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 8004206:	2405      	movs	r4, #5
 8004208:	e7ca      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 800420a:	2406      	movs	r4, #6
 800420c:	e7c8      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 800420e:	2407      	movs	r4, #7
 8004210:	e7c6      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 8004212:	2408      	movs	r4, #8
 8004214:	e7c4      	b.n	80041a0 <HAL_GPIO_Init+0x144>
 8004216:	bf00      	nop
 8004218:	40013c00 	.word	0x40013c00
 800421c:	40020000 	.word	0x40020000
 8004220:	40023800 	.word	0x40023800

08004224 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004224:	6903      	ldr	r3, [r0, #16]
 8004226:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004228:	bf14      	ite	ne
 800422a:	2001      	movne	r0, #1
 800422c:	2000      	moveq	r0, #0
 800422e:	4770      	bx	lr

08004230 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004230:	b10a      	cbz	r2, 8004236 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004232:	6181      	str	r1, [r0, #24]
  }
}
 8004234:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004236:	0409      	lsls	r1, r1, #16
 8004238:	e7fb      	b.n	8004232 <HAL_GPIO_WritePin+0x2>

0800423a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800423a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800423c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800423e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004242:	3284      	adds	r2, #132	; 0x84
 8004244:	1883      	adds	r3, r0, r2
{
 8004246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800424a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800424c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004250:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004252:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004256:	684c      	ldr	r4, [r1, #4]
 8004258:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800425c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004260:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004264:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004266:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004268:	68c5      	ldr	r5, [r0, #12]
 800426a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800426e:	443d      	add	r5, r7
 8004270:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004274:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004276:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004278:	68c5      	ldr	r5, [r0, #12]
 800427a:	f3c5 050a 	ubfx	r5, r5, #0, #11
 800427e:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004280:	689d      	ldr	r5, [r3, #8]
 8004282:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8004286:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004288:	688d      	ldr	r5, [r1, #8]
 800428a:	68c7      	ldr	r7, [r0, #12]
 800428c:	3501      	adds	r5, #1
 800428e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8004292:	443d      	add	r5, r7
 8004294:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004298:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800429a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800429c:	691d      	ldr	r5, [r3, #16]
 800429e:	f025 0507 	bic.w	r5, r5, #7
 80042a2:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042a4:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80042a6:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80042a8:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80042ac:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80042b0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80042b4:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80042b8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80042bc:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80042c0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80042c4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042c6:	695d      	ldr	r5, [r3, #20]
 80042c8:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80042cc:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042ce:	694d      	ldr	r5, [r1, #20]
 80042d0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042d2:	69dd      	ldr	r5, [r3, #28]
 80042d4:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 80042d8:	f025 0507 	bic.w	r5, r5, #7
 80042dc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80042de:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80042e2:	433d      	orrs	r5, r7
 80042e4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042e6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042e8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80042ea:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80042ee:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80042f0:	b31e      	cbz	r6, 800433a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80042f2:	2e01      	cmp	r6, #1
 80042f4:	d023      	beq.n	800433e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80042f6:	1eb5      	subs	r5, r6, #2
 80042f8:	2d02      	cmp	r5, #2
 80042fa:	d922      	bls.n	8004342 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80042fc:	2e07      	cmp	r6, #7
 80042fe:	bf0c      	ite	eq
 8004300:	2502      	moveq	r5, #2
 8004302:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004304:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004306:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800430a:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800430e:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004310:	62de      	str	r6, [r3, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004312:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004314:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004316:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004318:	436e      	muls	r6, r5
 800431a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800431e:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004320:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004322:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8004326:	f024 0407 	bic.w	r4, r4, #7
 800432a:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800432c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800432e:	5883      	ldr	r3, [r0, r2]
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	5083      	str	r3, [r0, r2]
}
 8004336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800433a:	2504      	movs	r5, #4
 800433c:	e7e2      	b.n	8004304 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800433e:	2503      	movs	r5, #3
 8004340:	e7e0      	b.n	8004304 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8004342:	2502      	movs	r5, #2
 8004344:	e7de      	b.n	8004304 <LTDC_SetConfig+0xca>

08004346 <HAL_LTDC_MspInit>:
}
 8004346:	4770      	bx	lr

08004348 <HAL_LTDC_Init>:
{
 8004348:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800434a:	4604      	mov	r4, r0
 800434c:	2800      	cmp	r0, #0
 800434e:	d063      	beq.n	8004418 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004350:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004354:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004358:	b91b      	cbnz	r3, 8004362 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800435a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800435e:	f7ff fff2 	bl	8004346 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004362:	2302      	movs	r3, #2
 8004364:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	699a      	ldr	r2, [r3, #24]
 800436c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004370:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004372:	6999      	ldr	r1, [r3, #24]
 8004374:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004378:	4302      	orrs	r2, r0
 800437a:	68e0      	ldr	r0, [r4, #12]
 800437c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800437e:	6920      	ldr	r0, [r4, #16]
 8004380:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004382:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004384:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004386:	4925      	ldr	r1, [pc, #148]	; (800441c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004388:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	400a      	ands	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004396:	69a0      	ldr	r0, [r4, #24]
 8004398:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800439a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800439c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	400a      	ands	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80043aa:	6a20      	ldr	r0, [r4, #32]
 80043ac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043b0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	400a      	ands	r2, r1
 80043b6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80043be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80043c0:	4302      	orrs	r2, r0
 80043c2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043c4:	695a      	ldr	r2, [r3, #20]
 80043c6:	4011      	ands	r1, r2
 80043c8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80043d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80043d4:	430a      	orrs	r2, r1
 80043d6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80043da:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80043e2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80043e6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043ea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80043ee:	430a      	orrs	r2, r1
 80043f0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80043f4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043f8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fe:	f042 0206 	orr.w	r2, r2, #6
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800440c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800440e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004412:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004416:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004418:	2001      	movs	r0, #1
 800441a:	e7fc      	b.n	8004416 <HAL_LTDC_Init+0xce>
 800441c:	f000f800 	.word	0xf000f800

08004420 <HAL_LTDC_ConfigLayer>:
{
 8004420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8004424:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8004428:	4606      	mov	r6, r0
 800442a:	460f      	mov	r7, r1
 800442c:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800442e:	2b01      	cmp	r3, #1
 8004430:	f04f 0002 	mov.w	r0, #2
 8004434:	d01f      	beq.n	8004476 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004436:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8004438:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800443c:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800443e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004442:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8004446:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800444a:	3438      	adds	r4, #56	; 0x38
 800444c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800444e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800445a:	4630      	mov	r0, r6
 800445c:	4662      	mov	r2, ip
 800445e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004460:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004462:	f7ff feea 	bl	800423a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004466:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8004468:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800446a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800446e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004472:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800447a <HAL_LTDC_SetAlpha>:
{
 800447a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hltdc);
 800447c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8004480:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8004482:	2b01      	cmp	r3, #1
 8004484:	f04f 0302 	mov.w	r3, #2
 8004488:	d015      	beq.n	80044b6 <HAL_LTDC_SetAlpha+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800448a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->Alpha = Alpha;
 800448e:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8004490:	2601      	movs	r6, #1
  pLayerCfg->Alpha = Alpha;
 8004492:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8004494:	f880 60a0 	strb.w	r6, [r0, #160]	; 0xa0
  pLayerCfg->Alpha = Alpha;
 8004498:	18c5      	adds	r5, r0, r3
 800449a:	64e9      	str	r1, [r5, #76]	; 0x4c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800449c:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80044a0:	4401      	add	r1, r0
 80044a2:	f7ff feca 	bl	800423a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80044a6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 80044a8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80044aa:	625e      	str	r6, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80044ac:	f884 60a1 	strb.w	r6, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80044b0:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80044b4:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80044b6:	4618      	mov	r0, r3
 80044b8:	e7fc      	b.n	80044b4 <HAL_LTDC_SetAlpha+0x3a>

080044ba <HAL_LTDC_GetState>:
  return hltdc->State;
 80044ba:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
}
 80044be:	4770      	bx	lr

080044c0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80044c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044c6:	4c19      	ldr	r4, [pc, #100]	; (800452c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044de:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e0:	f7fe fd42 	bl	8002f68 <HAL_GetTick>
 80044e4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044e6:	6863      	ldr	r3, [r4, #4]
 80044e8:	03da      	lsls	r2, r3, #15
 80044ea:	d50c      	bpl.n	8004506 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044ec:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044ee:	4d0f      	ldr	r5, [pc, #60]	; (800452c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f4:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80044f6:	f7fe fd37 	bl	8002f68 <HAL_GetTick>
 80044fa:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044fc:	686b      	ldr	r3, [r5, #4]
 80044fe:	039b      	lsls	r3, r3, #14
 8004500:	d50a      	bpl.n	8004518 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8004502:	2000      	movs	r0, #0
 8004504:	e006      	b.n	8004514 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004506:	f7fe fd2f 	bl	8002f68 <HAL_GetTick>
 800450a:	1b40      	subs	r0, r0, r5
 800450c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004510:	d9e9      	bls.n	80044e6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8004512:	2003      	movs	r0, #3
}
 8004514:	b003      	add	sp, #12
 8004516:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004518:	f7fe fd26 	bl	8002f68 <HAL_GetTick>
 800451c:	1b00      	subs	r0, r0, r4
 800451e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004522:	d9eb      	bls.n	80044fc <HAL_PWREx_EnableOverDrive+0x3c>
 8004524:	e7f5      	b.n	8004512 <HAL_PWREx_EnableOverDrive+0x52>
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000

08004530 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004534:	4604      	mov	r4, r0
 8004536:	b340      	cbz	r0, 800458a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004538:	6803      	ldr	r3, [r0, #0]
 800453a:	07db      	lsls	r3, r3, #31
 800453c:	d410      	bmi.n	8004560 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453e:	6823      	ldr	r3, [r4, #0]
 8004540:	079f      	lsls	r7, r3, #30
 8004542:	d464      	bmi.n	800460e <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	0719      	lsls	r1, r3, #28
 8004548:	f100 80aa 	bmi.w	80046a0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	075a      	lsls	r2, r3, #29
 8004550:	f100 80cb 	bmi.w	80046ea <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	69a2      	ldr	r2, [r4, #24]
 8004556:	2a00      	cmp	r2, #0
 8004558:	f040 8134 	bne.w	80047c4 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800455c:	2000      	movs	r0, #0
 800455e:	e02b      	b.n	80045b8 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004560:	4b96      	ldr	r3, [pc, #600]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	f002 020c 	and.w	r2, r2, #12
 8004568:	2a04      	cmp	r2, #4
 800456a:	d007      	beq.n	800457c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456c:	689a      	ldr	r2, [r3, #8]
 800456e:	f002 020c 	and.w	r2, r2, #12
 8004572:	2a08      	cmp	r2, #8
 8004574:	d10b      	bne.n	800458e <HAL_RCC_OscConfig+0x5e>
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	0256      	lsls	r6, r2, #9
 800457a:	d508      	bpl.n	800458e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	4b8f      	ldr	r3, [pc, #572]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	039d      	lsls	r5, r3, #14
 8004582:	d5dc      	bpl.n	800453e <HAL_RCC_OscConfig+0xe>
 8004584:	6863      	ldr	r3, [r4, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1d9      	bne.n	800453e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800458a:	2001      	movs	r0, #1
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800458e:	6862      	ldr	r2, [r4, #4]
 8004590:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004594:	d113      	bne.n	80045be <HAL_RCC_OscConfig+0x8e>
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800459c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800459e:	f7fe fce3 	bl	8002f68 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4e86      	ldr	r6, [pc, #536]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80045a4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	6833      	ldr	r3, [r6, #0]
 80045a8:	0398      	lsls	r0, r3, #14
 80045aa:	d4c8      	bmi.n	800453e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fe fcdc 	bl	8002f68 <HAL_GetTick>
 80045b0:	1b40      	subs	r0, r0, r5
 80045b2:	2864      	cmp	r0, #100	; 0x64
 80045b4:	d9f7      	bls.n	80045a6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80045b6:	2003      	movs	r0, #3
}
 80045b8:	b002      	add	sp, #8
 80045ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045be:	4d7f      	ldr	r5, [pc, #508]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 80045c0:	682b      	ldr	r3, [r5, #0]
 80045c2:	b992      	cbnz	r2, 80045ea <HAL_RCC_OscConfig+0xba>
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	682b      	ldr	r3, [r5, #0]
 80045cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80045d2:	f7fe fcc9 	bl	8002f68 <HAL_GetTick>
 80045d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	0399      	lsls	r1, r3, #14
 80045dc:	d5af      	bpl.n	800453e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045de:	f7fe fcc3 	bl	8002f68 <HAL_GetTick>
 80045e2:	1b80      	subs	r0, r0, r6
 80045e4:	2864      	cmp	r0, #100	; 0x64
 80045e6:	d9f7      	bls.n	80045d8 <HAL_RCC_OscConfig+0xa8>
 80045e8:	e7e5      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ea:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80045ee:	d107      	bne.n	8004600 <HAL_RCC_OscConfig+0xd0>
 80045f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045f4:	602b      	str	r3, [r5, #0]
 80045f6:	682b      	ldr	r3, [r5, #0]
 80045f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	e7ce      	b.n	800459e <HAL_RCC_OscConfig+0x6e>
 8004600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004604:	602b      	str	r3, [r5, #0]
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800460c:	e7f6      	b.n	80045fc <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460e:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	f012 0f0c 	tst.w	r2, #12
 8004616:	d007      	beq.n	8004628 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	f002 020c 	and.w	r2, r2, #12
 800461e:	2a08      	cmp	r2, #8
 8004620:	d111      	bne.n	8004646 <HAL_RCC_OscConfig+0x116>
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	0252      	lsls	r2, r2, #9
 8004626:	d40e      	bmi.n	8004646 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004628:	4a64      	ldr	r2, [pc, #400]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	079b      	lsls	r3, r3, #30
 800462e:	d502      	bpl.n	8004636 <HAL_RCC_OscConfig+0x106>
 8004630:	68e3      	ldr	r3, [r4, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d1a9      	bne.n	800458a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004636:	6813      	ldr	r3, [r2, #0]
 8004638:	6921      	ldr	r1, [r4, #16]
 800463a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800463e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004642:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004644:	e77e      	b.n	8004544 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004646:	68e2      	ldr	r2, [r4, #12]
 8004648:	b1c2      	cbz	r2, 800467c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800464a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464c:	4d5b      	ldr	r5, [pc, #364]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004654:	f7fe fc88 	bl	8002f68 <HAL_GetTick>
 8004658:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	079f      	lsls	r7, r3, #30
 800465e:	d507      	bpl.n	8004670 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	6922      	ldr	r2, [r4, #16]
 8004664:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004668:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800466c:	602b      	str	r3, [r5, #0]
 800466e:	e769      	b.n	8004544 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004670:	f7fe fc7a 	bl	8002f68 <HAL_GetTick>
 8004674:	1b80      	subs	r0, r0, r6
 8004676:	2802      	cmp	r0, #2
 8004678:	d9ef      	bls.n	800465a <HAL_RCC_OscConfig+0x12a>
 800467a:	e79c      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800467c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800467e:	4e4f      	ldr	r6, [pc, #316]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004686:	f7fe fc6f 	bl	8002f68 <HAL_GetTick>
 800468a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800468c:	6833      	ldr	r3, [r6, #0]
 800468e:	0798      	lsls	r0, r3, #30
 8004690:	f57f af58 	bpl.w	8004544 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fe fc68 	bl	8002f68 <HAL_GetTick>
 8004698:	1b40      	subs	r0, r0, r5
 800469a:	2802      	cmp	r0, #2
 800469c:	d9f6      	bls.n	800468c <HAL_RCC_OscConfig+0x15c>
 800469e:	e78a      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046a0:	6963      	ldr	r3, [r4, #20]
 80046a2:	4d46      	ldr	r5, [pc, #280]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 80046a4:	b183      	cbz	r3, 80046c8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 80046a6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80046ae:	f7fe fc5b 	bl	8002f68 <HAL_GetTick>
 80046b2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80046b6:	079b      	lsls	r3, r3, #30
 80046b8:	f53f af48 	bmi.w	800454c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046bc:	f7fe fc54 	bl	8002f68 <HAL_GetTick>
 80046c0:	1b80      	subs	r0, r0, r6
 80046c2:	2802      	cmp	r0, #2
 80046c4:	d9f6      	bls.n	80046b4 <HAL_RCC_OscConfig+0x184>
 80046c6:	e776      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80046c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80046ca:	f023 0301 	bic.w	r3, r3, #1
 80046ce:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80046d0:	f7fe fc4a 	bl	8002f68 <HAL_GetTick>
 80046d4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80046d8:	079f      	lsls	r7, r3, #30
 80046da:	f57f af37 	bpl.w	800454c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fe fc43 	bl	8002f68 <HAL_GetTick>
 80046e2:	1b80      	subs	r0, r0, r6
 80046e4:	2802      	cmp	r0, #2
 80046e6:	d9f6      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1a6>
 80046e8:	e765      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ea:	4b34      	ldr	r3, [pc, #208]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 80046ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ee:	00d0      	lsls	r0, r2, #3
 80046f0:	d427      	bmi.n	8004742 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80046f4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004706:	4d2e      	ldr	r5, [pc, #184]	; (80047c0 <HAL_RCC_OscConfig+0x290>)
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	05d9      	lsls	r1, r3, #23
 800470c:	d51b      	bpl.n	8004746 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800470e:	68a3      	ldr	r3, [r4, #8]
 8004710:	4d2a      	ldr	r5, [pc, #168]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 8004712:	2b01      	cmp	r3, #1
 8004714:	d127      	bne.n	8004766 <HAL_RCC_OscConfig+0x236>
 8004716:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004722:	f7fe fc21 	bl	8002f68 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	4e25      	ldr	r6, [pc, #148]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8004728:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800472c:	079b      	lsls	r3, r3, #30
 800472e:	d53f      	bpl.n	80047b0 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 8004730:	2f00      	cmp	r7, #0
 8004732:	f43f af0f 	beq.w	8004554 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4a21      	ldr	r2, [pc, #132]	; (80047bc <HAL_RCC_OscConfig+0x28c>)
 8004738:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800473a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473e:	6413      	str	r3, [r2, #64]	; 0x40
 8004740:	e708      	b.n	8004554 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8004742:	2700      	movs	r7, #0
 8004744:	e7df      	b.n	8004706 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8004746:	682b      	ldr	r3, [r5, #0]
 8004748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800474c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800474e:	f7fe fc0b 	bl	8002f68 <HAL_GetTick>
 8004752:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	05da      	lsls	r2, r3, #23
 8004758:	d4d9      	bmi.n	800470e <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475a:	f7fe fc05 	bl	8002f68 <HAL_GetTick>
 800475e:	1b80      	subs	r0, r0, r6
 8004760:	2864      	cmp	r0, #100	; 0x64
 8004762:	d9f7      	bls.n	8004754 <HAL_RCC_OscConfig+0x224>
 8004764:	e727      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004766:	b9ab      	cbnz	r3, 8004794 <HAL_RCC_OscConfig+0x264>
 8004768:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	672b      	str	r3, [r5, #112]	; 0x70
 8004774:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004776:	f023 0304 	bic.w	r3, r3, #4
 800477a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800477c:	f7fe fbf4 	bl	8002f68 <HAL_GetTick>
 8004780:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004782:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004784:	0798      	lsls	r0, r3, #30
 8004786:	d5d3      	bpl.n	8004730 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004788:	f7fe fbee 	bl	8002f68 <HAL_GetTick>
 800478c:	1b80      	subs	r0, r0, r6
 800478e:	4540      	cmp	r0, r8
 8004790:	d9f7      	bls.n	8004782 <HAL_RCC_OscConfig+0x252>
 8004792:	e710      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	2b05      	cmp	r3, #5
 8004796:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004798:	d103      	bne.n	80047a2 <HAL_RCC_OscConfig+0x272>
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	672b      	str	r3, [r5, #112]	; 0x70
 80047a0:	e7b9      	b.n	8004716 <HAL_RCC_OscConfig+0x1e6>
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	672b      	str	r3, [r5, #112]	; 0x70
 80047a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80047aa:	f023 0304 	bic.w	r3, r3, #4
 80047ae:	e7b5      	b.n	800471c <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b0:	f7fe fbda 	bl	8002f68 <HAL_GetTick>
 80047b4:	1b40      	subs	r0, r0, r5
 80047b6:	4540      	cmp	r0, r8
 80047b8:	d9b7      	bls.n	800472a <HAL_RCC_OscConfig+0x1fa>
 80047ba:	e6fc      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
 80047bc:	40023800 	.word	0x40023800
 80047c0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047c4:	4d38      	ldr	r5, [pc, #224]	; (80048a8 <HAL_RCC_OscConfig+0x378>)
 80047c6:	68ab      	ldr	r3, [r5, #8]
 80047c8:	f003 030c 	and.w	r3, r3, #12
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d041      	beq.n	8004854 <HAL_RCC_OscConfig+0x324>
        __HAL_RCC_PLL_DISABLE();
 80047d0:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80047d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d8:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047da:	d12e      	bne.n	800483a <HAL_RCC_OscConfig+0x30a>
        tickstart = HAL_GetTick();
 80047dc:	f7fe fbc4 	bl	8002f68 <HAL_GetTick>
 80047e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e2:	682b      	ldr	r3, [r5, #0]
 80047e4:	0199      	lsls	r1, r3, #6
 80047e6:	d422      	bmi.n	800482e <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047ea:	085b      	lsrs	r3, r3, #1
 80047ec:	1e5a      	subs	r2, r3, #1
 80047ee:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80047f2:	430b      	orrs	r3, r1
 80047f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80047fa:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80047fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004800:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004808:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004810:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004812:	f7fe fba9 	bl	8002f68 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	4d24      	ldr	r5, [pc, #144]	; (80048a8 <HAL_RCC_OscConfig+0x378>)
        tickstart = HAL_GetTick();
 8004818:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	019a      	lsls	r2, r3, #6
 800481e:	f53f ae9d 	bmi.w	800455c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004822:	f7fe fba1 	bl	8002f68 <HAL_GetTick>
 8004826:	1b00      	subs	r0, r0, r4
 8004828:	2802      	cmp	r0, #2
 800482a:	d9f6      	bls.n	800481a <HAL_RCC_OscConfig+0x2ea>
 800482c:	e6c3      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fe fb9b 	bl	8002f68 <HAL_GetTick>
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	2802      	cmp	r0, #2
 8004836:	d9d4      	bls.n	80047e2 <HAL_RCC_OscConfig+0x2b2>
 8004838:	e6bd      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800483a:	f7fe fb95 	bl	8002f68 <HAL_GetTick>
 800483e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	019b      	lsls	r3, r3, #6
 8004844:	f57f ae8a 	bpl.w	800455c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004848:	f7fe fb8e 	bl	8002f68 <HAL_GetTick>
 800484c:	1b00      	subs	r0, r0, r4
 800484e:	2802      	cmp	r0, #2
 8004850:	d9f6      	bls.n	8004840 <HAL_RCC_OscConfig+0x310>
 8004852:	e6b0      	b.n	80045b6 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004854:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8004856:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004858:	f43f ae97 	beq.w	800458a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004860:	69e1      	ldr	r1, [r4, #28]
 8004862:	428a      	cmp	r2, r1
 8004864:	f47f ae91 	bne.w	800458a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486c:	6a21      	ldr	r1, [r4, #32]
 800486e:	428a      	cmp	r2, r1
 8004870:	f47f ae8b 	bne.w	800458a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004874:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004878:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800487a:	401a      	ands	r2, r3
 800487c:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004880:	f47f ae83 	bne.w	800458a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004884:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004886:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800488a:	0852      	lsrs	r2, r2, #1
 800488c:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004892:	f47f ae7a 	bne.w	800458a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004896:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800489a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800489c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80048a0:	f43f ae5c 	beq.w	800455c <HAL_RCC_OscConfig+0x2c>
 80048a4:	e671      	b.n	800458a <HAL_RCC_OscConfig+0x5a>
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800

080048ac <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ac:	4913      	ldr	r1, [pc, #76]	; (80048fc <HAL_RCC_GetSysClockFreq+0x50>)
{
 80048ae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b0:	688b      	ldr	r3, [r1, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d01b      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x46>
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11b      	bne.n	80048f6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048be:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048c0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c2:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048c8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80048d0:	bf1a      	itte	ne
 80048d2:	480b      	ldrne	r0, [pc, #44]	; (8004900 <HAL_RCC_GetSysClockFreq+0x54>)
 80048d4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	480b      	ldreq	r0, [pc, #44]	; (8004904 <HAL_RCC_GetSysClockFreq+0x58>)
 80048d8:	fba1 0100 	umull	r0, r1, r1, r0
 80048dc:	f7fb fcf0 	bl	80002c0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_RCC_GetSysClockFreq+0x50>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80048e8:	3301      	adds	r3, #1
 80048ea:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80048ec:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80048f0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048f2:	4803      	ldr	r0, [pc, #12]	; (8004900 <HAL_RCC_GetSysClockFreq+0x54>)
 80048f4:	e7fc      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80048f6:	4803      	ldr	r0, [pc, #12]	; (8004904 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80048f8:	e7fa      	b.n	80048f0 <HAL_RCC_GetSysClockFreq+0x44>
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	017d7840 	.word	0x017d7840
 8004904:	00f42400 	.word	0x00f42400

08004908 <HAL_RCC_ClockConfig>:
{
 8004908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800490e:	4604      	mov	r4, r0
 8004910:	b910      	cbnz	r0, 8004918 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004912:	2001      	movs	r0, #1
}
 8004914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004918:	4a46      	ldr	r2, [pc, #280]	; (8004a34 <HAL_RCC_ClockConfig+0x12c>)
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	f003 030f 	and.w	r3, r3, #15
 8004920:	428b      	cmp	r3, r1
 8004922:	d328      	bcc.n	8004976 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004924:	6822      	ldr	r2, [r4, #0]
 8004926:	0797      	lsls	r7, r2, #30
 8004928:	d430      	bmi.n	800498c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	07d0      	lsls	r0, r2, #31
 800492c:	d444      	bmi.n	80049b8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800492e:	4a41      	ldr	r2, [pc, #260]	; (8004a34 <HAL_RCC_ClockConfig+0x12c>)
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	42ab      	cmp	r3, r5
 8004938:	d867      	bhi.n	8004a0a <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	0751      	lsls	r1, r2, #29
 800493e:	d470      	bmi.n	8004a22 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004940:	0713      	lsls	r3, r2, #28
 8004942:	d507      	bpl.n	8004954 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004944:	4a3c      	ldr	r2, [pc, #240]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
 8004946:	6921      	ldr	r1, [r4, #16]
 8004948:	6893      	ldr	r3, [r2, #8]
 800494a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800494e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004952:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004954:	f7ff ffaa 	bl	80048ac <HAL_RCC_GetSysClockFreq>
 8004958:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
 800495a:	4a38      	ldr	r2, [pc, #224]	; (8004a3c <HAL_RCC_ClockConfig+0x134>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004962:	5cd3      	ldrb	r3, [r2, r3]
 8004964:	40d8      	lsrs	r0, r3
 8004966:	4b36      	ldr	r3, [pc, #216]	; (8004a40 <HAL_RCC_ClockConfig+0x138>)
 8004968:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800496a:	4b36      	ldr	r3, [pc, #216]	; (8004a44 <HAL_RCC_ClockConfig+0x13c>)
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f7fd fc0f 	bl	8002190 <HAL_InitTick>
  return HAL_OK;
 8004972:	2000      	movs	r0, #0
 8004974:	e7ce      	b.n	8004914 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	6813      	ldr	r3, [r2, #0]
 8004978:	f023 030f 	bic.w	r3, r3, #15
 800497c:	430b      	orrs	r3, r1
 800497e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004980:	6813      	ldr	r3, [r2, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	428b      	cmp	r3, r1
 8004988:	d1c3      	bne.n	8004912 <HAL_RCC_ClockConfig+0xa>
 800498a:	e7cb      	b.n	8004924 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800498c:	f012 0f04 	tst.w	r2, #4
 8004990:	4b29      	ldr	r3, [pc, #164]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
 8004992:	d003      	beq.n	800499c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004994:	6899      	ldr	r1, [r3, #8]
 8004996:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800499a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	0716      	lsls	r6, r2, #28
 800499e:	d503      	bpl.n	80049a8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a0:	6899      	ldr	r1, [r3, #8]
 80049a2:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 80049a6:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4923      	ldr	r1, [pc, #140]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
 80049aa:	68a0      	ldr	r0, [r4, #8]
 80049ac:	688b      	ldr	r3, [r1, #8]
 80049ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b2:	4303      	orrs	r3, r0
 80049b4:	608b      	str	r3, [r1, #8]
 80049b6:	e7b8      	b.n	800492a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b8:	6861      	ldr	r1, [r4, #4]
 80049ba:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
 80049bc:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c0:	d11b      	bne.n	80049fa <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049c2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	d0a4      	beq.n	8004912 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c8:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ca:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ce:	4f1a      	ldr	r7, [pc, #104]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d0:	f022 0203 	bic.w	r2, r2, #3
 80049d4:	430a      	orrs	r2, r1
 80049d6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80049d8:	f7fe fac6 	bl	8002f68 <HAL_GetTick>
 80049dc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6862      	ldr	r2, [r4, #4]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80049ea:	d0a0      	beq.n	800492e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ec:	f7fe fabc 	bl	8002f68 <HAL_GetTick>
 80049f0:	1b80      	subs	r0, r0, r6
 80049f2:	4540      	cmp	r0, r8
 80049f4:	d9f3      	bls.n	80049de <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80049f6:	2003      	movs	r0, #3
 80049f8:	e78c      	b.n	8004914 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fa:	2902      	cmp	r1, #2
 80049fc:	d102      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fe:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8004a02:	e7e0      	b.n	80049c6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a04:	f012 0f02 	tst.w	r2, #2
 8004a08:	e7dd      	b.n	80049c6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	f023 030f 	bic.w	r3, r3, #15
 8004a10:	432b      	orrs	r3, r5
 8004a12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a14:	6813      	ldr	r3, [r2, #0]
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	f47f af79 	bne.w	8004912 <HAL_RCC_ClockConfig+0xa>
 8004a20:	e78b      	b.n	800493a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a22:	4905      	ldr	r1, [pc, #20]	; (8004a38 <HAL_RCC_ClockConfig+0x130>)
 8004a24:	68e0      	ldr	r0, [r4, #12]
 8004a26:	688b      	ldr	r3, [r1, #8]
 8004a28:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004a2c:	4303      	orrs	r3, r0
 8004a2e:	608b      	str	r3, [r1, #8]
 8004a30:	e786      	b.n	8004940 <HAL_RCC_ClockConfig+0x38>
 8004a32:	bf00      	nop
 8004a34:	40023c00 	.word	0x40023c00
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	08013578 	.word	0x08013578
 8004a40:	20001a50 	.word	0x20001a50
 8004a44:	20001a58 	.word	0x20001a58

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8004a48:	4b01      	ldr	r3, [pc, #4]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x8>)
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20001a50 	.word	0x20001a50

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a54:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004a56:	4a05      	ldr	r2, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004a5e:	5cd3      	ldrb	r3, [r2, r3]
 8004a60:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004a62:	6810      	ldr	r0, [r2, #0]
}
 8004a64:	40d8      	lsrs	r0, r3
 8004a66:	4770      	bx	lr
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	08013588 	.word	0x08013588
 8004a70:	20001a50 	.word	0x20001a50

08004a74 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a74:	230f      	movs	r3, #15
 8004a76:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_GetClockConfig+0x34>)
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	f002 0203 	and.w	r2, r2, #3
 8004a80:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004a88:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8004a90:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	08db      	lsrs	r3, r3, #3
 8004a96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a9a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a9c:	4b03      	ldr	r3, [pc, #12]	; (8004aac <HAL_RCC_GetClockConfig+0x38>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	600b      	str	r3, [r1, #0]
}
 8004aa6:	4770      	bx	lr
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40023c00 	.word	0x40023c00

08004ab0 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ab0:	6803      	ldr	r3, [r0, #0]
{
 8004ab2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ab6:	f013 0601 	ands.w	r6, r3, #1
{
 8004aba:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004abc:	d00b      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004abe:	4aaa      	ldr	r2, [pc, #680]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ac0:	6891      	ldr	r1, [r2, #8]
 8004ac2:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8004ac6:	6091      	str	r1, [r2, #8]
 8004ac8:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8004aca:	6891      	ldr	r1, [r2, #8]
 8004acc:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ace:	fab6 f686 	clz	r6, r6
 8004ad2:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ad4:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ad6:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8004ada:	d012      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004adc:	49a2      	ldr	r1, [pc, #648]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ade:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8004ae0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ae4:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ae8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8004aec:	bf08      	it	eq
 8004aee:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004af0:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004af4:	bf16      	itet	ne
 8004af6:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8004afa:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004afc:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004afe:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b02:	02d8      	lsls	r0, r3, #11
 8004b04:	d510      	bpl.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b06:	4898      	ldr	r0, [pc, #608]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b08:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004b0a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b0e:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b12:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004b16:	ea42 0201 	orr.w	r2, r2, r1
 8004b1a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b1e:	f000 8184 	beq.w	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8004b22:	2900      	cmp	r1, #0
 8004b24:	bf08      	it	eq
 8004b26:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8004b28:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004b2c:	bf18      	it	ne
 8004b2e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b30:	0699      	lsls	r1, r3, #26
 8004b32:	d531      	bpl.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	4b8c      	ldr	r3, [pc, #560]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b36:	4f8d      	ldr	r7, [pc, #564]	; (8004d6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b50:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b52:	f7fe fa09 	bl	8002f68 <HAL_GetTick>
 8004b56:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	05da      	lsls	r2, r3, #23
 8004b5c:	f140 8167 	bpl.w	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b60:	4f81      	ldr	r7, [pc, #516]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b64:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004b68:	f040 816c 	bne.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x394>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b6e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004b72:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004b76:	4a7c      	ldr	r2, [pc, #496]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004b78:	f040 818a 	bne.w	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b7c:	6891      	ldr	r1, [r2, #8]
 8004b7e:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8004b82:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004b86:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8004b8a:	4301      	orrs	r1, r0
 8004b8c:	6091      	str	r1, [r2, #8]
 8004b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b92:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	06d9      	lsls	r1, r3, #27
 8004b9c:	d50c      	bpl.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b9e:	4a72      	ldr	r2, [pc, #456]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004ba0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004ba4:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8004ba8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8004bac:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8004bb0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004bb2:	4301      	orrs	r1, r0
 8004bb4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb8:	045a      	lsls	r2, r3, #17
 8004bba:	d508      	bpl.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bbc:	496a      	ldr	r1, [pc, #424]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bbe:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004bc0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bc4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004bc8:	4302      	orrs	r2, r0
 8004bca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bce:	041f      	lsls	r7, r3, #16
 8004bd0:	d508      	bpl.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bd2:	4965      	ldr	r1, [pc, #404]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bd4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004bd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bda:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004bde:	4302      	orrs	r2, r0
 8004be0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be4:	03d8      	lsls	r0, r3, #15
 8004be6:	d508      	bpl.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be8:	495f      	ldr	r1, [pc, #380]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004bea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004bec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004bf0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004bf4:	4302      	orrs	r2, r0
 8004bf6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bfa:	0399      	lsls	r1, r3, #14
 8004bfc:	d508      	bpl.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfe:	495a      	ldr	r1, [pc, #360]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c00:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004c02:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c06:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8004c0a:	4302      	orrs	r2, r0
 8004c0c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c10:	065a      	lsls	r2, r3, #25
 8004c12:	d508      	bpl.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c14:	4954      	ldr	r1, [pc, #336]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c16:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004c18:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c1c:	f022 0203 	bic.w	r2, r2, #3
 8004c20:	4302      	orrs	r2, r0
 8004c22:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c26:	061f      	lsls	r7, r3, #24
 8004c28:	d508      	bpl.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c2a:	494f      	ldr	r1, [pc, #316]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c2c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004c2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c32:	f022 020c 	bic.w	r2, r2, #12
 8004c36:	4302      	orrs	r2, r0
 8004c38:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c3c:	05d8      	lsls	r0, r3, #23
 8004c3e:	d508      	bpl.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c40:	4949      	ldr	r1, [pc, #292]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c42:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004c44:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c48:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004c4c:	4302      	orrs	r2, r0
 8004c4e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c52:	0599      	lsls	r1, r3, #22
 8004c54:	d508      	bpl.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c56:	4944      	ldr	r1, [pc, #272]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c58:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c5a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c62:	4302      	orrs	r2, r0
 8004c64:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c68:	055a      	lsls	r2, r3, #21
 8004c6a:	d508      	bpl.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c6c:	493e      	ldr	r1, [pc, #248]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c70:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c78:	4302      	orrs	r2, r0
 8004c7a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c7e:	051f      	lsls	r7, r3, #20
 8004c80:	d508      	bpl.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c82:	4939      	ldr	r1, [pc, #228]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c86:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004c8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c8e:	4302      	orrs	r2, r0
 8004c90:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004c94:	04d8      	lsls	r0, r3, #19
 8004c96:	d508      	bpl.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004c98:	4933      	ldr	r1, [pc, #204]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004c9a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004c9c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ca0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004ca4:	4302      	orrs	r2, r0
 8004ca6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004caa:	0499      	lsls	r1, r3, #18
 8004cac:	d508      	bpl.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cae:	492e      	ldr	r1, [pc, #184]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cb0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004cb2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004cb6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004cba:	4302      	orrs	r2, r0
 8004cbc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cc0:	025a      	lsls	r2, r3, #9
 8004cc2:	d508      	bpl.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004cc4:	4928      	ldr	r1, [pc, #160]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cc6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8004cc8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004ccc:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004cd0:	4302      	orrs	r2, r0
 8004cd2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004cd6:	029f      	lsls	r7, r3, #10
 8004cd8:	d50c      	bpl.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cda:	4823      	ldr	r0, [pc, #140]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004cdc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004cde:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004ce2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ce6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8004cea:	bf08      	it	eq
 8004cec:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004cf4:	f013 0f08 	tst.w	r3, #8
 8004cf8:	bf18      	it	ne
 8004cfa:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004cfc:	0358      	lsls	r0, r3, #13
 8004cfe:	d508      	bpl.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d00:	4919      	ldr	r1, [pc, #100]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d02:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004d04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d0c:	4302      	orrs	r2, r0
 8004d0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d12:	0219      	lsls	r1, r3, #8
 8004d14:	d509      	bpl.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d16:	4914      	ldr	r1, [pc, #80]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d18:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004d1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004d20:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004d24:	4302      	orrs	r2, r0
 8004d26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d2a:	2e01      	cmp	r6, #1
 8004d2c:	f000 80b4 	beq.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004d30:	019a      	lsls	r2, r3, #6
 8004d32:	f100 80b1 	bmi.w	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d36:	2d01      	cmp	r5, #1
 8004d38:	d175      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x376>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d3a:	4d0b      	ldr	r5, [pc, #44]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8004d3c:	682b      	ldr	r3, [r5, #0]
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d42:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d44:	f7fe f910 	bl	8002f68 <HAL_GetTick>
 8004d48:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	009f      	lsls	r7, r3, #2
 8004d4e:	f100 8127 	bmi.w	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	0316      	lsls	r6, r2, #12
 8004d56:	d501      	bpl.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004d58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d5a:	b14b      	cbz	r3, 8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004d5c:	02d0      	lsls	r0, r2, #11
 8004d5e:	d522      	bpl.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d62:	bb03      	cbnz	r3, 8004da6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 8004d64:	e004      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d70:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d74:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d7c:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6961      	ldr	r1, [r4, #20]
 8004d84:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004d88:	69a1      	ldr	r1, [r4, #24]
 8004d8a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d8e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d92:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8004d96:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004d98:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004d9c:	3901      	subs	r1, #1
 8004d9e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004da2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004da6:	0291      	lsls	r1, r2, #10
 8004da8:	d515      	bpl.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8004daa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db0:	d111      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x326>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004db2:	4982      	ldr	r1, [pc, #520]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004db4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004db8:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dbc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004dc0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004dc4:	4303      	orrs	r3, r0
 8004dc6:	6960      	ldr	r0, [r4, #20]
 8004dc8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004dcc:	6a20      	ldr	r0, [r4, #32]
 8004dce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004dd6:	0712      	lsls	r2, r2, #28
 8004dd8:	d519      	bpl.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x35e>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dda:	4a78      	ldr	r2, [pc, #480]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ddc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004de0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004de4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dec:	430b      	orrs	r3, r1
 8004dee:	6961      	ldr	r1, [r4, #20]
 8004df0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004df4:	69e1      	ldr	r1, [r4, #28]
 8004df6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004dfa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dfe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004e02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e04:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e0e:	4c6b      	ldr	r4, [pc, #428]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e10:	6823      	ldr	r3, [r4, #0]
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e18:	f7fe f8a6 	bl	8002f68 <HAL_GetTick>
 8004e1c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	f140 80c4 	bpl.w	8004fae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004e26:	2000      	movs	r0, #0
 8004e28:	e009      	b.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
      plli2sused = 1;
 8004e2a:	2601      	movs	r6, #1
 8004e2c:	e67c      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2e:	f7fe f89b 	bl	8002f68 <HAL_GetTick>
 8004e32:	eba0 0008 	sub.w	r0, r0, r8
 8004e36:	2864      	cmp	r0, #100	; 0x64
 8004e38:	f67f ae8e 	bls.w	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8004e3c:	2003      	movs	r0, #3
}
 8004e3e:	b003      	add	sp, #12
 8004e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e46:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	f43f ae8e 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e5c:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e5e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e60:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e64:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8004e66:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e6a:	07db      	lsls	r3, r3, #31
 8004e6c:	f57f ae7e 	bpl.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8004e70:	f7fe f87a 	bl	8002f68 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e74:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004e78:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e7c:	0798      	lsls	r0, r3, #30
 8004e7e:	f53f ae75 	bmi.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e82:	f7fe f871 	bl	8002f68 <HAL_GetTick>
 8004e86:	eba0 0008 	sub.w	r0, r0, r8
 8004e8a:	4548      	cmp	r0, r9
 8004e8c:	d9f5      	bls.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 8004e8e:	e7d5      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e90:	6891      	ldr	r1, [r2, #8]
 8004e92:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004e96:	e679      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004e98:	4e48      	ldr	r6, [pc, #288]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e9a:	6833      	ldr	r3, [r6, #0]
 8004e9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ea0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004ea2:	f7fe f861 	bl	8002f68 <HAL_GetTick>
 8004ea6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea8:	6833      	ldr	r3, [r6, #0]
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	d472      	bmi.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004eae:	6822      	ldr	r2, [r4, #0]
 8004eb0:	07d7      	lsls	r7, r2, #31
 8004eb2:	d512      	bpl.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004eb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004eb6:	b983      	cbnz	r3, 8004eda <HAL_RCCEx_PeriphCLKConfig+0x42a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eb8:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ebc:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	6861      	ldr	r1, [r4, #4]
 8004ecc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8004ed0:	68a1      	ldr	r1, [r4, #8]
 8004ed2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004ed6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004eda:	0316      	lsls	r6, r2, #12
 8004edc:	d503      	bpl.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004ede:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004ee6:	02d0      	lsls	r0, r2, #11
 8004ee8:	d51e      	bpl.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x478>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef0:	d11a      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x478>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ef2:	4932      	ldr	r1, [pc, #200]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ef4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ef8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004efc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f00:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004f04:	4303      	orrs	r3, r0
 8004f06:	6860      	ldr	r0, [r4, #4]
 8004f08:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f0c:	68e0      	ldr	r0, [r4, #12]
 8004f0e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004f12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f16:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f1c:	f020 001f 	bic.w	r0, r0, #31
 8004f20:	3b01      	subs	r3, #1
 8004f22:	4303      	orrs	r3, r0
 8004f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f28:	01d1      	lsls	r1, r2, #7
 8004f2a:	d511      	bpl.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f2c:	4923      	ldr	r1, [pc, #140]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f2e:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f32:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f36:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8004f3a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004f3e:	4303      	orrs	r3, r0
 8004f40:	6860      	ldr	r0, [r4, #4]
 8004f42:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004f46:	6920      	ldr	r0, [r4, #16]
 8004f48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f50:	0192      	lsls	r2, r2, #6
 8004f52:	d50d      	bpl.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f54:	6923      	ldr	r3, [r4, #16]
 8004f56:	6862      	ldr	r2, [r4, #4]
 8004f58:	041b      	lsls	r3, r3, #16
 8004f5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004f5e:	68e2      	ldr	r2, [r4, #12]
 8004f60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f64:	68a2      	ldr	r2, [r4, #8]
 8004f66:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004f6a:	4a14      	ldr	r2, [pc, #80]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004f70:	4e12      	ldr	r6, [pc, #72]	; (8004fbc <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f72:	6833      	ldr	r3, [r6, #0]
 8004f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f78:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004f7a:	f7fd fff5 	bl	8002f68 <HAL_GetTick>
 8004f7e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	f53f aed7 	bmi.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x286>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f88:	f7fd ffee 	bl	8002f68 <HAL_GetTick>
 8004f8c:	1bc0      	subs	r0, r0, r7
 8004f8e:	2864      	cmp	r0, #100	; 0x64
 8004f90:	d9f6      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f92:	e753      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f94:	f7fd ffe8 	bl	8002f68 <HAL_GetTick>
 8004f98:	1bc0      	subs	r0, r0, r7
 8004f9a:	2864      	cmp	r0, #100	; 0x64
 8004f9c:	d984      	bls.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f9e:	e74d      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fa0:	f7fd ffe2 	bl	8002f68 <HAL_GetTick>
 8004fa4:	1b80      	subs	r0, r0, r6
 8004fa6:	2864      	cmp	r0, #100	; 0x64
 8004fa8:	f67f aecf 	bls.w	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004fac:	e746      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fae:	f7fd ffdb 	bl	8002f68 <HAL_GetTick>
 8004fb2:	1b40      	subs	r0, r0, r5
 8004fb4:	2864      	cmp	r0, #100	; 0x64
 8004fb6:	f67f af32 	bls.w	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004fba:	e73f      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004fbc:	40023800 	.word	0x40023800

08004fc0 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004fc0:	4770      	bx	lr

08004fc2 <HAL_SDRAM_Init>:
{
 8004fc2:	b538      	push	{r3, r4, r5, lr}
 8004fc4:	460d      	mov	r5, r1
  if (hsdram == NULL)
 8004fc6:	4604      	mov	r4, r0
 8004fc8:	b1c8      	cbz	r0, 8004ffe <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004fca:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004fce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fd2:	b91b      	cbnz	r3, 8004fdc <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004fd4:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004fd8:	f7ff fff2 	bl	8004fc0 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fdc:	2302      	movs	r3, #2
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fde:	1d21      	adds	r1, r4, #4
 8004fe0:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004fe2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fe6:	f000 f9c6 	bl	8005376 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fea:	6862      	ldr	r2, [r4, #4]
 8004fec:	4629      	mov	r1, r5
 8004fee:	6820      	ldr	r0, [r4, #0]
 8004ff0:	f000 f9fc 	bl	80053ec <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ff4:	2301      	movs	r3, #1
  return HAL_OK;
 8004ff6:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004ff8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8004ffc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004ffe:	2001      	movs	r0, #1
 8005000:	e7fc      	b.n	8004ffc <HAL_SDRAM_Init+0x3a>

08005002 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005002:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005004:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005008:	4605      	mov	r5, r0
 800500a:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800500c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800500e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005010:	d010      	beq.n	8005034 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005012:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 8005016:	2c01      	cmp	r4, #1
 8005018:	d110      	bne.n	800503c <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800501a:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800501c:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800501e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005022:	f000 fa19 	bl	8005458 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005026:	6833      	ldr	r3, [r6, #0]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d104      	bne.n	8005036 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800502c:	2305      	movs	r3, #5
 800502e:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005032:	2000      	movs	r0, #0
}
 8005034:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005036:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
 800503a:	e7fa      	b.n	8005032 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800503c:	2001      	movs	r0, #1
 800503e:	e7f9      	b.n	8005034 <HAL_SDRAM_SendCommand+0x32>

08005040 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005040:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005042:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005046:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005048:	2b02      	cmp	r3, #2
 800504a:	b2d8      	uxtb	r0, r3
 800504c:	d00d      	beq.n	800506a <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800504e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005052:	2b01      	cmp	r3, #1
 8005054:	b2dd      	uxtb	r5, r3
 8005056:	d109      	bne.n	800506c <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005058:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800505a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800505c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005060:	f000 fa0c 	bl	800547c <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005064:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005066:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800506a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800506c:	2001      	movs	r0, #1
 800506e:	e7fc      	b.n	800506a <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005070 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005070:	4770      	bx	lr
	...

08005074 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005074:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005078:	2b01      	cmp	r3, #1
 800507a:	d133      	bne.n	80050e4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	2302      	movs	r3, #2
 800507e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005082:	6803      	ldr	r3, [r0, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508c:	4a16      	ldr	r2, [pc, #88]	; (80050e8 <HAL_TIM_Base_Start_IT+0x74>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d01a      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 8005092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005096:	d017      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 8005098:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800509c:	4293      	cmp	r3, r2
 800509e:	d013      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 80050a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00f      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 80050a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 80050b0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 80050b8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <HAL_TIM_Base_Start_IT+0x54>
 80050c0:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d107      	bne.n	80050d8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050c8:	6899      	ldr	r1, [r3, #8]
 80050ca:	4a08      	ldr	r2, [pc, #32]	; (80050ec <HAL_TIM_Base_Start_IT+0x78>)
 80050cc:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ce:	2a06      	cmp	r2, #6
 80050d0:	d006      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x6c>
 80050d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80050d6:	d003      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e0:	2000      	movs	r0, #0
}
 80050e2:	4770      	bx	lr
    return HAL_ERROR;
 80050e4:	2001      	movs	r0, #1
 80050e6:	4770      	bx	lr
 80050e8:	40010000 	.word	0x40010000
 80050ec:	00010007 	.word	0x00010007

080050f0 <HAL_TIM_OC_DelayElapsedCallback>:
 80050f0:	4770      	bx	lr

080050f2 <HAL_TIM_IC_CaptureCallback>:
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80050f4:	4770      	bx	lr

080050f6 <HAL_TIM_TriggerCallback>:
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 80050f8:	6803      	ldr	r3, [r0, #0]
{
 80050fa:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80050fc:	68dd      	ldr	r5, [r3, #12]
{
 80050fe:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 8005100:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005102:	07b2      	lsls	r2, r6, #30
 8005104:	d50d      	bpl.n	8005122 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005106:	07a9      	lsls	r1, r5, #30
 8005108:	d50b      	bpl.n	8005122 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800510a:	f06f 0202 	mvn.w	r2, #2
 800510e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005110:	2201      	movs	r2, #1
 8005112:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	079a      	lsls	r2, r3, #30
 8005118:	d075      	beq.n	8005206 <HAL_TIM_IRQHandler+0x10e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800511a:	f7ff ffea 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511e:	2300      	movs	r3, #0
 8005120:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005122:	0773      	lsls	r3, r6, #29
 8005124:	d510      	bpl.n	8005148 <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005126:	0768      	lsls	r0, r5, #29
 8005128:	d50e      	bpl.n	8005148 <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005130:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005132:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005134:	2202      	movs	r2, #2
 8005136:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800513e:	d068      	beq.n	8005212 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005140:	f7ff ffd7 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005144:	2300      	movs	r3, #0
 8005146:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005148:	0731      	lsls	r1, r6, #28
 800514a:	d50f      	bpl.n	800516c <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800514c:	072a      	lsls	r2, r5, #28
 800514e:	d50d      	bpl.n	800516c <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005156:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800515a:	2204      	movs	r2, #4
 800515c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	079b      	lsls	r3, r3, #30
 8005162:	d05c      	beq.n	800521e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8005164:	f7ff ffc5 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005168:	2300      	movs	r3, #0
 800516a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800516c:	06f1      	lsls	r1, r6, #27
 800516e:	d510      	bpl.n	8005192 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005170:	06ea      	lsls	r2, r5, #27
 8005172:	d50e      	bpl.n	8005192 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800517e:	2208      	movs	r2, #8
 8005180:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f413 7f40 	tst.w	r3, #768	; 0x300
 8005188:	d04f      	beq.n	800522a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800518a:	f7ff ffb2 	bl	80050f2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	2300      	movs	r3, #0
 8005190:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005192:	07f3      	lsls	r3, r6, #31
 8005194:	d508      	bpl.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005196:	07e8      	lsls	r0, r5, #31
 8005198:	d506      	bpl.n	80051a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800519a:	6823      	ldr	r3, [r4, #0]
 800519c:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051a2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a4:	f7fd f836 	bl	8002214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051a8:	f416 5f02 	tst.w	r6, #8320	; 0x2080
 80051ac:	d008      	beq.n	80051c0 <HAL_TIM_IRQHandler+0xc8>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ae:	0629      	lsls	r1, r5, #24
 80051b0:	d506      	bpl.n	80051c0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051b8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051ba:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80051bc:	f000 f8d9 	bl	8005372 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051c0:	05f2      	lsls	r2, r6, #23
 80051c2:	d508      	bpl.n	80051d6 <HAL_TIM_IRQHandler+0xde>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051c4:	062b      	lsls	r3, r5, #24
 80051c6:	d506      	bpl.n	80051d6 <HAL_TIM_IRQHandler+0xde>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80051d2:	f000 f8cf 	bl	8005374 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051d6:	0670      	lsls	r0, r6, #25
 80051d8:	d508      	bpl.n	80051ec <HAL_TIM_IRQHandler+0xf4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051da:	0669      	lsls	r1, r5, #25
 80051dc:	d506      	bpl.n	80051ec <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051e6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80051e8:	f7ff ff85 	bl	80050f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051ec:	06b2      	lsls	r2, r6, #26
 80051ee:	d522      	bpl.n	8005236 <HAL_TIM_IRQHandler+0x13e>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051f0:	06ab      	lsls	r3, r5, #26
 80051f2:	d520      	bpl.n	8005236 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051fc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8005202:	f000 b8b5 	b.w	8005370 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	f7ff ff73 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520a:	4620      	mov	r0, r4
 800520c:	f7ff ff72 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005210:	e785      	b.n	800511e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005212:	f7ff ff6d 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff ff6c 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
 800521c:	e792      	b.n	8005144 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	f7ff ff67 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005222:	4620      	mov	r0, r4
 8005224:	f7ff ff66 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005228:	e79e      	b.n	8005168 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	f7ff ff61 	bl	80050f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff ff60 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
 8005234:	e7ab      	b.n	800518e <HAL_TIM_IRQHandler+0x96>
}
 8005236:	bd70      	pop	{r4, r5, r6, pc}

08005238 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005238:	4a33      	ldr	r2, [pc, #204]	; (8005308 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800523a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	4290      	cmp	r0, r2
 800523e:	d012      	beq.n	8005266 <TIM_Base_SetConfig+0x2e>
 8005240:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005244:	d00f      	beq.n	8005266 <TIM_Base_SetConfig+0x2e>
 8005246:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800524a:	4290      	cmp	r0, r2
 800524c:	d00b      	beq.n	8005266 <TIM_Base_SetConfig+0x2e>
 800524e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005252:	4290      	cmp	r0, r2
 8005254:	d007      	beq.n	8005266 <TIM_Base_SetConfig+0x2e>
 8005256:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800525a:	4290      	cmp	r0, r2
 800525c:	d003      	beq.n	8005266 <TIM_Base_SetConfig+0x2e>
 800525e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005262:	4290      	cmp	r0, r2
 8005264:	d119      	bne.n	800529a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8005266:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800526c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526e:	4a26      	ldr	r2, [pc, #152]	; (8005308 <TIM_Base_SetConfig+0xd0>)
 8005270:	4290      	cmp	r0, r2
 8005272:	d029      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 8005274:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005278:	d026      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 800527a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800527e:	4290      	cmp	r0, r2
 8005280:	d022      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 8005282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005286:	4290      	cmp	r0, r2
 8005288:	d01e      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 800528a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800528e:	4290      	cmp	r0, r2
 8005290:	d01a      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 8005292:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005296:	4290      	cmp	r0, r2
 8005298:	d016      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 800529a:	4a1c      	ldr	r2, [pc, #112]	; (800530c <TIM_Base_SetConfig+0xd4>)
 800529c:	4290      	cmp	r0, r2
 800529e:	d013      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 80052a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052a4:	4290      	cmp	r0, r2
 80052a6:	d00f      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 80052a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ac:	4290      	cmp	r0, r2
 80052ae:	d00b      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 80052b0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80052b4:	4290      	cmp	r0, r2
 80052b6:	d007      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 80052b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052bc:	4290      	cmp	r0, r2
 80052be:	d003      	beq.n	80052c8 <TIM_Base_SetConfig+0x90>
 80052c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052c4:	4290      	cmp	r0, r2
 80052c6:	d103      	bne.n	80052d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052cc:	68ca      	ldr	r2, [r1, #12]
 80052ce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	694a      	ldr	r2, [r1, #20]
 80052d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80052d8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052da:	688b      	ldr	r3, [r1, #8]
 80052dc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052de:	680b      	ldr	r3, [r1, #0]
 80052e0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <TIM_Base_SetConfig+0xd0>)
 80052e4:	4298      	cmp	r0, r3
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0xb8>
 80052e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052ec:	4298      	cmp	r0, r3
 80052ee:	d101      	bne.n	80052f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f0:	690b      	ldr	r3, [r1, #16]
 80052f2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f4:	2301      	movs	r3, #1
 80052f6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052f8:	6903      	ldr	r3, [r0, #16]
 80052fa:	07db      	lsls	r3, r3, #31
 80052fc:	d503      	bpl.n	8005306 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052fe:	6903      	ldr	r3, [r0, #16]
 8005300:	f023 0301 	bic.w	r3, r3, #1
 8005304:	6103      	str	r3, [r0, #16]
  }
}
 8005306:	4770      	bx	lr
 8005308:	40010000 	.word	0x40010000
 800530c:	40014000 	.word	0x40014000

08005310 <HAL_TIM_Base_Init>:
{
 8005310:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005312:	4604      	mov	r4, r0
 8005314:	b350      	cbz	r0, 800536c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800531a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800531e:	b91b      	cbnz	r3, 8005328 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005320:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005324:	f7ff fea4 	bl	8005070 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532a:	6820      	ldr	r0, [r4, #0]
 800532c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005332:	f7ff ff81 	bl	8005238 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005336:	2301      	movs	r3, #1
  return HAL_OK;
 8005338:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800533e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005342:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005346:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800534a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800534e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800535a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800535e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005362:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005366:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800536a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800536c:	2001      	movs	r0, #1
 800536e:	e7fc      	b.n	800536a <HAL_TIM_Base_Init+0x5a>

08005370 <HAL_TIMEx_CommutCallback>:
 8005370:	4770      	bx	lr

08005372 <HAL_TIMEx_BreakCallback>:
 8005372:	4770      	bx	lr

08005374 <HAL_TIMEx_Break2Callback>:
 8005374:	4770      	bx	lr

08005376 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005376:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800537a:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800537c:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8005380:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8005384:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8005388:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800538c:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8005390:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005392:	b9a2      	cbnz	r2, 80053be <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005394:	ea43 0209 	orr.w	r2, r3, r9
 8005398:	6801      	ldr	r1, [r0, #0]
 800539a:	432a      	orrs	r2, r5
 800539c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 80053a0:	ea42 0308 	orr.w	r3, r2, r8
 80053a4:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 80053a8:	ea43 030e 	orr.w	r3, r3, lr
 80053ac:	ea43 030c 	orr.w	r3, r3, ip
 80053b0:	433b      	orrs	r3, r7
 80053b2:	4333      	orrs	r3, r6
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80053b8:	2000      	movs	r0, #0
 80053ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80053be:	6802      	ldr	r2, [r0, #0]
 80053c0:	ea43 0309 	orr.w	r3, r3, r9
 80053c4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80053c8:	4313      	orrs	r3, r2
 80053ca:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80053cc:	ea45 0308 	orr.w	r3, r5, r8
 80053d0:	6842      	ldr	r2, [r0, #4]
 80053d2:	ea43 030e 	orr.w	r3, r3, lr
 80053d6:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80053da:	ea43 030c 	orr.w	r3, r3, ip
 80053de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80053e2:	433b      	orrs	r3, r7
 80053e4:	4333      	orrs	r3, r6
 80053e6:	4313      	orrs	r3, r2
 80053e8:	6043      	str	r3, [r0, #4]
 80053ea:	e7e5      	b.n	80053b8 <FMC_SDRAM_Init+0x42>

080053ec <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053ec:	68cb      	ldr	r3, [r1, #12]
 80053ee:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 80053f2:	694b      	ldr	r3, [r1, #20]
{
 80053f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80053f6:	3b01      	subs	r3, #1
 80053f8:	680f      	ldr	r7, [r1, #0]
 80053fa:	684c      	ldr	r4, [r1, #4]
 80053fc:	688e      	ldr	r6, [r1, #8]
 80053fe:	051b      	lsls	r3, r3, #20
 8005400:	690d      	ldr	r5, [r1, #16]
 8005402:	3c01      	subs	r4, #1
 8005404:	6989      	ldr	r1, [r1, #24]
 8005406:	3e01      	subs	r6, #1
 8005408:	3d01      	subs	r5, #1
 800540a:	3f01      	subs	r7, #1
 800540c:	3901      	subs	r1, #1
 800540e:	0124      	lsls	r4, r4, #4
 8005410:	0236      	lsls	r6, r6, #8
 8005412:	042d      	lsls	r5, r5, #16
 8005414:	0609      	lsls	r1, r1, #24
 8005416:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800541a:	b95a      	cbnz	r2, 8005434 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800541c:	433b      	orrs	r3, r7
 800541e:	6882      	ldr	r2, [r0, #8]
 8005420:	4323      	orrs	r3, r4
 8005422:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005426:	4333      	orrs	r3, r6
 8005428:	432b      	orrs	r3, r5
 800542a:	430b      	orrs	r3, r1
 800542c:	4313      	orrs	r3, r2
 800542e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8005430:	2000      	movs	r0, #0
 8005432:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005434:	6882      	ldr	r2, [r0, #8]
 8005436:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800543a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 800543e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005440:	ea44 0306 	orr.w	r3, r4, r6
 8005444:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005446:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005448:	68c2      	ldr	r2, [r0, #12]
 800544a:	432b      	orrs	r3, r5
 800544c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8005450:	430b      	orrs	r3, r1
 8005452:	4313      	orrs	r3, r2
 8005454:	60c3      	str	r3, [r0, #12]
 8005456:	e7eb      	b.n	8005430 <FMC_SDRAM_Timing_Init+0x44>

08005458 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005458:	6902      	ldr	r2, [r0, #16]
{
 800545a:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800545c:	e9d1 3400 	ldrd	r3, r4, [r1]
 8005460:	0d92      	lsrs	r2, r2, #22
 8005462:	4323      	orrs	r3, r4
 8005464:	68cc      	ldr	r4, [r1, #12]
 8005466:	0592      	lsls	r2, r2, #22
 8005468:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800546c:	4313      	orrs	r3, r2
 800546e:	688a      	ldr	r2, [r1, #8]
 8005470:	3a01      	subs	r2, #1
 8005472:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005476:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 8005478:	2000      	movs	r0, #0
 800547a:	bd10      	pop	{r4, pc}

0800547c <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800547c:	6943      	ldr	r3, [r0, #20]
 800547e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005482:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8005486:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800548a:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 800548c:	2000      	movs	r0, #0
 800548e:	4770      	bx	lr

08005490 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005490:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005494:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005498:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054a4:	4770      	bx	lr

080054a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054aa:	4770      	bx	lr

080054ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80054ac:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054ae:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80054b0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054b2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054b8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80054ba:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80054bc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80054be:	3301      	adds	r3, #1
 80054c0:	6003      	str	r3, [r0, #0]
}
 80054c2:	4770      	bx	lr

080054c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054c4:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054c6:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054c8:	1c63      	adds	r3, r4, #1
 80054ca:	d10a      	bne.n	80054e2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054cc:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054d2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054d4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80054d6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80054d8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80054da:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80054dc:	3301      	adds	r3, #1
 80054de:	6003      	str	r3, [r0, #0]
}
 80054e0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054e2:	f100 0208 	add.w	r2, r0, #8
 80054e6:	4613      	mov	r3, r2
 80054e8:	6852      	ldr	r2, [r2, #4]
 80054ea:	6815      	ldr	r5, [r2, #0]
 80054ec:	42a5      	cmp	r5, r4
 80054ee:	d9fa      	bls.n	80054e6 <vListInsert+0x22>
 80054f0:	e7ed      	b.n	80054ce <vListInsert+0xa>

080054f2 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80054f2:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054f4:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80054f8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054fa:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054fc:	6859      	ldr	r1, [r3, #4]
 80054fe:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005500:	bf08      	it	eq
 8005502:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005504:	2200      	movs	r2, #0
 8005506:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	3a01      	subs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800550e:	6818      	ldr	r0, [r3, #0]
}
 8005510:	4770      	bx	lr

08005512 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005512:	b510      	push	{r4, lr}
 8005514:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005516:	f001 fc15 	bl	8006d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800551a:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800551c:	f001 fc36 	bl	8006d8c <vPortExitCritical>

	return xReturn;
}
 8005520:	fab4 f084 	clz	r0, r4
 8005524:	0940      	lsrs	r0, r0, #5
 8005526:	bd10      	pop	{r4, pc}

08005528 <prvCopyDataToQueue>:
{
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800552c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800552e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005530:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005532:	b952      	cbnz	r2, 800554a <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005534:	6807      	ldr	r7, [r0, #0]
 8005536:	bb47      	cbnz	r7, 800558a <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005538:	6880      	ldr	r0, [r0, #8]
 800553a:	f001 f8c3 	bl	80066c4 <xTaskPriorityDisinherit>
 800553e:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005540:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005542:	3601      	adds	r6, #1
}
 8005544:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005546:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800554a:	b965      	cbnz	r5, 8005566 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800554c:	6840      	ldr	r0, [r0, #4]
 800554e:	f009 f875 	bl	800e63c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005552:	6863      	ldr	r3, [r4, #4]
 8005554:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005556:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005558:	68a2      	ldr	r2, [r4, #8]
 800555a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800555c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800555e:	d3f0      	bcc.n	8005542 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	6063      	str	r3, [r4, #4]
 8005564:	e7ed      	b.n	8005542 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005566:	68c0      	ldr	r0, [r0, #12]
 8005568:	f009 f868 	bl	800e63c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800556c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800556e:	68e3      	ldr	r3, [r4, #12]
 8005570:	4251      	negs	r1, r2
 8005572:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005574:	6822      	ldr	r2, [r4, #0]
 8005576:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005578:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800557a:	bf3e      	ittt	cc
 800557c:	68a3      	ldrcc	r3, [r4, #8]
 800557e:	185b      	addcc	r3, r3, r1
 8005580:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005582:	2d02      	cmp	r5, #2
 8005584:	d101      	bne.n	800558a <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005586:	b116      	cbz	r6, 800558e <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 8005588:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800558a:	2500      	movs	r5, #0
 800558c:	e7d9      	b.n	8005542 <prvCopyDataToQueue+0x1a>
 800558e:	4635      	mov	r5, r6
 8005590:	e7d7      	b.n	8005542 <prvCopyDataToQueue+0x1a>

08005592 <prvCopyDataFromQueue>:
{
 8005592:	4603      	mov	r3, r0
 8005594:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005598:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800559a:	b162      	cbz	r2, 80055b6 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800559c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800559e:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055a0:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055a2:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055a4:	60dc      	str	r4, [r3, #12]
}
 80055a6:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055aa:	bf24      	itt	cs
 80055ac:	6819      	ldrcs	r1, [r3, #0]
 80055ae:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055b0:	68d9      	ldr	r1, [r3, #12]
 80055b2:	f009 b843 	b.w	800e63c <memcpy>
}
 80055b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <prvUnlockQueue>:
{
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80055c0:	f001 fbc0 	bl	8006d44 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80055c4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80055cc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	dc14      	bgt.n	80055fc <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80055d2:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d4:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80055d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80055dc:	f001 fbd6 	bl	8006d8c <vPortExitCritical>
	taskENTER_CRITICAL();
 80055e0:	f001 fbb0 	bl	8006d44 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80055e4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80055e8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	dc12      	bgt.n	8005614 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80055ee:	23ff      	movs	r3, #255	; 0xff
 80055f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80055f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80055f8:	f001 bbc8 	b.w	8006d8c <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0e7      	beq.n	80055d2 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005602:	4630      	mov	r0, r6
 8005604:	f000 ff74 	bl	80064f0 <xTaskRemoveFromEventList>
 8005608:	b108      	cbz	r0, 800560e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800560a:	f000 fff5 	bl	80065f8 <vTaskMissedYield>
			--cTxLock;
 800560e:	3d01      	subs	r5, #1
 8005610:	b26d      	sxtb	r5, r5
 8005612:	e7dc      	b.n	80055ce <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0e9      	beq.n	80055ee <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800561a:	4630      	mov	r0, r6
 800561c:	f000 ff68 	bl	80064f0 <xTaskRemoveFromEventList>
 8005620:	b108      	cbz	r0, 8005626 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8005622:	f000 ffe9 	bl	80065f8 <vTaskMissedYield>
				--cRxLock;
 8005626:	3d01      	subs	r5, #1
 8005628:	b26d      	sxtb	r5, r5
 800562a:	e7de      	b.n	80055ea <prvUnlockQueue+0x2e>

0800562c <xQueueGenericReset>:
{
 800562c:	b538      	push	{r3, r4, r5, lr}
 800562e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8005630:	4604      	mov	r4, r0
 8005632:	b950      	cbnz	r0, 800564a <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	b672      	cpsid	i
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	b662      	cpsie	i
 8005648:	e7fe      	b.n	8005648 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800564a:	f001 fb7b 	bl	8006d44 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800564e:	6822      	ldr	r2, [r4, #0]
 8005650:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005654:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005656:	434b      	muls	r3, r1
 8005658:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800565a:	1a5b      	subs	r3, r3, r1
 800565c:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800565e:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005660:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005662:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005664:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005666:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005668:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800566c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005670:	b9a5      	cbnz	r5, 800569c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005672:	6923      	ldr	r3, [r4, #16]
 8005674:	b173      	cbz	r3, 8005694 <xQueueGenericReset+0x68>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005676:	f104 0010 	add.w	r0, r4, #16
 800567a:	f000 ff39 	bl	80064f0 <xTaskRemoveFromEventList>
 800567e:	b148      	cbz	r0, 8005694 <xQueueGenericReset+0x68>
					queueYIELD_IF_USING_PREEMPTION();
 8005680:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005688:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8005694:	f001 fb7a 	bl	8006d8c <vPortExitCritical>
}
 8005698:	2001      	movs	r0, #1
 800569a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800569c:	f104 0010 	add.w	r0, r4, #16
 80056a0:	f7ff fef6 	bl	8005490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80056a8:	f7ff fef2 	bl	8005490 <vListInitialise>
 80056ac:	e7f2      	b.n	8005694 <xQueueGenericReset+0x68>

080056ae <xQueueGenericCreate>:
	{
 80056ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b0:	460d      	mov	r5, r1
 80056b2:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056b4:	4606      	mov	r6, r0
 80056b6:	b950      	cbnz	r0, 80056ce <xQueueGenericCreate+0x20>
 80056b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056bc:	b672      	cpsid	i
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	b662      	cpsie	i
 80056cc:	e7fe      	b.n	80056cc <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ce:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80056d0:	3050      	adds	r0, #80	; 0x50
 80056d2:	f001 fa11 	bl	8006af8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80056d6:	4604      	mov	r4, r0
 80056d8:	b158      	cbz	r0, 80056f2 <xQueueGenericCreate+0x44>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80056da:	b165      	cbz	r5, 80056f6 <xQueueGenericCreate+0x48>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80056dc:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056e0:	2101      	movs	r1, #1
 80056e2:	4620      	mov	r0, r4
 80056e4:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80056e6:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ea:	f7ff ff9f 	bl	800562c <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80056ee:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80056f2:	4620      	mov	r0, r4
 80056f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056f6:	4603      	mov	r3, r0
 80056f8:	e7f2      	b.n	80056e0 <xQueueGenericCreate+0x32>

080056fa <xQueueCreateCountingSemaphore>:
	{
 80056fa:	b510      	push	{r4, lr}
 80056fc:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 80056fe:	b950      	cbnz	r0, 8005716 <xQueueCreateCountingSemaphore+0x1c>
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	b672      	cpsid	i
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	b662      	cpsie	i
 8005714:	e7fe      	b.n	8005714 <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005716:	4288      	cmp	r0, r1
 8005718:	d20a      	bcs.n	8005730 <xQueueCreateCountingSemaphore+0x36>
 800571a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571e:	b672      	cpsid	i
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	b662      	cpsie	i
 800572e:	e7fe      	b.n	800572e <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005730:	2202      	movs	r2, #2
 8005732:	2100      	movs	r1, #0
 8005734:	f7ff ffbb 	bl	80056ae <xQueueGenericCreate>
		if( xHandle != NULL )
 8005738:	b100      	cbz	r0, 800573c <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800573a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800573c:	bd10      	pop	{r4, pc}

0800573e <xQueueGenericSend>:
{
 800573e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005742:	b085      	sub	sp, #20
 8005744:	4688      	mov	r8, r1
 8005746:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8005748:	4604      	mov	r4, r0
{
 800574a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800574c:	b950      	cbnz	r0, 8005764 <xQueueGenericSend+0x26>
 800574e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005752:	b672      	cpsid	i
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	b662      	cpsie	i
 8005762:	e7fe      	b.n	8005762 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005764:	b961      	cbnz	r1, 8005780 <xQueueGenericSend+0x42>
 8005766:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005768:	b153      	cbz	r3, 8005780 <xQueueGenericSend+0x42>
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	b672      	cpsid	i
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	b662      	cpsie	i
 800577e:	e7fe      	b.n	800577e <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005780:	2f02      	cmp	r7, #2
 8005782:	d10d      	bne.n	80057a0 <xQueueGenericSend+0x62>
 8005784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d00a      	beq.n	80057a0 <xQueueGenericSend+0x62>
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	b672      	cpsid	i
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	b662      	cpsie	i
 800579e:	e7fe      	b.n	800579e <xQueueGenericSend+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057a0:	f000 ff32 	bl	8006608 <xTaskGetSchedulerState>
 80057a4:	4606      	mov	r6, r0
 80057a6:	b960      	cbnz	r0, 80057c2 <xQueueGenericSend+0x84>
 80057a8:	9b01      	ldr	r3, [sp, #4]
 80057aa:	b15b      	cbz	r3, 80057c4 <xQueueGenericSend+0x86>
 80057ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b0:	b672      	cpsid	i
 80057b2:	f383 8811 	msr	BASEPRI, r3
 80057b6:	f3bf 8f6f 	isb	sy
 80057ba:	f3bf 8f4f 	dsb	sy
 80057be:	b662      	cpsie	i
 80057c0:	e7fe      	b.n	80057c0 <xQueueGenericSend+0x82>
 80057c2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80057c4:	f04f 0900 	mov.w	r9, #0
 80057c8:	e037      	b.n	800583a <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 80057ca:	9d01      	ldr	r5, [sp, #4]
 80057cc:	b91d      	cbnz	r5, 80057d6 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 80057ce:	f001 fadd 	bl	8006d8c <vPortExitCritical>
			return errQUEUE_FULL;
 80057d2:	2000      	movs	r0, #0
 80057d4:	e052      	b.n	800587c <xQueueGenericSend+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 80057d6:	b916      	cbnz	r6, 80057de <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d8:	a802      	add	r0, sp, #8
 80057da:	f000 fec7 	bl	800656c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80057de:	f001 fad5 	bl	8006d8c <vPortExitCritical>
		vTaskSuspendAll();
 80057e2:	f000 fd13 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057e6:	f001 faad 	bl	8006d44 <vPortEnterCritical>
 80057ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80057ee:	2bff      	cmp	r3, #255	; 0xff
 80057f0:	d101      	bne.n	80057f6 <xQueueGenericSend+0xb8>
 80057f2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80057f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80057fa:	2bff      	cmp	r3, #255	; 0xff
 80057fc:	d101      	bne.n	8005802 <xQueueGenericSend+0xc4>
 80057fe:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8005802:	f001 fac3 	bl	8006d8c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005806:	a901      	add	r1, sp, #4
 8005808:	a802      	add	r0, sp, #8
 800580a:	f000 feb9 	bl	8006580 <xTaskCheckForTimeOut>
 800580e:	2800      	cmp	r0, #0
 8005810:	d14a      	bne.n	80058a8 <xQueueGenericSend+0x16a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005812:	f001 fa97 	bl	8006d44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005816:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005818:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800581a:	429a      	cmp	r2, r3
 800581c:	d131      	bne.n	8005882 <xQueueGenericSend+0x144>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fab5 	bl	8006d8c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005822:	9901      	ldr	r1, [sp, #4]
 8005824:	f104 0010 	add.w	r0, r4, #16
 8005828:	f000 fe48 	bl	80064bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800582c:	4620      	mov	r0, r4
 800582e:	f7ff fec5 	bl	80055bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005832:	f000 fd77 	bl	8006324 <xTaskResumeAll>
 8005836:	b360      	cbz	r0, 8005892 <xQueueGenericSend+0x154>
 8005838:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800583a:	f001 fa83 	bl	8006d44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800583e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005840:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005842:	429a      	cmp	r2, r3
 8005844:	d301      	bcc.n	800584a <xQueueGenericSend+0x10c>
 8005846:	2f02      	cmp	r7, #2
 8005848:	d1bf      	bne.n	80057ca <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800584a:	463a      	mov	r2, r7
 800584c:	4641      	mov	r1, r8
 800584e:	4620      	mov	r0, r4
 8005850:	f7ff fe6a 	bl	8005528 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005856:	b11b      	cbz	r3, 8005860 <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005858:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800585c:	f000 fe48 	bl	80064f0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8005860:	b148      	cbz	r0, 8005876 <xQueueGenericSend+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8005862:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005876:	f001 fa89 	bl	8006d8c <vPortExitCritical>
				return pdPASS;
 800587a:	2001      	movs	r0, #1
}
 800587c:	b005      	add	sp, #20
 800587e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8005882:	f001 fa83 	bl	8006d8c <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8005886:	4620      	mov	r0, r4
 8005888:	f7ff fe98 	bl	80055bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800588c:	f000 fd4a 	bl	8006324 <xTaskResumeAll>
 8005890:	e7d2      	b.n	8005838 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8005892:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800589a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	e7c7      	b.n	8005838 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff fe87 	bl	80055bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ae:	f000 fd39 	bl	8006324 <xTaskResumeAll>
 80058b2:	e78e      	b.n	80057d2 <xQueueGenericSend+0x94>

080058b4 <xQueueCreateMutex>:
	{
 80058b4:	b570      	push	{r4, r5, r6, lr}
 80058b6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058b8:	2050      	movs	r0, #80	; 0x50
 80058ba:	f001 f91d 	bl	8006af8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80058be:	4604      	mov	r4, r0
 80058c0:	b188      	cbz	r0, 80058e6 <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 80058c2:	2500      	movs	r5, #0
 80058c4:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80058c6:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80058c8:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80058cc:	f7ff feae 	bl	800562c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80058d0:	462b      	mov	r3, r5
 80058d2:	462a      	mov	r2, r5
 80058d4:	4629      	mov	r1, r5
 80058d6:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 80058d8:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80058dc:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80058de:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80058e0:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80058e2:	f7ff ff2c 	bl	800573e <xQueueGenericSend>
	}
 80058e6:	4620      	mov	r0, r4
 80058e8:	bd70      	pop	{r4, r5, r6, pc}

080058ea <xQueueGenericSendFromISR>:
{
 80058ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058ee:	4689      	mov	r9, r1
 80058f0:	4690      	mov	r8, r2
 80058f2:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80058f4:	4604      	mov	r4, r0
 80058f6:	b950      	cbnz	r0, 800590e <xQueueGenericSendFromISR+0x24>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	b672      	cpsid	i
 80058fe:	f383 8811 	msr	BASEPRI, r3
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	f3bf 8f4f 	dsb	sy
 800590a:	b662      	cpsie	i
 800590c:	e7fe      	b.n	800590c <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590e:	b961      	cbnz	r1, 800592a <xQueueGenericSendFromISR+0x40>
 8005910:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005912:	b153      	cbz	r3, 800592a <xQueueGenericSendFromISR+0x40>
 8005914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005918:	b672      	cpsid	i
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	b662      	cpsie	i
 8005928:	e7fe      	b.n	8005928 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800592a:	2f02      	cmp	r7, #2
 800592c:	d10d      	bne.n	800594a <xQueueGenericSendFromISR+0x60>
 800592e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d00a      	beq.n	800594a <xQueueGenericSendFromISR+0x60>
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	b672      	cpsid	i
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	b662      	cpsie	i
 8005948:	e7fe      	b.n	8005948 <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800594a:	f001 faf7 	bl	8006f3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800594e:	f3ef 8611 	mrs	r6, BASEPRI
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005966:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005968:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800596a:	429a      	cmp	r2, r3
 800596c:	d301      	bcc.n	8005972 <xQueueGenericSendFromISR+0x88>
 800596e:	2f02      	cmp	r7, #2
 8005970:	d122      	bne.n	80059b8 <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005972:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005976:	463a      	mov	r2, r7
 8005978:	4649      	mov	r1, r9
 800597a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800597c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800597e:	f7ff fdd3 	bl	8005528 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005982:	1c6b      	adds	r3, r5, #1
 8005984:	d113      	bne.n	80059ae <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005988:	b90b      	cbnz	r3, 800598e <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 800598a:	2001      	movs	r0, #1
 800598c:	e00b      	b.n	80059a6 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800598e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005992:	f000 fdad 	bl	80064f0 <xTaskRemoveFromEventList>
 8005996:	2800      	cmp	r0, #0
 8005998:	d0f7      	beq.n	800598a <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 800599a:	f1b8 0f00 	cmp.w	r8, #0
 800599e:	d0f4      	beq.n	800598a <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059a0:	2001      	movs	r0, #1
 80059a2:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80059a6:	f386 8811 	msr	BASEPRI, r6
}
 80059aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059ae:	3501      	adds	r5, #1
 80059b0:	b26d      	sxtb	r5, r5
 80059b2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80059b6:	e7e8      	b.n	800598a <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80059b8:	2000      	movs	r0, #0
 80059ba:	e7f4      	b.n	80059a6 <xQueueGenericSendFromISR+0xbc>

080059bc <xQueueGiveFromISR>:
{
 80059bc:	b570      	push	{r4, r5, r6, lr}
 80059be:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80059c0:	4604      	mov	r4, r0
 80059c2:	b950      	cbnz	r0, 80059da <xQueueGiveFromISR+0x1e>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	b672      	cpsid	i
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	b662      	cpsie	i
 80059d8:	e7fe      	b.n	80059d8 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80059da:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80059dc:	b153      	cbz	r3, 80059f4 <xQueueGiveFromISR+0x38>
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	b672      	cpsid	i
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	b662      	cpsie	i
 80059f2:	e7fe      	b.n	80059f2 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80059f4:	6803      	ldr	r3, [r0, #0]
 80059f6:	b963      	cbnz	r3, 8005a12 <xQueueGiveFromISR+0x56>
 80059f8:	6883      	ldr	r3, [r0, #8]
 80059fa:	b153      	cbz	r3, 8005a12 <xQueueGiveFromISR+0x56>
 80059fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a00:	b672      	cpsid	i
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	b662      	cpsie	i
 8005a10:	e7fe      	b.n	8005a10 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a12:	f001 fa93 	bl	8006f3c <vPortValidateInterruptPriority>
	__asm volatile
 8005a16:	f3ef 8611 	mrs	r6, BASEPRI
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	b672      	cpsid	i
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d91c      	bls.n	8005a70 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a3a:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8005a3c:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a3e:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a40:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8005a42:	d110      	bne.n	8005a66 <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a46:	b90b      	cbnz	r3, 8005a4c <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8005a48:	2001      	movs	r0, #1
 8005a4a:	e009      	b.n	8005a60 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a4c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a50:	f000 fd4e 	bl	80064f0 <xTaskRemoveFromEventList>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d0f7      	beq.n	8005a48 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8005a58:	2d00      	cmp	r5, #0
 8005a5a:	d0f5      	beq.n	8005a48 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8005a60:	f386 8811 	msr	BASEPRI, r6
}
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a66:	3301      	adds	r3, #1
 8005a68:	b25b      	sxtb	r3, r3
 8005a6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a6e:	e7eb      	b.n	8005a48 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8005a70:	2000      	movs	r0, #0
 8005a72:	e7f5      	b.n	8005a60 <xQueueGiveFromISR+0xa4>

08005a74 <xQueueReceive>:
{
 8005a74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005a78:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8005a7a:	4604      	mov	r4, r0
{
 8005a7c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005a7e:	b950      	cbnz	r0, 8005a96 <xQueueReceive+0x22>
	__asm volatile
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	b672      	cpsid	i
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	b662      	cpsie	i
 8005a94:	e7fe      	b.n	8005a94 <xQueueReceive+0x20>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a96:	b961      	cbnz	r1, 8005ab2 <xQueueReceive+0x3e>
 8005a98:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a9a:	b153      	cbz	r3, 8005ab2 <xQueueReceive+0x3e>
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	b672      	cpsid	i
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	b662      	cpsie	i
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueReceive+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab2:	f000 fda9 	bl	8006608 <xTaskGetSchedulerState>
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	b960      	cbnz	r0, 8005ad4 <xQueueReceive+0x60>
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	b15b      	cbz	r3, 8005ad6 <xQueueReceive+0x62>
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	b672      	cpsid	i
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	b662      	cpsie	i
 8005ad2:	e7fe      	b.n	8005ad2 <xQueueReceive+0x5e>
 8005ad4:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	e03d      	b.n	8005b58 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005adc:	9d01      	ldr	r5, [sp, #4]
 8005ade:	b91d      	cbnz	r5, 8005ae8 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8005ae0:	f001 f954 	bl	8006d8c <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e056      	b.n	8005b96 <xQueueReceive+0x122>
				else if( xEntryTimeSet == pdFALSE )
 8005ae8:	b916      	cbnz	r6, 8005af0 <xQueueReceive+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aea:	a802      	add	r0, sp, #8
 8005aec:	f000 fd3e 	bl	800656c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005af0:	f001 f94c 	bl	8006d8c <vPortExitCritical>
		vTaskSuspendAll();
 8005af4:	f000 fb8a 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005af8:	f001 f924 	bl	8006d44 <vPortEnterCritical>
 8005afc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005b00:	2bff      	cmp	r3, #255	; 0xff
 8005b02:	d101      	bne.n	8005b08 <xQueueReceive+0x94>
 8005b04:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8005b08:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005b0c:	2bff      	cmp	r3, #255	; 0xff
 8005b0e:	d101      	bne.n	8005b14 <xQueueReceive+0xa0>
 8005b10:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8005b14:	f001 f93a 	bl	8006d8c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b18:	a901      	add	r1, sp, #4
 8005b1a:	a802      	add	r0, sp, #8
 8005b1c:	f000 fd30 	bl	8006580 <xTaskCheckForTimeOut>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d141      	bne.n	8005ba8 <xQueueReceive+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b24:	4620      	mov	r0, r4
 8005b26:	f7ff fcf4 	bl	8005512 <prvIsQueueEmpty>
 8005b2a:	b3b8      	cbz	r0, 8005b9c <xQueueReceive+0x128>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b2c:	9901      	ldr	r1, [sp, #4]
 8005b2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005b32:	f000 fcc3 	bl	80064bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b36:	4620      	mov	r0, r4
 8005b38:	f7ff fd40 	bl	80055bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b3c:	f000 fbf2 	bl	8006324 <xTaskResumeAll>
 8005b40:	b948      	cbnz	r0, 8005b56 <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8005b42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	f3bf 8f6f 	isb	sy
 8005b56:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005b58:	f001 f8f4 	bl	8006d44 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	d0bc      	beq.n	8005adc <xQueueReceive+0x68>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b62:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b64:	4639      	mov	r1, r7
 8005b66:	4620      	mov	r0, r4
 8005b68:	f7ff fd13 	bl	8005592 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b6c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	b173      	cbz	r3, 8005b90 <xQueueReceive+0x11c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b72:	f104 0010 	add.w	r0, r4, #16
 8005b76:	f000 fcbb 	bl	80064f0 <xTaskRemoveFromEventList>
 8005b7a:	b148      	cbz	r0, 8005b90 <xQueueReceive+0x11c>
						queueYIELD_IF_USING_PREEMPTION();
 8005b7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b84:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005b90:	f001 f8fc 	bl	8006d8c <vPortExitCritical>
				return pdPASS;
 8005b94:	2001      	movs	r0, #1
}
 8005b96:	b004      	add	sp, #16
 8005b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7ff fd0d 	bl	80055bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ba2:	f000 fbbf 	bl	8006324 <xTaskResumeAll>
 8005ba6:	e7d6      	b.n	8005b56 <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8005ba8:	4620      	mov	r0, r4
 8005baa:	f7ff fd07 	bl	80055bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bae:	f000 fbb9 	bl	8006324 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bb2:	4620      	mov	r0, r4
 8005bb4:	f7ff fcad 	bl	8005512 <prvIsQueueEmpty>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0cc      	beq.n	8005b56 <xQueueReceive+0xe2>
 8005bbc:	e792      	b.n	8005ae4 <xQueueReceive+0x70>

08005bbe <xQueueSemaphoreTake>:
{
 8005bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bc0:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8005bc2:	4604      	mov	r4, r0
{
 8005bc4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005bc6:	b950      	cbnz	r0, 8005bde <xQueueSemaphoreTake+0x20>
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	b672      	cpsid	i
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	b662      	cpsie	i
 8005bdc:	e7fe      	b.n	8005bdc <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8005bde:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8005be0:	b155      	cbz	r5, 8005bf8 <xQueueSemaphoreTake+0x3a>
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	b672      	cpsid	i
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	b662      	cpsie	i
 8005bf6:	e7fe      	b.n	8005bf6 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bf8:	f000 fd06 	bl	8006608 <xTaskGetSchedulerState>
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	b960      	cbnz	r0, 8005c1a <xQueueSemaphoreTake+0x5c>
 8005c00:	9b01      	ldr	r3, [sp, #4]
 8005c02:	b16b      	cbz	r3, 8005c20 <xQueueSemaphoreTake+0x62>
 8005c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c08:	b672      	cpsid	i
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	b662      	cpsie	i
 8005c18:	e7fe      	b.n	8005c18 <xQueueSemaphoreTake+0x5a>
 8005c1a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005c1c:	2700      	movs	r7, #0
 8005c1e:	e055      	b.n	8005ccc <xQueueSemaphoreTake+0x10e>
 8005c20:	4605      	mov	r5, r0
 8005c22:	e7fb      	b.n	8005c1c <xQueueSemaphoreTake+0x5e>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	b973      	cbnz	r3, 8005c46 <xQueueSemaphoreTake+0x88>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005c28:	b155      	cbz	r5, 8005c40 <xQueueSemaphoreTake+0x82>
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	b672      	cpsid	i
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	b662      	cpsie	i
 8005c3e:	e7fe      	b.n	8005c3e <xQueueSemaphoreTake+0x80>
					taskEXIT_CRITICAL();
 8005c40:	f001 f8a4 	bl	8006d8c <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005c44:	e062      	b.n	8005d0c <xQueueSemaphoreTake+0x14e>
				else if( xEntryTimeSet == pdFALSE )
 8005c46:	b916      	cbnz	r6, 8005c4e <xQueueSemaphoreTake+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c48:	a802      	add	r0, sp, #8
 8005c4a:	f000 fc8f 	bl	800656c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005c4e:	f001 f89d 	bl	8006d8c <vPortExitCritical>
		vTaskSuspendAll();
 8005c52:	f000 fadb 	bl	800620c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c56:	f001 f875 	bl	8006d44 <vPortEnterCritical>
 8005c5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c5e:	2bff      	cmp	r3, #255	; 0xff
 8005c60:	d101      	bne.n	8005c66 <xQueueSemaphoreTake+0xa8>
 8005c62:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8005c66:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c6a:	2bff      	cmp	r3, #255	; 0xff
 8005c6c:	d101      	bne.n	8005c72 <xQueueSemaphoreTake+0xb4>
 8005c6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c72:	f001 f88b 	bl	8006d8c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c76:	a901      	add	r1, sp, #4
 8005c78:	a802      	add	r0, sp, #8
 8005c7a:	f000 fc81 	bl	8006580 <xTaskCheckForTimeOut>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	d14d      	bne.n	8005d1e <xQueueSemaphoreTake+0x160>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff fc45 	bl	8005512 <prvIsQueueEmpty>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d042      	beq.n	8005d12 <xQueueSemaphoreTake+0x154>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	b93b      	cbnz	r3, 8005ca0 <xQueueSemaphoreTake+0xe2>
						taskENTER_CRITICAL();
 8005c90:	f001 f858 	bl	8006d44 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c94:	68a0      	ldr	r0, [r4, #8]
 8005c96:	f000 fcc7 	bl	8006628 <xTaskPriorityInherit>
 8005c9a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005c9c:	f001 f876 	bl	8006d8c <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca0:	9901      	ldr	r1, [sp, #4]
 8005ca2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ca6:	f000 fc09 	bl	80064bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff fc86 	bl	80055bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb0:	f000 fb38 	bl	8006324 <xTaskResumeAll>
 8005cb4:	b948      	cbnz	r0, 8005cca <xQueueSemaphoreTake+0x10c>
					portYIELD_WITHIN_API();
 8005cb6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005ccc:	f001 f83a 	bl	8006d44 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005cd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0a6      	beq.n	8005c24 <xQueueSemaphoreTake+0x66>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <xQueueSemaphoreTake+0x126>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005cde:	f000 fda1 	bl	8006824 <pvTaskIncrementMutexHeldCount>
 8005ce2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	b173      	cbz	r3, 8005d06 <xQueueSemaphoreTake+0x148>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	f104 0010 	add.w	r0, r4, #16
 8005cec:	f000 fc00 	bl	80064f0 <xTaskRemoveFromEventList>
 8005cf0:	b148      	cbz	r0, 8005d06 <xQueueSemaphoreTake+0x148>
						queueYIELD_IF_USING_PREEMPTION();
 8005cf2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8005d06:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8005d08:	f001 f840 	bl	8006d8c <vPortExitCritical>
}
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	b005      	add	sp, #20
 8005d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 8005d12:	4620      	mov	r0, r4
 8005d14:	f7ff fc52 	bl	80055bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d18:	f000 fb04 	bl	8006324 <xTaskResumeAll>
 8005d1c:	e7d5      	b.n	8005cca <xQueueSemaphoreTake+0x10c>
			prvUnlockQueue( pxQueue );
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f7ff fc4c 	bl	80055bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d24:	f000 fafe 	bl	8006324 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f7ff fbf2 	bl	8005512 <prvIsQueueEmpty>
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d0cb      	beq.n	8005cca <xQueueSemaphoreTake+0x10c>
					if( xInheritanceOccurred != pdFALSE )
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	d0ea      	beq.n	8005d0c <xQueueSemaphoreTake+0x14e>
						taskENTER_CRITICAL();
 8005d36:	f001 f805 	bl	8006d44 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005d3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d3c:	b119      	cbz	r1, 8005d46 <xQueueSemaphoreTake+0x188>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005d3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005d40:	6819      	ldr	r1, [r3, #0]
 8005d42:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d46:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8005d48:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d4a:	f000 fd0f 	bl	800676c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005d4e:	f001 f81d 	bl	8006d8c <vPortExitCritical>
 8005d52:	e7db      	b.n	8005d0c <xQueueSemaphoreTake+0x14e>

08005d54 <xQueueReceiveFromISR>:
{
 8005d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d58:	4689      	mov	r9, r1
 8005d5a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	b950      	cbnz	r0, 8005d76 <xQueueReceiveFromISR+0x22>
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	b672      	cpsid	i
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	b662      	cpsie	i
 8005d74:	e7fe      	b.n	8005d74 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d76:	b961      	cbnz	r1, 8005d92 <xQueueReceiveFromISR+0x3e>
 8005d78:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005d7a:	b153      	cbz	r3, 8005d92 <xQueueReceiveFromISR+0x3e>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	b672      	cpsid	i
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	b662      	cpsie	i
 8005d90:	e7fe      	b.n	8005d90 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d92:	f001 f8d3 	bl	8006f3c <vPortValidateInterruptPriority>
	__asm volatile
 8005d96:	f3ef 8711 	mrs	r7, BASEPRI
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	b672      	cpsid	i
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dae:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005db0:	b31c      	cbz	r4, 8005dfa <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005db2:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005db6:	4649      	mov	r1, r9
 8005db8:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dba:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8005dbc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dbe:	f7ff fbe8 	bl	8005592 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc2:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005dc4:	1c73      	adds	r3, r6, #1
 8005dc6:	d113      	bne.n	8005df0 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dc8:	692b      	ldr	r3, [r5, #16]
 8005dca:	b90b      	cbnz	r3, 8005dd0 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8005dcc:	2001      	movs	r0, #1
 8005dce:	e00b      	b.n	8005de8 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dd0:	f105 0010 	add.w	r0, r5, #16
 8005dd4:	f000 fb8c 	bl	80064f0 <xTaskRemoveFromEventList>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d0f7      	beq.n	8005dcc <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8005ddc:	f1b8 0f00 	cmp.w	r8, #0
 8005de0:	d0f4      	beq.n	8005dcc <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005de2:	2001      	movs	r0, #1
 8005de4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8005de8:	f387 8811 	msr	BASEPRI, r7
}
 8005dec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005df0:	3601      	adds	r6, #1
 8005df2:	b276      	sxtb	r6, r6
 8005df4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8005df8:	e7e8      	b.n	8005dcc <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	e7f4      	b.n	8005de8 <xQueueReceiveFromISR+0x94>

08005dfe <uxQueueMessagesWaiting>:
{
 8005dfe:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8005e00:	4604      	mov	r4, r0
 8005e02:	b950      	cbnz	r0, 8005e1a <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	b672      	cpsid	i
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	b662      	cpsie	i
 8005e18:	e7fe      	b.n	8005e18 <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 8005e1a:	f000 ff93 	bl	8006d44 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e1e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005e20:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8005e22:	f000 ffb3 	bl	8006d8c <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e26:	9801      	ldr	r0, [sp, #4]
 8005e28:	b002      	add	sp, #8
 8005e2a:	bd10      	pop	{r4, pc}

08005e2c <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8005e2c:	b950      	cbnz	r0, 8005e44 <uxQueueMessagesWaitingFromISR+0x18>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	b672      	cpsid	i
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	b662      	cpsie	i
 8005e42:	e7fe      	b.n	8005e42 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e44:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e46:	4770      	bx	lr

08005e48 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e48:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <vQueueUnregisterQueue+0x24>)
	{
 8005e4c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e4e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005e52:	684c      	ldr	r4, [r1, #4]
 8005e54:	4284      	cmp	r4, r0
 8005e56:	d104      	bne.n	8005e62 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e5e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e60:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e62:	3301      	adds	r3, #1
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d1f2      	bne.n	8005e4e <vQueueUnregisterQueue+0x6>
 8005e68:	e7fa      	b.n	8005e60 <vQueueUnregisterQueue+0x18>
 8005e6a:	bf00      	nop
 8005e6c:	20009b88 	.word	0x20009b88

08005e70 <vQueueDelete>:
{
 8005e70:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8005e72:	4604      	mov	r4, r0
 8005e74:	b950      	cbnz	r0, 8005e8c <vQueueDelete+0x1c>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	e7fe      	b.n	8005e8a <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8005e8c:	f7ff ffdc 	bl	8005e48 <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8005e90:	4620      	mov	r0, r4
}
 8005e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8005e96:	f000 beb5 	b.w	8006c04 <vPortFree>
	...

08005e9c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <prvResetNextTaskUnblockTime+0x1c>)
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6812      	ldr	r2, [r2, #0]
 8005ea2:	b91a      	cbnz	r2, 8005eac <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ea8:	605a      	str	r2, [r3, #4]
	}
}
 8005eaa:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb0:	68d2      	ldr	r2, [r2, #12]
 8005eb2:	6852      	ldr	r2, [r2, #4]
 8005eb4:	e7f8      	b.n	8005ea8 <prvResetNextTaskUnblockTime+0xc>
 8005eb6:	bf00      	nop
 8005eb8:	20009bc8 	.word	0x20009bc8

08005ebc <prvAddCurrentTaskToDelayedList.constprop.0>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8005ebc:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ebe:	4c12      	ldr	r4, [pc, #72]	; (8005f08 <prvAddCurrentTaskToDelayedList.constprop.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8005ec0:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8005ec2:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec4:	68e0      	ldr	r0, [r4, #12]
 8005ec6:	3004      	adds	r0, #4
 8005ec8:	f7ff fb13 	bl	80054f2 <uxListRemove>
 8005ecc:	b938      	cbnz	r0, 8005ede <prvAddCurrentTaskToDelayedList.constprop.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ece:	68e2      	ldr	r2, [r4, #12]
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	408a      	lsls	r2, r1
 8005ed8:	ea23 0302 	bic.w	r3, r3, r2
 8005edc:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8005ede:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ee0:	68e3      	ldr	r3, [r4, #12]
 8005ee2:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8005ee4:	d306      	bcc.n	8005ef4 <prvAddCurrentTaskToDelayedList.constprop.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ee6:	6960      	ldr	r0, [r4, #20]
 8005ee8:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eee:	3104      	adds	r1, #4
 8005ef0:	f7ff bae8 	b.w	80054c4 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	68e1      	ldr	r1, [r4, #12]
 8005ef8:	3104      	adds	r1, #4
 8005efa:	f7ff fae3 	bl	80054c4 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8005efe:	6863      	ldr	r3, [r4, #4]
 8005f00:	429d      	cmp	r5, r3
 8005f02:	d200      	bcs.n	8005f06 <prvAddCurrentTaskToDelayedList.constprop.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 8005f04:	6065      	str	r5, [r4, #4]
}
 8005f06:	bd70      	pop	{r4, r5, r6, pc}
 8005f08:	20009bc8 	.word	0x20009bc8

08005f0c <prvIdleTask>:
{
 8005f0c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0e:	4c13      	ldr	r4, [pc, #76]	; (8005f5c <prvIdleTask+0x50>)
				taskYIELD();
 8005f10:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
 8005f14:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f1a:	b94b      	cbnz	r3, 8005f30 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005f1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d9fa      	bls.n	8005f18 <prvIdleTask+0xc>
				taskYIELD();
 8005f22:	f8c6 7d04 	str.w	r7, [r6, #3332]	; 0xd04
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	e7f3      	b.n	8005f18 <prvIdleTask+0xc>
			taskENTER_CRITICAL();
 8005f30:	f000 ff08 	bl	8006d44 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f36:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f38:	1d28      	adds	r0, r5, #4
 8005f3a:	f7ff fada 	bl	80054f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f40:	3b01      	subs	r3, #1
 8005f42:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8005f44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f46:	3b01      	subs	r3, #1
 8005f48:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8005f4a:	f000 ff1f 	bl	8006d8c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8005f4e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005f50:	f000 fe58 	bl	8006c04 <vPortFree>
			vPortFree( pxTCB );
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fe55 	bl	8006c04 <vPortFree>
	}
 8005f5a:	e7dd      	b.n	8005f18 <prvIdleTask+0xc>
 8005f5c:	20009bc8 	.word	0x20009bc8

08005f60 <xTaskCreate>:
	{
 8005f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f64:	0096      	lsls	r6, r2, #2
	{
 8005f66:	4607      	mov	r7, r0
 8005f68:	460d      	mov	r5, r1
 8005f6a:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	f000 fdc3 	bl	8006af8 <pvPortMalloc>
			if( pxStack != NULL )
 8005f72:	4681      	mov	r9, r0
 8005f74:	b1a0      	cbz	r0, 8005fa0 <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f76:	205c      	movs	r0, #92	; 0x5c
 8005f78:	f000 fdbe 	bl	8006af8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	b160      	cbz	r0, 8005f9a <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8005f80:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f84:	4632      	mov	r2, r6
 8005f86:	21a5      	movs	r1, #165	; 0xa5
 8005f88:	4648      	mov	r0, r9
 8005f8a:	f008 fb65 	bl	800e658 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f8e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
	if( pcName != NULL )
 8005f92:	b945      	cbnz	r5, 8005fa6 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f94:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8005f98:	e013      	b.n	8005fc2 <xTaskCreate+0x62>
					vPortFree( pxStack );
 8005f9a:	4648      	mov	r0, r9
 8005f9c:	f000 fe32 	bl	8006c04 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fa0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005fa4:	e088      	b.n	80060b8 <xTaskCreate+0x158>
 8005fa6:	1e6b      	subs	r3, r5, #1
 8005fa8:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8005fac:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fae:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005fb2:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8005fb6:	b108      	cbz	r0, 8005fbc <xTaskCreate+0x5c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fb8:	429d      	cmp	r5, r3
 8005fba:	d1f8      	bne.n	8005fae <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fc2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8005fc4:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fc8:	f104 0904 	add.w	r9, r4, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fcc:	3e04      	subs	r6, #4
 8005fce:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005fd0:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fd4:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fd6:	445e      	add	r6, fp
 8005fd8:	bf28      	it	cs
 8005fda:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8005fdc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005fde:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fe0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005fe4:	f7ff fa5f 	bl	80054a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fe8:	f104 0018 	add.w	r0, r4, #24
 8005fec:	f7ff fa5b 	bl	80054a6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8005ff0:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ffc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ffe:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006000:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006002:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006006:	f000 fe77 	bl	8006cf8 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 800600a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800600c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800600e:	b103      	cbz	r3, 8006012 <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006010:	601c      	str	r4, [r3, #0]
		uxCurrentNumberOfTasks++;
 8006012:	4d30      	ldr	r5, [pc, #192]	; (80060d4 <xTaskCreate+0x174>)
	taskENTER_CRITICAL();
 8006014:	f000 fe96 	bl	8006d44 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006018:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800601a:	f105 0734 	add.w	r7, r5, #52	; 0x34
 800601e:	3301      	adds	r3, #1
 8006020:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8006022:	68ee      	ldr	r6, [r5, #12]
 8006024:	2e00      	cmp	r6, #0
 8006026:	d14a      	bne.n	80060be <xTaskCreate+0x15e>
			pxCurrentTCB = pxNewTCB;
 8006028:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800602a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d11c      	bne.n	800606a <xTaskCreate+0x10a>
 8006030:	46b8      	mov	r8, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006032:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006034:	4640      	mov	r0, r8
 8006036:	f7ff fa2b 	bl	8005490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800603a:	f108 0814 	add.w	r8, r8, #20
 800603e:	2e07      	cmp	r6, #7
 8006040:	d1f7      	bne.n	8006032 <xTaskCreate+0xd2>
	vListInitialise( &xDelayedTaskList1 );
 8006042:	4e25      	ldr	r6, [pc, #148]	; (80060d8 <xTaskCreate+0x178>)
	vListInitialise( &xDelayedTaskList2 );
 8006044:	f106 0814 	add.w	r8, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 8006048:	4630      	mov	r0, r6
 800604a:	f7ff fa21 	bl	8005490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800604e:	4640      	mov	r0, r8
 8006050:	f7ff fa1e 	bl	8005490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006054:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8006058:	f7ff fa1a 	bl	8005490 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800605c:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8006060:	f7ff fa16 	bl	8005490 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006064:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006066:	f8c5 8014 	str.w	r8, [r5, #20]
		uxTaskNumber++;
 800606a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 800606e:	2601      	movs	r6, #1
 8006070:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006072:	2014      	movs	r0, #20
		uxTaskNumber++;
 8006074:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8006076:	6929      	ldr	r1, [r5, #16]
 8006078:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 800607c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006080:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8006082:	fa06 f302 	lsl.w	r3, r6, r2
 8006086:	430b      	orrs	r3, r1
 8006088:	4649      	mov	r1, r9
 800608a:	612b      	str	r3, [r5, #16]
 800608c:	f7ff fa0e 	bl	80054ac <vListInsertEnd>
	taskEXIT_CRITICAL();
 8006090:	f000 fe7c 	bl	8006d8c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8006094:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 8006098:	b173      	cbz	r3, 80060b8 <xTaskCreate+0x158>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800609a:	68eb      	ldr	r3, [r5, #12]
 800609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d209      	bcs.n	80060b8 <xTaskCreate+0x158>
			taskYIELD_IF_USING_PREEMPTION();
 80060a4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80060a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80060b0:	f3bf 8f4f 	dsb	sy
 80060b4:	f3bf 8f6f 	isb	sy
	}
 80060b8:	4630      	mov	r0, r6
 80060ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 80060be:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d1      	bne.n	800606a <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060c6:	68eb      	ldr	r3, [r5, #12]
 80060c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3cc      	bcc.n	800606a <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 80060d0:	60ec      	str	r4, [r5, #12]
 80060d2:	e7ca      	b.n	800606a <xTaskCreate+0x10a>
 80060d4:	20009bc8 	.word	0x20009bc8
 80060d8:	20009c88 	.word	0x20009c88

080060dc <vTaskDelete>:
	{
 80060dc:	b570      	push	{r4, r5, r6, lr}
 80060de:	4605      	mov	r5, r0
 80060e0:	4c2b      	ldr	r4, [pc, #172]	; (8006190 <vTaskDelete+0xb4>)
		taskENTER_CRITICAL();
 80060e2:	f000 fe2f 	bl	8006d44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80060e6:	b905      	cbnz	r5, 80060ea <vTaskDelete+0xe>
 80060e8:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ea:	1d2e      	adds	r6, r5, #4
 80060ec:	4630      	mov	r0, r6
 80060ee:	f7ff fa00 	bl	80054f2 <uxListRemove>
 80060f2:	b958      	cbnz	r0, 800610c <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060f4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80060f6:	2014      	movs	r0, #20
 80060f8:	fb00 4001 	mla	r0, r0, r1, r4
 80060fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80060fe:	b92b      	cbnz	r3, 800610c <vTaskDelete+0x30>
 8006100:	2201      	movs	r2, #1
 8006102:	6923      	ldr	r3, [r4, #16]
 8006104:	408a      	lsls	r2, r1
 8006106:	ea23 0302 	bic.w	r3, r3, r2
 800610a:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800610c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800610e:	b11b      	cbz	r3, 8006118 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006110:	f105 0018 	add.w	r0, r5, #24
 8006114:	f7ff f9ed 	bl	80054f2 <uxListRemove>
			uxTaskNumber++;
 8006118:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800611c:	3301      	adds	r3, #1
 800611e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8006122:	68e3      	ldr	r3, [r4, #12]
 8006124:	42ab      	cmp	r3, r5
 8006126:	d11c      	bne.n	8006162 <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006128:	4631      	mov	r1, r6
 800612a:	481a      	ldr	r0, [pc, #104]	; (8006194 <vTaskDelete+0xb8>)
 800612c:	f7ff f9be 	bl	80054ac <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8006130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006132:	3301      	adds	r3, #1
 8006134:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8006136:	f000 fe29 	bl	8006d8c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800613a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800613e:	b333      	cbz	r3, 800618e <vTaskDelete+0xb2>
			if( pxTCB == pxCurrentTCB )
 8006140:	68e3      	ldr	r3, [r4, #12]
 8006142:	42ab      	cmp	r3, r5
 8006144:	d123      	bne.n	800618e <vTaskDelete+0xb2>
				configASSERT( uxSchedulerSuspended == 0 );
 8006146:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800614a:	b1b3      	cbz	r3, 800617a <vTaskDelete+0x9e>
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	b672      	cpsid	i
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	b662      	cpsie	i
 8006160:	e7fe      	b.n	8006160 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 8006162:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8006164:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8006166:	3b01      	subs	r3, #1
 8006168:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 800616a:	f000 fd4b 	bl	8006c04 <vPortFree>
			vPortFree( pxTCB );
 800616e:	4628      	mov	r0, r5
 8006170:	f000 fd48 	bl	8006c04 <vPortFree>
				prvResetNextTaskUnblockTime();
 8006174:	f7ff fe92 	bl	8005e9c <prvResetNextTaskUnblockTime>
 8006178:	e7dd      	b.n	8006136 <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 800617a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006182:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	f3bf 8f6f 	isb	sy
	}
 800618e:	bd70      	pop	{r4, r5, r6, pc}
 8006190:	20009bc8 	.word	0x20009bc8
 8006194:	20009be0 	.word	0x20009be0

08006198 <vTaskStartScheduler>:
{
 8006198:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800619a:	4c19      	ldr	r4, [pc, #100]	; (8006200 <vTaskStartScheduler+0x68>)
 800619c:	2500      	movs	r5, #0
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	4918      	ldr	r1, [pc, #96]	; (8006204 <vTaskStartScheduler+0x6c>)
 80061a2:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80061a6:	4818      	ldr	r0, [pc, #96]	; (8006208 <vTaskStartScheduler+0x70>)
 80061a8:	9500      	str	r5, [sp, #0]
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	462b      	mov	r3, r5
 80061ae:	f7ff fed7 	bl	8005f60 <xTaskCreate>
	if( xReturn == pdPASS )
 80061b2:	2801      	cmp	r0, #1
 80061b4:	d114      	bne.n	80061e0 <vTaskStartScheduler+0x48>
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	b672      	cpsid	i
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 80061ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ce:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 80061d0:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061d4:	60a5      	str	r5, [r4, #8]
}
 80061d6:	b003      	add	sp, #12
 80061d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 80061dc:	f000 be4c 	b.w	8006e78 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061e0:	3001      	adds	r0, #1
 80061e2:	d10a      	bne.n	80061fa <vTaskStartScheduler+0x62>
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	b672      	cpsid	i
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	b662      	cpsie	i
 80061f8:	e7fe      	b.n	80061f8 <vTaskStartScheduler+0x60>
}
 80061fa:	b003      	add	sp, #12
 80061fc:	bd30      	pop	{r4, r5, pc}
 80061fe:	bf00      	nop
 8006200:	20009bc8 	.word	0x20009bc8
 8006204:	08013858 	.word	0x08013858
 8006208:	08005f0d 	.word	0x08005f0d

0800620c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800620c:	4a03      	ldr	r2, [pc, #12]	; (800621c <vTaskSuspendAll+0x10>)
 800620e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8006212:	3301      	adds	r3, #1
 8006214:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20009bc8 	.word	0x20009bc8

08006220 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8006220:	4b01      	ldr	r3, [pc, #4]	; (8006228 <xTaskGetTickCount+0x8>)
 8006222:	6898      	ldr	r0, [r3, #8]
}
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	20009bc8 	.word	0x20009bc8

0800622c <xTaskGetTickCountFromISR>:
{
 800622c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800622e:	f000 fe85 	bl	8006f3c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8006232:	4b01      	ldr	r3, [pc, #4]	; (8006238 <xTaskGetTickCountFromISR+0xc>)
 8006234:	6898      	ldr	r0, [r3, #8]
}
 8006236:	bd08      	pop	{r3, pc}
 8006238:	20009bc8 	.word	0x20009bc8

0800623c <xTaskIncrementTick>:
{
 800623c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006240:	4c36      	ldr	r4, [pc, #216]	; (800631c <xTaskIncrementTick+0xe0>)
 8006242:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006246:	2b00      	cmp	r3, #0
 8006248:	d161      	bne.n	800630e <xTaskIncrementTick+0xd2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800624a:	68a7      	ldr	r7, [r4, #8]
 800624c:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 800624e:	60a7      	str	r7, [r4, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006250:	b9c7      	cbnz	r7, 8006284 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	b153      	cbz	r3, 800626e <xTaskIncrementTick+0x32>
 8006258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800625c:	b672      	cpsid	i
 800625e:	f383 8811 	msr	BASEPRI, r3
 8006262:	f3bf 8f6f 	isb	sy
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	b662      	cpsie	i
 800626c:	e7fe      	b.n	800626c <xTaskIncrementTick+0x30>
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	6962      	ldr	r2, [r4, #20]
 8006272:	6022      	str	r2, [r4, #0]
 8006274:	6163      	str	r3, [r4, #20]
 8006276:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 800627a:	3301      	adds	r3, #1
 800627c:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8006280:	f7ff fe0c 	bl	8005e9c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006284:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8006286:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006288:	42bb      	cmp	r3, r7
 800628a:	d910      	bls.n	80062ae <xTaskIncrementTick+0x72>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800628c:	68e3      	ldr	r3, [r4, #12]
 800628e:	2214      	movs	r2, #20
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	fb02 4303 	mla	r3, r2, r3, r4
 8006296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8006298:	2b02      	cmp	r3, #2
 800629a:	bf28      	it	cs
 800629c:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 800629e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 80062a2:	2b00      	cmp	r3, #0
}
 80062a4:	bf0c      	ite	eq
 80062a6:	4628      	moveq	r0, r5
 80062a8:	2001      	movne	r0, #1
 80062aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 80062ae:	f04f 0a01 	mov.w	sl, #1
 80062b2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006320 <xTaskIncrementTick+0xe4>
 80062b6:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	b91b      	cbnz	r3, 80062c8 <xTaskIncrementTick+0x8c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
						xNextTaskUnblockTime = xItemValue;
 80062c4:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062c6:	e7e1      	b.n	800628c <xTaskIncrementTick+0x50>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062ce:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80062d0:	429f      	cmp	r7, r3
 80062d2:	d3f7      	bcc.n	80062c4 <xTaskIncrementTick+0x88>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062d4:	f106 0b04 	add.w	fp, r6, #4
 80062d8:	4658      	mov	r0, fp
 80062da:	f7ff f90a 	bl	80054f2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80062e0:	b11b      	cbz	r3, 80062ea <xTaskIncrementTick+0xae>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062e2:	f106 0018 	add.w	r0, r6, #24
 80062e6:	f7ff f904 	bl	80054f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062ea:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80062ec:	4659      	mov	r1, fp
 80062ee:	6922      	ldr	r2, [r4, #16]
 80062f0:	fa0a f300 	lsl.w	r3, sl, r0
 80062f4:	fb09 8000 	mla	r0, r9, r0, r8
 80062f8:	4313      	orrs	r3, r2
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f7ff f8d6 	bl	80054ac <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8006306:	429a      	cmp	r2, r3
 8006308:	bf28      	it	cs
 800630a:	2501      	movcs	r5, #1
 800630c:	e7d5      	b.n	80062ba <xTaskIncrementTick+0x7e>
		++uxPendedTicks;
 800630e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8006312:	2500      	movs	r5, #0
		++uxPendedTicks;
 8006314:	3301      	adds	r3, #1
 8006316:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800631a:	e7c0      	b.n	800629e <xTaskIncrementTick+0x62>
 800631c:	20009bc8 	.word	0x20009bc8
 8006320:	20009bfc 	.word	0x20009bfc

08006324 <xTaskResumeAll>:
{
 8006324:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8006328:	4c35      	ldr	r4, [pc, #212]	; (8006400 <xTaskResumeAll+0xdc>)
 800632a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800632e:	b953      	cbnz	r3, 8006346 <xTaskResumeAll+0x22>
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	b672      	cpsid	i
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	b662      	cpsie	i
 8006344:	e7fe      	b.n	8006344 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 8006346:	f000 fcfd 	bl	8006d44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800634a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800634e:	3b01      	subs	r3, #1
 8006350:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006354:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8006358:	b135      	cbz	r5, 8006368 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
 800635a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800635c:	f000 fd16 	bl	8006d8c <vPortExitCritical>
}
 8006360:	4620      	mov	r0, r4
 8006362:	b002      	add	sp, #8
 8006364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0f5      	beq.n	800635a <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 800636e:	2601      	movs	r6, #1
 8006370:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8006374:	f04f 0814 	mov.w	r8, #20
 8006378:	e01d      	b.n	80063b6 <xTaskResumeAll+0x92>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800637e:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006380:	f105 0018 	add.w	r0, r5, #24
 8006384:	f7ff f8b5 	bl	80054f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006388:	1d29      	adds	r1, r5, #4
 800638a:	4608      	mov	r0, r1
 800638c:	9101      	str	r1, [sp, #4]
 800638e:	f7ff f8b0 	bl	80054f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006392:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8006394:	6922      	ldr	r2, [r4, #16]
 8006396:	fa06 f300 	lsl.w	r3, r6, r0
 800639a:	9901      	ldr	r1, [sp, #4]
 800639c:	fb08 7000 	mla	r0, r8, r0, r7
 80063a0:	4313      	orrs	r3, r2
 80063a2:	6123      	str	r3, [r4, #16]
 80063a4:	f7ff f882 	bl	80054ac <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063a8:	68e3      	ldr	r3, [r4, #12]
 80063aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d301      	bcc.n	80063b6 <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 80063b2:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063b6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1dd      	bne.n	800637a <xTaskResumeAll+0x56>
				if( pxTCB != NULL )
 80063be:	b10d      	cbz	r5, 80063c4 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 80063c0:	f7ff fd6c 	bl	8005e9c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063c4:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063c8:	b14d      	cbz	r5, 80063de <xTaskResumeAll+0xba>
								xYieldPending = pdTRUE;
 80063ca:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 80063cc:	f7ff ff36 	bl	800623c <xTaskIncrementTick>
 80063d0:	b108      	cbz	r0, 80063d6 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 80063d2:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063d6:	3d01      	subs	r5, #1
 80063d8:	d1f8      	bne.n	80063cc <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 80063da:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 80063de:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0b9      	beq.n	800635a <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 80063e6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80063ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ee:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80063fa:	2401      	movs	r4, #1
 80063fc:	e7ae      	b.n	800635c <xTaskResumeAll+0x38>
 80063fe:	bf00      	nop
 8006400:	20009bc8 	.word	0x20009bc8

08006404 <vTaskDelay>:
	{
 8006404:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006406:	b950      	cbnz	r0, 800641e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8006408:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800640c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006410:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	f3bf 8f6f 	isb	sy
	}
 800641c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <vTaskDelay+0x4c>)
 8006420:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006424:	b153      	cbz	r3, 800643c <vTaskDelay+0x38>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	e7fe      	b.n	800643a <vTaskDelay+0x36>
			vTaskSuspendAll();
 800643c:	f7ff fee6 	bl	800620c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006440:	f7ff fd3c 	bl	8005ebc <prvAddCurrentTaskToDelayedList.constprop.0>
			xAlreadyYielded = xTaskResumeAll();
 8006444:	f7ff ff6e 	bl	8006324 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006448:	2800      	cmp	r0, #0
 800644a:	d0dd      	beq.n	8006408 <vTaskDelay+0x4>
 800644c:	e7e6      	b.n	800641c <vTaskDelay+0x18>
 800644e:	bf00      	nop
 8006450:	20009bc8 	.word	0x20009bc8

08006454 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006454:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <vTaskSwitchContext+0x64>)
 8006456:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
{
 800645a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800645c:	b11b      	cbz	r3, 8006466 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800645e:	2301      	movs	r3, #1
 8006460:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
}
 8006464:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8006466:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800646a:	6913      	ldr	r3, [r2, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800646c:	fab3 f383 	clz	r3, r3
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2114      	movs	r1, #20
 8006474:	f1c3 031f 	rsb	r3, r3, #31
 8006478:	4359      	muls	r1, r3
 800647a:	1850      	adds	r0, r2, r1
 800647c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800647e:	b954      	cbnz	r4, 8006496 <vTaskSwitchContext+0x42>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	b672      	cpsid	i
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	b662      	cpsie	i
 8006494:	e7fe      	b.n	8006494 <vTaskSwitchContext+0x40>
 8006496:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006498:	4411      	add	r1, r2
 800649a:	6864      	ldr	r4, [r4, #4]
 800649c:	313c      	adds	r1, #60	; 0x3c
 800649e:	428c      	cmp	r4, r1
 80064a0:	6384      	str	r4, [r0, #56]	; 0x38
 80064a2:	bf04      	itt	eq
 80064a4:	6861      	ldreq	r1, [r4, #4]
 80064a6:	6381      	streq	r1, [r0, #56]	; 0x38
 80064a8:	2114      	movs	r1, #20
 80064aa:	fb01 2303 	mla	r3, r1, r3, r2
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	60d3      	str	r3, [r2, #12]
}
 80064b4:	e7d6      	b.n	8006464 <vTaskSwitchContext+0x10>
 80064b6:	bf00      	nop
 80064b8:	20009bc8 	.word	0x20009bc8

080064bc <vTaskPlaceOnEventList>:
{
 80064bc:	b510      	push	{r4, lr}
 80064be:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80064c0:	b950      	cbnz	r0, 80064d8 <vTaskPlaceOnEventList+0x1c>
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	b672      	cpsid	i
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	b662      	cpsie	i
 80064d6:	e7fe      	b.n	80064d6 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064d8:	4b04      	ldr	r3, [pc, #16]	; (80064ec <vTaskPlaceOnEventList+0x30>)
 80064da:	68d9      	ldr	r1, [r3, #12]
 80064dc:	3118      	adds	r1, #24
 80064de:	f7fe fff1 	bl	80054c4 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064e2:	4620      	mov	r0, r4
}
 80064e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064e8:	f7ff bce8 	b.w	8005ebc <prvAddCurrentTaskToDelayedList.constprop.0>
 80064ec:	20009bc8 	.word	0x20009bc8

080064f0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f0:	68c3      	ldr	r3, [r0, #12]
{
 80064f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064f4:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80064f6:	b955      	cbnz	r5, 800650e <xTaskRemoveFromEventList+0x1e>
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	b672      	cpsid	i
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	b662      	cpsie	i
 800650c:	e7fe      	b.n	800650c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800650e:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006512:	4c15      	ldr	r4, [pc, #84]	; (8006568 <xTaskRemoveFromEventList+0x78>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006514:	4608      	mov	r0, r1
 8006516:	9101      	str	r1, [sp, #4]
 8006518:	f7fe ffeb 	bl	80054f2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800651c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8006520:	9901      	ldr	r1, [sp, #4]
 8006522:	b9e3      	cbnz	r3, 800655e <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006524:	1d29      	adds	r1, r5, #4
 8006526:	4608      	mov	r0, r1
 8006528:	9101      	str	r1, [sp, #4]
 800652a:	f7fe ffe2 	bl	80054f2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800652e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8006530:	2301      	movs	r3, #1
 8006532:	6920      	ldr	r0, [r4, #16]
 8006534:	9901      	ldr	r1, [sp, #4]
 8006536:	4093      	lsls	r3, r2
 8006538:	4303      	orrs	r3, r0
 800653a:	2014      	movs	r0, #20
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8006542:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006546:	f7fe ffb1 	bl	80054ac <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800654a:	68e3      	ldr	r3, [r4, #12]
 800654c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	429a      	cmp	r2, r3
 8006552:	d907      	bls.n	8006564 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
 8006554:	2001      	movs	r0, #1
 8006556:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 800655a:	b003      	add	sp, #12
 800655c:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800655e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8006562:	e7f0      	b.n	8006546 <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8006564:	2000      	movs	r0, #0
	return xReturn;
 8006566:	e7f8      	b.n	800655a <xTaskRemoveFromEventList+0x6a>
 8006568:	20009bc8 	.word	0x20009bc8

0800656c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800656c:	4b03      	ldr	r3, [pc, #12]	; (800657c <vTaskInternalSetTimeOutState+0x10>)
 800656e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006572:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006574:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006576:	6043      	str	r3, [r0, #4]
}
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	20009bc8 	.word	0x20009bc8

08006580 <xTaskCheckForTimeOut>:
{
 8006580:	b538      	push	{r3, r4, r5, lr}
 8006582:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8006584:	4605      	mov	r5, r0
 8006586:	b950      	cbnz	r0, 800659e <xTaskCheckForTimeOut+0x1e>
 8006588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658c:	b672      	cpsid	i
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	b662      	cpsie	i
 800659c:	e7fe      	b.n	800659c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 800659e:	b951      	cbnz	r1, 80065b6 <xTaskCheckForTimeOut+0x36>
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	b672      	cpsid	i
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	b662      	cpsie	i
 80065b4:	e7fe      	b.n	80065b4 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 80065b6:	f000 fbc5 	bl	8006d44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065bc:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80065be:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065c4:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80065c6:	4298      	cmp	r0, r3
 80065c8:	d001      	beq.n	80065ce <xTaskCheckForTimeOut+0x4e>
 80065ca:	428a      	cmp	r2, r1
 80065cc:	d910      	bls.n	80065f0 <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065ce:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80065d0:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065d2:	4283      	cmp	r3, r0
 80065d4:	d90a      	bls.n	80065ec <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 80065d6:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065d8:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80065da:	4413      	add	r3, r2
 80065dc:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 80065de:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065e0:	f7ff ffc4 	bl	800656c <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 80065e4:	f000 fbd2 	bl	8006d8c <vPortExitCritical>
}
 80065e8:	4620      	mov	r0, r4
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80065f0:	2401      	movs	r4, #1
 80065f2:	e7f7      	b.n	80065e4 <xTaskCheckForTimeOut+0x64>
 80065f4:	20009bc8 	.word	0x20009bc8

080065f8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80065f8:	4b02      	ldr	r3, [pc, #8]	; (8006604 <vTaskMissedYield+0xc>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20009bc8 	.word	0x20009bc8

08006608 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <xTaskGetSchedulerState+0x1c>)
 800660a:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 800660e:	b132      	cbz	r2, 800661e <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006610:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
				xReturn = taskSCHEDULER_SUSPENDED;
 8006614:	2b00      	cmp	r3, #0
 8006616:	bf0c      	ite	eq
 8006618:	2002      	moveq	r0, #2
 800661a:	2000      	movne	r0, #0
 800661c:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800661e:	2001      	movs	r0, #1
	}
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20009bc8 	.word	0x20009bc8

08006628 <xTaskPriorityInherit>:
	{
 8006628:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800662a:	4604      	mov	r4, r0
 800662c:	2800      	cmp	r0, #0
 800662e:	d034      	beq.n	800669a <xTaskPriorityInherit+0x72>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006630:	4d22      	ldr	r5, [pc, #136]	; (80066bc <xTaskPriorityInherit+0x94>)
 8006632:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006634:	68ea      	ldr	r2, [r5, #12]
 8006636:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006638:	4293      	cmp	r3, r2
 800663a:	d236      	bcs.n	80066aa <xTaskPriorityInherit+0x82>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800663c:	6982      	ldr	r2, [r0, #24]
 800663e:	2a00      	cmp	r2, #0
 8006640:	db04      	blt.n	800664c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006642:	68ea      	ldr	r2, [r5, #12]
 8006644:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006646:	f1c2 0207 	rsb	r2, r2, #7
 800664a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800664c:	4f1c      	ldr	r7, [pc, #112]	; (80066c0 <xTaskPriorityInherit+0x98>)
 800664e:	2614      	movs	r6, #20
 8006650:	6962      	ldr	r2, [r4, #20]
 8006652:	fb06 7303 	mla	r3, r6, r3, r7
 8006656:	429a      	cmp	r2, r3
 8006658:	d121      	bne.n	800669e <xTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665a:	1d21      	adds	r1, r4, #4
 800665c:	4608      	mov	r0, r1
 800665e:	9101      	str	r1, [sp, #4]
 8006660:	f7fe ff47 	bl	80054f2 <uxListRemove>
 8006664:	9901      	ldr	r1, [sp, #4]
 8006666:	b950      	cbnz	r0, 800667e <xTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006668:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800666a:	fb06 5600 	mla	r6, r6, r0, r5
 800666e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006670:	b92b      	cbnz	r3, 800667e <xTaskPriorityInherit+0x56>
 8006672:	2201      	movs	r2, #1
 8006674:	692b      	ldr	r3, [r5, #16]
 8006676:	4082      	lsls	r2, r0
 8006678:	ea23 0302 	bic.w	r3, r3, r2
 800667c:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800667e:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006680:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006684:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006686:	2401      	movs	r4, #1
 8006688:	fa04 f203 	lsl.w	r2, r4, r3
 800668c:	4302      	orrs	r2, r0
 800668e:	2014      	movs	r0, #20
 8006690:	fb00 7003 	mla	r0, r0, r3, r7
 8006694:	612a      	str	r2, [r5, #16]
 8006696:	f7fe ff09 	bl	80054ac <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800669a:	4620      	mov	r0, r4
		return xReturn;
 800669c:	e003      	b.n	80066a6 <xTaskPriorityInherit+0x7e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800669e:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 80066a0:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80066a6:	b003      	add	sp, #12
 80066a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066aa:	68eb      	ldr	r3, [r5, #12]
 80066ac:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80066ae:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80066b0:	42a0      	cmp	r0, r4
 80066b2:	bf2c      	ite	cs
 80066b4:	2000      	movcs	r0, #0
 80066b6:	2001      	movcc	r0, #1
 80066b8:	e7f5      	b.n	80066a6 <xTaskPriorityInherit+0x7e>
 80066ba:	bf00      	nop
 80066bc:	20009bc8 	.word	0x20009bc8
 80066c0:	20009bfc 	.word	0x20009bfc

080066c4 <xTaskPriorityDisinherit>:
	{
 80066c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80066c6:	4604      	mov	r4, r0
 80066c8:	b910      	cbnz	r0, 80066d0 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 80066ca:	2000      	movs	r0, #0
	}
 80066cc:	b002      	add	sp, #8
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80066d0:	4d24      	ldr	r5, [pc, #144]	; (8006764 <xTaskPriorityDisinherit+0xa0>)
 80066d2:	68eb      	ldr	r3, [r5, #12]
 80066d4:	4283      	cmp	r3, r0
 80066d6:	d00a      	beq.n	80066ee <xTaskPriorityDisinherit+0x2a>
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	b672      	cpsid	i
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	b662      	cpsie	i
 80066ec:	e7fe      	b.n	80066ec <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 80066ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f0:	b953      	cbnz	r3, 8006708 <xTaskPriorityDisinherit+0x44>
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	b672      	cpsid	i
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	b662      	cpsie	i
 8006706:	e7fe      	b.n	8006706 <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006708:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800670a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800670c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800670e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006710:	4291      	cmp	r1, r2
 8006712:	d0da      	beq.n	80066ca <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1d8      	bne.n	80066ca <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006718:	1d01      	adds	r1, r0, #4
 800671a:	4608      	mov	r0, r1
 800671c:	9101      	str	r1, [sp, #4]
 800671e:	f7fe fee8 	bl	80054f2 <uxListRemove>
 8006722:	9901      	ldr	r1, [sp, #4]
 8006724:	b958      	cbnz	r0, 800673e <xTaskPriorityDisinherit+0x7a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006728:	2014      	movs	r0, #20
 800672a:	fb00 5006 	mla	r0, r0, r6, r5
 800672e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006730:	b92b      	cbnz	r3, 800673e <xTaskPriorityDisinherit+0x7a>
 8006732:	2201      	movs	r2, #1
 8006734:	692b      	ldr	r3, [r5, #16]
 8006736:	40b2      	lsls	r2, r6
 8006738:	ea23 0302 	bic.w	r3, r3, r2
 800673c:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800673e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006740:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006742:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006746:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006748:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800674a:	2401      	movs	r4, #1
 800674c:	fa04 f203 	lsl.w	r2, r4, r3
 8006750:	4302      	orrs	r2, r0
 8006752:	2014      	movs	r0, #20
 8006754:	612a      	str	r2, [r5, #16]
 8006756:	4a04      	ldr	r2, [pc, #16]	; (8006768 <xTaskPriorityDisinherit+0xa4>)
 8006758:	fb00 2003 	mla	r0, r0, r3, r2
 800675c:	f7fe fea6 	bl	80054ac <vListInsertEnd>
					xReturn = pdTRUE;
 8006760:	4620      	mov	r0, r4
		return xReturn;
 8006762:	e7b3      	b.n	80066cc <xTaskPriorityDisinherit+0x8>
 8006764:	20009bc8 	.word	0x20009bc8
 8006768:	20009bfc 	.word	0x20009bfc

0800676c <vTaskPriorityDisinheritAfterTimeout>:
	{
 800676c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800676e:	4604      	mov	r4, r0
 8006770:	2800      	cmp	r0, #0
 8006772:	d051      	beq.n	8006818 <vTaskPriorityDisinheritAfterTimeout+0xac>
			configASSERT( pxTCB->uxMutexesHeld );
 8006774:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006776:	b952      	cbnz	r2, 800678e <vTaskPriorityDisinheritAfterTimeout+0x22>
 8006778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677c:	b672      	cpsid	i
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	b662      	cpsie	i
 800678c:	e7fe      	b.n	800678c <vTaskPriorityDisinheritAfterTimeout+0x20>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800678e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006790:	4299      	cmp	r1, r3
 8006792:	bf38      	it	cc
 8006794:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006796:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006798:	428b      	cmp	r3, r1
 800679a:	d03d      	beq.n	8006818 <vTaskPriorityDisinheritAfterTimeout+0xac>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800679c:	2a01      	cmp	r2, #1
 800679e:	d13b      	bne.n	8006818 <vTaskPriorityDisinheritAfterTimeout+0xac>
					configASSERT( pxTCB != pxCurrentTCB );
 80067a0:	4d1e      	ldr	r5, [pc, #120]	; (800681c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 80067a2:	68ea      	ldr	r2, [r5, #12]
 80067a4:	4282      	cmp	r2, r0
 80067a6:	d10a      	bne.n	80067be <vTaskPriorityDisinheritAfterTimeout+0x52>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	b672      	cpsid	i
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	b662      	cpsie	i
 80067bc:	e7fe      	b.n	80067bc <vTaskPriorityDisinheritAfterTimeout+0x50>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067be:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80067c0:	2614      	movs	r6, #20
 80067c2:	4f17      	ldr	r7, [pc, #92]	; (8006820 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80067c4:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 80067c6:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80067c8:	fb06 7303 	mla	r3, r6, r3, r7
 80067cc:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ce:	bfa4      	itt	ge
 80067d0:	f1c1 0107 	rsbge	r1, r1, #7
 80067d4:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d11e      	bne.n	8006818 <vTaskPriorityDisinheritAfterTimeout+0xac>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067da:	1d01      	adds	r1, r0, #4
 80067dc:	4608      	mov	r0, r1
 80067de:	9101      	str	r1, [sp, #4]
 80067e0:	f7fe fe87 	bl	80054f2 <uxListRemove>
 80067e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067e6:	9901      	ldr	r1, [sp, #4]
 80067e8:	b948      	cbnz	r0, 80067fe <vTaskPriorityDisinheritAfterTimeout+0x92>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80067ea:	fb06 5602 	mla	r6, r6, r2, r5
 80067ee:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80067f0:	b92b      	cbnz	r3, 80067fe <vTaskPriorityDisinheritAfterTimeout+0x92>
 80067f2:	2001      	movs	r0, #1
 80067f4:	692b      	ldr	r3, [r5, #16]
 80067f6:	4090      	lsls	r0, r2
 80067f8:	ea23 0300 	bic.w	r3, r3, r0
 80067fc:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 80067fe:	2301      	movs	r3, #1
 8006800:	6928      	ldr	r0, [r5, #16]
 8006802:	4093      	lsls	r3, r2
 8006804:	4303      	orrs	r3, r0
 8006806:	2014      	movs	r0, #20
 8006808:	fb00 7002 	mla	r0, r0, r2, r7
 800680c:	612b      	str	r3, [r5, #16]
	}
 800680e:	b003      	add	sp, #12
 8006810:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8006814:	f7fe be4a 	b.w	80054ac <vListInsertEnd>
	}
 8006818:	b003      	add	sp, #12
 800681a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681c:	20009bc8 	.word	0x20009bc8
 8006820:	20009bfc 	.word	0x20009bfc

08006824 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <pvTaskIncrementMutexHeldCount+0x14>)
 8006826:	68da      	ldr	r2, [r3, #12]
 8006828:	b11a      	cbz	r2, 8006832 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800682a:	68d9      	ldr	r1, [r3, #12]
 800682c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800682e:	3201      	adds	r2, #1
 8006830:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8006832:	68d8      	ldr	r0, [r3, #12]
	}
 8006834:	4770      	bx	lr
 8006836:	bf00      	nop
 8006838:	20009bc8 	.word	0x20009bc8

0800683c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800683c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800683e:	f7ff fcab 	bl	8006198 <vTaskStartScheduler>
  
  return osOK;
}
 8006842:	2000      	movs	r0, #0
 8006844:	bd08      	pop	{r3, pc}

08006846 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006846:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800684a:	b10b      	cbz	r3, 8006850 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800684c:	f7ff bcee 	b.w	800622c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8006850:	f7ff bce6 	b.w	8006220 <xTaskGetTickCount>

08006854 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006854:	b530      	push	{r4, r5, lr}
 8006856:	4604      	mov	r4, r0
 8006858:	b085      	sub	sp, #20
 800685a:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800685c:	8a22      	ldrh	r2, [r4, #16]
 800685e:	ad03      	add	r5, sp, #12
 8006860:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 8006864:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8006866:	bf14      	ite	ne
 8006868:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800686a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800686c:	e9d0 1000 	ldrd	r1, r0, [r0]
 8006870:	e9cd 4500 	strd	r4, r5, [sp]
 8006874:	f7ff fb74 	bl	8005f60 <xTaskCreate>
 8006878:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800687a:	bf0c      	ite	eq
 800687c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800687e:	2000      	movne	r0, #0
}
 8006880:	b005      	add	sp, #20
 8006882:	bd30      	pop	{r4, r5, pc}

08006884 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8006884:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8006886:	f7ff fc29 	bl	80060dc <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 800688a:	2000      	movs	r0, #0
 800688c:	bd08      	pop	{r3, pc}

0800688e <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800688e:	2801      	cmp	r0, #1
{
 8006890:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006892:	bf38      	it	cc
 8006894:	2001      	movcc	r0, #1
 8006896:	f7ff fdb5 	bl	8006404 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800689a:	2000      	movs	r0, #0
 800689c:	bd08      	pop	{r3, pc}

0800689e <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800689e:	2001      	movs	r0, #1
 80068a0:	f7ff b808 	b.w	80058b4 <xQueueCreateMutex>

080068a4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80068a4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80068a6:	2400      	movs	r4, #0
 80068a8:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80068aa:	b1f0      	cbz	r0, 80068ea <osMutexWait+0x46>
 80068ac:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80068b0:	b1ab      	cbz	r3, 80068de <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80068b2:	aa01      	add	r2, sp, #4
 80068b4:	4621      	mov	r1, r4
 80068b6:	f7ff fa4d 	bl	8005d54 <xQueueReceiveFromISR>
 80068ba:	2801      	cmp	r0, #1
 80068bc:	d113      	bne.n	80068e6 <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	b913      	cbnz	r3, 80068c8 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80068c2:	2000      	movs	r0, #0
}
 80068c4:	b002      	add	sp, #8
 80068c6:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80068c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80068cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	e7f1      	b.n	80068c2 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80068de:	f7ff f96e 	bl	8005bbe <xQueueSemaphoreTake>
 80068e2:	2801      	cmp	r0, #1
 80068e4:	d0ed      	beq.n	80068c2 <osMutexWait+0x1e>
    return osErrorOS;
 80068e6:	20ff      	movs	r0, #255	; 0xff
 80068e8:	e7ec      	b.n	80068c4 <osMutexWait+0x20>
    return osErrorParameter;
 80068ea:	2080      	movs	r0, #128	; 0x80
 80068ec:	e7ea      	b.n	80068c4 <osMutexWait+0x20>

080068ee <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80068ee:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80068f0:	2400      	movs	r4, #0
 80068f2:	9401      	str	r4, [sp, #4]
 80068f4:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80068f8:	b1a3      	cbz	r3, 8006924 <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80068fa:	a901      	add	r1, sp, #4
 80068fc:	f7ff f85e 	bl	80059bc <xQueueGiveFromISR>
 8006900:	2801      	cmp	r0, #1
 8006902:	d115      	bne.n	8006930 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006904:	9b01      	ldr	r3, [sp, #4]
 8006906:	b913      	cbnz	r3, 800690e <osMutexRelease+0x20>
  osStatus result = osOK;
 8006908:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800690a:	b002      	add	sp, #8
 800690c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800690e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006916:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	e7f1      	b.n	8006908 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006924:	461a      	mov	r2, r3
 8006926:	4619      	mov	r1, r3
 8006928:	f7fe ff09 	bl	800573e <xQueueGenericSend>
 800692c:	2801      	cmp	r0, #1
 800692e:	d0eb      	beq.n	8006908 <osMutexRelease+0x1a>
    result = osErrorOS;
 8006930:	20ff      	movs	r0, #255	; 0xff
 8006932:	e7ea      	b.n	800690a <osMutexRelease+0x1c>

08006934 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8006934:	b510      	push	{r4, lr}
 8006936:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800693a:	b91c      	cbnz	r4, 8006944 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 800693c:	f7ff fa98 	bl	8005e70 <vQueueDelete>

  return osOK;
}
 8006940:	4620      	mov	r0, r4
 8006942:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8006944:	2482      	movs	r4, #130	; 0x82
 8006946:	e7fb      	b.n	8006940 <osMutexDelete+0xc>

08006948 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8006948:	2901      	cmp	r1, #1
{ 
 800694a:	4608      	mov	r0, r1
 800694c:	b510      	push	{r4, lr}
  if (count == 1) {
 800694e:	d10c      	bne.n	800696a <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8006950:	2203      	movs	r2, #3
 8006952:	2100      	movs	r1, #0
 8006954:	f7fe feab 	bl	80056ae <xQueueGenericCreate>
 8006958:	4604      	mov	r4, r0
 800695a:	b120      	cbz	r0, 8006966 <osSemaphoreCreate+0x1e>
 800695c:	2300      	movs	r3, #0
 800695e:	461a      	mov	r2, r3
 8006960:	4619      	mov	r1, r3
 8006962:	f7fe feec 	bl	800573e <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8006966:	4620      	mov	r0, r4
 8006968:	bd10      	pop	{r4, pc}
 800696a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 800696e:	f7fe bec4 	b.w	80056fa <xQueueCreateCountingSemaphore>

08006972 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006972:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006974:	2400      	movs	r4, #0
 8006976:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8006978:	b1f0      	cbz	r0, 80069b8 <osSemaphoreWait+0x46>
 800697a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800697e:	b1ab      	cbz	r3, 80069ac <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006980:	aa01      	add	r2, sp, #4
 8006982:	4621      	mov	r1, r4
 8006984:	f7ff f9e6 	bl	8005d54 <xQueueReceiveFromISR>
 8006988:	2801      	cmp	r0, #1
 800698a:	d113      	bne.n	80069b4 <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800698c:	9b01      	ldr	r3, [sp, #4]
 800698e:	b913      	cbnz	r3, 8006996 <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8006990:	2000      	movs	r0, #0
}
 8006992:	b002      	add	sp, #8
 8006994:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8006996:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800699a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800699e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	f3bf 8f6f 	isb	sy
 80069aa:	e7f1      	b.n	8006990 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80069ac:	f7ff f907 	bl	8005bbe <xQueueSemaphoreTake>
 80069b0:	2801      	cmp	r0, #1
 80069b2:	d0ed      	beq.n	8006990 <osSemaphoreWait+0x1e>
    return osErrorOS;
 80069b4:	20ff      	movs	r0, #255	; 0xff
 80069b6:	e7ec      	b.n	8006992 <osSemaphoreWait+0x20>
    return osErrorParameter;
 80069b8:	2080      	movs	r0, #128	; 0x80
 80069ba:	e7ea      	b.n	8006992 <osSemaphoreWait+0x20>

080069bc <osSemaphoreRelease>:
 80069bc:	f7ff bf97 	b.w	80068ee <osMutexRelease>

080069c0 <osSemaphoreDelete>:
 80069c0:	f7ff bfb8 	b.w	8006934 <osMutexDelete>

080069c4 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80069c4:	2200      	movs	r2, #0
 80069c6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80069ca:	f7fe be70 	b.w	80056ae <xQueueGenericCreate>

080069ce <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80069ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80069d0:	2400      	movs	r4, #0
{
 80069d2:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80069d4:	9403      	str	r4, [sp, #12]
 80069d6:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 80069da:	b1b3      	cbz	r3, 8006a0a <osMessagePut+0x3c>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80069dc:	4623      	mov	r3, r4
 80069de:	aa03      	add	r2, sp, #12
 80069e0:	a901      	add	r1, sp, #4
 80069e2:	f7fe ff82 	bl	80058ea <xQueueGenericSendFromISR>
 80069e6:	2801      	cmp	r0, #1
 80069e8:	d117      	bne.n	8006a1a <osMessagePut+0x4c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80069ea:	9b03      	ldr	r3, [sp, #12]
 80069ec:	b913      	cbnz	r3, 80069f4 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80069ee:	2000      	movs	r0, #0
}
 80069f0:	b004      	add	sp, #16
 80069f2:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80069f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80069f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	e7f1      	b.n	80069ee <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	a901      	add	r1, sp, #4
 8006a0e:	bf38      	it	cc
 8006a10:	2201      	movcc	r2, #1
 8006a12:	f7fe fe94 	bl	800573e <xQueueGenericSend>
 8006a16:	2801      	cmp	r0, #1
 8006a18:	d0e9      	beq.n	80069ee <osMessagePut+0x20>
      return osErrorOS;
 8006a1a:	20ff      	movs	r0, #255	; 0xff
 8006a1c:	e7e8      	b.n	80069f0 <osMessagePut+0x22>

08006a1e <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006a1e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8006a20:	2300      	movs	r3, #0
{
 8006a22:	4604      	mov	r4, r0
 8006a24:	4616      	mov	r6, r2
 8006a26:	4608      	mov	r0, r1
 8006a28:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 8006a2a:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8006a2c:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8006a2e:	b911      	cbnz	r1, 8006a36 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8006a30:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	e018      	b.n	8006a68 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8006a3c:	b1db      	cbz	r3, 8006a76 <osMessageGet+0x58>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006a3e:	466a      	mov	r2, sp
 8006a40:	a902      	add	r1, sp, #8
 8006a42:	f7ff f987 	bl	8005d54 <xQueueReceiveFromISR>
      event.status = osOK;
 8006a46:	2801      	cmp	r0, #1
 8006a48:	bf0c      	ite	eq
 8006a4a:	2310      	moveq	r3, #16
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8006a50:	9b00      	ldr	r3, [sp, #0]
 8006a52:	b14b      	cbz	r3, 8006a68 <osMessageGet+0x4a>
 8006a54:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 8006a68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006a70:	4620      	mov	r0, r4
 8006a72:	b004      	add	sp, #16
 8006a74:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006a76:	a902      	add	r1, sp, #8
 8006a78:	f7fe fffc 	bl	8005a74 <xQueueReceive>
 8006a7c:	2801      	cmp	r0, #1
 8006a7e:	d101      	bne.n	8006a84 <osMessageGet+0x66>
      event.status = osEventMessage;
 8006a80:	2310      	movs	r3, #16
 8006a82:	e7d6      	b.n	8006a32 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006a84:	2e00      	cmp	r6, #0
 8006a86:	bf18      	it	ne
 8006a88:	2640      	movne	r6, #64	; 0x40
 8006a8a:	9601      	str	r6, [sp, #4]
 8006a8c:	e7ec      	b.n	8006a68 <osMessageGet+0x4a>

08006a8e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006a8e:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a90:	f7ff fdba 	bl	8006608 <xTaskGetSchedulerState>
 8006a94:	2801      	cmp	r0, #1
 8006a96:	d003      	beq.n	8006aa0 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8006a98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006a9c:	f000 b9c2 	b.w	8006e24 <xPortSysTickHandler>
}
 8006aa0:	bd08      	pop	{r3, pc}

08006aa2 <osMessageWaiting>:
 8006aa2:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8006aa6:	b10b      	cbz	r3, 8006aac <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8006aa8:	f7ff b9c0 	b.w	8005e2c <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8006aac:	f7ff b9a7 	b.w	8005dfe <uxQueueMessagesWaiting>

08006ab0 <osMessageDelete>:
 8006ab0:	f7ff bf40 	b.w	8006934 <osMutexDelete>

08006ab4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <prvInsertBlockIntoFreeList+0x40>)
{
 8006ab6:	b530      	push	{r4, r5, lr}
 8006ab8:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aba:	461a      	mov	r2, r3
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4283      	cmp	r3, r0
 8006ac0:	d3fb      	bcc.n	8006aba <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ac2:	6854      	ldr	r4, [r2, #4]
 8006ac4:	1911      	adds	r1, r2, r4
 8006ac6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ac8:	bf01      	itttt	eq
 8006aca:	6841      	ldreq	r1, [r0, #4]
 8006acc:	4610      	moveq	r0, r2
 8006ace:	1909      	addeq	r1, r1, r4
 8006ad0:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ad2:	6844      	ldr	r4, [r0, #4]
 8006ad4:	1901      	adds	r1, r0, r4
 8006ad6:	428b      	cmp	r3, r1
 8006ad8:	d106      	bne.n	8006ae8 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ada:	68a9      	ldr	r1, [r5, #8]
 8006adc:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ade:	bf1f      	itttt	ne
 8006ae0:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ae2:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006ae4:	1909      	addne	r1, r1, r4
 8006ae6:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ae8:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006aea:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006aec:	bf18      	it	ne
 8006aee:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006af0:	bd30      	pop	{r4, r5, pc}
 8006af2:	bf00      	nop
 8006af4:	20009ce0 	.word	0x20009ce0

08006af8 <pvPortMalloc>:
{
 8006af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8006afc:	4d3f      	ldr	r5, [pc, #252]	; (8006bfc <pvPortMalloc+0x104>)
{
 8006afe:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006b00:	f7ff fb84 	bl	800620c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006b04:	68ab      	ldr	r3, [r5, #8]
 8006b06:	b9f3      	cbnz	r3, 8006b46 <pvPortMalloc+0x4e>
	uxAddress = ( size_t ) ucHeap;
 8006b08:	493d      	ldr	r1, [pc, #244]	; (8006c00 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b0a:	074e      	lsls	r6, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b0c:	bf1b      	ittet	ne
 8006b0e:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b10:	f501 42c8 	addne.w	r2, r1, #25600	; 0x6400
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b14:	f44f 42c8 	moveq.w	r2, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b18:	f023 0307 	bicne.w	r3, r3, #7
 8006b1c:	bf1c      	itt	ne
 8006b1e:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b20:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8006b22:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b24:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b26:	6029      	str	r1, [r5, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b28:	606b      	str	r3, [r5, #4]
	uxAddress -= xHeapStructSize;
 8006b2a:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b2c:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8006b30:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b34:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8006b36:	60aa      	str	r2, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b38:	e9c1 2300 	strd	r2, r3, [r1]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b3c:	e9c5 3303 	strd	r3, r3, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b44:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b46:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8006b4a:	ea18 0f04 	tst.w	r8, r4
 8006b4e:	d14f      	bne.n	8006bf0 <pvPortMalloc+0xf8>
			if( xWantedSize > 0 )
 8006b50:	2c00      	cmp	r4, #0
 8006b52:	d03e      	beq.n	8006bd2 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 8006b54:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b58:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b5a:	bf1c      	itt	ne
 8006b5c:	f023 0307 	bicne.w	r3, r3, #7
 8006b60:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d044      	beq.n	8006bf0 <pvPortMalloc+0xf8>
 8006b66:	692f      	ldr	r7, [r5, #16]
 8006b68:	429f      	cmp	r7, r3
 8006b6a:	d341      	bcc.n	8006bf0 <pvPortMalloc+0xf8>
				pxBlock = xStart.pxNextFreeBlock;
 8006b6c:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 8006b6e:	4823      	ldr	r0, [pc, #140]	; (8006bfc <pvPortMalloc+0x104>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b70:	6872      	ldr	r2, [r6, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d201      	bcs.n	8006b7a <pvPortMalloc+0x82>
 8006b76:	6831      	ldr	r1, [r6, #0]
 8006b78:	b9b1      	cbnz	r1, 8006ba8 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 8006b7a:	68a9      	ldr	r1, [r5, #8]
 8006b7c:	42b1      	cmp	r1, r6
 8006b7e:	d037      	beq.n	8006bf0 <pvPortMalloc+0xf8>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b80:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b82:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b84:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b86:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b88:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b8a:	d914      	bls.n	8006bb6 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b8c:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b8e:	0741      	lsls	r1, r0, #29
 8006b90:	d00d      	beq.n	8006bae <pvPortMalloc+0xb6>
 8006b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b96:	b672      	cpsid	i
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	b662      	cpsie	i
 8006ba6:	e7fe      	b.n	8006ba6 <pvPortMalloc+0xae>
 8006ba8:	4630      	mov	r0, r6
 8006baa:	460e      	mov	r6, r1
 8006bac:	e7e0      	b.n	8006b70 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bae:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bb0:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bb2:	f7ff ff7f 	bl	8006ab4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bb6:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bb8:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bba:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bbc:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bbe:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bc2:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bc4:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bc6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bca:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bcc:	bf38      	it	cc
 8006bce:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 8006bd0:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 8006bd2:	f7ff fba7 	bl	8006324 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd6:	0763      	lsls	r3, r4, #29
 8006bd8:	d00c      	beq.n	8006bf4 <pvPortMalloc+0xfc>
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	b672      	cpsid	i
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	b662      	cpsie	i
 8006bee:	e7fe      	b.n	8006bee <pvPortMalloc+0xf6>
void *pvReturn = NULL;
 8006bf0:	2400      	movs	r4, #0
 8006bf2:	e7ee      	b.n	8006bd2 <pvPortMalloc+0xda>
}
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20009ce0 	.word	0x20009ce0
 8006c00:	20009cf8 	.word	0x20009cf8

08006c04 <vPortFree>:
{
 8006c04:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8006c06:	4604      	mov	r4, r0
 8006c08:	b388      	cbz	r0, 8006c6e <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c0a:	4d19      	ldr	r5, [pc, #100]	; (8006c70 <vPortFree+0x6c>)
 8006c0c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006c10:	696a      	ldr	r2, [r5, #20]
 8006c12:	4213      	tst	r3, r2
 8006c14:	d10a      	bne.n	8006c2c <vPortFree+0x28>
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	b672      	cpsid	i
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	b662      	cpsie	i
 8006c2a:	e7fe      	b.n	8006c2a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c2c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006c30:	b151      	cbz	r1, 8006c48 <vPortFree+0x44>
 8006c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c36:	b672      	cpsid	i
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	b662      	cpsie	i
 8006c46:	e7fe      	b.n	8006c46 <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c48:	ea23 0302 	bic.w	r3, r3, r2
 8006c4c:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006c50:	f7ff fadc 	bl	800620c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c54:	692a      	ldr	r2, [r5, #16]
 8006c56:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c5a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c5e:	4413      	add	r3, r2
 8006c60:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c62:	f7ff ff27 	bl	8006ab4 <prvInsertBlockIntoFreeList>
}
 8006c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8006c6a:	f7ff bb5b 	b.w	8006324 <xTaskResumeAll>
}
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	20009ce0 	.word	0x20009ce0

08006c74 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c74:	4808      	ldr	r0, [pc, #32]	; (8006c98 <prvPortStartFirstTask+0x24>)
 8006c76:	6800      	ldr	r0, [r0, #0]
 8006c78:	6800      	ldr	r0, [r0, #0]
 8006c7a:	f380 8808 	msr	MSP, r0
 8006c7e:	f04f 0000 	mov.w	r0, #0
 8006c82:	f380 8814 	msr	CONTROL, r0
 8006c86:	b662      	cpsie	i
 8006c88:	b661      	cpsie	f
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	df00      	svc	0
 8006c94:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c96:	0000      	.short	0x0000
 8006c98:	e000ed08 	.word	0xe000ed08

08006c9c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c9c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cac <vPortEnableVFP+0x10>
 8006ca0:	6801      	ldr	r1, [r0, #0]
 8006ca2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ca6:	6001      	str	r1, [r0, #0]
 8006ca8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006caa:	0000      	.short	0x0000
 8006cac:	e000ed88 	.word	0xe000ed88

08006cb0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8006cb0:	2300      	movs	r3, #0
{
 8006cb2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006cb4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8006cb6:	4b0f      	ldr	r3, [pc, #60]	; (8006cf4 <prvTaskExitError+0x44>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	d00a      	beq.n	8006cd4 <prvTaskExitError+0x24>
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	b672      	cpsid	i
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	b662      	cpsie	i
 8006cd2:	e7fe      	b.n	8006cd2 <prvTaskExitError+0x22>
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	b672      	cpsid	i
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	b662      	cpsie	i
	while( ulDummy == 0 )
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0fc      	beq.n	8006ce8 <prvTaskExitError+0x38>
}
 8006cee:	b002      	add	sp, #8
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20001a5c 	.word	0x20001a5c

08006cf8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cfc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d00:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006d04:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d06:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d08:	4b03      	ldr	r3, [pc, #12]	; (8006d18 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d0a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d0c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d0e:	f06f 0302 	mvn.w	r3, #2
 8006d12:	6203      	str	r3, [r0, #32]
}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	08006cb1 	.word	0x08006cb1
 8006d1c:	00000000 	.word	0x00000000

08006d20 <SVC_Handler>:
	__asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	4770      	bx	lr
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst2>:
 8006d40:	20009bd4 	.word	0x20009bd4

08006d44 <vPortEnterCritical>:
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	b672      	cpsid	i
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	b662      	cpsie	i
	uxCriticalNesting++;
 8006d58:	4a0b      	ldr	r2, [pc, #44]	; (8006d88 <vPortEnterCritical+0x44>)
 8006d5a:	6813      	ldr	r3, [r2, #0]
 8006d5c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8006d5e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006d60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006d62:	d110      	bne.n	8006d86 <vPortEnterCritical+0x42>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d64:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006d68:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	b153      	cbz	r3, 8006d86 <vPortEnterCritical+0x42>
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	b672      	cpsid	i
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	b662      	cpsie	i
 8006d84:	e7fe      	b.n	8006d84 <vPortEnterCritical+0x40>
}
 8006d86:	4770      	bx	lr
 8006d88:	20001a5c 	.word	0x20001a5c

08006d8c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006d8c:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <vPortExitCritical+0x28>)
 8006d8e:	6813      	ldr	r3, [r2, #0]
 8006d90:	b953      	cbnz	r3, 8006da8 <vPortExitCritical+0x1c>
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	b672      	cpsid	i
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	b662      	cpsie	i
 8006da6:	e7fe      	b.n	8006da6 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8006da8:	3b01      	subs	r3, #1
 8006daa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006dac:	b90b      	cbnz	r3, 8006db2 <vPortExitCritical+0x26>
	__asm volatile
 8006dae:	f383 8811 	msr	BASEPRI, r3
}
 8006db2:	4770      	bx	lr
 8006db4:	20001a5c 	.word	0x20001a5c
	...

08006dc0 <PendSV_Handler>:
	__asm volatile
 8006dc0:	f3ef 8009 	mrs	r0, PSP
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <pxCurrentTCBConst>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f01e 0f10 	tst.w	lr, #16
 8006dd0:	bf08      	it	eq
 8006dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dda:	6010      	str	r0, [r2, #0]
 8006ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006de4:	b672      	cpsid	i
 8006de6:	f380 8811 	msr	BASEPRI, r0
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	b662      	cpsie	i
 8006df4:	f7ff fb2e 	bl	8006454 <vTaskSwitchContext>
 8006df8:	f04f 0000 	mov.w	r0, #0
 8006dfc:	f380 8811 	msr	BASEPRI, r0
 8006e00:	bc09      	pop	{r0, r3}
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0a:	f01e 0f10 	tst.w	lr, #16
 8006e0e:	bf08      	it	eq
 8006e10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e14:	f380 8809 	msr	PSP, r0
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop

08006e20 <pxCurrentTCBConst>:
 8006e20:	20009bd4 	.word	0x20009bd4

08006e24 <xPortSysTickHandler>:
{
 8006e24:	b508      	push	{r3, lr}
	__asm volatile
 8006e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2a:	b672      	cpsid	i
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8006e3a:	f7ff f9ff 	bl	800623c <xTaskIncrementTick>
 8006e3e:	b128      	cbz	r0, 8006e4c <xPortSysTickHandler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f383 8811 	msr	BASEPRI, r3
}
 8006e52:	bd08      	pop	{r3, pc}

08006e54 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e54:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8006e58:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e5e:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e60:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e62:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <vPortSetupTimerInterrupt+0x20>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e6a:	3b01      	subs	r3, #1
 8006e6c:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e6e:	2307      	movs	r3, #7
 8006e70:	6113      	str	r3, [r2, #16]
}
 8006e72:	4770      	bx	lr
 8006e74:	20001a50 	.word	0x20001a50

08006e78 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e78:	4b2d      	ldr	r3, [pc, #180]	; (8006f30 <xPortStartScheduler+0xb8>)
{
 8006e7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e7c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e7e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e84:	22ff      	movs	r2, #255	; 0xff
 8006e86:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e88:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e8a:	4a2a      	ldr	r2, [pc, #168]	; (8006f34 <xPortStartScheduler+0xbc>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e92:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006e96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e9a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e9c:	2307      	movs	r3, #7
 8006e9e:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ea0:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006ea4:	1e5c      	subs	r4, r3, #1
 8006ea6:	0600      	lsls	r0, r0, #24
 8006ea8:	d40e      	bmi.n	8006ec8 <xPortStartScheduler+0x50>
 8006eaa:	b111      	cbz	r1, 8006eb2 <xPortStartScheduler+0x3a>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	6053      	str	r3, [r2, #4]
 8006eb0:	d013      	beq.n	8006eda <xPortStartScheduler+0x62>
	__asm volatile
 8006eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb6:	b672      	cpsid	i
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	b662      	cpsie	i
 8006ec6:	e7fe      	b.n	8006ec6 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ec8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006ecc:	2101      	movs	r1, #1
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	f88d 3003 	strb.w	r3, [sp, #3]
 8006ed6:	4623      	mov	r3, r4
 8006ed8:	e7e2      	b.n	8006ea0 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006eda:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ede:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8006ee2:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ee4:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ee6:	9b01      	ldr	r3, [sp, #4]
 8006ee8:	4a11      	ldr	r2, [pc, #68]	; (8006f30 <xPortStartScheduler+0xb8>)
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006eee:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006ef2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ef6:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006efa:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8006efe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f02:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8006f06:	f7ff ffa5 	bl	8006e54 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <xPortStartScheduler+0xc0>)
 8006f0c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006f0e:	f7ff fec5 	bl	8006c9c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f12:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8006f16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f1a:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8006f1e:	f7ff fea9 	bl	8006c74 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8006f22:	f7ff fa97 	bl	8006454 <vTaskSwitchContext>
}
 8006f26:	4628      	mov	r0, r5
	prvTaskExitError();
 8006f28:	f7ff fec2 	bl	8006cb0 <prvTaskExitError>
}
 8006f2c:	b003      	add	sp, #12
 8006f2e:	bd30      	pop	{r4, r5, pc}
 8006f30:	e000e400 	.word	0xe000e400
 8006f34:	200100f8 	.word	0x200100f8
 8006f38:	20001a5c 	.word	0x20001a5c

08006f3c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f3c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	4a13      	ldr	r2, [pc, #76]	; (8006f90 <vPortValidateInterruptPriority+0x54>)
 8006f44:	d90f      	bls.n	8006f66 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f46:	4913      	ldr	r1, [pc, #76]	; (8006f94 <vPortValidateInterruptPriority+0x58>)
 8006f48:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f4a:	7811      	ldrb	r1, [r2, #0]
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	d90a      	bls.n	8006f66 <vPortValidateInterruptPriority+0x2a>
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	b672      	cpsid	i
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	b662      	cpsie	i
 8006f64:	e7fe      	b.n	8006f64 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8006f6a:	6852      	ldr	r2, [r2, #4]
 8006f6c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8006f70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d90a      	bls.n	8006f8e <vPortValidateInterruptPriority+0x52>
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	b672      	cpsid	i
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	b662      	cpsie	i
 8006f8c:	e7fe      	b.n	8006f8c <vPortValidateInterruptPriority+0x50>
	}
 8006f8e:	4770      	bx	lr
 8006f90:	200100f8 	.word	0x200100f8
 8006f94:	e000e3f0 	.word	0xe000e3f0

08006f98 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f98:	680a      	ldr	r2, [r1, #0]
{
 8006f9a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006f9c:	320c      	adds	r2, #12
{
 8006f9e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006fa0:	f001 fad2 	bl	8008548 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006fa4:	b908      	cbnz	r0, 8006faa <netconn_apimsg+0x12>
    return apimsg->err;
 8006fa6:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8006faa:	bd10      	pop	{r4, pc}

08006fac <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8006fac:	b508      	push	{r3, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006fae:	b160      	cbz	r0, 8006fca <netconn_tcp_recvd_msg+0x1e>
 8006fb0:	7803      	ldrb	r3, [r0, #0]
 8006fb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fb6:	2b10      	cmp	r3, #16
 8006fb8:	d107      	bne.n	8006fca <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8006fba:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8006fbc:	6091      	str	r1, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	4807      	ldr	r0, [pc, #28]	; (8006fe0 <netconn_tcp_recvd_msg+0x34>)
}
 8006fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8006fc6:	f7ff bfe7 	b.w	8006f98 <netconn_apimsg>
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <netconn_tcp_recvd_msg+0x38>)
 8006fcc:	f240 22a7 	movw	r2, #679	; 0x2a7
 8006fd0:	4905      	ldr	r1, [pc, #20]	; (8006fe8 <netconn_tcp_recvd_msg+0x3c>)
 8006fd2:	4806      	ldr	r0, [pc, #24]	; (8006fec <netconn_tcp_recvd_msg+0x40>)
 8006fd4:	f007 fb48 	bl	800e668 <iprintf>
}
 8006fd8:	f06f 000f 	mvn.w	r0, #15
 8006fdc:	bd08      	pop	{r3, pc}
 8006fde:	bf00      	nop
 8006fe0:	080081bd 	.word	0x080081bd
 8006fe4:	0801386c 	.word	0x0801386c
 8006fe8:	080138e1 	.word	0x080138e1
 8006fec:	080137b4 	.word	0x080137b4

08006ff0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8006ff0:	b500      	push	{lr}
 8006ff2:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006ff4:	b958      	cbnz	r0, 800700e <netconn_close_shutdown+0x1e>
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <netconn_close_shutdown+0x34>)
 8006ff8:	f240 4247 	movw	r2, #1095	; 0x447
 8006ffc:	490a      	ldr	r1, [pc, #40]	; (8007028 <netconn_close_shutdown+0x38>)
 8006ffe:	480b      	ldr	r0, [pc, #44]	; (800702c <netconn_close_shutdown+0x3c>)
 8007000:	f007 fb32 	bl	800e668 <iprintf>
 8007004:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8007008:	b009      	add	sp, #36	; 0x24
 800700a:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800700e:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8007010:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007012:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007016:	4669      	mov	r1, sp
 8007018:	4805      	ldr	r0, [pc, #20]	; (8007030 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800701a:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800701e:	f7ff ffbb 	bl	8006f98 <netconn_apimsg>
  return err;
 8007022:	e7f1      	b.n	8007008 <netconn_close_shutdown+0x18>
 8007024:	0801386c 	.word	0x0801386c
 8007028:	08013905 	.word	0x08013905
 800702c:	080137b4 	.word	0x080137b4
 8007030:	080082c1 	.word	0x080082c1

08007034 <netconn_new_with_proto_and_callback>:
{
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	460d      	mov	r5, r1
 8007038:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 800703a:	4611      	mov	r1, r2
 800703c:	f000 ff00 	bl	8007e40 <netconn_alloc>
  if (conn != NULL) {
 8007040:	4604      	mov	r4, r0
 8007042:	2800      	cmp	r0, #0
 8007044:	d03e      	beq.n	80070c4 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8007046:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007048:	4669      	mov	r1, sp
 800704a:	4820      	ldr	r0, [pc, #128]	; (80070cc <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800704c:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007050:	f7ff ffa2 	bl	8006f98 <netconn_apimsg>
    if (err != ERR_OK) {
 8007054:	2800      	cmp	r0, #0
 8007056:	d035      	beq.n	80070c4 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007058:	6863      	ldr	r3, [r4, #4]
 800705a:	b12b      	cbz	r3, 8007068 <netconn_new_with_proto_and_callback+0x34>
 800705c:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <netconn_new_with_proto_and_callback+0x9c>)
 800705e:	22a3      	movs	r2, #163	; 0xa3
 8007060:	491c      	ldr	r1, [pc, #112]	; (80070d4 <netconn_new_with_proto_and_callback+0xa0>)
 8007062:	481d      	ldr	r0, [pc, #116]	; (80070d8 <netconn_new_with_proto_and_callback+0xa4>)
 8007064:	f007 fb00 	bl	800e668 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007068:	f104 0510 	add.w	r5, r4, #16
 800706c:	4628      	mov	r0, r5
 800706e:	f007 fa1e 	bl	800e4ae <sys_mbox_valid>
 8007072:	b928      	cbnz	r0, 8007080 <netconn_new_with_proto_and_callback+0x4c>
 8007074:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <netconn_new_with_proto_and_callback+0x9c>)
 8007076:	22a4      	movs	r2, #164	; 0xa4
 8007078:	4918      	ldr	r1, [pc, #96]	; (80070dc <netconn_new_with_proto_and_callback+0xa8>)
 800707a:	4817      	ldr	r0, [pc, #92]	; (80070d8 <netconn_new_with_proto_and_callback+0xa4>)
 800707c:	f007 faf4 	bl	800e668 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007080:	f104 0014 	add.w	r0, r4, #20
 8007084:	f007 fa13 	bl	800e4ae <sys_mbox_valid>
 8007088:	b128      	cbz	r0, 8007096 <netconn_new_with_proto_and_callback+0x62>
 800708a:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <netconn_new_with_proto_and_callback+0x9c>)
 800708c:	22a6      	movs	r2, #166	; 0xa6
 800708e:	4914      	ldr	r1, [pc, #80]	; (80070e0 <netconn_new_with_proto_and_callback+0xac>)
 8007090:	4811      	ldr	r0, [pc, #68]	; (80070d8 <netconn_new_with_proto_and_callback+0xa4>)
 8007092:	f007 fae9 	bl	800e668 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007096:	f104 060c 	add.w	r6, r4, #12
 800709a:	4630      	mov	r0, r6
 800709c:	f007 fa47 	bl	800e52e <sys_sem_valid>
 80070a0:	b928      	cbnz	r0, 80070ae <netconn_new_with_proto_and_callback+0x7a>
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <netconn_new_with_proto_and_callback+0x9c>)
 80070a4:	22a9      	movs	r2, #169	; 0xa9
 80070a6:	490f      	ldr	r1, [pc, #60]	; (80070e4 <netconn_new_with_proto_and_callback+0xb0>)
 80070a8:	480b      	ldr	r0, [pc, #44]	; (80070d8 <netconn_new_with_proto_and_callback+0xa4>)
 80070aa:	f007 fadd 	bl	800e668 <iprintf>
      sys_sem_free(&conn->op_completed);
 80070ae:	4630      	mov	r0, r6
 80070b0:	f007 fa3a 	bl	800e528 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80070b4:	4628      	mov	r0, r5
 80070b6:	f007 f9b3 	bl	800e420 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80070ba:	4621      	mov	r1, r4
      return NULL;
 80070bc:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 80070be:	2007      	movs	r0, #7
 80070c0:	f003 f84a 	bl	800a158 <memp_free>
}
 80070c4:	4620      	mov	r0, r4
 80070c6:	b008      	add	sp, #32
 80070c8:	bd70      	pop	{r4, r5, r6, pc}
 80070ca:	bf00      	nop
 80070cc:	08007de1 	.word	0x08007de1
 80070d0:	0801386c 	.word	0x0801386c
 80070d4:	08013921 	.word	0x08013921
 80070d8:	080137b4 	.word	0x080137b4
 80070dc:	08013942 	.word	0x08013942
 80070e0:	08013957 	.word	0x08013957
 80070e4:	08013978 	.word	0x08013978

080070e8 <netconn_bind>:
{
 80070e8:	b500      	push	{lr}
 80070ea:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80070ec:	b958      	cbnz	r0, 8007106 <netconn_bind+0x1e>
 80070ee:	4b0c      	ldr	r3, [pc, #48]	; (8007120 <netconn_bind+0x38>)
 80070f0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80070f4:	490b      	ldr	r1, [pc, #44]	; (8007124 <netconn_bind+0x3c>)
 80070f6:	480c      	ldr	r0, [pc, #48]	; (8007128 <netconn_bind+0x40>)
 80070f8:	f007 fab6 	bl	800e668 <iprintf>
 80070fc:	f06f 000f 	mvn.w	r0, #15
}
 8007100:	b009      	add	sp, #36	; 0x24
 8007102:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8007106:	4b09      	ldr	r3, [pc, #36]	; (800712c <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8007108:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 800710a:	2900      	cmp	r1, #0
 800710c:	bf08      	it	eq
 800710e:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007110:	4807      	ldr	r0, [pc, #28]	; (8007130 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007112:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007116:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007118:	4669      	mov	r1, sp
 800711a:	f7ff ff3d 	bl	8006f98 <netconn_apimsg>
  return err;
 800711e:	e7ef      	b.n	8007100 <netconn_bind+0x18>
 8007120:	0801386c 	.word	0x0801386c
 8007124:	080139eb 	.word	0x080139eb
 8007128:	080137b4 	.word	0x080137b4
 800712c:	080135b0 	.word	0x080135b0
 8007130:	080080d1 	.word	0x080080d1

08007134 <netconn_listen_with_backlog>:
{
 8007134:	b500      	push	{lr}
 8007136:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007138:	b958      	cbnz	r0, 8007152 <netconn_listen_with_backlog+0x1e>
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <netconn_listen_with_backlog+0x2c>)
 800713c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8007140:	4908      	ldr	r1, [pc, #32]	; (8007164 <netconn_listen_with_backlog+0x30>)
 8007142:	4809      	ldr	r0, [pc, #36]	; (8007168 <netconn_listen_with_backlog+0x34>)
 8007144:	f007 fa90 	bl	800e668 <iprintf>
 8007148:	f06f 000f 	mvn.w	r0, #15
}
 800714c:	b009      	add	sp, #36	; 0x24
 800714e:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8007152:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007154:	4669      	mov	r1, sp
 8007156:	4805      	ldr	r0, [pc, #20]	; (800716c <netconn_listen_with_backlog+0x38>)
 8007158:	f7ff ff1e 	bl	8006f98 <netconn_apimsg>
  return err;
 800715c:	e7f6      	b.n	800714c <netconn_listen_with_backlog+0x18>
 800715e:	bf00      	nop
 8007160:	0801386c 	.word	0x0801386c
 8007164:	08013a63 	.word	0x08013a63
 8007168:	080137b4 	.word	0x080137b4
 800716c:	08008105 	.word	0x08008105

08007170 <netconn_write_vectors_partly>:
{
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	b089      	sub	sp, #36	; 0x24
 8007174:	469e      	mov	lr, r3
 8007176:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007178:	b958      	cbnz	r0, 8007192 <netconn_write_vectors_partly+0x22>
 800717a:	f06f 040f 	mvn.w	r4, #15
 800717e:	4b2c      	ldr	r3, [pc, #176]	; (8007230 <netconn_write_vectors_partly+0xc0>)
 8007180:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007184:	492b      	ldr	r1, [pc, #172]	; (8007234 <netconn_write_vectors_partly+0xc4>)
 8007186:	482c      	ldr	r0, [pc, #176]	; (8007238 <netconn_write_vectors_partly+0xc8>)
 8007188:	f007 fa6e 	bl	800e668 <iprintf>
}
 800718c:	4620      	mov	r0, r4
 800718e:	b009      	add	sp, #36	; 0x24
 8007190:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007192:	7804      	ldrb	r4, [r0, #0]
 8007194:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8007198:	2c10      	cmp	r4, #16
 800719a:	d009      	beq.n	80071b0 <netconn_write_vectors_partly+0x40>
 800719c:	4b24      	ldr	r3, [pc, #144]	; (8007230 <netconn_write_vectors_partly+0xc0>)
 800719e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80071a2:	4926      	ldr	r1, [pc, #152]	; (800723c <netconn_write_vectors_partly+0xcc>)
 80071a4:	4824      	ldr	r0, [pc, #144]	; (8007238 <netconn_write_vectors_partly+0xc8>)
 80071a6:	f007 fa5f 	bl	800e668 <iprintf>
    return ERR_VAL;
 80071aa:	f06f 0405 	mvn.w	r4, #5
 80071ae:	e7ed      	b.n	800718c <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 80071b0:	7e05      	ldrb	r5, [r0, #24]
 80071b2:	f003 0404 	and.w	r4, r3, #4
 80071b6:	f005 0502 	and.w	r5, r5, #2
 80071ba:	4325      	orrs	r5, r4
 80071bc:	d002      	beq.n	80071c4 <netconn_write_vectors_partly+0x54>
 80071be:	2f00      	cmp	r7, #0
 80071c0:	d0f3      	beq.n	80071aa <netconn_write_vectors_partly+0x3a>
 80071c2:	2501      	movs	r5, #1
 80071c4:	2400      	movs	r4, #0
    size += vectors[i].len;
 80071c6:	f101 0c04 	add.w	ip, r1, #4
 80071ca:	4626      	mov	r6, r4
 80071cc:	e004      	b.n	80071d8 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 80071ce:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 80071d2:	199e      	adds	r6, r3, r6
 80071d4:	d2e9      	bcs.n	80071aa <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 80071d6:	3401      	adds	r4, #1
 80071d8:	42a2      	cmp	r2, r4
 80071da:	dcf8      	bgt.n	80071ce <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 80071dc:	2e00      	cmp	r6, #0
 80071de:	d101      	bne.n	80071e4 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 80071e0:	2400      	movs	r4, #0
 80071e2:	e7d3      	b.n	800718c <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 80071e4:	da03      	bge.n	80071ee <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	d0df      	beq.n	80071aa <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 80071ea:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80071ee:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80071f2:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 80071f4:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80071f6:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80071f8:	4669      	mov	r1, sp
 80071fa:	4811      	ldr	r0, [pc, #68]	; (8007240 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80071fc:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80071fe:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007202:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007206:	f7ff fec7 	bl	8006f98 <netconn_apimsg>
  if (err == ERR_OK) {
 800720a:	4604      	mov	r4, r0
 800720c:	2800      	cmp	r0, #0
 800720e:	d1bd      	bne.n	800718c <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8007210:	b10f      	cbz	r7, 8007216 <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007212:	9b06      	ldr	r3, [sp, #24]
 8007214:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 8007216:	2d00      	cmp	r5, #0
 8007218:	d1e2      	bne.n	80071e0 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	42b3      	cmp	r3, r6
 800721e:	d0df      	beq.n	80071e0 <netconn_write_vectors_partly+0x70>
 8007220:	4b03      	ldr	r3, [pc, #12]	; (8007230 <netconn_write_vectors_partly+0xc0>)
 8007222:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007226:	4907      	ldr	r1, [pc, #28]	; (8007244 <netconn_write_vectors_partly+0xd4>)
 8007228:	4803      	ldr	r0, [pc, #12]	; (8007238 <netconn_write_vectors_partly+0xc8>)
 800722a:	f007 fa1d 	bl	800e668 <iprintf>
 800722e:	e7ad      	b.n	800718c <netconn_write_vectors_partly+0x1c>
 8007230:	0801386c 	.word	0x0801386c
 8007234:	08013a9b 	.word	0x08013a9b
 8007238:	080137b4 	.word	0x080137b4
 800723c:	08013ab7 	.word	0x08013ab7
 8007240:	080081f5 	.word	0x080081f5
 8007244:	08013ad9 	.word	0x08013ad9

08007248 <netconn_write_partly>:
{
 8007248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 800724a:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800724e:	9a06      	ldr	r2, [sp, #24]
 8007250:	a902      	add	r1, sp, #8
 8007252:	9200      	str	r2, [sp, #0]
 8007254:	2201      	movs	r2, #1
 8007256:	f7ff ff8b 	bl	8007170 <netconn_write_vectors_partly>
}
 800725a:	b005      	add	sp, #20
 800725c:	f85d fb04 	ldr.w	pc, [sp], #4

08007260 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8007260:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8007262:	4604      	mov	r4, r0
 8007264:	b148      	cbz	r0, 800727a <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 8007266:	f007 f99d 	bl	800e5a4 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 800726a:	2300      	movs	r3, #0
  err = conn->pending_err;
 800726c:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8007270:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 8007272:	f007 f9a3 	bl	800e5bc <sys_arch_unprotect>
  return err;
}
 8007276:	4628      	mov	r0, r5
 8007278:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800727a:	4605      	mov	r5, r0
 800727c:	e7fb      	b.n	8007276 <netconn_err+0x16>
	...

08007280 <netconn_accept>:
{
 8007280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007282:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007284:	460e      	mov	r6, r1
 8007286:	b959      	cbnz	r1, 80072a0 <netconn_accept+0x20>
 8007288:	4b25      	ldr	r3, [pc, #148]	; (8007320 <netconn_accept+0xa0>)
 800728a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800728e:	4925      	ldr	r1, [pc, #148]	; (8007324 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007290:	f06f 040f 	mvn.w	r4, #15
 8007294:	4824      	ldr	r0, [pc, #144]	; (8007328 <netconn_accept+0xa8>)
 8007296:	f007 f9e7 	bl	800e668 <iprintf>
}
 800729a:	4620      	mov	r0, r4
 800729c:	b003      	add	sp, #12
 800729e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 80072a0:	2300      	movs	r3, #0
 80072a2:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80072a4:	b920      	cbnz	r0, 80072b0 <netconn_accept+0x30>
 80072a6:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <netconn_accept+0xa0>)
 80072a8:	f240 12e3 	movw	r2, #483	; 0x1e3
 80072ac:	491f      	ldr	r1, [pc, #124]	; (800732c <netconn_accept+0xac>)
 80072ae:	e7ef      	b.n	8007290 <netconn_accept+0x10>
  err = netconn_err(conn);
 80072b0:	f7ff ffd6 	bl	8007260 <netconn_err>
 80072b4:	4604      	mov	r4, r0
 80072b6:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d1ed      	bne.n	800729a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80072be:	f105 0714 	add.w	r7, r5, #20
 80072c2:	4638      	mov	r0, r7
 80072c4:	f007 f8f3 	bl	800e4ae <sys_mbox_valid>
 80072c8:	b910      	cbnz	r0, 80072d0 <netconn_accept+0x50>
    return ERR_CLSD;
 80072ca:	f06f 040e 	mvn.w	r4, #14
 80072ce:	e7e4      	b.n	800729a <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80072d0:	7e2b      	ldrb	r3, [r5, #24]
 80072d2:	07da      	lsls	r2, r3, #31
 80072d4:	d4f9      	bmi.n	80072ca <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 80072d6:	079b      	lsls	r3, r3, #30
 80072d8:	d508      	bpl.n	80072ec <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80072da:	a901      	add	r1, sp, #4
 80072dc:	4638      	mov	r0, r7
 80072de:	f007 f8d5 	bl	800e48c <sys_arch_mbox_tryfetch>
 80072e2:	3001      	adds	r0, #1
 80072e4:	d107      	bne.n	80072f6 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 80072e6:	f06f 0406 	mvn.w	r4, #6
 80072ea:	e7d6      	b.n	800729a <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80072ec:	4622      	mov	r2, r4
 80072ee:	a901      	add	r1, sp, #4
 80072f0:	4638      	mov	r0, r7
 80072f2:	f007 f8a9 	bl	800e448 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80072f6:	6a2b      	ldr	r3, [r5, #32]
 80072f8:	b11b      	cbz	r3, 8007302 <netconn_accept+0x82>
 80072fa:	2200      	movs	r2, #0
 80072fc:	2101      	movs	r1, #1
 80072fe:	4628      	mov	r0, r5
 8007300:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8007302:	f10d 0103 	add.w	r1, sp, #3
 8007306:	9801      	ldr	r0, [sp, #4]
 8007308:	f000 fd42 	bl	8007d90 <lwip_netconn_is_err_msg>
 800730c:	b110      	cbz	r0, 8007314 <netconn_accept+0x94>
    return err;
 800730e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8007312:	e7c2      	b.n	800729a <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d0d7      	beq.n	80072ca <netconn_accept+0x4a>
  *new_conn = newconn;
 800731a:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 800731c:	e7bd      	b.n	800729a <netconn_accept+0x1a>
 800731e:	bf00      	nop
 8007320:	0801386c 	.word	0x0801386c
 8007324:	08013afc 	.word	0x08013afc
 8007328:	080137b4 	.word	0x080137b4
 800732c:	08013b1c 	.word	0x08013b1c

08007330 <netconn_recv_data>:
  void *buf = NULL;
 8007330:	2300      	movs	r3, #0
{
 8007332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007338:	460d      	mov	r5, r1
  void *buf = NULL;
 800733a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800733c:	b951      	cbnz	r1, 8007354 <netconn_recv_data+0x24>
 800733e:	4b32      	ldr	r3, [pc, #200]	; (8007408 <netconn_recv_data+0xd8>)
 8007340:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007344:	4931      	ldr	r1, [pc, #196]	; (800740c <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007346:	4832      	ldr	r0, [pc, #200]	; (8007410 <netconn_recv_data+0xe0>)
 8007348:	f007 f98e 	bl	800e668 <iprintf>
 800734c:	f06f 000f 	mvn.w	r0, #15
}
 8007350:	b003      	add	sp, #12
 8007352:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8007354:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007356:	b920      	cbnz	r0, 8007362 <netconn_recv_data+0x32>
 8007358:	4b2b      	ldr	r3, [pc, #172]	; (8007408 <netconn_recv_data+0xd8>)
 800735a:	f240 224a 	movw	r2, #586	; 0x24a
 800735e:	492d      	ldr	r1, [pc, #180]	; (8007414 <netconn_recv_data+0xe4>)
 8007360:	e7f1      	b.n	8007346 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007362:	f100 0710 	add.w	r7, r0, #16
 8007366:	4638      	mov	r0, r7
 8007368:	f007 f8a1 	bl	800e4ae <sys_mbox_valid>
 800736c:	b938      	cbnz	r0, 800737e <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 800736e:	4620      	mov	r0, r4
 8007370:	f7ff ff76 	bl	8007260 <netconn_err>
    if (err != ERR_OK) {
 8007374:	2800      	cmp	r0, #0
 8007376:	d1eb      	bne.n	8007350 <netconn_recv_data+0x20>
    return ERR_CONN;
 8007378:	f06f 000a 	mvn.w	r0, #10
 800737c:	e7e8      	b.n	8007350 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800737e:	7e23      	ldrb	r3, [r4, #24]
 8007380:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007384:	a901      	add	r1, sp, #4
 8007386:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007388:	f003 0303 	and.w	r3, r3, #3
 800738c:	4333      	orrs	r3, r6
 800738e:	d102      	bne.n	8007396 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007390:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8007394:	b172      	cbz	r2, 80073b4 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007396:	f007 f879 	bl	800e48c <sys_arch_mbox_tryfetch>
 800739a:	3001      	adds	r0, #1
 800739c:	d10c      	bne.n	80073b8 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 800739e:	4620      	mov	r0, r4
 80073a0:	f7ff ff5e 	bl	8007260 <netconn_err>
      if (err != ERR_OK) {
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d1d3      	bne.n	8007350 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80073a8:	7e23      	ldrb	r3, [r4, #24]
 80073aa:	07db      	lsls	r3, r3, #31
 80073ac:	d4e4      	bmi.n	8007378 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 80073ae:	f06f 0006 	mvn.w	r0, #6
 80073b2:	e7cd      	b.n	8007350 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80073b4:	f007 f848 	bl	800e448 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80073b8:	7823      	ldrb	r3, [r4, #0]
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80073ba:	9801      	ldr	r0, [sp, #4]
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80073bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d116      	bne.n	80073f2 <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80073c4:	f10d 0103 	add.w	r1, sp, #3
 80073c8:	f000 fce2 	bl	8007d90 <lwip_netconn_is_err_msg>
 80073cc:	b130      	cbz	r0, 80073dc <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 80073ce:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 80073d2:	f110 0f0f 	cmn.w	r0, #15
 80073d6:	bf08      	it	eq
 80073d8:	2000      	moveq	r0, #0
 80073da:	e7b9      	b.n	8007350 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 80073dc:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 80073de:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80073e0:	6a23      	ldr	r3, [r4, #32]
 80073e2:	b113      	cbz	r3, 80073ea <netconn_recv_data+0xba>
 80073e4:	2101      	movs	r1, #1
 80073e6:	4620      	mov	r0, r4
 80073e8:	4798      	blx	r3
  *new_buf = buf;
 80073ea:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 80073ec:	2000      	movs	r0, #0
  *new_buf = buf;
 80073ee:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 80073f0:	e7ae      	b.n	8007350 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80073f2:	b930      	cbnz	r0, 8007402 <netconn_recv_data+0xd2>
 80073f4:	4b04      	ldr	r3, [pc, #16]	; (8007408 <netconn_recv_data+0xd8>)
 80073f6:	f240 2291 	movw	r2, #657	; 0x291
 80073fa:	4907      	ldr	r1, [pc, #28]	; (8007418 <netconn_recv_data+0xe8>)
 80073fc:	4804      	ldr	r0, [pc, #16]	; (8007410 <netconn_recv_data+0xe0>)
 80073fe:	f007 f933 	bl	800e668 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007402:	9b01      	ldr	r3, [sp, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	e7ea      	b.n	80073de <netconn_recv_data+0xae>
 8007408:	0801386c 	.word	0x0801386c
 800740c:	08013b39 	.word	0x08013b39
 8007410:	080137b4 	.word	0x080137b4
 8007414:	08013b57 	.word	0x08013b57
 8007418:	08013b72 	.word	0x08013b72

0800741c <netconn_recv_data_tcp>:
{
 800741c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800741e:	4604      	mov	r4, r0
 8007420:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007422:	3010      	adds	r0, #16
{
 8007424:	460f      	mov	r7, r1
 8007426:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007428:	f007 f841 	bl	800e4ae <sys_mbox_valid>
 800742c:	2800      	cmp	r0, #0
 800742e:	d03c      	beq.n	80074aa <netconn_recv_data_tcp+0x8e>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007430:	f994 2018 	ldrsb.w	r2, [r4, #24]
 8007434:	7e23      	ldrb	r3, [r4, #24]
 8007436:	2a00      	cmp	r2, #0
 8007438:	da12      	bge.n	8007460 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800743a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800743e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007440:	6a23      	ldr	r3, [r4, #32]
 8007442:	b11b      	cbz	r3, 800744c <netconn_recv_data_tcp+0x30>
 8007444:	2200      	movs	r2, #0
 8007446:	2101      	movs	r1, #1
 8007448:	4620      	mov	r0, r4
 800744a:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	bb2b      	cbnz	r3, 800749c <netconn_recv_data_tcp+0x80>
        err = netconn_err(conn);
 8007450:	4620      	mov	r0, r4
 8007452:	f7ff ff05 	bl	8007260 <netconn_err>
        return ERR_RST;
 8007456:	1e05      	subs	r5, r0, #0
 8007458:	bf08      	it	eq
 800745a:	f06f 050d 	mvneq.w	r5, #13
 800745e:	e018      	b.n	8007492 <netconn_recv_data_tcp+0x76>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007460:	4632      	mov	r2, r6
 8007462:	4639      	mov	r1, r7
 8007464:	4620      	mov	r0, r4
 8007466:	f7ff ff63 	bl	8007330 <netconn_recv_data>
  if (err != ERR_OK) {
 800746a:	4605      	mov	r5, r0
 800746c:	b988      	cbnz	r0, 8007492 <netconn_recv_data_tcp+0x76>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800746e:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8007470:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007472:	d405      	bmi.n	8007480 <netconn_recv_data_tcp+0x64>
    u16_t len = buf ? buf->tot_len : 1;
 8007474:	b187      	cbz	r7, 8007498 <netconn_recv_data_tcp+0x7c>
 8007476:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007478:	466a      	mov	r2, sp
 800747a:	4620      	mov	r0, r4
 800747c:	f7ff fd96 	bl	8006fac <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 8007480:	b93f      	cbnz	r7, 8007492 <netconn_recv_data_tcp+0x76>
    if (apiflags & NETCONN_NOFIN) {
 8007482:	06f3      	lsls	r3, r6, #27
 8007484:	d5dc      	bpl.n	8007440 <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007486:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8007488:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800748c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007490:	7623      	strb	r3, [r4, #24]
}
 8007492:	4628      	mov	r0, r5
 8007494:	b009      	add	sp, #36	; 0x24
 8007496:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8007498:	2101      	movs	r1, #1
 800749a:	e7ed      	b.n	8007478 <netconn_recv_data_tcp+0x5c>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800749c:	2101      	movs	r1, #1
 800749e:	4620      	mov	r0, r4
      return ERR_CLSD;
 80074a0:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80074a4:	f7ff fda4 	bl	8006ff0 <netconn_close_shutdown>
      return ERR_CLSD;
 80074a8:	e7f3      	b.n	8007492 <netconn_recv_data_tcp+0x76>
    return ERR_CONN;
 80074aa:	f06f 050a 	mvn.w	r5, #10
 80074ae:	e7f0      	b.n	8007492 <netconn_recv_data_tcp+0x76>

080074b0 <netconn_recv>:
{
 80074b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074b2:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80074b4:	460e      	mov	r6, r1
 80074b6:	b959      	cbnz	r1, 80074d0 <netconn_recv+0x20>
 80074b8:	4b22      	ldr	r3, [pc, #136]	; (8007544 <netconn_recv+0x94>)
 80074ba:	f240 3263 	movw	r2, #867	; 0x363
 80074be:	4922      	ldr	r1, [pc, #136]	; (8007548 <netconn_recv+0x98>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80074c0:	f06f 050f 	mvn.w	r5, #15
 80074c4:	4821      	ldr	r0, [pc, #132]	; (800754c <netconn_recv+0x9c>)
 80074c6:	f007 f8cf 	bl	800e668 <iprintf>
}
 80074ca:	4628      	mov	r0, r5
 80074cc:	b003      	add	sp, #12
 80074ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80074d0:	2700      	movs	r7, #0
 80074d2:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80074d4:	b920      	cbnz	r0, 80074e0 <netconn_recv+0x30>
 80074d6:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <netconn_recv+0x94>)
 80074d8:	f240 3265 	movw	r2, #869	; 0x365
 80074dc:	491c      	ldr	r1, [pc, #112]	; (8007550 <netconn_recv+0xa0>)
 80074de:	e7ef      	b.n	80074c0 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80074e0:	7803      	ldrb	r3, [r0, #0]
 80074e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d125      	bne.n	8007536 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80074ea:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 80074ec:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80074ee:	f002 fe03 	bl	800a0f8 <memp_malloc>
    if (buf == NULL) {
 80074f2:	4604      	mov	r4, r0
 80074f4:	b1e0      	cbz	r0, 8007530 <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 80074f6:	4628      	mov	r0, r5
 80074f8:	463a      	mov	r2, r7
 80074fa:	a901      	add	r1, sp, #4
 80074fc:	f7ff ff8e 	bl	800741c <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8007500:	4605      	mov	r5, r0
 8007502:	b120      	cbz	r0, 800750e <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8007504:	4621      	mov	r1, r4
 8007506:	2006      	movs	r0, #6
 8007508:	f002 fe26 	bl	800a158 <memp_free>
      return err;
 800750c:	e7dd      	b.n	80074ca <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 800750e:	9b01      	ldr	r3, [sp, #4]
 8007510:	b933      	cbnz	r3, 8007520 <netconn_recv+0x70>
 8007512:	4b0c      	ldr	r3, [pc, #48]	; (8007544 <netconn_recv+0x94>)
 8007514:	f240 3279 	movw	r2, #889	; 0x379
 8007518:	490e      	ldr	r1, [pc, #56]	; (8007554 <netconn_recv+0xa4>)
 800751a:	480c      	ldr	r0, [pc, #48]	; (800754c <netconn_recv+0x9c>)
 800751c:	f007 f8a4 	bl	800e668 <iprintf>
    buf->p = p;
 8007520:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 8007522:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 800752a:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 800752c:	6034      	str	r4, [r6, #0]
    return ERR_OK;
 800752e:	e7cc      	b.n	80074ca <netconn_recv+0x1a>
      return ERR_MEM;
 8007530:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007534:	e7c9      	b.n	80074ca <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007536:	463a      	mov	r2, r7
}
 8007538:	b003      	add	sp, #12
 800753a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800753e:	f7ff bef7 	b.w	8007330 <netconn_recv_data>
 8007542:	bf00      	nop
 8007544:	0801386c 	.word	0x0801386c
 8007548:	08013b39 	.word	0x08013b39
 800754c:	080137b4 	.word	0x080137b4
 8007550:	08013b57 	.word	0x08013b57
 8007554:	08014f64 	.word	0x08014f64

08007558 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8007558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800755c:	4606      	mov	r6, r0
 800755e:	4617      	mov	r7, r2
 8007560:	461d      	mov	r5, r3
 8007562:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8007566:	460c      	mov	r4, r1
 8007568:	b929      	cbnz	r1, 8007576 <recv_udp+0x1e>
 800756a:	4b25      	ldr	r3, [pc, #148]	; (8007600 <recv_udp+0xa8>)
 800756c:	22e5      	movs	r2, #229	; 0xe5
 800756e:	4925      	ldr	r1, [pc, #148]	; (8007604 <recv_udp+0xac>)
 8007570:	4825      	ldr	r0, [pc, #148]	; (8007608 <recv_udp+0xb0>)
 8007572:	f007 f879 	bl	800e668 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007576:	b99e      	cbnz	r6, 80075a0 <recv_udp+0x48>
 8007578:	4b21      	ldr	r3, [pc, #132]	; (8007600 <recv_udp+0xa8>)
 800757a:	22e6      	movs	r2, #230	; 0xe6
 800757c:	4923      	ldr	r1, [pc, #140]	; (800760c <recv_udp+0xb4>)
 800757e:	4822      	ldr	r0, [pc, #136]	; (8007608 <recv_udp+0xb0>)
 8007580:	f007 f872 	bl	800e668 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8007584:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8007586:	b003      	add	sp, #12
 8007588:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 800758c:	f003 b840 	b.w	800a610 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007590:	6a33      	ldr	r3, [r6, #32]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d031      	beq.n	80075fa <recv_udp+0xa2>
 8007596:	4630      	mov	r0, r6
}
 8007598:	b003      	add	sp, #12
 800759a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800759e:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80075a0:	6873      	ldr	r3, [r6, #4]
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	d005      	beq.n	80075b2 <recv_udp+0x5a>
 80075a6:	4b16      	ldr	r3, [pc, #88]	; (8007600 <recv_udp+0xa8>)
 80075a8:	22ee      	movs	r2, #238	; 0xee
 80075aa:	4919      	ldr	r1, [pc, #100]	; (8007610 <recv_udp+0xb8>)
 80075ac:	4816      	ldr	r0, [pc, #88]	; (8007608 <recv_udp+0xb0>)
 80075ae:	f007 f85b 	bl	800e668 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80075b2:	f106 0910 	add.w	r9, r6, #16
 80075b6:	4648      	mov	r0, r9
 80075b8:	f006 ff79 	bl	800e4ae <sys_mbox_valid>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d0e1      	beq.n	8007584 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80075c0:	2006      	movs	r0, #6
 80075c2:	f002 fd99 	bl	800a0f8 <memp_malloc>
  if (buf == NULL) {
 80075c6:	4604      	mov	r4, r0
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0db      	beq.n	8007584 <recv_udp+0x2c>
    buf->ptr = p;
 80075cc:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 80075d0:	b105      	cbz	r5, 80075d4 <recv_udp+0x7c>
 80075d2:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 80075d4:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80075d6:	4621      	mov	r1, r4
 80075d8:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 80075da:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 80075dc:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 80075e0:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80075e2:	f006 ff27 	bl	800e434 <sys_mbox_trypost>
 80075e6:	9a01      	ldr	r2, [sp, #4]
 80075e8:	4601      	mov	r1, r0
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0d0      	beq.n	8007590 <recv_udp+0x38>
    netbuf_delete(buf);
 80075ee:	4620      	mov	r0, r4
}
 80075f0:	b003      	add	sp, #12
 80075f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 80075f6:	f000 bec1 	b.w	800837c <netbuf_delete>
}
 80075fa:	b003      	add	sp, #12
 80075fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007600:	08013ba8 	.word	0x08013ba8
 8007604:	08013c1d 	.word	0x08013c1d
 8007608:	080137b4 	.word	0x080137b4
 800760c:	08013c3f 	.word	0x08013c3f
 8007610:	08013c5e 	.word	0x08013c5e

08007614 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8007614:	b507      	push	{r0, r1, r2, lr}
 8007616:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8007618:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 800761a:	9001      	str	r0, [sp, #4]
 800761c:	f003 fc38 	bl	800ae90 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8007620:	9801      	ldr	r0, [sp, #4]
 8007622:	4909      	ldr	r1, [pc, #36]	; (8007648 <setup_tcp+0x34>)
 8007624:	f003 fc38 	bl	800ae98 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8007628:	9801      	ldr	r0, [sp, #4]
 800762a:	4908      	ldr	r1, [pc, #32]	; (800764c <setup_tcp+0x38>)
 800762c:	f003 fc4c 	bl	800aec8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007630:	9801      	ldr	r0, [sp, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	4906      	ldr	r1, [pc, #24]	; (8007650 <setup_tcp+0x3c>)
 8007636:	f003 fc7b 	bl	800af30 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800763a:	4906      	ldr	r1, [pc, #24]	; (8007654 <setup_tcp+0x40>)
 800763c:	9801      	ldr	r0, [sp, #4]
}
 800763e:	b003      	add	sp, #12
 8007640:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 8007644:	f003 bc56 	b.w	800aef4 <tcp_err>
 8007648:	08007b81 	.word	0x08007b81
 800764c:	08007b11 	.word	0x08007b11
 8007650:	08007a95 	.word	0x08007a95
 8007654:	08007c51 	.word	0x08007c51

08007658 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800765e:	4604      	mov	r4, r0
 8007660:	b930      	cbnz	r0, 8007670 <lwip_netconn_do_writemore+0x18>
 8007662:	4b89      	ldr	r3, [pc, #548]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 8007664:	f240 6273 	movw	r2, #1651	; 0x673
 8007668:	4988      	ldr	r1, [pc, #544]	; (800788c <lwip_netconn_do_writemore+0x234>)
 800766a:	4889      	ldr	r0, [pc, #548]	; (8007890 <lwip_netconn_do_writemore+0x238>)
 800766c:	f006 fffc 	bl	800e668 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007670:	7863      	ldrb	r3, [r4, #1]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d006      	beq.n	8007684 <lwip_netconn_do_writemore+0x2c>
 8007676:	4b84      	ldr	r3, [pc, #528]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 8007678:	f240 6274 	movw	r2, #1652	; 0x674
 800767c:	4985      	ldr	r1, [pc, #532]	; (8007894 <lwip_netconn_do_writemore+0x23c>)
 800767e:	4884      	ldr	r0, [pc, #528]	; (8007890 <lwip_netconn_do_writemore+0x238>)
 8007680:	f006 fff2 	bl	800e668 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007684:	69e3      	ldr	r3, [r4, #28]
 8007686:	b933      	cbnz	r3, 8007696 <lwip_netconn_do_writemore+0x3e>
 8007688:	4b7f      	ldr	r3, [pc, #508]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 800768a:	f240 6275 	movw	r2, #1653	; 0x675
 800768e:	4982      	ldr	r1, [pc, #520]	; (8007898 <lwip_netconn_do_writemore+0x240>)
 8007690:	487f      	ldr	r0, [pc, #508]	; (8007890 <lwip_netconn_do_writemore+0x238>)
 8007692:	f006 ffe9 	bl	800e668 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007696:	6863      	ldr	r3, [r4, #4]
 8007698:	b933      	cbnz	r3, 80076a8 <lwip_netconn_do_writemore+0x50>
 800769a:	4b7b      	ldr	r3, [pc, #492]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 800769c:	f240 6276 	movw	r2, #1654	; 0x676
 80076a0:	497e      	ldr	r1, [pc, #504]	; (800789c <lwip_netconn_do_writemore+0x244>)
 80076a2:	487b      	ldr	r0, [pc, #492]	; (8007890 <lwip_netconn_do_writemore+0x238>)
 80076a4:	f006 ffe0 	bl	800e668 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80076a8:	69e3      	ldr	r3, [r4, #28]
 80076aa:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d306      	bcc.n	80076c0 <lwip_netconn_do_writemore+0x68>
 80076b2:	4b75      	ldr	r3, [pc, #468]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 80076b4:	f240 6277 	movw	r2, #1655	; 0x677
 80076b8:	4979      	ldr	r1, [pc, #484]	; (80078a0 <lwip_netconn_do_writemore+0x248>)
 80076ba:	4875      	ldr	r0, [pc, #468]	; (8007890 <lwip_netconn_do_writemore+0x238>)
 80076bc:	f006 ffd4 	bl	800e668 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80076c0:	69e3      	ldr	r3, [r4, #28]
 80076c2:	899b      	ldrh	r3, [r3, #12]
 80076c4:	b933      	cbnz	r3, 80076d4 <lwip_netconn_do_writemore+0x7c>
 80076c6:	4b70      	ldr	r3, [pc, #448]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 80076c8:	f240 6279 	movw	r2, #1657	; 0x679
 80076cc:	4975      	ldr	r1, [pc, #468]	; (80078a4 <lwip_netconn_do_writemore+0x24c>)
 80076ce:	4870      	ldr	r0, [pc, #448]	; (8007890 <lwip_netconn_do_writemore+0x238>)
 80076d0:	f006 ffca 	bl	800e668 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80076d4:	69e3      	ldr	r3, [r4, #28]
 80076d6:	7e26      	ldrb	r6, [r4, #24]
 80076d8:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80076dc:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80076e0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8007890 <lwip_netconn_do_writemore+0x238>
 80076e4:	f008 0304 	and.w	r3, r8, #4
 80076e8:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80076ea:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 80076ec:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80076ee:	688a      	ldr	r2, [r1, #8]
 80076f0:	690b      	ldr	r3, [r1, #16]
 80076f2:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 80076f4:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80076f8:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80076fc:	6850      	ldr	r0, [r2, #4]
 80076fe:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8007702:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8007706:	bf2a      	itet	cs
 8007708:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 800770c:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007710:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 8007714:	42aa      	cmp	r2, r5
 8007716:	d979      	bls.n	800780c <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8007718:	2e00      	cmp	r6, #0
 800771a:	d038      	beq.n	800778e <lwip_netconn_do_writemore+0x136>
          if (!len) {
 800771c:	2d00      	cmp	r5, #0
 800771e:	d138      	bne.n	8007792 <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007720:	698b      	ldr	r3, [r1, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf0c      	ite	eq
 8007726:	f06f 0a06 	mvneq.w	sl, #6
 800772a:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800772e:	69e3      	ldr	r3, [r4, #28]
 8007730:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8007734:	429a      	cmp	r2, r3
 8007736:	d276      	bcs.n	8007826 <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8007738:	6a23      	ldr	r3, [r4, #32]
 800773a:	b11b      	cbz	r3, 8007744 <lwip_netconn_do_writemore+0xec>
 800773c:	2200      	movs	r2, #0
 800773e:	2103      	movs	r1, #3
 8007740:	4620      	mov	r0, r4
 8007742:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007744:	7e23      	ldrb	r3, [r4, #24]
 8007746:	f043 0310 	orr.w	r3, r3, #16
 800774a:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 800774c:	f1ba 0f00 	cmp.w	sl, #0
 8007750:	d17e      	bne.n	8007850 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8007752:	69e3      	ldr	r3, [r4, #28]
 8007754:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8007758:	429a      	cmp	r2, r3
 800775a:	d077      	beq.n	800784c <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800775c:	3e00      	subs	r6, #0
 800775e:	bf18      	it	ne
 8007760:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 8007762:	6860      	ldr	r0, [r4, #4]
 8007764:	f006 f8f2 	bl	800d94c <tcp_output>
      if (out_err == ERR_RTE) {
 8007768:	3004      	adds	r0, #4
 800776a:	f040 8084 	bne.w	8007876 <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800776e:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007772:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8007774:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007776:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8007778:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 800777c:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 800777e:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007780:	2f00      	cmp	r7, #0
 8007782:	d07e      	beq.n	8007882 <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007784:	300c      	adds	r0, #12
 8007786:	f006 fecc 	bl	800e522 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 800778a:	4628      	mov	r0, r5
 800778c:	e06b      	b.n	8007866 <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 800778e:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007792:	442b      	add	r3, r5
 8007794:	4298      	cmp	r0, r3
 8007796:	d206      	bcs.n	80077a6 <lwip_netconn_do_writemore+0x14e>
 8007798:	4b3b      	ldr	r3, [pc, #236]	; (8007888 <lwip_netconn_do_writemore+0x230>)
 800779a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800779e:	4942      	ldr	r1, [pc, #264]	; (80078a8 <lwip_netconn_do_writemore+0x250>)
 80077a0:	4658      	mov	r0, fp
 80077a2:	f006 ff61 	bl	800e668 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 80077a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80077aa:	429d      	cmp	r5, r3
 80077ac:	d102      	bne.n	80077b4 <lwip_netconn_do_writemore+0x15c>
 80077ae:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 80077b2:	d207      	bcs.n	80077c4 <lwip_netconn_do_writemore+0x16c>
 80077b4:	fa1f f989 	uxth.w	r9, r9
 80077b8:	45a9      	cmp	r9, r5
 80077ba:	d129      	bne.n	8007810 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80077bc:	69e3      	ldr	r3, [r4, #28]
 80077be:	899b      	ldrh	r3, [r3, #12]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d925      	bls.n	8007810 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 80077c4:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 80077c8:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80077cc:	4651      	mov	r1, sl
 80077ce:	4643      	mov	r3, r8
 80077d0:	462a      	mov	r2, r5
 80077d2:	6860      	ldr	r0, [r4, #4]
 80077d4:	f005 fb5c 	bl	800ce90 <tcp_write>
      if (err == ERR_OK) {
 80077d8:	4682      	mov	sl, r0
 80077da:	b9e0      	cbnz	r0, 8007816 <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 80077dc:	69e3      	ldr	r3, [r4, #28]
 80077de:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80077e0:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 80077e2:	442a      	add	r2, r5
 80077e4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80077ea:	684a      	ldr	r2, [r1, #4]
 80077ec:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 80077ee:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80077f0:	d107      	bne.n	8007802 <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 80077f2:	899a      	ldrh	r2, [r3, #12]
 80077f4:	3a01      	subs	r2, #1
 80077f6:	b292      	uxth	r2, r2
 80077f8:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80077fa:	b112      	cbz	r2, 8007802 <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 80077fc:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 80077fe:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8007800:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8007802:	f1b9 0f00 	cmp.w	r9, #0
 8007806:	f47f af70 	bne.w	80076ea <lwip_netconn_do_writemore+0x92>
 800780a:	e00a      	b.n	8007822 <lwip_netconn_do_writemore+0x1ca>
 800780c:	4615      	mov	r5, r2
 800780e:	e7c0      	b.n	8007792 <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 8007810:	f04f 0900 	mov.w	r9, #0
 8007814:	e7da      	b.n	80077cc <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b01      	cmp	r3, #1
 800781c:	d8a9      	bhi.n	8007772 <lwip_netconn_do_writemore+0x11a>
err_mem:
 800781e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8007822:	2e00      	cmp	r6, #0
 8007824:	d183      	bne.n	800772e <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	f640 3269 	movw	r2, #2921	; 0xb69
 800782c:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8007830:	4291      	cmp	r1, r2
 8007832:	d903      	bls.n	800783c <lwip_netconn_do_writemore+0x1e4>
 8007834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007838:	2b07      	cmp	r3, #7
 800783a:	d987      	bls.n	800774c <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800783c:	6a23      	ldr	r3, [r4, #32]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d084      	beq.n	800774c <lwip_netconn_do_writemore+0xf4>
 8007842:	2200      	movs	r2, #0
 8007844:	2103      	movs	r1, #3
 8007846:	4620      	mov	r0, r4
 8007848:	4798      	blx	r3
 800784a:	e77f      	b.n	800774c <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 800784c:	2601      	movs	r6, #1
 800784e:	e788      	b.n	8007762 <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 8007850:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007854:	d18d      	bne.n	8007772 <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007856:	6860      	ldr	r0, [r4, #4]
 8007858:	f006 f878 	bl	800d94c <tcp_output>
      if (out_err == ERR_RTE) {
 800785c:	3004      	adds	r0, #4
 800785e:	d086      	beq.n	800776e <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8007860:	b91e      	cbnz	r6, 800786a <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 8007862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8007866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800786a:	69e3      	ldr	r3, [r4, #28]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	b12b      	cbz	r3, 800787c <lwip_netconn_do_writemore+0x224>
 8007870:	f04f 0a00 	mov.w	sl, #0
 8007874:	e77d      	b.n	8007772 <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 8007876:	2e00      	cmp	r6, #0
 8007878:	d1fa      	bne.n	8007870 <lwip_netconn_do_writemore+0x218>
 800787a:	e7f2      	b.n	8007862 <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800787c:	f06f 0a06 	mvn.w	sl, #6
 8007880:	e777      	b.n	8007772 <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 8007882:	4638      	mov	r0, r7
 8007884:	e7ef      	b.n	8007866 <lwip_netconn_do_writemore+0x20e>
 8007886:	bf00      	nop
 8007888:	08013ba8 	.word	0x08013ba8
 800788c:	08013cf5 	.word	0x08013cf5
 8007890:	080137b4 	.word	0x080137b4
 8007894:	08013d02 	.word	0x08013d02
 8007898:	08013d1f 	.word	0x08013d1f
 800789c:	08013d39 	.word	0x08013d39
 80078a0:	08013d4f 	.word	0x08013d4f
 80078a4:	08013d8e 	.word	0x08013d8e
 80078a8:	08013db6 	.word	0x08013db6

080078ac <lwip_netconn_do_close_internal>:
{
 80078ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b0:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80078b2:	4604      	mov	r4, r0
 80078b4:	b930      	cbnz	r0, 80078c4 <lwip_netconn_do_close_internal+0x18>
 80078b6:	4b6c      	ldr	r3, [pc, #432]	; (8007a68 <lwip_netconn_do_close_internal+0x1bc>)
 80078b8:	f240 32a2 	movw	r2, #930	; 0x3a2
 80078bc:	496b      	ldr	r1, [pc, #428]	; (8007a6c <lwip_netconn_do_close_internal+0x1c0>)
 80078be:	486c      	ldr	r0, [pc, #432]	; (8007a70 <lwip_netconn_do_close_internal+0x1c4>)
 80078c0:	f006 fed2 	bl	800e668 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80078c4:	7823      	ldrb	r3, [r4, #0]
 80078c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078ca:	2b10      	cmp	r3, #16
 80078cc:	d006      	beq.n	80078dc <lwip_netconn_do_close_internal+0x30>
 80078ce:	4b66      	ldr	r3, [pc, #408]	; (8007a68 <lwip_netconn_do_close_internal+0x1bc>)
 80078d0:	f240 32a3 	movw	r2, #931	; 0x3a3
 80078d4:	4967      	ldr	r1, [pc, #412]	; (8007a74 <lwip_netconn_do_close_internal+0x1c8>)
 80078d6:	4866      	ldr	r0, [pc, #408]	; (8007a70 <lwip_netconn_do_close_internal+0x1c4>)
 80078d8:	f006 fec6 	bl	800e668 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80078dc:	7863      	ldrb	r3, [r4, #1]
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d006      	beq.n	80078f0 <lwip_netconn_do_close_internal+0x44>
 80078e2:	4b61      	ldr	r3, [pc, #388]	; (8007a68 <lwip_netconn_do_close_internal+0x1bc>)
 80078e4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80078e8:	4963      	ldr	r1, [pc, #396]	; (8007a78 <lwip_netconn_do_close_internal+0x1cc>)
 80078ea:	4861      	ldr	r0, [pc, #388]	; (8007a70 <lwip_netconn_do_close_internal+0x1c4>)
 80078ec:	f006 febc 	bl	800e668 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	b933      	cbnz	r3, 8007902 <lwip_netconn_do_close_internal+0x56>
 80078f4:	4b5c      	ldr	r3, [pc, #368]	; (8007a68 <lwip_netconn_do_close_internal+0x1bc>)
 80078f6:	f240 32a5 	movw	r2, #933	; 0x3a5
 80078fa:	4960      	ldr	r1, [pc, #384]	; (8007a7c <lwip_netconn_do_close_internal+0x1d0>)
 80078fc:	485c      	ldr	r0, [pc, #368]	; (8007a70 <lwip_netconn_do_close_internal+0x1c4>)
 80078fe:	f006 feb3 	bl	800e668 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007902:	69e3      	ldr	r3, [r4, #28]
 8007904:	b933      	cbnz	r3, 8007914 <lwip_netconn_do_close_internal+0x68>
 8007906:	4b58      	ldr	r3, [pc, #352]	; (8007a68 <lwip_netconn_do_close_internal+0x1bc>)
 8007908:	f240 32a6 	movw	r2, #934	; 0x3a6
 800790c:	495c      	ldr	r1, [pc, #368]	; (8007a80 <lwip_netconn_do_close_internal+0x1d4>)
 800790e:	4858      	ldr	r0, [pc, #352]	; (8007a70 <lwip_netconn_do_close_internal+0x1c4>)
 8007910:	f006 feaa 	bl	800e668 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8007914:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 8007916:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8007918:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 800791a:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 800791c:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8007920:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8007924:	d00f      	beq.n	8007946 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8007926:	f1ba 0f00 	cmp.w	sl, #0
 800792a:	d005      	beq.n	8007938 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 800792c:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 800792e:	1f5a      	subs	r2, r3, #5
 8007930:	2a01      	cmp	r2, #1
 8007932:	d908      	bls.n	8007946 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8007934:	2b08      	cmp	r3, #8
 8007936:	d006      	beq.n	8007946 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007938:	f1b8 0f00 	cmp.w	r8, #0
 800793c:	d016      	beq.n	800796c <lwip_netconn_do_close_internal+0xc0>
 800793e:	8b6f      	ldrh	r7, [r5, #26]
 8007940:	f017 0710 	ands.w	r7, r7, #16
 8007944:	d004      	beq.n	8007950 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8007946:	2701      	movs	r7, #1
 8007948:	2100      	movs	r1, #0
 800794a:	4628      	mov	r0, r5
 800794c:	f003 faa0 	bl	800ae90 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8007950:	7d2b      	ldrb	r3, [r5, #20]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10c      	bne.n	8007970 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8007956:	2100      	movs	r1, #0
 8007958:	4628      	mov	r0, r5
 800795a:	f003 fae3 	bl	800af24 <tcp_accept>
  if (shut_close) {
 800795e:	bb27      	cbnz	r7, 80079aa <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007960:	4642      	mov	r2, r8
 8007962:	4651      	mov	r1, sl
 8007964:	4628      	mov	r0, r5
 8007966:	f003 ff01 	bl	800b76c <tcp_shutdown>
 800796a:	e021      	b.n	80079b0 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 800796c:	4647      	mov	r7, r8
 800796e:	e7ef      	b.n	8007950 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8007970:	f1ba 0f00 	cmp.w	sl, #0
 8007974:	d007      	beq.n	8007986 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8007976:	2100      	movs	r1, #0
 8007978:	4628      	mov	r0, r5
 800797a:	f003 fa8d 	bl	800ae98 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800797e:	2100      	movs	r1, #0
 8007980:	4628      	mov	r0, r5
 8007982:	f003 facf 	bl	800af24 <tcp_accept>
    if (shut_tx) {
 8007986:	f1b8 0f00 	cmp.w	r8, #0
 800798a:	d003      	beq.n	8007994 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 800798c:	2100      	movs	r1, #0
 800798e:	4628      	mov	r0, r5
 8007990:	f003 fa9a 	bl	800aec8 <tcp_sent>
    if (shut_close) {
 8007994:	2f00      	cmp	r7, #0
 8007996:	d0e3      	beq.n	8007960 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8007998:	2200      	movs	r2, #0
 800799a:	4628      	mov	r0, r5
 800799c:	4611      	mov	r1, r2
 800799e:	f003 fac7 	bl	800af30 <tcp_poll>
      tcp_err(tpcb, NULL);
 80079a2:	2100      	movs	r1, #0
 80079a4:	4628      	mov	r0, r5
 80079a6:	f003 faa5 	bl	800aef4 <tcp_err>
      err = tcp_close(tpcb);
 80079aa:	4628      	mov	r0, r5
 80079ac:	f003 fe10 	bl	800b5d0 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80079b0:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 80079b2:	b160      	cbz	r0, 80079ce <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d10a      	bne.n	80079ce <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80079b8:	69e3      	ldr	r3, [r4, #28]
 80079ba:	f893 b009 	ldrb.w	fp, [r3, #9]
 80079be:	f1bb 0f00 	cmp.w	fp, #0
 80079c2:	d130      	bne.n	8007a26 <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 80079c4:	b11f      	cbz	r7, 80079ce <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 80079c6:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 80079c8:	4628      	mov	r0, r5
 80079ca:	f003 ff85 	bl	800b8d8 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80079ce:	69e3      	ldr	r3, [r4, #28]
 80079d0:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80079d2:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80079d4:	2300      	movs	r3, #0
 80079d6:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 80079d8:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80079da:	b9ce      	cbnz	r6, 8007a10 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 80079dc:	b137      	cbz	r7, 80079ec <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80079de:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 80079e0:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80079e2:	b11b      	cbz	r3, 80079ec <lwip_netconn_do_close_internal+0x140>
 80079e4:	4632      	mov	r2, r6
 80079e6:	2104      	movs	r1, #4
 80079e8:	4620      	mov	r0, r4
 80079ea:	4798      	blx	r3
      if (shut_rx) {
 80079ec:	f1ba 0f00 	cmp.w	sl, #0
 80079f0:	d005      	beq.n	80079fe <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80079f2:	6a23      	ldr	r3, [r4, #32]
 80079f4:	b11b      	cbz	r3, 80079fe <lwip_netconn_do_close_internal+0x152>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4620      	mov	r0, r4
 80079fa:	4611      	mov	r1, r2
 80079fc:	4798      	blx	r3
      if (shut_tx) {
 80079fe:	f1b8 0f00 	cmp.w	r8, #0
 8007a02:	d005      	beq.n	8007a10 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007a04:	6a23      	ldr	r3, [r4, #32]
 8007a06:	b11b      	cbz	r3, 8007a10 <lwip_netconn_do_close_internal+0x164>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	4798      	blx	r3
    if (delayed)
 8007a10:	f1b9 0f00 	cmp.w	r9, #0
 8007a14:	d026      	beq.n	8007a64 <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 8007a16:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 8007a18:	f105 000c 	add.w	r0, r5, #12
 8007a1c:	f006 fd81 	bl	800e522 <sys_sem_signal>
}
 8007a20:	4630      	mov	r0, r6
 8007a22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8007a26:	7d2b      	ldrb	r3, [r5, #20]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d106      	bne.n	8007a3a <lwip_netconn_do_close_internal+0x18e>
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <lwip_netconn_do_close_internal+0x1bc>)
 8007a2e:	f240 4241 	movw	r2, #1089	; 0x441
 8007a32:	4914      	ldr	r1, [pc, #80]	; (8007a84 <lwip_netconn_do_close_internal+0x1d8>)
 8007a34:	480e      	ldr	r0, [pc, #56]	; (8007a70 <lwip_netconn_do_close_internal+0x1c4>)
 8007a36:	f006 fe17 	bl	800e668 <iprintf>
    if (shut_tx) {
 8007a3a:	f1b8 0f00 	cmp.w	r8, #0
 8007a3e:	d003      	beq.n	8007a48 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 8007a40:	4911      	ldr	r1, [pc, #68]	; (8007a88 <lwip_netconn_do_close_internal+0x1dc>)
 8007a42:	4628      	mov	r0, r5
 8007a44:	f003 fa40 	bl	800aec8 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8007a48:	2201      	movs	r2, #1
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	490f      	ldr	r1, [pc, #60]	; (8007a8c <lwip_netconn_do_close_internal+0x1e0>)
 8007a4e:	f003 fa6f 	bl	800af30 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8007a52:	4628      	mov	r0, r5
 8007a54:	490e      	ldr	r1, [pc, #56]	; (8007a90 <lwip_netconn_do_close_internal+0x1e4>)
 8007a56:	f003 fa4d 	bl	800aef4 <tcp_err>
    tcp_arg(tpcb, conn);
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f003 fa17 	bl	800ae90 <tcp_arg>
  return err;
 8007a62:	e7dd      	b.n	8007a20 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 8007a64:	464e      	mov	r6, r9
 8007a66:	e7db      	b.n	8007a20 <lwip_netconn_do_close_internal+0x174>
 8007a68:	08013ba8 	.word	0x08013ba8
 8007a6c:	08013a8e 	.word	0x08013a8e
 8007a70:	080137b4 	.word	0x080137b4
 8007a74:	08013de1 	.word	0x08013de1
 8007a78:	08013dff 	.word	0x08013dff
 8007a7c:	08013e23 	.word	0x08013e23
 8007a80:	08013d1f 	.word	0x08013d1f
 8007a84:	08013e36 	.word	0x08013e36
 8007a88:	08007b11 	.word	0x08007b11
 8007a8c:	08007a95 	.word	0x08007a95
 8007a90:	08007c51 	.word	0x08007c51

08007a94 <poll_tcp>:
{
 8007a94:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007a96:	4604      	mov	r4, r0
 8007a98:	b930      	cbnz	r0, 8007aa8 <poll_tcp+0x14>
 8007a9a:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <poll_tcp+0x70>)
 8007a9c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007aa0:	4919      	ldr	r1, [pc, #100]	; (8007b08 <poll_tcp+0x74>)
 8007aa2:	481a      	ldr	r0, [pc, #104]	; (8007b0c <poll_tcp+0x78>)
 8007aa4:	f006 fde0 	bl	800e668 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8007aa8:	7861      	ldrb	r1, [r4, #1]
 8007aaa:	2901      	cmp	r1, #1
 8007aac:	d11c      	bne.n	8007ae8 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f7ff fdd2 	bl	8007658 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8007ab4:	7e23      	ldrb	r3, [r4, #24]
 8007ab6:	06da      	lsls	r2, r3, #27
 8007ab8:	d514      	bpl.n	8007ae4 <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007aba:	6862      	ldr	r2, [r4, #4]
 8007abc:	b192      	cbz	r2, 8007ae4 <poll_tcp+0x50>
 8007abe:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 8007ac2:	f640 3169 	movw	r1, #2921	; 0xb69
 8007ac6:	4288      	cmp	r0, r1
 8007ac8:	d90c      	bls.n	8007ae4 <poll_tcp+0x50>
 8007aca:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8007ace:	2a07      	cmp	r2, #7
 8007ad0:	d808      	bhi.n	8007ae4 <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007ad2:	f023 0310 	bic.w	r3, r3, #16
 8007ad6:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007ad8:	6a23      	ldr	r3, [r4, #32]
 8007ada:	b11b      	cbz	r3, 8007ae4 <poll_tcp+0x50>
 8007adc:	2200      	movs	r2, #0
 8007ade:	2102      	movs	r1, #2
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	4798      	blx	r3
}
 8007ae4:	2000      	movs	r0, #0
 8007ae6:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8007ae8:	2904      	cmp	r1, #4
 8007aea:	d1e3      	bne.n	8007ab4 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007aec:	69e2      	ldr	r2, [r4, #28]
 8007aee:	b11a      	cbz	r2, 8007af8 <poll_tcp+0x64>
 8007af0:	7a53      	ldrb	r3, [r2, #9]
 8007af2:	b10b      	cbz	r3, 8007af8 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 8007af4:	3b01      	subs	r3, #1
 8007af6:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007af8:	2101      	movs	r1, #1
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff fed6 	bl	80078ac <lwip_netconn_do_close_internal>
 8007b00:	e7d8      	b.n	8007ab4 <poll_tcp+0x20>
 8007b02:	bf00      	nop
 8007b04:	08013ba8 	.word	0x08013ba8
 8007b08:	08013cf5 	.word	0x08013cf5
 8007b0c:	080137b4 	.word	0x080137b4

08007b10 <sent_tcp>:
{
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007b14:	4604      	mov	r4, r0
 8007b16:	b970      	cbnz	r0, 8007b36 <sent_tcp+0x26>
 8007b18:	4b16      	ldr	r3, [pc, #88]	; (8007b74 <sent_tcp+0x64>)
 8007b1a:	f240 1293 	movw	r2, #403	; 0x193
 8007b1e:	4916      	ldr	r1, [pc, #88]	; (8007b78 <sent_tcp+0x68>)
 8007b20:	4816      	ldr	r0, [pc, #88]	; (8007b7c <sent_tcp+0x6c>)
 8007b22:	f006 fda1 	bl	800e668 <iprintf>
}
 8007b26:	2000      	movs	r0, #0
 8007b28:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8007b2a:	2904      	cmp	r1, #4
 8007b2c:	d108      	bne.n	8007b40 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007b2e:	2101      	movs	r1, #1
 8007b30:	f7ff febc 	bl	80078ac <lwip_netconn_do_close_internal>
 8007b34:	e004      	b.n	8007b40 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8007b36:	7841      	ldrb	r1, [r0, #1]
 8007b38:	2901      	cmp	r1, #1
 8007b3a:	d1f6      	bne.n	8007b2a <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007b3c:	f7ff fd8c 	bl	8007658 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007b40:	6863      	ldr	r3, [r4, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0ef      	beq.n	8007b26 <sent_tcp+0x16>
 8007b46:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8007b4a:	f640 3269 	movw	r2, #2921	; 0xb69
 8007b4e:	4291      	cmp	r1, r2
 8007b50:	d9e9      	bls.n	8007b26 <sent_tcp+0x16>
 8007b52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007b56:	2b07      	cmp	r3, #7
 8007b58:	d8e5      	bhi.n	8007b26 <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007b5a:	7e23      	ldrb	r3, [r4, #24]
 8007b5c:	f023 0310 	bic.w	r3, r3, #16
 8007b60:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8007b62:	6a23      	ldr	r3, [r4, #32]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0de      	beq.n	8007b26 <sent_tcp+0x16>
 8007b68:	462a      	mov	r2, r5
 8007b6a:	2102      	movs	r1, #2
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4798      	blx	r3
  return ERR_OK;
 8007b70:	e7d9      	b.n	8007b26 <sent_tcp+0x16>
 8007b72:	bf00      	nop
 8007b74:	08013ba8 	.word	0x08013ba8
 8007b78:	08013cf5 	.word	0x08013cf5
 8007b7c:	080137b4 	.word	0x080137b4

08007b80 <recv_tcp>:
{
 8007b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b84:	4606      	mov	r6, r0
 8007b86:	4615      	mov	r5, r2
 8007b88:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	b931      	cbnz	r1, 8007b9c <recv_tcp+0x1c>
 8007b8e:	4b29      	ldr	r3, [pc, #164]	; (8007c34 <recv_tcp+0xb4>)
 8007b90:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007b94:	4928      	ldr	r1, [pc, #160]	; (8007c38 <recv_tcp+0xb8>)
 8007b96:	4829      	ldr	r0, [pc, #164]	; (8007c3c <recv_tcp+0xbc>)
 8007b98:	f006 fd66 	bl	800e668 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8007b9c:	bb4e      	cbnz	r6, 8007bf2 <recv_tcp+0x72>
 8007b9e:	4b25      	ldr	r3, [pc, #148]	; (8007c34 <recv_tcp+0xb4>)
 8007ba0:	f240 122d 	movw	r2, #301	; 0x12d
 8007ba4:	4926      	ldr	r1, [pc, #152]	; (8007c40 <recv_tcp+0xc0>)
 8007ba6:	4825      	ldr	r0, [pc, #148]	; (8007c3c <recv_tcp+0xbc>)
 8007ba8:	f006 fd5e 	bl	800e668 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007bac:	bb14      	cbnz	r4, 8007bf4 <recv_tcp+0x74>
    return ERR_VAL;
 8007bae:	f06f 0405 	mvn.w	r4, #5
}
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 8007bb8:	4638      	mov	r0, r7
 8007bba:	8929      	ldrh	r1, [r5, #8]
 8007bbc:	f003 f914 	bl	800ade8 <tcp_recved>
      pbuf_free(p);
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	f002 fd25 	bl	800a610 <pbuf_free>
 8007bc6:	e7f4      	b.n	8007bb2 <recv_tcp+0x32>
  if (p != NULL) {
 8007bc8:	b16d      	cbz	r5, 8007be6 <recv_tcp+0x66>
    len = p->tot_len;
 8007bca:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f006 fc30 	bl	800e434 <sys_mbox_trypost>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	b948      	cbnz	r0, 8007bec <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007bd8:	6a33      	ldr	r3, [r6, #32]
 8007bda:	b343      	cbz	r3, 8007c2e <recv_tcp+0xae>
 8007bdc:	4601      	mov	r1, r0
 8007bde:	463a      	mov	r2, r7
 8007be0:	4630      	mov	r0, r6
 8007be2:	4798      	blx	r3
 8007be4:	e7e5      	b.n	8007bb2 <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8007be6:	4d17      	ldr	r5, [pc, #92]	; (8007c44 <recv_tcp+0xc4>)
    len = 0;
 8007be8:	2700      	movs	r7, #0
 8007bea:	e7ef      	b.n	8007bcc <recv_tcp+0x4c>
    return ERR_MEM;
 8007bec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007bf0:	e7df      	b.n	8007bb2 <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8007bf2:	b144      	cbz	r4, 8007c06 <recv_tcp+0x86>
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <recv_tcp+0xb4>)
 8007bf6:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007bfa:	4913      	ldr	r1, [pc, #76]	; (8007c48 <recv_tcp+0xc8>)
 8007bfc:	480f      	ldr	r0, [pc, #60]	; (8007c3c <recv_tcp+0xbc>)
 8007bfe:	f006 fd33 	bl	800e668 <iprintf>
  if (conn == NULL) {
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	d0d3      	beq.n	8007bae <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8007c06:	6873      	ldr	r3, [r6, #4]
 8007c08:	42bb      	cmp	r3, r7
 8007c0a:	d006      	beq.n	8007c1a <recv_tcp+0x9a>
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <recv_tcp+0xb4>)
 8007c0e:	f240 1235 	movw	r2, #309	; 0x135
 8007c12:	490e      	ldr	r1, [pc, #56]	; (8007c4c <recv_tcp+0xcc>)
 8007c14:	4809      	ldr	r0, [pc, #36]	; (8007c3c <recv_tcp+0xbc>)
 8007c16:	f006 fd27 	bl	800e668 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007c1a:	f106 0810 	add.w	r8, r6, #16
 8007c1e:	4640      	mov	r0, r8
 8007c20:	f006 fc45 	bl	800e4ae <sys_mbox_valid>
 8007c24:	4604      	mov	r4, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d1ce      	bne.n	8007bc8 <recv_tcp+0x48>
    if (p != NULL) {
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	d1c4      	bne.n	8007bb8 <recv_tcp+0x38>
    return ERR_OK;
 8007c2e:	2400      	movs	r4, #0
 8007c30:	e7bf      	b.n	8007bb2 <recv_tcp+0x32>
 8007c32:	bf00      	nop
 8007c34:	08013ba8 	.word	0x08013ba8
 8007c38:	08013e59 	.word	0x08013e59
 8007c3c:	080137b4 	.word	0x080137b4
 8007c40:	08013e7b 	.word	0x08013e7b
 8007c44:	08013598 	.word	0x08013598
 8007c48:	08013e9a 	.word	0x08013e9a
 8007c4c:	08013eb2 	.word	0x08013eb2

08007c50 <err_tcp>:
{
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007c56:	4604      	mov	r4, r0
 8007c58:	b930      	cbnz	r0, 8007c68 <err_tcp+0x18>
 8007c5a:	4b45      	ldr	r3, [pc, #276]	; (8007d70 <err_tcp+0x120>)
 8007c5c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007c60:	4944      	ldr	r1, [pc, #272]	; (8007d74 <err_tcp+0x124>)
 8007c62:	4845      	ldr	r0, [pc, #276]	; (8007d78 <err_tcp+0x128>)
 8007c64:	f006 fd00 	bl	800e668 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8007c68:	f006 fc9c 	bl	800e5a4 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007c6c:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 8007c6e:	2600      	movs	r6, #0
  old_state = conn->state;
 8007c70:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007c72:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8007c76:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8007c78:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007c7a:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 8007c7c:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8007c7e:	f006 fc9d 	bl	800e5bc <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007c82:	6a23      	ldr	r3, [r4, #32]
 8007c84:	b11b      	cbz	r3, 8007c8e <err_tcp+0x3e>
 8007c86:	4632      	mov	r2, r6
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007c8e:	6a23      	ldr	r3, [r4, #32]
 8007c90:	b11b      	cbz	r3, 8007c9a <err_tcp+0x4a>
 8007c92:	2200      	movs	r2, #0
 8007c94:	4620      	mov	r0, r4
 8007c96:	4611      	mov	r1, r2
 8007c98:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007c9a:	6a23      	ldr	r3, [r4, #32]
 8007c9c:	b11b      	cbz	r3, 8007ca6 <err_tcp+0x56>
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	4798      	blx	r3
  switch (err) {
 8007ca6:	f105 030f 	add.w	r3, r5, #15
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d846      	bhi.n	8007d3e <err_tcp+0xee>
 8007cb0:	4a32      	ldr	r2, [pc, #200]	; (8007d7c <err_tcp+0x12c>)
 8007cb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007cb6:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007cb8:	f104 0810 	add.w	r8, r4, #16
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	f006 fbf6 	bl	800e4ae <sys_mbox_valid>
 8007cc2:	b118      	cbz	r0, 8007ccc <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8007cc4:	4631      	mov	r1, r6
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f006 fbb4 	bl	800e434 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007ccc:	f104 0814 	add.w	r8, r4, #20
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	f006 fbec 	bl	800e4ae <sys_mbox_valid>
 8007cd6:	b118      	cbz	r0, 8007ce0 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f006 fbaa 	bl	800e434 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8007ce0:	2f01      	cmp	r7, #1
 8007ce2:	d002      	beq.n	8007cea <err_tcp+0x9a>
 8007ce4:	1efb      	subs	r3, r7, #3
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d834      	bhi.n	8007d54 <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007cea:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007cec:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8007cf0:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007cf2:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 8007cf4:	d439      	bmi.n	8007d6a <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007cf6:	69e3      	ldr	r3, [r4, #28]
 8007cf8:	b933      	cbnz	r3, 8007d08 <err_tcp+0xb8>
 8007cfa:	4b1d      	ldr	r3, [pc, #116]	; (8007d70 <err_tcp+0x120>)
 8007cfc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007d00:	491f      	ldr	r1, [pc, #124]	; (8007d80 <err_tcp+0x130>)
 8007d02:	481d      	ldr	r0, [pc, #116]	; (8007d78 <err_tcp+0x128>)
 8007d04:	f006 fcb0 	bl	800e668 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8007d08:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 8007d0a:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 8007d0c:	bf14      	ite	ne
 8007d0e:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 8007d10:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007d12:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8007d14:	bf08      	it	eq
 8007d16:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007d18:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	f006 fc07 	bl	800e52e <sys_sem_valid>
 8007d20:	b930      	cbnz	r0, 8007d30 <err_tcp+0xe0>
 8007d22:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <err_tcp+0x120>)
 8007d24:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007d28:	4916      	ldr	r1, [pc, #88]	; (8007d84 <err_tcp+0x134>)
 8007d2a:	4813      	ldr	r0, [pc, #76]	; (8007d78 <err_tcp+0x128>)
 8007d2c:	f006 fc9c 	bl	800e668 <iprintf>
      conn->current_msg = NULL;
 8007d30:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8007d32:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8007d34:	61e3      	str	r3, [r4, #28]
}
 8007d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8007d3a:	f006 bbf2 	b.w	800e522 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8007d3e:	b13d      	cbz	r5, 8007d50 <err_tcp+0x100>
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <err_tcp+0x120>)
 8007d42:	227d      	movs	r2, #125	; 0x7d
 8007d44:	4910      	ldr	r1, [pc, #64]	; (8007d88 <err_tcp+0x138>)
 8007d46:	2600      	movs	r6, #0
 8007d48:	480b      	ldr	r0, [pc, #44]	; (8007d78 <err_tcp+0x128>)
 8007d4a:	f006 fc8d 	bl	800e668 <iprintf>
 8007d4e:	e7b3      	b.n	8007cb8 <err_tcp+0x68>
      return NULL;
 8007d50:	462e      	mov	r6, r5
 8007d52:	e7b1      	b.n	8007cb8 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007d54:	69e3      	ldr	r3, [r4, #28]
 8007d56:	b143      	cbz	r3, 8007d6a <err_tcp+0x11a>
 8007d58:	4b05      	ldr	r3, [pc, #20]	; (8007d70 <err_tcp+0x120>)
 8007d5a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007d5e:	490b      	ldr	r1, [pc, #44]	; (8007d8c <err_tcp+0x13c>)
 8007d60:	4805      	ldr	r0, [pc, #20]	; (8007d78 <err_tcp+0x128>)
}
 8007d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007d66:	f006 bc7f 	b.w	800e668 <iprintf>
}
 8007d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d6e:	bf00      	nop
 8007d70:	08013ba8 	.word	0x08013ba8
 8007d74:	08013cf5 	.word	0x08013cf5
 8007d78:	080137b4 	.word	0x080137b4
 8007d7c:	08013598 	.word	0x08013598
 8007d80:	08013d1f 	.word	0x08013d1f
 8007d84:	08013ee0 	.word	0x08013ee0
 8007d88:	08013ed0 	.word	0x08013ed0
 8007d8c:	08013ef9 	.word	0x08013ef9

08007d90 <lwip_netconn_is_err_msg>:
{
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8007d94:	460c      	mov	r4, r1
 8007d96:	b929      	cbnz	r1, 8007da4 <lwip_netconn_is_err_msg+0x14>
 8007d98:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <lwip_netconn_is_err_msg+0x40>)
 8007d9a:	2285      	movs	r2, #133	; 0x85
 8007d9c:	490d      	ldr	r1, [pc, #52]	; (8007dd4 <lwip_netconn_is_err_msg+0x44>)
 8007d9e:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <lwip_netconn_is_err_msg+0x48>)
 8007da0:	f006 fc62 	bl	800e668 <iprintf>
  if (msg == &netconn_aborted) {
 8007da4:	4b0d      	ldr	r3, [pc, #52]	; (8007ddc <lwip_netconn_is_err_msg+0x4c>)
 8007da6:	f103 0210 	add.w	r2, r3, #16
 8007daa:	4295      	cmp	r5, r2
 8007dac:	d103      	bne.n	8007db6 <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 8007dae:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8007db0:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8007db2:	7023      	strb	r3, [r4, #0]
}
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8007db6:	f103 0211 	add.w	r2, r3, #17
 8007dba:	4295      	cmp	r5, r2
 8007dbc:	d101      	bne.n	8007dc2 <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 8007dbe:	23f2      	movs	r3, #242	; 0xf2
 8007dc0:	e7f6      	b.n	8007db0 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8007dc2:	429d      	cmp	r5, r3
 8007dc4:	d101      	bne.n	8007dca <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8007dc6:	23f1      	movs	r3, #241	; 0xf1
 8007dc8:	e7f2      	b.n	8007db0 <lwip_netconn_is_err_msg+0x20>
  return 0;
 8007dca:	2000      	movs	r0, #0
 8007dcc:	e7f2      	b.n	8007db4 <lwip_netconn_is_err_msg+0x24>
 8007dce:	bf00      	nop
 8007dd0:	08013ba8 	.word	0x08013ba8
 8007dd4:	08013f13 	.word	0x08013f13
 8007dd8:	080137b4 	.word	0x080137b4
 8007ddc:	08013598 	.word	0x08013598

08007de0 <lwip_netconn_do_newconn>:
{
 8007de0:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8007de2:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8007de4:	6805      	ldr	r5, [r0, #0]
{
 8007de6:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8007de8:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007dea:	6868      	ldr	r0, [r5, #4]
 8007dec:	bb28      	cbnz	r0, 8007e3a <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007dee:	782b      	ldrb	r3, [r5, #0]
 8007df0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007df4:	2b10      	cmp	r3, #16
 8007df6:	d014      	beq.n	8007e22 <lwip_netconn_do_newconn+0x42>
 8007df8:	2b20      	cmp	r3, #32
 8007dfa:	d11c      	bne.n	8007e36 <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007dfc:	f006 fa60 	bl	800e2c0 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8007e00:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007e02:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8007e04:	6850      	ldr	r0, [r2, #4]
 8007e06:	b150      	cbz	r0, 8007e1e <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007e08:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007e0a:	490c      	ldr	r1, [pc, #48]	; (8007e3c <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007e0c:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007e0e:	bf04      	itt	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007e14:	f006 fa34 	bl	800e280 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	b96b      	cbnz	r3, 8007e3a <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 8007e1e:	23ff      	movs	r3, #255	; 0xff
 8007e20:	e00a      	b.n	8007e38 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007e22:	f003 fe3d 	bl	800baa0 <tcp_new_ip_type>
 8007e26:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	6843      	ldr	r3, [r0, #4]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0f6      	beq.n	8007e1e <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8007e30:	f7ff fbf0 	bl	8007614 <setup_tcp>
 8007e34:	e7f0      	b.n	8007e18 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8007e36:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8007e38:	7123      	strb	r3, [r4, #4]
}
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	08007559 	.word	0x08007559

08007e40 <netconn_alloc>:
{
 8007e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e42:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007e44:	2007      	movs	r0, #7
{
 8007e46:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007e48:	f002 f956 	bl	800a0f8 <memp_malloc>
  if (conn == NULL) {
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	b388      	cbz	r0, 8007eb4 <netconn_alloc+0x74>
  conn->type = t;
 8007e50:	7005      	strb	r5, [r0, #0]
 8007e52:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8007e56:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8007e58:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8007e5a:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8007e5c:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8007e5e:	d00e      	beq.n	8007e7e <netconn_alloc+0x3e>
 8007e60:	2d20      	cmp	r5, #32
 8007e62:	d00c      	beq.n	8007e7e <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007e64:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <netconn_alloc+0x78>)
 8007e66:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007e6a:	4914      	ldr	r1, [pc, #80]	; (8007ebc <netconn_alloc+0x7c>)
 8007e6c:	4814      	ldr	r0, [pc, #80]	; (8007ec0 <netconn_alloc+0x80>)
 8007e6e:	f006 fbfb 	bl	800e668 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007e72:	4621      	mov	r1, r4
 8007e74:	2007      	movs	r0, #7
  return NULL;
 8007e76:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8007e78:	f002 f96e 	bl	800a158 <memp_free>
  return NULL;
 8007e7c:	e01a      	b.n	8007eb4 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007e7e:	f104 0710 	add.w	r7, r4, #16
 8007e82:	2106      	movs	r1, #6
 8007e84:	4638      	mov	r0, r7
 8007e86:	f006 fabb 	bl	800e400 <sys_mbox_new>
 8007e8a:	4601      	mov	r1, r0
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	d1f0      	bne.n	8007e72 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007e90:	f104 000c 	add.w	r0, r4, #12
 8007e94:	f006 fb13 	bl	800e4be <sys_sem_new>
 8007e98:	4605      	mov	r5, r0
 8007e9a:	b118      	cbz	r0, 8007ea4 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f006 fabf 	bl	800e420 <sys_mbox_free>
    goto free_and_return;
 8007ea2:	e7e6      	b.n	8007e72 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007ea4:	f104 0014 	add.w	r0, r4, #20
 8007ea8:	f006 fb06 	bl	800e4b8 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8007eac:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8007eae:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8007eb0:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb8:	08013ba8 	.word	0x08013ba8
 8007ebc:	08013f1f 	.word	0x08013f1f
 8007ec0:	080137b4 	.word	0x080137b4

08007ec4 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007ec4:	6843      	ldr	r3, [r0, #4]
{
 8007ec6:	b513      	push	{r0, r1, r4, lr}
 8007ec8:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007eca:	b133      	cbz	r3, 8007eda <netconn_free+0x16>
 8007ecc:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <netconn_free+0x64>)
 8007ece:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007ed2:	4916      	ldr	r1, [pc, #88]	; (8007f2c <netconn_free+0x68>)
 8007ed4:	4816      	ldr	r0, [pc, #88]	; (8007f30 <netconn_free+0x6c>)
 8007ed6:	f006 fbc7 	bl	800e668 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007eda:	f104 0010 	add.w	r0, r4, #16
 8007ede:	f006 fae6 	bl	800e4ae <sys_mbox_valid>
 8007ee2:	b130      	cbz	r0, 8007ef2 <netconn_free+0x2e>
 8007ee4:	4b10      	ldr	r3, [pc, #64]	; (8007f28 <netconn_free+0x64>)
 8007ee6:	f240 3223 	movw	r2, #803	; 0x323
 8007eea:	4912      	ldr	r1, [pc, #72]	; (8007f34 <netconn_free+0x70>)
 8007eec:	4810      	ldr	r0, [pc, #64]	; (8007f30 <netconn_free+0x6c>)
 8007eee:	f006 fbbb 	bl	800e668 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007ef2:	f104 0014 	add.w	r0, r4, #20
 8007ef6:	f006 fada 	bl	800e4ae <sys_mbox_valid>
 8007efa:	b130      	cbz	r0, 8007f0a <netconn_free+0x46>
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <netconn_free+0x64>)
 8007efe:	f240 3226 	movw	r2, #806	; 0x326
 8007f02:	490d      	ldr	r1, [pc, #52]	; (8007f38 <netconn_free+0x74>)
 8007f04:	480a      	ldr	r0, [pc, #40]	; (8007f30 <netconn_free+0x6c>)
 8007f06:	f006 fbaf 	bl	800e668 <iprintf>
  sys_sem_free(&conn->op_completed);
 8007f0a:	f104 000c 	add.w	r0, r4, #12
 8007f0e:	9001      	str	r0, [sp, #4]
 8007f10:	f006 fb0a 	bl	800e528 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007f14:	9801      	ldr	r0, [sp, #4]
 8007f16:	f006 fb0f 	bl	800e538 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	2007      	movs	r0, #7
}
 8007f1e:	b002      	add	sp, #8
 8007f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8007f24:	f002 b918 	b.w	800a158 <memp_free>
 8007f28:	08013ba8 	.word	0x08013ba8
 8007f2c:	08013f45 	.word	0x08013f45
 8007f30:	080137b4 	.word	0x080137b4
 8007f34:	08013f73 	.word	0x08013f73
 8007f38:	08013fad 	.word	0x08013fad

08007f3c <netconn_drain>:
{
 8007f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007f3e:	f100 0510 	add.w	r5, r0, #16
{
 8007f42:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007f44:	4628      	mov	r0, r5
 8007f46:	f006 fab2 	bl	800e4ae <sys_mbox_valid>
 8007f4a:	b158      	cbz	r0, 8007f64 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007f4c:	a901      	add	r1, sp, #4
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f006 fa9c 	bl	800e48c <sys_arch_mbox_tryfetch>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d118      	bne.n	8007f8a <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f006 fa61 	bl	800e420 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007f5e:	4628      	mov	r0, r5
 8007f60:	f006 faaa 	bl	800e4b8 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007f64:	3414      	adds	r4, #20
 8007f66:	4620      	mov	r0, r4
 8007f68:	f006 faa1 	bl	800e4ae <sys_mbox_valid>
 8007f6c:	b158      	cbz	r0, 8007f86 <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007f6e:	a901      	add	r1, sp, #4
 8007f70:	4620      	mov	r0, r4
 8007f72:	f006 fa8b 	bl	800e48c <sys_arch_mbox_tryfetch>
 8007f76:	3001      	adds	r0, #1
 8007f78:	d11a      	bne.n	8007fb0 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f006 fa50 	bl	800e420 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007f80:	4620      	mov	r0, r4
 8007f82:	f006 fa99 	bl	800e4b8 <sys_mbox_set_invalid>
}
 8007f86:	b002      	add	sp, #8
 8007f88:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007f8a:	7823      	ldrb	r3, [r4, #0]
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007f8c:	9801      	ldr	r0, [sp, #4]
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f92:	2b10      	cmp	r3, #16
 8007f94:	d109      	bne.n	8007faa <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007f96:	f10d 0103 	add.w	r1, sp, #3
 8007f9a:	f7ff fef9 	bl	8007d90 <lwip_netconn_is_err_msg>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d1d4      	bne.n	8007f4c <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8007fa2:	9801      	ldr	r0, [sp, #4]
 8007fa4:	f002 fb34 	bl	800a610 <pbuf_free>
 8007fa8:	e7d0      	b.n	8007f4c <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 8007faa:	f000 f9e7 	bl	800837c <netbuf_delete>
 8007fae:	e7cd      	b.n	8007f4c <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007fb0:	f10d 0103 	add.w	r1, sp, #3
 8007fb4:	9801      	ldr	r0, [sp, #4]
 8007fb6:	f7ff feeb 	bl	8007d90 <lwip_netconn_is_err_msg>
 8007fba:	4606      	mov	r6, r0
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1d6      	bne.n	8007f6e <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8007fc0:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	f7ff ffba 	bl	8007f3c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8007fc8:	6868      	ldr	r0, [r5, #4]
 8007fca:	b110      	cbz	r0, 8007fd2 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8007fcc:	f003 fc84 	bl	800b8d8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007fd0:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f7ff ff76 	bl	8007ec4 <netconn_free>
 8007fd8:	e7c9      	b.n	8007f6e <netconn_drain+0x32>
	...

08007fdc <accept_function>:
{
 8007fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fde:	460f      	mov	r7, r1
 8007fe0:	4616      	mov	r6, r2
  if (conn == NULL) {
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	b920      	cbnz	r0, 8007ff0 <accept_function+0x14>
    return ERR_VAL;
 8007fe6:	f06f 0405 	mvn.w	r4, #5
}
 8007fea:	4620      	mov	r0, r4
 8007fec:	b003      	add	sp, #12
 8007fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007ff0:	f100 0414 	add.w	r4, r0, #20
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f006 fa5a 	bl	800e4ae <sys_mbox_valid>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d0f3      	beq.n	8007fe6 <accept_function+0xa>
  if (newpcb == NULL) {
 8007ffe:	b96f      	cbnz	r7, 800801c <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008000:	492f      	ldr	r1, [pc, #188]	; (80080c0 <accept_function+0xe4>)
 8008002:	4620      	mov	r0, r4
 8008004:	f006 fa16 	bl	800e434 <sys_mbox_trypost>
 8008008:	4602      	mov	r2, r0
 800800a:	2800      	cmp	r0, #0
 800800c:	d1eb      	bne.n	8007fe6 <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800800e:	6a2b      	ldr	r3, [r5, #32]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0e8      	beq.n	8007fe6 <accept_function+0xa>
 8008014:	4601      	mov	r1, r0
 8008016:	4628      	mov	r0, r5
 8008018:	4798      	blx	r3
 800801a:	e7e4      	b.n	8007fe6 <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800801c:	b136      	cbz	r6, 800802c <accept_function+0x50>
 800801e:	4b29      	ldr	r3, [pc, #164]	; (80080c4 <accept_function+0xe8>)
 8008020:	f240 222a 	movw	r2, #554	; 0x22a
 8008024:	4928      	ldr	r1, [pc, #160]	; (80080c8 <accept_function+0xec>)
 8008026:	4829      	ldr	r0, [pc, #164]	; (80080cc <accept_function+0xf0>)
 8008028:	f006 fb1e 	bl	800e668 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 800802c:	6a29      	ldr	r1, [r5, #32]
 800802e:	7828      	ldrb	r0, [r5, #0]
 8008030:	f7ff ff06 	bl	8007e40 <netconn_alloc>
  if (newconn == NULL) {
 8008034:	4606      	mov	r6, r0
 8008036:	b968      	cbnz	r0, 8008054 <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008038:	4921      	ldr	r1, [pc, #132]	; (80080c0 <accept_function+0xe4>)
 800803a:	4620      	mov	r0, r4
 800803c:	f006 f9fa 	bl	800e434 <sys_mbox_trypost>
 8008040:	4602      	mov	r2, r0
 8008042:	b920      	cbnz	r0, 800804e <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008044:	6a2b      	ldr	r3, [r5, #32]
 8008046:	b113      	cbz	r3, 800804e <accept_function+0x72>
 8008048:	4601      	mov	r1, r0
 800804a:	4628      	mov	r0, r5
 800804c:	4798      	blx	r3
    return ERR_MEM;
 800804e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008052:	e7ca      	b.n	8007fea <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8008054:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8008056:	f7ff fadd 	bl	8007614 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800805a:	4620      	mov	r0, r4
 800805c:	4631      	mov	r1, r6
 800805e:	f006 f9e9 	bl	800e434 <sys_mbox_trypost>
 8008062:	4604      	mov	r4, r0
 8008064:	b318      	cbz	r0, 80080ae <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8008066:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8008068:	2100      	movs	r1, #0
 800806a:	9001      	str	r0, [sp, #4]
 800806c:	f002 ff10 	bl	800ae90 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008070:	9801      	ldr	r0, [sp, #4]
 8008072:	2100      	movs	r1, #0
 8008074:	f002 ff10 	bl	800ae98 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008078:	9801      	ldr	r0, [sp, #4]
 800807a:	2100      	movs	r1, #0
 800807c:	f002 ff24 	bl	800aec8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	9801      	ldr	r0, [sp, #4]
 8008084:	4611      	mov	r1, r2
 8008086:	f002 ff53 	bl	800af30 <tcp_poll>
    tcp_err(pcb, NULL);
 800808a:	2100      	movs	r1, #0
 800808c:	9801      	ldr	r0, [sp, #4]
 800808e:	f002 ff31 	bl	800aef4 <tcp_err>
    newconn->pcb.tcp = NULL;
 8008092:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8008094:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8008098:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800809a:	9001      	str	r0, [sp, #4]
 800809c:	f006 f9c0 	bl	800e420 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80080a0:	9801      	ldr	r0, [sp, #4]
 80080a2:	f006 fa09 	bl	800e4b8 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80080a6:	4630      	mov	r0, r6
 80080a8:	f7ff ff0c 	bl	8007ec4 <netconn_free>
    return ERR_MEM;
 80080ac:	e7cf      	b.n	800804e <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80080ae:	6a2b      	ldr	r3, [r5, #32]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d09a      	beq.n	8007fea <accept_function+0xe>
 80080b4:	4602      	mov	r2, r0
 80080b6:	4601      	mov	r1, r0
 80080b8:	4628      	mov	r0, r5
 80080ba:	4798      	blx	r3
 80080bc:	e795      	b.n	8007fea <accept_function+0xe>
 80080be:	bf00      	nop
 80080c0:	080135a8 	.word	0x080135a8
 80080c4:	08013ba8 	.word	0x08013ba8
 80080c8:	08013fe9 	.word	0x08013fe9
 80080cc:	080137b4 	.word	0x080137b4

080080d0 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 80080d0:	6803      	ldr	r3, [r0, #0]
{
 80080d2:	b510      	push	{r4, lr}
 80080d4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80080d6:	6858      	ldr	r0, [r3, #4]
 80080d8:	b188      	cbz	r0, 80080fe <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d007      	beq.n	80080f4 <lwip_netconn_do_bind+0x24>
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d10a      	bne.n	80080fe <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80080e8:	89a2      	ldrh	r2, [r4, #12]
 80080ea:	68a1      	ldr	r1, [r4, #8]
 80080ec:	f006 f862 	bl	800e1b4 <udp_bind>
  msg->err = err;
 80080f0:	7120      	strb	r0, [r4, #4]
}
 80080f2:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80080f4:	89a2      	ldrh	r2, [r4, #12]
 80080f6:	68a1      	ldr	r1, [r4, #8]
 80080f8:	f002 fd86 	bl	800ac08 <tcp_bind>
        break;
 80080fc:	e7f8      	b.n	80080f0 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80080fe:	f06f 0005 	mvn.w	r0, #5
 8008102:	e7f5      	b.n	80080f0 <lwip_netconn_do_bind+0x20>

08008104 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 8008104:	6803      	ldr	r3, [r0, #0]
{
 8008106:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008108:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800810a:	6858      	ldr	r0, [r3, #4]
 800810c:	2800      	cmp	r0, #0
 800810e:	d04f      	beq.n	80081b0 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008116:	2a10      	cmp	r2, #16
 8008118:	d14c      	bne.n	80081b4 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 800811a:	785b      	ldrb	r3, [r3, #1]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d143      	bne.n	80081a8 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8008120:	7d03      	ldrb	r3, [r0, #20]
 8008122:	b11b      	cbz	r3, 800812c <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 8008124:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 8008126:	f88d 3007 	strb.w	r3, [sp, #7]
 800812a:	e031      	b.n	8008190 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800812c:	f10d 0207 	add.w	r2, sp, #7
 8008130:	21ff      	movs	r1, #255	; 0xff
 8008132:	f002 fdbf 	bl	800acb4 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8008136:	4605      	mov	r5, r0
 8008138:	b350      	cbz	r0, 8008190 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800813a:	6820      	ldr	r0, [r4, #0]
 800813c:	3010      	adds	r0, #16
 800813e:	f006 f9b6 	bl	800e4ae <sys_mbox_valid>
 8008142:	b138      	cbz	r0, 8008154 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 8008144:	6820      	ldr	r0, [r4, #0]
 8008146:	3010      	adds	r0, #16
 8008148:	f006 f96a 	bl	800e420 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800814c:	6820      	ldr	r0, [r4, #0]
 800814e:	3010      	adds	r0, #16
 8008150:	f006 f9b2 	bl	800e4b8 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008154:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 8008156:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008158:	3014      	adds	r0, #20
            err = ERR_OK;
 800815a:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800815e:	f006 f9a6 	bl	800e4ae <sys_mbox_valid>
 8008162:	b930      	cbnz	r0, 8008172 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	2106      	movs	r1, #6
 8008168:	3014      	adds	r0, #20
 800816a:	f006 f949 	bl	800e400 <sys_mbox_new>
 800816e:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8008172:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8008176:	b983      	cbnz	r3, 800819a <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8008178:	6821      	ldr	r1, [r4, #0]
 800817a:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800817c:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800817e:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8008180:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008182:	f002 fe85 	bl	800ae90 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008186:	6823      	ldr	r3, [r4, #0]
 8008188:	490b      	ldr	r1, [pc, #44]	; (80081b8 <lwip_netconn_do_listen+0xb4>)
 800818a:	6858      	ldr	r0, [r3, #4]
 800818c:	f002 feca 	bl	800af24 <tcp_accept>
  msg->err = err;
 8008190:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008194:	7123      	strb	r3, [r4, #4]
}
 8008196:	b003      	add	sp, #12
 8008198:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 800819a:	4628      	mov	r0, r5
 800819c:	f003 fa18 	bl	800b5d0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80081a0:	6823      	ldr	r3, [r4, #0]
 80081a2:	2200      	movs	r2, #0
 80081a4:	605a      	str	r2, [r3, #4]
 80081a6:	e7f3      	b.n	8008190 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d101      	bne.n	80081b0 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e7ba      	b.n	8008126 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 80081b0:	23f5      	movs	r3, #245	; 0xf5
 80081b2:	e7b8      	b.n	8008126 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 80081b4:	23f0      	movs	r3, #240	; 0xf0
 80081b6:	e7b6      	b.n	8008126 <lwip_netconn_do_listen+0x22>
 80081b8:	08007fdd 	.word	0x08007fdd

080081bc <lwip_netconn_do_recv>:
{
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80081be:	2300      	movs	r3, #0
{
 80081c0:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 80081c2:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80081c4:	6803      	ldr	r3, [r0, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	b192      	cbz	r2, 80081f0 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d10d      	bne.n	80081f0 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 80081d4:	6885      	ldr	r5, [r0, #8]
 80081d6:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80081da:	42bd      	cmp	r5, r7
 80081dc:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	bf28      	it	cs
 80081e2:	463e      	movcs	r6, r7
 80081e4:	6858      	ldr	r0, [r3, #4]
 80081e6:	b2b1      	uxth	r1, r6
 80081e8:	f002 fdfe 	bl	800ade8 <tcp_recved>
      } while (remaining != 0);
 80081ec:	1bad      	subs	r5, r5, r6
 80081ee:	d1f4      	bne.n	80081da <lwip_netconn_do_recv+0x1e>
}
 80081f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081f4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80081f4:	b510      	push	{r4, lr}
 80081f6:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 80081f8:	6800      	ldr	r0, [r0, #0]
 80081fa:	f7ff f831 	bl	8007260 <netconn_err>
  if (err == ERR_OK) {
 80081fe:	2800      	cmp	r0, #0
 8008200:	d14a      	bne.n	8008298 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008202:	6823      	ldr	r3, [r4, #0]
 8008204:	781a      	ldrb	r2, [r3, #0]
 8008206:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800820a:	2a10      	cmp	r2, #16
 800820c:	d142      	bne.n	8008294 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800820e:	785a      	ldrb	r2, [r3, #1]
 8008210:	2a00      	cmp	r2, #0
 8008212:	d143      	bne.n	800829c <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	2a00      	cmp	r2, #0
 8008218:	d043      	beq.n	80082a2 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 800821a:	2201      	movs	r2, #1
 800821c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	b133      	cbz	r3, 8008230 <lwip_netconn_do_write+0x3c>
 8008222:	4b21      	ldr	r3, [pc, #132]	; (80082a8 <lwip_netconn_do_write+0xb4>)
 8008224:	f240 7223 	movw	r2, #1827	; 0x723
 8008228:	4920      	ldr	r1, [pc, #128]	; (80082ac <lwip_netconn_do_write+0xb8>)
 800822a:	4821      	ldr	r0, [pc, #132]	; (80082b0 <lwip_netconn_do_write+0xbc>)
 800822c:	f006 fa1c 	bl	800e668 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008230:	6963      	ldr	r3, [r4, #20]
 8008232:	b933      	cbnz	r3, 8008242 <lwip_netconn_do_write+0x4e>
 8008234:	4b1c      	ldr	r3, [pc, #112]	; (80082a8 <lwip_netconn_do_write+0xb4>)
 8008236:	f240 7224 	movw	r2, #1828	; 0x724
 800823a:	491e      	ldr	r1, [pc, #120]	; (80082b4 <lwip_netconn_do_write+0xc0>)
 800823c:	481c      	ldr	r0, [pc, #112]	; (80082b0 <lwip_netconn_do_write+0xbc>)
 800823e:	f006 fa13 	bl	800e668 <iprintf>
        msg->conn->current_msg = msg;
 8008242:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008244:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8008246:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008248:	f7ff fa06 	bl	8007658 <lwip_netconn_do_writemore>
 800824c:	b328      	cbz	r0, 800829a <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d006      	beq.n	8008264 <lwip_netconn_do_write+0x70>
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <lwip_netconn_do_write+0xb4>)
 8008258:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800825c:	4916      	ldr	r1, [pc, #88]	; (80082b8 <lwip_netconn_do_write+0xc4>)
 800825e:	4814      	ldr	r0, [pc, #80]	; (80082b0 <lwip_netconn_do_write+0xbc>)
 8008260:	f006 fa02 	bl	800e668 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008264:	4815      	ldr	r0, [pc, #84]	; (80082bc <lwip_netconn_do_write+0xc8>)
 8008266:	f006 f98a 	bl	800e57e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800826a:	6820      	ldr	r0, [r4, #0]
 800826c:	2100      	movs	r1, #0
 800826e:	300c      	adds	r0, #12
 8008270:	f006 f93c 	bl	800e4ec <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008274:	4811      	ldr	r0, [pc, #68]	; (80082bc <lwip_netconn_do_write+0xc8>)
 8008276:	f006 f97d 	bl	800e574 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10b      	bne.n	800829a <lwip_netconn_do_write+0xa6>
 8008282:	4b09      	ldr	r3, [pc, #36]	; (80082a8 <lwip_netconn_do_write+0xb4>)
 8008284:	f240 722c 	movw	r2, #1836	; 0x72c
 8008288:	490b      	ldr	r1, [pc, #44]	; (80082b8 <lwip_netconn_do_write+0xc4>)
 800828a:	4809      	ldr	r0, [pc, #36]	; (80082b0 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008290:	f006 b9ea 	b.w	800e668 <iprintf>
      err = ERR_VAL;
 8008294:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8008298:	7120      	strb	r0, [r4, #4]
}
 800829a:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 800829c:	f06f 0004 	mvn.w	r0, #4
 80082a0:	e7fa      	b.n	8008298 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 80082a2:	f06f 000a 	mvn.w	r0, #10
 80082a6:	e7f7      	b.n	8008298 <lwip_netconn_do_write+0xa4>
 80082a8:	08013ba8 	.word	0x08013ba8
 80082ac:	08014024 	.word	0x08014024
 80082b0:	080137b4 	.word	0x080137b4
 80082b4:	0801405b 	.word	0x0801405b
 80082b8:	0801403f 	.word	0x0801403f
 80082bc:	20010100 	.word	0x20010100

080082c0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80082c0:	b510      	push	{r4, lr}
 80082c2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80082c4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80082c6:	6843      	ldr	r3, [r0, #4]
 80082c8:	b163      	cbz	r3, 80082e4 <lwip_netconn_do_close+0x24>
 80082ca:	7803      	ldrb	r3, [r0, #0]
 80082cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082d0:	2b10      	cmp	r3, #16
 80082d2:	d107      	bne.n	80082e4 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80082d4:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 80082d6:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80082d8:	2a03      	cmp	r2, #3
 80082da:	d001      	beq.n	80082e0 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d001      	beq.n	80082e4 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d102      	bne.n	80082ea <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80082e4:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80082e6:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 80082e8:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 80082ee:	23fb      	movs	r3, #251	; 0xfb
 80082f0:	e7f9      	b.n	80082e6 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80082f2:	07d3      	lsls	r3, r2, #31
 80082f4:	d501      	bpl.n	80082fa <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 80082f6:	f7ff fe21 	bl	8007f3c <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	b133      	cbz	r3, 800830e <lwip_netconn_do_close+0x4e>
 8008300:	4b19      	ldr	r3, [pc, #100]	; (8008368 <lwip_netconn_do_close+0xa8>)
 8008302:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8008306:	4919      	ldr	r1, [pc, #100]	; (800836c <lwip_netconn_do_close+0xac>)
 8008308:	4819      	ldr	r0, [pc, #100]	; (8008370 <lwip_netconn_do_close+0xb0>)
 800830a:	f006 f9ad 	bl	800e668 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800830e:	6820      	ldr	r0, [r4, #0]
 8008310:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008312:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8008314:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8008316:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008318:	f7ff fac8 	bl	80078ac <lwip_netconn_do_close_internal>
 800831c:	2800      	cmp	r0, #0
 800831e:	d0e3      	beq.n	80082e8 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b04      	cmp	r3, #4
 8008326:	d006      	beq.n	8008336 <lwip_netconn_do_close+0x76>
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <lwip_netconn_do_close+0xa8>)
 800832a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800832e:	4911      	ldr	r1, [pc, #68]	; (8008374 <lwip_netconn_do_close+0xb4>)
 8008330:	480f      	ldr	r0, [pc, #60]	; (8008370 <lwip_netconn_do_close+0xb0>)
 8008332:	f006 f999 	bl	800e668 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008336:	4810      	ldr	r0, [pc, #64]	; (8008378 <lwip_netconn_do_close+0xb8>)
 8008338:	f006 f921 	bl	800e57e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	2100      	movs	r1, #0
 8008340:	300c      	adds	r0, #12
 8008342:	f006 f8d3 	bl	800e4ec <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008346:	480c      	ldr	r0, [pc, #48]	; (8008378 <lwip_netconn_do_close+0xb8>)
 8008348:	f006 f914 	bl	800e574 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0c9      	beq.n	80082e8 <lwip_netconn_do_close+0x28>
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <lwip_netconn_do_close+0xa8>)
 8008356:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800835a:	4906      	ldr	r1, [pc, #24]	; (8008374 <lwip_netconn_do_close+0xb4>)
 800835c:	4804      	ldr	r0, [pc, #16]	; (8008370 <lwip_netconn_do_close+0xb0>)
}
 800835e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008362:	f006 b981 	b.w	800e668 <iprintf>
 8008366:	bf00      	nop
 8008368:	08013ba8 	.word	0x08013ba8
 800836c:	08014024 	.word	0x08014024
 8008370:	080137b4 	.word	0x080137b4
 8008374:	0801403f 	.word	0x0801403f
 8008378:	20010100 	.word	0x20010100

0800837c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800837c:	b510      	push	{r4, lr}
  if (buf != NULL) {
 800837e:	4604      	mov	r4, r0
 8008380:	b160      	cbz	r0, 800839c <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8008382:	6800      	ldr	r0, [r0, #0]
 8008384:	b120      	cbz	r0, 8008390 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8008386:	f002 f943 	bl	800a610 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8008390:	4621      	mov	r1, r4
 8008392:	2006      	movs	r0, #6
  }
}
 8008394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8008398:	f001 bede 	b.w	800a158 <memp_free>
}
 800839c:	bd10      	pop	{r4, pc}
	...

080083a0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80083a0:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80083a2:	b940      	cbnz	r0, 80083b6 <netbuf_next+0x16>
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <netbuf_next+0x2c>)
 80083a6:	22e0      	movs	r2, #224	; 0xe0
 80083a8:	4909      	ldr	r1, [pc, #36]	; (80083d0 <netbuf_next+0x30>)
 80083aa:	480a      	ldr	r0, [pc, #40]	; (80083d4 <netbuf_next+0x34>)
 80083ac:	f006 f95c 	bl	800e668 <iprintf>
  if (buf->ptr->next == NULL) {
    return -1;
 80083b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083b4:	e008      	b.n	80083c8 <netbuf_next+0x28>
  if (buf->ptr->next == NULL) {
 80083b6:	6843      	ldr	r3, [r0, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0f8      	beq.n	80083b0 <netbuf_next+0x10>
  }
  buf->ptr = buf->ptr->next;
 80083be:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 80083c0:	6818      	ldr	r0, [r3, #0]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80083c2:	fab0 f080 	clz	r0, r0
 80083c6:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 80083c8:	bd08      	pop	{r3, pc}
 80083ca:	bf00      	nop
 80083cc:	08014084 	.word	0x08014084
 80083d0:	080141ec 	.word	0x080141ec
 80083d4:	080137b4 	.word	0x080137b4

080083d8 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
 80083d8:	b510      	push	{r4, lr}
  /* cast through void* to silence alignment warnings.
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg *)(void *)m;

  if (msg->msg.common.errtfunc != NULL) {
 80083da:	68c4      	ldr	r4, [r0, #12]
{
 80083dc:	4603      	mov	r3, r0
    return msg->msg.common.errtfunc(msg->netif);
 80083de:	6840      	ldr	r0, [r0, #4]
  if (msg->msg.common.errtfunc != NULL) {
 80083e0:	b11c      	cbz	r4, 80083ea <netifapi_do_netif_common+0x12>
    return msg->msg.common.errtfunc(msg->netif);
 80083e2:	4623      	mov	r3, r4
  } else {
    msg->msg.common.voidfunc(msg->netif);
    return ERR_OK;
  }
}
 80083e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return msg->msg.common.errtfunc(msg->netif);
 80083e8:	4718      	bx	r3
    msg->msg.common.voidfunc(msg->netif);
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	4798      	blx	r3
}
 80083ee:	4620      	mov	r0, r4
 80083f0:	bd10      	pop	{r4, pc}
	...

080083f4 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                      netifapi_errt_fn errtfunc)
{
 80083f4:	b500      	push	{lr}
 80083f6:	b089      	sub	sp, #36	; 0x24
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
 80083f8:	e9cd 0101 	strd	r0, r1, [sp, #4]
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 80083fc:	4669      	mov	r1, sp
 80083fe:	4803      	ldr	r0, [pc, #12]	; (800840c <netifapi_netif_common+0x18>)
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
 8008400:	9203      	str	r2, [sp, #12]
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
 8008402:	f000 f8b1 	bl	8008568 <tcpip_api_call>
  NETIFAPI_VAR_FREE(msg);
  return err;
}
 8008406:	b009      	add	sp, #36	; 0x24
 8008408:	f85d fb04 	ldr.w	pc, [sp], #4
 800840c:	080083d9 	.word	0x080083d9

08008410 <tcpip_thread>:
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008410:	4c2c      	ldr	r4, [pc, #176]	; (80084c4 <tcpip_thread+0xb4>)
{
 8008412:	b583      	push	{r0, r1, r7, lr}
  LOCK_TCPIP_CORE();
 8008414:	4620      	mov	r0, r4
 8008416:	f006 f8ad 	bl	800e574 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800841a:	6863      	ldr	r3, [r4, #4]
 800841c:	b10b      	cbz	r3, 8008422 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 800841e:	68a0      	ldr	r0, [r4, #8]
 8008420:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8008422:	4d28      	ldr	r5, [pc, #160]	; (80084c4 <tcpip_thread+0xb4>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008424:	4e28      	ldr	r6, [pc, #160]	; (80084c8 <tcpip_thread+0xb8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8008426:	f105 070c 	add.w	r7, r5, #12
  sleeptime = sys_timeouts_sleeptime();
 800842a:	f005 fdcd 	bl	800dfc8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800842e:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8008430:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8008432:	d113      	bne.n	800845c <tcpip_thread+0x4c>
    UNLOCK_TCPIP_CORE();
 8008434:	4628      	mov	r0, r5
 8008436:	f006 f8a2 	bl	800e57e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800843a:	2200      	movs	r2, #0
 800843c:	a901      	add	r1, sp, #4
 800843e:	4638      	mov	r0, r7
 8008440:	f006 f802 	bl	800e448 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008444:	4628      	mov	r0, r5
 8008446:	f006 f895 	bl	800e574 <sys_mutex_lock>
    if (msg == NULL) {
 800844a:	9c01      	ldr	r4, [sp, #4]
 800844c:	b9cc      	cbnz	r4, 8008482 <tcpip_thread+0x72>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800844e:	4633      	mov	r3, r6
 8008450:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008452:	491e      	ldr	r1, [pc, #120]	; (80084cc <tcpip_thread+0xbc>)
 8008454:	481e      	ldr	r0, [pc, #120]	; (80084d0 <tcpip_thread+0xc0>)
 8008456:	f006 f907 	bl	800e668 <iprintf>
      break;
 800845a:	e7e6      	b.n	800842a <tcpip_thread+0x1a>
  } else if (sleeptime == 0) {
 800845c:	b910      	cbnz	r0, 8008464 <tcpip_thread+0x54>
    sys_check_timeouts();
 800845e:	f005 fd97 	bl	800df90 <sys_check_timeouts>
    goto again;
 8008462:	e7e2      	b.n	800842a <tcpip_thread+0x1a>
  UNLOCK_TCPIP_CORE();
 8008464:	4628      	mov	r0, r5
 8008466:	f006 f88a 	bl	800e57e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800846a:	4622      	mov	r2, r4
 800846c:	a901      	add	r1, sp, #4
 800846e:	4638      	mov	r0, r7
 8008470:	f005 ffea 	bl	800e448 <sys_arch_mbox_fetch>
 8008474:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8008476:	4628      	mov	r0, r5
 8008478:	f006 f87c 	bl	800e574 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800847c:	3401      	adds	r4, #1
 800847e:	d0ee      	beq.n	800845e <tcpip_thread+0x4e>
 8008480:	e7e3      	b.n	800844a <tcpip_thread+0x3a>
  switch (msg->type) {
 8008482:	7823      	ldrb	r3, [r4, #0]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d00f      	beq.n	80084a8 <tcpip_thread+0x98>
 8008488:	2b02      	cmp	r3, #2
 800848a:	d013      	beq.n	80084b4 <tcpip_thread+0xa4>
 800848c:	b9b3      	cbnz	r3, 80084bc <tcpip_thread+0xac>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800848e:	6860      	ldr	r0, [r4, #4]
 8008490:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8008494:	4798      	blx	r3
 8008496:	b110      	cbz	r0, 800849e <tcpip_thread+0x8e>
        pbuf_free(msg->msg.inp.p);
 8008498:	6860      	ldr	r0, [r4, #4]
 800849a:	f002 f8b9 	bl	800a610 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800849e:	4621      	mov	r1, r4
 80084a0:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80084a2:	f001 fe59 	bl	800a158 <memp_free>
      break;
 80084a6:	e7c0      	b.n	800842a <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80084a8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80084ac:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80084ae:	4621      	mov	r1, r4
 80084b0:	2008      	movs	r0, #8
 80084b2:	e7f6      	b.n	80084a2 <tcpip_thread+0x92>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80084b4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80084b8:	4798      	blx	r3
      break;
 80084ba:	e7b6      	b.n	800842a <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80084bc:	4633      	mov	r3, r6
 80084be:	22cf      	movs	r2, #207	; 0xcf
 80084c0:	e7c7      	b.n	8008452 <tcpip_thread+0x42>
 80084c2:	bf00      	nop
 80084c4:	20010100 	.word	0x20010100
 80084c8:	0801421f 	.word	0x0801421f
 80084cc:	08014292 	.word	0x08014292
 80084d0:	080137b4 	.word	0x080137b4

080084d4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80084d8:	4810      	ldr	r0, [pc, #64]	; (800851c <tcpip_inpkt+0x48>)
{
 80084da:	460e      	mov	r6, r1
 80084dc:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80084de:	f005 ffe6 	bl	800e4ae <sys_mbox_valid>
 80084e2:	b928      	cbnz	r0, 80084f0 <tcpip_inpkt+0x1c>
 80084e4:	4b0e      	ldr	r3, [pc, #56]	; (8008520 <tcpip_inpkt+0x4c>)
 80084e6:	22fc      	movs	r2, #252	; 0xfc
 80084e8:	490e      	ldr	r1, [pc, #56]	; (8008524 <tcpip_inpkt+0x50>)
 80084ea:	480f      	ldr	r0, [pc, #60]	; (8008528 <tcpip_inpkt+0x54>)
 80084ec:	f006 f8bc 	bl	800e668 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80084f0:	2009      	movs	r0, #9
 80084f2:	f001 fe01 	bl	800a0f8 <memp_malloc>
  if (msg == NULL) {
 80084f6:	4604      	mov	r4, r0
 80084f8:	b168      	cbz	r0, 8008516 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80084fa:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80084fc:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80084fe:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8008500:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8008502:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008506:	4805      	ldr	r0, [pc, #20]	; (800851c <tcpip_inpkt+0x48>)
 8008508:	f005 ff94 	bl	800e434 <sys_mbox_trypost>
 800850c:	b128      	cbz	r0, 800851a <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800850e:	4621      	mov	r1, r4
 8008510:	2009      	movs	r0, #9
 8008512:	f001 fe21 	bl	800a158 <memp_free>
    return ERR_MEM;
 8008516:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800851a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851c:	2001010c 	.word	0x2001010c
 8008520:	0801421f 	.word	0x0801421f
 8008524:	080142b0 	.word	0x080142b0
 8008528:	080137b4 	.word	0x080137b4

0800852c <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800852c:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8008530:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8008534:	bf14      	ite	ne
 8008536:	4a02      	ldrne	r2, [pc, #8]	; (8008540 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008538:	4a02      	ldreq	r2, [pc, #8]	; (8008544 <tcpip_input+0x18>)
 800853a:	f7ff bfcb 	b.w	80084d4 <tcpip_inpkt>
 800853e:	bf00      	nop
 8008540:	0800e2f1 	.word	0x0800e2f1
 8008544:	08008f8d 	.word	0x08008f8d

08008548 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8008548:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800854a:	4e06      	ldr	r6, [pc, #24]	; (8008564 <tcpip_send_msg_wait_sem+0x1c>)
{
 800854c:	460d      	mov	r5, r1
 800854e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8008550:	4630      	mov	r0, r6
 8008552:	f006 f80f 	bl	800e574 <sys_mutex_lock>
  fn(apimsg);
 8008556:	4628      	mov	r0, r5
 8008558:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 800855a:	4630      	mov	r0, r6
 800855c:	f006 f80f 	bl	800e57e <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008560:	2000      	movs	r0, #0
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	20010100 	.word	0x20010100

08008568 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
 8008568:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
 800856a:	4e07      	ldr	r6, [pc, #28]	; (8008588 <tcpip_api_call+0x20>)
{
 800856c:	460d      	mov	r5, r1
 800856e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8008570:	4630      	mov	r0, r6
 8008572:	f005 ffff 	bl	800e574 <sys_mutex_lock>
  err = fn(call);
 8008576:	4628      	mov	r0, r5
 8008578:	47a0      	blx	r4
 800857a:	4604      	mov	r4, r0
  UNLOCK_TCPIP_CORE();
 800857c:	4630      	mov	r0, r6
 800857e:	f005 fffe 	bl	800e57e <sys_mutex_unlock>
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008582:	4620      	mov	r0, r4
 8008584:	bd70      	pop	{r4, r5, r6, pc}
 8008586:	bf00      	nop
 8008588:	20010100 	.word	0x20010100

0800858c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800858c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800858e:	4605      	mov	r5, r0
 8008590:	460c      	mov	r4, r1
  lwip_init();
 8008592:	f001 fad5 	bl	8009b40 <lwip_init>

  tcpip_init_done = initfunc;
 8008596:	4812      	ldr	r0, [pc, #72]	; (80085e0 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008598:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 800859a:	e9c0 5401 	strd	r5, r4, [r0, #4]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800859e:	300c      	adds	r0, #12
 80085a0:	f005 ff2e 	bl	800e400 <sys_mbox_new>
 80085a4:	b130      	cbz	r0, 80085b4 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80085a6:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <tcpip_init+0x58>)
 80085a8:	f240 2261 	movw	r2, #609	; 0x261
 80085ac:	490e      	ldr	r1, [pc, #56]	; (80085e8 <tcpip_init+0x5c>)
 80085ae:	480f      	ldr	r0, [pc, #60]	; (80085ec <tcpip_init+0x60>)
 80085b0:	f006 f85a 	bl	800e668 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80085b4:	480a      	ldr	r0, [pc, #40]	; (80085e0 <tcpip_init+0x54>)
 80085b6:	f005 ffcf 	bl	800e558 <sys_mutex_new>
 80085ba:	b130      	cbz	r0, 80085ca <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80085bc:	4b09      	ldr	r3, [pc, #36]	; (80085e4 <tcpip_init+0x58>)
 80085be:	f240 2265 	movw	r2, #613	; 0x265
 80085c2:	490b      	ldr	r1, [pc, #44]	; (80085f0 <tcpip_init+0x64>)
 80085c4:	4809      	ldr	r0, [pc, #36]	; (80085ec <tcpip_init+0x60>)
 80085c6:	f006 f84f 	bl	800e668 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80085ca:	2302      	movs	r3, #2
 80085cc:	2200      	movs	r2, #0
 80085ce:	4909      	ldr	r1, [pc, #36]	; (80085f4 <tcpip_init+0x68>)
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085d6:	4808      	ldr	r0, [pc, #32]	; (80085f8 <tcpip_init+0x6c>)
 80085d8:	f005 ffd4 	bl	800e584 <sys_thread_new>
}
 80085dc:	b003      	add	sp, #12
 80085de:	bd30      	pop	{r4, r5, pc}
 80085e0:	20010100 	.word	0x20010100
 80085e4:	0801421f 	.word	0x0801421f
 80085e8:	080142bd 	.word	0x080142bd
 80085ec:	080137b4 	.word	0x080137b4
 80085f0:	080142e0 	.word	0x080142e0
 80085f4:	08008411 	.word	0x08008411
 80085f8:	08014301 	.word	0x08014301

080085fc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80085fc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80085fe:	2618      	movs	r6, #24
 8008600:	4c07      	ldr	r4, [pc, #28]	; (8008620 <etharp_free_entry+0x24>)
{
 8008602:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8008604:	4346      	muls	r6, r0
 8008606:	59a0      	ldr	r0, [r4, r6]
 8008608:	b118      	cbz	r0, 8008612 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800860a:	f002 f801 	bl	800a610 <pbuf_free>
    arp_table[i].q = NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008612:	2018      	movs	r0, #24
 8008614:	2300      	movs	r3, #0
 8008616:	fb00 4405 	mla	r4, r0, r5, r4
 800861a:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800861c:	bd70      	pop	{r4, r5, r6, pc}
 800861e:	bf00      	nop
 8008620:	20010110 	.word	0x20010110

08008624 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800862a:	f04f 0e0a 	mov.w	lr, #10
{
 800862e:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008630:	4699      	mov	r9, r3
 8008632:	469b      	mov	fp, r3
 8008634:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8008636:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008638:	4675      	mov	r5, lr
 800863a:	46f0      	mov	r8, lr
{
 800863c:	e9cd 2100 	strd	r2, r1, [sp]
 8008640:	4a3a      	ldr	r2, [pc, #232]	; (800872c <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008642:	2c0a      	cmp	r4, #10
 8008644:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 8008646:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800864a:	d11a      	bne.n	8008682 <etharp_find_entry+0x5e>
 800864c:	f1ba 0f00 	cmp.w	sl, #0
 8008650:	d05d      	beq.n	800870e <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008652:	b156      	cbz	r6, 800866a <etharp_find_entry+0x46>
 8008654:	6831      	ldr	r1, [r6, #0]
 8008656:	6857      	ldr	r7, [r2, #4]
 8008658:	42b9      	cmp	r1, r7
 800865a:	d106      	bne.n	800866a <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800865c:	9900      	ldr	r1, [sp, #0]
 800865e:	2900      	cmp	r1, #0
 8008660:	d048      	beq.n	80086f4 <etharp_find_entry+0xd0>
 8008662:	6891      	ldr	r1, [r2, #8]
 8008664:	9f00      	ldr	r7, [sp, #0]
 8008666:	42b9      	cmp	r1, r7
 8008668:	d044      	beq.n	80086f4 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800866a:	f1ba 0f01 	cmp.w	sl, #1
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
          if (arp_table[i].ctime >= age_queue) {
 800866e:	8a51      	ldrh	r1, [r2, #18]
      if (state == ETHARP_STATE_PENDING) {
 8008670:	d148      	bne.n	8008704 <etharp_find_entry+0xe0>
        if (arp_table[i].q != NULL) {
 8008672:	6817      	ldr	r7, [r2, #0]
 8008674:	2f00      	cmp	r7, #0
 8008676:	d040      	beq.n	80086fa <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8008678:	4561      	cmp	r1, ip
 800867a:	d305      	bcc.n	8008688 <etharp_find_entry+0x64>
 800867c:	468c      	mov	ip, r1
 800867e:	4686      	mov	lr, r0
 8008680:	e002      	b.n	8008688 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8008682:	f1ba 0f00 	cmp.w	sl, #0
 8008686:	d1e4      	bne.n	8008652 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008688:	3301      	adds	r3, #1
 800868a:	3218      	adds	r2, #24
 800868c:	2b0a      	cmp	r3, #10
 800868e:	d1d8      	bne.n	8008642 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008690:	9b01      	ldr	r3, [sp, #4]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d143      	bne.n	800871e <etharp_find_entry+0xfa>
 8008696:	2c0a      	cmp	r4, #10
 8008698:	d111      	bne.n	80086be <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800869a:	2d0a      	cmp	r5, #10
 800869c:	d039      	beq.n	8008712 <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800869e:	2318      	movs	r3, #24
 80086a0:	4a22      	ldr	r2, [pc, #136]	; (800872c <etharp_find_entry+0x108>)
 80086a2:	436b      	muls	r3, r5
 80086a4:	58d3      	ldr	r3, [r2, r3]
 80086a6:	b133      	cbz	r3, 80086b6 <etharp_find_entry+0x92>
 80086a8:	4b21      	ldr	r3, [pc, #132]	; (8008730 <etharp_find_entry+0x10c>)
 80086aa:	f240 126d 	movw	r2, #365	; 0x16d
 80086ae:	4921      	ldr	r1, [pc, #132]	; (8008734 <etharp_find_entry+0x110>)
 80086b0:	4821      	ldr	r0, [pc, #132]	; (8008738 <etharp_find_entry+0x114>)
 80086b2:	f005 ffd9 	bl	800e668 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 80086b6:	462c      	mov	r4, r5
 80086b8:	4628      	mov	r0, r5
 80086ba:	f7ff ff9f 	bl	80085fc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80086be:	4d1b      	ldr	r5, [pc, #108]	; (800872c <etharp_find_entry+0x108>)
 80086c0:	2318      	movs	r3, #24
 80086c2:	fb03 5304 	mla	r3, r3, r4, r5
 80086c6:	7d1b      	ldrb	r3, [r3, #20]
 80086c8:	b133      	cbz	r3, 80086d8 <etharp_find_entry+0xb4>
 80086ca:	4b19      	ldr	r3, [pc, #100]	; (8008730 <etharp_find_entry+0x10c>)
 80086cc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80086d0:	491a      	ldr	r1, [pc, #104]	; (800873c <etharp_find_entry+0x118>)
 80086d2:	4819      	ldr	r0, [pc, #100]	; (8008738 <etharp_find_entry+0x114>)
 80086d4:	f005 ffc8 	bl	800e668 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80086d8:	b126      	cbz	r6, 80086e4 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80086da:	2318      	movs	r3, #24
 80086dc:	6832      	ldr	r2, [r6, #0]
 80086de:	fb03 5304 	mla	r3, r3, r4, r5
 80086e2:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 80086e4:	2318      	movs	r3, #24
 80086e6:	2200      	movs	r2, #0
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80086e8:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 80086ea:	fb03 5304 	mla	r3, r3, r4, r5
 80086ee:	825a      	strh	r2, [r3, #18]
  arp_table[i].netif = netif;
 80086f0:	9a00      	ldr	r2, [sp, #0]
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	b003      	add	sp, #12
 80086f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80086fa:	4559      	cmp	r1, fp
 80086fc:	d3c4      	bcc.n	8008688 <etharp_find_entry+0x64>
 80086fe:	468b      	mov	fp, r1
 8008700:	4680      	mov	r8, r0
 8008702:	e7c1      	b.n	8008688 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8008704:	4549      	cmp	r1, r9
 8008706:	d3bf      	bcc.n	8008688 <etharp_find_entry+0x64>
 8008708:	4689      	mov	r9, r1
 800870a:	4605      	mov	r5, r0
 800870c:	e7bc      	b.n	8008688 <etharp_find_entry+0x64>
 800870e:	4604      	mov	r4, r0
 8008710:	e7ba      	b.n	8008688 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008712:	f1b8 0f0a 	cmp.w	r8, #10
 8008716:	d105      	bne.n	8008724 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008718:	f1be 0f0a 	cmp.w	lr, #10
 800871c:	d104      	bne.n	8008728 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 800871e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008722:	e7e7      	b.n	80086f4 <etharp_find_entry+0xd0>
 8008724:	4645      	mov	r5, r8
 8008726:	e7c6      	b.n	80086b6 <etharp_find_entry+0x92>
 8008728:	4675      	mov	r5, lr
 800872a:	e7c4      	b.n	80086b6 <etharp_find_entry+0x92>
 800872c:	20010110 	.word	0x20010110
 8008730:	08014308 	.word	0x08014308
 8008734:	08014382 	.word	0x08014382
 8008738:	080137b4 	.word	0x080137b4
 800873c:	08014399 	.word	0x08014399

08008740 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8008748:	4688      	mov	r8, r1
 800874a:	4691      	mov	r9, r2
 800874c:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800874e:	4607      	mov	r7, r0
 8008750:	b930      	cbnz	r0, 8008760 <etharp_raw+0x20>
 8008752:	4b2d      	ldr	r3, [pc, #180]	; (8008808 <etharp_raw+0xc8>)
 8008754:	f240 4257 	movw	r2, #1111	; 0x457
 8008758:	492c      	ldr	r1, [pc, #176]	; (800880c <etharp_raw+0xcc>)
 800875a:	482d      	ldr	r0, [pc, #180]	; (8008810 <etharp_raw+0xd0>)
 800875c:	f005 ff84 	bl	800e668 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008760:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008764:	211c      	movs	r1, #28
 8008766:	200e      	movs	r0, #14
 8008768:	f001 ffba 	bl	800a6e0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800876c:	4605      	mov	r5, r0
 800876e:	2800      	cmp	r0, #0
 8008770:	d047      	beq.n	8008802 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008772:	8943      	ldrh	r3, [r0, #10]
 8008774:	2b1b      	cmp	r3, #27
 8008776:	d806      	bhi.n	8008786 <etharp_raw+0x46>
 8008778:	4b23      	ldr	r3, [pc, #140]	; (8008808 <etharp_raw+0xc8>)
 800877a:	f240 4262 	movw	r2, #1122	; 0x462
 800877e:	4925      	ldr	r1, [pc, #148]	; (8008814 <etharp_raw+0xd4>)
 8008780:	4823      	ldr	r0, [pc, #140]	; (8008810 <etharp_raw+0xd0>)
 8008782:	f005 ff71 	bl	800e668 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008786:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008788:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800878c:	f001 f984 	bl	8009a98 <lwip_htons>
 8008790:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008792:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008796:	2b06      	cmp	r3, #6
 8008798:	d006      	beq.n	80087a8 <etharp_raw+0x68>
 800879a:	4b1b      	ldr	r3, [pc, #108]	; (8008808 <etharp_raw+0xc8>)
 800879c:	f240 4269 	movw	r2, #1129	; 0x469
 80087a0:	491d      	ldr	r1, [pc, #116]	; (8008818 <etharp_raw+0xd8>)
 80087a2:	481b      	ldr	r0, [pc, #108]	; (8008810 <etharp_raw+0xd0>)
 80087a4:	f005 ff60 	bl	800e668 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80087a8:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80087aa:	4642      	mov	r2, r8
 80087ac:	4629      	mov	r1, r5
 80087ae:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80087b0:	60a3      	str	r3, [r4, #8]
 80087b2:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80087b4:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80087b6:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80087b8:	f8da 3000 	ldr.w	r3, [sl]
 80087bc:	f8c4 3012 	str.w	r3, [r4, #18]
 80087c0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80087c4:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80087c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80087ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087d0:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80087d2:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80087d4:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80087d6:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80087d8:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80087da:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80087dc:	2308      	movs	r3, #8
 80087de:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80087e0:	2306      	movs	r3, #6
 80087e2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80087e4:	2304      	movs	r3, #4
 80087e6:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80087e8:	f640 0306 	movw	r3, #2054	; 0x806
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	464b      	mov	r3, r9
 80087f0:	f005 fdce 	bl	800e390 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80087f4:	4628      	mov	r0, r5
 80087f6:	f001 ff0b 	bl	800a610 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80087fa:	4630      	mov	r0, r6
}
 80087fc:	b002      	add	sp, #8
 80087fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8008802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008806:	e7f9      	b.n	80087fc <etharp_raw+0xbc>
 8008808:	08014308 	.word	0x08014308
 800880c:	080137a6 	.word	0x080137a6
 8008810:	080137b4 	.word	0x080137b4
 8008814:	080143c2 	.word	0x080143c2
 8008818:	080143f3 	.word	0x080143f3

0800881c <etharp_cleanup_netif>:
{
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4606      	mov	r6, r0
 8008820:	4d07      	ldr	r5, [pc, #28]	; (8008840 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008822:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008824:	7d2b      	ldrb	r3, [r5, #20]
 8008826:	b12b      	cbz	r3, 8008834 <etharp_cleanup_netif+0x18>
 8008828:	68ab      	ldr	r3, [r5, #8]
 800882a:	42b3      	cmp	r3, r6
 800882c:	d102      	bne.n	8008834 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800882e:	4620      	mov	r0, r4
 8008830:	f7ff fee4 	bl	80085fc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008834:	3401      	adds	r4, #1
 8008836:	3518      	adds	r5, #24
 8008838:	2c0a      	cmp	r4, #10
 800883a:	d1f3      	bne.n	8008824 <etharp_cleanup_netif+0x8>
}
 800883c:	bd70      	pop	{r4, r5, r6, pc}
 800883e:	bf00      	nop
 8008840:	20010110 	.word	0x20010110

08008844 <etharp_input>:
{
 8008844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008848:	4607      	mov	r7, r0
 800884a:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800884c:	460c      	mov	r4, r1
 800884e:	b949      	cbnz	r1, 8008864 <etharp_input+0x20>
 8008850:	4b4a      	ldr	r3, [pc, #296]	; (800897c <etharp_input+0x138>)
 8008852:	f240 228a 	movw	r2, #650	; 0x28a
 8008856:	494a      	ldr	r1, [pc, #296]	; (8008980 <etharp_input+0x13c>)
 8008858:	484a      	ldr	r0, [pc, #296]	; (8008984 <etharp_input+0x140>)
}
 800885a:	b008      	add	sp, #32
 800885c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008860:	f005 bf02 	b.w	800e668 <iprintf>
  hdr = (struct etharp_hdr *)p->payload;
 8008864:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008866:	882b      	ldrh	r3, [r5, #0]
 8008868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800886c:	d108      	bne.n	8008880 <etharp_input+0x3c>
 800886e:	792b      	ldrb	r3, [r5, #4]
 8008870:	2b06      	cmp	r3, #6
 8008872:	d105      	bne.n	8008880 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008874:	796b      	ldrb	r3, [r5, #5]
 8008876:	2b04      	cmp	r3, #4
 8008878:	d102      	bne.n	8008880 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800887a:	886b      	ldrh	r3, [r5, #2]
 800887c:	2b08      	cmp	r3, #8
 800887e:	d005      	beq.n	800888c <etharp_input+0x48>
    pbuf_free(p);
 8008880:	4638      	mov	r0, r7
}
 8008882:	b008      	add	sp, #32
 8008884:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8008888:	f001 bec2 	b.w	800a610 <pbuf_free>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800888c:	f8d5 300e 	ldr.w	r3, [r5, #14]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008890:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008894:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008896:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008898:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800889a:	2e00      	cmp	r6, #0
 800889c:	d06a      	beq.n	8008974 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800889e:	1af3      	subs	r3, r6, r3
 80088a0:	425e      	negs	r6, r3
 80088a2:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80088a4:	f1c6 0a02 	rsb	sl, r6, #2
 80088a8:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80088ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80088b0:	2b06      	cmp	r3, #6
 80088b2:	d006      	beq.n	80088c2 <etharp_input+0x7e>
 80088b4:	4b31      	ldr	r3, [pc, #196]	; (800897c <etharp_input+0x138>)
 80088b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80088ba:	4933      	ldr	r1, [pc, #204]	; (8008988 <etharp_input+0x144>)
 80088bc:	4831      	ldr	r0, [pc, #196]	; (8008984 <etharp_input+0x140>)
 80088be:	f005 fed3 	bl	800e668 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80088c2:	9807      	ldr	r0, [sp, #28]
 80088c4:	2800      	cmp	r0, #0
 80088c6:	d03c      	beq.n	8008942 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80088c8:	4621      	mov	r1, r4
 80088ca:	f000 fca0 	bl	800920e <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 80088ce:	4681      	mov	r9, r0
 80088d0:	bbb8      	cbnz	r0, 8008942 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 80088d2:	9b07      	ldr	r3, [sp, #28]
 80088d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80088d8:	2be0      	cmp	r3, #224	; 0xe0
 80088da:	d032      	beq.n	8008942 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 80088dc:	4622      	mov	r2, r4
 80088de:	4651      	mov	r1, sl
 80088e0:	a807      	add	r0, sp, #28
 80088e2:	f7ff fe9f 	bl	8008624 <etharp_find_entry>
  if (i < 0) {
 80088e6:	1e03      	subs	r3, r0, #0
 80088e8:	db2b      	blt.n	8008942 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80088ea:	2018      	movs	r0, #24
 80088ec:	4a27      	ldr	r2, [pc, #156]	; (800898c <etharp_input+0x148>)
 80088ee:	f04f 0e02 	mov.w	lr, #2
 80088f2:	fb00 fc03 	mul.w	ip, r0, r3
 80088f6:	eb02 010c 	add.w	r1, r2, ip
 80088fa:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80088fe:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8008902:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8008904:	fb13 e300 	smlabb	r3, r3, r0, lr
 8008908:	68a8      	ldr	r0, [r5, #8]
 800890a:	eb02 0e03 	add.w	lr, r2, r3
 800890e:	50d0      	str	r0, [r2, r3]
 8008910:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008914:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8008918:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 800891c:	f852 100c 	ldr.w	r1, [r2, ip]
 8008920:	b179      	cbz	r1, 8008942 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8008922:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 8008926:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800892a:	4620      	mov	r0, r4
 800892c:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	4643      	mov	r3, r8
 8008934:	9105      	str	r1, [sp, #20]
 8008936:	f005 fd2b 	bl	800e390 <ethernet_output>
    pbuf_free(p);
 800893a:	9905      	ldr	r1, [sp, #20]
 800893c:	4608      	mov	r0, r1
 800893e:	f001 fe67 	bl	800a610 <pbuf_free>
  switch (hdr->opcode) {
 8008942:	88eb      	ldrh	r3, [r5, #6]
 8008944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008948:	d10e      	bne.n	8008968 <etharp_input+0x124>
      if (for_us) {
 800894a:	b16e      	cbz	r6, 8008968 <etharp_input+0x124>
        etharp_raw(netif,
 800894c:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800894e:	f104 0326 	add.w	r3, r4, #38	; 0x26
        etharp_raw(netif,
 8008952:	4620      	mov	r0, r4
 8008954:	9203      	str	r2, [sp, #12]
 8008956:	aa07      	add	r2, sp, #28
 8008958:	4619      	mov	r1, r3
 800895a:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800895e:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 8008960:	9200      	str	r2, [sp, #0]
 8008962:	4642      	mov	r2, r8
 8008964:	f7ff feec 	bl	8008740 <etharp_raw>
  pbuf_free(p);
 8008968:	4638      	mov	r0, r7
 800896a:	f001 fe51 	bl	800a610 <pbuf_free>
}
 800896e:	b008      	add	sp, #32
 8008970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008974:	f04f 0a02 	mov.w	sl, #2
 8008978:	e798      	b.n	80088ac <etharp_input+0x68>
 800897a:	bf00      	nop
 800897c:	08014308 	.word	0x08014308
 8008980:	080137a6 	.word	0x080137a6
 8008984:	080137b4 	.word	0x080137b4
 8008988:	08014475 	.word	0x08014475
 800898c:	20010110 	.word	0x20010110

08008990 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8008990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008992:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008994:	2401      	movs	r4, #1
 8008996:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800899a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800899c:	e9cd 1402 	strd	r1, r4, [sp, #8]
 80089a0:	4904      	ldr	r1, [pc, #16]	; (80089b4 <etharp_request+0x24>)
 80089a2:	9200      	str	r2, [sp, #0]
 80089a4:	9101      	str	r1, [sp, #4]
 80089a6:	4619      	mov	r1, r3
 80089a8:	4a03      	ldr	r2, [pc, #12]	; (80089b8 <etharp_request+0x28>)
 80089aa:	f7ff fec9 	bl	8008740 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80089ae:	b004      	add	sp, #16
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	bf00      	nop
 80089b4:	080136f6 	.word	0x080136f6
 80089b8:	080136f0 	.word	0x080136f0

080089bc <etharp_tmr>:
{
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	4c13      	ldr	r4, [pc, #76]	; (8008a0c <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80089c0:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 80089c2:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80089c4:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 80089c6:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 80089c8:	b16a      	cbz	r2, 80089e6 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 80089ca:	8a63      	ldrh	r3, [r4, #18]
 80089cc:	3301      	adds	r3, #1
 80089ce:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80089d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 80089d4:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80089d6:	d203      	bcs.n	80089e0 <etharp_tmr+0x24>
 80089d8:	2a01      	cmp	r2, #1
 80089da:	d109      	bne.n	80089f0 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d90f      	bls.n	8008a00 <etharp_tmr+0x44>
        etharp_free_entry(i);
 80089e0:	4628      	mov	r0, r5
 80089e2:	f7ff fe0b 	bl	80085fc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80089e6:	3501      	adds	r5, #1
 80089e8:	3418      	adds	r4, #24
 80089ea:	2d0a      	cmp	r5, #10
 80089ec:	d1eb      	bne.n	80089c6 <etharp_tmr+0xa>
}
 80089ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80089f0:	2a03      	cmp	r2, #3
 80089f2:	d101      	bne.n	80089f8 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80089f4:	7527      	strb	r7, [r4, #20]
 80089f6:	e7f6      	b.n	80089e6 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80089f8:	2a04      	cmp	r2, #4
 80089fa:	d1f4      	bne.n	80089e6 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80089fc:	7526      	strb	r6, [r4, #20]
 80089fe:	e7f2      	b.n	80089e6 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8008a00:	1d21      	adds	r1, r4, #4
 8008a02:	68a0      	ldr	r0, [r4, #8]
 8008a04:	f7ff ffc4 	bl	8008990 <etharp_request>
 8008a08:	e7ed      	b.n	80089e6 <etharp_tmr+0x2a>
 8008a0a:	bf00      	nop
 8008a0c:	20010110 	.word	0x20010110

08008a10 <etharp_output_to_arp_index>:
{
 8008a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008a14:	4f24      	ldr	r7, [pc, #144]	; (8008aa8 <etharp_output_to_arp_index+0x98>)
 8008a16:	2318      	movs	r3, #24
{
 8008a18:	4606      	mov	r6, r0
 8008a1a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008a1c:	fb03 7302 	mla	r3, r3, r2, r7
{
 8008a20:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8008a22:	7d1b      	ldrb	r3, [r3, #20]
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d806      	bhi.n	8008a36 <etharp_output_to_arp_index+0x26>
 8008a28:	4b20      	ldr	r3, [pc, #128]	; (8008aac <etharp_output_to_arp_index+0x9c>)
 8008a2a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008a2e:	4920      	ldr	r1, [pc, #128]	; (8008ab0 <etharp_output_to_arp_index+0xa0>)
 8008a30:	4820      	ldr	r0, [pc, #128]	; (8008ab4 <etharp_output_to_arp_index+0xa4>)
 8008a32:	f005 fe19 	bl	800e668 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008a36:	2218      	movs	r2, #24
 8008a38:	eb04 0544 	add.w	r5, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008a3c:	f106 0926 	add.w	r9, r6, #38	; 0x26
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008a40:	fb02 7404 	mla	r4, r2, r4, r7
 8008a44:	00ed      	lsls	r5, r5, #3
 8008a46:	7d23      	ldrb	r3, [r4, #20]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008a48:	f105 0a0c 	add.w	sl, r5, #12
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008a4c:	2b02      	cmp	r3, #2
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008a4e:	44ba      	add	sl, r7
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8008a50:	d10b      	bne.n	8008a6a <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8008a52:	8a63      	ldrh	r3, [r4, #18]
 8008a54:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8008a58:	d913      	bls.n	8008a82 <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8008a5a:	3504      	adds	r5, #4
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	1979      	adds	r1, r7, r5
 8008a60:	f7ff ff96 	bl	8008990 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008a64:	b908      	cbnz	r0, 8008a6a <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8008a66:	2303      	movs	r3, #3
 8008a68:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8008a6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a6e:	464a      	mov	r2, r9
 8008a70:	4641      	mov	r1, r8
 8008a72:	4630      	mov	r0, r6
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	4653      	mov	r3, sl
 8008a78:	f005 fc8a 	bl	800e390 <ethernet_output>
}
 8008a7c:	b004      	add	sp, #16
 8008a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8008a82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8008a86:	d3f0      	bcc.n	8008a6a <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008a88:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008a8a:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008a8c:	4652      	mov	r2, sl
 8008a8e:	4649      	mov	r1, r9
 8008a90:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8008a92:	443d      	add	r5, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <etharp_output_to_arp_index+0xa8>)
 8008a96:	4630      	mov	r0, r6
 8008a98:	9502      	str	r5, [sp, #8]
 8008a9a:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8008a9c:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	464b      	mov	r3, r9
 8008aa2:	f7ff fe4d 	bl	8008740 <etharp_raw>
 8008aa6:	e7dd      	b.n	8008a64 <etharp_output_to_arp_index+0x54>
 8008aa8:	20010110 	.word	0x20010110
 8008aac:	08014308 	.word	0x08014308
 8008ab0:	08014499 	.word	0x08014499
 8008ab4:	080137b4 	.word	0x080137b4
 8008ab8:	080136f6 	.word	0x080136f6

08008abc <etharp_query>:
{
 8008abc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	4688      	mov	r8, r1
 8008ac2:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008ac4:	4601      	mov	r1, r0
{
 8008ac6:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008ac8:	f8d8 0000 	ldr.w	r0, [r8]
 8008acc:	f000 fb9f 	bl	800920e <ip4_addr_isbroadcast_u32>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d16a      	bne.n	8008baa <etharp_query+0xee>
      ip4_addr_ismulticast(ipaddr) ||
 8008ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8008adc:	2ae0      	cmp	r2, #224	; 0xe0
 8008ade:	d064      	beq.n	8008baa <etharp_query+0xee>
      ip4_addr_isany(ipaddr)) {
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d062      	beq.n	8008baa <etharp_query+0xee>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8008ae4:	4632      	mov	r2, r6
 8008ae6:	2101      	movs	r1, #1
 8008ae8:	4640      	mov	r0, r8
 8008aea:	f7ff fd9b 	bl	8008624 <etharp_find_entry>
  if (i_err < 0) {
 8008aee:	1e04      	subs	r4, r0, #0
 8008af0:	da03      	bge.n	8008afa <etharp_query+0x3e>
    return (err_t)i_err;
 8008af2:	b260      	sxtb	r0, r4
}
 8008af4:	b002      	add	sp, #8
 8008af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8008afa:	2c7e      	cmp	r4, #126	; 0x7e
 8008afc:	dd06      	ble.n	8008b0c <etharp_query+0x50>
 8008afe:	4b35      	ldr	r3, [pc, #212]	; (8008bd4 <etharp_query+0x118>)
 8008b00:	f240 32c1 	movw	r2, #961	; 0x3c1
 8008b04:	4934      	ldr	r1, [pc, #208]	; (8008bd8 <etharp_query+0x11c>)
 8008b06:	4835      	ldr	r0, [pc, #212]	; (8008bdc <etharp_query+0x120>)
 8008b08:	f005 fdae 	bl	800e668 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8008b0c:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8008b0e:	4f34      	ldr	r7, [pc, #208]	; (8008be0 <etharp_query+0x124>)
 8008b10:	2318      	movs	r3, #24
 8008b12:	fb03 7304 	mla	r3, r3, r4, r7
 8008b16:	7d1a      	ldrb	r2, [r3, #20]
 8008b18:	2a00      	cmp	r2, #0
 8008b1a:	d155      	bne.n	8008bc8 <etharp_query+0x10c>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008b1c:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 8008b1e:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8008b20:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 8008b22:	4641      	mov	r1, r8
 8008b24:	4630      	mov	r0, r6
 8008b26:	f7ff ff33 	bl	8008990 <etharp_request>
    if (q == NULL) {
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	d0e2      	beq.n	8008af4 <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8008b2e:	2318      	movs	r3, #24
 8008b30:	fb03 7204 	mla	r2, r3, r4, r7
 8008b34:	7d12      	ldrb	r2, [r2, #20]
 8008b36:	2a01      	cmp	r2, #1
 8008b38:	d90e      	bls.n	8008b58 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008b3a:	fb03 7304 	mla	r3, r3, r4, r7
 8008b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b42:	4629      	mov	r1, r5
 8008b44:	4630      	mov	r0, r6
 8008b46:	9200      	str	r2, [sp, #0]
 8008b48:	330c      	adds	r3, #12
 8008b4a:	f106 0226 	add.w	r2, r6, #38	; 0x26
    ETHARP_SET_ADDRHINT(netif, i);
 8008b4e:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8008b52:	f005 fc1d 	bl	800e390 <ethernet_output>
 8008b56:	e7cd      	b.n	8008af4 <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8008b58:	d1cc      	bne.n	8008af4 <etharp_query+0x38>
 8008b5a:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8008b5c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8008bd4 <etharp_query+0x118>
 8008b60:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8008be4 <etharp_query+0x128>
 8008b64:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008bdc <etharp_query+0x120>
 8008b68:	8972      	ldrh	r2, [r6, #10]
 8008b6a:	8933      	ldrh	r3, [r6, #8]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d108      	bne.n	8008b82 <etharp_query+0xc6>
 8008b70:	6833      	ldr	r3, [r6, #0]
 8008b72:	b133      	cbz	r3, 8008b82 <etharp_query+0xc6>
 8008b74:	4643      	mov	r3, r8
 8008b76:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4650      	mov	r0, sl
 8008b7e:	f005 fd73 	bl	800e668 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8008b82:	7b33      	ldrb	r3, [r6, #12]
 8008b84:	065b      	lsls	r3, r3, #25
 8008b86:	d413      	bmi.n	8008bb0 <etharp_query+0xf4>
      p = p->next;
 8008b88:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d1ec      	bne.n	8008b68 <etharp_query+0xac>
      pbuf_ref(p);
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f001 fe82 	bl	800a898 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8008b94:	2618      	movs	r6, #24
 8008b96:	fb06 f304 	mul.w	r3, r6, r4
 8008b9a:	58f8      	ldr	r0, [r7, r3]
 8008b9c:	b108      	cbz	r0, 8008ba2 <etharp_query+0xe6>
        pbuf_free(arp_table[i].q);
 8008b9e:	f001 fd37 	bl	800a610 <pbuf_free>
      arp_table[i].q = p;
 8008ba2:	4374      	muls	r4, r6
      result = ERR_OK;
 8008ba4:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8008ba6:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8008ba8:	e7a4      	b.n	8008af4 <etharp_query+0x38>
    return ERR_ARG;
 8008baa:	f06f 000f 	mvn.w	r0, #15
 8008bae:	e7a1      	b.n	8008af4 <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008bb6:	200e      	movs	r0, #14
 8008bb8:	f001 ff8c 	bl	800aad4 <pbuf_clone>
    if (p != NULL) {
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d1e8      	bne.n	8008b94 <etharp_query+0xd8>
      result = ERR_MEM;
 8008bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc6:	e795      	b.n	8008af4 <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8008bc8:	2d00      	cmp	r5, #0
 8008bca:	d0aa      	beq.n	8008b22 <etharp_query+0x66>
  err_t result = ERR_MEM;
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd0:	e7ad      	b.n	8008b2e <etharp_query+0x72>
 8008bd2:	bf00      	nop
 8008bd4:	08014308 	.word	0x08014308
 8008bd8:	080144c9 	.word	0x080144c9
 8008bdc:	080137b4 	.word	0x080137b4
 8008be0:	20010110 	.word	0x20010110
 8008be4:	080144d7 	.word	0x080144d7

08008be8 <etharp_output>:
{
 8008be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bea:	460e      	mov	r6, r1
 8008bec:	b085      	sub	sp, #20
 8008bee:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008bf0:	4604      	mov	r4, r0
 8008bf2:	b930      	cbnz	r0, 8008c02 <etharp_output+0x1a>
 8008bf4:	4b44      	ldr	r3, [pc, #272]	; (8008d08 <etharp_output+0x120>)
 8008bf6:	f240 321e 	movw	r2, #798	; 0x31e
 8008bfa:	4944      	ldr	r1, [pc, #272]	; (8008d0c <etharp_output+0x124>)
 8008bfc:	4844      	ldr	r0, [pc, #272]	; (8008d10 <etharp_output+0x128>)
 8008bfe:	f005 fd33 	bl	800e668 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8008c02:	b936      	cbnz	r6, 8008c12 <etharp_output+0x2a>
 8008c04:	4b40      	ldr	r3, [pc, #256]	; (8008d08 <etharp_output+0x120>)
 8008c06:	f240 321f 	movw	r2, #799	; 0x31f
 8008c0a:	4942      	ldr	r1, [pc, #264]	; (8008d14 <etharp_output+0x12c>)
 8008c0c:	4840      	ldr	r0, [pc, #256]	; (8008d10 <etharp_output+0x128>)
 8008c0e:	f005 fd2b 	bl	800e668 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8008c12:	b935      	cbnz	r5, 8008c22 <etharp_output+0x3a>
 8008c14:	4b3c      	ldr	r3, [pc, #240]	; (8008d08 <etharp_output+0x120>)
 8008c16:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008c1a:	493f      	ldr	r1, [pc, #252]	; (8008d18 <etharp_output+0x130>)
 8008c1c:	483c      	ldr	r0, [pc, #240]	; (8008d10 <etharp_output+0x128>)
 8008c1e:	f005 fd23 	bl	800e668 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8008c22:	4621      	mov	r1, r4
 8008c24:	6828      	ldr	r0, [r5, #0]
 8008c26:	f000 faf2 	bl	800920e <ip4_addr_isbroadcast_u32>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d167      	bne.n	8008cfe <etharp_output+0x116>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8008c2e:	682b      	ldr	r3, [r5, #0]
 8008c30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c34:	2ae0      	cmp	r2, #224	; 0xe0
 8008c36:	d11e      	bne.n	8008c76 <etharp_output+0x8e>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008c38:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8008c3a:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8008c3e:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8008c42:	235e      	movs	r3, #94	; 0x5e
 8008c44:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8008c48:	786b      	ldrb	r3, [r5, #1]
 8008c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c4e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8008c52:	78ab      	ldrb	r3, [r5, #2]
 8008c54:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8008c58:	78eb      	ldrb	r3, [r5, #3]
 8008c5a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8008c5e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8008c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c64:	4631      	mov	r1, r6
 8008c66:	4620      	mov	r0, r4
 8008c68:	9200      	str	r2, [sp, #0]
 8008c6a:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8008c6e:	f005 fb8f 	bl	800e390 <ethernet_output>
}
 8008c72:	b005      	add	sp, #20
 8008c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008c76:	6862      	ldr	r2, [r4, #4]
 8008c78:	68a1      	ldr	r1, [r4, #8]
 8008c7a:	405a      	eors	r2, r3
 8008c7c:	420a      	tst	r2, r1
 8008c7e:	d009      	beq.n	8008c94 <etharp_output+0xac>
        !ip4_addr_islinklocal(ipaddr)) {
 8008c80:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8008c82:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <etharp_output+0xac>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8008c8a:	68e3      	ldr	r3, [r4, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d038      	beq.n	8008d02 <etharp_output+0x11a>
            dst_addr = netif_ip4_gw(netif);
 8008c90:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8008c94:	4821      	ldr	r0, [pc, #132]	; (8008d1c <etharp_output+0x134>)
 8008c96:	2318      	movs	r3, #24
 8008c98:	f890 20f0 	ldrb.w	r2, [r0, #240]	; 0xf0
 8008c9c:	fb03 0302 	mla	r3, r3, r2, r0
 8008ca0:	7d19      	ldrb	r1, [r3, #20]
 8008ca2:	2901      	cmp	r1, #1
 8008ca4:	d90d      	bls.n	8008cc2 <etharp_output+0xda>
 8008ca6:	6899      	ldr	r1, [r3, #8]
 8008ca8:	42a1      	cmp	r1, r4
 8008caa:	d10a      	bne.n	8008cc2 <etharp_output+0xda>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8008cac:	6829      	ldr	r1, [r5, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	4299      	cmp	r1, r3
 8008cb2:	d106      	bne.n	8008cc2 <etharp_output+0xda>
        return etharp_output_to_arp_index(netif, q, i);
 8008cb4:	4631      	mov	r1, r6
 8008cb6:	4620      	mov	r0, r4
}
 8008cb8:	b005      	add	sp, #20
 8008cba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return etharp_output_to_arp_index(netif, q, i);
 8008cbe:	f7ff bea7 	b.w	8008a10 <etharp_output_to_arp_index>
 8008cc2:	4b16      	ldr	r3, [pc, #88]	; (8008d1c <etharp_output+0x134>)
{
 8008cc4:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8008cc6:	7d1f      	ldrb	r7, [r3, #20]
 8008cc8:	fa5f fc81 	uxtb.w	ip, r1
 8008ccc:	2f01      	cmp	r7, #1
 8008cce:	d90a      	bls.n	8008ce6 <etharp_output+0xfe>
 8008cd0:	689f      	ldr	r7, [r3, #8]
 8008cd2:	42a7      	cmp	r7, r4
 8008cd4:	d107      	bne.n	8008ce6 <etharp_output+0xfe>
          (arp_table[i].netif == netif) &&
 8008cd6:	685f      	ldr	r7, [r3, #4]
 8008cd8:	682a      	ldr	r2, [r5, #0]
 8008cda:	42ba      	cmp	r2, r7
 8008cdc:	d103      	bne.n	8008ce6 <etharp_output+0xfe>
        return etharp_output_to_arp_index(netif, q, i);
 8008cde:	4662      	mov	r2, ip
        ETHARP_SET_ADDRHINT(netif, i);
 8008ce0:	f880 c0f0 	strb.w	ip, [r0, #240]	; 0xf0
        return etharp_output_to_arp_index(netif, q, i);
 8008ce4:	e7e6      	b.n	8008cb4 <etharp_output+0xcc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8008ce6:	3101      	adds	r1, #1
 8008ce8:	3318      	adds	r3, #24
 8008cea:	290a      	cmp	r1, #10
 8008cec:	d1eb      	bne.n	8008cc6 <etharp_output+0xde>
    return etharp_query(netif, dst_addr, q);
 8008cee:	4632      	mov	r2, r6
 8008cf0:	4629      	mov	r1, r5
 8008cf2:	4620      	mov	r0, r4
}
 8008cf4:	b005      	add	sp, #20
 8008cf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return etharp_query(netif, dst_addr, q);
 8008cfa:	f7ff bedf 	b.w	8008abc <etharp_query>
    dest = (const struct eth_addr *)&ethbroadcast;
 8008cfe:	4b08      	ldr	r3, [pc, #32]	; (8008d20 <etharp_output+0x138>)
 8008d00:	e7ae      	b.n	8008c60 <etharp_output+0x78>
            return ERR_RTE;
 8008d02:	f06f 0003 	mvn.w	r0, #3
 8008d06:	e7b4      	b.n	8008c72 <etharp_output+0x8a>
 8008d08:	08014308 	.word	0x08014308
 8008d0c:	080137a6 	.word	0x080137a6
 8008d10:	080137b4 	.word	0x080137b4
 8008d14:	08014f7c 	.word	0x08014f7c
 8008d18:	08014456 	.word	0x08014456
 8008d1c:	20010110 	.word	0x20010110
 8008d20:	080136f0 	.word	0x080136f0

08008d24 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8008d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d26:	4604      	mov	r4, r0
 8008d28:	b087      	sub	sp, #28
 8008d2a:	460f      	mov	r7, r1
 8008d2c:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8008d2e:	2124      	movs	r1, #36	; 0x24
 8008d30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008d34:	2022      	movs	r0, #34	; 0x22
 8008d36:	f001 fcd3 	bl	800a6e0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	b390      	cbz	r0, 8008da4 <icmp_send_response+0x80>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8008d3e:	8943      	ldrh	r3, [r0, #10]
 8008d40:	2b23      	cmp	r3, #35	; 0x23
 8008d42:	d806      	bhi.n	8008d52 <icmp_send_response+0x2e>
 8008d44:	4b18      	ldr	r3, [pc, #96]	; (8008da8 <icmp_send_response+0x84>)
 8008d46:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8008d4a:	4918      	ldr	r1, [pc, #96]	; (8008dac <icmp_send_response+0x88>)
 8008d4c:	4818      	ldr	r0, [pc, #96]	; (8008db0 <icmp_send_response+0x8c>)
 8008d4e:	f005 fc8b 	bl	800e668 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8008d52:	6860      	ldr	r0, [r4, #4]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8008d54:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8008d56:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008d58:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8008d5c:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008d5e:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8008d62:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8008d64:	71a3      	strb	r3, [r4, #6]
 8008d66:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008d68:	4603      	mov	r3, r0
  icmphdr->type = type;
 8008d6a:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8008d6c:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8008d6e:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d72:	428b      	cmp	r3, r1
 8008d74:	f842 6b04 	str.w	r6, [r2], #4
 8008d78:	d1f9      	bne.n	8008d6e <icmp_send_response+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8008d7a:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8008d7c:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8008d7e:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8008d80:	f000 f8d6 	bl	8008f30 <ip4_route>
#endif
  if (netif != NULL) {
 8008d84:	b158      	cbz	r0, 8008d9e <icmp_send_response+0x7a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8008d86:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008d88:	2301      	movs	r3, #1
 8008d8a:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 8008d8c:	70a1      	strb	r1, [r4, #2]
 8008d8e:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8008d90:	9002      	str	r0, [sp, #8]
 8008d92:	4628      	mov	r0, r5
 8008d94:	e9cd 1300 	strd	r1, r3, [sp]
 8008d98:	23ff      	movs	r3, #255	; 0xff
 8008d9a:	f000 fa27 	bl	80091ec <ip4_output_if>
  }
  pbuf_free(q);
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f001 fc36 	bl	800a610 <pbuf_free>
}
 8008da4:	b007      	add	sp, #28
 8008da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da8:	080144f1 	.word	0x080144f1
 8008dac:	08014569 	.word	0x08014569
 8008db0:	080137b4 	.word	0x080137b4

08008db4 <icmp_input>:
{
 8008db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8008db8:	4f46      	ldr	r7, [pc, #280]	; (8008ed4 <icmp_input+0x120>)
{
 8008dba:	b087      	sub	sp, #28
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	4688      	mov	r8, r1
  iphdr_in = ip4_current_header();
 8008dc0:	f8d7 9008 	ldr.w	r9, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8008dc4:	f899 5000 	ldrb.w	r5, [r9]
 8008dc8:	f005 050f 	and.w	r5, r5, #15
 8008dcc:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8008dce:	2d13      	cmp	r5, #19
 8008dd0:	d916      	bls.n	8008e00 <icmp_input+0x4c>
  if (p->len < sizeof(u16_t) * 2) {
 8008dd2:	8943      	ldrh	r3, [r0, #10]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d913      	bls.n	8008e00 <icmp_input+0x4c>
  type = *((u8_t *)p->payload);
 8008dd8:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d10f      	bne.n	8008e00 <icmp_input+0x4c>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008de0:	6978      	ldr	r0, [r7, #20]
 8008de2:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008de6:	2be0      	cmp	r3, #224	; 0xe0
 8008de8:	d00a      	beq.n	8008e00 <icmp_input+0x4c>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	f000 fa0f 	bl	800920e <ip4_addr_isbroadcast_u32>
 8008df0:	b930      	cbnz	r0, 8008e00 <icmp_input+0x4c>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8008df2:	8923      	ldrh	r3, [r4, #8]
 8008df4:	2b07      	cmp	r3, #7
 8008df6:	d903      	bls.n	8008e00 <icmp_input+0x4c>
        if (inet_chksum_pbuf(p) != 0) {
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fe7f 	bl	8009afc <inet_chksum_pbuf>
 8008dfe:	b128      	cbz	r0, 8008e0c <icmp_input+0x58>
  pbuf_free(p);
 8008e00:	4620      	mov	r0, r4
}
 8008e02:	b007      	add	sp, #28
 8008e04:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8008e08:	f001 bc02 	b.w	800a610 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008e0c:	f105 010e 	add.w	r1, r5, #14
 8008e10:	4620      	mov	r0, r4
 8008e12:	9105      	str	r1, [sp, #20]
 8008e14:	f001 fbc4 	bl	800a5a0 <pbuf_add_header>
 8008e18:	9905      	ldr	r1, [sp, #20]
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d04e      	beq.n	8008ebc <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8008e1e:	8923      	ldrh	r3, [r4, #8]
 8008e20:	1959      	adds	r1, r3, r5
 8008e22:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8008e24:	428b      	cmp	r3, r1
 8008e26:	d8eb      	bhi.n	8008e00 <icmp_input+0x4c>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8008e28:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008e2c:	200e      	movs	r0, #14
 8008e2e:	f001 fc57 	bl	800a6e0 <pbuf_alloc>
        if (r == NULL) {
 8008e32:	4606      	mov	r6, r0
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d0e3      	beq.n	8008e00 <icmp_input+0x4c>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8008e38:	8942      	ldrh	r2, [r0, #10]
 8008e3a:	f105 0308 	add.w	r3, r5, #8
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d203      	bcs.n	8008e4a <icmp_input+0x96>
          pbuf_free(r);
 8008e42:	4630      	mov	r0, r6
 8008e44:	f001 fbe4 	bl	800a610 <pbuf_free>
          goto icmperr;
 8008e48:	e7da      	b.n	8008e00 <icmp_input+0x4c>
        MEMCPY(r->payload, iphdr_in, hlen);
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	462a      	mov	r2, r5
 8008e4e:	6840      	ldr	r0, [r0, #4]
 8008e50:	f005 fbf4 	bl	800e63c <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8008e54:	4629      	mov	r1, r5
 8008e56:	4630      	mov	r0, r6
 8008e58:	f001 fba6 	bl	800a5a8 <pbuf_remove_header>
 8008e5c:	b130      	cbz	r0, 8008e6c <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8008e5e:	4b1e      	ldr	r3, [pc, #120]	; (8008ed8 <icmp_input+0x124>)
 8008e60:	22b6      	movs	r2, #182	; 0xb6
 8008e62:	491e      	ldr	r1, [pc, #120]	; (8008edc <icmp_input+0x128>)
 8008e64:	481e      	ldr	r0, [pc, #120]	; (8008ee0 <icmp_input+0x12c>)
 8008e66:	f005 fbff 	bl	800e668 <iprintf>
          pbuf_free(r);
 8008e6a:	e7ea      	b.n	8008e42 <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f001 fd68 	bl	800a944 <pbuf_copy>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d1e4      	bne.n	8008e42 <icmp_input+0x8e>
        pbuf_free(p);
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4634      	mov	r4, r6
 8008e7c:	f001 fbc8 	bl	800a610 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8008e80:	4629      	mov	r1, r5
 8008e82:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8008e84:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8008e86:	f001 fb8b 	bl	800a5a0 <pbuf_add_header>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d1b8      	bne.n	8008e00 <icmp_input+0x4c>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8008e8e:	6862      	ldr	r2, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 8008e90:	697b      	ldr	r3, [r7, #20]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008e92:	4914      	ldr	r1, [pc, #80]	; (8008ee4 <icmp_input+0x130>)
        ip4_addr_copy(iphdr->src, *src);
 8008e94:	60d3      	str	r3, [r2, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	6113      	str	r3, [r2, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008e9a:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8008e9c:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8008e9e:	70b0      	strb	r0, [r6, #2]
 8008ea0:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8008ea2:	7213      	strb	r3, [r2, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8008ea4:	7290      	strb	r0, [r2, #10]
 8008ea6:	72d0      	strb	r0, [r2, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f8cd 8008 	str.w	r8, [sp, #8]
 8008eae:	e9cd 0200 	strd	r0, r2, [sp]
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f000 f999 	bl	80091ec <ip4_output_if>
  pbuf_free(p);
 8008eba:	e7a1      	b.n	8008e00 <icmp_input+0x4c>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f001 fb73 	bl	800a5a8 <pbuf_remove_header>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d0dc      	beq.n	8008e80 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8008ec6:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <icmp_input+0x124>)
 8008ec8:	22c7      	movs	r2, #199	; 0xc7
 8008eca:	4907      	ldr	r1, [pc, #28]	; (8008ee8 <icmp_input+0x134>)
 8008ecc:	4804      	ldr	r0, [pc, #16]	; (8008ee0 <icmp_input+0x12c>)
 8008ece:	f005 fbcb 	bl	800e668 <iprintf>
          goto icmperr;
 8008ed2:	e795      	b.n	8008e00 <icmp_input+0x4c>
 8008ed4:	2001021c 	.word	0x2001021c
 8008ed8:	080144f1 	.word	0x080144f1
 8008edc:	08014595 	.word	0x08014595
 8008ee0:	080137b4 	.word	0x080137b4
 8008ee4:	20010230 	.word	0x20010230
 8008ee8:	080145ca 	.word	0x080145ca

08008eec <icmp_dest_unreach>:
{
 8008eec:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8008eee:	2103      	movs	r1, #3
 8008ef0:	f7ff bf18 	b.w	8008d24 <icmp_send_response>

08008ef4 <icmp_time_exceeded>:
{
 8008ef4:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8008ef6:	210b      	movs	r1, #11
 8008ef8:	f7ff bf14 	b.w	8008d24 <icmp_send_response>

08008efc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8008efc:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008efe:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
 8008f02:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8008f04:	f013 0301 	ands.w	r3, r3, #1
 8008f08:	d00b      	beq.n	8008f22 <ip4_input_accept+0x26>
 8008f0a:	6843      	ldr	r3, [r0, #4]
 8008f0c:	b14b      	cbz	r3, 8008f22 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008f0e:	4a07      	ldr	r2, [pc, #28]	; (8008f2c <ip4_input_accept+0x30>)
 8008f10:	6950      	ldr	r0, [r2, #20]
 8008f12:	4283      	cmp	r3, r0
 8008f14:	d007      	beq.n	8008f26 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8008f16:	f000 f97a 	bl	800920e <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8008f1a:	3800      	subs	r0, #0
 8008f1c:	bf18      	it	ne
 8008f1e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8008f20:	bd08      	pop	{r3, pc}
  return 0;
 8008f22:	4618      	mov	r0, r3
 8008f24:	e7fc      	b.n	8008f20 <ip4_input_accept+0x24>
      return 1;
 8008f26:	2001      	movs	r0, #1
 8008f28:	e7fa      	b.n	8008f20 <ip4_input_accept+0x24>
 8008f2a:	bf00      	nop
 8008f2c:	2001021c 	.word	0x2001021c

08008f30 <ip4_route>:
  NETIF_FOREACH(netif) {
 8008f30:	4b14      	ldr	r3, [pc, #80]	; (8008f84 <ip4_route+0x54>)
{
 8008f32:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8008f34:	6818      	ldr	r0, [r3, #0]
{
 8008f36:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008f38:	b978      	cbnz	r0, 8008f5a <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8008f3a:	4b13      	ldr	r3, [pc, #76]	; (8008f88 <ip4_route+0x58>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	b15b      	cbz	r3, 8008f58 <ip4_route+0x28>
 8008f40:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8008f44:	f001 0105 	and.w	r1, r1, #5
 8008f48:	2905      	cmp	r1, #5
 8008f4a:	d105      	bne.n	8008f58 <ip4_route+0x28>
 8008f4c:	6859      	ldr	r1, [r3, #4]
 8008f4e:	b119      	cbz	r1, 8008f58 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8008f50:	7812      	ldrb	r2, [r2, #0]
 8008f52:	2a7f      	cmp	r2, #127	; 0x7f
 8008f54:	bf18      	it	ne
 8008f56:	4618      	movne	r0, r3
}
 8008f58:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008f5a:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 8008f5e:	07cd      	lsls	r5, r1, #31
 8008f60:	d50d      	bpl.n	8008f7e <ip4_route+0x4e>
 8008f62:	074c      	lsls	r4, r1, #29
 8008f64:	d50b      	bpl.n	8008f7e <ip4_route+0x4e>
 8008f66:	6843      	ldr	r3, [r0, #4]
 8008f68:	b14b      	cbz	r3, 8008f7e <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8008f6a:	6814      	ldr	r4, [r2, #0]
 8008f6c:	6885      	ldr	r5, [r0, #8]
 8008f6e:	4063      	eors	r3, r4
 8008f70:	422b      	tst	r3, r5
 8008f72:	d0f1      	beq.n	8008f58 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8008f74:	078b      	lsls	r3, r1, #30
 8008f76:	d402      	bmi.n	8008f7e <ip4_route+0x4e>
 8008f78:	68c3      	ldr	r3, [r0, #12]
 8008f7a:	429c      	cmp	r4, r3
 8008f7c:	d0ec      	beq.n	8008f58 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8008f7e:	6800      	ldr	r0, [r0, #0]
 8008f80:	e7da      	b.n	8008f38 <ip4_route+0x8>
 8008f82:	bf00      	nop
 8008f84:	20014004 	.word	0x20014004
 8008f88:	20014008 	.word	0x20014008

08008f8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8008f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8008f90:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8008f94:	4604      	mov	r4, r0
 8008f96:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8008f98:	f898 5000 	ldrb.w	r5, [r8]
 8008f9c:	092b      	lsrs	r3, r5, #4
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d005      	beq.n	8008fae <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f001 fb34 	bl	800a610 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8008fa8:	2000      	movs	r0, #0
 8008faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008fae:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008fb2:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008fb6:	f000 fd6f 	bl	8009a98 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8008fba:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008fbc:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8008fc0:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8008fc2:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8008fc4:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8008fc6:	d903      	bls.n	8008fd0 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8008fc8:	4601      	mov	r1, r0
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f001 fc04 	bl	800a7d8 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8008fd0:	8963      	ldrh	r3, [r4, #10]
 8008fd2:	42ab      	cmp	r3, r5
 8008fd4:	d3e5      	bcc.n	8008fa2 <ip4_input+0x16>
 8008fd6:	8923      	ldrh	r3, [r4, #8]
 8008fd8:	42bb      	cmp	r3, r7
 8008fda:	d3e2      	bcc.n	8008fa2 <ip4_input+0x16>
 8008fdc:	2d13      	cmp	r5, #19
 8008fde:	d9e0      	bls.n	8008fa2 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8008fe0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008fe4:	4d41      	ldr	r5, [pc, #260]	; (80090ec <ip4_input+0x160>)
 8008fe6:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008fec:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ff0:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8008ff2:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8008ff4:	d13c      	bne.n	8009070 <ip4_input+0xe4>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8008ff6:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8008ffa:	07db      	lsls	r3, r3, #31
 8008ffc:	d543      	bpl.n	8009086 <ip4_input+0xfa>
 8008ffe:	6873      	ldr	r3, [r6, #4]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d040      	beq.n	8009086 <ip4_input+0xfa>
      netif = NULL;
 8009004:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009006:	4631      	mov	r1, r6
 8009008:	6928      	ldr	r0, [r5, #16]
 800900a:	f000 f900 	bl	800920e <ip4_addr_isbroadcast_u32>
 800900e:	2800      	cmp	r0, #0
 8009010:	d1c7      	bne.n	8008fa2 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8009012:	692b      	ldr	r3, [r5, #16]
 8009014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009018:	2be0      	cmp	r3, #224	; 0xe0
 800901a:	d0c2      	beq.n	8008fa2 <ip4_input+0x16>
  if (netif == NULL) {
 800901c:	2f00      	cmp	r7, #0
 800901e:	d0c0      	beq.n	8008fa2 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8009020:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009024:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009028:	b13b      	cbz	r3, 800903a <ip4_input+0xae>
    p = ip4_reass(p);
 800902a:	4620      	mov	r0, r4
 800902c:	f000 fa72 	bl	8009514 <ip4_reass>
    if (p == NULL) {
 8009030:	4604      	mov	r4, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d0b8      	beq.n	8008fa8 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8009036:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800903a:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800903e:	4649      	mov	r1, r9
 8009040:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8009042:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009046:	f898 3000 	ldrb.w	r3, [r8]
 800904a:	f003 030f 	and.w	r3, r3, #15
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8009052:	f001 faa9 	bl	800a5a8 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8009056:	f898 3009 	ldrb.w	r3, [r8, #9]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d02b      	beq.n	80090b6 <ip4_input+0x12a>
 800905e:	2b11      	cmp	r3, #17
 8009060:	d01d      	beq.n	800909e <ip4_input+0x112>
 8009062:	2b01      	cmp	r3, #1
 8009064:	d12c      	bne.n	80090c0 <ip4_input+0x134>
        icmp_input(p, inp);
 8009066:	4631      	mov	r1, r6
 8009068:	4620      	mov	r0, r4
 800906a:	f7ff fea3 	bl	8008db4 <icmp_input>
        break;
 800906e:	e01a      	b.n	80090a6 <ip4_input+0x11a>
    if (ip4_input_accept(inp)) {
 8009070:	4630      	mov	r0, r6
 8009072:	f7ff ff43 	bl	8008efc <ip4_input_accept>
 8009076:	2800      	cmp	r0, #0
 8009078:	d1c4      	bne.n	8009004 <ip4_input+0x78>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800907a:	7d2b      	ldrb	r3, [r5, #20]
 800907c:	2b7f      	cmp	r3, #127	; 0x7f
 800907e:	d002      	beq.n	8009086 <ip4_input+0xfa>
        NETIF_FOREACH(netif) {
 8009080:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <ip4_input+0x164>)
 8009082:	681f      	ldr	r7, [r3, #0]
 8009084:	b90f      	cbnz	r7, 800908a <ip4_input+0xfe>
      netif = NULL;
 8009086:	2700      	movs	r7, #0
 8009088:	e7bd      	b.n	8009006 <ip4_input+0x7a>
          if (netif == inp) {
 800908a:	42b7      	cmp	r7, r6
 800908c:	d101      	bne.n	8009092 <ip4_input+0x106>
        NETIF_FOREACH(netif) {
 800908e:	683f      	ldr	r7, [r7, #0]
 8009090:	e7f8      	b.n	8009084 <ip4_input+0xf8>
          if (ip4_input_accept(netif)) {
 8009092:	4638      	mov	r0, r7
 8009094:	f7ff ff32 	bl	8008efc <ip4_input_accept>
 8009098:	2800      	cmp	r0, #0
 800909a:	d0f8      	beq.n	800908e <ip4_input+0x102>
 800909c:	e7b3      	b.n	8009006 <ip4_input+0x7a>
        udp_input(p, inp);
 800909e:	4631      	mov	r1, r6
 80090a0:	4620      	mov	r0, r4
 80090a2:	f004 ffaf 	bl	800e004 <udp_input>
  ip_data.current_netif = NULL;
 80090a6:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 80090a8:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 80090ac:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 80090ae:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 80090b0:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 80090b4:	e778      	b.n	8008fa8 <ip4_input+0x1c>
        tcp_input(p, inp);
 80090b6:	4631      	mov	r1, r6
 80090b8:	4620      	mov	r0, r4
 80090ba:	f003 f86b 	bl	800c194 <tcp_input>
        break;
 80090be:	e7f2      	b.n	80090a6 <ip4_input+0x11a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80090c0:	4639      	mov	r1, r7
 80090c2:	6968      	ldr	r0, [r5, #20]
 80090c4:	f000 f8a3 	bl	800920e <ip4_addr_isbroadcast_u32>
 80090c8:	b960      	cbnz	r0, 80090e4 <ip4_input+0x158>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80090ca:	696b      	ldr	r3, [r5, #20]
 80090cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80090d0:	2be0      	cmp	r3, #224	; 0xe0
 80090d2:	d007      	beq.n	80090e4 <ip4_input+0x158>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80090d4:	4649      	mov	r1, r9
 80090d6:	4620      	mov	r0, r4
 80090d8:	f001 fa92 	bl	800a600 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80090dc:	2102      	movs	r1, #2
 80090de:	4620      	mov	r0, r4
 80090e0:	f7ff ff04 	bl	8008eec <icmp_dest_unreach>
        pbuf_free(p);
 80090e4:	4620      	mov	r0, r4
 80090e6:	f001 fa93 	bl	800a610 <pbuf_free>
        break;
 80090ea:	e7dc      	b.n	80090a6 <ip4_input+0x11a>
 80090ec:	2001021c 	.word	0x2001021c
 80090f0:	20014004 	.word	0x20014004

080090f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80090f4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	4698      	mov	r8, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80090fa:	7b83      	ldrb	r3, [r0, #14]
{
 80090fc:	4604      	mov	r4, r0
 80090fe:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009100:	2b01      	cmp	r3, #1
{
 8009102:	4616      	mov	r6, r2
 8009104:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009106:	d006      	beq.n	8009116 <ip4_output_if_src+0x22>
 8009108:	4b32      	ldr	r3, [pc, #200]	; (80091d4 <ip4_output_if_src+0xe0>)
 800910a:	f44f 7255 	mov.w	r2, #852	; 0x354
 800910e:	4932      	ldr	r1, [pc, #200]	; (80091d8 <ip4_output_if_src+0xe4>)
 8009110:	4832      	ldr	r0, [pc, #200]	; (80091dc <ip4_output_if_src+0xe8>)
 8009112:	f005 faa9 	bl	800e668 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009116:	2e00      	cmp	r6, #0
 8009118:	d04e      	beq.n	80091b8 <ip4_output_if_src+0xc4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800911a:	2114      	movs	r1, #20
 800911c:	4620      	mov	r0, r4
 800911e:	f001 fa3f 	bl	800a5a0 <pbuf_add_header>
 8009122:	b120      	cbz	r0, 800912e <ip4_output_if_src+0x3a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8009124:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8009128:	b002      	add	sp, #8
 800912a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800912e:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8009130:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009132:	2b13      	cmp	r3, #19
 8009134:	d806      	bhi.n	8009144 <ip4_output_if_src+0x50>
 8009136:	4b27      	ldr	r3, [pc, #156]	; (80091d4 <ip4_output_if_src+0xe0>)
 8009138:	f44f 7262 	mov.w	r2, #904	; 0x388
 800913c:	4928      	ldr	r1, [pc, #160]	; (80091e0 <ip4_output_if_src+0xec>)
 800913e:	4827      	ldr	r0, [pc, #156]	; (80091dc <ip4_output_if_src+0xe8>)
 8009140:	f005 fa92 	bl	800e668 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 8009144:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8009148:	f885 8008 	strb.w	r8, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 800914c:	f04f 0800 	mov.w	r8, #0
    IPH_PROTO_SET(iphdr, proto);
 8009150:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8009152:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009154:	f8df a090 	ldr.w	sl, [pc, #144]	; 80091e8 <ip4_output_if_src+0xf4>
    ip4_addr_copy(iphdr->dest, *dest);
 8009158:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800915a:	2345      	movs	r3, #69	; 0x45
 800915c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800915e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009162:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009164:	8920      	ldrh	r0, [r4, #8]
 8009166:	f000 fc97 	bl	8009a98 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800916a:	f885 8006 	strb.w	r8, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800916e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8009170:	f885 8007 	strb.w	r8, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009174:	f8ba 0000 	ldrh.w	r0, [sl]
 8009178:	f000 fc8e 	bl	8009a98 <lwip_htons>
    ++ip_id;
 800917c:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009180:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8009182:	3301      	adds	r3, #1
 8009184:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 8009188:	f1b9 0f00 	cmp.w	r9, #0
 800918c:	d111      	bne.n	80091b2 <ip4_output_if_src+0xbe>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800918e:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <ip4_output_if_src+0xf0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8009194:	f885 800a 	strb.w	r8, [r5, #10]
 8009198:	f885 800b 	strb.w	r8, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800919c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800919e:	b19b      	cbz	r3, 80091c8 <ip4_output_if_src+0xd4>
 80091a0:	8922      	ldrh	r2, [r4, #8]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d910      	bls.n	80091c8 <ip4_output_if_src+0xd4>
    return ip4_frag(p, netif, dest);
 80091a6:	4632      	mov	r2, r6
 80091a8:	4639      	mov	r1, r7
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fb88 	bl	80098c0 <ip4_frag>
 80091b0:	e7ba      	b.n	8009128 <ip4_output_if_src+0x34>
      ip4_addr_copy(iphdr->src, *src);
 80091b2:	f8d9 3000 	ldr.w	r3, [r9]
 80091b6:	e7ec      	b.n	8009192 <ip4_output_if_src+0x9e>
    if (p->len < IP_HLEN) {
 80091b8:	8963      	ldrh	r3, [r4, #10]
 80091ba:	2b13      	cmp	r3, #19
 80091bc:	d9b2      	bls.n	8009124 <ip4_output_if_src+0x30>
    ip4_addr_copy(dest_addr, iphdr->dest);
 80091be:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 80091c0:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 80091c2:	691b      	ldr	r3, [r3, #16]
 80091c4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 80091c6:	e7e9      	b.n	800919c <ip4_output_if_src+0xa8>
  return netif->output(netif, p, dest);
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	4632      	mov	r2, r6
 80091cc:	4621      	mov	r1, r4
 80091ce:	4638      	mov	r0, r7
 80091d0:	4798      	blx	r3
 80091d2:	e7a9      	b.n	8009128 <ip4_output_if_src+0x34>
 80091d4:	080145fc 	.word	0x080145fc
 80091d8:	08014673 	.word	0x08014673
 80091dc:	080137b4 	.word	0x080137b4
 80091e0:	0801467f 	.word	0x0801467f
 80091e4:	080135b0 	.word	0x080135b0
 80091e8:	20010202 	.word	0x20010202

080091ec <ip4_output_if>:
{
 80091ec:	b4f0      	push	{r4, r5, r6, r7}
 80091ee:	9c06      	ldr	r4, [sp, #24]
 80091f0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80091f4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80091f8:	b11a      	cbz	r2, 8009202 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 80091fa:	b109      	cbz	r1, 8009200 <ip4_output_if+0x14>
 80091fc:	680f      	ldr	r7, [r1, #0]
 80091fe:	b907      	cbnz	r7, 8009202 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8009200:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009202:	9504      	str	r5, [sp, #16]
 8009204:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8009208:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800920a:	f7ff bf73 	b.w	80090f4 <ip4_output_if_src>

0800920e <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800920e:	1e43      	subs	r3, r0, #1
{
 8009210:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8009212:	3303      	adds	r3, #3
 8009214:	d812      	bhi.n	800923c <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009216:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800921a:	f013 0002 	ands.w	r0, r3, #2
 800921e:	d010      	beq.n	8009242 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009220:	684b      	ldr	r3, [r1, #4]
 8009222:	4293      	cmp	r3, r2
 8009224:	d00c      	beq.n	8009240 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009226:	6888      	ldr	r0, [r1, #8]
 8009228:	4053      	eors	r3, r2
 800922a:	4203      	tst	r3, r0
 800922c:	d108      	bne.n	8009240 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800922e:	43c3      	mvns	r3, r0
 8009230:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009234:	1ac3      	subs	r3, r0, r3
 8009236:	4258      	negs	r0, r3
 8009238:	4158      	adcs	r0, r3
 800923a:	4770      	bx	lr
    return 1;
 800923c:	2001      	movs	r0, #1
 800923e:	4770      	bx	lr
    return 0;
 8009240:	2000      	movs	r0, #0
  }
}
 8009242:	4770      	bx	lr

08009244 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8009244:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8009248:	6803      	ldr	r3, [r0, #0]
 800924a:	f10d 0c04 	add.w	ip, sp, #4

  rp = buf;
 800924e:	460d      	mov	r5, r1
  s_addr = ip4_addr_get_u32(addr);
 8009250:	2004      	movs	r0, #4
  int len = 0;
 8009252:	2600      	movs	r6, #0
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8009254:	f04f 0e0a 	mov.w	lr, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8009258:	f04f 082e 	mov.w	r8, #46	; 0x2e
  s_addr = ip4_addr_get_u32(addr);
 800925c:	9301      	str	r3, [sp, #4]
  for (n = 0; n < 4; n++) {
 800925e:	f81c 4b01 	ldrb.w	r4, [ip], #1
    i = 0;
 8009262:	2700      	movs	r7, #0
      rem = *ap % (u8_t)10;
 8009264:	46a2      	mov	sl, r4
 8009266:	fbb4 f3fe 	udiv	r3, r4, lr
 800926a:	fb0e 4913 	mls	r9, lr, r3, r4
      *ap /= (u8_t)10;
 800926e:	b2dc      	uxtb	r4, r3
      inv[i++] = (char)('0' + rem);
 8009270:	463b      	mov	r3, r7
    } while (*ap);
 8009272:	f1ba 0f09 	cmp.w	sl, #9
      inv[i++] = (char)('0' + rem);
 8009276:	f107 0701 	add.w	r7, r7, #1
 800927a:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800927e:	f103 0b08 	add.w	fp, r3, #8
 8009282:	b2ff      	uxtb	r7, r7
 8009284:	44eb      	add	fp, sp
 8009286:	f80b 9c08 	strb.w	r9, [fp, #-8]
    } while (*ap);
 800928a:	d8eb      	bhi.n	8009264 <ip4addr_ntoa_r+0x20>
 800928c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009290:	4637      	mov	r7, r6
 8009292:	462c      	mov	r4, r5
    while (i--) {
 8009294:	2bff      	cmp	r3, #255	; 0xff
      if (len++ >= buflen) {
 8009296:	f106 0601 	add.w	r6, r6, #1
    while (i--) {
 800929a:	d10d      	bne.n	80092b8 <ip4addr_ntoa_r+0x74>
    if (len++ >= buflen) {
 800929c:	4297      	cmp	r7, r2
 800929e:	da18      	bge.n	80092d2 <ip4addr_ntoa_r+0x8e>
  for (n = 0; n < 4; n++) {
 80092a0:	3801      	subs	r0, #1
    *rp++ = '.';
 80092a2:	4625      	mov	r5, r4
  for (n = 0; n < 4; n++) {
 80092a4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    *rp++ = '.';
 80092a8:	f805 8b01 	strb.w	r8, [r5], #1
  for (n = 0; n < 4; n++) {
 80092ac:	d1d7      	bne.n	800925e <ip4addr_ntoa_r+0x1a>
    ap++;
  }
  *--rp = 0;
 80092ae:	7020      	strb	r0, [r4, #0]
  return buf;
 80092b0:	4608      	mov	r0, r1
}
 80092b2:	b003      	add	sp, #12
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (len++ >= buflen) {
 80092b8:	1e5d      	subs	r5, r3, #1
 80092ba:	4297      	cmp	r7, r2
 80092bc:	b2ed      	uxtb	r5, r5
 80092be:	da08      	bge.n	80092d2 <ip4addr_ntoa_r+0x8e>
      *rp++ = inv[i];
 80092c0:	3308      	adds	r3, #8
      if (len++ >= buflen) {
 80092c2:	4637      	mov	r7, r6
      *rp++ = inv[i];
 80092c4:	446b      	add	r3, sp
 80092c6:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80092ca:	f804 3b01 	strb.w	r3, [r4], #1
 80092ce:	462b      	mov	r3, r5
 80092d0:	e7e0      	b.n	8009294 <ip4addr_ntoa_r+0x50>
        return NULL;
 80092d2:	2000      	movs	r0, #0
 80092d4:	e7ed      	b.n	80092b2 <ip4addr_ntoa_r+0x6e>
	...

080092d8 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80092d8:	2210      	movs	r2, #16
 80092da:	4901      	ldr	r1, [pc, #4]	; (80092e0 <ip4addr_ntoa+0x8>)
 80092dc:	f7ff bfb2 	b.w	8009244 <ip4addr_ntoa_r>
 80092e0:	20010204 	.word	0x20010204

080092e4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80092e4:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80092e6:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <ip_reass_dequeue_datagram+0x34>)
{
 80092e8:	4604      	mov	r4, r0
 80092ea:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4282      	cmp	r2, r0
 80092f0:	d107      	bne.n	8009302 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80092f2:	6802      	ldr	r2, [r0, #0]
 80092f4:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80092f6:	4621      	mov	r1, r4
 80092f8:	2004      	movs	r0, #4
}
 80092fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80092fe:	f000 bf2b 	b.w	800a158 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009302:	b931      	cbnz	r1, 8009312 <ip_reass_dequeue_datagram+0x2e>
 8009304:	4b05      	ldr	r3, [pc, #20]	; (800931c <ip_reass_dequeue_datagram+0x38>)
 8009306:	f240 1245 	movw	r2, #325	; 0x145
 800930a:	4905      	ldr	r1, [pc, #20]	; (8009320 <ip_reass_dequeue_datagram+0x3c>)
 800930c:	4805      	ldr	r0, [pc, #20]	; (8009324 <ip_reass_dequeue_datagram+0x40>)
 800930e:	f005 f9ab 	bl	800e668 <iprintf>
    prev->next = ipr->next;
 8009312:	6823      	ldr	r3, [r4, #0]
 8009314:	602b      	str	r3, [r5, #0]
 8009316:	e7ee      	b.n	80092f6 <ip_reass_dequeue_datagram+0x12>
 8009318:	20010214 	.word	0x20010214
 800931c:	080146ac 	.word	0x080146ac
 8009320:	08014728 	.word	0x08014728
 8009324:	080137b4 	.word	0x080137b4

08009328 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009328:	4281      	cmp	r1, r0
{
 800932a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932e:	4604      	mov	r4, r0
 8009330:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009332:	d105      	bne.n	8009340 <ip_reass_free_complete_datagram+0x18>
 8009334:	4b2f      	ldr	r3, [pc, #188]	; (80093f4 <ip_reass_free_complete_datagram+0xcc>)
 8009336:	22ab      	movs	r2, #171	; 0xab
 8009338:	492f      	ldr	r1, [pc, #188]	; (80093f8 <ip_reass_free_complete_datagram+0xd0>)
 800933a:	4830      	ldr	r0, [pc, #192]	; (80093fc <ip_reass_free_complete_datagram+0xd4>)
 800933c:	f005 f994 	bl	800e668 <iprintf>
  if (prev != NULL) {
 8009340:	b146      	cbz	r6, 8009354 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009342:	6833      	ldr	r3, [r6, #0]
 8009344:	42a3      	cmp	r3, r4
 8009346:	d005      	beq.n	8009354 <ip_reass_free_complete_datagram+0x2c>
 8009348:	4b2a      	ldr	r3, [pc, #168]	; (80093f4 <ip_reass_free_complete_datagram+0xcc>)
 800934a:	22ad      	movs	r2, #173	; 0xad
 800934c:	492c      	ldr	r1, [pc, #176]	; (8009400 <ip_reass_free_complete_datagram+0xd8>)
 800934e:	482b      	ldr	r0, [pc, #172]	; (80093fc <ip_reass_free_complete_datagram+0xd4>)
 8009350:	f005 f98a 	bl	800e668 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009354:	6867      	ldr	r7, [r4, #4]
 8009356:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8009358:	889a      	ldrh	r2, [r3, #4]
 800935a:	bb92      	cbnz	r2, 80093c2 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800935c:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800935e:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 8009362:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009364:	f104 0208 	add.w	r2, r4, #8
 8009368:	f852 0b04 	ldr.w	r0, [r2], #4
 800936c:	428a      	cmp	r2, r1
 800936e:	f843 0b04 	str.w	r0, [r3], #4
 8009372:	d1f9      	bne.n	8009368 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009374:	2101      	movs	r1, #1
 8009376:	4638      	mov	r0, r7
 8009378:	f7ff fdbc 	bl	8008ef4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800937c:	4638      	mov	r0, r7
 800937e:	f001 fa83 	bl	800a888 <pbuf_clen>
 8009382:	4605      	mov	r5, r0
    pbuf_free(p);
 8009384:	4638      	mov	r0, r7
 8009386:	f001 f943 	bl	800a610 <pbuf_free>
  p = ipr->p;
 800938a:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800938c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80093f4 <ip_reass_free_complete_datagram+0xcc>
 8009390:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800940c <ip_reass_free_complete_datagram+0xe4>
 8009394:	f8df a064 	ldr.w	sl, [pc, #100]	; 80093fc <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8009398:	b9af      	cbnz	r7, 80093c6 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800939a:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800939c:	4c19      	ldr	r4, [pc, #100]	; (8009404 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800939e:	4631      	mov	r1, r6
 80093a0:	f7ff ffa0 	bl	80092e4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80093a4:	88a3      	ldrh	r3, [r4, #4]
 80093a6:	42ab      	cmp	r3, r5
 80093a8:	d205      	bcs.n	80093b6 <ip_reass_free_complete_datagram+0x8e>
 80093aa:	4b12      	ldr	r3, [pc, #72]	; (80093f4 <ip_reass_free_complete_datagram+0xcc>)
 80093ac:	22d2      	movs	r2, #210	; 0xd2
 80093ae:	4916      	ldr	r1, [pc, #88]	; (8009408 <ip_reass_free_complete_datagram+0xe0>)
 80093b0:	4812      	ldr	r0, [pc, #72]	; (80093fc <ip_reass_free_complete_datagram+0xd4>)
 80093b2:	f005 f959 	bl	800e668 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80093b6:	88a3      	ldrh	r3, [r4, #4]
}
 80093b8:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80093ba:	1b5b      	subs	r3, r3, r5
 80093bc:	80a3      	strh	r3, [r4, #4]
}
 80093be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80093c2:	2500      	movs	r5, #0
 80093c4:	e7e1      	b.n	800938a <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80093c6:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 80093c8:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 80093ca:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80093ce:	f001 fa5b 	bl	800a888 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80093d2:	4405      	add	r5, r0
 80093d4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80093d8:	db05      	blt.n	80093e6 <ip_reass_free_complete_datagram+0xbe>
 80093da:	4643      	mov	r3, r8
 80093dc:	22cc      	movs	r2, #204	; 0xcc
 80093de:	4649      	mov	r1, r9
 80093e0:	4650      	mov	r0, sl
 80093e2:	f005 f941 	bl	800e668 <iprintf>
    pbuf_free(pcur);
 80093e6:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80093e8:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 80093ea:	465f      	mov	r7, fp
    pbuf_free(pcur);
 80093ec:	f001 f910 	bl	800a610 <pbuf_free>
 80093f0:	e7d2      	b.n	8009398 <ip_reass_free_complete_datagram+0x70>
 80093f2:	bf00      	nop
 80093f4:	080146ac 	.word	0x080146ac
 80093f8:	08014741 	.word	0x08014741
 80093fc:	080137b4 	.word	0x080137b4
 8009400:	0801474d 	.word	0x0801474d
 8009404:	20010214 	.word	0x20010214
 8009408:	0801477c 	.word	0x0801477c
 800940c:	0801475f 	.word	0x0801475f

08009410 <ip_reass_remove_oldest_datagram>:
{
 8009410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4605      	mov	r5, r0
 8009416:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009418:	2600      	movs	r6, #0
    r = reassdatagrams;
 800941a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8009484 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800941e:	2400      	movs	r4, #0
    r = reassdatagrams;
 8009420:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8009424:	4621      	mov	r1, r4
    prev = NULL;
 8009426:	46a4      	mov	ip, r4
    oldest = NULL;
 8009428:	4620      	mov	r0, r4
    while (r != NULL) {
 800942a:	b953      	cbnz	r3, 8009442 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800942c:	b110      	cbz	r0, 8009434 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800942e:	f7ff ff7b 	bl	8009328 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8009432:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009434:	42be      	cmp	r6, r7
 8009436:	da01      	bge.n	800943c <ip_reass_remove_oldest_datagram+0x2c>
 8009438:	2c01      	cmp	r4, #1
 800943a:	dcf0      	bgt.n	800941e <ip_reass_remove_oldest_datagram+0xe>
}
 800943c:	4630      	mov	r0, r6
 800943e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009442:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8009446:	695a      	ldr	r2, [r3, #20]
 8009448:	4572      	cmp	r2, lr
 800944a:	d109      	bne.n	8009460 <ip_reass_remove_oldest_datagram+0x50>
 800944c:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8009450:	699a      	ldr	r2, [r3, #24]
 8009452:	4572      	cmp	r2, lr
 8009454:	d104      	bne.n	8009460 <ip_reass_remove_oldest_datagram+0x50>
 8009456:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800945a:	88aa      	ldrh	r2, [r5, #4]
 800945c:	4596      	cmp	lr, r2
 800945e:	d008      	beq.n	8009472 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8009460:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8009462:	b160      	cbz	r0, 800947e <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8009464:	7fc2      	ldrb	r2, [r0, #31]
 8009466:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800946a:	4596      	cmp	lr, r2
 800946c:	bf9c      	itt	ls
 800946e:	4661      	movls	r1, ip
 8009470:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	2a00      	cmp	r2, #0
 8009476:	bf18      	it	ne
 8009478:	469c      	movne	ip, r3
 800947a:	4613      	mov	r3, r2
 800947c:	e7d5      	b.n	800942a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800947e:	4661      	mov	r1, ip
 8009480:	4618      	mov	r0, r3
 8009482:	e7f6      	b.n	8009472 <ip_reass_remove_oldest_datagram+0x62>
 8009484:	20010214 	.word	0x20010214

08009488 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8009488:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800948a:	4604      	mov	r4, r0
 800948c:	b930      	cbnz	r0, 800949c <ip_frag_free_pbuf_custom_ref+0x14>
 800948e:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <ip_frag_free_pbuf_custom_ref+0x20>)
 8009490:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009494:	4905      	ldr	r1, [pc, #20]	; (80094ac <ip_frag_free_pbuf_custom_ref+0x24>)
 8009496:	4806      	ldr	r0, [pc, #24]	; (80094b0 <ip_frag_free_pbuf_custom_ref+0x28>)
 8009498:	f005 f8e6 	bl	800e668 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800949c:	4621      	mov	r1, r4
 800949e:	2005      	movs	r0, #5
}
 80094a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 80094a4:	f000 be58 	b.w	800a158 <memp_free>
 80094a8:	080146ac 	.word	0x080146ac
 80094ac:	08014f64 	.word	0x08014f64
 80094b0:	080137b4 	.word	0x080137b4

080094b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80094b4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80094b6:	4604      	mov	r4, r0
 80094b8:	b930      	cbnz	r0, 80094c8 <ipfrag_free_pbuf_custom+0x14>
 80094ba:	4b08      	ldr	r3, [pc, #32]	; (80094dc <ipfrag_free_pbuf_custom+0x28>)
 80094bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80094c0:	4907      	ldr	r1, [pc, #28]	; (80094e0 <ipfrag_free_pbuf_custom+0x2c>)
 80094c2:	4808      	ldr	r0, [pc, #32]	; (80094e4 <ipfrag_free_pbuf_custom+0x30>)
 80094c4:	f005 f8d0 	bl	800e668 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80094c8:	6960      	ldr	r0, [r4, #20]
 80094ca:	b108      	cbz	r0, 80094d0 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80094cc:	f001 f8a0 	bl	800a610 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80094d0:	4620      	mov	r0, r4
}
 80094d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80094d6:	f7ff bfd7 	b.w	8009488 <ip_frag_free_pbuf_custom_ref>
 80094da:	bf00      	nop
 80094dc:	080146ac 	.word	0x080146ac
 80094e0:	0801479e 	.word	0x0801479e
 80094e4:	080137b4 	.word	0x080137b4

080094e8 <ip_reass_tmr>:
{
 80094e8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80094ea:	4b09      	ldr	r3, [pc, #36]	; (8009510 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 80094ec:	2400      	movs	r4, #0
  r = reassdatagrams;
 80094ee:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80094f0:	b900      	cbnz	r0, 80094f4 <ip_reass_tmr+0xc>
}
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80094f4:	7fc3      	ldrb	r3, [r0, #31]
      r = r->next;
 80094f6:	6805      	ldr	r5, [r0, #0]
    if (r->timer > 0) {
 80094f8:	b123      	cbz	r3, 8009504 <ip_reass_tmr+0x1c>
      r->timer--;
 80094fa:	3b01      	subs	r3, #1
 80094fc:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 80094fe:	4604      	mov	r4, r0
 8009500:	4628      	mov	r0, r5
 8009502:	e7f5      	b.n	80094f0 <ip_reass_tmr+0x8>
 8009504:	4621      	mov	r1, r4
 8009506:	f7ff ff0f 	bl	8009328 <ip_reass_free_complete_datagram>
 800950a:	4620      	mov	r0, r4
 800950c:	e7f7      	b.n	80094fe <ip_reass_tmr+0x16>
 800950e:	bf00      	nop
 8009510:	20010214 	.word	0x20010214

08009514 <ip4_reass>:
{
 8009514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8009518:	6845      	ldr	r5, [r0, #4]
{
 800951a:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800951c:	782b      	ldrb	r3, [r5, #0]
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	2b05      	cmp	r3, #5
 8009524:	f040 80a0 	bne.w	8009668 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009528:	88e8      	ldrh	r0, [r5, #6]
 800952a:	f000 fab5 	bl	8009a98 <lwip_htons>
 800952e:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009530:	8868      	ldrh	r0, [r5, #2]
 8009532:	f000 fab1 	bl	8009a98 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009536:	782a      	ldrb	r2, [r5, #0]
 8009538:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 800953c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8009540:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8009544:	f0c0 8090 	bcc.w	8009668 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8009548:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800954a:	4eb5      	ldr	r6, [pc, #724]	; (8009820 <ip4_reass+0x30c>)
  clen = pbuf_clen(p);
 800954c:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 800954e:	b29b      	uxth	r3, r3
 8009550:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8009552:	f001 f999 	bl	800a888 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009556:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8009558:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800955a:	4403      	add	r3, r0
 800955c:	2b0a      	cmp	r3, #10
 800955e:	dc79      	bgt.n	8009654 <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009560:	6834      	ldr	r4, [r6, #0]
 8009562:	2c00      	cmp	r4, #0
 8009564:	f040 8085 	bne.w	8009672 <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009568:	2004      	movs	r0, #4
 800956a:	f000 fdc5 	bl	800a0f8 <memp_malloc>
  if (ipr == NULL) {
 800956e:	4604      	mov	r4, r0
 8009570:	b958      	cbnz	r0, 800958a <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009572:	4649      	mov	r1, r9
 8009574:	4628      	mov	r0, r5
 8009576:	f7ff ff4b 	bl	8009410 <ip_reass_remove_oldest_datagram>
 800957a:	4581      	cmp	r9, r0
 800957c:	dc74      	bgt.n	8009668 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800957e:	2004      	movs	r0, #4
 8009580:	f000 fdba 	bl	800a0f8 <memp_malloc>
    if (ipr == NULL)
 8009584:	4604      	mov	r4, r0
 8009586:	2800      	cmp	r0, #0
 8009588:	d06e      	beq.n	8009668 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800958a:	221c      	movs	r2, #28
 800958c:	2100      	movs	r1, #0
 800958e:	1d20      	adds	r0, r4, #4
 8009590:	f005 f862 	bl	800e658 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009594:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009596:	f104 0208 	add.w	r2, r4, #8
 800959a:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800959e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80095a0:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 80095a2:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 80095a4:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80095a6:	462b      	mov	r3, r5
 80095a8:	f853 0b04 	ldr.w	r0, [r3], #4
 80095ac:	428b      	cmp	r3, r1
 80095ae:	f842 0b04 	str.w	r0, [r2], #4
 80095b2:	d1f9      	bne.n	80095a8 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80095b4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80095b8:	f3c7 070c 	ubfx	r7, r7, #0, #13
  if (is_last) {
 80095bc:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80095c0:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 80095c4:	d10a      	bne.n	80095dc <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	18fb      	adds	r3, r7, r3
 80095ca:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80095cc:	429f      	cmp	r7, r3
 80095ce:	f200 8137 	bhi.w	8009840 <ip4_reass+0x32c>
 80095d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80095d6:	4293      	cmp	r3, r2
 80095d8:	f200 8132 	bhi.w	8009840 <ip4_reass+0x32c>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80095dc:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80095e0:	8868      	ldrh	r0, [r5, #2]
 80095e2:	f000 fa59 	bl	8009a98 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80095e6:	782b      	ldrb	r3, [r5, #0]
 80095e8:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80095ec:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80095f0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80095f4:	f0c0 8124 	bcc.w	8009840 <ip4_reass+0x32c>
  len = (u16_t)(len - hlen);
 80095f8:	1a80      	subs	r0, r0, r2
 80095fa:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80095fe:	88e8      	ldrh	r0, [r5, #6]
 8009600:	f000 fa4a 	bl	8009a98 <lwip_htons>
 8009604:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009608:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 800960c:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800960e:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8009610:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8009612:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 8009616:	7075      	strb	r5, [r6, #1]
 8009618:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 800961a:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 800961e:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8009620:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 8009622:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 8009624:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8009626:	f200 810b 	bhi.w	8009840 <ip4_reass+0x32c>
  for (q = ipr->p; q != NULL;) {
 800962a:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 800962e:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 8009632:	4671      	mov	r1, lr
 8009634:	bb61      	cbnz	r1, 8009690 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 8009636:	2d00      	cmp	r5, #0
 8009638:	f040 80a9 	bne.w	800978e <ip4_reass+0x27a>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800963c:	f1be 0f00 	cmp.w	lr, #0
 8009640:	f000 8095 	beq.w	800976e <ip4_reass+0x25a>
 8009644:	4b77      	ldr	r3, [pc, #476]	; (8009824 <ip4_reass+0x310>)
 8009646:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800964a:	4977      	ldr	r1, [pc, #476]	; (8009828 <ip4_reass+0x314>)
 800964c:	4877      	ldr	r0, [pc, #476]	; (800982c <ip4_reass+0x318>)
 800964e:	f005 f80b 	bl	800e668 <iprintf>
 8009652:	e08c      	b.n	800976e <ip4_reass+0x25a>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009654:	4601      	mov	r1, r0
 8009656:	4628      	mov	r0, r5
 8009658:	f7ff feda 	bl	8009410 <ip_reass_remove_oldest_datagram>
 800965c:	b120      	cbz	r0, 8009668 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800965e:	88b3      	ldrh	r3, [r6, #4]
 8009660:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009662:	2b0a      	cmp	r3, #10
 8009664:	f77f af7c 	ble.w	8009560 <ip4_reass+0x4c>
  pbuf_free(p);
 8009668:	4640      	mov	r0, r8
 800966a:	f000 ffd1 	bl	800a610 <pbuf_free>
  return NULL;
 800966e:	2700      	movs	r7, #0
 8009670:	e077      	b.n	8009762 <ip4_reass+0x24e>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009672:	68eb      	ldr	r3, [r5, #12]
 8009674:	6962      	ldr	r2, [r4, #20]
 8009676:	429a      	cmp	r2, r3
 8009678:	d108      	bne.n	800968c <ip4_reass+0x178>
 800967a:	692b      	ldr	r3, [r5, #16]
 800967c:	69a2      	ldr	r2, [r4, #24]
 800967e:	429a      	cmp	r2, r3
 8009680:	d104      	bne.n	800968c <ip4_reass+0x178>
 8009682:	89a2      	ldrh	r2, [r4, #12]
 8009684:	88ab      	ldrh	r3, [r5, #4]
 8009686:	429a      	cmp	r2, r3
 8009688:	f000 80ee 	beq.w	8009868 <ip4_reass+0x354>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800968c:	6824      	ldr	r4, [r4, #0]
 800968e:	e768      	b.n	8009562 <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8009690:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8009692:	889a      	ldrh	r2, [r3, #4]
 8009694:	4290      	cmp	r0, r2
 8009696:	d26d      	bcs.n	8009774 <ip4_reass+0x260>
      iprh->next_pbuf = q;
 8009698:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 800969a:	2d00      	cmp	r5, #0
 800969c:	d065      	beq.n	800976a <ip4_reass+0x256>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800969e:	88eb      	ldrh	r3, [r5, #6]
 80096a0:	4298      	cmp	r0, r3
 80096a2:	f0c0 80cd 	bcc.w	8009840 <ip4_reass+0x32c>
 80096a6:	4594      	cmp	ip, r2
 80096a8:	f200 80ca 	bhi.w	8009840 <ip4_reass+0x32c>
        if (iprh_prev->end != iprh->start) {
 80096ac:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 80096ae:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 80096b2:	f040 80f5 	bne.w	80098a0 <ip4_reass+0x38c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	d004      	beq.n	80096c6 <ip4_reass+0x1b2>
 80096bc:	7fa3      	ldrb	r3, [r4, #30]
 80096be:	f013 0301 	ands.w	r3, r3, #1
 80096c2:	f000 809b 	beq.w	80097fc <ip4_reass+0x2e8>
    if (valid) {
 80096c6:	f1ba 0f00 	cmp.w	sl, #0
 80096ca:	d170      	bne.n	80097ae <ip4_reass+0x29a>
          q = iprh->next_pbuf;
 80096cc:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80096d0:	4e53      	ldr	r6, [pc, #332]	; (8009820 <ip4_reass+0x30c>)
 80096d2:	88b0      	ldrh	r0, [r6, #4]
 80096d4:	4481      	add	r9, r0
 80096d6:	f8a6 9004 	strh.w	r9, [r6, #4]
  if (is_last) {
 80096da:	f1bb 0f00 	cmp.w	fp, #0
 80096de:	d106      	bne.n	80096ee <ip4_reass+0x1da>
    u16_t datagram_len = (u16_t)(offset + len);
 80096e0:	9b01      	ldr	r3, [sp, #4]
 80096e2:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80096e4:	7fa3      	ldrb	r3, [r4, #30]
 80096e6:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80096ea:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80096ec:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80096ee:	f1ba 0f01 	cmp.w	sl, #1
 80096f2:	d1bc      	bne.n	800966e <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80096f4:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80096f6:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80096fa:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80096fc:	685f      	ldr	r7, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80096fe:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009702:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009704:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009706:	463a      	mov	r2, r7
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009708:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800970a:	f853 cb04 	ldr.w	ip, [r3], #4
 800970e:	428b      	cmp	r3, r1
 8009710:	f842 cb04 	str.w	ip, [r2], #4
 8009714:	d1f9      	bne.n	800970a <ip4_reass+0x1f6>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009716:	f000 f9bf 	bl	8009a98 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800971a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800971c:	8078      	strh	r0, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800971e:	71bb      	strb	r3, [r7, #6]
 8009720:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8009722:	72bb      	strb	r3, [r7, #10]
 8009724:	72fb      	strb	r3, [r7, #11]
    p = ipr->p;
 8009726:	6867      	ldr	r7, [r4, #4]
    while (r != NULL) {
 8009728:	2d00      	cmp	r5, #0
 800972a:	d169      	bne.n	8009800 <ip4_reass+0x2ec>
    if (ipr == reassdatagrams) {
 800972c:	6833      	ldr	r3, [r6, #0]
        if (ipr_prev->next == ipr) {
 800972e:	42a3      	cmp	r3, r4
 8009730:	d002      	beq.n	8009738 <ip4_reass+0x224>
 8009732:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8009734:	2b00      	cmp	r3, #0
 8009736:	d170      	bne.n	800981a <ip4_reass+0x306>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8009738:	4620      	mov	r0, r4
 800973a:	4629      	mov	r1, r5
 800973c:	f7ff fdd2 	bl	80092e4 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 8009740:	4638      	mov	r0, r7
 8009742:	f001 f8a1 	bl	800a888 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8009746:	88b3      	ldrh	r3, [r6, #4]
    clen = pbuf_clen(p);
 8009748:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800974a:	4283      	cmp	r3, r0
 800974c:	d206      	bcs.n	800975c <ip4_reass+0x248>
 800974e:	4b35      	ldr	r3, [pc, #212]	; (8009824 <ip4_reass+0x310>)
 8009750:	f240 229b 	movw	r2, #667	; 0x29b
 8009754:	4936      	ldr	r1, [pc, #216]	; (8009830 <ip4_reass+0x31c>)
 8009756:	4835      	ldr	r0, [pc, #212]	; (800982c <ip4_reass+0x318>)
 8009758:	f004 ff86 	bl	800e668 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800975c:	88b0      	ldrh	r0, [r6, #4]
 800975e:	1b04      	subs	r4, r0, r4
 8009760:	80b4      	strh	r4, [r6, #4]
}
 8009762:	4638      	mov	r0, r7
 8009764:	b003      	add	sp, #12
 8009766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800976a:	4594      	cmp	ip, r2
 800976c:	d868      	bhi.n	8009840 <ip4_reass+0x32c>
      ipr->p = new_p;
 800976e:	f8c4 8004 	str.w	r8, [r4, #4]
 8009772:	e7a0      	b.n	80096b6 <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8009774:	d064      	beq.n	8009840 <ip4_reass+0x32c>
    } else if (iprh->start < iprh_tmp->end) {
 8009776:	88d9      	ldrh	r1, [r3, #6]
 8009778:	4281      	cmp	r1, r0
 800977a:	d861      	bhi.n	8009840 <ip4_reass+0x32c>
      if (iprh_prev != NULL) {
 800977c:	b125      	cbz	r5, 8009788 <ip4_reass+0x274>
        if (iprh_prev->end != iprh_tmp->start) {
 800977e:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8009780:	4291      	cmp	r1, r2
 8009782:	bf18      	it	ne
 8009784:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8009788:	6819      	ldr	r1, [r3, #0]
 800978a:	461d      	mov	r5, r3
 800978c:	e752      	b.n	8009634 <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800978e:	88eb      	ldrh	r3, [r5, #6]
 8009790:	4283      	cmp	r3, r0
 8009792:	d906      	bls.n	80097a2 <ip4_reass+0x28e>
 8009794:	4b23      	ldr	r3, [pc, #140]	; (8009824 <ip4_reass+0x310>)
 8009796:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800979a:	4926      	ldr	r1, [pc, #152]	; (8009834 <ip4_reass+0x320>)
 800979c:	4823      	ldr	r0, [pc, #140]	; (800982c <ip4_reass+0x318>)
 800979e:	f004 ff63 	bl	800e668 <iprintf>
      if (iprh_prev->end != iprh->start) {
 80097a2:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 80097a4:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 80097a8:	88b3      	ldrh	r3, [r6, #4]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	e781      	b.n	80096b2 <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d08b      	beq.n	80096cc <ip4_reass+0x1b8>
 80097b4:	6859      	ldr	r1, [r3, #4]
 80097b6:	888b      	ldrh	r3, [r1, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d187      	bne.n	80096cc <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 80097bc:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80097be:	b9a3      	cbnz	r3, 80097ea <ip4_reass+0x2d6>
          LWIP_ASSERT("sanity check",
 80097c0:	42b1      	cmp	r1, r6
 80097c2:	d106      	bne.n	80097d2 <ip4_reass+0x2be>
 80097c4:	4b17      	ldr	r3, [pc, #92]	; (8009824 <ip4_reass+0x310>)
 80097c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80097ca:	491b      	ldr	r1, [pc, #108]	; (8009838 <ip4_reass+0x324>)
 80097cc:	4817      	ldr	r0, [pc, #92]	; (800982c <ip4_reass+0x318>)
 80097ce:	f004 ff4b 	bl	800e668 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80097d2:	6833      	ldr	r3, [r6, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f43f af7b 	beq.w	80096d0 <ip4_reass+0x1bc>
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <ip4_reass+0x310>)
 80097dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80097e0:	4916      	ldr	r1, [pc, #88]	; (800983c <ip4_reass+0x328>)
 80097e2:	4812      	ldr	r0, [pc, #72]	; (800982c <ip4_reass+0x318>)
 80097e4:	f004 ff40 	bl	800e668 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80097e8:	e772      	b.n	80096d0 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 80097ea:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80097ec:	88f0      	ldrh	r0, [r6, #6]
 80097ee:	8893      	ldrh	r3, [r2, #4]
 80097f0:	4298      	cmp	r0, r3
 80097f2:	f47f af6b 	bne.w	80096cc <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 80097f6:	6813      	ldr	r3, [r2, #0]
 80097f8:	4616      	mov	r6, r2
 80097fa:	e7e0      	b.n	80097be <ip4_reass+0x2aa>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80097fc:	469a      	mov	sl, r3
 80097fe:	e767      	b.n	80096d0 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 8009800:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 8009804:	2114      	movs	r1, #20
 8009806:	4628      	mov	r0, r5
 8009808:	f000 fece 	bl	800a5a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800980c:	4629      	mov	r1, r5
 800980e:	4638      	mov	r0, r7
 8009810:	f001 f85e 	bl	800a8d0 <pbuf_cat>
      r = iprh->next_pbuf;
 8009814:	f8d8 5000 	ldr.w	r5, [r8]
 8009818:	e786      	b.n	8009728 <ip4_reass+0x214>
        if (ipr_prev->next == ipr) {
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	e787      	b.n	800972e <ip4_reass+0x21a>
 800981e:	bf00      	nop
 8009820:	20010214 	.word	0x20010214
 8009824:	080146ac 	.word	0x080146ac
 8009828:	080147c8 	.word	0x080147c8
 800982c:	080137b4 	.word	0x080137b4
 8009830:	0801482e 	.word	0x0801482e
 8009834:	080147aa 	.word	0x080147aa
 8009838:	080147ff 	.word	0x080147ff
 800983c:	0801480c 	.word	0x0801480c
  if (ipr->p == NULL) {
 8009840:	6863      	ldr	r3, [r4, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f47f af10 	bne.w	8009668 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8009848:	4b19      	ldr	r3, [pc, #100]	; (80098b0 <ip4_reass+0x39c>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	42a3      	cmp	r3, r4
 800984e:	d006      	beq.n	800985e <ip4_reass+0x34a>
 8009850:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <ip4_reass+0x3a0>)
 8009852:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009856:	4918      	ldr	r1, [pc, #96]	; (80098b8 <ip4_reass+0x3a4>)
 8009858:	4818      	ldr	r0, [pc, #96]	; (80098bc <ip4_reass+0x3a8>)
 800985a:	f004 ff05 	bl	800e668 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800985e:	2100      	movs	r1, #0
 8009860:	4620      	mov	r0, r4
 8009862:	f7ff fd3f 	bl	80092e4 <ip_reass_dequeue_datagram>
 8009866:	e6ff      	b.n	8009668 <ip4_reass+0x154>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009868:	88e8      	ldrh	r0, [r5, #6]
 800986a:	f000 f915 	bl	8009a98 <lwip_htons>
 800986e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009872:	2800      	cmp	r0, #0
 8009874:	f47f ae9e 	bne.w	80095b4 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8009878:	89e0      	ldrh	r0, [r4, #14]
 800987a:	f000 f90d 	bl	8009a98 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800987e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009882:	2800      	cmp	r0, #0
 8009884:	f43f ae96 	beq.w	80095b4 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8009888:	462b      	mov	r3, r5
 800988a:	f104 0208 	add.w	r2, r4, #8
 800988e:	f105 0114 	add.w	r1, r5, #20
 8009892:	f853 0b04 	ldr.w	r0, [r3], #4
 8009896:	428b      	cmp	r3, r1
 8009898:	f842 0b04 	str.w	r0, [r2], #4
 800989c:	d1f9      	bne.n	8009892 <ip4_reass+0x37e>
 800989e:	e689      	b.n	80095b4 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80098a0:	f1bb 0f00 	cmp.w	fp, #0
 80098a4:	f43f af12 	beq.w	80096cc <ip4_reass+0x1b8>
 80098a8:	f04f 0a00 	mov.w	sl, #0
 80098ac:	e706      	b.n	80096bc <ip4_reass+0x1a8>
 80098ae:	bf00      	nop
 80098b0:	20010214 	.word	0x20010214
 80098b4:	080146ac 	.word	0x080146ac
 80098b8:	08014849 	.word	0x08014849
 80098bc:	080137b4 	.word	0x080137b4

080098c0 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80098c0:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 80098c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c6:	ed2d 8b02 	vpush	{d8}
 80098ca:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80098ce:	f1b3 0214 	subs.w	r2, r3, #20
{
 80098d2:	b08b      	sub	sp, #44	; 0x2c
 80098d4:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80098d6:	bf48      	it	mi
 80098d8:	f1a3 020d 	submi.w	r2, r3, #13
{
 80098dc:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80098de:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 80098e2:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80098e4:	6843      	ldr	r3, [r0, #4]
 80098e6:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	f003 030f 	and.w	r3, r3, #15
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	ea4f 0783 	mov.w	r7, r3, lsl #2
 80098f4:	d109      	bne.n	800990a <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80098f6:	8943      	ldrh	r3, [r0, #10]
 80098f8:	2b13      	cmp	r3, #19
 80098fa:	d809      	bhi.n	8009910 <ip4_frag+0x50>
 80098fc:	4b60      	ldr	r3, [pc, #384]	; (8009a80 <ip4_frag+0x1c0>)
 80098fe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8009902:	4960      	ldr	r1, [pc, #384]	; (8009a84 <ip4_frag+0x1c4>)
 8009904:	4860      	ldr	r0, [pc, #384]	; (8009a88 <ip4_frag+0x1c8>)
 8009906:	f004 feaf 	bl	800e668 <iprintf>
    return ERR_VAL;
 800990a:	f06f 0005 	mvn.w	r0, #5
 800990e:	e013      	b.n	8009938 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009910:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 8009912:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8009914:	88d8      	ldrh	r0, [r3, #6]
 8009916:	f000 f8bf 	bl	8009a98 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800991a:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800991e:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8009920:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 8009922:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8009926:	3c14      	subs	r4, #20
 8009928:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800992a:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800992c:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	b29b      	uxth	r3, r3
 8009932:	9306      	str	r3, [sp, #24]
  while (left) {
 8009934:	b92c      	cbnz	r4, 8009942 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8009936:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8009938:	b00b      	add	sp, #44	; 0x2c
 800993a:	ecbd 8b02 	vpop	{d8}
 800993e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8009942:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009944:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009948:	2114      	movs	r1, #20
 800994a:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800994c:	42a3      	cmp	r3, r4
 800994e:	bf28      	it	cs
 8009950:	4623      	movcs	r3, r4
 8009952:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8009954:	f000 fec4 	bl	800a6e0 <pbuf_alloc>
    if (rambuf == NULL) {
 8009958:	4680      	mov	r8, r0
 800995a:	2800      	cmp	r0, #0
 800995c:	d036      	beq.n	80099cc <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800995e:	8943      	ldrh	r3, [r0, #10]
 8009960:	2b13      	cmp	r3, #19
 8009962:	d806      	bhi.n	8009972 <ip4_frag+0xb2>
 8009964:	4b46      	ldr	r3, [pc, #280]	; (8009a80 <ip4_frag+0x1c0>)
 8009966:	f44f 7249 	mov.w	r2, #804	; 0x324
 800996a:	4948      	ldr	r1, [pc, #288]	; (8009a8c <ip4_frag+0x1cc>)
 800996c:	4846      	ldr	r0, [pc, #280]	; (8009a88 <ip4_frag+0x1c8>)
 800996e:	f004 fe7b 	bl	800e668 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8009978:	4619      	mov	r1, r3
 800997a:	3114      	adds	r1, #20
 800997c:	f853 0b04 	ldr.w	r0, [r3], #4
 8009980:	428b      	cmp	r3, r1
 8009982:	f842 0b04 	str.w	r0, [r2], #4
 8009986:	d1f9      	bne.n	800997c <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8009988:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800998c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8009990:	f1b9 0f00 	cmp.w	r9, #0
 8009994:	d041      	beq.n	8009a1a <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8009996:	896b      	ldrh	r3, [r5, #10]
 8009998:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800999a:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800999c:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800999e:	d206      	bcs.n	80099ae <ip4_frag+0xee>
 80099a0:	4b37      	ldr	r3, [pc, #220]	; (8009a80 <ip4_frag+0x1c0>)
 80099a2:	f240 322d 	movw	r2, #813	; 0x32d
 80099a6:	493a      	ldr	r1, [pc, #232]	; (8009a90 <ip4_frag+0x1d0>)
 80099a8:	4837      	ldr	r0, [pc, #220]	; (8009a88 <ip4_frag+0x1c8>)
 80099aa:	f004 fe5d 	bl	800e668 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80099ae:	454e      	cmp	r6, r9
 80099b0:	bf28      	it	cs
 80099b2:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 80099b4:	b916      	cbnz	r6, 80099bc <ip4_frag+0xfc>
        p = p->next;
 80099b6:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 80099b8:	2700      	movs	r7, #0
 80099ba:	e7e9      	b.n	8009990 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80099bc:	2005      	movs	r0, #5
 80099be:	f000 fb9b 	bl	800a0f8 <memp_malloc>
      if (pcr == NULL) {
 80099c2:	4603      	mov	r3, r0
 80099c4:	b928      	cbnz	r0, 80099d2 <ip4_frag+0x112>
        pbuf_free(rambuf);
 80099c6:	4640      	mov	r0, r8
 80099c8:	f000 fe22 	bl	800a610 <pbuf_free>
  return ERR_MEM;
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099d0:	e7b2      	b.n	8009938 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80099d2:	9601      	str	r6, [sp, #4]
 80099d4:	4631      	mov	r1, r6
 80099d6:	686a      	ldr	r2, [r5, #4]
 80099d8:	9008      	str	r0, [sp, #32]
 80099da:	2000      	movs	r0, #0
 80099dc:	443a      	add	r2, r7
 80099de:	9200      	str	r2, [sp, #0]
 80099e0:	2241      	movs	r2, #65	; 0x41
 80099e2:	f000 fdc3 	bl	800a56c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80099e6:	9b08      	ldr	r3, [sp, #32]
 80099e8:	b918      	cbnz	r0, 80099f2 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff fd4c 	bl	8009488 <ip_frag_free_pbuf_custom_ref>
 80099f0:	e7e9      	b.n	80099c6 <ip4_frag+0x106>
 80099f2:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80099f6:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 80099fa:	4628      	mov	r0, r5
 80099fc:	f000 ff4c 	bl	800a898 <pbuf_ref>
      pcr->original = p;
 8009a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8009a02:	4a24      	ldr	r2, [pc, #144]	; (8009a94 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8009a04:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 8009a08:	9908      	ldr	r1, [sp, #32]
 8009a0a:	4640      	mov	r0, r8
      pcr->original = p;
 8009a0c:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8009a0e:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 8009a10:	f000 ff5e 	bl	800a8d0 <pbuf_cat>
      if (left_to_copy) {
 8009a14:	f1b9 0f00 	cmp.w	r9, #0
 8009a18:	d1cd      	bne.n	80099b6 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 8009a1a:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 8009a1c:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 8009a1e:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8009a22:	f8ba 3024 	ldrh.w	r3, [sl, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8009a26:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8009a28:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	dd01      	ble.n	8009a32 <ip4_frag+0x172>
 8009a2e:	9b07      	ldr	r3, [sp, #28]
 8009a30:	b10b      	cbz	r3, 8009a36 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8009a32:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8009a36:	f000 f82f 	bl	8009a98 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009a3a:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8009a3c:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009a40:	f103 0014 	add.w	r0, r3, #20
 8009a44:	b280      	uxth	r0, r0
 8009a46:	f000 f827 	bl	8009a98 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8009a4a:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8009a4c:	ee18 2a10 	vmov	r2, s16
 8009a50:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8009a52:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8009a56:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 8009a58:	f88b 300a 	strb.w	r3, [fp, #10]
 8009a5c:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8009a60:	f8da 3014 	ldr.w	r3, [sl, #20]
 8009a64:	4798      	blx	r3
    pbuf_free(rambuf);
 8009a66:	4640      	mov	r0, r8
 8009a68:	f000 fdd2 	bl	800a610 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8009a6c:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 8009a6e:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8009a70:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8009a76:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	9303      	str	r3, [sp, #12]
 8009a7c:	e75a      	b.n	8009934 <ip4_frag+0x74>
 8009a7e:	bf00      	nop
 8009a80:	080146ac 	.word	0x080146ac
 8009a84:	08014869 	.word	0x08014869
 8009a88:	080137b4 	.word	0x080137b4
 8009a8c:	08014884 	.word	0x08014884
 8009a90:	080148a4 	.word	0x080148a4
 8009a94:	080094b5 	.word	0x080094b5

08009a98 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8009a98:	ba40      	rev16	r0, r0
}
 8009a9a:	b280      	uxth	r0, r0
 8009a9c:	4770      	bx	lr

08009a9e <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8009a9e:	ba00      	rev	r0, r0
 8009aa0:	4770      	bx	lr

08009aa2 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8009aa2:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8009aa4:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8009aa6:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 8009aaa:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8009aae:	d007      	beq.n	8009ac0 <lwip_standard_chksum+0x1e>
 8009ab0:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8009ab2:	bfc2      	ittt	gt
 8009ab4:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 8009ab8:	f101 31ff 	addgt.w	r1, r1, #4294967295	; 0xffffffff
    ((u8_t *)&t)[1] = *pb++;
 8009abc:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 8009ac0:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8009ac2:	2901      	cmp	r1, #1
 8009ac4:	dc15      	bgt.n	8009af2 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8009ac6:	bf04      	itt	eq
 8009ac8:	7803      	ldrbeq	r3, [r0, #0]
 8009aca:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8009ace:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009ad2:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8009ad4:	b298      	uxth	r0, r3
 8009ad6:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8009ada:	b298      	uxth	r0, r3
 8009adc:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8009ae0:	b124      	cbz	r4, 8009aec <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 8009ae2:	0203      	lsls	r3, r0, #8
 8009ae4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8009aec:	b280      	uxth	r0, r0
 8009aee:	b002      	add	sp, #8
 8009af0:	bd10      	pop	{r4, pc}
    sum += *ps++;
 8009af2:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 8009af6:	3902      	subs	r1, #2
    sum += *ps++;
 8009af8:	441a      	add	r2, r3
    len -= 2;
 8009afa:	e7e2      	b.n	8009ac2 <lwip_standard_chksum+0x20>

08009afc <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8009afc:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8009afe:	2600      	movs	r6, #0
{
 8009b00:	4605      	mov	r5, r0

  acc = 0;
 8009b02:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 8009b04:	b945      	cbnz	r5, 8009b18 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 8009b06:	b126      	cbz	r6, 8009b12 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 8009b08:	0223      	lsls	r3, r4, #8
 8009b0a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 8009b12:	43e0      	mvns	r0, r4
}
 8009b14:	b280      	uxth	r0, r0
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009b18:	8969      	ldrh	r1, [r5, #10]
 8009b1a:	6868      	ldr	r0, [r5, #4]
 8009b1c:	f7ff ffc1 	bl	8009aa2 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 8009b20:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 8009b22:	4404      	add	r4, r0
    if (q->len % 2 != 0) {
 8009b24:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 8009b26:	b2a0      	uxth	r0, r4
 8009b28:	eb00 4414 	add.w	r4, r0, r4, lsr #16
    if (q->len % 2 != 0) {
 8009b2c:	d506      	bpl.n	8009b3c <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 8009b2e:	0223      	lsls	r3, r4, #8
 8009b30:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009b34:	f086 0601 	eor.w	r6, r6, #1
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8009b3c:	682d      	ldr	r5, [r5, #0]
 8009b3e:	e7e1      	b.n	8009b04 <inet_chksum_pbuf+0x8>

08009b40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009b40:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009b42:	f004 fcfd 	bl	800e540 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009b46:	f000 f80d 	bl	8009b64 <mem_init>
  memp_init();
 8009b4a:	f000 fab1 	bl	800a0b0 <memp_init>
  pbuf_init();
  netif_init();
 8009b4e:	f000 fb69 	bl	800a224 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009b52:	f004 fa4b 	bl	800dfec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009b56:	f001 f833 	bl	800abc0 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8009b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8009b5e:	f004 ba01 	b.w	800df64 <sys_timeouts_init>
	...

08009b64 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b64:	4810      	ldr	r0, [pc, #64]	; (8009ba8 <mem_init+0x44>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8009b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b6a:	4b10      	ldr	r3, [pc, #64]	; (8009bac <mem_init+0x48>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8009b6c:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009b70:	300c      	adds	r0, #12
{
 8009b72:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b74:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->next = MEM_SIZE_ALIGNED;
 8009b78:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009b7e:	4a0c      	ldr	r2, [pc, #48]	; (8009bb0 <mem_init+0x4c>)
 8009b80:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009b84:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8009b86:	2101      	movs	r1, #1
 8009b88:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 8009b8a:	f840 3c04 	str.w	r3, [r0, #-4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009b8e:	f004 fce3 	bl	800e558 <sys_mutex_new>
 8009b92:	b140      	cbz	r0, 8009ba6 <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009b94:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <mem_init+0x50>)
 8009b96:	f240 221f 	movw	r2, #543	; 0x21f
 8009b9a:	4907      	ldr	r1, [pc, #28]	; (8009bb8 <mem_init+0x54>)
 8009b9c:	4807      	ldr	r0, [pc, #28]	; (8009bbc <mem_init+0x58>)
  }
}
 8009b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009ba2:	f004 bd61 	b.w	800e668 <iprintf>
}
 8009ba6:	bd10      	pop	{r4, pc}
 8009ba8:	20010234 	.word	0x20010234
 8009bac:	20048000 	.word	0x20048000
 8009bb0:	2004c000 	.word	0x2004c000
 8009bb4:	080148b3 	.word	0x080148b3
 8009bb8:	08014925 	.word	0x08014925
 8009bbc:	080137b4 	.word	0x080137b4

08009bc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009bc0:	b570      	push	{r4, r5, r6, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f000 80b7 	beq.w	8009d38 <mem_free+0x178>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009bca:	0783      	lsls	r3, r0, #30
 8009bcc:	d00c      	beq.n	8009be8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009bce:	4b5b      	ldr	r3, [pc, #364]	; (8009d3c <mem_free+0x17c>)
 8009bd0:	f240 2273 	movw	r2, #627	; 0x273
 8009bd4:	495a      	ldr	r1, [pc, #360]	; (8009d40 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009bd6:	485b      	ldr	r0, [pc, #364]	; (8009d44 <mem_free+0x184>)
 8009bd8:	f004 fd46 	bl	800e668 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009bdc:	f004 fce2 	bl	800e5a4 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8009be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8009be4:	f004 bcea 	b.w	800e5bc <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009be8:	4d57      	ldr	r5, [pc, #348]	; (8009d48 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009bea:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009bee:	682b      	ldr	r3, [r5, #0]
 8009bf0:	42b3      	cmp	r3, r6
 8009bf2:	d804      	bhi.n	8009bfe <mem_free+0x3e>
 8009bf4:	f100 030c 	add.w	r3, r0, #12
 8009bf8:	686a      	ldr	r2, [r5, #4]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d204      	bcs.n	8009c08 <mem_free+0x48>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009bfe:	4b4f      	ldr	r3, [pc, #316]	; (8009d3c <mem_free+0x17c>)
 8009c00:	f240 227f 	movw	r2, #639	; 0x27f
 8009c04:	4951      	ldr	r1, [pc, #324]	; (8009d4c <mem_free+0x18c>)
 8009c06:	e7e6      	b.n	8009bd6 <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8009c08:	f105 000c 	add.w	r0, r5, #12
 8009c0c:	f004 fcb2 	bl	800e574 <sys_mutex_lock>
  if (!mem->used) {
 8009c10:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009c14:	b95b      	cbnz	r3, 8009c2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009c16:	4b49      	ldr	r3, [pc, #292]	; (8009d3c <mem_free+0x17c>)
 8009c18:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009c1c:	494c      	ldr	r1, [pc, #304]	; (8009d50 <mem_free+0x190>)
 8009c1e:	4849      	ldr	r0, [pc, #292]	; (8009d44 <mem_free+0x184>)
 8009c20:	f004 fd22 	bl	800e668 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009c24:	f105 000c 	add.w	r0, r5, #12
    LWIP_MEM_FREE_UNPROTECT();
 8009c28:	f004 fca9 	bl	800e57e <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8009c2c:	e7d6      	b.n	8009bdc <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 8009c2e:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c32:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009c36:	d813      	bhi.n	8009c60 <mem_free+0xa0>
  pmem = ptr_to_mem(mem->prev);
 8009c38:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c3c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8009c40:	d80e      	bhi.n	8009c60 <mem_free+0xa0>
  return (mem_size_t)((u8_t *)mem - ram);
 8009c42:	6829      	ldr	r1, [r5, #0]
 8009c44:	1a73      	subs	r3, r6, r1
 8009c46:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c48:	4283      	cmp	r3, r0
 8009c4a:	d002      	beq.n	8009c52 <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c4c:	5a08      	ldrh	r0, [r1, r0]
 8009c4e:	4298      	cmp	r0, r3
 8009c50:	d106      	bne.n	8009c60 <mem_free+0xa0>
  return (struct mem *)(void *)&ram[ptr];
 8009c52:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c54:	6868      	ldr	r0, [r5, #4]
 8009c56:	4282      	cmp	r2, r0
 8009c58:	d00b      	beq.n	8009c72 <mem_free+0xb2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c5a:	8852      	ldrh	r2, [r2, #2]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d008      	beq.n	8009c72 <mem_free+0xb2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009c60:	4b36      	ldr	r3, [pc, #216]	; (8009d3c <mem_free+0x17c>)
 8009c62:	f240 2295 	movw	r2, #661	; 0x295
 8009c66:	493b      	ldr	r1, [pc, #236]	; (8009d54 <mem_free+0x194>)
 8009c68:	4836      	ldr	r0, [pc, #216]	; (8009d44 <mem_free+0x184>)
 8009c6a:	f004 fcfd 	bl	800e668 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009c6e:	483a      	ldr	r0, [pc, #232]	; (8009d58 <mem_free+0x198>)
 8009c70:	e7da      	b.n	8009c28 <mem_free+0x68>
  mem->used = 0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8009c78:	68ab      	ldr	r3, [r5, #8]
 8009c7a:	42b3      	cmp	r3, r6
    lfree = mem;
 8009c7c:	bf88      	it	hi
 8009c7e:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009c80:	428e      	cmp	r6, r1
 8009c82:	d206      	bcs.n	8009c92 <mem_free+0xd2>
 8009c84:	4b2d      	ldr	r3, [pc, #180]	; (8009d3c <mem_free+0x17c>)
 8009c86:	f240 12df 	movw	r2, #479	; 0x1df
 8009c8a:	4934      	ldr	r1, [pc, #208]	; (8009d5c <mem_free+0x19c>)
 8009c8c:	482d      	ldr	r0, [pc, #180]	; (8009d44 <mem_free+0x184>)
 8009c8e:	f004 fceb 	bl	800e668 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009c92:	686b      	ldr	r3, [r5, #4]
 8009c94:	429e      	cmp	r6, r3
 8009c96:	d306      	bcc.n	8009ca6 <mem_free+0xe6>
 8009c98:	4b28      	ldr	r3, [pc, #160]	; (8009d3c <mem_free+0x17c>)
 8009c9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009c9e:	4930      	ldr	r1, [pc, #192]	; (8009d60 <mem_free+0x1a0>)
 8009ca0:	4828      	ldr	r0, [pc, #160]	; (8009d44 <mem_free+0x184>)
 8009ca2:	f004 fce1 	bl	800e668 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009ca6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009caa:	b133      	cbz	r3, 8009cba <mem_free+0xfa>
 8009cac:	4b23      	ldr	r3, [pc, #140]	; (8009d3c <mem_free+0x17c>)
 8009cae:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009cb2:	492c      	ldr	r1, [pc, #176]	; (8009d64 <mem_free+0x1a4>)
 8009cb4:	4823      	ldr	r0, [pc, #140]	; (8009d44 <mem_free+0x184>)
 8009cb6:	f004 fcd7 	bl	800e668 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009cba:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cc2:	d906      	bls.n	8009cd2 <mem_free+0x112>
 8009cc4:	4b1d      	ldr	r3, [pc, #116]	; (8009d3c <mem_free+0x17c>)
 8009cc6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009cca:	4927      	ldr	r1, [pc, #156]	; (8009d68 <mem_free+0x1a8>)
 8009ccc:	481d      	ldr	r0, [pc, #116]	; (8009d44 <mem_free+0x184>)
 8009cce:	f004 fccb 	bl	800e668 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009cd2:	682b      	ldr	r3, [r5, #0]
 8009cd4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009cd8:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009cda:	4296      	cmp	r6, r2
 8009cdc:	d012      	beq.n	8009d04 <mem_free+0x144>
 8009cde:	7910      	ldrb	r0, [r2, #4]
 8009ce0:	b980      	cbnz	r0, 8009d04 <mem_free+0x144>
 8009ce2:	6868      	ldr	r0, [r5, #4]
 8009ce4:	4282      	cmp	r2, r0
 8009ce6:	d00d      	beq.n	8009d04 <mem_free+0x144>
    if (lfree == nmem) {
 8009ce8:	68a8      	ldr	r0, [r5, #8]
 8009cea:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8009cec:	5a5a      	ldrh	r2, [r3, r1]
 8009cee:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009cf2:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8009cf4:	bf08      	it	eq
 8009cf6:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009cf8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009cfc:	bf1e      	ittt	ne
 8009cfe:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8009d00:	1af1      	subne	r1, r6, r3
 8009d02:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8009d04:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8009d08:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8009d0a:	428e      	cmp	r6, r1
 8009d0c:	d00f      	beq.n	8009d2e <mem_free+0x16e>
 8009d0e:	7908      	ldrb	r0, [r1, #4]
 8009d10:	b968      	cbnz	r0, 8009d2e <mem_free+0x16e>
    if (lfree == mem) {
 8009d12:	68a8      	ldr	r0, [r5, #8]
 8009d14:	4286      	cmp	r6, r0
      lfree = pmem;
 8009d16:	bf08      	it	eq
 8009d18:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8009d1a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009d1e:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009d20:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009d24:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009d28:	bf1c      	itt	ne
 8009d2a:	185b      	addne	r3, r3, r1
 8009d2c:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009d2e:	480a      	ldr	r0, [pc, #40]	; (8009d58 <mem_free+0x198>)
}
 8009d30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8009d34:	f004 bc23 	b.w	800e57e <sys_mutex_unlock>
}
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
 8009d3a:	bf00      	nop
 8009d3c:	080148b3 	.word	0x080148b3
 8009d40:	08014940 	.word	0x08014940
 8009d44:	080137b4 	.word	0x080137b4
 8009d48:	20010234 	.word	0x20010234
 8009d4c:	08014961 	.word	0x08014961
 8009d50:	0801497a 	.word	0x0801497a
 8009d54:	080149a0 	.word	0x080149a0
 8009d58:	20010240 	.word	0x20010240
 8009d5c:	080149d2 	.word	0x080149d2
 8009d60:	080149e9 	.word	0x080149e9
 8009d64:	08014a03 	.word	0x08014a03
 8009d68:	08014a1e 	.word	0x08014a1e

08009d6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009d6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009d70:	1ccc      	adds	r4, r1, #3
{
 8009d72:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009d74:	f024 0403 	bic.w	r4, r4, #3
 8009d78:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8009d7a:	2c0b      	cmp	r4, #11
 8009d7c:	d904      	bls.n	8009d88 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009d7e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8009d82:	d902      	bls.n	8009d8a <mem_trim+0x1e>
    return NULL;
 8009d84:	2500      	movs	r5, #0
 8009d86:	e01a      	b.n	8009dbe <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8009d88:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009d8a:	42a1      	cmp	r1, r4
 8009d8c:	d8fa      	bhi.n	8009d84 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009d8e:	4e47      	ldr	r6, [pc, #284]	; (8009eac <mem_trim+0x140>)
 8009d90:	6833      	ldr	r3, [r6, #0]
 8009d92:	42ab      	cmp	r3, r5
 8009d94:	d802      	bhi.n	8009d9c <mem_trim+0x30>
 8009d96:	6873      	ldr	r3, [r6, #4]
 8009d98:	42ab      	cmp	r3, r5
 8009d9a:	d806      	bhi.n	8009daa <mem_trim+0x3e>
 8009d9c:	4b44      	ldr	r3, [pc, #272]	; (8009eb0 <mem_trim+0x144>)
 8009d9e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8009da2:	4944      	ldr	r1, [pc, #272]	; (8009eb4 <mem_trim+0x148>)
 8009da4:	4844      	ldr	r0, [pc, #272]	; (8009eb8 <mem_trim+0x14c>)
 8009da6:	f004 fc5f 	bl	800e668 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009daa:	6833      	ldr	r3, [r6, #0]
 8009dac:	42ab      	cmp	r3, r5
 8009dae:	d802      	bhi.n	8009db6 <mem_trim+0x4a>
 8009db0:	6872      	ldr	r2, [r6, #4]
 8009db2:	42aa      	cmp	r2, r5
 8009db4:	d806      	bhi.n	8009dc4 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009db6:	f004 fbf5 	bl	800e5a4 <sys_arch_protect>
 8009dba:	f004 fbff 	bl	800e5bc <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009dc4:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009dc8:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8009dcc:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009dce:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8009dd2:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009dd4:	eba8 0807 	sub.w	r8, r8, r7
 8009dd8:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009ddc:	45a0      	cmp	r8, r4
 8009dde:	d207      	bcs.n	8009df0 <mem_trim+0x84>
 8009de0:	4b33      	ldr	r3, [pc, #204]	; (8009eb0 <mem_trim+0x144>)
 8009de2:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009de6:	4935      	ldr	r1, [pc, #212]	; (8009ebc <mem_trim+0x150>)
 8009de8:	4833      	ldr	r0, [pc, #204]	; (8009eb8 <mem_trim+0x14c>)
 8009dea:	f004 fc3d 	bl	800e668 <iprintf>
  if (newsize > size) {
 8009dee:	e7c9      	b.n	8009d84 <mem_trim+0x18>
  if (newsize == size) {
 8009df0:	d0e5      	beq.n	8009dbe <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 8009df2:	4833      	ldr	r0, [pc, #204]	; (8009ec0 <mem_trim+0x154>)
 8009df4:	f004 fbbe 	bl	800e574 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8009df8:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8009dfc:	f8d6 b000 	ldr.w	fp, [r6]
 8009e00:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8009e04:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8009e08:	bb3b      	cbnz	r3, 8009e5a <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e0a:	f5b9 4f80 	cmp.w	r9, #16384	; 0x4000
 8009e0e:	d106      	bne.n	8009e1e <mem_trim+0xb2>
 8009e10:	4b27      	ldr	r3, [pc, #156]	; (8009eb0 <mem_trim+0x144>)
 8009e12:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009e16:	492b      	ldr	r1, [pc, #172]	; (8009ec4 <mem_trim+0x158>)
 8009e18:	4827      	ldr	r0, [pc, #156]	; (8009eb8 <mem_trim+0x14c>)
 8009e1a:	f004 fc25 	bl	800e668 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e1e:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8009e22:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8009e24:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e28:	441c      	add	r4, r3
  return (struct mem *)(void *)&ram[ptr];
 8009e2a:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8009e2c:	4551      	cmp	r1, sl
    mem2->used = 0;
 8009e2e:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e32:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8009e34:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8009e38:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8009e3a:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8009e3c:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8009e3e:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e42:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8009e44:	bf08      	it	eq
 8009e46:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e48:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009e4c:	d001      	beq.n	8009e52 <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009e4e:	440b      	add	r3, r1
 8009e50:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8009e52:	481b      	ldr	r0, [pc, #108]	; (8009ec0 <mem_trim+0x154>)
 8009e54:	f004 fb93 	bl	800e57e <sys_mutex_unlock>
  return rmem;
 8009e58:	e7b1      	b.n	8009dbe <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009e5a:	f104 0314 	add.w	r3, r4, #20
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	4598      	cmp	r8, r3
 8009e62:	d3f6      	bcc.n	8009e52 <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e64:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e68:	f5b9 4f80 	cmp.w	r9, #16384	; 0x4000
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009e6c:	441c      	add	r4, r3
 8009e6e:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e70:	d106      	bne.n	8009e80 <mem_trim+0x114>
 8009e72:	4b0f      	ldr	r3, [pc, #60]	; (8009eb0 <mem_trim+0x144>)
 8009e74:	f240 3216 	movw	r2, #790	; 0x316
 8009e78:	4912      	ldr	r1, [pc, #72]	; (8009ec4 <mem_trim+0x158>)
 8009e7a:	480f      	ldr	r0, [pc, #60]	; (8009eb8 <mem_trim+0x14c>)
 8009e7c:	f004 fbf4 	bl	800e668 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009e80:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8009e82:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8009e84:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8009e86:	4291      	cmp	r1, r2
    mem2->used = 0;
 8009e88:	f04f 0100 	mov.w	r1, #0
 8009e8c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8009e8e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8009e92:	bf88      	it	hi
 8009e94:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8009e96:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8009e98:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8009e9a:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009e9e:	5b1a      	ldrh	r2, [r3, r4]
 8009ea0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009ea4:	bf1c      	itt	ne
 8009ea6:	189b      	addne	r3, r3, r2
 8009ea8:	805c      	strhne	r4, [r3, #2]
 8009eaa:	e7d2      	b.n	8009e52 <mem_trim+0xe6>
 8009eac:	20010234 	.word	0x20010234
 8009eb0:	080148b3 	.word	0x080148b3
 8009eb4:	08014a48 	.word	0x08014a48
 8009eb8:	080137b4 	.word	0x080137b4
 8009ebc:	08014a5f 	.word	0x08014a5f
 8009ec0:	20010240 	.word	0x20010240
 8009ec4:	08014a7f 	.word	0x08014a7f

08009ec8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009ecc:	2800      	cmp	r0, #0
 8009ece:	f000 8084 	beq.w	8009fda <mem_malloc+0x112>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009ed2:	1cc5      	adds	r5, r0, #3
 8009ed4:	f025 0503 	bic.w	r5, r5, #3
 8009ed8:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8009eda:	2d0b      	cmp	r5, #11
 8009edc:	d904      	bls.n	8009ee8 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009ede:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8009ee2:	d902      	bls.n	8009eea <mem_malloc+0x22>
    return NULL;
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e078      	b.n	8009fda <mem_malloc+0x112>
    size = MIN_SIZE_ALIGNED;
 8009ee8:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009eea:	42a8      	cmp	r0, r5
 8009eec:	d8fa      	bhi.n	8009ee4 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009eee:	4f40      	ldr	r7, [pc, #256]	; (8009ff0 <mem_malloc+0x128>)
 8009ef0:	f107 000c 	add.w	r0, r7, #12
 8009ef4:	f004 fb3e 	bl	800e574 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009efc:	f5c5 4080 	rsb	r0, r5, #16384	; 0x4000
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f00:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8009f04:	1ab6      	subs	r6, r6, r2
 8009f06:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8009f08:	4286      	cmp	r6, r0
 8009f0a:	d303      	bcc.n	8009f14 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009f0c:	4839      	ldr	r0, [pc, #228]	; (8009ff4 <mem_malloc+0x12c>)
 8009f0e:	f004 fb36 	bl	800e57e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8009f12:	e7e7      	b.n	8009ee4 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8009f14:	1994      	adds	r4, r2, r6
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f16:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 8009f18:	7923      	ldrb	r3, [r4, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d165      	bne.n	8009fea <mem_malloc+0x122>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009f1e:	ebac 0306 	sub.w	r3, ip, r6
 8009f22:	440b      	add	r3, r1
      if ((!mem->used) &&
 8009f24:	42ab      	cmp	r3, r5
 8009f26:	d360      	bcc.n	8009fea <mem_malloc+0x122>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009f28:	f105 0808 	add.w	r8, r5, #8
 8009f2c:	3514      	adds	r5, #20
 8009f2e:	b2ad      	uxth	r5, r5
 8009f30:	fa1f f888 	uxth.w	r8, r8
 8009f34:	42ab      	cmp	r3, r5
 8009f36:	d352      	bcc.n	8009fde <mem_malloc+0x116>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8009f38:	eb08 0506 	add.w	r5, r8, r6
 8009f3c:	b2ad      	uxth	r5, r5
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8009f3e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
 8009f42:	d106      	bne.n	8009f52 <mem_malloc+0x8a>
 8009f44:	4b2c      	ldr	r3, [pc, #176]	; (8009ff8 <mem_malloc+0x130>)
 8009f46:	f240 3287 	movw	r2, #903	; 0x387
 8009f4a:	492c      	ldr	r1, [pc, #176]	; (8009ffc <mem_malloc+0x134>)
 8009f4c:	482c      	ldr	r0, [pc, #176]	; (800a000 <mem_malloc+0x138>)
 8009f4e:	f004 fb8b 	bl	800e668 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8009f52:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8009f54:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8009f56:	195a      	adds	r2, r3, r5
          mem2->used = 0;
 8009f58:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8009f5a:	8821      	ldrh	r1, [r4, #0]
 8009f5c:	5359      	strh	r1, [r3, r5]
          mem2->prev = ptr;
 8009f5e:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8009f60:	2201      	movs	r2, #1
          mem->next = ptr2;
 8009f62:	8025      	strh	r5, [r4, #0]
          mem->used = 1;
 8009f64:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f66:	5b5a      	ldrh	r2, [r3, r5]
 8009f68:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8009f6c:	d001      	beq.n	8009f72 <mem_malloc+0xaa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8009f6e:	4413      	add	r3, r2
 8009f70:	805d      	strh	r5, [r3, #2]
        if (mem == lfree) {
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	42a3      	cmp	r3, r4
 8009f76:	d110      	bne.n	8009f9a <mem_malloc+0xd2>
  return (struct mem *)(void *)&ram[ptr];
 8009f78:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8009f7c:	791a      	ldrb	r2, [r3, #4]
 8009f7e:	b10a      	cbz	r2, 8009f84 <mem_malloc+0xbc>
 8009f80:	4299      	cmp	r1, r3
 8009f82:	d12f      	bne.n	8009fe4 <mem_malloc+0x11c>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009f84:	4299      	cmp	r1, r3
          lfree = cur;
 8009f86:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009f88:	d007      	beq.n	8009f9a <mem_malloc+0xd2>
 8009f8a:	b132      	cbz	r2, 8009f9a <mem_malloc+0xd2>
 8009f8c:	4b1a      	ldr	r3, [pc, #104]	; (8009ff8 <mem_malloc+0x130>)
 8009f8e:	f240 32b5 	movw	r2, #949	; 0x3b5
 8009f92:	491c      	ldr	r1, [pc, #112]	; (800a004 <mem_malloc+0x13c>)
 8009f94:	481a      	ldr	r0, [pc, #104]	; (800a000 <mem_malloc+0x138>)
 8009f96:	f004 fb67 	bl	800e668 <iprintf>
        sys_mutex_unlock(&mem_mutex);
 8009f9a:	4816      	ldr	r0, [pc, #88]	; (8009ff4 <mem_malloc+0x12c>)
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009f9c:	44a0      	add	r8, r4
        sys_mutex_unlock(&mem_mutex);
 8009f9e:	f004 faee 	bl	800e57e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4543      	cmp	r3, r8
 8009fa6:	d206      	bcs.n	8009fb6 <mem_malloc+0xee>
 8009fa8:	4b13      	ldr	r3, [pc, #76]	; (8009ff8 <mem_malloc+0x130>)
 8009faa:	f240 32b9 	movw	r2, #953	; 0x3b9
 8009fae:	4916      	ldr	r1, [pc, #88]	; (800a008 <mem_malloc+0x140>)
 8009fb0:	4813      	ldr	r0, [pc, #76]	; (800a000 <mem_malloc+0x138>)
 8009fb2:	f004 fb59 	bl	800e668 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009fb6:	07a3      	lsls	r3, r4, #30
 8009fb8:	d00d      	beq.n	8009fd6 <mem_malloc+0x10e>
 8009fba:	4b0f      	ldr	r3, [pc, #60]	; (8009ff8 <mem_malloc+0x130>)
 8009fbc:	f240 32bb 	movw	r2, #955	; 0x3bb
 8009fc0:	4912      	ldr	r1, [pc, #72]	; (800a00c <mem_malloc+0x144>)
 8009fc2:	480f      	ldr	r0, [pc, #60]	; (800a000 <mem_malloc+0x138>)
 8009fc4:	f004 fb50 	bl	800e668 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009fc8:	4b0b      	ldr	r3, [pc, #44]	; (8009ff8 <mem_malloc+0x130>)
 8009fca:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009fce:	4910      	ldr	r1, [pc, #64]	; (800a010 <mem_malloc+0x148>)
 8009fd0:	480b      	ldr	r0, [pc, #44]	; (800a000 <mem_malloc+0x138>)
 8009fd2:	f004 fb49 	bl	800e668 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8009fd6:	f104 0008 	add.w	r0, r4, #8
}
 8009fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	7123      	strb	r3, [r4, #4]
 8009fe2:	e7c6      	b.n	8009f72 <mem_malloc+0xaa>
  return (struct mem *)(void *)&ram[ptr];
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	4403      	add	r3, r0
 8009fe8:	e7c8      	b.n	8009f7c <mem_malloc+0xb4>
 8009fea:	460e      	mov	r6, r1
 8009fec:	e78c      	b.n	8009f08 <mem_malloc+0x40>
 8009fee:	bf00      	nop
 8009ff0:	20010234 	.word	0x20010234
 8009ff4:	20010240 	.word	0x20010240
 8009ff8:	080148b3 	.word	0x080148b3
 8009ffc:	08014a7f 	.word	0x08014a7f
 800a000:	080137b4 	.word	0x080137b4
 800a004:	08014a90 	.word	0x08014a90
 800a008:	08014aa9 	.word	0x08014aa9
 800a00c:	08014ad9 	.word	0x08014ad9
 800a010:	08014b08 	.word	0x08014b08

0800a014 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a018:	f004 fac4 	bl	800e5a4 <sys_arch_protect>
 800a01c:	4605      	mov	r5, r0

  memp = *desc->tab;
 800a01e:	68a3      	ldr	r3, [r4, #8]
 800a020:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a022:	b15c      	cbz	r4, 800a03c <do_memp_malloc_pool+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a024:	6822      	ldr	r2, [r4, #0]
 800a026:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a028:	07a3      	lsls	r3, r4, #30
 800a02a:	d006      	beq.n	800a03a <do_memp_malloc_pool+0x26>
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <do_memp_malloc_pool+0x30>)
 800a02e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a032:	4905      	ldr	r1, [pc, #20]	; (800a048 <do_memp_malloc_pool+0x34>)
 800a034:	4805      	ldr	r0, [pc, #20]	; (800a04c <do_memp_malloc_pool+0x38>)
 800a036:	f004 fb17 	bl	800e668 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a03a:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a03c:	f004 fabe 	bl	800e5bc <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800a040:	4620      	mov	r0, r4
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	08014b2b 	.word	0x08014b2b
 800a048:	08014b9e 	.word	0x08014b9e
 800a04c:	080137b4 	.word	0x080137b4

0800a050 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a050:	b538      	push	{r3, r4, r5, lr}
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a052:	078b      	lsls	r3, r1, #30
{
 800a054:	4605      	mov	r5, r0
 800a056:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800a058:	d006      	beq.n	800a068 <do_memp_free_pool+0x18>
 800a05a:	4b08      	ldr	r3, [pc, #32]	; (800a07c <do_memp_free_pool+0x2c>)
 800a05c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a060:	4907      	ldr	r1, [pc, #28]	; (800a080 <do_memp_free_pool+0x30>)
 800a062:	4808      	ldr	r0, [pc, #32]	; (800a084 <do_memp_free_pool+0x34>)
 800a064:	f004 fb00 	bl	800e668 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800a068:	f004 fa9c 	bl	800e5a4 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a06c:	68ab      	ldr	r3, [r5, #8]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800a072:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800a078:	f004 baa0 	b.w	800e5bc <sys_arch_unprotect>
 800a07c:	08014b2b 	.word	0x08014b2b
 800a080:	08014bc1 	.word	0x08014bc1
 800a084:	080137b4 	.word	0x080137b4

0800a088 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a088:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800a08a:	2200      	movs	r2, #0
 800a08c:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a08e:	3303      	adds	r3, #3
{
 800a090:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a092:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800a096:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800a098:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800a09a:	4294      	cmp	r4, r2
 800a09c:	dc00      	bgt.n	800a0a0 <memp_init_pool+0x18>
}
 800a09e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800a0a0:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800a0a2:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800a0a4:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0a6:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800a0a8:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a0aa:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 800a0ac:	e7f5      	b.n	800a09a <memp_init_pool+0x12>
	...

0800a0b0 <memp_init>:
{
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d05      	ldr	r5, [pc, #20]	; (800a0c8 <memp_init+0x18>)
 800a0b4:	240d      	movs	r4, #13
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a0b6:	3c01      	subs	r4, #1
    memp_init_pool(memp_pools[i]);
 800a0b8:	f855 0b04 	ldr.w	r0, [r5], #4
 800a0bc:	f7ff ffe4 	bl	800a088 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a0c0:	b2a4      	uxth	r4, r4
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	d1f7      	bne.n	800a0b6 <memp_init+0x6>
}
 800a0c6:	bd38      	pop	{r3, r4, r5, pc}
 800a0c8:	080135b4 	.word	0x080135b4

0800a0cc <memp_malloc_pool>:
{
 800a0cc:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	b118      	cbz	r0, 800a0da <memp_malloc_pool+0xe>
}
 800a0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 800a0d6:	f7ff bf9d 	b.w	800a014 <do_memp_malloc_pool>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a0da:	4b04      	ldr	r3, [pc, #16]	; (800a0ec <memp_malloc_pool+0x20>)
 800a0dc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800a0e0:	4903      	ldr	r1, [pc, #12]	; (800a0f0 <memp_malloc_pool+0x24>)
 800a0e2:	4804      	ldr	r0, [pc, #16]	; (800a0f4 <memp_malloc_pool+0x28>)
 800a0e4:	f004 fac0 	bl	800e668 <iprintf>
}
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bd10      	pop	{r4, pc}
 800a0ec:	08014b2b 	.word	0x08014b2b
 800a0f0:	08014be1 	.word	0x08014be1
 800a0f4:	080137b4 	.word	0x080137b4

0800a0f8 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a0f8:	280c      	cmp	r0, #12
{
 800a0fa:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a0fc:	d806      	bhi.n	800a10c <memp_malloc+0x14>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a0fe:	4b08      	ldr	r3, [pc, #32]	; (800a120 <memp_malloc+0x28>)
 800a100:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800a104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a108:	f7ff bf84 	b.w	800a014 <do_memp_malloc_pool>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a10c:	4b05      	ldr	r3, [pc, #20]	; (800a124 <memp_malloc+0x2c>)
 800a10e:	f240 1257 	movw	r2, #343	; 0x157
 800a112:	4905      	ldr	r1, [pc, #20]	; (800a128 <memp_malloc+0x30>)
 800a114:	4805      	ldr	r0, [pc, #20]	; (800a12c <memp_malloc+0x34>)
 800a116:	f004 faa7 	bl	800e668 <iprintf>
}
 800a11a:	2000      	movs	r0, #0
 800a11c:	bd08      	pop	{r3, pc}
 800a11e:	bf00      	nop
 800a120:	080135b4 	.word	0x080135b4
 800a124:	08014b2b 	.word	0x08014b2b
 800a128:	08014bf3 	.word	0x08014bf3
 800a12c:	080137b4 	.word	0x080137b4

0800a130 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a130:	b940      	cbnz	r0, 800a144 <memp_free_pool+0x14>
 800a132:	4b06      	ldr	r3, [pc, #24]	; (800a14c <memp_free_pool+0x1c>)
 800a134:	f240 1295 	movw	r2, #405	; 0x195
 800a138:	4905      	ldr	r1, [pc, #20]	; (800a150 <memp_free_pool+0x20>)
 800a13a:	4806      	ldr	r0, [pc, #24]	; (800a154 <memp_free_pool+0x24>)
 800a13c:	f004 ba94 	b.w	800e668 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 800a140:	f7ff bf86 	b.w	800a050 <do_memp_free_pool>
  if ((desc == NULL) || (mem == NULL)) {
 800a144:	2900      	cmp	r1, #0
 800a146:	d1fb      	bne.n	800a140 <memp_free_pool+0x10>
}
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	08014b2b 	.word	0x08014b2b
 800a150:	08014be1 	.word	0x08014be1
 800a154:	080137b4 	.word	0x080137b4

0800a158 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a158:	280c      	cmp	r0, #12
 800a15a:	d906      	bls.n	800a16a <memp_free+0x12>
 800a15c:	4b06      	ldr	r3, [pc, #24]	; (800a178 <memp_free+0x20>)
 800a15e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a162:	4906      	ldr	r1, [pc, #24]	; (800a17c <memp_free+0x24>)
 800a164:	4806      	ldr	r0, [pc, #24]	; (800a180 <memp_free+0x28>)
 800a166:	f004 ba7f 	b.w	800e668 <iprintf>

  if (mem == NULL) {
 800a16a:	b121      	cbz	r1, 800a176 <memp_free+0x1e>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a16c:	4b05      	ldr	r3, [pc, #20]	; (800a184 <memp_free+0x2c>)
 800a16e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a172:	f7ff bf6d 	b.w	800a050 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a176:	4770      	bx	lr
 800a178:	08014b2b 	.word	0x08014b2b
 800a17c:	08014c10 	.word	0x08014c10
 800a180:	080137b4 	.word	0x080137b4
 800a184:	080135b4 	.word	0x080135b4

0800a188 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800a188:	f06f 000b 	mvn.w	r0, #11
 800a18c:	4770      	bx	lr
	...

0800a190 <netif_issue_reports>:
{
 800a190:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a192:	4604      	mov	r4, r0
 800a194:	b930      	cbnz	r0, 800a1a4 <netif_issue_reports+0x14>
 800a196:	4b0c      	ldr	r3, [pc, #48]	; (800a1c8 <netif_issue_reports+0x38>)
 800a198:	f240 326d 	movw	r2, #877	; 0x36d
 800a19c:	490b      	ldr	r1, [pc, #44]	; (800a1cc <netif_issue_reports+0x3c>)
 800a19e:	480c      	ldr	r0, [pc, #48]	; (800a1d0 <netif_issue_reports+0x40>)
 800a1a0:	f004 fa62 	bl	800e668 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a1a4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800a1a8:	f003 0205 	and.w	r2, r3, #5
 800a1ac:	2a05      	cmp	r2, #5
 800a1ae:	d109      	bne.n	800a1c4 <netif_issue_reports+0x34>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a1b0:	6862      	ldr	r2, [r4, #4]
 800a1b2:	b13a      	cbz	r2, 800a1c4 <netif_issue_reports+0x34>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a1b4:	071b      	lsls	r3, r3, #28
 800a1b6:	d505      	bpl.n	800a1c4 <netif_issue_reports+0x34>
      etharp_gratuitous(netif);
 800a1b8:	1d21      	adds	r1, r4, #4
 800a1ba:	4620      	mov	r0, r4
}
 800a1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 800a1c0:	f7fe bbe6 	b.w	8008990 <etharp_request>
}
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	bf00      	nop
 800a1c8:	08014c2b 	.word	0x08014c2b
 800a1cc:	08014c9f 	.word	0x08014c9f
 800a1d0:	080137b4 	.word	0x080137b4

0800a1d4 <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 800a1d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a1da:	460c      	mov	r4, r1
 800a1dc:	b931      	cbnz	r1, 800a1ec <netif_do_set_ipaddr.isra.0+0x18>
 800a1de:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <netif_do_set_ipaddr.isra.0+0x44>)
 800a1e0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a1e4:	490d      	ldr	r1, [pc, #52]	; (800a21c <netif_do_set_ipaddr.isra.0+0x48>)
 800a1e6:	480e      	ldr	r0, [pc, #56]	; (800a220 <netif_do_set_ipaddr.isra.0+0x4c>)
 800a1e8:	f004 fa3e 	bl	800e668 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a1ec:	686b      	ldr	r3, [r5, #4]
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	d00f      	beq.n	800a214 <netif_do_set_ipaddr.isra.0+0x40>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a1f4:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a1f6:	a901      	add	r1, sp, #4
 800a1f8:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a1fa:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a1fc:	f001 fc8c 	bl	800bb18 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a200:	a901      	add	r1, sp, #4
 800a202:	4630      	mov	r0, r6
 800a204:	f004 f85e 	bl	800e2c4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a208:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a20a:	2101      	movs	r1, #1
 800a20c:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a20e:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a210:	f7ff ffbe 	bl	800a190 <netif_issue_reports>
}
 800a214:	b002      	add	sp, #8
 800a216:	bd70      	pop	{r4, r5, r6, pc}
 800a218:	08014c2b 	.word	0x08014c2b
 800a21c:	08013b0c 	.word	0x08013b0c
 800a220:	080137b4 	.word	0x080137b4

0800a224 <netif_init>:
}
 800a224:	4770      	bx	lr
	...

0800a228 <netif_set_addr>:
{
 800a228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800a22a:	4d14      	ldr	r5, [pc, #80]	; (800a27c <netif_set_addr+0x54>)
{
 800a22c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800a22e:	2900      	cmp	r1, #0
 800a230:	bf14      	ite	ne
 800a232:	460e      	movne	r6, r1
 800a234:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 800a236:	2a00      	cmp	r2, #0
 800a238:	bf14      	ite	ne
 800a23a:	4617      	movne	r7, r2
 800a23c:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bf18      	it	ne
 800a242:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 800a244:	6833      	ldr	r3, [r6, #0]
 800a246:	b9b3      	cbnz	r3, 800a276 <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a248:	aa01      	add	r2, sp, #4
 800a24a:	4631      	mov	r1, r6
 800a24c:	f7ff ffc2 	bl	800a1d4 <netif_do_set_ipaddr.isra.0>
 800a250:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a252:	683a      	ldr	r2, [r7, #0]
 800a254:	68a1      	ldr	r1, [r4, #8]
 800a256:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a258:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a25a:	bf18      	it	ne
 800a25c:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a25e:	682a      	ldr	r2, [r5, #0]
 800a260:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a262:	bf18      	it	ne
 800a264:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800a266:	b923      	cbnz	r3, 800a272 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a268:	aa01      	add	r2, sp, #4
 800a26a:	4631      	mov	r1, r6
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7ff ffb1 	bl	800a1d4 <netif_do_set_ipaddr.isra.0>
}
 800a272:	b003      	add	sp, #12
 800a274:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800a276:	2300      	movs	r3, #0
 800a278:	e7eb      	b.n	800a252 <netif_set_addr+0x2a>
 800a27a:	bf00      	nop
 800a27c:	080135b0 	.word	0x080135b0

0800a280 <netif_add>:
{
 800a280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a284:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a288:	4604      	mov	r4, r0
 800a28a:	b948      	cbnz	r0, 800a2a0 <netif_add+0x20>
 800a28c:	4b3b      	ldr	r3, [pc, #236]	; (800a37c <netif_add+0xfc>)
 800a28e:	f240 1227 	movw	r2, #295	; 0x127
 800a292:	493b      	ldr	r1, [pc, #236]	; (800a380 <netif_add+0x100>)
 800a294:	483b      	ldr	r0, [pc, #236]	; (800a384 <netif_add+0x104>)
 800a296:	f004 f9e7 	bl	800e668 <iprintf>
}
 800a29a:	4620      	mov	r0, r4
 800a29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a2a0:	f1b8 0f00 	cmp.w	r8, #0
 800a2a4:	d108      	bne.n	800a2b8 <netif_add+0x38>
 800a2a6:	4b35      	ldr	r3, [pc, #212]	; (800a37c <netif_add+0xfc>)
 800a2a8:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a2ac:	4936      	ldr	r1, [pc, #216]	; (800a388 <netif_add+0x108>)
 800a2ae:	4644      	mov	r4, r8
 800a2b0:	4834      	ldr	r0, [pc, #208]	; (800a384 <netif_add+0x104>)
 800a2b2:	f004 f9d9 	bl	800e668 <iprintf>
 800a2b6:	e7f0      	b.n	800a29a <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 800a2b8:	4e34      	ldr	r6, [pc, #208]	; (800a38c <netif_add+0x10c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a2ba:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a2bc:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 800a398 <netif_add+0x118>
  netif->output = netif_null_output_ip4;
 800a2c0:	6146      	str	r6, [r0, #20]
  netif->state = state;
 800a2c2:	9e08      	ldr	r6, [sp, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a2c4:	42ab      	cmp	r3, r5
 800a2c6:	bf08      	it	eq
 800a2c8:	4663      	moveq	r3, ip
  ip_addr_set_zero_ip4(&netif->gw);
 800a2ca:	60c5      	str	r5, [r0, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a2cc:	42aa      	cmp	r2, r5
 800a2ce:	bf08      	it	eq
 800a2d0:	4662      	moveq	r2, ip
  netif->state = state;
 800a2d2:	6206      	str	r6, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a2d4:	42a9      	cmp	r1, r5
 800a2d6:	bf08      	it	eq
 800a2d8:	4661      	moveq	r1, ip
  netif->num = netif_num;
 800a2da:	4e2d      	ldr	r6, [pc, #180]	; (800a390 <netif_add+0x110>)
  netif->mtu = 0;
 800a2dc:	8485      	strh	r5, [r0, #36]	; 0x24
  netif->num = netif_num;
 800a2de:	7837      	ldrb	r7, [r6, #0]
  netif->flags = 0;
 800a2e0:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->num = netif_num;
 800a2e4:	f880 7030 	strb.w	r7, [r0, #48]	; 0x30
  netif->input = input;
 800a2e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  netif->link_callback = NULL;
 800a2ea:	61c5      	str	r5, [r0, #28]
  netif->input = input;
 800a2ec:	6107      	str	r7, [r0, #16]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a2ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a2f2:	f7ff ff99 	bl	800a228 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	47c0      	blx	r8
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d13b      	bne.n	800a376 <netif_add+0xf6>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a2fe:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800a37c <netif_add+0xfc>
 800a302:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800a39c <netif_add+0x11c>
 800a306:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800a384 <netif_add+0x104>
      if (netif->num == 255) {
 800a30a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
      num_netifs = 0;
 800a30e:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a310:	6875      	ldr	r5, [r6, #4]
      if (netif->num == 255) {
 800a312:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 800a314:	bf04      	itt	eq
 800a316:	2300      	moveq	r3, #0
 800a318:	f884 3030 	strbeq.w	r3, [r4, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a31c:	b92d      	cbnz	r5, 800a32a <netif_add+0xaa>
  if (netif->num == 254) {
 800a31e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a322:	2bfe      	cmp	r3, #254	; 0xfe
 800a324:	d120      	bne.n	800a368 <netif_add+0xe8>
    netif_num = 0;
 800a326:	462b      	mov	r3, r5
 800a328:	e020      	b.n	800a36c <netif_add+0xec>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a32a:	42a5      	cmp	r5, r4
 800a32c:	d106      	bne.n	800a33c <netif_add+0xbc>
 800a32e:	4653      	mov	r3, sl
 800a330:	f240 128b 	movw	r2, #395	; 0x18b
 800a334:	4649      	mov	r1, r9
 800a336:	4640      	mov	r0, r8
 800a338:	f004 f996 	bl	800e668 <iprintf>
        num_netifs++;
 800a33c:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a33e:	2fff      	cmp	r7, #255	; 0xff
 800a340:	dd06      	ble.n	800a350 <netif_add+0xd0>
 800a342:	4653      	mov	r3, sl
 800a344:	f240 128d 	movw	r2, #397	; 0x18d
 800a348:	4912      	ldr	r1, [pc, #72]	; (800a394 <netif_add+0x114>)
 800a34a:	4640      	mov	r0, r8
 800a34c:	f004 f98c 	bl	800e668 <iprintf>
        if (netif2->num == netif->num) {
 800a350:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a354:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 800a358:	429a      	cmp	r2, r3
 800a35a:	d103      	bne.n	800a364 <netif_add+0xe4>
          netif->num++;
 800a35c:	3201      	adds	r2, #1
 800a35e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    } while (netif2 != NULL);
 800a362:	e7d2      	b.n	800a30a <netif_add+0x8a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a364:	682d      	ldr	r5, [r5, #0]
 800a366:	e7d9      	b.n	800a31c <netif_add+0x9c>
    netif_num = (u8_t)(netif->num + 1);
 800a368:	3301      	adds	r3, #1
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 800a36e:	6873      	ldr	r3, [r6, #4]
 800a370:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800a372:	6074      	str	r4, [r6, #4]
  return netif;
 800a374:	e791      	b.n	800a29a <netif_add+0x1a>
    return NULL;
 800a376:	462c      	mov	r4, r5
 800a378:	e78f      	b.n	800a29a <netif_add+0x1a>
 800a37a:	bf00      	nop
 800a37c:	08014c2b 	.word	0x08014c2b
 800a380:	08014d54 	.word	0x08014d54
 800a384:	080137b4 	.word	0x080137b4
 800a388:	08014d6d 	.word	0x08014d6d
 800a38c:	0800a189 	.word	0x0800a189
 800a390:	20014000 	.word	0x20014000
 800a394:	08014da3 	.word	0x08014da3
 800a398:	080135b0 	.word	0x080135b0
 800a39c:	08014d8f 	.word	0x08014d8f

0800a3a0 <netif_set_default>:
  netif_default = netif;
 800a3a0:	4b01      	ldr	r3, [pc, #4]	; (800a3a8 <netif_set_default+0x8>)
 800a3a2:	6098      	str	r0, [r3, #8]
}
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	20014000 	.word	0x20014000

0800a3ac <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a3ac:	b930      	cbnz	r0, 800a3bc <netif_set_up+0x10>
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <netif_set_up+0x28>)
 800a3b0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a3b4:	4908      	ldr	r1, [pc, #32]	; (800a3d8 <netif_set_up+0x2c>)
 800a3b6:	4809      	ldr	r0, [pc, #36]	; (800a3dc <netif_set_up+0x30>)
 800a3b8:	f004 b956 	b.w	800e668 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a3bc:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 800a3c0:	07d1      	lsls	r1, r2, #31
 800a3c2:	d406      	bmi.n	800a3d2 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a3c4:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a3c8:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a3ca:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a3ce:	f7ff bedf 	b.w	800a190 <netif_issue_reports>
}
 800a3d2:	4770      	bx	lr
 800a3d4:	08014c2b 	.word	0x08014c2b
 800a3d8:	08014dd1 	.word	0x08014dd1
 800a3dc:	080137b4 	.word	0x080137b4

0800a3e0 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a3e0:	b930      	cbnz	r0, 800a3f0 <netif_set_down+0x10>
 800a3e2:	4b0a      	ldr	r3, [pc, #40]	; (800a40c <netif_set_down+0x2c>)
 800a3e4:	f240 329b 	movw	r2, #923	; 0x39b
 800a3e8:	4909      	ldr	r1, [pc, #36]	; (800a410 <netif_set_down+0x30>)
 800a3ea:	480a      	ldr	r0, [pc, #40]	; (800a414 <netif_set_down+0x34>)
 800a3ec:	f004 b93c 	b.w	800e668 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800a3f0:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 800a3f4:	07d1      	lsls	r1, r2, #31
 800a3f6:	d507      	bpl.n	800a408 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a3f8:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a3fc:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a3fe:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a402:	d501      	bpl.n	800a408 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 800a404:	f7fe ba0a 	b.w	800881c <etharp_cleanup_netif>
}
 800a408:	4770      	bx	lr
 800a40a:	bf00      	nop
 800a40c:	08014c2b 	.word	0x08014c2b
 800a410:	08014ded 	.word	0x08014ded
 800a414:	080137b4 	.word	0x080137b4

0800a418 <netif_set_link_up>:
{
 800a418:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a41a:	4604      	mov	r4, r0
 800a41c:	b940      	cbnz	r0, 800a430 <netif_set_link_up+0x18>
 800a41e:	4b0d      	ldr	r3, [pc, #52]	; (800a454 <netif_set_link_up+0x3c>)
 800a420:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a424:	490c      	ldr	r1, [pc, #48]	; (800a458 <netif_set_link_up+0x40>)
 800a426:	480d      	ldr	r0, [pc, #52]	; (800a45c <netif_set_link_up+0x44>)
}
 800a428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a42c:	f004 b91c 	b.w	800e668 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a430:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800a434:	075a      	lsls	r2, r3, #29
 800a436:	d40c      	bmi.n	800a452 <netif_set_link_up+0x3a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a438:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a43c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a43e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a442:	f7ff fea5 	bl	800a190 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 800a446:	69e3      	ldr	r3, [r4, #28]
 800a448:	b11b      	cbz	r3, 800a452 <netif_set_link_up+0x3a>
 800a44a:	4620      	mov	r0, r4
}
 800a44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 800a450:	4718      	bx	r3
}
 800a452:	bd10      	pop	{r4, pc}
 800a454:	08014c2b 	.word	0x08014c2b
 800a458:	08014e0b 	.word	0x08014e0b
 800a45c:	080137b4 	.word	0x080137b4

0800a460 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a460:	b930      	cbnz	r0, 800a470 <netif_set_link_down+0x10>
 800a462:	4b09      	ldr	r3, [pc, #36]	; (800a488 <netif_set_link_down+0x28>)
 800a464:	f240 4206 	movw	r2, #1030	; 0x406
 800a468:	4908      	ldr	r1, [pc, #32]	; (800a48c <netif_set_link_down+0x2c>)
 800a46a:	4809      	ldr	r0, [pc, #36]	; (800a490 <netif_set_link_down+0x30>)
 800a46c:	f004 b8fc 	b.w	800e668 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a470:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 800a474:	0751      	lsls	r1, r2, #29
 800a476:	d506      	bpl.n	800a486 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a478:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 800a47c:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a47e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800a482:	b103      	cbz	r3, 800a486 <netif_set_link_down+0x26>
 800a484:	4718      	bx	r3
}
 800a486:	4770      	bx	lr
 800a488:	08014c2b 	.word	0x08014c2b
 800a48c:	08014e2c 	.word	0x08014e2c
 800a490:	080137b4 	.word	0x080137b4

0800a494 <netif_set_link_callback>:
  if (netif) {
 800a494:	b100      	cbz	r0, 800a498 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800a496:	61c1      	str	r1, [r0, #28]
}
 800a498:	4770      	bx	lr
	...

0800a49c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a49c:	4603      	mov	r3, r0
 800a49e:	b158      	cbz	r0, 800a4b8 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a4a0:	4a06      	ldr	r2, [pc, #24]	; (800a4bc <netif_get_by_index+0x20>)
 800a4a2:	6850      	ldr	r0, [r2, #4]
 800a4a4:	b900      	cbnz	r0, 800a4a8 <netif_get_by_index+0xc>
 800a4a6:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 800a4a8:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800a4ac:	3201      	adds	r2, #1
 800a4ae:	b2d2      	uxtb	r2, r2
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d001      	beq.n	800a4b8 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 800a4b4:	6800      	ldr	r0, [r0, #0]
 800a4b6:	e7f5      	b.n	800a4a4 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	20014000 	.word	0x20014000

0800a4c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800a4c0:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a4c2:	b968      	cbnz	r0, 800a4e0 <pbuf_add_header_impl+0x20>
 800a4c4:	4b14      	ldr	r3, [pc, #80]	; (800a518 <pbuf_add_header_impl+0x58>)
 800a4c6:	f240 12df 	movw	r2, #479	; 0x1df
 800a4ca:	4914      	ldr	r1, [pc, #80]	; (800a51c <pbuf_add_header_impl+0x5c>)
 800a4cc:	4814      	ldr	r0, [pc, #80]	; (800a520 <pbuf_add_header_impl+0x60>)
 800a4ce:	f004 f8cb 	bl	800e668 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	e01f      	b.n	800a516 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d0fb      	beq.n	800a4d2 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800a4da:	6842      	ldr	r2, [r0, #4]
 800a4dc:	1a51      	subs	r1, r2, r1
 800a4de:	e014      	b.n	800a50a <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800a4e0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a4e4:	d2f5      	bcs.n	800a4d2 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800a4e6:	b1a9      	cbz	r1, 800a514 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a4e8:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 800a4ea:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800a4ec:	fa13 f381 	uxtah	r3, r3, r1
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	429c      	cmp	r4, r3
 800a4f4:	d8ed      	bhi.n	800a4d2 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800a4f6:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800a4fa:	2d00      	cmp	r5, #0
 800a4fc:	daeb      	bge.n	800a4d6 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800a4fe:	6842      	ldr	r2, [r0, #4]
 800a500:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a502:	f100 0210 	add.w	r2, r0, #16
 800a506:	4291      	cmp	r1, r2
 800a508:	d3e3      	bcc.n	800a4d2 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800a50a:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800a50c:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a50e:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800a510:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800a512:	8144      	strh	r4, [r0, #10]


  return 0;
 800a514:	2000      	movs	r0, #0
}
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	08014e4f 	.word	0x08014e4f
 800a51c:	08014f64 	.word	0x08014f64
 800a520:	080137b4 	.word	0x080137b4

0800a524 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a524:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a528:	2b01      	cmp	r3, #1
{
 800a52a:	b570      	push	{r4, r5, r6, lr}
 800a52c:	4606      	mov	r6, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800a532:	d006      	beq.n	800a542 <pbuf_alloc_reference+0x1e>
 800a534:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <pbuf_alloc_reference+0x3c>)
 800a536:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800a53a:	490a      	ldr	r1, [pc, #40]	; (800a564 <pbuf_alloc_reference+0x40>)
 800a53c:	480a      	ldr	r0, [pc, #40]	; (800a568 <pbuf_alloc_reference+0x44>)
 800a53e:	f004 f893 	bl	800e668 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800a542:	200b      	movs	r0, #11
 800a544:	f7ff fdd8 	bl	800a0f8 <memp_malloc>
  if (p == NULL) {
 800a548:	b140      	cbz	r0, 800a55c <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800a54a:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a54c:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800a54e:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 800a550:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 800a552:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 800a554:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 800a558:	2301      	movs	r3, #1
 800a55a:	81c3      	strh	r3, [r0, #14]
}
 800a55c:	bd70      	pop	{r4, r5, r6, pc}
 800a55e:	bf00      	nop
 800a560:	08014e4f 	.word	0x08014e4f
 800a564:	08014ec2 	.word	0x08014ec2
 800a568:	080137b4 	.word	0x080137b4

0800a56c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a56c:	3003      	adds	r0, #3
 800a56e:	f020 0003 	bic.w	r0, r0, #3
{
 800a572:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a574:	180e      	adds	r6, r1, r0
 800a576:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800a57a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a57c:	42ae      	cmp	r6, r5
 800a57e:	d80d      	bhi.n	800a59c <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 800a580:	b104      	cbz	r4, 800a584 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a582:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800a584:	4618      	mov	r0, r3
  p->next = NULL;
 800a586:	2300      	movs	r3, #0
  p->payload = payload;
 800a588:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800a58c:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 800a58e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 800a590:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 800a592:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800a594:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 800a596:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 800a598:	81c3      	strh	r3, [r0, #14]
}
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800a59c:	2000      	movs	r0, #0
 800a59e:	e7fc      	b.n	800a59a <pbuf_alloced_custom+0x2e>

0800a5a0 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7ff bf8d 	b.w	800a4c0 <pbuf_add_header_impl>
	...

0800a5a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800a5a8:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a5aa:	b990      	cbnz	r0, 800a5d2 <pbuf_remove_header+0x2a>
 800a5ac:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <pbuf_remove_header+0x48>)
 800a5ae:	f240 224b 	movw	r2, #587	; 0x24b
 800a5b2:	4910      	ldr	r1, [pc, #64]	; (800a5f4 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a5b4:	4810      	ldr	r0, [pc, #64]	; (800a5f8 <pbuf_remove_header+0x50>)
 800a5b6:	f004 f857 	bl	800e668 <iprintf>
    return 1;
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	e008      	b.n	800a5d0 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800a5be:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a5c0:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800a5c2:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a5c4:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a5c6:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800a5c8:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800a5ce:	2000      	movs	r0, #0
}
 800a5d0:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800a5d2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800a5d6:	d2f0      	bcs.n	800a5ba <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	d0f8      	beq.n	800a5ce <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800a5dc:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a5de:	8943      	ldrh	r3, [r0, #10]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d9ec      	bls.n	800a5be <pbuf_remove_header+0x16>
 800a5e4:	4b02      	ldr	r3, [pc, #8]	; (800a5f0 <pbuf_remove_header+0x48>)
 800a5e6:	f240 2255 	movw	r2, #597	; 0x255
 800a5ea:	4904      	ldr	r1, [pc, #16]	; (800a5fc <pbuf_remove_header+0x54>)
 800a5ec:	e7e2      	b.n	800a5b4 <pbuf_remove_header+0xc>
 800a5ee:	bf00      	nop
 800a5f0:	08014e4f 	.word	0x08014e4f
 800a5f4:	08014f64 	.word	0x08014f64
 800a5f8:	080137b4 	.word	0x080137b4
 800a5fc:	08014ed4 	.word	0x08014ed4

0800a600 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800a600:	1e0b      	subs	r3, r1, #0
 800a602:	da02      	bge.n	800a60a <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800a604:	4259      	negs	r1, r3
 800a606:	f7ff bfcf 	b.w	800a5a8 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800a60a:	2201      	movs	r2, #1
 800a60c:	f7ff bf58 	b.w	800a4c0 <pbuf_add_header_impl>

0800a610 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a614:	4604      	mov	r4, r0
 800a616:	b950      	cbnz	r0, 800a62e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a618:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800a61a:	4b2b      	ldr	r3, [pc, #172]	; (800a6c8 <pbuf_free+0xb8>)
 800a61c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a620:	492a      	ldr	r1, [pc, #168]	; (800a6cc <pbuf_free+0xbc>)
 800a622:	482b      	ldr	r0, [pc, #172]	; (800a6d0 <pbuf_free+0xc0>)
 800a624:	f004 f820 	bl	800e668 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800a628:	4628      	mov	r0, r5
 800a62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800a62e:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a630:	4f25      	ldr	r7, [pc, #148]	; (800a6c8 <pbuf_free+0xb8>)
 800a632:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800a6dc <pbuf_free+0xcc>
 800a636:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800a6d0 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800a63a:	f003 ffb3 	bl	800e5a4 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a63e:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800a640:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a642:	b933      	cbnz	r3, 800a652 <pbuf_free+0x42>
 800a644:	463b      	mov	r3, r7
 800a646:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a64a:	4651      	mov	r1, sl
 800a64c:	4640      	mov	r0, r8
 800a64e:	f004 f80b 	bl	800e668 <iprintf>
    ref = --(p->ref);
 800a652:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a654:	4648      	mov	r0, r9
    ref = --(p->ref);
 800a656:	3e01      	subs	r6, #1
 800a658:	b2f6      	uxtb	r6, r6
 800a65a:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800a65c:	f003 ffae 	bl	800e5bc <sys_arch_unprotect>
    if (ref == 0) {
 800a660:	2e00      	cmp	r6, #0
 800a662:	d1e1      	bne.n	800a628 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a664:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800a666:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a668:	079b      	lsls	r3, r3, #30
 800a66a:	d511      	bpl.n	800a690 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a66c:	6923      	ldr	r3, [r4, #16]
 800a66e:	b933      	cbnz	r3, 800a67e <pbuf_free+0x6e>
 800a670:	463b      	mov	r3, r7
 800a672:	f240 22ff 	movw	r2, #767	; 0x2ff
 800a676:	4917      	ldr	r1, [pc, #92]	; (800a6d4 <pbuf_free+0xc4>)
 800a678:	4640      	mov	r0, r8
 800a67a:	f003 fff5 	bl	800e668 <iprintf>
        pc->custom_free_function(p);
 800a67e:	6923      	ldr	r3, [r4, #16]
 800a680:	4620      	mov	r0, r4
 800a682:	4798      	blx	r3
      count++;
 800a684:	3501      	adds	r5, #1
 800a686:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800a688:	2e00      	cmp	r6, #0
 800a68a:	d0cd      	beq.n	800a628 <pbuf_free+0x18>
 800a68c:	4634      	mov	r4, r6
 800a68e:	e7d4      	b.n	800a63a <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 800a690:	7b23      	ldrb	r3, [r4, #12]
 800a692:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800a696:	2b02      	cmp	r3, #2
 800a698:	d104      	bne.n	800a6a4 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800a69a:	4621      	mov	r1, r4
 800a69c:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800a69e:	f7ff fd5b 	bl	800a158 <memp_free>
 800a6a2:	e7ef      	b.n	800a684 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d102      	bne.n	800a6ae <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	200b      	movs	r0, #11
 800a6ac:	e7f7      	b.n	800a69e <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800a6ae:	b91b      	cbnz	r3, 800a6b8 <pbuf_free+0xa8>
          mem_free(p);
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f7ff fa85 	bl	8009bc0 <mem_free>
 800a6b6:	e7e5      	b.n	800a684 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800a6b8:	463b      	mov	r3, r7
 800a6ba:	f240 320f 	movw	r2, #783	; 0x30f
 800a6be:	4906      	ldr	r1, [pc, #24]	; (800a6d8 <pbuf_free+0xc8>)
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	f003 ffd1 	bl	800e668 <iprintf>
 800a6c6:	e7dd      	b.n	800a684 <pbuf_free+0x74>
 800a6c8:	08014e4f 	.word	0x08014e4f
 800a6cc:	08014f64 	.word	0x08014f64
 800a6d0:	080137b4 	.word	0x080137b4
 800a6d4:	08014f08 	.word	0x08014f08
 800a6d8:	08014f29 	.word	0x08014f29
 800a6dc:	08014ef2 	.word	0x08014ef2

0800a6e0 <pbuf_alloc>:
  switch (type) {
 800a6e0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 800a6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e8:	4606      	mov	r6, r0
 800a6ea:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 800a6ec:	b284      	uxth	r4, r0
  switch (type) {
 800a6ee:	d014      	beq.n	800a71a <pbuf_alloc+0x3a>
 800a6f0:	d808      	bhi.n	800a704 <pbuf_alloc+0x24>
 800a6f2:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d107      	bne.n	800a70a <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 800a6fa:	2000      	movs	r0, #0
}
 800a6fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800a700:	f7ff bf10 	b.w	800a524 <pbuf_alloc_reference>
  switch (type) {
 800a704:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800a708:	d03b      	beq.n	800a782 <pbuf_alloc+0xa2>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800a70a:	4b2e      	ldr	r3, [pc, #184]	; (800a7c4 <pbuf_alloc+0xe4>)
 800a70c:	f240 1227 	movw	r2, #295	; 0x127
 800a710:	492d      	ldr	r1, [pc, #180]	; (800a7c8 <pbuf_alloc+0xe8>)
 800a712:	482e      	ldr	r0, [pc, #184]	; (800a7cc <pbuf_alloc+0xec>)
 800a714:	f003 ffa8 	bl	800e668 <iprintf>
 800a718:	e00c      	b.n	800a734 <pbuf_alloc+0x54>
  switch (type) {
 800a71a:	2600      	movs	r6, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a71c:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 800a720:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800a7d4 <pbuf_alloc+0xf4>
  switch (type) {
 800a724:	4635      	mov	r5, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800a726:	200c      	movs	r0, #12
 800a728:	46b2      	mov	sl, r6
 800a72a:	f7ff fce5 	bl	800a0f8 <memp_malloc>
        if (q == NULL) {
 800a72e:	4606      	mov	r6, r0
 800a730:	b930      	cbnz	r0, 800a740 <pbuf_alloc+0x60>
          if (p) {
 800a732:	b90d      	cbnz	r5, 800a738 <pbuf_alloc+0x58>
      return NULL;
 800a734:	2500      	movs	r5, #0
 800a736:	e01f      	b.n	800a778 <pbuf_alloc+0x98>
            pbuf_free(p);
 800a738:	4628      	mov	r0, r5
 800a73a:	f7ff ff69 	bl	800a610 <pbuf_free>
 800a73e:	e7f9      	b.n	800a734 <pbuf_alloc+0x54>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a740:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a742:	4404      	add	r4, r0
  p->next = NULL;
 800a744:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800a746:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a748:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a74c:	3413      	adds	r4, #19
  p->next = NULL;
 800a74e:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a750:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800a754:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800a758:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a75c:	b29b      	uxth	r3, r3
  p->payload = payload;
 800a75e:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800a760:	42bb      	cmp	r3, r7
 800a762:	bf28      	it	cs
 800a764:	463b      	movcs	r3, r7
  p->len = len;
 800a766:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800a768:	b14d      	cbz	r5, 800a77e <pbuf_alloc+0x9e>
          last->next = q;
 800a76a:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800a76e:	1afb      	subs	r3, r7, r3
        offset = 0;
 800a770:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 800a772:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 800a774:	2f00      	cmp	r7, #0
 800a776:	d1d6      	bne.n	800a726 <pbuf_alloc+0x46>
}
 800a778:	4628      	mov	r0, r5
 800a77a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77e:	4605      	mov	r5, r0
 800a780:	e7f5      	b.n	800a76e <pbuf_alloc+0x8e>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800a782:	3403      	adds	r4, #3
 800a784:	1ccb      	adds	r3, r1, #3
 800a786:	f024 0403 	bic.w	r4, r4, #3
 800a78a:	f023 0303 	bic.w	r3, r3, #3
 800a78e:	441c      	add	r4, r3
 800a790:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a792:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a796:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800a798:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800a79a:	d3cb      	bcc.n	800a734 <pbuf_alloc+0x54>
 800a79c:	4283      	cmp	r3, r0
 800a79e:	d8c9      	bhi.n	800a734 <pbuf_alloc+0x54>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800a7a0:	f7ff fb92 	bl	8009ec8 <mem_malloc>
      if (p == NULL) {
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d0e6      	beq.n	800a778 <pbuf_alloc+0x98>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a7aa:	4406      	add	r6, r0
  p->next = NULL;
 800a7ac:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800a7ae:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a7b0:	3613      	adds	r6, #19
  p->next = NULL;
 800a7b2:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800a7b4:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <pbuf_alloc+0xf0>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800a7b6:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 800a7ba:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800a7bc:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800a7be:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800a7c0:	e7da      	b.n	800a778 <pbuf_alloc+0x98>
 800a7c2:	bf00      	nop
 800a7c4:	08014e4f 	.word	0x08014e4f
 800a7c8:	08014f3b 	.word	0x08014f3b
 800a7cc:	080137b4 	.word	0x080137b4
 800a7d0:	00010080 	.word	0x00010080
 800a7d4:	00010082 	.word	0x00010082

0800a7d8 <pbuf_realloc>:
{
 800a7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a7de:	4604      	mov	r4, r0
 800a7e0:	b930      	cbnz	r0, 800a7f0 <pbuf_realloc+0x18>
 800a7e2:	4b24      	ldr	r3, [pc, #144]	; (800a874 <pbuf_realloc+0x9c>)
 800a7e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a7e8:	4923      	ldr	r1, [pc, #140]	; (800a878 <pbuf_realloc+0xa0>)
 800a7ea:	4824      	ldr	r0, [pc, #144]	; (800a87c <pbuf_realloc+0xa4>)
 800a7ec:	f003 ff3c 	bl	800e668 <iprintf>
  if (new_len >= p->tot_len) {
 800a7f0:	8927      	ldrh	r7, [r4, #8]
 800a7f2:	42b7      	cmp	r7, r6
 800a7f4:	d93c      	bls.n	800a870 <pbuf_realloc+0x98>
 800a7f6:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a7f8:	f8df 8078 	ldr.w	r8, [pc, #120]	; 800a874 <pbuf_realloc+0x9c>
 800a7fc:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a884 <pbuf_realloc+0xac>
 800a800:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800a87c <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800a804:	8962      	ldrh	r2, [r4, #10]
 800a806:	42aa      	cmp	r2, r5
 800a808:	d319      	bcc.n	800a83e <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800a80a:	7b23      	ldrb	r3, [r4, #12]
 800a80c:	0719      	lsls	r1, r3, #28
 800a80e:	d127      	bne.n	800a860 <pbuf_realloc+0x88>
 800a810:	42aa      	cmp	r2, r5
 800a812:	d025      	beq.n	800a860 <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a814:	7b63      	ldrb	r3, [r4, #13]
 800a816:	079b      	lsls	r3, r3, #30
 800a818:	d422      	bmi.n	800a860 <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800a81a:	6861      	ldr	r1, [r4, #4]
 800a81c:	4620      	mov	r0, r4
 800a81e:	1b09      	subs	r1, r1, r4
 800a820:	4429      	add	r1, r5
 800a822:	b289      	uxth	r1, r1
 800a824:	f7ff faa2 	bl	8009d6c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a828:	4604      	mov	r4, r0
 800a82a:	b9c8      	cbnz	r0, 800a860 <pbuf_realloc+0x88>
 800a82c:	4b11      	ldr	r3, [pc, #68]	; (800a874 <pbuf_realloc+0x9c>)
 800a82e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800a832:	4913      	ldr	r1, [pc, #76]	; (800a880 <pbuf_realloc+0xa8>)
 800a834:	4811      	ldr	r0, [pc, #68]	; (800a87c <pbuf_realloc+0xa4>)
 800a836:	f003 ff17 	bl	800e668 <iprintf>
  q->len = rem_len;
 800a83a:	8164      	strh	r4, [r4, #10]
 800a83c:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800a83e:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a840:	1bf3      	subs	r3, r6, r7
 800a842:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 800a844:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800a846:	4413      	add	r3, r2
 800a848:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800a84a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a84c:	2c00      	cmp	r4, #0
 800a84e:	d1d9      	bne.n	800a804 <pbuf_realloc+0x2c>
 800a850:	4643      	mov	r3, r8
 800a852:	f240 12af 	movw	r2, #431	; 0x1af
 800a856:	4651      	mov	r1, sl
 800a858:	4648      	mov	r0, r9
 800a85a:	f003 ff05 	bl	800e668 <iprintf>
 800a85e:	e7d1      	b.n	800a804 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800a860:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800a862:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800a864:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800a866:	b108      	cbz	r0, 800a86c <pbuf_realloc+0x94>
    pbuf_free(q->next);
 800a868:	f7ff fed2 	bl	800a610 <pbuf_free>
  q->next = NULL;
 800a86c:	2300      	movs	r3, #0
 800a86e:	6023      	str	r3, [r4, #0]
}
 800a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a874:	08014e4f 	.word	0x08014e4f
 800a878:	08014f56 	.word	0x08014f56
 800a87c:	080137b4 	.word	0x080137b4
 800a880:	08014f86 	.word	0x08014f86
 800a884:	08014f6e 	.word	0x08014f6e

0800a888 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a888:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800a88a:	2200      	movs	r2, #0
 800a88c:	b290      	uxth	r0, r2
 800a88e:	3201      	adds	r2, #1
 800a890:	b903      	cbnz	r3, 800a894 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800a892:	4770      	bx	lr
    p = p->next;
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	e7f9      	b.n	800a88c <pbuf_clen+0x4>

0800a898 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a898:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800a89a:	4604      	mov	r4, r0
 800a89c:	b188      	cbz	r0, 800a8c2 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800a89e:	f003 fe81 	bl	800e5a4 <sys_arch_protect>
 800a8a2:	7ba3      	ldrb	r3, [r4, #14]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	73a3      	strb	r3, [r4, #14]
 800a8a8:	f003 fe88 	bl	800e5bc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a8ac:	7ba3      	ldrb	r3, [r4, #14]
 800a8ae:	b943      	cbnz	r3, 800a8c2 <pbuf_ref+0x2a>
 800a8b0:	4b04      	ldr	r3, [pc, #16]	; (800a8c4 <pbuf_ref+0x2c>)
 800a8b2:	f240 3242 	movw	r2, #834	; 0x342
 800a8b6:	4904      	ldr	r1, [pc, #16]	; (800a8c8 <pbuf_ref+0x30>)
 800a8b8:	4804      	ldr	r0, [pc, #16]	; (800a8cc <pbuf_ref+0x34>)
  }
}
 800a8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a8be:	f003 bed3 	b.w	800e668 <iprintf>
}
 800a8c2:	bd10      	pop	{r4, pc}
 800a8c4:	08014e4f 	.word	0x08014e4f
 800a8c8:	08014fa2 	.word	0x08014fa2
 800a8cc:	080137b4 	.word	0x080137b4

0800a8d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a8d4:	4604      	mov	r4, r0
 800a8d6:	b100      	cbz	r0, 800a8da <pbuf_cat+0xa>
 800a8d8:	b961      	cbnz	r1, 800a8f4 <pbuf_cat+0x24>
 800a8da:	4b15      	ldr	r3, [pc, #84]	; (800a930 <pbuf_cat+0x60>)
 800a8dc:	f240 3259 	movw	r2, #857	; 0x359
 800a8e0:	4914      	ldr	r1, [pc, #80]	; (800a934 <pbuf_cat+0x64>)
 800a8e2:	4815      	ldr	r0, [pc, #84]	; (800a938 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a8e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a8e8:	f003 bebe 	b.w	800e668 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8ec:	8929      	ldrh	r1, [r5, #8]
 800a8ee:	440b      	add	r3, r1
 800a8f0:	8123      	strh	r3, [r4, #8]
 800a8f2:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800a8f4:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a8f6:	8923      	ldrh	r3, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a8f8:	2a00      	cmp	r2, #0
 800a8fa:	d1f7      	bne.n	800a8ec <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a8fc:	8962      	ldrh	r2, [r4, #10]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d00f      	beq.n	800a922 <pbuf_cat+0x52>
 800a902:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <pbuf_cat+0x60>)
 800a904:	f240 3262 	movw	r2, #866	; 0x362
 800a908:	490c      	ldr	r1, [pc, #48]	; (800a93c <pbuf_cat+0x6c>)
 800a90a:	480b      	ldr	r0, [pc, #44]	; (800a938 <pbuf_cat+0x68>)
 800a90c:	f003 feac 	bl	800e668 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	b133      	cbz	r3, 800a922 <pbuf_cat+0x52>
 800a914:	4b06      	ldr	r3, [pc, #24]	; (800a930 <pbuf_cat+0x60>)
 800a916:	f240 3263 	movw	r2, #867	; 0x363
 800a91a:	4909      	ldr	r1, [pc, #36]	; (800a940 <pbuf_cat+0x70>)
 800a91c:	4806      	ldr	r0, [pc, #24]	; (800a938 <pbuf_cat+0x68>)
 800a91e:	f003 fea3 	bl	800e668 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a922:	892a      	ldrh	r2, [r5, #8]
 800a924:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800a926:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800a928:	4413      	add	r3, r2
 800a92a:	8123      	strh	r3, [r4, #8]
}
 800a92c:	bd70      	pop	{r4, r5, r6, pc}
 800a92e:	bf00      	nop
 800a930:	08014e4f 	.word	0x08014e4f
 800a934:	08014fb4 	.word	0x08014fb4
 800a938:	080137b4 	.word	0x080137b4
 800a93c:	08014fe9 	.word	0x08014fe9
 800a940:	08015016 	.word	0x08015016

0800a944 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a948:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a94a:	4605      	mov	r5, r0
 800a94c:	b120      	cbz	r0, 800a958 <pbuf_copy+0x14>
 800a94e:	b119      	cbz	r1, 800a958 <pbuf_copy+0x14>
 800a950:	8902      	ldrh	r2, [r0, #8]
 800a952:	890b      	ldrh	r3, [r1, #8]
 800a954:	429a      	cmp	r2, r3
 800a956:	d20a      	bcs.n	800a96e <pbuf_copy+0x2a>
 800a958:	4b34      	ldr	r3, [pc, #208]	; (800aa2c <pbuf_copy+0xe8>)
 800a95a:	f240 32c9 	movw	r2, #969	; 0x3c9
 800a95e:	4934      	ldr	r1, [pc, #208]	; (800aa30 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a960:	4834      	ldr	r0, [pc, #208]	; (800aa34 <pbuf_copy+0xf0>)
 800a962:	f003 fe81 	bl	800e668 <iprintf>
 800a966:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800a96a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800a96e:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a970:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800aa2c <pbuf_copy+0xe8>
 800a974:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800aa44 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 800a978:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a97a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800aa34 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a97e:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800a982:	8962      	ldrh	r2, [r4, #10]
 800a984:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a988:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a98a:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a98c:	6861      	ldr	r1, [r4, #4]
 800a98e:	4438      	add	r0, r7
 800a990:	4590      	cmp	r8, r2
 800a992:	4431      	add	r1, r6
 800a994:	bf28      	it	cs
 800a996:	4690      	movcs	r8, r2
 800a998:	4642      	mov	r2, r8
    offset_to += len;
 800a99a:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800a99c:	f003 fe4e 	bl	800e63c <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a9a0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800a9a2:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a9a4:	429f      	cmp	r7, r3
 800a9a6:	d906      	bls.n	800a9b6 <pbuf_copy+0x72>
 800a9a8:	465b      	mov	r3, fp
 800a9aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800a9ae:	4651      	mov	r1, sl
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	f003 fe59 	bl	800e668 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a9b6:	8963      	ldrh	r3, [r4, #10]
 800a9b8:	429e      	cmp	r6, r3
 800a9ba:	d906      	bls.n	800a9ca <pbuf_copy+0x86>
 800a9bc:	465b      	mov	r3, fp
 800a9be:	f240 32da 	movw	r2, #986	; 0x3da
 800a9c2:	491d      	ldr	r1, [pc, #116]	; (800aa38 <pbuf_copy+0xf4>)
 800a9c4:	4648      	mov	r0, r9
 800a9c6:	f003 fe4f 	bl	800e668 <iprintf>
    if (offset_from >= p_from->len) {
 800a9ca:	8963      	ldrh	r3, [r4, #10]
 800a9cc:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800a9ce:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800a9d0:	bf24      	itt	cs
 800a9d2:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800a9d4:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800a9d6:	429f      	cmp	r7, r3
 800a9d8:	d108      	bne.n	800a9ec <pbuf_copy+0xa8>
      p_to = p_to->next;
 800a9da:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800a9dc:	b92d      	cbnz	r5, 800a9ea <pbuf_copy+0xa6>
 800a9de:	b314      	cbz	r4, 800aa26 <pbuf_copy+0xe2>
 800a9e0:	4b12      	ldr	r3, [pc, #72]	; (800aa2c <pbuf_copy+0xe8>)
 800a9e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800a9e6:	4915      	ldr	r1, [pc, #84]	; (800aa3c <pbuf_copy+0xf8>)
 800a9e8:	e7ba      	b.n	800a960 <pbuf_copy+0x1c>
      offset_to = 0;
 800a9ea:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a9ec:	b17c      	cbz	r4, 800aa0e <pbuf_copy+0xca>
 800a9ee:	8962      	ldrh	r2, [r4, #10]
 800a9f0:	8923      	ldrh	r3, [r4, #8]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d10b      	bne.n	800aa0e <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	b14b      	cbz	r3, 800aa0e <pbuf_copy+0xca>
 800a9fa:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <pbuf_copy+0xe8>)
 800a9fc:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa00:	490f      	ldr	r1, [pc, #60]	; (800aa40 <pbuf_copy+0xfc>)
 800aa02:	480c      	ldr	r0, [pc, #48]	; (800aa34 <pbuf_copy+0xf0>)
 800aa04:	f003 fe30 	bl	800e668 <iprintf>
 800aa08:	f06f 0005 	mvn.w	r0, #5
 800aa0c:	e7ad      	b.n	800a96a <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800aa0e:	896a      	ldrh	r2, [r5, #10]
 800aa10:	892b      	ldrh	r3, [r5, #8]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d105      	bne.n	800aa22 <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800aa16:	682b      	ldr	r3, [r5, #0]
 800aa18:	b11b      	cbz	r3, 800aa22 <pbuf_copy+0xde>
 800aa1a:	4b04      	ldr	r3, [pc, #16]	; (800aa2c <pbuf_copy+0xe8>)
 800aa1c:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800aa20:	e7ee      	b.n	800aa00 <pbuf_copy+0xbc>
  } while (p_from);
 800aa22:	2c00      	cmp	r4, #0
 800aa24:	d1ab      	bne.n	800a97e <pbuf_copy+0x3a>
  return ERR_OK;
 800aa26:	4620      	mov	r0, r4
 800aa28:	e79f      	b.n	800a96a <pbuf_copy+0x26>
 800aa2a:	bf00      	nop
 800aa2c:	08014e4f 	.word	0x08014e4f
 800aa30:	0801505d 	.word	0x0801505d
 800aa34:	080137b4 	.word	0x080137b4
 800aa38:	080150a4 	.word	0x080150a4
 800aa3c:	080150bf 	.word	0x080150bf
 800aa40:	080150cc 	.word	0x080150cc
 800aa44:	0801508d 	.word	0x0801508d

0800aa48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800aa50:	4605      	mov	r5, r0
 800aa52:	b950      	cbnz	r0, 800aa6a <pbuf_copy_partial+0x22>
 800aa54:	462e      	mov	r6, r5
 800aa56:	4b1b      	ldr	r3, [pc, #108]	; (800aac4 <pbuf_copy_partial+0x7c>)
 800aa58:	f240 420a 	movw	r2, #1034	; 0x40a
 800aa5c:	491a      	ldr	r1, [pc, #104]	; (800aac8 <pbuf_copy_partial+0x80>)
 800aa5e:	481b      	ldr	r0, [pc, #108]	; (800aacc <pbuf_copy_partial+0x84>)
 800aa60:	f003 fe02 	bl	800e668 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800aa64:	4630      	mov	r0, r6
 800aa66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800aa6a:	bb41      	cbnz	r1, 800aabe <pbuf_copy_partial+0x76>
 800aa6c:	4b15      	ldr	r3, [pc, #84]	; (800aac4 <pbuf_copy_partial+0x7c>)
 800aa6e:	f240 420b 	movw	r2, #1035	; 0x40b
 800aa72:	4917      	ldr	r1, [pc, #92]	; (800aad0 <pbuf_copy_partial+0x88>)
 800aa74:	463e      	mov	r6, r7
 800aa76:	4815      	ldr	r0, [pc, #84]	; (800aacc <pbuf_copy_partial+0x84>)
 800aa78:	f003 fdf6 	bl	800e668 <iprintf>
 800aa7c:	e7f2      	b.n	800aa64 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800aa7e:	896c      	ldrh	r4, [r5, #10]
 800aa80:	b153      	cbz	r3, 800aa98 <pbuf_copy_partial+0x50>
 800aa82:	42a3      	cmp	r3, r4
 800aa84:	d308      	bcc.n	800aa98 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800aa86:	1b1b      	subs	r3, r3, r4
 800aa88:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800aa8a:	682d      	ldr	r5, [r5, #0]
 800aa8c:	f1b8 0f00 	cmp.w	r8, #0
 800aa90:	d0e8      	beq.n	800aa64 <pbuf_copy_partial+0x1c>
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	d1f3      	bne.n	800aa7e <pbuf_copy_partial+0x36>
 800aa96:	e7e5      	b.n	800aa64 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800aa98:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aa9a:	6869      	ldr	r1, [r5, #4]
 800aa9c:	19b8      	adds	r0, r7, r6
      buf_copy_len = (u16_t)(p->len - offset);
 800aa9e:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aaa0:	4419      	add	r1, r3
 800aaa2:	4544      	cmp	r4, r8
 800aaa4:	bf28      	it	cs
 800aaa6:	4644      	movcs	r4, r8
 800aaa8:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aaaa:	4426      	add	r6, r4
      len = (u16_t)(len - buf_copy_len);
 800aaac:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800aab0:	f003 fdc4 	bl	800e63c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800aab4:	b2b6      	uxth	r6, r6
      offset = 0;
 800aab6:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800aab8:	fa1f f884 	uxth.w	r8, r4
      offset = 0;
 800aabc:	e7e5      	b.n	800aa8a <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800aabe:	2600      	movs	r6, #0
 800aac0:	e7e4      	b.n	800aa8c <pbuf_copy_partial+0x44>
 800aac2:	bf00      	nop
 800aac4:	08014e4f 	.word	0x08014e4f
 800aac8:	080150f6 	.word	0x080150f6
 800aacc:	080137b4 	.word	0x080137b4
 800aad0:	08015115 	.word	0x08015115

0800aad4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800aad8:	460a      	mov	r2, r1
 800aada:	8929      	ldrh	r1, [r5, #8]
 800aadc:	f7ff fe00 	bl	800a6e0 <pbuf_alloc>
  if (q == NULL) {
 800aae0:	4604      	mov	r4, r0
 800aae2:	b150      	cbz	r0, 800aafa <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800aae4:	4629      	mov	r1, r5
 800aae6:	f7ff ff2d 	bl	800a944 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800aaea:	b130      	cbz	r0, 800aafa <pbuf_clone+0x26>
 800aaec:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <pbuf_clone+0x2c>)
 800aaee:	f240 5224 	movw	r2, #1316	; 0x524
 800aaf2:	4904      	ldr	r1, [pc, #16]	; (800ab04 <pbuf_clone+0x30>)
 800aaf4:	4804      	ldr	r0, [pc, #16]	; (800ab08 <pbuf_clone+0x34>)
 800aaf6:	f003 fdb7 	bl	800e668 <iprintf>
  return q;
}
 800aafa:	4620      	mov	r0, r4
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	bf00      	nop
 800ab00:	08014e4f 	.word	0x08014e4f
 800ab04:	08015215 	.word	0x08015215
 800ab08:	080137b4 	.word	0x080137b4

0800ab0c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0e:	4c12      	ldr	r4, [pc, #72]	; (800ab58 <tcp_new_port+0x4c>)
 800ab10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800ab14:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800ab18:	8823      	ldrh	r3, [r4, #0]
  tcp_port++;
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	4d0f      	ldr	r5, [pc, #60]	; (800ab5c <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ab1e:	2204      	movs	r2, #4
  tcp_port++;
 800ab20:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ab22:	42b3      	cmp	r3, r6
 800ab24:	bf08      	it	eq
 800ab26:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ab2a:	f855 1b04 	ldr.w	r1, [r5], #4
 800ab2e:	6809      	ldr	r1, [r1, #0]
 800ab30:	b931      	cbnz	r1, 800ab40 <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ab32:	3a01      	subs	r2, #1
 800ab34:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800ab38:	d1f7      	bne.n	800ab2a <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	8023      	strh	r3, [r4, #0]
 800ab3e:	e007      	b.n	800ab50 <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 800ab40:	8acf      	ldrh	r7, [r1, #22]
 800ab42:	429f      	cmp	r7, r3
 800ab44:	d105      	bne.n	800ab52 <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800ab46:	3801      	subs	r0, #1
 800ab48:	b280      	uxth	r0, r0
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	d1e5      	bne.n	800ab1a <tcp_new_port+0xe>
 800ab4e:	8023      	strh	r3, [r4, #0]
}
 800ab50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ab52:	68c9      	ldr	r1, [r1, #12]
 800ab54:	e7ec      	b.n	800ab30 <tcp_new_port+0x24>
 800ab56:	bf00      	nop
 800ab58:	20001a60 	.word	0x20001a60
 800ab5c:	08013684 	.word	0x08013684

0800ab60 <tcp_close_shutdown_fin>:
{
 800ab60:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ab62:	4604      	mov	r4, r0
 800ab64:	b930      	cbnz	r0, 800ab74 <tcp_close_shutdown_fin+0x14>
 800ab66:	4b13      	ldr	r3, [pc, #76]	; (800abb4 <tcp_close_shutdown_fin+0x54>)
 800ab68:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ab6c:	4912      	ldr	r1, [pc, #72]	; (800abb8 <tcp_close_shutdown_fin+0x58>)
 800ab6e:	4813      	ldr	r0, [pc, #76]	; (800abbc <tcp_close_shutdown_fin+0x5c>)
 800ab70:	f003 fd7a 	bl	800e668 <iprintf>
  switch (pcb->state) {
 800ab74:	7d23      	ldrb	r3, [r4, #20]
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d003      	beq.n	800ab82 <tcp_close_shutdown_fin+0x22>
 800ab7a:	2b07      	cmp	r3, #7
 800ab7c:	d00c      	beq.n	800ab98 <tcp_close_shutdown_fin+0x38>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d108      	bne.n	800ab94 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800ab82:	4620      	mov	r0, r4
 800ab84:	f002 fd82 	bl	800d68c <tcp_send_fin>
      if (err == ERR_OK) {
 800ab88:	b960      	cbnz	r0, 800aba4 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800ab8a:	2305      	movs	r3, #5
    tcp_output(pcb);
 800ab8c:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 800ab8e:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800ab90:	f002 fedc 	bl	800d94c <tcp_output>
  switch (pcb->state) {
 800ab94:	2000      	movs	r0, #0
}
 800ab96:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f002 fd77 	bl	800d68c <tcp_send_fin>
      if (err == ERR_OK) {
 800ab9e:	b908      	cbnz	r0, 800aba4 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 800aba0:	2309      	movs	r3, #9
 800aba2:	e7f3      	b.n	800ab8c <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d1f6      	bne.n	800ab96 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800aba8:	8b63      	ldrh	r3, [r4, #26]
 800abaa:	f043 0308 	orr.w	r3, r3, #8
 800abae:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800abb0:	e7f0      	b.n	800ab94 <tcp_close_shutdown_fin+0x34>
 800abb2:	bf00      	nop
 800abb4:	08015226 	.word	0x08015226
 800abb8:	08015298 	.word	0x08015298
 800abbc:	080137b4 	.word	0x080137b4

0800abc0 <tcp_init>:
{
 800abc0:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800abc2:	f003 fddf 	bl	800e784 <rand>
 800abc6:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800abca:	4b02      	ldr	r3, [pc, #8]	; (800abd4 <tcp_init+0x14>)
 800abcc:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800abd0:	8018      	strh	r0, [r3, #0]
}
 800abd2:	bd08      	pop	{r3, pc}
 800abd4:	20001a60 	.word	0x20001a60

0800abd8 <tcp_free>:
{
 800abd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800abda:	7d03      	ldrb	r3, [r0, #20]
{
 800abdc:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d105      	bne.n	800abee <tcp_free+0x16>
 800abe2:	4b06      	ldr	r3, [pc, #24]	; (800abfc <tcp_free+0x24>)
 800abe4:	22d4      	movs	r2, #212	; 0xd4
 800abe6:	4906      	ldr	r1, [pc, #24]	; (800ac00 <tcp_free+0x28>)
 800abe8:	4806      	ldr	r0, [pc, #24]	; (800ac04 <tcp_free+0x2c>)
 800abea:	f003 fd3d 	bl	800e668 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800abee:	4621      	mov	r1, r4
 800abf0:	2001      	movs	r0, #1
}
 800abf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800abf6:	f7ff baaf 	b.w	800a158 <memp_free>
 800abfa:	bf00      	nop
 800abfc:	08015226 	.word	0x08015226
 800ac00:	080152a4 	.word	0x080152a4
 800ac04:	080137b4 	.word	0x080137b4

0800ac08 <tcp_bind>:
{
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800ac0a:	4d23      	ldr	r5, [pc, #140]	; (800ac98 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac0c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	bf18      	it	ne
 800ac12:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ac14:	b948      	cbnz	r0, 800ac2a <tcp_bind+0x22>
 800ac16:	4b21      	ldr	r3, [pc, #132]	; (800ac9c <tcp_bind+0x94>)
 800ac18:	f240 22a9 	movw	r2, #681	; 0x2a9
 800ac1c:	4920      	ldr	r1, [pc, #128]	; (800aca0 <tcp_bind+0x98>)
 800ac1e:	4821      	ldr	r0, [pc, #132]	; (800aca4 <tcp_bind+0x9c>)
 800ac20:	f003 fd22 	bl	800e668 <iprintf>
 800ac24:	f06f 000f 	mvn.w	r0, #15
}
 800ac28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ac2a:	7d03      	ldrb	r3, [r0, #20]
 800ac2c:	b14b      	cbz	r3, 800ac42 <tcp_bind+0x3a>
 800ac2e:	4b1b      	ldr	r3, [pc, #108]	; (800ac9c <tcp_bind+0x94>)
 800ac30:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ac34:	491c      	ldr	r1, [pc, #112]	; (800aca8 <tcp_bind+0xa0>)
 800ac36:	481b      	ldr	r0, [pc, #108]	; (800aca4 <tcp_bind+0x9c>)
 800ac38:	f003 fd16 	bl	800e668 <iprintf>
 800ac3c:	f06f 0005 	mvn.w	r0, #5
 800ac40:	e7f2      	b.n	800ac28 <tcp_bind+0x20>
  if (port == 0) {
 800ac42:	b932      	cbnz	r2, 800ac52 <tcp_bind+0x4a>
    port = tcp_new_port();
 800ac44:	f7ff ff62 	bl	800ab0c <tcp_new_port>
    if (port == 0) {
 800ac48:	4602      	mov	r2, r0
 800ac4a:	b950      	cbnz	r0, 800ac62 <tcp_bind+0x5a>
      return ERR_BUF;
 800ac4c:	f06f 0001 	mvn.w	r0, #1
 800ac50:	e7ea      	b.n	800ac28 <tcp_bind+0x20>
 800ac52:	4816      	ldr	r0, [pc, #88]	; (800acac <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ac54:	f850 1b04 	ldr.w	r1, [r0], #4
 800ac58:	6809      	ldr	r1, [r1, #0]
 800ac5a:	b971      	cbnz	r1, 800ac7a <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	d1f8      	bne.n	800ac54 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	b103      	cbz	r3, 800ac68 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ac66:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ac68:	4b11      	ldr	r3, [pc, #68]	; (800acb0 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800ac6a:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	601c      	str	r4, [r3, #0]
 800ac70:	60e2      	str	r2, [r4, #12]
 800ac72:	f003 f941 	bl	800def8 <tcp_timer_needed>
  return ERR_OK;
 800ac76:	2000      	movs	r0, #0
 800ac78:	e7d6      	b.n	800ac28 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800ac7a:	8ace      	ldrh	r6, [r1, #22]
 800ac7c:	4296      	cmp	r6, r2
 800ac7e:	d105      	bne.n	800ac8c <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ac80:	680f      	ldr	r7, [r1, #0]
 800ac82:	b12f      	cbz	r7, 800ac90 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800ac84:	682e      	ldr	r6, [r5, #0]
 800ac86:	b11e      	cbz	r6, 800ac90 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ac88:	42b7      	cmp	r7, r6
 800ac8a:	d001      	beq.n	800ac90 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ac8c:	68c9      	ldr	r1, [r1, #12]
 800ac8e:	e7e4      	b.n	800ac5a <tcp_bind+0x52>
              return ERR_USE;
 800ac90:	f06f 0007 	mvn.w	r0, #7
 800ac94:	e7c8      	b.n	800ac28 <tcp_bind+0x20>
 800ac96:	bf00      	nop
 800ac98:	080135b0 	.word	0x080135b0
 800ac9c:	08015226 	.word	0x08015226
 800aca0:	080152b5 	.word	0x080152b5
 800aca4:	080137b4 	.word	0x080137b4
 800aca8:	080152cb 	.word	0x080152cb
 800acac:	08013684 	.word	0x08013684
 800acb0:	2001400c 	.word	0x2001400c

0800acb4 <tcp_listen_with_backlog_and_err>:
{
 800acb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acb6:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800acb8:	4605      	mov	r5, r0
 800acba:	b968      	cbnz	r0, 800acd8 <tcp_listen_with_backlog_and_err+0x24>
 800acbc:	4b29      	ldr	r3, [pc, #164]	; (800ad64 <tcp_listen_with_backlog_and_err+0xb0>)
 800acbe:	f240 3259 	movw	r2, #857	; 0x359
 800acc2:	4929      	ldr	r1, [pc, #164]	; (800ad68 <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 800acc4:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800acc6:	4829      	ldr	r0, [pc, #164]	; (800ad6c <tcp_listen_with_backlog_and_err+0xb8>)
 800acc8:	f003 fcce 	bl	800e668 <iprintf>
 800accc:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 800acd0:	b106      	cbz	r6, 800acd4 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800acd2:	7033      	strb	r3, [r6, #0]
}
 800acd4:	4620      	mov	r0, r4
 800acd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800acd8:	7d07      	ldrb	r7, [r0, #20]
 800acda:	b157      	cbz	r7, 800acf2 <tcp_listen_with_backlog_and_err+0x3e>
 800acdc:	4b21      	ldr	r3, [pc, #132]	; (800ad64 <tcp_listen_with_backlog_and_err+0xb0>)
 800acde:	f240 325a 	movw	r2, #858	; 0x35a
 800ace2:	4923      	ldr	r1, [pc, #140]	; (800ad70 <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 800ace4:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ace6:	4821      	ldr	r0, [pc, #132]	; (800ad6c <tcp_listen_with_backlog_and_err+0xb8>)
 800ace8:	f003 fcbe 	bl	800e668 <iprintf>
 800acec:	f06f 030e 	mvn.w	r3, #14
 800acf0:	e7ee      	b.n	800acd0 <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800acf2:	2002      	movs	r0, #2
 800acf4:	f7ff fa00 	bl	800a0f8 <memp_malloc>
  if (lpcb == NULL) {
 800acf8:	4604      	mov	r4, r0
 800acfa:	2800      	cmp	r0, #0
 800acfc:	d02e      	beq.n	800ad5c <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800acfe:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800ad00:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800ad02:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800ad04:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800ad06:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800ad08:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800ad0a:	7d6a      	ldrb	r2, [r5, #21]
 800ad0c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800ad0e:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800ad10:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800ad12:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800ad14:	7aea      	ldrb	r2, [r5, #11]
 800ad16:	4f17      	ldr	r7, [pc, #92]	; (800ad74 <tcp_listen_with_backlog_and_err+0xc0>)
 800ad18:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800ad1a:	7aaa      	ldrb	r2, [r5, #10]
 800ad1c:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800ad1e:	682a      	ldr	r2, [r5, #0]
 800ad20:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800ad22:	b133      	cbz	r3, 800ad32 <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	42ab      	cmp	r3, r5
 800ad28:	d110      	bne.n	800ad4c <tcp_listen_with_backlog_and_err+0x98>
 800ad2a:	68eb      	ldr	r3, [r5, #12]
 800ad2c:	603b      	str	r3, [r7, #0]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800ad32:	4628      	mov	r0, r5
 800ad34:	f7ff ff50 	bl	800abd8 <tcp_free>
  lpcb->accept = tcp_accept_null;
 800ad38:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <tcp_listen_with_backlog_and_err+0xc4>)
 800ad3a:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	607c      	str	r4, [r7, #4]
 800ad40:	60e3      	str	r3, [r4, #12]
 800ad42:	f003 f8d9 	bl	800def8 <tcp_timer_needed>
  res = ERR_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	e7c2      	b.n	800acd0 <tcp_listen_with_backlog_and_err+0x1c>
 800ad4a:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0ee      	beq.n	800ad2e <tcp_listen_with_backlog_and_err+0x7a>
 800ad50:	68da      	ldr	r2, [r3, #12]
 800ad52:	42aa      	cmp	r2, r5
 800ad54:	d1f9      	bne.n	800ad4a <tcp_listen_with_backlog_and_err+0x96>
 800ad56:	68ea      	ldr	r2, [r5, #12]
 800ad58:	60da      	str	r2, [r3, #12]
 800ad5a:	e7e8      	b.n	800ad2e <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800ad5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad60:	e7b6      	b.n	800acd0 <tcp_listen_with_backlog_and_err+0x1c>
 800ad62:	bf00      	nop
 800ad64:	08015226 	.word	0x08015226
 800ad68:	080152f3 	.word	0x080152f3
 800ad6c:	080137b4 	.word	0x080137b4
 800ad70:	08015320 	.word	0x08015320
 800ad74:	2001400c 	.word	0x2001400c
 800ad78:	0800b8e1 	.word	0x0800b8e1

0800ad7c <tcp_update_rcv_ann_wnd>:
{
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ad7e:	4604      	mov	r4, r0
 800ad80:	b930      	cbnz	r0, 800ad90 <tcp_update_rcv_ann_wnd+0x14>
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <tcp_update_rcv_ann_wnd+0x5c>)
 800ad84:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ad88:	4914      	ldr	r1, [pc, #80]	; (800addc <tcp_update_rcv_ann_wnd+0x60>)
 800ad8a:	4815      	ldr	r0, [pc, #84]	; (800ade0 <tcp_update_rcv_ann_wnd+0x64>)
 800ad8c:	f003 fc6c 	bl	800e668 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ad90:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ad92:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800ad96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad98:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ad9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ad9c:	1ad0      	subs	r0, r2, r3
 800ad9e:	42b7      	cmp	r7, r6
 800ada0:	4428      	add	r0, r5
 800ada2:	bf94      	ite	ls
 800ada4:	1bc1      	subls	r1, r0, r7
 800ada6:	1b81      	subhi	r1, r0, r6
 800ada8:	2900      	cmp	r1, #0
 800adaa:	db01      	blt.n	800adb0 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800adac:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 800adae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800adb0:	1aea      	subs	r2, r5, r3
 800adb2:	2a00      	cmp	r2, #0
 800adb4:	dd02      	ble.n	800adbc <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800adb6:	2000      	movs	r0, #0
 800adb8:	8560      	strh	r0, [r4, #42]	; 0x2a
 800adba:	e7f8      	b.n	800adae <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800adbc:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800adbe:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800adc2:	d306      	bcc.n	800add2 <tcp_update_rcv_ann_wnd+0x56>
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <tcp_update_rcv_ann_wnd+0x5c>)
 800adc6:	f240 32b6 	movw	r2, #950	; 0x3b6
 800adca:	4906      	ldr	r1, [pc, #24]	; (800ade4 <tcp_update_rcv_ann_wnd+0x68>)
 800adcc:	4804      	ldr	r0, [pc, #16]	; (800ade0 <tcp_update_rcv_ann_wnd+0x64>)
 800adce:	f003 fc4b 	bl	800e668 <iprintf>
    return 0;
 800add2:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800add4:	8565      	strh	r5, [r4, #42]	; 0x2a
 800add6:	e7ea      	b.n	800adae <tcp_update_rcv_ann_wnd+0x32>
 800add8:	08015226 	.word	0x08015226
 800addc:	08015357 	.word	0x08015357
 800ade0:	080137b4 	.word	0x080137b4
 800ade4:	0801537b 	.word	0x0801537b

0800ade8 <tcp_recved>:
{
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800adec:	4605      	mov	r5, r0
 800adee:	b940      	cbnz	r0, 800ae02 <tcp_recved+0x1a>
 800adf0:	4b18      	ldr	r3, [pc, #96]	; (800ae54 <tcp_recved+0x6c>)
 800adf2:	f240 32cf 	movw	r2, #975	; 0x3cf
 800adf6:	4918      	ldr	r1, [pc, #96]	; (800ae58 <tcp_recved+0x70>)
 800adf8:	4818      	ldr	r0, [pc, #96]	; (800ae5c <tcp_recved+0x74>)
}
 800adfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800adfe:	f003 bc33 	b.w	800e668 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ae02:	7d03      	ldrb	r3, [r0, #20]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d106      	bne.n	800ae16 <tcp_recved+0x2e>
 800ae08:	4b12      	ldr	r3, [pc, #72]	; (800ae54 <tcp_recved+0x6c>)
 800ae0a:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ae0e:	4914      	ldr	r1, [pc, #80]	; (800ae60 <tcp_recved+0x78>)
 800ae10:	4812      	ldr	r0, [pc, #72]	; (800ae5c <tcp_recved+0x74>)
 800ae12:	f003 fc29 	bl	800e668 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ae16:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ae18:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ae1c:	1911      	adds	r1, r2, r4
 800ae1e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ae20:	4299      	cmp	r1, r3
 800ae22:	d813      	bhi.n	800ae4c <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ae24:	428a      	cmp	r2, r1
 800ae26:	bf88      	it	hi
 800ae28:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	8529      	strh	r1, [r5, #40]	; 0x28
 800ae2e:	f7ff ffa5 	bl	800ad7c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ae32:	f240 23d9 	movw	r3, #729	; 0x2d9
 800ae36:	4298      	cmp	r0, r3
 800ae38:	d90a      	bls.n	800ae50 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 800ae3a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 800ae3c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 800ae3e:	f043 0302 	orr.w	r3, r3, #2
 800ae42:	836b      	strh	r3, [r5, #26]
}
 800ae44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800ae48:	f002 bd80 	b.w	800d94c <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	e7ec      	b.n	800ae2a <tcp_recved+0x42>
}
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	bf00      	nop
 800ae54:	08015226 	.word	0x08015226
 800ae58:	08015395 	.word	0x08015395
 800ae5c:	080137b4 	.word	0x080137b4
 800ae60:	080153ad 	.word	0x080153ad

0800ae64 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ae64:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800ae66:	4604      	mov	r4, r0
 800ae68:	b148      	cbz	r0, 800ae7e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800ae6a:	6840      	ldr	r0, [r0, #4]
 800ae6c:	b108      	cbz	r0, 800ae72 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800ae6e:	f7ff fbcf 	bl	800a610 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ae72:	4621      	mov	r1, r4
 800ae74:	2003      	movs	r0, #3
  }
}
 800ae76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800ae7a:	f7ff b96d 	b.w	800a158 <memp_free>
}
 800ae7e:	bd10      	pop	{r4, pc}

0800ae80 <tcp_segs_free>:
{
 800ae80:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800ae82:	b900      	cbnz	r0, 800ae86 <tcp_segs_free+0x6>
}
 800ae84:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800ae86:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800ae88:	f7ff ffec 	bl	800ae64 <tcp_seg_free>
    seg = next;
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	e7f8      	b.n	800ae82 <tcp_segs_free+0x2>

0800ae90 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ae90:	b100      	cbz	r0, 800ae94 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800ae92:	6101      	str	r1, [r0, #16]
  }
}
 800ae94:	4770      	bx	lr
	...

0800ae98 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	b158      	cbz	r0, 800aeb8 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800aea0:	7d03      	ldrb	r3, [r0, #20]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d106      	bne.n	800aeb4 <tcp_recv+0x1c>
 800aea6:	4b05      	ldr	r3, [pc, #20]	; (800aebc <tcp_recv+0x24>)
 800aea8:	f240 72df 	movw	r2, #2015	; 0x7df
 800aeac:	4904      	ldr	r1, [pc, #16]	; (800aec0 <tcp_recv+0x28>)
 800aeae:	4805      	ldr	r0, [pc, #20]	; (800aec4 <tcp_recv+0x2c>)
 800aeb0:	f003 fbda 	bl	800e668 <iprintf>
    pcb->recv = recv;
 800aeb4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800aeb8:	bd38      	pop	{r3, r4, r5, pc}
 800aeba:	bf00      	nop
 800aebc:	08015226 	.word	0x08015226
 800aec0:	080153ec 	.word	0x080153ec
 800aec4:	080137b4 	.word	0x080137b4

0800aec8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800aec8:	b538      	push	{r3, r4, r5, lr}
 800aeca:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800aecc:	4604      	mov	r4, r0
 800aece:	b150      	cbz	r0, 800aee6 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800aed0:	7d03      	ldrb	r3, [r0, #20]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d106      	bne.n	800aee4 <tcp_sent+0x1c>
 800aed6:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <tcp_sent+0x20>)
 800aed8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800aedc:	4903      	ldr	r1, [pc, #12]	; (800aeec <tcp_sent+0x24>)
 800aede:	4804      	ldr	r0, [pc, #16]	; (800aef0 <tcp_sent+0x28>)
 800aee0:	f003 fbc2 	bl	800e668 <iprintf>
    pcb->sent = sent;
 800aee4:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	08015226 	.word	0x08015226
 800aeec:	08015413 	.word	0x08015413
 800aef0:	080137b4 	.word	0x080137b4

0800aef4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800aef8:	4604      	mov	r4, r0
 800aefa:	b158      	cbz	r0, 800af14 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800aefc:	7d03      	ldrb	r3, [r0, #20]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d106      	bne.n	800af10 <tcp_err+0x1c>
 800af02:	4b05      	ldr	r3, [pc, #20]	; (800af18 <tcp_err+0x24>)
 800af04:	f640 020d 	movw	r2, #2061	; 0x80d
 800af08:	4904      	ldr	r1, [pc, #16]	; (800af1c <tcp_err+0x28>)
 800af0a:	4805      	ldr	r0, [pc, #20]	; (800af20 <tcp_err+0x2c>)
 800af0c:	f003 fbac 	bl	800e668 <iprintf>
    pcb->errf = err;
 800af10:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800af14:	bd38      	pop	{r3, r4, r5, pc}
 800af16:	bf00      	nop
 800af18:	08015226 	.word	0x08015226
 800af1c:	0801543a 	.word	0x0801543a
 800af20:	080137b4 	.word	0x080137b4

0800af24 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800af24:	b118      	cbz	r0, 800af2e <tcp_accept+0xa>
 800af26:	7d03      	ldrb	r3, [r0, #20]
 800af28:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800af2a:	bf08      	it	eq
 800af2c:	6181      	streq	r1, [r0, #24]
  }
}
 800af2e:	4770      	bx	lr

0800af30 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800af30:	b570      	push	{r4, r5, r6, lr}
 800af32:	460e      	mov	r6, r1
 800af34:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800af36:	4604      	mov	r4, r0
 800af38:	b940      	cbnz	r0, 800af4c <tcp_poll+0x1c>
 800af3a:	4b0b      	ldr	r3, [pc, #44]	; (800af68 <tcp_poll+0x38>)
 800af3c:	f640 023d 	movw	r2, #2109	; 0x83d
 800af40:	490a      	ldr	r1, [pc, #40]	; (800af6c <tcp_poll+0x3c>)
 800af42:	480b      	ldr	r0, [pc, #44]	; (800af70 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800af44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800af48:	f003 bb8e 	b.w	800e668 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800af4c:	7d03      	ldrb	r3, [r0, #20]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d106      	bne.n	800af60 <tcp_poll+0x30>
 800af52:	4b05      	ldr	r3, [pc, #20]	; (800af68 <tcp_poll+0x38>)
 800af54:	f640 023e 	movw	r2, #2110	; 0x83e
 800af58:	4906      	ldr	r1, [pc, #24]	; (800af74 <tcp_poll+0x44>)
 800af5a:	4805      	ldr	r0, [pc, #20]	; (800af70 <tcp_poll+0x40>)
 800af5c:	f003 fb84 	bl	800e668 <iprintf>
  pcb->poll = poll;
 800af60:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800af64:	7765      	strb	r5, [r4, #29]
}
 800af66:	bd70      	pop	{r4, r5, r6, pc}
 800af68:	08015226 	.word	0x08015226
 800af6c:	08015460 	.word	0x08015460
 800af70:	080137b4 	.word	0x080137b4
 800af74:	08015476 	.word	0x08015476

0800af78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800af78:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800af7a:	4604      	mov	r4, r0
 800af7c:	b940      	cbnz	r0, 800af90 <tcp_pcb_purge+0x18>
 800af7e:	4b11      	ldr	r3, [pc, #68]	; (800afc4 <tcp_pcb_purge+0x4c>)
 800af80:	f640 0251 	movw	r2, #2129	; 0x851
 800af84:	4910      	ldr	r1, [pc, #64]	; (800afc8 <tcp_pcb_purge+0x50>)
 800af86:	4811      	ldr	r0, [pc, #68]	; (800afcc <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800af88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800af8c:	f003 bb6c 	b.w	800e668 <iprintf>
  if (pcb->state != CLOSED &&
 800af90:	7d03      	ldrb	r3, [r0, #20]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d915      	bls.n	800afc2 <tcp_pcb_purge+0x4a>
 800af96:	2b0a      	cmp	r3, #10
 800af98:	d013      	beq.n	800afc2 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800af9a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800af9c:	b118      	cbz	r0, 800afa6 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800af9e:	f7ff fb37 	bl	800a610 <pbuf_free>
      pcb->refused_data = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800afa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800afaa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800afac:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800afae:	f7ff ff67 	bl	800ae80 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800afb2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800afb4:	f7ff ff64 	bl	800ae80 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800afbe:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800afc2:	bd10      	pop	{r4, pc}
 800afc4:	08015226 	.word	0x08015226
 800afc8:	08015494 	.word	0x08015494
 800afcc:	080137b4 	.word	0x080137b4

0800afd0 <tcp_slowtmr>:
{
 800afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800afd4:	4dab      	ldr	r5, [pc, #684]	; (800b284 <tcp_slowtmr+0x2b4>)
{
 800afd6:	b087      	sub	sp, #28
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800afd8:	4fab      	ldr	r7, [pc, #684]	; (800b288 <tcp_slowtmr+0x2b8>)
  ++tcp_ticks;
 800afda:	68eb      	ldr	r3, [r5, #12]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800afdc:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 800b2a4 <tcp_slowtmr+0x2d4>
  ++tcp_ticks;
 800afe0:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800afe2:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 800b2a8 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 800afe6:	60eb      	str	r3, [r5, #12]
  ++tcp_timer_ctr;
 800afe8:	7c2b      	ldrb	r3, [r5, #16]
 800afea:	3301      	adds	r3, #1
 800afec:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800afee:	68ac      	ldr	r4, [r5, #8]
  prev = NULL;
 800aff0:	f04f 0900 	mov.w	r9, #0
  while (pcb != NULL) {
 800aff4:	b95c      	cbnz	r4, 800b00e <tcp_slowtmr+0x3e>
  pcb = tcp_tw_pcbs;
 800aff6:	696e      	ldr	r6, [r5, #20]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800aff8:	4fa3      	ldr	r7, [pc, #652]	; (800b288 <tcp_slowtmr+0x2b8>)
 800affa:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 800b2ac <tcp_slowtmr+0x2dc>
 800affe:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800b2a8 <tcp_slowtmr+0x2d8>
  while (pcb != NULL) {
 800b002:	2e00      	cmp	r6, #0
 800b004:	f040 819b 	bne.w	800b33e <tcp_slowtmr+0x36e>
}
 800b008:	b007      	add	sp, #28
 800b00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b00e:	7d23      	ldrb	r3, [r4, #20]
 800b010:	b933      	cbnz	r3, 800b020 <tcp_slowtmr+0x50>
 800b012:	463b      	mov	r3, r7
 800b014:	f240 42be 	movw	r2, #1214	; 0x4be
 800b018:	4659      	mov	r1, fp
 800b01a:	4640      	mov	r0, r8
 800b01c:	f003 fb24 	bl	800e668 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b020:	7d23      	ldrb	r3, [r4, #20]
 800b022:	2b01      	cmp	r3, #1
 800b024:	d106      	bne.n	800b034 <tcp_slowtmr+0x64>
 800b026:	463b      	mov	r3, r7
 800b028:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b02c:	4997      	ldr	r1, [pc, #604]	; (800b28c <tcp_slowtmr+0x2bc>)
 800b02e:	4640      	mov	r0, r8
 800b030:	f003 fb1a 	bl	800e668 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b034:	7d23      	ldrb	r3, [r4, #20]
 800b036:	2b0a      	cmp	r3, #10
 800b038:	d106      	bne.n	800b048 <tcp_slowtmr+0x78>
 800b03a:	463b      	mov	r3, r7
 800b03c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b040:	4993      	ldr	r1, [pc, #588]	; (800b290 <tcp_slowtmr+0x2c0>)
 800b042:	4640      	mov	r0, r8
 800b044:	f003 fb10 	bl	800e668 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b048:	7c2b      	ldrb	r3, [r5, #16]
 800b04a:	7fa2      	ldrb	r2, [r4, #30]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d103      	bne.n	800b058 <tcp_slowtmr+0x88>
      pcb = pcb->next;
 800b050:	68e6      	ldr	r6, [r4, #12]
      continue;
 800b052:	46a1      	mov	r9, r4
 800b054:	4634      	mov	r4, r6
 800b056:	e7cd      	b.n	800aff4 <tcp_slowtmr+0x24>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b058:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 800b05a:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b05c:	2a02      	cmp	r2, #2
 800b05e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b062:	d176      	bne.n	800b152 <tcp_slowtmr+0x182>
 800b064:	2b05      	cmp	r3, #5
 800b066:	d976      	bls.n	800b156 <tcp_slowtmr+0x186>
      ++pcb_remove;
 800b068:	f04f 0a01 	mov.w	sl, #1
    if (pcb->state == FIN_WAIT_2) {
 800b06c:	7d23      	ldrb	r3, [r4, #20]
 800b06e:	2b06      	cmp	r3, #6
 800b070:	d10b      	bne.n	800b08a <tcp_slowtmr+0xba>
      if (pcb->flags & TF_RXCLOSED) {
 800b072:	8b62      	ldrh	r2, [r4, #26]
 800b074:	06d2      	lsls	r2, r2, #27
 800b076:	d508      	bpl.n	800b08a <tcp_slowtmr+0xba>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b078:	68ea      	ldr	r2, [r5, #12]
 800b07a:	6a21      	ldr	r1, [r4, #32]
 800b07c:	1a52      	subs	r2, r2, r1
 800b07e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800b080:	bf84      	itt	hi
 800b082:	f10a 0a01 	addhi.w	sl, sl, #1
 800b086:	fa5f fa8a 	uxtbhi.w	sl, sl
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b08a:	7a66      	ldrb	r6, [r4, #9]
 800b08c:	f016 0608 	ands.w	r6, r6, #8
 800b090:	d019      	beq.n	800b0c6 <tcp_slowtmr+0xf6>
 800b092:	2b04      	cmp	r3, #4
 800b094:	d002      	beq.n	800b09c <tcp_slowtmr+0xcc>
        ((pcb->state == ESTABLISHED) ||
 800b096:	2b07      	cmp	r3, #7
 800b098:	f040 811c 	bne.w	800b2d4 <tcp_slowtmr+0x304>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b09c:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b09e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b0a2:	68e9      	ldr	r1, [r5, #12]
 800b0a4:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b0a6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b0aa:	f503 2224 	add.w	r2, r3, #671744	; 0xa4000
 800b0ae:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
 800b0b2:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b0b6:	4291      	cmp	r1, r2
 800b0b8:	f240 80fa 	bls.w	800b2b0 <tcp_slowtmr+0x2e0>
        ++pcb_remove;
 800b0bc:	f10a 0a01 	add.w	sl, sl, #1
        ++pcb_reset;
 800b0c0:	2601      	movs	r6, #1
        ++pcb_remove;
 800b0c2:	fa5f fa8a 	uxtb.w	sl, sl
    if (pcb->state == SYN_RCVD) {
 800b0c6:	7d23      	ldrb	r3, [r4, #20]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	f040 8105 	bne.w	800b2d8 <tcp_slowtmr+0x308>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b0ce:	68eb      	ldr	r3, [r5, #12]
 800b0d0:	6a22      	ldr	r2, [r4, #32]
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b0d6:	d803      	bhi.n	800b0e0 <tcp_slowtmr+0x110>
    if (pcb_remove) {
 800b0d8:	f1ba 0f00 	cmp.w	sl, #0
 800b0dc:	f000 8110 	beq.w	800b300 <tcp_slowtmr+0x330>
      tcp_pcb_purge(pcb);
 800b0e0:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800b0e2:	f8d4 a08c 	ldr.w	sl, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800b0e6:	f7ff ff47 	bl	800af78 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b0ea:	68ab      	ldr	r3, [r5, #8]
      if (prev != NULL) {
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	f000 80fa 	beq.w	800b2e8 <tcp_slowtmr+0x318>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	d106      	bne.n	800b106 <tcp_slowtmr+0x136>
 800b0f8:	463b      	mov	r3, r7
 800b0fa:	f240 526d 	movw	r2, #1389	; 0x56d
 800b0fe:	4965      	ldr	r1, [pc, #404]	; (800b294 <tcp_slowtmr+0x2c4>)
 800b100:	4640      	mov	r0, r8
 800b102:	f003 fab1 	bl	800e668 <iprintf>
        prev->next = pcb->next;
 800b106:	68e3      	ldr	r3, [r4, #12]
 800b108:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800b10c:	b15e      	cbz	r6, 800b126 <tcp_slowtmr+0x156>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b10e:	8b23      	ldrh	r3, [r4, #24]
 800b110:	4620      	mov	r0, r4
 800b112:	9302      	str	r3, [sp, #8]
 800b114:	8ae3      	ldrh	r3, [r4, #22]
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	1d23      	adds	r3, r4, #4
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	4623      	mov	r3, r4
 800b11e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b120:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b122:	f002 fb9b 	bl	800d85c <tcp_rst>
      err_arg = pcb->callback_arg;
 800b126:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800b128:	4620      	mov	r0, r4
      pcb = pcb->next;
 800b12a:	68e6      	ldr	r6, [r4, #12]
      err_arg = pcb->callback_arg;
 800b12c:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800b12e:	f7ff fd53 	bl	800abd8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b132:	2200      	movs	r2, #0
 800b134:	746a      	strb	r2, [r5, #17]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b136:	f1ba 0f00 	cmp.w	sl, #0
 800b13a:	d008      	beq.n	800b14e <tcp_slowtmr+0x17e>
 800b13c:	9b05      	ldr	r3, [sp, #20]
 800b13e:	f06f 010c 	mvn.w	r1, #12
 800b142:	4618      	mov	r0, r3
 800b144:	47d0      	blx	sl
      if (tcp_active_pcbs_changed) {
 800b146:	7c6b      	ldrb	r3, [r5, #17]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f47f af50 	bne.w	800afee <tcp_slowtmr+0x1e>
 800b14e:	464c      	mov	r4, r9
 800b150:	e77f      	b.n	800b052 <tcp_slowtmr+0x82>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b152:	2b0b      	cmp	r3, #11
 800b154:	e787      	b.n	800b066 <tcp_slowtmr+0x96>
      if (pcb->persist_backoff > 0) {
 800b156:	f894 a095 	ldrb.w	sl, [r4, #149]	; 0x95
 800b15a:	f1ba 0f00 	cmp.w	sl, #0
 800b15e:	d045      	beq.n	800b1ec <tcp_slowtmr+0x21c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b160:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b162:	b133      	cbz	r3, 800b172 <tcp_slowtmr+0x1a2>
 800b164:	463b      	mov	r3, r7
 800b166:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b16a:	494b      	ldr	r1, [pc, #300]	; (800b298 <tcp_slowtmr+0x2c8>)
 800b16c:	4640      	mov	r0, r8
 800b16e:	f003 fa7b 	bl	800e668 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b172:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b174:	b933      	cbnz	r3, 800b184 <tcp_slowtmr+0x1b4>
 800b176:	463b      	mov	r3, r7
 800b178:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b17c:	4947      	ldr	r1, [pc, #284]	; (800b29c <tcp_slowtmr+0x2cc>)
 800b17e:	4640      	mov	r0, r8
 800b180:	f003 fa72 	bl	800e668 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b184:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800b188:	2b0b      	cmp	r3, #11
 800b18a:	f63f af6d 	bhi.w	800b068 <tcp_slowtmr+0x98>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b18e:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800b192:	4b43      	ldr	r3, [pc, #268]	; (800b2a0 <tcp_slowtmr+0x2d0>)
 800b194:	4413      	add	r3, r2
 800b196:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800b198:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d30b      	bcc.n	800b1b8 <tcp_slowtmr+0x1e8>
            if (pcb->snd_wnd == 0) {
 800b1a0:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800b1a4:	b189      	cbz	r1, 800b1ca <tcp_slowtmr+0x1fa>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f002 f910 	bl	800d3cc <tcp_split_unsent_seg>
 800b1ac:	b990      	cbnz	r0, 800b1d4 <tcp_slowtmr+0x204>
                if (tcp_output(pcb) == ERR_OK) {
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f002 fbcc 	bl	800d94c <tcp_output>
 800b1b4:	b130      	cbz	r0, 800b1c4 <tcp_slowtmr+0x1f4>
 800b1b6:	e00d      	b.n	800b1d4 <tcp_slowtmr+0x204>
            pcb->persist_cnt++;
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800b1bc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b1be:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800b1c2:	d2ed      	bcs.n	800b1a0 <tcp_slowtmr+0x1d0>
    pcb_remove = 0;
 800b1c4:	f04f 0a00 	mov.w	sl, #0
 800b1c8:	e750      	b.n	800b06c <tcp_slowtmr+0x9c>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f002 fdc6 	bl	800dd5c <tcp_zero_window_probe>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	d1f7      	bne.n	800b1c4 <tcp_slowtmr+0x1f4>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1d4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800b1d8:	f04f 0a00 	mov.w	sl, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1dc:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b1de:	f884 a094 	strb.w	sl, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b1e2:	d8ef      	bhi.n	800b1c4 <tcp_slowtmr+0x1f4>
                pcb->persist_backoff++;
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800b1ea:	e73f      	b.n	800b06c <tcp_slowtmr+0x9c>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b1ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800b1ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800b1f2:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800b1f4:	bf9c      	itt	ls
 800b1f6:	3301      	addls	r3, #1
 800b1f8:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800b1fa:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800b1fe:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b202:	429a      	cmp	r2, r3
 800b204:	dbde      	blt.n	800b1c4 <tcp_slowtmr+0x1f4>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b206:	4620      	mov	r0, r4
 800b208:	f002 fa70 	bl	800d6ec <tcp_rexmit_rto_prepare>
 800b20c:	b128      	cbz	r0, 800b21a <tcp_slowtmr+0x24a>
 800b20e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1d7      	bne.n	800b1c4 <tcp_slowtmr+0x1f4>
 800b214:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b216:	2b00      	cmp	r3, #0
 800b218:	d0d4      	beq.n	800b1c4 <tcp_slowtmr+0x1f4>
            if (pcb->state != SYN_SENT) {
 800b21a:	7d23      	ldrb	r3, [r4, #20]
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d015      	beq.n	800b24c <tcp_slowtmr+0x27c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b220:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800b224:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800b228:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b22c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800b230:	4a1b      	ldr	r2, [pc, #108]	; (800b2a0 <tcp_slowtmr+0x2d0>)
 800b232:	290c      	cmp	r1, #12
 800b234:	bf94      	ite	ls
 800b236:	1852      	addls	r2, r2, r1
 800b238:	320c      	addhi	r2, #12
 800b23a:	7dd2      	ldrb	r2, [r2, #23]
 800b23c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800b23e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b242:	4293      	cmp	r3, r2
 800b244:	bfa8      	it	ge
 800b246:	4613      	movge	r3, r2
 800b248:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b24c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 800b250:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b252:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b256:	8e66      	ldrh	r6, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800b258:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800b25a:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800b25c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800b260:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800b262:	bf28      	it	cs
 800b264:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b266:	0073      	lsls	r3, r6, #1
            pcb->cwnd = pcb->mss;
 800b268:	f8a4 6048 	strh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b26c:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800b26e:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800b270:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800b274:	bf98      	it	ls
 800b276:	460b      	movls	r3, r1
 800b278:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800b27c:	f002 fd10 	bl	800dca0 <tcp_rexmit_rto_commit>
 800b280:	e6f4      	b.n	800b06c <tcp_slowtmr+0x9c>
 800b282:	bf00      	nop
 800b284:	2001400c 	.word	0x2001400c
 800b288:	08015226 	.word	0x08015226
 800b28c:	080154d9 	.word	0x080154d9
 800b290:	08015503 	.word	0x08015503
 800b294:	08015597 	.word	0x08015597
 800b298:	08015530 	.word	0x08015530
 800b29c:	08015562 	.word	0x08015562
 800b2a0:	08013684 	.word	0x08013684
 800b2a4:	080154af 	.word	0x080154af
 800b2a8:	080137b4 	.word	0x080137b4
 800b2ac:	080155ec 	.word	0x080155ec
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b2b0:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 800b2b4:	4e3d      	ldr	r6, [pc, #244]	; (800b3ac <tcp_slowtmr+0x3dc>)
 800b2b6:	fb06 3302 	mla	r3, r6, r2, r3
                 / TCP_SLOW_INTERVAL) {
 800b2ba:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b2be:	4299      	cmp	r1, r3
 800b2c0:	d908      	bls.n	800b2d4 <tcp_slowtmr+0x304>
        err = tcp_keepalive(pcb);
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f002 fd22 	bl	800dd0c <tcp_keepalive>
        if (err == ERR_OK) {
 800b2c8:	b920      	cbnz	r0, 800b2d4 <tcp_slowtmr+0x304>
          pcb->keep_cnt_sent++;
 800b2ca:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	e6f6      	b.n	800b0c6 <tcp_slowtmr+0xf6>
    if (pcb->state == LAST_ACK) {
 800b2d8:	2b09      	cmp	r3, #9
 800b2da:	f47f aefd 	bne.w	800b0d8 <tcp_slowtmr+0x108>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b2de:	68eb      	ldr	r3, [r5, #12]
 800b2e0:	6a22      	ldr	r2, [r4, #32]
 800b2e2:	1a9b      	subs	r3, r3, r2
 800b2e4:	2bf0      	cmp	r3, #240	; 0xf0
 800b2e6:	e6f6      	b.n	800b0d6 <tcp_slowtmr+0x106>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	d006      	beq.n	800b2fa <tcp_slowtmr+0x32a>
 800b2ec:	463b      	mov	r3, r7
 800b2ee:	f240 5271 	movw	r2, #1393	; 0x571
 800b2f2:	492f      	ldr	r1, [pc, #188]	; (800b3b0 <tcp_slowtmr+0x3e0>)
 800b2f4:	4640      	mov	r0, r8
 800b2f6:	f003 f9b7 	bl	800e668 <iprintf>
        tcp_active_pcbs = pcb->next;
 800b2fa:	68e3      	ldr	r3, [r4, #12]
 800b2fc:	60ab      	str	r3, [r5, #8]
 800b2fe:	e705      	b.n	800b10c <tcp_slowtmr+0x13c>
      ++prev->polltmr;
 800b300:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b302:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800b304:	3301      	adds	r3, #1
      pcb = pcb->next;
 800b306:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 800b308:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800b30a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800b30c:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800b30e:	f63f aea0 	bhi.w	800b052 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800b312:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800b316:	f884 a01c 	strb.w	sl, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800b31a:	f885 a011 	strb.w	sl, [r5, #17]
        TCP_EVENT_POLL(prev, err);
 800b31e:	b91b      	cbnz	r3, 800b328 <tcp_slowtmr+0x358>
          tcp_output(prev);
 800b320:	4620      	mov	r0, r4
 800b322:	f002 fb13 	bl	800d94c <tcp_output>
 800b326:	e694      	b.n	800b052 <tcp_slowtmr+0x82>
        TCP_EVENT_POLL(prev, err);
 800b328:	4621      	mov	r1, r4
 800b32a:	6920      	ldr	r0, [r4, #16]
 800b32c:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800b32e:	7c6b      	ldrb	r3, [r5, #17]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f47f ae5c 	bne.w	800afee <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800b336:	2800      	cmp	r0, #0
 800b338:	f47f ae8b 	bne.w	800b052 <tcp_slowtmr+0x82>
 800b33c:	e7f0      	b.n	800b320 <tcp_slowtmr+0x350>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b33e:	7d33      	ldrb	r3, [r6, #20]
 800b340:	2b0a      	cmp	r3, #10
 800b342:	d006      	beq.n	800b352 <tcp_slowtmr+0x382>
 800b344:	463b      	mov	r3, r7
 800b346:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800b34a:	4649      	mov	r1, r9
 800b34c:	4640      	mov	r0, r8
 800b34e:	f003 f98b 	bl	800e668 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b352:	68eb      	ldr	r3, [r5, #12]
 800b354:	6a32      	ldr	r2, [r6, #32]
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	2bf0      	cmp	r3, #240	; 0xf0
 800b35a:	d910      	bls.n	800b37e <tcp_slowtmr+0x3ae>
      tcp_pcb_purge(pcb);
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff fe0b 	bl	800af78 <tcp_pcb_purge>
      if (prev != NULL) {
 800b362:	b97c      	cbnz	r4, 800b384 <tcp_slowtmr+0x3b4>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b364:	696b      	ldr	r3, [r5, #20]
 800b366:	42b3      	cmp	r3, r6
 800b368:	d006      	beq.n	800b378 <tcp_slowtmr+0x3a8>
 800b36a:	463b      	mov	r3, r7
 800b36c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800b370:	4910      	ldr	r1, [pc, #64]	; (800b3b4 <tcp_slowtmr+0x3e4>)
 800b372:	4640      	mov	r0, r8
 800b374:	f003 f978 	bl	800e668 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b378:	68f3      	ldr	r3, [r6, #12]
 800b37a:	616b      	str	r3, [r5, #20]
 800b37c:	e00e      	b.n	800b39c <tcp_slowtmr+0x3cc>
      pcb = pcb->next;
 800b37e:	4634      	mov	r4, r6
 800b380:	68f6      	ldr	r6, [r6, #12]
 800b382:	e63e      	b.n	800b002 <tcp_slowtmr+0x32>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b384:	696b      	ldr	r3, [r5, #20]
 800b386:	42b3      	cmp	r3, r6
 800b388:	d106      	bne.n	800b398 <tcp_slowtmr+0x3c8>
 800b38a:	463b      	mov	r3, r7
 800b38c:	f240 52af 	movw	r2, #1455	; 0x5af
 800b390:	4909      	ldr	r1, [pc, #36]	; (800b3b8 <tcp_slowtmr+0x3e8>)
 800b392:	4640      	mov	r0, r8
 800b394:	f003 f968 	bl	800e668 <iprintf>
        prev->next = pcb->next;
 800b398:	68f3      	ldr	r3, [r6, #12]
 800b39a:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800b39c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
      tcp_free(pcb2);
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	f7ff fc19 	bl	800abd8 <tcp_free>
      pcb = pcb->next;
 800b3a6:	4656      	mov	r6, sl
 800b3a8:	e62b      	b.n	800b002 <tcp_slowtmr+0x32>
 800b3aa:	bf00      	nop
 800b3ac:	000124f8 	.word	0x000124f8
 800b3b0:	080155c2 	.word	0x080155c2
 800b3b4:	08015642 	.word	0x08015642
 800b3b8:	0801561b 	.word	0x0801561b

0800b3bc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	b931      	cbnz	r1, 800b3d2 <tcp_pcb_remove+0x16>
 800b3c4:	4b25      	ldr	r3, [pc, #148]	; (800b45c <tcp_pcb_remove+0xa0>)
 800b3c6:	f640 0283 	movw	r2, #2179	; 0x883
 800b3ca:	4925      	ldr	r1, [pc, #148]	; (800b460 <tcp_pcb_remove+0xa4>)
 800b3cc:	4825      	ldr	r0, [pc, #148]	; (800b464 <tcp_pcb_remove+0xa8>)
 800b3ce:	f003 f94b 	bl	800e668 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b3d2:	b935      	cbnz	r5, 800b3e2 <tcp_pcb_remove+0x26>
 800b3d4:	4b21      	ldr	r3, [pc, #132]	; (800b45c <tcp_pcb_remove+0xa0>)
 800b3d6:	f640 0284 	movw	r2, #2180	; 0x884
 800b3da:	4923      	ldr	r1, [pc, #140]	; (800b468 <tcp_pcb_remove+0xac>)
 800b3dc:	4821      	ldr	r0, [pc, #132]	; (800b464 <tcp_pcb_remove+0xa8>)
 800b3de:	f003 f943 	bl	800e668 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	42a3      	cmp	r3, r4
 800b3e6:	d116      	bne.n	800b416 <tcp_pcb_remove+0x5a>
 800b3e8:	68e3      	ldr	r3, [r4, #12]
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800b3ee:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800b3f0:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800b3f2:	f7ff fdc1 	bl	800af78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b3f6:	7d23      	ldrb	r3, [r4, #20]
 800b3f8:	2b0a      	cmp	r3, #10
 800b3fa:	d114      	bne.n	800b426 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b3fc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b3fe:	bb23      	cbnz	r3, 800b44a <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b400:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b402:	b1f3      	cbz	r3, 800b442 <tcp_pcb_remove+0x86>
 800b404:	4b15      	ldr	r3, [pc, #84]	; (800b45c <tcp_pcb_remove+0xa0>)
 800b406:	f640 0294 	movw	r2, #2196	; 0x894
 800b40a:	4918      	ldr	r1, [pc, #96]	; (800b46c <tcp_pcb_remove+0xb0>)
 800b40c:	4815      	ldr	r0, [pc, #84]	; (800b464 <tcp_pcb_remove+0xa8>)
 800b40e:	f003 f92b 	bl	800e668 <iprintf>
 800b412:	e016      	b.n	800b442 <tcp_pcb_remove+0x86>
 800b414:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0e8      	beq.n	800b3ec <tcp_pcb_remove+0x30>
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	42a2      	cmp	r2, r4
 800b41e:	d1f9      	bne.n	800b414 <tcp_pcb_remove+0x58>
 800b420:	68e2      	ldr	r2, [r4, #12]
 800b422:	60da      	str	r2, [r3, #12]
 800b424:	e7e2      	b.n	800b3ec <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 800b426:	2b01      	cmp	r3, #1
 800b428:	d00b      	beq.n	800b442 <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 800b42a:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800b42c:	07da      	lsls	r2, r3, #31
 800b42e:	d5e5      	bpl.n	800b3fc <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800b430:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800b434:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b436:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800b438:	f002 fa88 	bl	800d94c <tcp_output>
  if (pcb->state != LISTEN) {
 800b43c:	7d23      	ldrb	r3, [r4, #20]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d1dc      	bne.n	800b3fc <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b442:	2300      	movs	r3, #0
 800b444:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b446:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b448:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b44a:	4b04      	ldr	r3, [pc, #16]	; (800b45c <tcp_pcb_remove+0xa0>)
 800b44c:	f640 0293 	movw	r2, #2195	; 0x893
 800b450:	4907      	ldr	r1, [pc, #28]	; (800b470 <tcp_pcb_remove+0xb4>)
 800b452:	4804      	ldr	r0, [pc, #16]	; (800b464 <tcp_pcb_remove+0xa8>)
 800b454:	f003 f908 	bl	800e668 <iprintf>
 800b458:	e7d2      	b.n	800b400 <tcp_pcb_remove+0x44>
 800b45a:	bf00      	nop
 800b45c:	08015226 	.word	0x08015226
 800b460:	08015668 	.word	0x08015668
 800b464:	080137b4 	.word	0x080137b4
 800b468:	08015684 	.word	0x08015684
 800b46c:	080156bc 	.word	0x080156bc
 800b470:	080156a4 	.word	0x080156a4

0800b474 <tcp_close_shutdown>:
{
 800b474:	b530      	push	{r4, r5, lr}
 800b476:	460d      	mov	r5, r1
 800b478:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b47a:	4604      	mov	r4, r0
 800b47c:	b930      	cbnz	r0, 800b48c <tcp_close_shutdown+0x18>
 800b47e:	4b4b      	ldr	r3, [pc, #300]	; (800b5ac <tcp_close_shutdown+0x138>)
 800b480:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b484:	494a      	ldr	r1, [pc, #296]	; (800b5b0 <tcp_close_shutdown+0x13c>)
 800b486:	484b      	ldr	r0, [pc, #300]	; (800b5b4 <tcp_close_shutdown+0x140>)
 800b488:	f003 f8ee 	bl	800e668 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b48c:	7d23      	ldrb	r3, [r4, #20]
 800b48e:	2d00      	cmp	r5, #0
 800b490:	d03f      	beq.n	800b512 <tcp_close_shutdown+0x9e>
 800b492:	2b04      	cmp	r3, #4
 800b494:	d001      	beq.n	800b49a <tcp_close_shutdown+0x26>
 800b496:	2b07      	cmp	r3, #7
 800b498:	d13b      	bne.n	800b512 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b49a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800b49c:	b922      	cbnz	r2, 800b4a8 <tcp_close_shutdown+0x34>
 800b49e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b4a0:	f640 3268 	movw	r2, #2920	; 0xb68
 800b4a4:	4291      	cmp	r1, r2
 800b4a6:	d034      	beq.n	800b512 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b4a8:	8b63      	ldrh	r3, [r4, #26]
 800b4aa:	06db      	lsls	r3, r3, #27
 800b4ac:	d406      	bmi.n	800b4bc <tcp_close_shutdown+0x48>
 800b4ae:	4b3f      	ldr	r3, [pc, #252]	; (800b5ac <tcp_close_shutdown+0x138>)
 800b4b0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b4b4:	4940      	ldr	r1, [pc, #256]	; (800b5b8 <tcp_close_shutdown+0x144>)
 800b4b6:	483f      	ldr	r0, [pc, #252]	; (800b5b4 <tcp_close_shutdown+0x140>)
 800b4b8:	f003 f8d6 	bl	800e668 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b4bc:	8b23      	ldrh	r3, [r4, #24]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	9302      	str	r3, [sp, #8]
 800b4c2:	8ae3      	ldrh	r3, [r4, #22]
 800b4c4:	9301      	str	r3, [sp, #4]
 800b4c6:	1d23      	adds	r3, r4, #4
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	4623      	mov	r3, r4
 800b4cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b4ce:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b4d0:	f002 f9c4 	bl	800d85c <tcp_rst>
      tcp_pcb_purge(pcb);
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	f7ff fd4f 	bl	800af78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b4da:	4a38      	ldr	r2, [pc, #224]	; (800b5bc <tcp_close_shutdown+0x148>)
 800b4dc:	6893      	ldr	r3, [r2, #8]
 800b4de:	42a3      	cmp	r3, r4
 800b4e0:	d10f      	bne.n	800b502 <tcp_close_shutdown+0x8e>
 800b4e2:	68e3      	ldr	r3, [r4, #12]
 800b4e4:	6093      	str	r3, [r2, #8]
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60e3      	str	r3, [r4, #12]
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	7453      	strb	r3, [r2, #17]
      if (tcp_input_pcb == pcb) {
 800b4ee:	4b34      	ldr	r3, [pc, #208]	; (800b5c0 <tcp_close_shutdown+0x14c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	42a3      	cmp	r3, r4
 800b4f4:	d11d      	bne.n	800b532 <tcp_close_shutdown+0xbe>
        tcp_trigger_input_pcb_close();
 800b4f6:	f001 fb3f 	bl	800cb78 <tcp_trigger_input_pcb_close>
}
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	b005      	add	sp, #20
 800b4fe:	bd30      	pop	{r4, r5, pc}
 800b500:	460b      	mov	r3, r1
      TCP_RMV_ACTIVE(pcb);
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0ef      	beq.n	800b4e6 <tcp_close_shutdown+0x72>
 800b506:	68d9      	ldr	r1, [r3, #12]
 800b508:	42a1      	cmp	r1, r4
 800b50a:	d1f9      	bne.n	800b500 <tcp_close_shutdown+0x8c>
 800b50c:	68e1      	ldr	r1, [r4, #12]
 800b50e:	60d9      	str	r1, [r3, #12]
 800b510:	e7e9      	b.n	800b4e6 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800b512:	2b01      	cmp	r3, #1
 800b514:	d01a      	beq.n	800b54c <tcp_close_shutdown+0xd8>
 800b516:	2b02      	cmp	r3, #2
 800b518:	d039      	beq.n	800b58e <tcp_close_shutdown+0x11a>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d140      	bne.n	800b5a0 <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800b51e:	8ae3      	ldrh	r3, [r4, #22]
 800b520:	b13b      	cbz	r3, 800b532 <tcp_close_shutdown+0xbe>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b522:	4a26      	ldr	r2, [pc, #152]	; (800b5bc <tcp_close_shutdown+0x148>)
 800b524:	6813      	ldr	r3, [r2, #0]
 800b526:	42a3      	cmp	r3, r4
 800b528:	d108      	bne.n	800b53c <tcp_close_shutdown+0xc8>
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	2300      	movs	r3, #0
 800b530:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800b532:	4620      	mov	r0, r4
 800b534:	f7ff fb50 	bl	800abd8 <tcp_free>
      break;
 800b538:	e7df      	b.n	800b4fa <tcp_close_shutdown+0x86>
 800b53a:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0f6      	beq.n	800b52e <tcp_close_shutdown+0xba>
 800b540:	68da      	ldr	r2, [r3, #12]
 800b542:	42a2      	cmp	r2, r4
 800b544:	d1f9      	bne.n	800b53a <tcp_close_shutdown+0xc6>
 800b546:	68e2      	ldr	r2, [r4, #12]
 800b548:	60da      	str	r2, [r3, #12]
 800b54a:	e7f0      	b.n	800b52e <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b54c:	491d      	ldr	r1, [pc, #116]	; (800b5c4 <tcp_close_shutdown+0x150>)
      pcb->listener = NULL;
 800b54e:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b550:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800b554:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b556:	b9a2      	cbnz	r2, 800b582 <tcp_close_shutdown+0x10e>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b558:	3301      	adds	r3, #1
 800b55a:	2b04      	cmp	r3, #4
 800b55c:	d1f8      	bne.n	800b550 <tcp_close_shutdown+0xdc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b55e:	4621      	mov	r1, r4
 800b560:	4819      	ldr	r0, [pc, #100]	; (800b5c8 <tcp_close_shutdown+0x154>)
 800b562:	f7ff ff2b 	bl	800b3bc <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b566:	7d23      	ldrb	r3, [r4, #20]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d105      	bne.n	800b578 <tcp_close_shutdown+0x104>
 800b56c:	4b0f      	ldr	r3, [pc, #60]	; (800b5ac <tcp_close_shutdown+0x138>)
 800b56e:	22df      	movs	r2, #223	; 0xdf
 800b570:	4916      	ldr	r1, [pc, #88]	; (800b5cc <tcp_close_shutdown+0x158>)
 800b572:	4810      	ldr	r0, [pc, #64]	; (800b5b4 <tcp_close_shutdown+0x140>)
 800b574:	f003 f878 	bl	800e668 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b578:	4621      	mov	r1, r4
 800b57a:	2002      	movs	r0, #2
 800b57c:	f7fe fdec 	bl	800a158 <memp_free>
}
 800b580:	e7bb      	b.n	800b4fa <tcp_close_shutdown+0x86>
    if (pcb->listener == lpcb) {
 800b582:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800b584:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800b586:	bf08      	it	eq
 800b588:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b58a:	68d2      	ldr	r2, [r2, #12]
 800b58c:	e7e3      	b.n	800b556 <tcp_close_shutdown+0xe2>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b58e:	4d0b      	ldr	r5, [pc, #44]	; (800b5bc <tcp_close_shutdown+0x148>)
 800b590:	4621      	mov	r1, r4
 800b592:	f105 0008 	add.w	r0, r5, #8
 800b596:	f7ff ff11 	bl	800b3bc <tcp_pcb_remove>
 800b59a:	2301      	movs	r3, #1
 800b59c:	746b      	strb	r3, [r5, #17]
 800b59e:	e7c8      	b.n	800b532 <tcp_close_shutdown+0xbe>
      return tcp_close_shutdown_fin(pcb);
 800b5a0:	4620      	mov	r0, r4
}
 800b5a2:	b005      	add	sp, #20
 800b5a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800b5a8:	f7ff bada 	b.w	800ab60 <tcp_close_shutdown_fin>
 800b5ac:	08015226 	.word	0x08015226
 800b5b0:	080156d5 	.word	0x080156d5
 800b5b4:	080137b4 	.word	0x080137b4
 800b5b8:	080156f5 	.word	0x080156f5
 800b5bc:	2001400c 	.word	0x2001400c
 800b5c0:	20014064 	.word	0x20014064
 800b5c4:	08013684 	.word	0x08013684
 800b5c8:	20014010 	.word	0x20014010
 800b5cc:	0801570e 	.word	0x0801570e

0800b5d0 <tcp_close>:
{
 800b5d0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5d2:	b158      	cbz	r0, 800b5ec <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800b5d4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800b5d6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800b5d8:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b5da:	bf1e      	ittt	ne
 800b5dc:	8b43      	ldrhne	r3, [r0, #26]
 800b5de:	f043 0310 	orrne.w	r3, r3, #16
 800b5e2:	8343      	strhne	r3, [r0, #26]
}
 800b5e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800b5e8:	f7ff bf44 	b.w	800b474 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800b5ec:	4b04      	ldr	r3, [pc, #16]	; (800b600 <tcp_close+0x30>)
 800b5ee:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800b5f2:	4904      	ldr	r1, [pc, #16]	; (800b604 <tcp_close+0x34>)
 800b5f4:	4804      	ldr	r0, [pc, #16]	; (800b608 <tcp_close+0x38>)
 800b5f6:	f003 f837 	bl	800e668 <iprintf>
}
 800b5fa:	f06f 000f 	mvn.w	r0, #15
 800b5fe:	bd08      	pop	{r3, pc}
 800b600:	08015226 	.word	0x08015226
 800b604:	08015727 	.word	0x08015727
 800b608:	080137b4 	.word	0x080137b4

0800b60c <tcp_recv_null>:
{
 800b60c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b60e:	4608      	mov	r0, r1
{
 800b610:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b612:	b949      	cbnz	r1, 800b628 <tcp_recv_null+0x1c>
 800b614:	4b0c      	ldr	r3, [pc, #48]	; (800b648 <tcp_recv_null+0x3c>)
 800b616:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b61a:	490c      	ldr	r1, [pc, #48]	; (800b64c <tcp_recv_null+0x40>)
 800b61c:	480c      	ldr	r0, [pc, #48]	; (800b650 <tcp_recv_null+0x44>)
 800b61e:	f003 f823 	bl	800e668 <iprintf>
 800b622:	f06f 000f 	mvn.w	r0, #15
}
 800b626:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800b628:	b13a      	cbz	r2, 800b63a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800b62a:	8911      	ldrh	r1, [r2, #8]
 800b62c:	f7ff fbdc 	bl	800ade8 <tcp_recved>
    pbuf_free(p);
 800b630:	4620      	mov	r0, r4
 800b632:	f7fe ffed 	bl	800a610 <pbuf_free>
  return ERR_OK;
 800b636:	2000      	movs	r0, #0
 800b638:	e7f5      	b.n	800b626 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800b63a:	b91b      	cbnz	r3, 800b644 <tcp_recv_null+0x38>
}
 800b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800b640:	f7ff bfc6 	b.w	800b5d0 <tcp_close>
  return ERR_OK;
 800b644:	4610      	mov	r0, r2
 800b646:	e7ee      	b.n	800b626 <tcp_recv_null+0x1a>
 800b648:	08015226 	.word	0x08015226
 800b64c:	0801573e 	.word	0x0801573e
 800b650:	080137b4 	.word	0x080137b4

0800b654 <tcp_process_refused_data>:
{
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b656:	4604      	mov	r4, r0
 800b658:	b950      	cbnz	r0, 800b670 <tcp_process_refused_data+0x1c>
 800b65a:	f06f 050f 	mvn.w	r5, #15
 800b65e:	4b1d      	ldr	r3, [pc, #116]	; (800b6d4 <tcp_process_refused_data+0x80>)
 800b660:	f240 6209 	movw	r2, #1545	; 0x609
 800b664:	491c      	ldr	r1, [pc, #112]	; (800b6d8 <tcp_process_refused_data+0x84>)
 800b666:	481d      	ldr	r0, [pc, #116]	; (800b6dc <tcp_process_refused_data+0x88>)
 800b668:	f002 fffe 	bl	800e668 <iprintf>
}
 800b66c:	4628      	mov	r0, r5
 800b66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800b670:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800b672:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b674:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800b678:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800b67a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b67c:	b1e5      	cbz	r5, 800b6b8 <tcp_process_refused_data+0x64>
 800b67e:	4601      	mov	r1, r0
 800b680:	4632      	mov	r2, r6
 800b682:	6900      	ldr	r0, [r0, #16]
 800b684:	47a8      	blx	r5
 800b686:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800b688:	b9e8      	cbnz	r0, 800b6c6 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b68a:	06bb      	lsls	r3, r7, #26
 800b68c:	d5ee      	bpl.n	800b66c <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b68e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b690:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800b694:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b698:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800b69a:	bf1c      	itt	ne
 800b69c:	3301      	addne	r3, #1
 800b69e:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800b6a0:	2e00      	cmp	r6, #0
 800b6a2:	d0e3      	beq.n	800b66c <tcp_process_refused_data+0x18>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	6920      	ldr	r0, [r4, #16]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800b6ae:	300d      	adds	r0, #13
 800b6b0:	d1dc      	bne.n	800b66c <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800b6b2:	f06f 050c 	mvn.w	r5, #12
 800b6b6:	e7d9      	b.n	800b66c <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b6b8:	4601      	mov	r1, r0
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	4632      	mov	r2, r6
 800b6be:	4628      	mov	r0, r5
 800b6c0:	f7ff ffa4 	bl	800b60c <tcp_recv_null>
 800b6c4:	e7df      	b.n	800b686 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800b6c6:	350d      	adds	r5, #13
 800b6c8:	d0f3      	beq.n	800b6b2 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 800b6ca:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800b6ce:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800b6d0:	e7cc      	b.n	800b66c <tcp_process_refused_data+0x18>
 800b6d2:	bf00      	nop
 800b6d4:	08015226 	.word	0x08015226
 800b6d8:	08015759 	.word	0x08015759
 800b6dc:	080137b4 	.word	0x080137b4

0800b6e0 <tcp_fasttmr>:
{
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ++tcp_timer_ctr;
 800b6e2:	4d18      	ldr	r5, [pc, #96]	; (800b744 <tcp_fasttmr+0x64>)
        tcp_active_pcbs_changed = 0;
 800b6e4:	2600      	movs	r6, #0
  ++tcp_timer_ctr;
 800b6e6:	7c2b      	ldrb	r3, [r5, #16]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	742b      	strb	r3, [r5, #16]
  pcb = tcp_active_pcbs;
 800b6ec:	68ac      	ldr	r4, [r5, #8]
  while (pcb != NULL) {
 800b6ee:	b904      	cbnz	r4, 800b6f2 <tcp_fasttmr+0x12>
}
 800b6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800b6f2:	7c2b      	ldrb	r3, [r5, #16]
 800b6f4:	7fa2      	ldrb	r2, [r4, #30]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d022      	beq.n	800b740 <tcp_fasttmr+0x60>
      pcb->last_timer = tcp_timer_ctr;
 800b6fa:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800b6fc:	8b63      	ldrh	r3, [r4, #26]
 800b6fe:	07d9      	lsls	r1, r3, #31
 800b700:	d509      	bpl.n	800b716 <tcp_fasttmr+0x36>
        tcp_ack_now(pcb);
 800b702:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800b706:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800b708:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800b70a:	f002 f91f 	bl	800d94c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b70e:	8b63      	ldrh	r3, [r4, #26]
 800b710:	f023 0303 	bic.w	r3, r3, #3
 800b714:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800b716:	8b63      	ldrh	r3, [r4, #26]
 800b718:	071a      	lsls	r2, r3, #28
 800b71a:	d505      	bpl.n	800b728 <tcp_fasttmr+0x48>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b71c:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800b720:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b722:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800b724:	f7ff fa1c 	bl	800ab60 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800b728:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800b72a:	68e7      	ldr	r7, [r4, #12]
      if (pcb->refused_data != NULL) {
 800b72c:	b133      	cbz	r3, 800b73c <tcp_fasttmr+0x5c>
        tcp_process_refused_data(pcb);
 800b72e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800b730:	746e      	strb	r6, [r5, #17]
        tcp_process_refused_data(pcb);
 800b732:	f7ff ff8f 	bl	800b654 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b736:	7c6b      	ldrb	r3, [r5, #17]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1d7      	bne.n	800b6ec <tcp_fasttmr+0xc>
{
 800b73c:	463c      	mov	r4, r7
 800b73e:	e7d6      	b.n	800b6ee <tcp_fasttmr+0xe>
      pcb = pcb->next;
 800b740:	68e7      	ldr	r7, [r4, #12]
 800b742:	e7fb      	b.n	800b73c <tcp_fasttmr+0x5c>
 800b744:	2001400c 	.word	0x2001400c

0800b748 <tcp_tmr>:
{
 800b748:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800b74a:	f7ff ffc9 	bl	800b6e0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800b74e:	4a06      	ldr	r2, [pc, #24]	; (800b768 <tcp_tmr+0x20>)
 800b750:	7e13      	ldrb	r3, [r2, #24]
 800b752:	3301      	adds	r3, #1
 800b754:	b2db      	uxtb	r3, r3
 800b756:	7613      	strb	r3, [r2, #24]
 800b758:	07db      	lsls	r3, r3, #31
 800b75a:	d503      	bpl.n	800b764 <tcp_tmr+0x1c>
}
 800b75c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800b760:	f7ff bc36 	b.w	800afd0 <tcp_slowtmr>
}
 800b764:	bd08      	pop	{r3, pc}
 800b766:	bf00      	nop
 800b768:	2001400c 	.word	0x2001400c

0800b76c <tcp_shutdown>:
{
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800b770:	4605      	mov	r5, r0
 800b772:	b948      	cbnz	r0, 800b788 <tcp_shutdown+0x1c>
 800b774:	4b16      	ldr	r3, [pc, #88]	; (800b7d0 <tcp_shutdown+0x64>)
 800b776:	f240 2207 	movw	r2, #519	; 0x207
 800b77a:	4916      	ldr	r1, [pc, #88]	; (800b7d4 <tcp_shutdown+0x68>)
 800b77c:	4816      	ldr	r0, [pc, #88]	; (800b7d8 <tcp_shutdown+0x6c>)
 800b77e:	f002 ff73 	bl	800e668 <iprintf>
 800b782:	f06f 000f 	mvn.w	r0, #15
}
 800b786:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800b788:	7d03      	ldrb	r3, [r0, #20]
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d018      	beq.n	800b7c0 <tcp_shutdown+0x54>
  if (shut_rx) {
 800b78e:	b189      	cbz	r1, 800b7b4 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800b790:	8b43      	ldrh	r3, [r0, #26]
 800b792:	f043 0310 	orr.w	r3, r3, #16
 800b796:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800b798:	b122      	cbz	r2, 800b7a4 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800b79a:	2101      	movs	r1, #1
}
 800b79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b7a0:	f7ff be68 	b.w	800b474 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800b7a4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b7a6:	b908      	cbnz	r0, 800b7ac <tcp_shutdown+0x40>
  return ERR_OK;
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	e7ec      	b.n	800b786 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800b7ac:	f7fe ff30 	bl	800a610 <pbuf_free>
      pcb->refused_data = NULL;
 800b7b0:	676c      	str	r4, [r5, #116]	; 0x74
 800b7b2:	e7f9      	b.n	800b7a8 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800b7b4:	2a00      	cmp	r2, #0
 800b7b6:	d0f7      	beq.n	800b7a8 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d804      	bhi.n	800b7c6 <tcp_shutdown+0x5a>
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	d804      	bhi.n	800b7ca <tcp_shutdown+0x5e>
 800b7c0:	f06f 000a 	mvn.w	r0, #10
 800b7c4:	e7df      	b.n	800b786 <tcp_shutdown+0x1a>
 800b7c6:	2b07      	cmp	r3, #7
 800b7c8:	d1fa      	bne.n	800b7c0 <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	4628      	mov	r0, r5
 800b7ce:	e7e5      	b.n	800b79c <tcp_shutdown+0x30>
 800b7d0:	08015226 	.word	0x08015226
 800b7d4:	0801577f 	.word	0x0801577f
 800b7d8:	080137b4 	.word	0x080137b4

0800b7dc <tcp_abandon>:
{
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	460e      	mov	r6, r1
 800b7e2:	b085      	sub	sp, #20
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	b948      	cbnz	r0, 800b7fc <tcp_abandon+0x20>
 800b7e8:	4b35      	ldr	r3, [pc, #212]	; (800b8c0 <tcp_abandon+0xe4>)
 800b7ea:	f240 223d 	movw	r2, #573	; 0x23d
 800b7ee:	4935      	ldr	r1, [pc, #212]	; (800b8c4 <tcp_abandon+0xe8>)
 800b7f0:	4835      	ldr	r0, [pc, #212]	; (800b8c8 <tcp_abandon+0xec>)
}
 800b7f2:	b005      	add	sp, #20
 800b7f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800b7f8:	f002 bf36 	b.w	800e668 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800b7fc:	7d03      	ldrb	r3, [r0, #20]
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d106      	bne.n	800b810 <tcp_abandon+0x34>
 800b802:	4b2f      	ldr	r3, [pc, #188]	; (800b8c0 <tcp_abandon+0xe4>)
 800b804:	f44f 7210 	mov.w	r2, #576	; 0x240
 800b808:	4930      	ldr	r1, [pc, #192]	; (800b8cc <tcp_abandon+0xf0>)
 800b80a:	482f      	ldr	r0, [pc, #188]	; (800b8c8 <tcp_abandon+0xec>)
 800b80c:	f002 ff2c 	bl	800e668 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800b810:	7d23      	ldrb	r3, [r4, #20]
 800b812:	2b0a      	cmp	r3, #10
 800b814:	d109      	bne.n	800b82a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800b816:	4621      	mov	r1, r4
 800b818:	482d      	ldr	r0, [pc, #180]	; (800b8d0 <tcp_abandon+0xf4>)
 800b81a:	f7ff fdcf 	bl	800b3bc <tcp_pcb_remove>
    tcp_free(pcb);
 800b81e:	4620      	mov	r0, r4
}
 800b820:	b005      	add	sp, #20
 800b822:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 800b826:	f7ff b9d7 	b.w	800abd8 <tcp_free>
    seqno = pcb->snd_nxt;
 800b82a:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800b82e:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800b832:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800b836:	f8d4 8010 	ldr.w	r8, [r4, #16]
      if (pcb->local_port != 0) {
 800b83a:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800b83c:	b99b      	cbnz	r3, 800b866 <tcp_abandon+0x8a>
      if (pcb->local_port != 0) {
 800b83e:	b13d      	cbz	r5, 800b850 <tcp_abandon+0x74>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b840:	4a24      	ldr	r2, [pc, #144]	; (800b8d4 <tcp_abandon+0xf8>)
 800b842:	6813      	ldr	r3, [r2, #0]
 800b844:	42a3      	cmp	r3, r4
 800b846:	d106      	bne.n	800b856 <tcp_abandon+0x7a>
 800b848:	68e3      	ldr	r3, [r4, #12]
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	2500      	movs	r5, #0
 800b84e:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800b850:	462e      	mov	r6, r5
 800b852:	e012      	b.n	800b87a <tcp_abandon+0x9e>
 800b854:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b856:	2b00      	cmp	r3, #0
 800b858:	d0f8      	beq.n	800b84c <tcp_abandon+0x70>
 800b85a:	68da      	ldr	r2, [r3, #12]
 800b85c:	42a2      	cmp	r2, r4
 800b85e:	d1f9      	bne.n	800b854 <tcp_abandon+0x78>
 800b860:	68e2      	ldr	r2, [r4, #12]
 800b862:	60da      	str	r2, [r3, #12]
 800b864:	e7f2      	b.n	800b84c <tcp_abandon+0x70>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b866:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800b8d4 <tcp_abandon+0xf8>
 800b86a:	4621      	mov	r1, r4
 800b86c:	f10b 0008 	add.w	r0, fp, #8
 800b870:	f7ff fda4 	bl	800b3bc <tcp_pcb_remove>
 800b874:	2301      	movs	r3, #1
 800b876:	f88b 3011 	strb.w	r3, [fp, #17]
    if (pcb->unacked != NULL) {
 800b87a:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b87c:	b108      	cbz	r0, 800b882 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unacked);
 800b87e:	f7ff faff 	bl	800ae80 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800b882:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b884:	b108      	cbz	r0, 800b88a <tcp_abandon+0xae>
      tcp_segs_free(pcb->unsent);
 800b886:	f7ff fafb 	bl	800ae80 <tcp_segs_free>
    if (send_rst) {
 800b88a:	b156      	cbz	r6, 800b8a2 <tcp_abandon+0xc6>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800b88c:	8b23      	ldrh	r3, [r4, #24]
 800b88e:	4652      	mov	r2, sl
 800b890:	4649      	mov	r1, r9
 800b892:	4620      	mov	r0, r4
 800b894:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800b898:	1d23      	adds	r3, r4, #4
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	4623      	mov	r3, r4
 800b89e:	f001 ffdd 	bl	800d85c <tcp_rst>
    tcp_free(pcb);
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff f998 	bl	800abd8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b8a8:	b13f      	cbz	r7, 800b8ba <tcp_abandon+0xde>
 800b8aa:	f06f 010c 	mvn.w	r1, #12
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	463b      	mov	r3, r7
}
 800b8b2:	b005      	add	sp, #20
 800b8b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b8b8:	4718      	bx	r3
}
 800b8ba:	b005      	add	sp, #20
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c0:	08015226 	.word	0x08015226
 800b8c4:	08015799 	.word	0x08015799
 800b8c8:	080137b4 	.word	0x080137b4
 800b8cc:	080157b2 	.word	0x080157b2
 800b8d0:	20014020 	.word	0x20014020
 800b8d4:	2001400c 	.word	0x2001400c

0800b8d8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800b8d8:	2101      	movs	r1, #1
 800b8da:	f7ff bf7f 	b.w	800b7dc <tcp_abandon>
	...

0800b8e0 <tcp_accept_null>:
{
 800b8e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	b931      	cbnz	r1, 800b8f4 <tcp_accept_null+0x14>
 800b8e6:	4b06      	ldr	r3, [pc, #24]	; (800b900 <tcp_accept_null+0x20>)
 800b8e8:	f240 320f 	movw	r2, #783	; 0x30f
 800b8ec:	4905      	ldr	r1, [pc, #20]	; (800b904 <tcp_accept_null+0x24>)
 800b8ee:	4806      	ldr	r0, [pc, #24]	; (800b908 <tcp_accept_null+0x28>)
 800b8f0:	f002 feba 	bl	800e668 <iprintf>
  tcp_abort(pcb);
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f7ff ffef 	bl	800b8d8 <tcp_abort>
}
 800b8fa:	f06f 000c 	mvn.w	r0, #12
 800b8fe:	bd10      	pop	{r4, pc}
 800b900:	08015226 	.word	0x08015226
 800b904:	080157e3 	.word	0x080157e3
 800b908:	080137b4 	.word	0x080137b4

0800b90c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b910:	4605      	mov	r5, r0
 800b912:	b930      	cbnz	r0, 800b922 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b914:	4b09      	ldr	r3, [pc, #36]	; (800b93c <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800b916:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b91a:	4909      	ldr	r1, [pc, #36]	; (800b940 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800b91c:	4809      	ldr	r0, [pc, #36]	; (800b944 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800b91e:	f002 fea3 	bl	800e668 <iprintf>

  while (pcb != NULL) {
 800b922:	b904      	cbnz	r4, 800b926 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800b924:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b926:	6822      	ldr	r2, [r4, #0]
 800b928:	682b      	ldr	r3, [r5, #0]
      struct tcp_pcb *next = pcb->next;
 800b92a:	68e6      	ldr	r6, [r4, #12]
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d102      	bne.n	800b936 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800b930:	4620      	mov	r0, r4
 800b932:	f7ff ffd1 	bl	800b8d8 <tcp_abort>
{
 800b936:	4634      	mov	r4, r6
 800b938:	e7f3      	b.n	800b922 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800b93a:	bf00      	nop
 800b93c:	08015226 	.word	0x08015226
 800b940:	08015800 	.word	0x08015800
 800b944:	080137b4 	.word	0x080137b4

0800b948 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b948:	4b0c      	ldr	r3, [pc, #48]	; (800b97c <tcp_kill_state+0x34>)
  inactivity = 0;
 800b94a:	2200      	movs	r2, #0
{
 800b94c:	b430      	push	{r4, r5}
 800b94e:	4604      	mov	r4, r0
  inactive = NULL;
 800b950:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b952:	e9d3 1502 	ldrd	r1, r5, [r3, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b956:	b919      	cbnz	r1, 800b960 <tcp_kill_state+0x18>
  if (inactive != NULL) {
 800b958:	b168      	cbz	r0, 800b976 <tcp_kill_state+0x2e>
}
 800b95a:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800b95c:	f7ff bf3e 	b.w	800b7dc <tcp_abandon>
    if (pcb->state == state) {
 800b960:	7d0b      	ldrb	r3, [r1, #20]
 800b962:	42a3      	cmp	r3, r4
 800b964:	d105      	bne.n	800b972 <tcp_kill_state+0x2a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b966:	6a0b      	ldr	r3, [r1, #32]
 800b968:	1aeb      	subs	r3, r5, r3
 800b96a:	4293      	cmp	r3, r2
 800b96c:	bf24      	itt	cs
 800b96e:	461a      	movcs	r2, r3
 800b970:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b972:	68c9      	ldr	r1, [r1, #12]
 800b974:	e7ef      	b.n	800b956 <tcp_kill_state+0xe>
}
 800b976:	bc30      	pop	{r4, r5}
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	2001400c 	.word	0x2001400c

0800b980 <tcp_alloc>:
{
 800b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b982:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b984:	2001      	movs	r0, #1
 800b986:	f7fe fbb7 	bl	800a0f8 <memp_malloc>
  if (pcb == NULL) {
 800b98a:	4c3f      	ldr	r4, [pc, #252]	; (800ba88 <tcp_alloc+0x108>)
 800b98c:	4603      	mov	r3, r0
 800b98e:	bb98      	cbnz	r0, 800b9f8 <tcp_alloc+0x78>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b990:	68a0      	ldr	r0, [r4, #8]
  while (pcb != NULL) {
 800b992:	2800      	cmp	r0, #0
 800b994:	d153      	bne.n	800ba3e <tcp_alloc+0xbe>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b996:	6963      	ldr	r3, [r4, #20]
  inactivity = 0;
 800b998:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b99a:	68e6      	ldr	r6, [r4, #12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d159      	bne.n	800ba54 <tcp_alloc+0xd4>
  if (inactive != NULL) {
 800b9a0:	b108      	cbz	r0, 800b9a6 <tcp_alloc+0x26>
    tcp_abort(inactive);
 800b9a2:	f7ff ff99 	bl	800b8d8 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	f7fe fba6 	bl	800a0f8 <memp_malloc>
    if (pcb == NULL) {
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	bb18      	cbnz	r0, 800b9f8 <tcp_alloc+0x78>
      tcp_kill_state(LAST_ACK);
 800b9b0:	2009      	movs	r0, #9
 800b9b2:	f7ff ffc9 	bl	800b948 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9b6:	2001      	movs	r0, #1
 800b9b8:	f7fe fb9e 	bl	800a0f8 <memp_malloc>
      if (pcb == NULL) {
 800b9bc:	4603      	mov	r3, r0
 800b9be:	b9d8      	cbnz	r0, 800b9f8 <tcp_alloc+0x78>
        tcp_kill_state(CLOSING);
 800b9c0:	2008      	movs	r0, #8
 800b9c2:	f7ff ffc1 	bl	800b948 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9c6:	2001      	movs	r0, #1
 800b9c8:	f7fe fb96 	bl	800a0f8 <memp_malloc>
        if (pcb == NULL) {
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	b998      	cbnz	r0, 800b9f8 <tcp_alloc+0x78>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b9d0:	062a      	lsls	r2, r5, #24
 800b9d2:	d447      	bmi.n	800ba64 <tcp_alloc+0xe4>
  if (mprio == 0) {
 800b9d4:	b15d      	cbz	r5, 800b9ee <tcp_alloc+0x6e>
 800b9d6:	4629      	mov	r1, r5
  mprio--;
 800b9d8:	3901      	subs	r1, #1
  inactivity = 0;
 800b9da:	2000      	movs	r0, #0
  mprio--;
 800b9dc:	b2c9      	uxtb	r1, r1
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b9de:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9e2:	2a00      	cmp	r2, #0
 800b9e4:	d140      	bne.n	800ba68 <tcp_alloc+0xe8>
  if (inactive != NULL) {
 800b9e6:	b113      	cbz	r3, 800b9ee <tcp_alloc+0x6e>
    tcp_abort(inactive);
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f7ff ff75 	bl	800b8d8 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	f7fe fb82 	bl	800a0f8 <memp_malloc>
  if (pcb != NULL) {
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	b300      	cbz	r0, 800ba3a <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b9f8:	2298      	movs	r2, #152	; 0x98
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	2100      	movs	r1, #0
 800b9fe:	f002 fe2b 	bl	800e658 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800ba02:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ba06:	4603      	mov	r3, r0
    pcb->prio = prio;
 800ba08:	7545      	strb	r5, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ba0a:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ba0e:	4a1f      	ldr	r2, [pc, #124]	; (800ba8c <tcp_alloc+0x10c>)
 800ba10:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ba12:	22ff      	movs	r2, #255	; 0xff
 800ba14:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ba16:	2206      	movs	r2, #6
 800ba18:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ba1c:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800ba1e:	4a1c      	ldr	r2, [pc, #112]	; (800ba90 <tcp_alloc+0x110>)
 800ba20:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800ba22:	68e2      	ldr	r2, [r4, #12]
 800ba24:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ba26:	7c22      	ldrb	r2, [r4, #16]
 800ba28:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 800ba2a:	4a1a      	ldr	r2, [pc, #104]	; (800ba94 <tcp_alloc+0x114>)
 800ba2c:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800ba2e:	4a1a      	ldr	r2, [pc, #104]	; (800ba98 <tcp_alloc+0x118>)
 800ba30:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ba34:	4a19      	ldr	r2, [pc, #100]	; (800ba9c <tcp_alloc+0x11c>)
 800ba36:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800ba3e:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800ba40:	68c6      	ldr	r6, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800ba42:	0719      	lsls	r1, r3, #28
 800ba44:	d504      	bpl.n	800ba50 <tcp_alloc+0xd0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ba46:	f023 0308 	bic.w	r3, r3, #8
 800ba4a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800ba4c:	f7ff f888 	bl	800ab60 <tcp_close_shutdown_fin>
{
 800ba50:	4630      	mov	r0, r6
 800ba52:	e79e      	b.n	800b992 <tcp_alloc+0x12>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba54:	6a1a      	ldr	r2, [r3, #32]
 800ba56:	1ab2      	subs	r2, r6, r2
 800ba58:	428a      	cmp	r2, r1
 800ba5a:	bf24      	itt	cs
 800ba5c:	4618      	movcs	r0, r3
 800ba5e:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	e79b      	b.n	800b99c <tcp_alloc+0x1c>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ba64:	217f      	movs	r1, #127	; 0x7f
 800ba66:	e7b7      	b.n	800b9d8 <tcp_alloc+0x58>
    if ((pcb->prio < mprio) ||
 800ba68:	f892 c015 	ldrb.w	ip, [r2, #21]
 800ba6c:	458c      	cmp	ip, r1
 800ba6e:	d304      	bcc.n	800ba7a <tcp_alloc+0xfa>
 800ba70:	d107      	bne.n	800ba82 <tcp_alloc+0x102>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ba72:	6a16      	ldr	r6, [r2, #32]
 800ba74:	1bbe      	subs	r6, r7, r6
 800ba76:	4286      	cmp	r6, r0
 800ba78:	d303      	bcc.n	800ba82 <tcp_alloc+0x102>
      inactivity = tcp_ticks - pcb->tmr;
 800ba7a:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800ba7c:	4661      	mov	r1, ip
      inactivity = tcp_ticks - pcb->tmr;
 800ba7e:	4613      	mov	r3, r2
 800ba80:	1a38      	subs	r0, r7, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba82:	68d2      	ldr	r2, [r2, #12]
 800ba84:	e7ad      	b.n	800b9e2 <tcp_alloc+0x62>
 800ba86:	bf00      	nop
 800ba88:	2001400c 	.word	0x2001400c
 800ba8c:	0b680b68 	.word	0x0b680b68
 800ba90:	0218ffff 	.word	0x0218ffff
 800ba94:	16d00001 	.word	0x16d00001
 800ba98:	0800b60d 	.word	0x0800b60d
 800ba9c:	006ddd00 	.word	0x006ddd00

0800baa0 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800baa0:	2040      	movs	r0, #64	; 0x40
 800baa2:	f7ff bf6d 	b.w	800b980 <tcp_alloc>
	...

0800baa8 <tcp_next_iss>:
{
 800baa8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800baaa:	b930      	cbnz	r0, 800baba <tcp_next_iss+0x12>
 800baac:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <tcp_next_iss+0x20>)
 800baae:	f640 02af 	movw	r2, #2223	; 0x8af
 800bab2:	4906      	ldr	r1, [pc, #24]	; (800bacc <tcp_next_iss+0x24>)
 800bab4:	4806      	ldr	r0, [pc, #24]	; (800bad0 <tcp_next_iss+0x28>)
 800bab6:	f002 fdd7 	bl	800e668 <iprintf>
  iss += tcp_ticks;       /* XXX */
 800baba:	4b06      	ldr	r3, [pc, #24]	; (800bad4 <tcp_next_iss+0x2c>)
 800babc:	4a06      	ldr	r2, [pc, #24]	; (800bad8 <tcp_next_iss+0x30>)
 800babe:	6858      	ldr	r0, [r3, #4]
 800bac0:	68d2      	ldr	r2, [r2, #12]
 800bac2:	4410      	add	r0, r2
 800bac4:	6058      	str	r0, [r3, #4]
}
 800bac6:	bd08      	pop	{r3, pc}
 800bac8:	08015226 	.word	0x08015226
 800bacc:	08015834 	.word	0x08015834
 800bad0:	080137b4 	.word	0x080137b4
 800bad4:	20001a60 	.word	0x20001a60
 800bad8:	2001400c 	.word	0x2001400c

0800badc <tcp_eff_send_mss_netif>:
{
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4604      	mov	r4, r0
 800bae0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800bae2:	b932      	cbnz	r2, 800baf2 <tcp_eff_send_mss_netif+0x16>
 800bae4:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <tcp_eff_send_mss_netif+0x30>)
 800bae6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800baea:	4909      	ldr	r1, [pc, #36]	; (800bb10 <tcp_eff_send_mss_netif+0x34>)
 800baec:	4809      	ldr	r0, [pc, #36]	; (800bb14 <tcp_eff_send_mss_netif+0x38>)
 800baee:	f002 fdbb 	bl	800e668 <iprintf>
    if (outif == NULL) {
 800baf2:	b14d      	cbz	r5, 800bb08 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800baf4:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  if (mtu != 0) {
 800baf6:	b13b      	cbz	r3, 800bb08 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800baf8:	2b28      	cmp	r3, #40	; 0x28
 800bafa:	bf8a      	itet	hi
 800bafc:	3b28      	subhi	r3, #40	; 0x28
 800bafe:	2300      	movls	r3, #0
 800bb00:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bb02:	429c      	cmp	r4, r3
 800bb04:	bf28      	it	cs
 800bb06:	461c      	movcs	r4, r3
}
 800bb08:	4620      	mov	r0, r4
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	08015226 	.word	0x08015226
 800bb10:	0801584e 	.word	0x0801584e
 800bb14:	080137b4 	.word	0x080137b4

0800bb18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800bb1c:	4604      	mov	r4, r0
 800bb1e:	b170      	cbz	r0, 800bb3e <tcp_netif_ip_addr_changed+0x26>
 800bb20:	6803      	ldr	r3, [r0, #0]
 800bb22:	b163      	cbz	r3, 800bb3e <tcp_netif_ip_addr_changed+0x26>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800bb24:	4e0a      	ldr	r6, [pc, #40]	; (800bb50 <tcp_netif_ip_addr_changed+0x38>)
 800bb26:	68b1      	ldr	r1, [r6, #8]
 800bb28:	f7ff fef0 	bl	800b90c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800bb2c:	6831      	ldr	r1, [r6, #0]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f7ff feec 	bl	800b90c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800bb34:	b11d      	cbz	r5, 800bb3e <tcp_netif_ip_addr_changed+0x26>
 800bb36:	682b      	ldr	r3, [r5, #0]
 800bb38:	b10b      	cbz	r3, 800bb3e <tcp_netif_ip_addr_changed+0x26>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb3a:	6873      	ldr	r3, [r6, #4]
 800bb3c:	b903      	cbnz	r3, 800bb40 <tcp_netif_ip_addr_changed+0x28>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800bb3e:	bd70      	pop	{r4, r5, r6, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800bb40:	6819      	ldr	r1, [r3, #0]
 800bb42:	6822      	ldr	r2, [r4, #0]
 800bb44:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bb46:	bf04      	itt	eq
 800bb48:	682a      	ldreq	r2, [r5, #0]
 800bb4a:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	e7f5      	b.n	800bb3c <tcp_netif_ip_addr_changed+0x24>
 800bb50:	2001400c 	.word	0x2001400c

0800bb54 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800bb54:	4a08      	ldr	r2, [pc, #32]	; (800bb78 <tcp_get_next_optbyte+0x24>)
 800bb56:	8813      	ldrh	r3, [r2, #0]
 800bb58:	1c59      	adds	r1, r3, #1
 800bb5a:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bb5c:	6851      	ldr	r1, [r2, #4]
 800bb5e:	b111      	cbz	r1, 800bb66 <tcp_get_next_optbyte+0x12>
 800bb60:	8910      	ldrh	r0, [r2, #8]
 800bb62:	4283      	cmp	r3, r0
 800bb64:	d203      	bcs.n	800bb6e <tcp_get_next_optbyte+0x1a>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800bb66:	68d2      	ldr	r2, [r2, #12]
 800bb68:	4413      	add	r3, r2
 800bb6a:	7d18      	ldrb	r0, [r3, #20]
 800bb6c:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bb6e:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	20014028 	.word	0x20014028

0800bb7c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bb80:	4606      	mov	r6, r0
 800bb82:	b930      	cbnz	r0, 800bb92 <tcp_parseopt+0x16>
 800bb84:	4b1e      	ldr	r3, [pc, #120]	; (800bc00 <tcp_parseopt+0x84>)
 800bb86:	f240 727d 	movw	r2, #1917	; 0x77d
 800bb8a:	491e      	ldr	r1, [pc, #120]	; (800bc04 <tcp_parseopt+0x88>)
 800bb8c:	481e      	ldr	r0, [pc, #120]	; (800bc08 <tcp_parseopt+0x8c>)
 800bb8e:	f002 fd6b 	bl	800e668 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bb92:	4d1e      	ldr	r5, [pc, #120]	; (800bc0c <tcp_parseopt+0x90>)
 800bb94:	8a2f      	ldrh	r7, [r5, #16]
 800bb96:	b17f      	cbz	r7, 800bbb8 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bb98:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bb9a:	f240 58b3 	movw	r8, #1459	; 0x5b3
 800bb9e:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bba2:	802b      	strh	r3, [r5, #0]
 800bba4:	882b      	ldrh	r3, [r5, #0]
 800bba6:	42bb      	cmp	r3, r7
 800bba8:	d206      	bcs.n	800bbb8 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 800bbaa:	f7ff ffd3 	bl	800bb54 <tcp_get_next_optbyte>
      switch (opt) {
 800bbae:	2801      	cmp	r0, #1
 800bbb0:	d0f8      	beq.n	800bba4 <tcp_parseopt+0x28>
 800bbb2:	2802      	cmp	r0, #2
 800bbb4:	d002      	beq.n	800bbbc <tcp_parseopt+0x40>
 800bbb6:	b9c8      	cbnz	r0, 800bbec <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800bbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bbbc:	f7ff ffca 	bl	800bb54 <tcp_get_next_optbyte>
 800bbc0:	2804      	cmp	r0, #4
 800bbc2:	d1f9      	bne.n	800bbb8 <tcp_parseopt+0x3c>
 800bbc4:	882b      	ldrh	r3, [r5, #0]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	42bb      	cmp	r3, r7
 800bbca:	daf5      	bge.n	800bbb8 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bbcc:	f7ff ffc2 	bl	800bb54 <tcp_get_next_optbyte>
 800bbd0:	0200      	lsls	r0, r0, #8
 800bbd2:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800bbd4:	f7ff ffbe 	bl	800bb54 <tcp_get_next_optbyte>
 800bbd8:	ea44 0300 	orr.w	r3, r4, r0
 800bbdc:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bbde:	1e5a      	subs	r2, r3, #1
 800bbe0:	b292      	uxth	r2, r2
 800bbe2:	4542      	cmp	r2, r8
 800bbe4:	bf88      	it	hi
 800bbe6:	464b      	movhi	r3, r9
 800bbe8:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 800bbea:	e7db      	b.n	800bba4 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800bbec:	f7ff ffb2 	bl	800bb54 <tcp_get_next_optbyte>
          if (data < 2) {
 800bbf0:	2801      	cmp	r0, #1
 800bbf2:	d9e1      	bls.n	800bbb8 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 800bbf4:	882b      	ldrh	r3, [r5, #0]
 800bbf6:	3b02      	subs	r3, #2
 800bbf8:	4418      	add	r0, r3
 800bbfa:	8028      	strh	r0, [r5, #0]
 800bbfc:	e7d2      	b.n	800bba4 <tcp_parseopt+0x28>
 800bbfe:	bf00      	nop
 800bc00:	08015934 	.word	0x08015934
 800bc04:	080159a9 	.word	0x080159a9
 800bc08:	080137b4 	.word	0x080137b4
 800bc0c:	20014028 	.word	0x20014028

0800bc10 <tcp_input_delayed_close>:
{
 800bc10:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800bc12:	4604      	mov	r4, r0
 800bc14:	b930      	cbnz	r0, 800bc24 <tcp_input_delayed_close+0x14>
 800bc16:	4b0f      	ldr	r3, [pc, #60]	; (800bc54 <tcp_input_delayed_close+0x44>)
 800bc18:	f240 225a 	movw	r2, #602	; 0x25a
 800bc1c:	490e      	ldr	r1, [pc, #56]	; (800bc58 <tcp_input_delayed_close+0x48>)
 800bc1e:	480f      	ldr	r0, [pc, #60]	; (800bc5c <tcp_input_delayed_close+0x4c>)
 800bc20:	f002 fd22 	bl	800e668 <iprintf>
  if (recv_flags & TF_CLOSED) {
 800bc24:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <tcp_input_delayed_close+0x50>)
 800bc26:	7c98      	ldrb	r0, [r3, #18]
 800bc28:	f010 0010 	ands.w	r0, r0, #16
 800bc2c:	d011      	beq.n	800bc52 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bc2e:	8b63      	ldrh	r3, [r4, #26]
 800bc30:	06db      	lsls	r3, r3, #27
 800bc32:	d406      	bmi.n	800bc42 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bc34:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bc38:	b11b      	cbz	r3, 800bc42 <tcp_input_delayed_close+0x32>
 800bc3a:	f06f 010e 	mvn.w	r1, #14
 800bc3e:	6920      	ldr	r0, [r4, #16]
 800bc40:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bc42:	4621      	mov	r1, r4
 800bc44:	4807      	ldr	r0, [pc, #28]	; (800bc64 <tcp_input_delayed_close+0x54>)
 800bc46:	f7ff fbb9 	bl	800b3bc <tcp_pcb_remove>
    tcp_free(pcb);
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7fe ffc4 	bl	800abd8 <tcp_free>
 800bc50:	2001      	movs	r0, #1
}
 800bc52:	bd10      	pop	{r4, pc}
 800bc54:	08015934 	.word	0x08015934
 800bc58:	080159c3 	.word	0x080159c3
 800bc5c:	080137b4 	.word	0x080137b4
 800bc60:	20014028 	.word	0x20014028
 800bc64:	20014014 	.word	0x20014014

0800bc68 <tcp_free_acked_segments.constprop.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 800bc70:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bc72:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800bd24 <tcp_free_acked_segments.constprop.0+0xbc>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bc76:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800bd1c <tcp_free_acked_segments.constprop.0+0xb4>
  while (seg_list != NULL &&
 800bc7a:	2c00      	cmp	r4, #0
 800bc7c:	d03b      	beq.n	800bcf6 <tcp_free_acked_segments.constprop.0+0x8e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bc7e:	68e3      	ldr	r3, [r4, #12]
 800bc80:	6858      	ldr	r0, [r3, #4]
 800bc82:	f7fd ff0c 	bl	8009a9e <lwip_htonl>
 800bc86:	68e3      	ldr	r3, [r4, #12]
 800bc88:	4682      	mov	sl, r0
 800bc8a:	8925      	ldrh	r5, [r4, #8]
 800bc8c:	8998      	ldrh	r0, [r3, #12]
 800bc8e:	f7fd ff03 	bl	8009a98 <lwip_htons>
 800bc92:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800bc96:	f010 0003 	ands.w	r0, r0, #3
 800bc9a:	eba5 0303 	sub.w	r3, r5, r3
 800bc9e:	bf18      	it	ne
 800bca0:	2001      	movne	r0, #1
 800bca2:	eb03 050a 	add.w	r5, r3, sl
 800bca6:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	dc25      	bgt.n	800bcf8 <tcp_free_acked_segments.constprop.0+0x90>
    clen = pbuf_clen(next->p);
 800bcac:	e9d4 a000 	ldrd	sl, r0, [r4]
 800bcb0:	f7fe fdea 	bl	800a888 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bcb4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
    clen = pbuf_clen(next->p);
 800bcb8:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bcba:	4283      	cmp	r3, r0
 800bcbc:	d206      	bcs.n	800bccc <tcp_free_acked_segments.constprop.0+0x64>
 800bcbe:	464b      	mov	r3, r9
 800bcc0:	f240 4257 	movw	r2, #1111	; 0x457
 800bcc4:	4913      	ldr	r1, [pc, #76]	; (800bd14 <tcp_free_acked_segments.constprop.0+0xac>)
 800bcc6:	4814      	ldr	r0, [pc, #80]	; (800bd18 <tcp_free_acked_segments.constprop.0+0xb0>)
 800bcc8:	f002 fcce 	bl	800e668 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bccc:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bcd0:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 800bcd4:	8923      	ldrh	r3, [r4, #8]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bcd6:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 800bcd8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bcda:	4413      	add	r3, r2
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bcdc:	f8a6 5066 	strh.w	r5, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bce0:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 800bce4:	f7ff f8be 	bl	800ae64 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800bce8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800bcec:	b17b      	cbz	r3, 800bd0e <tcp_free_acked_segments.constprop.0+0xa6>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bcee:	f1ba 0f00 	cmp.w	sl, #0
 800bcf2:	d10c      	bne.n	800bd0e <tcp_free_acked_segments.constprop.0+0xa6>
 800bcf4:	b11f      	cbz	r7, 800bcfe <tcp_free_acked_segments.constprop.0+0x96>
    seg_list = seg_list->next;
 800bcf6:	2400      	movs	r4, #0
}
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bcfe:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <tcp_free_acked_segments.constprop.0+0xb4>)
 800bd00:	f240 4261 	movw	r2, #1121	; 0x461
 800bd04:	4906      	ldr	r1, [pc, #24]	; (800bd20 <tcp_free_acked_segments.constprop.0+0xb8>)
 800bd06:	4804      	ldr	r0, [pc, #16]	; (800bd18 <tcp_free_acked_segments.constprop.0+0xb0>)
 800bd08:	f002 fcae 	bl	800e668 <iprintf>
  while (seg_list != NULL &&
 800bd0c:	e7f3      	b.n	800bcf6 <tcp_free_acked_segments.constprop.0+0x8e>
    seg_list = seg_list->next;
 800bd0e:	4654      	mov	r4, sl
 800bd10:	e7b3      	b.n	800bc7a <tcp_free_acked_segments.constprop.0+0x12>
 800bd12:	bf00      	nop
 800bd14:	080159e8 	.word	0x080159e8
 800bd18:	080137b4 	.word	0x080137b4
 800bd1c:	08015934 	.word	0x08015934
 800bd20:	08015a10 	.word	0x08015a10
 800bd24:	20014028 	.word	0x20014028

0800bd28 <tcp_receive>:
{
 800bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	b930      	cbnz	r0, 800bd3c <tcp_receive+0x14>
 800bd2e:	4b35      	ldr	r3, [pc, #212]	; (800be04 <tcp_receive+0xdc>)
 800bd30:	f240 427b 	movw	r2, #1147	; 0x47b
 800bd34:	4934      	ldr	r1, [pc, #208]	; (800be08 <tcp_receive+0xe0>)
 800bd36:	4835      	ldr	r0, [pc, #212]	; (800be0c <tcp_receive+0xe4>)
 800bd38:	f002 fc96 	bl	800e668 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800bd3c:	7d23      	ldrb	r3, [r4, #20]
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d806      	bhi.n	800bd50 <tcp_receive+0x28>
 800bd42:	4b30      	ldr	r3, [pc, #192]	; (800be04 <tcp_receive+0xdc>)
 800bd44:	f240 427c 	movw	r2, #1148	; 0x47c
 800bd48:	4931      	ldr	r1, [pc, #196]	; (800be10 <tcp_receive+0xe8>)
 800bd4a:	4830      	ldr	r0, [pc, #192]	; (800be0c <tcp_receive+0xe4>)
 800bd4c:	f002 fc8c 	bl	800e668 <iprintf>
  if (flags & TCP_ACK) {
 800bd50:	4d30      	ldr	r5, [pc, #192]	; (800be14 <tcp_receive+0xec>)
 800bd52:	7f2b      	ldrb	r3, [r5, #28]
 800bd54:	06de      	lsls	r6, r3, #27
 800bd56:	f140 8088 	bpl.w	800be6a <tcp_receive+0x142>
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bd5a:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bd5c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bd60:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bd62:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800bd66:	1af7      	subs	r7, r6, r3
 800bd68:	2f00      	cmp	r7, #0
 800bd6a:	db0a      	blt.n	800bd82 <tcp_receive+0x5a>
 800bd6c:	429e      	cmp	r6, r3
 800bd6e:	d102      	bne.n	800bd76 <tcp_receive+0x4e>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bd70:	1a86      	subs	r6, r0, r2
 800bd72:	2e00      	cmp	r6, #0
 800bd74:	db05      	blt.n	800bd82 <tcp_receive+0x5a>
 800bd76:	4290      	cmp	r0, r2
 800bd78:	d110      	bne.n	800bd9c <tcp_receive+0x74>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bd7a:	68ee      	ldr	r6, [r5, #12]
 800bd7c:	89f6      	ldrh	r6, [r6, #14]
 800bd7e:	428e      	cmp	r6, r1
 800bd80:	d90c      	bls.n	800bd9c <tcp_receive+0x74>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bd82:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bd84:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bd88:	89f6      	ldrh	r6, [r6, #14]
 800bd8a:	b2b7      	uxth	r7, r6
 800bd8c:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bd90:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 800bd92:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bd96:	bf38      	it	cc
 800bd98:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bd9c:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800bd9e:	1b93      	subs	r3, r2, r6
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f300 813a 	bgt.w	800c01a <tcp_receive+0x2f2>
      if (tcplen == 0) {
 800bda6:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f040 8132 	bne.w	800c012 <tcp_receive+0x2ea>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bdae:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bdb2:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bdb4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800bdb6:	443b      	add	r3, r7
 800bdb8:	428b      	cmp	r3, r1
 800bdba:	f040 812a 	bne.w	800c012 <tcp_receive+0x2ea>
          if (pcb->rtime >= 0) {
 800bdbe:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	f2c0 8125 	blt.w	800c012 <tcp_receive+0x2ea>
            if (pcb->lastack == ackno) {
 800bdc8:	4296      	cmp	r6, r2
 800bdca:	f040 8122 	bne.w	800c012 <tcp_receive+0x2ea>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bdce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bdd2:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800bdd4:	bf1c      	itt	ne
 800bdd6:	3301      	addne	r3, #1
 800bdd8:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800bddc:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bde0:	2b03      	cmp	r3, #3
 800bde2:	d919      	bls.n	800be18 <tcp_receive+0xf0>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bde4:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800bde8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bdec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bdee:	4413      	add	r3, r2
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	bf88      	it	hi
 800bdf6:	460b      	movhi	r3, r1
 800bdf8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f001 fcf9 	bl	800d7f4 <tcp_rexmit_fast>
      if (!found_dupack) {
 800be02:	e00a      	b.n	800be1a <tcp_receive+0xf2>
 800be04:	08015934 	.word	0x08015934
 800be08:	08015a30 	.word	0x08015a30
 800be0c:	080137b4 	.word	0x080137b4
 800be10:	08015a49 	.word	0x08015a49
 800be14:	20014028 	.word	0x20014028
              if (pcb->dupacks >= 3) {
 800be18:	d0f0      	beq.n	800bdfc <tcp_receive+0xd4>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800be1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be1c:	b329      	cbz	r1, 800be6a <tcp_receive+0x142>
 800be1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be20:	69aa      	ldr	r2, [r5, #24]
 800be22:	1a9b      	subs	r3, r3, r2
 800be24:	2b00      	cmp	r3, #0
 800be26:	da20      	bge.n	800be6a <tcp_receive+0x142>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800be28:	4b9b      	ldr	r3, [pc, #620]	; (800c098 <tcp_receive+0x370>)
 800be2a:	b289      	uxth	r1, r1
 800be2c:	881f      	ldrh	r7, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 800be2e:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800be32:	1a7a      	subs	r2, r7, r1
      m = (s16_t)(m - (pcb->sa >> 3));
 800be34:	f3c3 00cf 	ubfx	r0, r3, #3, #16
 800be38:	1a12      	subs	r2, r2, r0
 800be3a:	b216      	sxth	r6, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 800be3c:	fa13 f282 	uxtah	r2, r3, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800be40:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
      if (m < 0) {
 800be44:	2e00      	cmp	r6, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800be46:	b212      	sxth	r2, r2
      pcb->sv = (s16_t)(pcb->sv + m);
 800be48:	eba3 03a3 	sub.w	r3, r3, r3, asr #2
        m = (s16_t) - m;
 800be4c:	bfb8      	it	lt
 800be4e:	1bc9      	sublt	r1, r1, r7
      pcb->sa = (s16_t)(pcb->sa + m);
 800be50:	87a2      	strh	r2, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800be52:	bfbc      	itt	lt
 800be54:	1809      	addlt	r1, r1, r0
 800be56:	b20e      	sxthlt	r6, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800be58:	4433      	add	r3, r6
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800be5e:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800be62:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800be66:	2300      	movs	r3, #0
 800be68:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800be6a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be6c:	6a2b      	ldr	r3, [r5, #32]
 800be6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800be70:	2800      	cmp	r0, #0
 800be72:	f000 8184 	beq.w	800c17e <tcp_receive+0x456>
 800be76:	7d21      	ldrb	r1, [r4, #20]
 800be78:	2906      	cmp	r1, #6
 800be7a:	f200 8180 	bhi.w	800c17e <tcp_receive+0x456>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800be7e:	1ad7      	subs	r7, r2, r3
 800be80:	2f01      	cmp	r7, #1
 800be82:	f100 816b 	bmi.w	800c15c <tcp_receive+0x434>
 800be86:	f1c3 0101 	rsb	r1, r3, #1
 800be8a:	1a09      	subs	r1, r1, r0
 800be8c:	4411      	add	r1, r2
 800be8e:	2900      	cmp	r1, #0
 800be90:	f300 8164 	bgt.w	800c15c <tcp_receive+0x434>
      struct pbuf *p = inseg.p;
 800be94:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800be96:	b936      	cbnz	r6, 800bea6 <tcp_receive+0x17e>
 800be98:	4b80      	ldr	r3, [pc, #512]	; (800c09c <tcp_receive+0x374>)
 800be9a:	f240 5294 	movw	r2, #1428	; 0x594
 800be9e:	4980      	ldr	r1, [pc, #512]	; (800c0a0 <tcp_receive+0x378>)
 800bea0:	4880      	ldr	r0, [pc, #512]	; (800c0a4 <tcp_receive+0x37c>)
 800bea2:	f002 fbe1 	bl	800e668 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800bea6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800beaa:	429f      	cmp	r7, r3
 800beac:	d906      	bls.n	800bebc <tcp_receive+0x194>
 800beae:	4b7b      	ldr	r3, [pc, #492]	; (800c09c <tcp_receive+0x374>)
 800beb0:	f240 5295 	movw	r2, #1429	; 0x595
 800beb4:	497c      	ldr	r1, [pc, #496]	; (800c0a8 <tcp_receive+0x380>)
 800beb6:	487b      	ldr	r0, [pc, #492]	; (800c0a4 <tcp_receive+0x37c>)
 800beb8:	f002 fbd6 	bl	800e668 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bebc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800bebe:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800bec0:	891b      	ldrh	r3, [r3, #8]
 800bec2:	42bb      	cmp	r3, r7
 800bec4:	d206      	bcs.n	800bed4 <tcp_receive+0x1ac>
 800bec6:	4b75      	ldr	r3, [pc, #468]	; (800c09c <tcp_receive+0x374>)
 800bec8:	f240 5297 	movw	r2, #1431	; 0x597
 800becc:	4977      	ldr	r1, [pc, #476]	; (800c0ac <tcp_receive+0x384>)
 800bece:	4875      	ldr	r0, [pc, #468]	; (800c0a4 <tcp_receive+0x37c>)
 800bed0:	f002 fbca 	bl	800e668 <iprintf>
      inseg.len -= off;
 800bed4:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800bed6:	2100      	movs	r1, #0
      inseg.len -= off;
 800bed8:	1bdb      	subs	r3, r3, r7
 800beda:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800bedc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bede:	891b      	ldrh	r3, [r3, #8]
 800bee0:	1bdb      	subs	r3, r3, r7
 800bee2:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800bee4:	8972      	ldrh	r2, [r6, #10]
 800bee6:	42ba      	cmp	r2, r7
 800bee8:	f0c0 8132 	bcc.w	800c150 <tcp_receive+0x428>
      pbuf_remove_header(p, off);
 800beec:	4639      	mov	r1, r7
 800beee:	4630      	mov	r0, r6
 800bef0:	f7fe fb5a 	bl	800a5a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800bef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bef6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800bef8:	622b      	str	r3, [r5, #32]
 800befa:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800befc:	6a29      	ldr	r1, [r5, #32]
 800befe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bf00:	1a8b      	subs	r3, r1, r2
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f2c0 8136 	blt.w	800c174 <tcp_receive+0x44c>
 800bf08:	1c4b      	adds	r3, r1, #1
 800bf0a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800bf0c:	1a9b      	subs	r3, r3, r2
 800bf0e:	1a1b      	subs	r3, r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	f300 812f 	bgt.w	800c174 <tcp_receive+0x44c>
      if (pcb->rcv_nxt == seqno) {
 800bf16:	4291      	cmp	r1, r2
 800bf18:	f040 812c 	bne.w	800c174 <tcp_receive+0x44c>
        tcplen = TCP_TCPLEN(&inseg);
 800bf1c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf1e:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800bf20:	8998      	ldrh	r0, [r3, #12]
 800bf22:	f7fd fdb9 	bl	8009a98 <lwip_htons>
 800bf26:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800bf2a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800bf2c:	bf18      	it	ne
 800bf2e:	2001      	movne	r0, #1
 800bf30:	4430      	add	r0, r6
 800bf32:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800bf34:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800bf36:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800bf38:	d23d      	bcs.n	800bfb6 <tcp_receive+0x28e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bf3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf3c:	8998      	ldrh	r0, [r3, #12]
 800bf3e:	f7fd fdab 	bl	8009a98 <lwip_htons>
 800bf42:	07c6      	lsls	r6, r0, #31
 800bf44:	d50d      	bpl.n	800bf62 <tcp_receive+0x23a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800bf46:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf48:	899e      	ldrh	r6, [r3, #12]
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800bf50:	f7fd fda2 	bl	8009a98 <lwip_htons>
 800bf54:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800bf58:	f7fd fd9e 	bl	8009a98 <lwip_htons>
 800bf5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf5e:	4306      	orrs	r6, r0
 800bf60:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800bf62:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bf64:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800bf66:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf68:	8998      	ldrh	r0, [r3, #12]
 800bf6a:	f7fd fd95 	bl	8009a98 <lwip_htons>
 800bf6e:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800bf70:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800bf72:	bf42      	ittt	mi
 800bf74:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800bf76:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800bf7a:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800bf7c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800bf7e:	f7fe fc2b 	bl	800a7d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800bf82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bf84:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800bf86:	8998      	ldrh	r0, [r3, #12]
 800bf88:	f7fd fd86 	bl	8009a98 <lwip_htons>
 800bf8c:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf90:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800bf92:	bf18      	it	ne
 800bf94:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf96:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800bf98:	4430      	add	r0, r6
 800bf9a:	b280      	uxth	r0, r0
 800bf9c:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bf9e:	4418      	add	r0, r3
 800bfa0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bfa2:	4413      	add	r3, r2
 800bfa4:	4298      	cmp	r0, r3
 800bfa6:	d006      	beq.n	800bfb6 <tcp_receive+0x28e>
 800bfa8:	4b3c      	ldr	r3, [pc, #240]	; (800c09c <tcp_receive+0x374>)
 800bfaa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800bfae:	4940      	ldr	r1, [pc, #256]	; (800c0b0 <tcp_receive+0x388>)
 800bfb0:	483c      	ldr	r0, [pc, #240]	; (800c0a4 <tcp_receive+0x37c>)
 800bfb2:	f002 fb59 	bl	800e668 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800bfb6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bfb8:	6a2b      	ldr	r3, [r5, #32]
 800bfba:	4413      	add	r3, r2
 800bfbc:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800bfbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d206      	bcs.n	800bfd2 <tcp_receive+0x2aa>
 800bfc4:	4b35      	ldr	r3, [pc, #212]	; (800c09c <tcp_receive+0x374>)
 800bfc6:	f240 6207 	movw	r2, #1543	; 0x607
 800bfca:	493a      	ldr	r1, [pc, #232]	; (800c0b4 <tcp_receive+0x38c>)
 800bfcc:	4835      	ldr	r0, [pc, #212]	; (800c0a4 <tcp_receive+0x37c>)
 800bfce:	f002 fb4b 	bl	800e668 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800bfd2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bfd4:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800bfd6:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800bfd8:	1a9b      	subs	r3, r3, r2
 800bfda:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800bfdc:	f7fe fece 	bl	800ad7c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800bfe0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bfe2:	891a      	ldrh	r2, [r3, #8]
 800bfe4:	b112      	cbz	r2, 800bfec <tcp_receive+0x2c4>
          recv_data = inseg.p;
 800bfe6:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800bfec:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bfee:	8998      	ldrh	r0, [r3, #12]
 800bff0:	f7fd fd52 	bl	8009a98 <lwip_htons>
 800bff4:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800bff6:	bf42      	ittt	mi
 800bff8:	7cab      	ldrbmi	r3, [r5, #18]
 800bffa:	f043 0320 	orrmi.w	r3, r3, #32
 800bffe:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800c000:	8b63      	ldrh	r3, [r4, #26]
 800c002:	07da      	lsls	r2, r3, #31
 800c004:	f140 80b2 	bpl.w	800c16c <tcp_receive+0x444>
 800c008:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800c00c:	f043 0302 	orr.w	r3, r3, #2
 800c010:	e0ae      	b.n	800c170 <tcp_receive+0x448>
        pcb->dupacks = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c018:	e6ff      	b.n	800be1a <tcp_receive+0xf2>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c01a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c01c:	1a51      	subs	r1, r2, r1
 800c01e:	2900      	cmp	r1, #0
 800c020:	f300 8092 	bgt.w	800c148 <tcp_receive+0x420>
      if (pcb->flags & TF_INFR) {
 800c024:	8b61      	ldrh	r1, [r4, #26]
 800c026:	0748      	lsls	r0, r1, #29
 800c028:	d509      	bpl.n	800c03e <tcp_receive+0x316>
        tcp_clear_flags(pcb, TF_INFR);
 800c02a:	f021 0104 	bic.w	r1, r1, #4
 800c02e:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800c030:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800c034:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c038:	2100      	movs	r1, #0
 800c03a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c03e:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 800c042:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800c044:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c046:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 800c04a:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c04c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 800c050:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 800c052:	f04f 0100 	mov.w	r1, #0
 800c056:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800c05a:	d937      	bls.n	800c0cc <tcp_receive+0x3a4>
        if (pcb->cwnd < pcb->ssthresh) {
 800c05c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c060:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800c062:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800c066:	4291      	cmp	r1, r2
 800c068:	d926      	bls.n	800c0b8 <tcp_receive+0x390>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c06a:	8b61      	ldrh	r1, [r4, #26]
 800c06c:	f411 6f00 	tst.w	r1, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c070:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c072:	bf14      	ite	ne
 800c074:	2001      	movne	r0, #1
 800c076:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c078:	fb11 f100 	smulbb	r1, r1, r0
 800c07c:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800c07e:	4299      	cmp	r1, r3
 800c080:	bf94      	ite	ls
 800c082:	1850      	addls	r0, r2, r1
 800c084:	18d0      	addhi	r0, r2, r3
 800c086:	b283      	uxth	r3, r0
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c088:	429a      	cmp	r2, r3
 800c08a:	d901      	bls.n	800c090 <tcp_receive+0x368>
          TCP_WND_INC(pcb->cwnd, increase);
 800c08c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c090:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800c094:	e01a      	b.n	800c0cc <tcp_receive+0x3a4>
 800c096:	bf00      	nop
 800c098:	20014018 	.word	0x20014018
 800c09c:	08015934 	.word	0x08015934
 800c0a0:	08015a62 	.word	0x08015a62
 800c0a4:	080137b4 	.word	0x080137b4
 800c0a8:	08015a72 	.word	0x08015a72
 800c0ac:	08015a81 	.word	0x08015a81
 800c0b0:	08015a91 	.word	0x08015a91
 800c0b4:	08015ac8 	.word	0x08015ac8
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c0b8:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800c0bc:	440b      	add	r3, r1
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	4299      	cmp	r1, r3
 800c0c2:	d82b      	bhi.n	800c11c <tcp_receive+0x3f4>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d92b      	bls.n	800c120 <tcp_receive+0x3f8>
 800c0c8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800c0d2:	f7ff fdc9 	bl	800bc68 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c0d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c0d8:	4602      	mov	r2, r0
 800c0da:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c0dc:	4620      	mov	r0, r4
 800c0de:	f7ff fdc3 	bl	800bc68 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 800c0e2:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c0e4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800c0e6:	fab2 f382 	clz	r3, r2
 800c0ea:	095b      	lsrs	r3, r3, #5
 800c0ec:	425b      	negs	r3, r3
 800c0ee:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800c0f4:	b908      	cbnz	r0, 800c0fa <tcp_receive+0x3d2>
        pcb->unsent_oversize = 0;
 800c0f6:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c0fa:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800c0fe:	8aa9      	ldrh	r1, [r5, #20]
 800c100:	440b      	add	r3, r1
 800c102:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800c106:	8b63      	ldrh	r3, [r4, #26]
 800c108:	051f      	lsls	r7, r3, #20
 800c10a:	f57f ae86 	bpl.w	800be1a <tcp_receive+0xf2>
        if (pcb->unacked == NULL) {
 800c10e:	b9c2      	cbnz	r2, 800c142 <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 800c110:	b968      	cbnz	r0, 800c12e <tcp_receive+0x406>
          tcp_clear_flags(pcb, TF_RTO);
 800c112:	8b63      	ldrh	r3, [r4, #26]
 800c114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c118:	8363      	strh	r3, [r4, #26]
 800c11a:	e67e      	b.n	800be1a <tcp_receive+0xf2>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c11c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c120:	1a9b      	subs	r3, r3, r2
 800c122:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c126:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c128:	4413      	add	r3, r2
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	e7ac      	b.n	800c088 <tcp_receive+0x360>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c12e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800c130:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c132:	6858      	ldr	r0, [r3, #4]
 800c134:	f7fd fcb3 	bl	8009a9e <lwip_htonl>
 800c138:	1a30      	subs	r0, r6, r0
 800c13a:	2800      	cmp	r0, #0
 800c13c:	f73f ae6d 	bgt.w	800be1a <tcp_receive+0xf2>
 800c140:	e7e7      	b.n	800c112 <tcp_receive+0x3ea>
 800c142:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800c144:	68d3      	ldr	r3, [r2, #12]
 800c146:	e7f4      	b.n	800c132 <tcp_receive+0x40a>
      tcp_send_empty_ack(pcb);
 800c148:	4620      	mov	r0, r4
 800c14a:	f001 fbcd 	bl	800d8e8 <tcp_send_empty_ack>
 800c14e:	e664      	b.n	800be1a <tcp_receive+0xf2>
        off -= p->len;
 800c150:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800c152:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800c154:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800c156:	b2bf      	uxth	r7, r7
        p = p->next;
 800c158:	6836      	ldr	r6, [r6, #0]
 800c15a:	e6c3      	b.n	800bee4 <tcp_receive+0x1bc>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800c160:	bfbe      	ittt	lt
 800c162:	8b63      	ldrhlt	r3, [r4, #26]
 800c164:	f043 0302 	orrlt.w	r3, r3, #2
 800c168:	8363      	strhlt	r3, [r4, #26]
 800c16a:	e6c7      	b.n	800befc <tcp_receive+0x1d4>
        tcp_ack(pcb);
 800c16c:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800c170:	8363      	strh	r3, [r4, #26]
}
 800c172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800c174:	4620      	mov	r0, r4
}
 800c176:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800c17a:	f001 bbb5 	b.w	800d8e8 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c17e:	1a99      	subs	r1, r3, r2
 800c180:	2900      	cmp	r1, #0
 800c182:	db05      	blt.n	800c190 <tcp_receive+0x468>
 800c184:	3301      	adds	r3, #1
 800c186:	1a9b      	subs	r3, r3, r2
 800c188:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c18a:	1a9b      	subs	r3, r3, r2
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	ddf0      	ble.n	800c172 <tcp_receive+0x44a>
      tcp_ack_now(pcb);
 800c190:	8b63      	ldrh	r3, [r4, #26]
 800c192:	e73b      	b.n	800c00c <tcp_receive+0x2e4>

0800c194 <tcp_input>:
{
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c198:	4606      	mov	r6, r0
{
 800c19a:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c19c:	b928      	cbnz	r0, 800c1aa <tcp_input+0x16>
 800c19e:	4ba1      	ldr	r3, [pc, #644]	; (800c424 <tcp_input+0x290>)
 800c1a0:	2283      	movs	r2, #131	; 0x83
 800c1a2:	49a1      	ldr	r1, [pc, #644]	; (800c428 <tcp_input+0x294>)
 800c1a4:	48a1      	ldr	r0, [pc, #644]	; (800c42c <tcp_input+0x298>)
 800c1a6:	f002 fa5f 	bl	800e668 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800c1aa:	6873      	ldr	r3, [r6, #4]
 800c1ac:	4da0      	ldr	r5, [pc, #640]	; (800c430 <tcp_input+0x29c>)
 800c1ae:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800c1b0:	8973      	ldrh	r3, [r6, #10]
 800c1b2:	2b13      	cmp	r3, #19
 800c1b4:	f240 80a6 	bls.w	800c304 <tcp_input+0x170>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c1b8:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800c454 <tcp_input+0x2c0>
 800c1bc:	f8d8 1000 	ldr.w	r1, [r8]
 800c1c0:	f8d8 0014 	ldr.w	r0, [r8, #20]
 800c1c4:	f7fd f823 	bl	800920e <ip4_addr_isbroadcast_u32>
 800c1c8:	4604      	mov	r4, r0
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f040 809a 	bne.w	800c304 <tcp_input+0x170>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c1d0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c1d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c1d8:	2be0      	cmp	r3, #224	; 0xe0
 800c1da:	f000 8093 	beq.w	800c304 <tcp_input+0x170>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800c1de:	68eb      	ldr	r3, [r5, #12]
 800c1e0:	8998      	ldrh	r0, [r3, #12]
 800c1e2:	f7fd fc59 	bl	8009a98 <lwip_htons>
 800c1e6:	0a81      	lsrs	r1, r0, #10
 800c1e8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800c1ec:	2913      	cmp	r1, #19
 800c1ee:	f240 8089 	bls.w	800c304 <tcp_input+0x170>
 800c1f2:	8933      	ldrh	r3, [r6, #8]
 800c1f4:	b28a      	uxth	r2, r1
 800c1f6:	428b      	cmp	r3, r1
 800c1f8:	f0c0 8084 	bcc.w	800c304 <tcp_input+0x170>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c1fc:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800c200:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800c202:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c204:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800c206:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800c208:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800c20a:	d33d      	bcc.n	800c288 <tcp_input+0xf4>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c20c:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800c20e:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800c210:	f7fe f9ca 	bl	800a5a8 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c214:	68ec      	ldr	r4, [r5, #12]
 800c216:	8820      	ldrh	r0, [r4, #0]
 800c218:	f7fd fc3e 	bl	8009a98 <lwip_htons>
 800c21c:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c21e:	68ec      	ldr	r4, [r5, #12]
 800c220:	8860      	ldrh	r0, [r4, #2]
 800c222:	f7fd fc39 	bl	8009a98 <lwip_htons>
 800c226:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c228:	68ec      	ldr	r4, [r5, #12]
 800c22a:	6860      	ldr	r0, [r4, #4]
 800c22c:	f7fd fc37 	bl	8009a9e <lwip_htonl>
 800c230:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c232:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c234:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c236:	68a0      	ldr	r0, [r4, #8]
 800c238:	f7fd fc31 	bl	8009a9e <lwip_htonl>
 800c23c:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c23e:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c240:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c242:	89e0      	ldrh	r0, [r4, #14]
 800c244:	f7fd fc28 	bl	8009a98 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800c248:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c24a:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800c24c:	8998      	ldrh	r0, [r3, #12]
 800c24e:	f7fd fc23 	bl	8009a98 <lwip_htons>
 800c252:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800c256:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800c258:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800c25a:	0783      	lsls	r3, r0, #30
 800c25c:	d14d      	bne.n	800c2fa <tcp_input+0x166>
  tcplen = p->tot_len;
 800c25e:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c260:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 800c458 <tcp_input+0x2c4>
  prev = NULL;
 800c264:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c266:	4b6f      	ldr	r3, [pc, #444]	; (800c424 <tcp_input+0x290>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c268:	f8d9 4000 	ldr.w	r4, [r9]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c26c:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800c45c <tcp_input+0x2c8>
 800c270:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 800c42c <tcp_input+0x298>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c274:	2c00      	cmp	r4, #0
 800c276:	d14b      	bne.n	800c310 <tcp_input+0x17c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c278:	4b6e      	ldr	r3, [pc, #440]	; (800c434 <tcp_input+0x2a0>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c27a:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 800c424 <tcp_input+0x290>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c27e:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c280:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800c460 <tcp_input+0x2cc>
 800c284:	4f69      	ldr	r7, [pc, #420]	; (800c42c <tcp_input+0x298>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c286:	e141      	b.n	800c50c <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800c288:	6833      	ldr	r3, [r6, #0]
 800c28a:	b92b      	cbnz	r3, 800c298 <tcp_input+0x104>
 800c28c:	4b65      	ldr	r3, [pc, #404]	; (800c424 <tcp_input+0x290>)
 800c28e:	22c2      	movs	r2, #194	; 0xc2
 800c290:	4969      	ldr	r1, [pc, #420]	; (800c438 <tcp_input+0x2a4>)
 800c292:	4866      	ldr	r0, [pc, #408]	; (800c42c <tcp_input+0x298>)
 800c294:	f002 f9e8 	bl	800e668 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800c298:	2114      	movs	r1, #20
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7fe f984 	bl	800a5a8 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800c2a0:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c2a2:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800c2aa:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c2ac:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800c2b0:	f7fe f97a 	bl	800a5a8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800c2b4:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800c2b6:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800c2b8:	8943      	ldrh	r3, [r0, #10]
 800c2ba:	42bb      	cmp	r3, r7
 800c2bc:	d322      	bcc.n	800c304 <tcp_input+0x170>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c2be:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800c2c0:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800c2c2:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800c2c4:	f7fe f970 	bl	800a5a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c2c8:	8933      	ldrh	r3, [r6, #8]
 800c2ca:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c2cc:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800c2ce:	eba4 0409 	sub.w	r4, r4, r9
 800c2d2:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800c2d4:	b12b      	cbz	r3, 800c2e2 <tcp_input+0x14e>
 800c2d6:	4b53      	ldr	r3, [pc, #332]	; (800c424 <tcp_input+0x290>)
 800c2d8:	22df      	movs	r2, #223	; 0xdf
 800c2da:	4958      	ldr	r1, [pc, #352]	; (800c43c <tcp_input+0x2a8>)
 800c2dc:	4853      	ldr	r0, [pc, #332]	; (800c42c <tcp_input+0x298>)
 800c2de:	f002 f9c3 	bl	800e668 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c2e2:	6833      	ldr	r3, [r6, #0]
 800c2e4:	8932      	ldrh	r2, [r6, #8]
 800c2e6:	891b      	ldrh	r3, [r3, #8]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d093      	beq.n	800c214 <tcp_input+0x80>
 800c2ec:	4b4d      	ldr	r3, [pc, #308]	; (800c424 <tcp_input+0x290>)
 800c2ee:	22e0      	movs	r2, #224	; 0xe0
 800c2f0:	4953      	ldr	r1, [pc, #332]	; (800c440 <tcp_input+0x2ac>)
 800c2f2:	484e      	ldr	r0, [pc, #312]	; (800c42c <tcp_input+0x298>)
 800c2f4:	f002 f9b8 	bl	800e668 <iprintf>
 800c2f8:	e78c      	b.n	800c214 <tcp_input+0x80>
    tcplen++;
 800c2fa:	1c53      	adds	r3, r2, #1
 800c2fc:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800c2fe:	429a      	cmp	r2, r3
    tcplen++;
 800c300:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800c302:	d9ad      	bls.n	800c260 <tcp_input+0xcc>
  pbuf_free(p);
 800c304:	4630      	mov	r0, r6
}
 800c306:	b007      	add	sp, #28
 800c308:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800c30c:	f7fe b980 	b.w	800a610 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c310:	7d22      	ldrb	r2, [r4, #20]
 800c312:	b92a      	cbnz	r2, 800c320 <tcp_input+0x18c>
 800c314:	22fb      	movs	r2, #251	; 0xfb
 800c316:	4659      	mov	r1, fp
 800c318:	4650      	mov	r0, sl
 800c31a:	f002 f9a5 	bl	800e668 <iprintf>
 800c31e:	4b41      	ldr	r3, [pc, #260]	; (800c424 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c320:	7d22      	ldrb	r2, [r4, #20]
 800c322:	2a0a      	cmp	r2, #10
 800c324:	d105      	bne.n	800c332 <tcp_input+0x19e>
 800c326:	22fc      	movs	r2, #252	; 0xfc
 800c328:	4946      	ldr	r1, [pc, #280]	; (800c444 <tcp_input+0x2b0>)
 800c32a:	4650      	mov	r0, sl
 800c32c:	f002 f99c 	bl	800e668 <iprintf>
 800c330:	4b3c      	ldr	r3, [pc, #240]	; (800c424 <tcp_input+0x290>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c332:	7d22      	ldrb	r2, [r4, #20]
 800c334:	2a01      	cmp	r2, #1
 800c336:	d105      	bne.n	800c344 <tcp_input+0x1b0>
 800c338:	22fd      	movs	r2, #253	; 0xfd
 800c33a:	4943      	ldr	r1, [pc, #268]	; (800c448 <tcp_input+0x2b4>)
 800c33c:	4650      	mov	r0, sl
 800c33e:	f002 f993 	bl	800e668 <iprintf>
 800c342:	4b38      	ldr	r3, [pc, #224]	; (800c424 <tcp_input+0x290>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c344:	7a20      	ldrb	r0, [r4, #8]
 800c346:	68e1      	ldr	r1, [r4, #12]
 800c348:	b138      	cbz	r0, 800c35a <tcp_input+0x1c6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c34a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c34e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800c352:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c354:	b2d2      	uxtb	r2, r2
 800c356:	4290      	cmp	r0, r2
 800c358:	d161      	bne.n	800c41e <tcp_input+0x28a>
    if (pcb->remote_port == tcphdr->src &&
 800c35a:	68ea      	ldr	r2, [r5, #12]
 800c35c:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800c360:	8810      	ldrh	r0, [r2, #0]
 800c362:	4584      	cmp	ip, r0
 800c364:	d15b      	bne.n	800c41e <tcp_input+0x28a>
 800c366:	8ae0      	ldrh	r0, [r4, #22]
 800c368:	8852      	ldrh	r2, [r2, #2]
 800c36a:	4290      	cmp	r0, r2
 800c36c:	d157      	bne.n	800c41e <tcp_input+0x28a>
        pcb->local_port == tcphdr->dest &&
 800c36e:	6860      	ldr	r0, [r4, #4]
 800c370:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c374:	4290      	cmp	r0, r2
 800c376:	d152      	bne.n	800c41e <tcp_input+0x28a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c378:	6820      	ldr	r0, [r4, #0]
 800c37a:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c37e:	4290      	cmp	r0, r2
 800c380:	d14d      	bne.n	800c41e <tcp_input+0x28a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c382:	42a1      	cmp	r1, r4
 800c384:	f040 83eb 	bne.w	800cb5e <tcp_input+0x9ca>
 800c388:	4b26      	ldr	r3, [pc, #152]	; (800c424 <tcp_input+0x290>)
 800c38a:	f240 120d 	movw	r2, #269	; 0x10d
 800c38e:	492f      	ldr	r1, [pc, #188]	; (800c44c <tcp_input+0x2b8>)
 800c390:	4826      	ldr	r0, [pc, #152]	; (800c42c <tcp_input+0x298>)
 800c392:	f002 f969 	bl	800e668 <iprintf>
      if (prev != NULL) {
 800c396:	b137      	cbz	r7, 800c3a6 <tcp_input+0x212>
        prev->next = pcb->next;
 800c398:	68e3      	ldr	r3, [r4, #12]
 800c39a:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800c39c:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800c3a0:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800c3a4:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c3a6:	68e3      	ldr	r3, [r4, #12]
 800c3a8:	42a3      	cmp	r3, r4
 800c3aa:	d106      	bne.n	800c3ba <tcp_input+0x226>
 800c3ac:	4b1d      	ldr	r3, [pc, #116]	; (800c424 <tcp_input+0x290>)
 800c3ae:	f240 1215 	movw	r2, #277	; 0x115
 800c3b2:	4927      	ldr	r1, [pc, #156]	; (800c450 <tcp_input+0x2bc>)
 800c3b4:	481d      	ldr	r0, [pc, #116]	; (800c42c <tcp_input+0x298>)
 800c3b6:	f002 f957 	bl	800e668 <iprintf>
    inseg.len = p->tot_len;
 800c3ba:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800c3bc:	2300      	movs	r3, #0
    inseg.p = p;
 800c3be:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800c3c0:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800c3c2:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800c3c4:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800c3c6:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800c3c8:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800c3ca:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800c3ce:	7f2b      	ldrb	r3, [r5, #28]
 800c3d0:	071b      	lsls	r3, r3, #28
 800c3d2:	d503      	bpl.n	800c3dc <tcp_input+0x248>
      p->flags |= PBUF_FLAG_PUSH;
 800c3d4:	7b73      	ldrb	r3, [r6, #13]
 800c3d6:	f043 0301 	orr.w	r3, r3, #1
 800c3da:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800c3dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	f000 812e 	beq.w	800c640 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f7ff f935 	bl	800b654 <tcp_process_refused_data>
 800c3ea:	300d      	adds	r0, #13
 800c3ec:	d007      	beq.n	800c3fe <tcp_input+0x26a>
 800c3ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 8125 	beq.w	800c640 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c3f6:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 8121 	beq.w	800c640 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800c3fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c400:	b913      	cbnz	r3, 800c408 <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800c402:	4620      	mov	r0, r4
 800c404:	f001 fa70 	bl	800d8e8 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800c408:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800c40a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    recv_data = NULL;
 800c40c:	e9c5 440e 	strd	r4, r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800c410:	b110      	cbz	r0, 800c418 <tcp_input+0x284>
      pbuf_free(inseg.p);
 800c412:	f7fe f8fd 	bl	800a610 <pbuf_free>
      inseg.p = NULL;
 800c416:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800c418:	b007      	add	sp, #28
 800c41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c41e:	4627      	mov	r7, r4
 800c420:	460c      	mov	r4, r1
 800c422:	e727      	b.n	800c274 <tcp_input+0xe0>
 800c424:	08015934 	.word	0x08015934
 800c428:	08015ae7 	.word	0x08015ae7
 800c42c:	080137b4 	.word	0x080137b4
 800c430:	20014028 	.word	0x20014028
 800c434:	20014020 	.word	0x20014020
 800c438:	08015aff 	.word	0x08015aff
 800c43c:	08015b0f 	.word	0x08015b0f
 800c440:	08015b1b 	.word	0x08015b1b
 800c444:	08015b61 	.word	0x08015b61
 800c448:	08015b8b 	.word	0x08015b8b
 800c44c:	08015bb2 	.word	0x08015bb2
 800c450:	08015bdd 	.word	0x08015bdd
 800c454:	2001021c 	.word	0x2001021c
 800c458:	20014014 	.word	0x20014014
 800c45c:	08015b3a 	.word	0x08015b3a
 800c460:	08015c07 	.word	0x08015c07
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c464:	7d23      	ldrb	r3, [r4, #20]
 800c466:	2b0a      	cmp	r3, #10
 800c468:	d006      	beq.n	800c478 <tcp_input+0x2e4>
 800c46a:	465b      	mov	r3, fp
 800c46c:	f240 121f 	movw	r2, #287	; 0x11f
 800c470:	4651      	mov	r1, sl
 800c472:	4638      	mov	r0, r7
 800c474:	f002 f8f8 	bl	800e668 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c478:	7a22      	ldrb	r2, [r4, #8]
 800c47a:	b13a      	cbz	r2, 800c48c <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c47c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c484:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c486:	b2db      	uxtb	r3, r3
 800c488:	429a      	cmp	r2, r3
 800c48a:	d13e      	bne.n	800c50a <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800c48c:	68eb      	ldr	r3, [r5, #12]
 800c48e:	8b20      	ldrh	r0, [r4, #24]
 800c490:	881a      	ldrh	r2, [r3, #0]
 800c492:	4290      	cmp	r0, r2
 800c494:	d139      	bne.n	800c50a <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800c496:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800c498:	8ae1      	ldrh	r1, [r4, #22]
 800c49a:	4299      	cmp	r1, r3
 800c49c:	d135      	bne.n	800c50a <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800c49e:	6862      	ldr	r2, [r4, #4]
 800c4a0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d130      	bne.n	800c50a <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c4a8:	6822      	ldr	r2, [r4, #0]
 800c4aa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d12b      	bne.n	800c50a <tcp_input+0x376>
  if (flags & TCP_RST) {
 800c4b2:	7f2b      	ldrb	r3, [r5, #28]
 800c4b4:	075f      	lsls	r7, r3, #29
 800c4b6:	f53f af25 	bmi.w	800c304 <tcp_input+0x170>
  if (flags & TCP_SYN) {
 800c4ba:	079a      	lsls	r2, r3, #30
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4bc:	8caf      	ldrh	r7, [r5, #36]	; 0x24
  if (flags & TCP_SYN) {
 800c4be:	d514      	bpl.n	800c4ea <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c4c0:	6a2a      	ldr	r2, [r5, #32]
 800c4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	d415      	bmi.n	800c4f4 <tcp_input+0x360>
 800c4c8:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800c4cc:	eba3 030c 	sub.w	r3, r3, ip
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dc0f      	bgt.n	800c4f4 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4d4:	4b8a      	ldr	r3, [pc, #552]	; (800c700 <tcp_input+0x56c>)
 800c4d6:	443a      	add	r2, r7
 800c4d8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4620      	mov	r0, r4
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4e4:	f001 f9ba 	bl	800d85c <tcp_rst>
 800c4e8:	e70c      	b.n	800c304 <tcp_input+0x170>
  } else if (flags & TCP_FIN) {
 800c4ea:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800c4ec:	bf42      	ittt	mi
 800c4ee:	4b85      	ldrmi	r3, [pc, #532]	; (800c704 <tcp_input+0x570>)
 800c4f0:	681b      	ldrmi	r3, [r3, #0]
 800c4f2:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800c4f4:	2f00      	cmp	r7, #0
 800c4f6:	f43f af05 	beq.w	800c304 <tcp_input+0x170>
    tcp_ack_now(pcb);
 800c4fa:	8b63      	ldrh	r3, [r4, #26]
 800c4fc:	f043 0302 	orr.w	r3, r3, #2
 800c500:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800c502:	4620      	mov	r0, r4
 800c504:	f001 fa22 	bl	800d94c <tcp_output>
        pbuf_free(p);
 800c508:	e6fc      	b.n	800c304 <tcp_input+0x170>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c50a:	68e4      	ldr	r4, [r4, #12]
 800c50c:	2c00      	cmp	r4, #0
 800c50e:	d1a9      	bne.n	800c464 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c510:	487d      	ldr	r0, [pc, #500]	; (800c708 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c512:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c516:	6802      	ldr	r2, [r0, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800c518:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c51a:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c51e:	4617      	mov	r7, r2
 800c520:	b98f      	cbnz	r7, 800c546 <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c522:	8988      	ldrh	r0, [r1, #12]
 800c524:	f7fd fab8 	bl	8009a98 <lwip_htons>
 800c528:	0742      	lsls	r2, r0, #29
 800c52a:	f53f aeeb 	bmi.w	800c304 <tcp_input+0x170>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c52e:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c530:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c532:	8818      	ldrh	r0, [r3, #0]
 800c534:	6a2a      	ldr	r2, [r5, #32]
 800c536:	9002      	str	r0, [sp, #8]
 800c538:	885b      	ldrh	r3, [r3, #2]
 800c53a:	440a      	add	r2, r1
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	4b70      	ldr	r3, [pc, #448]	; (800c700 <tcp_input+0x56c>)
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	3304      	adds	r3, #4
 800c544:	e308      	b.n	800cb58 <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c546:	f897 c008 	ldrb.w	ip, [r7, #8]
 800c54a:	f1bc 0f00 	cmp.w	ip, #0
 800c54e:	d005      	beq.n	800c55c <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c550:	f89e 3030 	ldrb.w	r3, [lr, #48]	; 0x30
 800c554:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800c556:	b2db      	uxtb	r3, r3
 800c558:	459c      	cmp	ip, r3
 800c55a:	d10b      	bne.n	800c574 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800c55c:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800c560:	8afb      	ldrh	r3, [r7, #22]
 800c562:	4563      	cmp	r3, ip
 800c564:	d106      	bne.n	800c574 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	4553      	cmp	r3, sl
 800c56a:	f000 82df 	beq.w	800cb2c <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 82dc 	beq.w	800cb2c <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c574:	463c      	mov	r4, r7
 800c576:	68ff      	ldr	r7, [r7, #12]
 800c578:	e7d2      	b.n	800c520 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800c57a:	0798      	lsls	r0, r3, #30
 800c57c:	f57f aec2 	bpl.w	800c304 <tcp_input+0x170>
    npcb = tcp_alloc(pcb->prio);
 800c580:	7d78      	ldrb	r0, [r7, #21]
 800c582:	f7ff f9fd 	bl	800b980 <tcp_alloc>
    if (npcb == NULL) {
 800c586:	4604      	mov	r4, r0
 800c588:	b948      	cbnz	r0, 800c59e <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f43f aeb9 	beq.w	800c304 <tcp_input+0x170>
 800c592:	4601      	mov	r1, r0
 800c594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c598:	6938      	ldr	r0, [r7, #16]
 800c59a:	4798      	blx	r3
 800c59c:	e6b2      	b.n	800c304 <tcp_input+0x170>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c59e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800c5a2:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c5a4:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c5a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c5aa:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800c5ac:	8afb      	ldrh	r3, [r7, #22]
 800c5ae:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800c5b0:	7813      	ldrb	r3, [r2, #0]
 800c5b2:	7852      	ldrb	r2, [r2, #1]
 800c5b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c5b8:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800c5be:	6a2b      	ldr	r3, [r5, #32]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c5c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c5c6:	f7ff fa6f 	bl	800baa8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c5ca:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800c5cc:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c5ce:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800c5d0:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800c5d2:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c5d4:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c5d6:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800c5d8:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800c5da:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800c5dc:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c5de:	7a7b      	ldrb	r3, [r7, #9]
 800c5e0:	f003 030c 	and.w	r3, r3, #12
 800c5e4:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c5e6:	7a3b      	ldrb	r3, [r7, #8]
 800c5e8:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800c5ea:	f8d9 3000 	ldr.w	r3, [r9]
 800c5ee:	f8c9 4000 	str.w	r4, [r9]
 800c5f2:	60e3      	str	r3, [r4, #12]
 800c5f4:	f001 fc80 	bl	800def8 <tcp_timer_needed>
 800c5f8:	4b44      	ldr	r3, [pc, #272]	; (800c70c <tcp_input+0x578>)
 800c5fa:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800c5fc:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800c5fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c600:	f7ff fabc 	bl	800bb7c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c604:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c606:	1d22      	adds	r2, r4, #4
 800c608:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800c60a:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c60c:	4610      	mov	r0, r2
 800c60e:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800c610:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c614:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c618:	f7fc fc8a 	bl	8008f30 <ip4_route>
 800c61c:	9a05      	ldr	r2, [sp, #20]
 800c61e:	4601      	mov	r1, r0
 800c620:	4628      	mov	r0, r5
 800c622:	f7ff fa5b 	bl	800badc <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c626:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c628:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c62a:	4620      	mov	r0, r4
 800c62c:	f000 ff9a 	bl	800d564 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800c630:	2800      	cmp	r0, #0
 800c632:	f43f af66 	beq.w	800c502 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800c636:	4651      	mov	r1, sl
 800c638:	4620      	mov	r0, r4
 800c63a:	f7ff f8cf 	bl	800b7dc <tcp_abandon>
      return;
 800c63e:	e661      	b.n	800c304 <tcp_input+0x170>
  if (flags & TCP_RST) {
 800c640:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800c642:	63ec      	str	r4, [r5, #60]	; 0x3c
  if (flags & TCP_RST) {
 800c644:	0751      	lsls	r1, r2, #29
 800c646:	d537      	bpl.n	800c6b8 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800c648:	7d21      	ldrb	r1, [r4, #20]
 800c64a:	2902      	cmp	r1, #2
 800c64c:	d11e      	bne.n	800c68c <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800c64e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c650:	69ab      	ldr	r3, [r5, #24]
 800c652:	429a      	cmp	r2, r3
 800c654:	d107      	bne.n	800c666 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800c656:	7cab      	ldrb	r3, [r5, #18]
 800c658:	f043 0308 	orr.w	r3, r3, #8
 800c65c:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c65e:	8b63      	ldrh	r3, [r4, #26]
 800c660:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800c664:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800c666:	7cab      	ldrb	r3, [r5, #18]
 800c668:	0718      	lsls	r0, r3, #28
 800c66a:	f140 81fe 	bpl.w	800ca6a <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c66e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c672:	b11b      	cbz	r3, 800c67c <tcp_input+0x4e8>
 800c674:	f06f 010d 	mvn.w	r1, #13
 800c678:	6920      	ldr	r0, [r4, #16]
 800c67a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c67c:	4621      	mov	r1, r4
 800c67e:	4824      	ldr	r0, [pc, #144]	; (800c710 <tcp_input+0x57c>)
 800c680:	f7fe fe9c 	bl	800b3bc <tcp_pcb_remove>
        tcp_free(pcb);
 800c684:	4620      	mov	r0, r4
 800c686:	f7fe faa7 	bl	800abd8 <tcp_free>
 800c68a:	e6bd      	b.n	800c408 <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800c68c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c68e:	6a2b      	ldr	r3, [r5, #32]
 800c690:	429a      	cmp	r2, r3
 800c692:	d007      	beq.n	800c6a4 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	d4e6      	bmi.n	800c666 <tcp_input+0x4d2>
 800c698:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c69a:	1a9b      	subs	r3, r3, r2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	dce2      	bgt.n	800c666 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c6a0:	8b63      	ldrh	r3, [r4, #26]
 800c6a2:	e010      	b.n	800c6c6 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c6a4:	2900      	cmp	r1, #0
 800c6a6:	d1d6      	bne.n	800c656 <tcp_input+0x4c2>
 800c6a8:	4b1a      	ldr	r3, [pc, #104]	; (800c714 <tcp_input+0x580>)
 800c6aa:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c6ae:	491a      	ldr	r1, [pc, #104]	; (800c718 <tcp_input+0x584>)
 800c6b0:	481a      	ldr	r0, [pc, #104]	; (800c71c <tcp_input+0x588>)
 800c6b2:	f001 ffd9 	bl	800e668 <iprintf>
 800c6b6:	e7ce      	b.n	800c656 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c6b8:	0792      	lsls	r2, r2, #30
        tcp_ack_now(pcb);
 800c6ba:	8b63      	ldrh	r3, [r4, #26]
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c6bc:	d506      	bpl.n	800c6cc <tcp_input+0x538>
 800c6be:	7d22      	ldrb	r2, [r4, #20]
 800c6c0:	3a02      	subs	r2, #2
 800c6c2:	2a01      	cmp	r2, #1
 800c6c4:	d902      	bls.n	800c6cc <tcp_input+0x538>
        tcp_ack_now(pcb);
 800c6c6:	f043 0302 	orr.w	r3, r3, #2
 800c6ca:	e7cb      	b.n	800c664 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c6cc:	06db      	lsls	r3, r3, #27
  tcp_parseopt(pcb);
 800c6ce:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800c6d0:	bf5e      	ittt	pl
 800c6d2:	4b0c      	ldrpl	r3, [pc, #48]	; (800c704 <tcp_input+0x570>)
 800c6d4:	681b      	ldrpl	r3, [r3, #0]
 800c6d6:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800c6de:	f7ff fa4d 	bl	800bb7c <tcp_parseopt>
  switch (pcb->state) {
 800c6e2:	7d23      	ldrb	r3, [r4, #20]
 800c6e4:	3b02      	subs	r3, #2
 800c6e6:	2b07      	cmp	r3, #7
 800c6e8:	d8bd      	bhi.n	800c666 <tcp_input+0x4d2>
 800c6ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c6ee:	0019      	.short	0x0019
 800c6f0:	011200a6 	.word	0x011200a6
 800c6f4:	015f0117 	.word	0x015f0117
 800c6f8:	018b0112 	.word	0x018b0112
 800c6fc:	01a9      	.short	0x01a9
 800c6fe:	bf00      	nop
 800c700:	2001022c 	.word	0x2001022c
 800c704:	20014018 	.word	0x20014018
 800c708:	20014010 	.word	0x20014010
 800c70c:	2001401d 	.word	0x2001401d
 800c710:	20014014 	.word	0x20014014
 800c714:	08015934 	.word	0x08015934
 800c718:	08015c34 	.word	0x08015c34
 800c71c:	080137b4 	.word	0x080137b4
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c720:	7f2b      	ldrb	r3, [r5, #28]
 800c722:	f003 0212 	and.w	r2, r3, #18
 800c726:	2a12      	cmp	r2, #18
 800c728:	d16a      	bne.n	800c800 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800c72a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c72c:	69a9      	ldr	r1, [r5, #24]
 800c72e:	3201      	adds	r2, #1
 800c730:	428a      	cmp	r2, r1
 800c732:	d165      	bne.n	800c800 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800c734:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800c736:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800c738:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800c73a:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c73c:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c73e:	8e66      	ldrh	r6, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800c740:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c742:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800c744:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c746:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c748:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800c74a:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c74e:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c752:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800c754:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c756:	4610      	mov	r0, r2
 800c758:	9205      	str	r2, [sp, #20]
 800c75a:	f7fc fbe9 	bl	8008f30 <ip4_route>
 800c75e:	9a05      	ldr	r2, [sp, #20]
 800c760:	4601      	mov	r1, r0
 800c762:	4630      	mov	r0, r6
 800c764:	f7ff f9ba 	bl	800badc <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c768:	f241 131c 	movw	r3, #4380	; 0x111c
 800c76c:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c76e:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c770:	0081      	lsls	r1, r0, #2
 800c772:	429a      	cmp	r2, r3
 800c774:	4616      	mov	r6, r2
 800c776:	bf38      	it	cc
 800c778:	461e      	movcc	r6, r3
 800c77a:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800c77e:	d933      	bls.n	800c7e8 <tcp_input+0x654>
 800c780:	b28b      	uxth	r3, r1
 800c782:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c786:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c78a:	b933      	cbnz	r3, 800c79a <tcp_input+0x606>
 800c78c:	4b94      	ldr	r3, [pc, #592]	; (800c9e0 <tcp_input+0x84c>)
 800c78e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c792:	4994      	ldr	r1, [pc, #592]	; (800c9e4 <tcp_input+0x850>)
 800c794:	4894      	ldr	r0, [pc, #592]	; (800c9e8 <tcp_input+0x854>)
 800c796:	f001 ff67 	bl	800e668 <iprintf>
        --pcb->snd_queuelen;
 800c79a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800c79e:	6f26      	ldr	r6, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800c7a6:	bb1e      	cbnz	r6, 800c7f0 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800c7a8:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c7aa:	b936      	cbnz	r6, 800c7ba <tcp_input+0x626>
 800c7ac:	4b8c      	ldr	r3, [pc, #560]	; (800c9e0 <tcp_input+0x84c>)
 800c7ae:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c7b2:	498e      	ldr	r1, [pc, #568]	; (800c9ec <tcp_input+0x858>)
 800c7b4:	488c      	ldr	r0, [pc, #560]	; (800c9e8 <tcp_input+0x854>)
 800c7b6:	f001 ff57 	bl	800e668 <iprintf>
          pcb->unsent = rseg->next;
 800c7ba:	6833      	ldr	r3, [r6, #0]
 800c7bc:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7fe fb50 	bl	800ae64 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800c7c4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c7c6:	b9b3      	cbnz	r3, 800c7f6 <tcp_input+0x662>
          pcb->rtime = -1;
 800c7c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7cc:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c7ce:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f43f af64 	beq.w	800c6a0 <tcp_input+0x50c>
 800c7d8:	2200      	movs	r2, #0
 800c7da:	4621      	mov	r1, r4
 800c7dc:	6920      	ldr	r0, [r4, #16]
 800c7de:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800c7e0:	300d      	adds	r0, #13
 800c7e2:	f47f af5d 	bne.w	800c6a0 <tcp_input+0x50c>
 800c7e6:	e60f      	b.n	800c408 <tcp_input+0x274>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	bf88      	it	hi
 800c7ec:	b293      	uxthhi	r3, r2
 800c7ee:	e7c8      	b.n	800c782 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800c7f0:	6833      	ldr	r3, [r6, #0]
 800c7f2:	6723      	str	r3, [r4, #112]	; 0x70
 800c7f4:	e7e3      	b.n	800c7be <tcp_input+0x62a>
          pcb->rtime = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800c7fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7fe:	e7e6      	b.n	800c7ce <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800c800:	06df      	lsls	r7, r3, #27
 800c802:	f57f af30 	bpl.w	800c666 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c806:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c808:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800c80a:	8818      	ldrh	r0, [r3, #0]
 800c80c:	6a2a      	ldr	r2, [r5, #32]
 800c80e:	9002      	str	r0, [sp, #8]
 800c810:	4620      	mov	r0, r4
 800c812:	885b      	ldrh	r3, [r3, #2]
 800c814:	440a      	add	r2, r1
 800c816:	9301      	str	r3, [sp, #4]
 800c818:	4b75      	ldr	r3, [pc, #468]	; (800c9f0 <tcp_input+0x85c>)
 800c81a:	9300      	str	r3, [sp, #0]
 800c81c:	3304      	adds	r3, #4
 800c81e:	69a9      	ldr	r1, [r5, #24]
 800c820:	f001 f81c 	bl	800d85c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c824:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c828:	2b05      	cmp	r3, #5
 800c82a:	f63f af1c 	bhi.w	800c666 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800c82e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800c830:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800c832:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c834:	f001 fa50 	bl	800dcd8 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c838:	e715      	b.n	800c666 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800c83a:	7f2b      	ldrb	r3, [r5, #28]
 800c83c:	06de      	lsls	r6, r3, #27
 800c83e:	d55b      	bpl.n	800c8f8 <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c840:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c842:	69a9      	ldr	r1, [r5, #24]
 800c844:	43db      	mvns	r3, r3
 800c846:	42cb      	cmn	r3, r1
 800c848:	d447      	bmi.n	800c8da <tcp_input+0x746>
 800c84a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c84c:	1acb      	subs	r3, r1, r3
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dc43      	bgt.n	800c8da <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800c852:	2304      	movs	r3, #4
 800c854:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800c856:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c858:	b91b      	cbnz	r3, 800c862 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800c85a:	4620      	mov	r0, r4
 800c85c:	f7ff f83c 	bl	800b8d8 <tcp_abort>
            goto aborted;
 800c860:	e5d2      	b.n	800c408 <tcp_input+0x274>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	b933      	cbnz	r3, 800c874 <tcp_input+0x6e0>
 800c866:	4b5e      	ldr	r3, [pc, #376]	; (800c9e0 <tcp_input+0x84c>)
 800c868:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c86c:	4961      	ldr	r1, [pc, #388]	; (800c9f4 <tcp_input+0x860>)
 800c86e:	485e      	ldr	r0, [pc, #376]	; (800c9e8 <tcp_input+0x854>)
 800c870:	f001 fefa 	bl	800e668 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c874:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0ee      	beq.n	800c85a <tcp_input+0x6c6>
 800c87c:	2200      	movs	r2, #0
 800c87e:	4621      	mov	r1, r4
 800c880:	6920      	ldr	r0, [r4, #16]
 800c882:	4798      	blx	r3
          if (err != ERR_OK) {
 800c884:	b118      	cbz	r0, 800c88e <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800c886:	300d      	adds	r0, #13
 800c888:	f43f adbe 	beq.w	800c408 <tcp_input+0x274>
 800c88c:	e7e5      	b.n	800c85a <tcp_input+0x6c6>
          tcp_receive(pcb);
 800c88e:	4620      	mov	r0, r4
 800c890:	f7ff fa4a 	bl	800bd28 <tcp_receive>
          if (recv_acked != 0) {
 800c894:	4a58      	ldr	r2, [pc, #352]	; (800c9f8 <tcp_input+0x864>)
 800c896:	8a93      	ldrh	r3, [r2, #20]
 800c898:	b10b      	cbz	r3, 800c89e <tcp_input+0x70a>
            recv_acked--;
 800c89a:	3b01      	subs	r3, #1
 800c89c:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c89e:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800c8a0:	f241 131c 	movw	r3, #4380	; 0x111c
 800c8a4:	0041      	lsls	r1, r0, #1
 800c8a6:	0086      	lsls	r6, r0, #2
 800c8a8:	4299      	cmp	r1, r3
 800c8aa:	460f      	mov	r7, r1
 800c8ac:	bf38      	it	cc
 800c8ae:	461f      	movcc	r7, r3
 800c8b0:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800c8b4:	d90d      	bls.n	800c8d2 <tcp_input+0x73e>
 800c8b6:	b2b3      	uxth	r3, r6
 800c8b8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800c8bc:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c8be:	0699      	lsls	r1, r3, #26
 800c8c0:	f57f aed1 	bpl.w	800c666 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c8c4:	8b63      	ldrh	r3, [r4, #26]
 800c8c6:	f043 0302 	orr.w	r3, r3, #2
 800c8ca:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800c8cc:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800c8ce:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800c8d0:	e6c9      	b.n	800c666 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c8d2:	4299      	cmp	r1, r3
 800c8d4:	bf88      	it	hi
 800c8d6:	b28b      	uxthhi	r3, r1
 800c8d8:	e7ee      	b.n	800c8b8 <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8da:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8dc:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c8de:	881e      	ldrh	r6, [r3, #0]
 800c8e0:	6a2a      	ldr	r2, [r5, #32]
 800c8e2:	9602      	str	r6, [sp, #8]
 800c8e4:	885b      	ldrh	r3, [r3, #2]
 800c8e6:	4402      	add	r2, r0
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	4b40      	ldr	r3, [pc, #256]	; (800c9f0 <tcp_input+0x85c>)
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	f000 ffb3 	bl	800d85c <tcp_rst>
    if (err != ERR_ABRT) {
 800c8f6:	e6b6      	b.n	800c666 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c8f8:	0798      	lsls	r0, r3, #30
 800c8fa:	f57f aeb4 	bpl.w	800c666 <tcp_input+0x4d2>
 800c8fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c900:	6a2a      	ldr	r2, [r5, #32]
 800c902:	3b01      	subs	r3, #1
 800c904:	4293      	cmp	r3, r2
 800c906:	f47f aeae 	bne.w	800c666 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 ff32 	bl	800d774 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c910:	e6a9      	b.n	800c666 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800c912:	4620      	mov	r0, r4
 800c914:	f7ff fa08 	bl	800bd28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c918:	7cab      	ldrb	r3, [r5, #18]
 800c91a:	e7d0      	b.n	800c8be <tcp_input+0x72a>
      tcp_receive(pcb);
 800c91c:	4620      	mov	r0, r4
 800c91e:	f7ff fa03 	bl	800bd28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c922:	7cab      	ldrb	r3, [r5, #18]
 800c924:	f013 0f20 	tst.w	r3, #32
 800c928:	7f2b      	ldrb	r3, [r5, #28]
 800c92a:	d031      	beq.n	800c990 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c92c:	f013 0f10 	tst.w	r3, #16
 800c930:	8b63      	ldrh	r3, [r4, #26]
 800c932:	d028      	beq.n	800c986 <tcp_input+0x7f2>
 800c934:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c936:	69aa      	ldr	r2, [r5, #24]
 800c938:	4291      	cmp	r1, r2
 800c93a:	d124      	bne.n	800c986 <tcp_input+0x7f2>
 800c93c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800c93e:	bb12      	cbnz	r2, 800c986 <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800c940:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800c944:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800c946:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800c948:	f7fe fb16 	bl	800af78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c94c:	f8d9 3000 	ldr.w	r3, [r9]
 800c950:	429c      	cmp	r4, r3
 800c952:	d10a      	bne.n	800c96a <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800c954:	68e3      	ldr	r3, [r4, #12]
 800c956:	f8c9 3000 	str.w	r3, [r9]
 800c95a:	e008      	b.n	800c96e <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800c95c:	68da      	ldr	r2, [r3, #12]
 800c95e:	4294      	cmp	r4, r2
 800c960:	d102      	bne.n	800c968 <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800c962:	68e2      	ldr	r2, [r4, #12]
 800c964:	60da      	str	r2, [r3, #12]
 800c966:	e002      	b.n	800c96e <tcp_input+0x7da>
 800c968:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d1f6      	bne.n	800c95c <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800c96e:	4b23      	ldr	r3, [pc, #140]	; (800c9fc <tcp_input+0x868>)
 800c970:	2201      	movs	r2, #1
 800c972:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c974:	230a      	movs	r3, #10
 800c976:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c978:	4b21      	ldr	r3, [pc, #132]	; (800ca00 <tcp_input+0x86c>)
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	601c      	str	r4, [r3, #0]
 800c97e:	60e2      	str	r2, [r4, #12]
 800c980:	f001 faba 	bl	800def8 <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c984:	e66f      	b.n	800c666 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800c986:	f043 0302 	orr.w	r3, r3, #2
 800c98a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800c98c:	2308      	movs	r3, #8
 800c98e:	e79e      	b.n	800c8ce <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c990:	06da      	lsls	r2, r3, #27
 800c992:	f57f ae68 	bpl.w	800c666 <tcp_input+0x4d2>
 800c996:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800c998:	69ab      	ldr	r3, [r5, #24]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	f47f ae63 	bne.w	800c666 <tcp_input+0x4d2>
 800c9a0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f47f ae5f 	bne.w	800c666 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800c9a8:	2306      	movs	r3, #6
 800c9aa:	e790      	b.n	800c8ce <tcp_input+0x73a>
      tcp_receive(pcb);
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	f7ff f9bb 	bl	800bd28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c9b2:	7cab      	ldrb	r3, [r5, #18]
 800c9b4:	069b      	lsls	r3, r3, #26
 800c9b6:	f57f ae56 	bpl.w	800c666 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800c9ba:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c9bc:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c9be:	f043 0302 	orr.w	r3, r3, #2
 800c9c2:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c9c4:	f7fe fad8 	bl	800af78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c9c8:	f8d9 3000 	ldr.w	r3, [r9]
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	d0c1      	beq.n	800c954 <tcp_input+0x7c0>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d0cc      	beq.n	800c96e <tcp_input+0x7da>
 800c9d4:	68da      	ldr	r2, [r3, #12]
 800c9d6:	4294      	cmp	r4, r2
 800c9d8:	d0c3      	beq.n	800c962 <tcp_input+0x7ce>
 800c9da:	4613      	mov	r3, r2
 800c9dc:	e7f8      	b.n	800c9d0 <tcp_input+0x83c>
 800c9de:	bf00      	nop
 800c9e0:	08015934 	.word	0x08015934
 800c9e4:	08015c54 	.word	0x08015c54
 800c9e8:	080137b4 	.word	0x080137b4
 800c9ec:	08015c6a 	.word	0x08015c6a
 800c9f0:	2001022c 	.word	0x2001022c
 800c9f4:	08015c7d 	.word	0x08015c7d
 800c9f8:	20014028 	.word	0x20014028
 800c9fc:	2001401d 	.word	0x2001401d
 800ca00:	20014020 	.word	0x20014020
      tcp_receive(pcb);
 800ca04:	4620      	mov	r0, r4
 800ca06:	f7ff f98f 	bl	800bd28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca0a:	7f2b      	ldrb	r3, [r5, #28]
 800ca0c:	06df      	lsls	r7, r3, #27
 800ca0e:	f57f ae2a 	bpl.w	800c666 <tcp_input+0x4d2>
 800ca12:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ca14:	69ab      	ldr	r3, [r5, #24]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	f47f ae25 	bne.w	800c666 <tcp_input+0x4d2>
 800ca1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	f47f ae21 	bne.w	800c666 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800ca24:	4620      	mov	r0, r4
 800ca26:	f7fe faa7 	bl	800af78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ca2a:	f8d9 3000 	ldr.w	r3, [r9]
 800ca2e:	429c      	cmp	r4, r3
 800ca30:	d090      	beq.n	800c954 <tcp_input+0x7c0>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d09b      	beq.n	800c96e <tcp_input+0x7da>
 800ca36:	68da      	ldr	r2, [r3, #12]
 800ca38:	4294      	cmp	r4, r2
 800ca3a:	d092      	beq.n	800c962 <tcp_input+0x7ce>
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	e7f8      	b.n	800ca32 <tcp_input+0x89e>
      tcp_receive(pcb);
 800ca40:	4620      	mov	r0, r4
 800ca42:	f7ff f971 	bl	800bd28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ca46:	7f2b      	ldrb	r3, [r5, #28]
 800ca48:	06de      	lsls	r6, r3, #27
 800ca4a:	f57f ae0c 	bpl.w	800c666 <tcp_input+0x4d2>
 800ca4e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ca50:	69ab      	ldr	r3, [r5, #24]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	f47f ae07 	bne.w	800c666 <tcp_input+0x4d2>
 800ca58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f47f ae03 	bne.w	800c666 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800ca60:	7cab      	ldrb	r3, [r5, #18]
 800ca62:	f043 0310 	orr.w	r3, r3, #16
 800ca66:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800ca68:	e5fd      	b.n	800c666 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800ca6a:	8aaa      	ldrh	r2, [r5, #20]
 800ca6c:	b11a      	cbz	r2, 800ca76 <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ca6e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ca70:	b9db      	cbnz	r3, 800caaa <tcp_input+0x916>
          recv_acked = 0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800ca76:	4620      	mov	r0, r4
 800ca78:	f7ff f8ca 	bl	800bc10 <tcp_input_delayed_close>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f47f acc3 	bne.w	800c408 <tcp_input+0x274>
        if (recv_data != NULL) {
 800ca82:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ca84:	b323      	cbz	r3, 800cad0 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ca86:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ca88:	b133      	cbz	r3, 800ca98 <tcp_input+0x904>
 800ca8a:	4b37      	ldr	r3, [pc, #220]	; (800cb68 <tcp_input+0x9d4>)
 800ca8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ca90:	4936      	ldr	r1, [pc, #216]	; (800cb6c <tcp_input+0x9d8>)
 800ca92:	4837      	ldr	r0, [pc, #220]	; (800cb70 <tcp_input+0x9dc>)
 800ca94:	f001 fde8 	bl	800e668 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ca98:	8b63      	ldrh	r3, [r4, #26]
            pbuf_free(recv_data);
 800ca9a:	6baa      	ldr	r2, [r5, #56]	; 0x38
          if (pcb->flags & TF_RXCLOSED) {
 800ca9c:	f013 0310 	ands.w	r3, r3, #16
 800caa0:	d009      	beq.n	800cab6 <tcp_input+0x922>
            pbuf_free(recv_data);
 800caa2:	4610      	mov	r0, r2
 800caa4:	f7fd fdb4 	bl	800a610 <pbuf_free>
 800caa8:	e6d7      	b.n	800c85a <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800caaa:	4621      	mov	r1, r4
 800caac:	6920      	ldr	r0, [r4, #16]
 800caae:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800cab0:	300d      	adds	r0, #13
 800cab2:	d1de      	bne.n	800ca72 <tcp_input+0x8de>
 800cab4:	e4a8      	b.n	800c408 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cab6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800caba:	b1f6      	cbz	r6, 800cafa <tcp_input+0x966>
 800cabc:	4621      	mov	r1, r4
 800cabe:	6920      	ldr	r0, [r4, #16]
 800cac0:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 800cac2:	f110 0f0d 	cmn.w	r0, #13
 800cac6:	f43f ac9f 	beq.w	800c408 <tcp_input+0x274>
          if (err != ERR_OK) {
 800caca:	b108      	cbz	r0, 800cad0 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800cacc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800cace:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800cad0:	7cab      	ldrb	r3, [r5, #18]
 800cad2:	0699      	lsls	r1, r3, #26
 800cad4:	d505      	bpl.n	800cae2 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800cad6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cad8:	b1ab      	cbz	r3, 800cb06 <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800cada:	7b5a      	ldrb	r2, [r3, #13]
 800cadc:	f042 0220 	orr.w	r2, r2, #32
 800cae0:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800cae2:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800cae4:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800cae6:	63eb      	str	r3, [r5, #60]	; 0x3c
        if (tcp_input_delayed_close(pcb)) {
 800cae8:	f7ff f892 	bl	800bc10 <tcp_input_delayed_close>
 800caec:	2800      	cmp	r0, #0
 800caee:	f47f ac8b 	bne.w	800c408 <tcp_input+0x274>
        tcp_output(pcb);
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 ff2a 	bl	800d94c <tcp_output>
 800caf8:	e486      	b.n	800c408 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800cafa:	4633      	mov	r3, r6
 800cafc:	4621      	mov	r1, r4
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7fe fd84 	bl	800b60c <tcp_recv_null>
 800cb04:	e7dd      	b.n	800cac2 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800cb08:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800cb0c:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cb10:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800cb12:	bf1c      	itt	ne
 800cb14:	3301      	addne	r3, #1
 800cb16:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800cb18:	2e00      	cmp	r6, #0
 800cb1a:	d0e2      	beq.n	800cae2 <tcp_input+0x94e>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4621      	mov	r1, r4
 800cb20:	6920      	ldr	r0, [r4, #16]
 800cb22:	461a      	mov	r2, r3
 800cb24:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 800cb26:	300d      	adds	r0, #13
 800cb28:	d1db      	bne.n	800cae2 <tcp_input+0x94e>
 800cb2a:	e46d      	b.n	800c408 <tcp_input+0x274>
      if (prev != NULL) {
 800cb2c:	b11c      	cbz	r4, 800cb36 <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800cb30:	6007      	str	r7, [r0, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800cb32:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800cb34:	60fa      	str	r2, [r7, #12]
  if (flags & TCP_RST) {
 800cb36:	7f2b      	ldrb	r3, [r5, #28]
 800cb38:	075c      	lsls	r4, r3, #29
 800cb3a:	f53f abe3 	bmi.w	800c304 <tcp_input+0x170>
  if (flags & TCP_ACK) {
 800cb3e:	f013 0a10 	ands.w	sl, r3, #16
 800cb42:	f43f ad1a 	beq.w	800c57a <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cb46:	880b      	ldrh	r3, [r1, #0]
 800cb48:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800cb4a:	6a2a      	ldr	r2, [r5, #32]
 800cb4c:	e9cd c301 	strd	ip, r3, [sp, #4]
 800cb50:	4b08      	ldr	r3, [pc, #32]	; (800cb74 <tcp_input+0x9e0>)
 800cb52:	4402      	add	r2, r0
 800cb54:	9300      	str	r3, [sp, #0]
 800cb56:	3304      	adds	r3, #4
 800cb58:	69a9      	ldr	r1, [r5, #24]
 800cb5a:	4638      	mov	r0, r7
 800cb5c:	e4c2      	b.n	800c4e4 <tcp_input+0x350>
      if (prev != NULL) {
 800cb5e:	2f00      	cmp	r7, #0
 800cb60:	f47f ac1a 	bne.w	800c398 <tcp_input+0x204>
 800cb64:	e429      	b.n	800c3ba <tcp_input+0x226>
 800cb66:	bf00      	nop
 800cb68:	08015934 	.word	0x08015934
 800cb6c:	08015c9b 	.word	0x08015c9b
 800cb70:	080137b4 	.word	0x080137b4
 800cb74:	2001022c 	.word	0x2001022c

0800cb78 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800cb78:	4a02      	ldr	r2, [pc, #8]	; (800cb84 <tcp_trigger_input_pcb_close+0xc>)
 800cb7a:	7c93      	ldrb	r3, [r2, #18]
 800cb7c:	f043 0310 	orr.w	r3, r3, #16
 800cb80:	7493      	strb	r3, [r2, #18]
}
 800cb82:	4770      	bx	lr
 800cb84:	20014028 	.word	0x20014028

0800cb88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cb88:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cb8a:	4604      	mov	r4, r0
 800cb8c:	b930      	cbnz	r0, 800cb9c <tcp_output_segment_busy+0x14>
 800cb8e:	4b06      	ldr	r3, [pc, #24]	; (800cba8 <tcp_output_segment_busy+0x20>)
 800cb90:	f240 529a 	movw	r2, #1434	; 0x59a
 800cb94:	4905      	ldr	r1, [pc, #20]	; (800cbac <tcp_output_segment_busy+0x24>)
 800cb96:	4806      	ldr	r0, [pc, #24]	; (800cbb0 <tcp_output_segment_busy+0x28>)
 800cb98:	f001 fd66 	bl	800e668 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cb9c:	6863      	ldr	r3, [r4, #4]
 800cb9e:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800cba0:	3801      	subs	r0, #1
 800cba2:	bf18      	it	ne
 800cba4:	2001      	movne	r0, #1
 800cba6:	bd10      	pop	{r4, pc}
 800cba8:	08015cb5 	.word	0x08015cb5
 800cbac:	08015d2b 	.word	0x08015d2b
 800cbb0:	080137b4 	.word	0x080137b4

0800cbb4 <tcp_pbuf_prealloc>:
{
 800cbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb8:	9d08      	ldr	r5, [sp, #32]
 800cbba:	4680      	mov	r8, r0
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	4617      	mov	r7, r2
 800cbc0:	461e      	mov	r6, r3
 800cbc2:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800cbc6:	b92d      	cbnz	r5, 800cbd4 <tcp_pbuf_prealloc+0x20>
 800cbc8:	4b1c      	ldr	r3, [pc, #112]	; (800cc3c <tcp_pbuf_prealloc+0x88>)
 800cbca:	22e9      	movs	r2, #233	; 0xe9
 800cbcc:	491c      	ldr	r1, [pc, #112]	; (800cc40 <tcp_pbuf_prealloc+0x8c>)
 800cbce:	481d      	ldr	r0, [pc, #116]	; (800cc44 <tcp_pbuf_prealloc+0x90>)
 800cbd0:	f001 fd4a 	bl	800e668 <iprintf>
  if (length < max_length) {
 800cbd4:	42bc      	cmp	r4, r7
 800cbd6:	d22e      	bcs.n	800cc36 <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800cbd8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800cbdc:	079a      	lsls	r2, r3, #30
 800cbde:	d409      	bmi.n	800cbf4 <tcp_pbuf_prealloc+0x40>
 800cbe0:	8b6b      	ldrh	r3, [r5, #26]
 800cbe2:	065b      	lsls	r3, r3, #25
 800cbe4:	d427      	bmi.n	800cc36 <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800cbe6:	f1b9 0f00 	cmp.w	r9, #0
 800cbea:	d003      	beq.n	800cbf4 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800cbec:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800cbee:	b90b      	cbnz	r3, 800cbf4 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800cbf0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800cbf2:	b303      	cbz	r3, 800cc36 <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800cbf4:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800cbf8:	f025 0103 	bic.w	r1, r5, #3
 800cbfc:	42b9      	cmp	r1, r7
 800cbfe:	460a      	mov	r2, r1
 800cc00:	bf28      	it	cs
 800cc02:	463a      	movcs	r2, r7
 800cc04:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800cc06:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7fd fd68 	bl	800a6e0 <pbuf_alloc>
  if (p == NULL) {
 800cc10:	4605      	mov	r5, r0
 800cc12:	b168      	cbz	r0, 800cc30 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800cc14:	6803      	ldr	r3, [r0, #0]
 800cc16:	b133      	cbz	r3, 800cc26 <tcp_pbuf_prealloc+0x72>
 800cc18:	4b08      	ldr	r3, [pc, #32]	; (800cc3c <tcp_pbuf_prealloc+0x88>)
 800cc1a:	f240 120b 	movw	r2, #267	; 0x10b
 800cc1e:	490a      	ldr	r1, [pc, #40]	; (800cc48 <tcp_pbuf_prealloc+0x94>)
 800cc20:	4808      	ldr	r0, [pc, #32]	; (800cc44 <tcp_pbuf_prealloc+0x90>)
 800cc22:	f001 fd21 	bl	800e668 <iprintf>
  *oversize = p->len - length;
 800cc26:	896b      	ldrh	r3, [r5, #10]
 800cc28:	1b1b      	subs	r3, r3, r4
 800cc2a:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800cc2c:	812c      	strh	r4, [r5, #8]
 800cc2e:	816c      	strh	r4, [r5, #10]
}
 800cc30:	4628      	mov	r0, r5
 800cc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc36:	4621      	mov	r1, r4
 800cc38:	e7e5      	b.n	800cc06 <tcp_pbuf_prealloc+0x52>
 800cc3a:	bf00      	nop
 800cc3c:	08015cb5 	.word	0x08015cb5
 800cc40:	08015d50 	.word	0x08015d50
 800cc44:	080137b4 	.word	0x080137b4
 800cc48:	08015d6f 	.word	0x08015d6f

0800cc4c <tcp_create_segment>:
{
 800cc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc50:	460e      	mov	r6, r1
 800cc52:	4690      	mov	r8, r2
 800cc54:	4699      	mov	r9, r3
 800cc56:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cc5a:	4607      	mov	r7, r0
 800cc5c:	b928      	cbnz	r0, 800cc6a <tcp_create_segment+0x1e>
 800cc5e:	4b2f      	ldr	r3, [pc, #188]	; (800cd1c <tcp_create_segment+0xd0>)
 800cc60:	22a3      	movs	r2, #163	; 0xa3
 800cc62:	492f      	ldr	r1, [pc, #188]	; (800cd20 <tcp_create_segment+0xd4>)
 800cc64:	482f      	ldr	r0, [pc, #188]	; (800cd24 <tcp_create_segment+0xd8>)
 800cc66:	f001 fcff 	bl	800e668 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cc6a:	b92e      	cbnz	r6, 800cc78 <tcp_create_segment+0x2c>
 800cc6c:	4b2b      	ldr	r3, [pc, #172]	; (800cd1c <tcp_create_segment+0xd0>)
 800cc6e:	22a4      	movs	r2, #164	; 0xa4
 800cc70:	492d      	ldr	r1, [pc, #180]	; (800cd28 <tcp_create_segment+0xdc>)
 800cc72:	482c      	ldr	r0, [pc, #176]	; (800cd24 <tcp_create_segment+0xd8>)
 800cc74:	f001 fcf8 	bl	800e668 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc78:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc7c:	2003      	movs	r0, #3
 800cc7e:	f7fd fa3b 	bl	800a0f8 <memp_malloc>
 800cc82:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cc84:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cc88:	b928      	cbnz	r0, 800cc96 <tcp_create_segment+0x4a>
    pbuf_free(p);
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7fd fcc0 	bl	800a610 <pbuf_free>
}
 800cc90:	4620      	mov	r0, r4
 800cc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800cc96:	2300      	movs	r3, #0
  seg->flags = optflags;
 800cc98:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cc9c:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800cca0:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cca4:	8933      	ldrh	r3, [r6, #8]
 800cca6:	42ab      	cmp	r3, r5
 800cca8:	d205      	bcs.n	800ccb6 <tcp_create_segment+0x6a>
 800ccaa:	4b1c      	ldr	r3, [pc, #112]	; (800cd1c <tcp_create_segment+0xd0>)
 800ccac:	22b0      	movs	r2, #176	; 0xb0
 800ccae:	491f      	ldr	r1, [pc, #124]	; (800cd2c <tcp_create_segment+0xe0>)
 800ccb0:	481c      	ldr	r0, [pc, #112]	; (800cd24 <tcp_create_segment+0xd8>)
 800ccb2:	f001 fcd9 	bl	800e668 <iprintf>
  seg->len = p->tot_len - optlen;
 800ccb6:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ccb8:	4630      	mov	r0, r6
 800ccba:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800ccbc:	eba3 030a 	sub.w	r3, r3, sl
 800ccc0:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ccc2:	f7fd fc6d 	bl	800a5a0 <pbuf_add_header>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	b120      	cbz	r0, 800ccd4 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800ccca:	4620      	mov	r0, r4
    return NULL;
 800cccc:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800ccce:	f7fe f8c9 	bl	800ae64 <tcp_seg_free>
    return NULL;
 800ccd2:	e7dd      	b.n	800cc90 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ccd4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ccd6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ccd8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ccda:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ccde:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cce2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cce6:	f7fc fed7 	bl	8009a98 <lwip_htons>
 800ccea:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ccee:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800ccf2:	8b38      	ldrh	r0, [r7, #24]
 800ccf4:	f7fc fed0 	bl	8009a98 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ccf8:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ccfa:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ccfe:	4648      	mov	r0, r9
 800cd00:	f7fc fecd 	bl	8009a9e <lwip_htonl>
 800cd04:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd06:	ea45 0008 	orr.w	r0, r5, r8
 800cd0a:	68e7      	ldr	r7, [r4, #12]
 800cd0c:	f7fc fec4 	bl	8009a98 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800cd10:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cd12:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800cd14:	749e      	strb	r6, [r3, #18]
 800cd16:	74de      	strb	r6, [r3, #19]
  return seg;
 800cd18:	e7ba      	b.n	800cc90 <tcp_create_segment+0x44>
 800cd1a:	bf00      	nop
 800cd1c:	08015cb5 	.word	0x08015cb5
 800cd20:	08015d83 	.word	0x08015d83
 800cd24:	080137b4 	.word	0x080137b4
 800cd28:	08015da3 	.word	0x08015da3
 800cd2c:	08015dc4 	.word	0x08015dc4

0800cd30 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cd30:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800cd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cd36:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800cd38:	4606      	mov	r6, r0
 800cd3a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cd3c:	2022      	movs	r0, #34	; 0x22
 800cd3e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800cd42:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cd44:	f7fd fccc 	bl	800a6e0 <pbuf_alloc>
  if (p != NULL) {
 800cd48:	4605      	mov	r5, r0
 800cd4a:	b348      	cbz	r0, 800cda0 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cd4c:	8943      	ldrh	r3, [r0, #10]
 800cd4e:	2b13      	cmp	r3, #19
 800cd50:	d806      	bhi.n	800cd60 <tcp_output_alloc_header_common.constprop.0+0x30>
 800cd52:	4b15      	ldr	r3, [pc, #84]	; (800cda8 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800cd54:	f240 7223 	movw	r2, #1827	; 0x723
 800cd58:	4914      	ldr	r1, [pc, #80]	; (800cdac <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800cd5a:	4815      	ldr	r0, [pc, #84]	; (800cdb0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800cd5c:	f001 fc84 	bl	800e668 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cd60:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800cd62:	4640      	mov	r0, r8
 800cd64:	f7fc fe98 	bl	8009a98 <lwip_htons>
 800cd68:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cd6a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800cd6e:	f7fc fe93 	bl	8009a98 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800cd72:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800cd74:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7fc fe91 	bl	8009a9e <lwip_htonl>
 800cd7c:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800cd7e:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800cd82:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800cd86:	f7fc fe87 	bl	8009a98 <lwip_htons>
 800cd8a:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800cd8c:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800cd90:	f7fc fe82 	bl	8009a98 <lwip_htons>
    tcphdr->chksum = 0;
 800cd94:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800cd96:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800cd98:	7423      	strb	r3, [r4, #16]
 800cd9a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800cd9c:	74a3      	strb	r3, [r4, #18]
 800cd9e:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800cda0:	4628      	mov	r0, r5
 800cda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda6:	bf00      	nop
 800cda8:	08015cb5 	.word	0x08015cb5
 800cdac:	08015dd9 	.word	0x08015dd9
 800cdb0:	080137b4 	.word	0x080137b4

0800cdb4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800cdb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cdb6:	460d      	mov	r5, r1
 800cdb8:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800cdba:	4604      	mov	r4, r0
 800cdbc:	b930      	cbnz	r0, 800cdcc <tcp_output_alloc_header.constprop.0+0x18>
 800cdbe:	4b0d      	ldr	r3, [pc, #52]	; (800cdf4 <tcp_output_alloc_header.constprop.0+0x40>)
 800cdc0:	f240 7242 	movw	r2, #1858	; 0x742
 800cdc4:	490c      	ldr	r1, [pc, #48]	; (800cdf8 <tcp_output_alloc_header.constprop.0+0x44>)
 800cdc6:	480d      	ldr	r0, [pc, #52]	; (800cdfc <tcp_output_alloc_header.constprop.0+0x48>)
 800cdc8:	f001 fc4e 	bl	800e668 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cdcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cdce:	4632      	mov	r2, r6
 800cdd0:	4629      	mov	r1, r5
 800cdd2:	9302      	str	r3, [sp, #8]
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	8b23      	ldrh	r3, [r4, #24]
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	8ae3      	ldrh	r3, [r4, #22]
 800cdde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cde0:	f7ff ffa6 	bl	800cd30 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cde4:	b118      	cbz	r0, 800cdee <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cde6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800cde8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdea:	4413      	add	r3, r2
 800cdec:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800cdee:	b004      	add	sp, #16
 800cdf0:	bd70      	pop	{r4, r5, r6, pc}
 800cdf2:	bf00      	nop
 800cdf4:	08015cb5 	.word	0x08015cb5
 800cdf8:	08015e07 	.word	0x08015e07
 800cdfc:	080137b4 	.word	0x080137b4

0800ce00 <tcp_output_fill_options.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ce00:	b930      	cbnz	r0, 800ce10 <tcp_output_fill_options.constprop.0+0x10>
 800ce02:	4b04      	ldr	r3, [pc, #16]	; (800ce14 <tcp_output_fill_options.constprop.0+0x14>)
 800ce04:	f240 7256 	movw	r2, #1878	; 0x756
 800ce08:	4903      	ldr	r1, [pc, #12]	; (800ce18 <tcp_output_fill_options.constprop.0+0x18>)
 800ce0a:	4804      	ldr	r0, [pc, #16]	; (800ce1c <tcp_output_fill_options.constprop.0+0x1c>)
 800ce0c:	f001 bc2c 	b.w	800e668 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ce10:	4770      	bx	lr
 800ce12:	bf00      	nop
 800ce14:	08015cb5 	.word	0x08015cb5
 800ce18:	08015e2c 	.word	0x08015e2c
 800ce1c:	080137b4 	.word	0x080137b4

0800ce20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	4604      	mov	r4, r0
 800ce24:	b085      	sub	sp, #20
 800ce26:	4617      	mov	r7, r2
 800ce28:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	b931      	cbnz	r1, 800ce3c <tcp_output_control_segment+0x1c>
 800ce2e:	4b15      	ldr	r3, [pc, #84]	; (800ce84 <tcp_output_control_segment+0x64>)
 800ce30:	f240 7287 	movw	r2, #1927	; 0x787
 800ce34:	4914      	ldr	r1, [pc, #80]	; (800ce88 <tcp_output_control_segment+0x68>)
 800ce36:	4815      	ldr	r0, [pc, #84]	; (800ce8c <tcp_output_control_segment+0x6c>)
 800ce38:	f001 fc16 	bl	800e668 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ce3c:	b164      	cbz	r4, 800ce58 <tcp_output_control_segment+0x38>
 800ce3e:	7a20      	ldrb	r0, [r4, #8]
 800ce40:	b150      	cbz	r0, 800ce58 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800ce42:	f7fd fb2b 	bl	800a49c <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800ce46:	b968      	cbnz	r0, 800ce64 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800ce48:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	f7fd fbdf 	bl	800a610 <pbuf_free>
  return err;
}
 800ce52:	4620      	mov	r0, r4
 800ce54:	b005      	add	sp, #20
 800ce56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7fc f869 	bl	8008f30 <ip4_route>
  if (netif == NULL) {
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	d0f2      	beq.n	800ce48 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800ce62:	b164      	cbz	r4, 800ce7e <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800ce64:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800ce66:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ce68:	2206      	movs	r2, #6
 800ce6a:	9002      	str	r0, [sp, #8]
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	4628      	mov	r0, r5
 800ce70:	e9cd 4200 	strd	r4, r2, [sp]
 800ce74:	4632      	mov	r2, r6
 800ce76:	f7fc f9b9 	bl	80091ec <ip4_output_if>
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	e7e6      	b.n	800ce4c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800ce7e:	23ff      	movs	r3, #255	; 0xff
 800ce80:	e7f2      	b.n	800ce68 <tcp_output_control_segment+0x48>
 800ce82:	bf00      	nop
 800ce84:	08015cb5 	.word	0x08015cb5
 800ce88:	08015e52 	.word	0x08015e52
 800ce8c:	080137b4 	.word	0x080137b4

0800ce90 <tcp_write>:
{
 800ce90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	ed2d 8b02 	vpush	{d8}
 800ce98:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce9a:	4604      	mov	r4, r0
{
 800ce9c:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800ce9e:	2300      	movs	r3, #0
{
 800cea0:	9107      	str	r1, [sp, #28]
 800cea2:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800cea4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800cea8:	b968      	cbnz	r0, 800cec6 <tcp_write+0x36>
 800ceaa:	4baa      	ldr	r3, [pc, #680]	; (800d154 <tcp_write+0x2c4>)
 800ceac:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ceb0:	49a9      	ldr	r1, [pc, #676]	; (800d158 <tcp_write+0x2c8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ceb2:	48aa      	ldr	r0, [pc, #680]	; (800d15c <tcp_write+0x2cc>)
 800ceb4:	f001 fbd8 	bl	800e668 <iprintf>
 800ceb8:	f06f 000f 	mvn.w	r0, #15
}
 800cebc:	b00f      	add	sp, #60	; 0x3c
 800cebe:	ecbd 8b02 	vpop	{d8}
 800cec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800cec6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ceca:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800cecc:	085b      	lsrs	r3, r3, #1
 800cece:	4293      	cmp	r3, r2
 800ced0:	bf28      	it	cs
 800ced2:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	bf08      	it	eq
 800ced8:	4613      	moveq	r3, r2
 800ceda:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800cedc:	9b07      	ldr	r3, [sp, #28]
 800cede:	b923      	cbnz	r3, 800ceea <tcp_write+0x5a>
 800cee0:	4b9c      	ldr	r3, [pc, #624]	; (800d154 <tcp_write+0x2c4>)
 800cee2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800cee6:	499e      	ldr	r1, [pc, #632]	; (800d160 <tcp_write+0x2d0>)
 800cee8:	e7e3      	b.n	800ceb2 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800ceea:	7d03      	ldrb	r3, [r0, #20]
 800ceec:	2b07      	cmp	r3, #7
 800ceee:	d003      	beq.n	800cef8 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800cef0:	3b02      	subs	r3, #2
 800cef2:	2b02      	cmp	r3, #2
 800cef4:	f200 8259 	bhi.w	800d3aa <tcp_write+0x51a>
  } else if (len == 0) {
 800cef8:	9b04      	ldr	r3, [sp, #16]
 800cefa:	b1db      	cbz	r3, 800cf34 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800cefc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800cf00:	9a04      	ldr	r2, [sp, #16]
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d206      	bcs.n	800cf14 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800cf06:	8b63      	ldrh	r3, [r4, #26]
 800cf08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf0c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf12:	e7d3      	b.n	800cebc <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800cf14:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800cf18:	2a0f      	cmp	r2, #15
 800cf1a:	d8f4      	bhi.n	800cf06 <tcp_write+0x76>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cf1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800cf1e:	b302      	cbz	r2, 800cf62 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800cf20:	b943      	cbnz	r3, 800cf34 <tcp_write+0xa4>
 800cf22:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cf24:	b933      	cbnz	r3, 800cf34 <tcp_write+0xa4>
 800cf26:	4b8b      	ldr	r3, [pc, #556]	; (800d154 <tcp_write+0x2c4>)
 800cf28:	f240 1255 	movw	r2, #341	; 0x155
 800cf2c:	498d      	ldr	r1, [pc, #564]	; (800d164 <tcp_write+0x2d4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cf2e:	488b      	ldr	r0, [pc, #556]	; (800d15c <tcp_write+0x2cc>)
 800cf30:	f001 fb9a 	bl	800e668 <iprintf>
  queuelen = pcb->snd_queuelen;
 800cf34:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800cf38:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800cf3a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800cf3c:	b9de      	cbnz	r6, 800cf76 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cf3e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800cf42:	2f00      	cmp	r7, #0
 800cf44:	f000 81ba 	beq.w	800d2bc <tcp_write+0x42c>
 800cf48:	4b82      	ldr	r3, [pc, #520]	; (800d154 <tcp_write+0x2c4>)
 800cf4a:	f240 224a 	movw	r2, #586	; 0x24a
 800cf4e:	4986      	ldr	r1, [pc, #536]	; (800d168 <tcp_write+0x2d8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cf50:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cf52:	4882      	ldr	r0, [pc, #520]	; (800d15c <tcp_write+0x2cc>)
  struct pbuf *concat_p = NULL;
 800cf54:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800cf56:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800cf58:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800cf5a:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800cf5c:	f001 fb84 	bl	800e668 <iprintf>
 800cf60:	e088      	b.n	800d074 <tcp_write+0x1e4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800cf62:	b913      	cbnz	r3, 800cf6a <tcp_write+0xda>
 800cf64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0e4      	beq.n	800cf34 <tcp_write+0xa4>
 800cf6a:	4b7a      	ldr	r3, [pc, #488]	; (800d154 <tcp_write+0x2c4>)
 800cf6c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800cf70:	497e      	ldr	r1, [pc, #504]	; (800d16c <tcp_write+0x2dc>)
 800cf72:	e7dc      	b.n	800cf2e <tcp_write+0x9e>
 800cf74:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cf76:	f8d6 a000 	ldr.w	sl, [r6]
 800cf7a:	46b0      	mov	r8, r6
 800cf7c:	f1ba 0f00 	cmp.w	sl, #0
 800cf80:	d1f8      	bne.n	800cf74 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cf82:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cf84:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cf86:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cf88:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800cf8a:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800cf8e:	442b      	add	r3, r5
 800cf90:	429a      	cmp	r2, r3
 800cf92:	da06      	bge.n	800cfa2 <tcp_write+0x112>
 800cf94:	4b6f      	ldr	r3, [pc, #444]	; (800d154 <tcp_write+0x2c4>)
 800cf96:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800cf9a:	4975      	ldr	r1, [pc, #468]	; (800d170 <tcp_write+0x2e0>)
 800cf9c:	486f      	ldr	r0, [pc, #444]	; (800d15c <tcp_write+0x2cc>)
 800cf9e:	f001 fb63 	bl	800e668 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cfa2:	8937      	ldrh	r7, [r6, #8]
 800cfa4:	9b06      	ldr	r3, [sp, #24]
 800cfa6:	1bdf      	subs	r7, r3, r7
 800cfa8:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800cfaa:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800cfae:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800cfb0:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800cfb4:	2d00      	cmp	r5, #0
 800cfb6:	d066      	beq.n	800d086 <tcp_write+0x1f6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800cfb8:	42bd      	cmp	r5, r7
 800cfba:	d906      	bls.n	800cfca <tcp_write+0x13a>
 800cfbc:	4b65      	ldr	r3, [pc, #404]	; (800d154 <tcp_write+0x2c4>)
 800cfbe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800cfc2:	496c      	ldr	r1, [pc, #432]	; (800d174 <tcp_write+0x2e4>)
 800cfc4:	4865      	ldr	r0, [pc, #404]	; (800d15c <tcp_write+0x2cc>)
 800cfc6:	f001 fb4f 	bl	800e668 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800cfca:	9d04      	ldr	r5, [sp, #16]
 800cfcc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800cfd0:	429d      	cmp	r5, r3
 800cfd2:	bf28      	it	cs
 800cfd4:	461d      	movcs	r5, r3
 800cfd6:	42bd      	cmp	r5, r7
 800cfd8:	bf28      	it	cs
 800cfda:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800cfdc:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800cfde:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800cfe0:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800cfe2:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800cfe4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800cfe8:	b153      	cbz	r3, 800d000 <tcp_write+0x170>
 800cfea:	9b04      	ldr	r3, [sp, #16]
 800cfec:	42ab      	cmp	r3, r5
 800cfee:	f000 816a 	beq.w	800d2c6 <tcp_write+0x436>
 800cff2:	4b58      	ldr	r3, [pc, #352]	; (800d154 <tcp_write+0x2c4>)
 800cff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cff8:	495f      	ldr	r1, [pc, #380]	; (800d178 <tcp_write+0x2e8>)
 800cffa:	4858      	ldr	r0, [pc, #352]	; (800d15c <tcp_write+0x2cc>)
 800cffc:	f001 fb34 	bl	800e668 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d000:	9b04      	ldr	r3, [sp, #16]
 800d002:	429d      	cmp	r5, r3
 800d004:	f080 815f 	bcs.w	800d2c6 <tcp_write+0x436>
 800d008:	2f00      	cmp	r7, #0
 800d00a:	f000 8154 	beq.w	800d2b6 <tcp_write+0x426>
 800d00e:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800d012:	f1b9 0f00 	cmp.w	r9, #0
 800d016:	f000 814f 	beq.w	800d2b8 <tcp_write+0x428>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d01a:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d01e:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d020:	45b9      	cmp	r9, r7
 800d022:	bfa8      	it	ge
 800d024:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d026:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d028:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d02c:	d52d      	bpl.n	800d08a <tcp_write+0x1fa>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d02e:	2301      	movs	r3, #1
 800d030:	463a      	mov	r2, r7
 800d032:	4631      	mov	r1, r6
 800d034:	2000      	movs	r0, #0
 800d036:	9302      	str	r3, [sp, #8]
 800d038:	9b08      	ldr	r3, [sp, #32]
 800d03a:	e9cd 4300 	strd	r4, r3, [sp]
 800d03e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800d042:	f7ff fdb7 	bl	800cbb4 <tcp_pbuf_prealloc>
 800d046:	4683      	mov	fp, r0
 800d048:	2800      	cmp	r0, #0
 800d04a:	f000 81ab 	beq.w	800d3a4 <tcp_write+0x514>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d04e:	9b07      	ldr	r3, [sp, #28]
 800d050:	4632      	mov	r2, r6
 800d052:	6840      	ldr	r0, [r0, #4]
 800d054:	1959      	adds	r1, r3, r5
 800d056:	f001 faf1 	bl	800e63c <memcpy>
        queuelen += pbuf_clen(concat_p);
 800d05a:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800d05c:	f7fd fc14 	bl	800a888 <pbuf_clen>
 800d060:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800d062:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800d066:	4403      	add	r3, r0
 800d068:	b29b      	uxth	r3, r3
 800d06a:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800d06c:	19af      	adds	r7, r5, r6
 800d06e:	46da      	mov	sl, fp
 800d070:	4646      	mov	r6, r8
 800d072:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d074:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800d076:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d07a:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800d07e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d082:	930a      	str	r3, [sp, #40]	; 0x28
 800d084:	e0e6      	b.n	800d254 <tcp_write+0x3c4>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d086:	462e      	mov	r6, r5
 800d088:	e7ba      	b.n	800d000 <tcp_write+0x170>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d08a:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d08e:	465a      	mov	r2, fp
 800d090:	f8db b000 	ldr.w	fp, [fp]
 800d094:	f1bb 0f00 	cmp.w	fp, #0
 800d098:	d1f9      	bne.n	800d08e <tcp_write+0x1fe>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d09a:	7b13      	ldrb	r3, [r2, #12]
 800d09c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800d0a0:	d10f      	bne.n	800d0c2 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d0a2:	8951      	ldrh	r1, [r2, #10]
 800d0a4:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d0a6:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d0a8:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d109      	bne.n	800d0c2 <tcp_write+0x232>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d0ae:	b135      	cbz	r5, 800d0be <tcp_write+0x22e>
 800d0b0:	4b28      	ldr	r3, [pc, #160]	; (800d154 <tcp_write+0x2c4>)
 800d0b2:	f240 2231 	movw	r2, #561	; 0x231
 800d0b6:	4931      	ldr	r1, [pc, #196]	; (800d17c <tcp_write+0x2ec>)
 800d0b8:	4828      	ldr	r0, [pc, #160]	; (800d15c <tcp_write+0x2cc>)
 800d0ba:	f001 fad5 	bl	800e668 <iprintf>
          extendlen = seglen;
 800d0be:	46b1      	mov	r9, r6
 800d0c0:	e7d4      	b.n	800d06c <tcp_write+0x1dc>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	f7fd fb0a 	bl	800a6e0 <pbuf_alloc>
 800d0cc:	4683      	mov	fp, r0
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	f000 8168 	beq.w	800d3a4 <tcp_write+0x514>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d0d4:	9b07      	ldr	r3, [sp, #28]
 800d0d6:	442b      	add	r3, r5
 800d0d8:	6043      	str	r3, [r0, #4]
 800d0da:	e7bf      	b.n	800d05c <tcp_write+0x1cc>
    u16_t left = len - pos;
 800d0dc:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d0de:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800d0e0:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	bf28      	it	cs
 800d0e8:	4613      	movcs	r3, r2
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d0f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d046      	beq.n	800d184 <tcp_write+0x2f4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d0f6:	fabb f38b 	clz	r3, fp
 800d0fa:	ee18 1a10 	vmov	r1, s16
 800d0fe:	2036      	movs	r0, #54	; 0x36
 800d100:	095b      	lsrs	r3, r3, #5
 800d102:	9302      	str	r3, [sp, #8]
 800d104:	9b08      	ldr	r3, [sp, #32]
 800d106:	e9cd 4300 	strd	r4, r3, [sp]
 800d10a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800d10e:	f7ff fd51 	bl	800cbb4 <tcp_pbuf_prealloc>
 800d112:	4606      	mov	r6, r0
 800d114:	2800      	cmp	r0, #0
 800d116:	d056      	beq.n	800d1c6 <tcp_write+0x336>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d118:	8943      	ldrh	r3, [r0, #10]
 800d11a:	ee18 2a10 	vmov	r2, s16
 800d11e:	4293      	cmp	r3, r2
 800d120:	d206      	bcs.n	800d130 <tcp_write+0x2a0>
 800d122:	4b0c      	ldr	r3, [pc, #48]	; (800d154 <tcp_write+0x2c4>)
 800d124:	f240 2266 	movw	r2, #614	; 0x266
 800d128:	4915      	ldr	r1, [pc, #84]	; (800d180 <tcp_write+0x2f0>)
 800d12a:	480c      	ldr	r0, [pc, #48]	; (800d15c <tcp_write+0x2cc>)
 800d12c:	f001 fa9c 	bl	800e668 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d130:	9b07      	ldr	r3, [sp, #28]
 800d132:	ee18 2a10 	vmov	r2, s16
 800d136:	6870      	ldr	r0, [r6, #4]
 800d138:	19d9      	adds	r1, r3, r7
 800d13a:	f001 fa7f 	bl	800e63c <memcpy>
    queuelen += pbuf_clen(p);
 800d13e:	4630      	mov	r0, r6
 800d140:	f7fd fba2 	bl	800a888 <pbuf_clen>
 800d144:	9b05      	ldr	r3, [sp, #20]
 800d146:	4403      	add	r3, r0
 800d148:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d14a:	2b10      	cmp	r3, #16
    queuelen += pbuf_clen(p);
 800d14c:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d14e:	d963      	bls.n	800d218 <tcp_write+0x388>
      pbuf_free(p);
 800d150:	4630      	mov	r0, r6
 800d152:	e036      	b.n	800d1c2 <tcp_write+0x332>
 800d154:	08015cb5 	.word	0x08015cb5
 800d158:	08015e7b 	.word	0x08015e7b
 800d15c:	080137b4 	.word	0x080137b4
 800d160:	08015e92 	.word	0x08015e92
 800d164:	08015ec3 	.word	0x08015ec3
 800d168:	08015fad 	.word	0x08015fad
 800d16c:	08015efd 	.word	0x08015efd
 800d170:	08015f2f 	.word	0x08015f2f
 800d174:	08015f46 	.word	0x08015f46
 800d178:	08015f66 	.word	0x08015f66
 800d17c:	08015f84 	.word	0x08015f84
 800d180:	08015fdc 	.word	0x08015fdc
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d184:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d188:	b133      	cbz	r3, 800d198 <tcp_write+0x308>
 800d18a:	4b89      	ldr	r3, [pc, #548]	; (800d3b0 <tcp_write+0x520>)
 800d18c:	f240 2271 	movw	r2, #625	; 0x271
 800d190:	4988      	ldr	r1, [pc, #544]	; (800d3b4 <tcp_write+0x524>)
 800d192:	4889      	ldr	r0, [pc, #548]	; (800d3b8 <tcp_write+0x528>)
 800d194:	f001 fa68 	bl	800e668 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d198:	2201      	movs	r2, #1
 800d19a:	ee18 1a10 	vmov	r1, s16
 800d19e:	2036      	movs	r0, #54	; 0x36
 800d1a0:	f7fd fa9e 	bl	800a6e0 <pbuf_alloc>
 800d1a4:	b178      	cbz	r0, 800d1c6 <tcp_write+0x336>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d1a6:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d1a8:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d1aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800d1ac:	443a      	add	r2, r7
 800d1ae:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d1b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d1b4:	2036      	movs	r0, #54	; 0x36
 800d1b6:	f7fd fa93 	bl	800a6e0 <pbuf_alloc>
 800d1ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1bc:	4606      	mov	r6, r0
 800d1be:	bb38      	cbnz	r0, 800d210 <tcp_write+0x380>
        pbuf_free(p2);
 800d1c0:	4618      	mov	r0, r3
      pbuf_free(p);
 800d1c2:	f7fd fa25 	bl	800a610 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d1c6:	8b63      	ldrh	r3, [r4, #26]
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1cc:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800d1ce:	f1ba 0f00 	cmp.w	sl, #0
 800d1d2:	d002      	beq.n	800d1da <tcp_write+0x34a>
    pbuf_free(concat_p);
 800d1d4:	4650      	mov	r0, sl
 800d1d6:	f7fd fa1b 	bl	800a610 <pbuf_free>
  if (queue != NULL) {
 800d1da:	f1bb 0f00 	cmp.w	fp, #0
 800d1de:	d002      	beq.n	800d1e6 <tcp_write+0x356>
    tcp_segs_free(queue);
 800d1e0:	4658      	mov	r0, fp
 800d1e2:	f7fd fe4d 	bl	800ae80 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800d1e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f43f ae8f 	beq.w	800cf0e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d1f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	f47f ae8b 	bne.w	800cf0e <tcp_write+0x7e>
 800d1f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f47f ae87 	bne.w	800cf0e <tcp_write+0x7e>
 800d200:	4b6b      	ldr	r3, [pc, #428]	; (800d3b0 <tcp_write+0x520>)
 800d202:	f240 3227 	movw	r2, #807	; 0x327
 800d206:	496d      	ldr	r1, [pc, #436]	; (800d3bc <tcp_write+0x52c>)
 800d208:	486b      	ldr	r0, [pc, #428]	; (800d3b8 <tcp_write+0x528>)
 800d20a:	f001 fa2d 	bl	800e668 <iprintf>
 800d20e:	e67e      	b.n	800cf0e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800d210:	4619      	mov	r1, r3
 800d212:	f7fd fb5d 	bl	800a8d0 <pbuf_cat>
 800d216:	e792      	b.n	800d13e <tcp_write+0x2ae>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d218:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d21a:	2200      	movs	r2, #0
 800d21c:	4631      	mov	r1, r6
 800d21e:	4620      	mov	r0, r4
 800d220:	443b      	add	r3, r7
 800d222:	9200      	str	r2, [sp, #0]
 800d224:	f7ff fd12 	bl	800cc4c <tcp_create_segment>
 800d228:	4606      	mov	r6, r0
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d0cb      	beq.n	800d1c6 <tcp_write+0x336>
    if (queue == NULL) {
 800d22e:	f1bb 0f00 	cmp.w	fp, #0
 800d232:	d03e      	beq.n	800d2b2 <tcp_write+0x422>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d236:	b933      	cbnz	r3, 800d246 <tcp_write+0x3b6>
 800d238:	4b5d      	ldr	r3, [pc, #372]	; (800d3b0 <tcp_write+0x520>)
 800d23a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d23e:	4960      	ldr	r1, [pc, #384]	; (800d3c0 <tcp_write+0x530>)
 800d240:	485d      	ldr	r0, [pc, #372]	; (800d3b8 <tcp_write+0x528>)
 800d242:	f001 fa11 	bl	800e668 <iprintf>
      prev_seg->next = seg;
 800d246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d248:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800d24a:	ee18 3a10 	vmov	r3, s16
 800d24e:	9609      	str	r6, [sp, #36]	; 0x24
 800d250:	441f      	add	r7, r3
 800d252:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800d254:	9b04      	ldr	r3, [sp, #16]
 800d256:	429f      	cmp	r7, r3
 800d258:	f4ff af40 	bcc.w	800d0dc <tcp_write+0x24c>
 800d25c:	4657      	mov	r7, sl
 800d25e:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800d260:	b14d      	cbz	r5, 800d276 <tcp_write+0x3e6>
    for (p = last_unsent->p; p; p = p->next) {
 800d262:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800d266:	f1bb 0f00 	cmp.w	fp, #0
 800d26a:	d12f      	bne.n	800d2cc <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800d26c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d270:	441d      	add	r5, r3
 800d272:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800d276:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800d27a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800d27e:	2f00      	cmp	r7, #0
 800d280:	d03d      	beq.n	800d2fe <tcp_write+0x46e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d282:	f1b8 0f00 	cmp.w	r8, #0
 800d286:	d106      	bne.n	800d296 <tcp_write+0x406>
 800d288:	4b49      	ldr	r3, [pc, #292]	; (800d3b0 <tcp_write+0x520>)
 800d28a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800d28e:	494d      	ldr	r1, [pc, #308]	; (800d3c4 <tcp_write+0x534>)
 800d290:	4849      	ldr	r0, [pc, #292]	; (800d3b8 <tcp_write+0x528>)
 800d292:	f001 f9e9 	bl	800e668 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800d296:	4639      	mov	r1, r7
 800d298:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d29c:	f7fd fb18 	bl	800a8d0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d2a0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d2a4:	893a      	ldrh	r2, [r7, #8]
 800d2a6:	4413      	add	r3, r2
 800d2a8:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800d2ac:	f8c8 a000 	str.w	sl, [r8]
 800d2b0:	e04d      	b.n	800d34e <tcp_write+0x4be>
 800d2b2:	4683      	mov	fp, r0
 800d2b4:	e7c9      	b.n	800d24a <tcp_write+0x3ba>
  u16_t extendlen = 0;
 800d2b6:	46b9      	mov	r9, r7
 800d2b8:	462f      	mov	r7, r5
 800d2ba:	e6db      	b.n	800d074 <tcp_write+0x1e4>
 800d2bc:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800d2be:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d2c0:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800d2c2:	46ba      	mov	sl, r7
 800d2c4:	e6d6      	b.n	800d074 <tcp_write+0x1e4>
 800d2c6:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800d2c8:	46b9      	mov	r9, r7
 800d2ca:	e7c9      	b.n	800d260 <tcp_write+0x3d0>
      p->tot_len += oversize_used;
 800d2cc:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800d2d0:	442b      	add	r3, r5
 800d2d2:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800d2d6:	f8db 3000 	ldr.w	r3, [fp]
 800d2da:	b96b      	cbnz	r3, 800d2f8 <tcp_write+0x468>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d2dc:	f8db 3004 	ldr.w	r3, [fp, #4]
 800d2e0:	462a      	mov	r2, r5
 800d2e2:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800d2e6:	9907      	ldr	r1, [sp, #28]
 800d2e8:	4418      	add	r0, r3
 800d2ea:	f001 f9a7 	bl	800e63c <memcpy>
        p->len += oversize_used;
 800d2ee:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800d2f2:	442b      	add	r3, r5
 800d2f4:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d2f8:	f8db b000 	ldr.w	fp, [fp]
 800d2fc:	e7b3      	b.n	800d266 <tcp_write+0x3d6>
  } else if (extendlen > 0) {
 800d2fe:	f1b9 0f00 	cmp.w	r9, #0
 800d302:	d01f      	beq.n	800d344 <tcp_write+0x4b4>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d304:	f1b8 0f00 	cmp.w	r8, #0
 800d308:	d002      	beq.n	800d310 <tcp_write+0x480>
 800d30a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d30e:	b933      	cbnz	r3, 800d31e <tcp_write+0x48e>
 800d310:	4b27      	ldr	r3, [pc, #156]	; (800d3b0 <tcp_write+0x520>)
 800d312:	f240 22e6 	movw	r2, #742	; 0x2e6
 800d316:	492c      	ldr	r1, [pc, #176]	; (800d3c8 <tcp_write+0x538>)
 800d318:	4827      	ldr	r0, [pc, #156]	; (800d3b8 <tcp_write+0x528>)
 800d31a:	f001 f9a5 	bl	800e668 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d31e:	f8d8 3004 	ldr.w	r3, [r8, #4]
      p->tot_len += extendlen;
 800d322:	891a      	ldrh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d324:	6819      	ldr	r1, [r3, #0]
      p->tot_len += extendlen;
 800d326:	444a      	add	r2, r9
 800d328:	b292      	uxth	r2, r2
 800d32a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d32c:	b941      	cbnz	r1, 800d340 <tcp_write+0x4b0>
    p->len += extendlen;
 800d32e:	895a      	ldrh	r2, [r3, #10]
 800d330:	444a      	add	r2, r9
 800d332:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d334:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800d338:	4499      	add	r9, r3
 800d33a:	f8a8 9008 	strh.w	r9, [r8, #8]
 800d33e:	e7b5      	b.n	800d2ac <tcp_write+0x41c>
      p->tot_len += extendlen;
 800d340:	460b      	mov	r3, r1
 800d342:	e7ee      	b.n	800d322 <tcp_write+0x492>
  if (last_unsent == NULL) {
 800d344:	f1b8 0f00 	cmp.w	r8, #0
 800d348:	d1b0      	bne.n	800d2ac <tcp_write+0x41c>
    pcb->unsent = queue;
 800d34a:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800d34e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d350:	9a04      	ldr	r2, [sp, #16]
 800d352:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800d354:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800d358:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800d35a:	9b04      	ldr	r3, [sp, #16]
 800d35c:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800d35e:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800d360:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800d364:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d368:	b153      	cbz	r3, 800d380 <tcp_write+0x4f0>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d36a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d36c:	b943      	cbnz	r3, 800d380 <tcp_write+0x4f0>
 800d36e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d370:	b933      	cbnz	r3, 800d380 <tcp_write+0x4f0>
 800d372:	4b0f      	ldr	r3, [pc, #60]	; (800d3b0 <tcp_write+0x520>)
 800d374:	f240 3212 	movw	r2, #786	; 0x312
 800d378:	4910      	ldr	r1, [pc, #64]	; (800d3bc <tcp_write+0x52c>)
 800d37a:	480f      	ldr	r0, [pc, #60]	; (800d3b8 <tcp_write+0x528>)
 800d37c:	f001 f974 	bl	800e668 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d380:	b176      	cbz	r6, 800d3a0 <tcp_write+0x510>
 800d382:	68f0      	ldr	r0, [r6, #12]
 800d384:	2800      	cmp	r0, #0
 800d386:	f43f ad99 	beq.w	800cebc <tcp_write+0x2c>
 800d38a:	9b08      	ldr	r3, [sp, #32]
 800d38c:	f013 0402 	ands.w	r4, r3, #2
 800d390:	d106      	bne.n	800d3a0 <tcp_write+0x510>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d392:	8985      	ldrh	r5, [r0, #12]
 800d394:	2008      	movs	r0, #8
 800d396:	f7fc fb7f 	bl	8009a98 <lwip_htons>
 800d39a:	68f3      	ldr	r3, [r6, #12]
 800d39c:	4328      	orrs	r0, r5
 800d39e:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	e58b      	b.n	800cebc <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d3a4:	f04f 0b00 	mov.w	fp, #0
 800d3a8:	e70d      	b.n	800d1c6 <tcp_write+0x336>
    return ERR_CONN;
 800d3aa:	f06f 000a 	mvn.w	r0, #10
 800d3ae:	e585      	b.n	800cebc <tcp_write+0x2c>
 800d3b0:	08015cb5 	.word	0x08015cb5
 800d3b4:	0801601a 	.word	0x0801601a
 800d3b8:	080137b4 	.word	0x080137b4
 800d3bc:	080160a6 	.word	0x080160a6
 800d3c0:	08016028 	.word	0x08016028
 800d3c4:	08016039 	.word	0x08016039
 800d3c8:	08016071 	.word	0x08016071

0800d3cc <tcp_split_unsent_seg>:
{
 800d3cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	b930      	cbnz	r0, 800d3e4 <tcp_split_unsent_seg+0x18>
 800d3d6:	4b5d      	ldr	r3, [pc, #372]	; (800d54c <tcp_split_unsent_seg+0x180>)
 800d3d8:	f240 324b 	movw	r2, #843	; 0x34b
 800d3dc:	495c      	ldr	r1, [pc, #368]	; (800d550 <tcp_split_unsent_seg+0x184>)
 800d3de:	485d      	ldr	r0, [pc, #372]	; (800d554 <tcp_split_unsent_seg+0x188>)
 800d3e0:	f001 f942 	bl	800e668 <iprintf>
  useg = pcb->unsent;
 800d3e4:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800d3e6:	b914      	cbnz	r4, 800d3ee <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3ec:	e009      	b.n	800d402 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800d3ee:	b95d      	cbnz	r5, 800d408 <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d3f0:	4b56      	ldr	r3, [pc, #344]	; (800d54c <tcp_split_unsent_seg+0x180>)
 800d3f2:	f240 3253 	movw	r2, #851	; 0x353
 800d3f6:	4958      	ldr	r1, [pc, #352]	; (800d558 <tcp_split_unsent_seg+0x18c>)
 800d3f8:	4856      	ldr	r0, [pc, #344]	; (800d554 <tcp_split_unsent_seg+0x188>)
 800d3fa:	f001 f935 	bl	800e668 <iprintf>
    return ERR_VAL;
 800d3fe:	f06f 0005 	mvn.w	r0, #5
}
 800d402:	b003      	add	sp, #12
 800d404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800d408:	8923      	ldrh	r3, [r4, #8]
 800d40a:	42ab      	cmp	r3, r5
 800d40c:	d801      	bhi.n	800d412 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800d40e:	2000      	movs	r0, #0
 800d410:	e7f7      	b.n	800d402 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d412:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800d414:	42ab      	cmp	r3, r5
 800d416:	d20f      	bcs.n	800d438 <tcp_split_unsent_seg+0x6c>
 800d418:	4b4c      	ldr	r3, [pc, #304]	; (800d54c <tcp_split_unsent_seg+0x180>)
 800d41a:	f240 325b 	movw	r2, #859	; 0x35b
 800d41e:	494f      	ldr	r1, [pc, #316]	; (800d55c <tcp_split_unsent_seg+0x190>)
 800d420:	484c      	ldr	r0, [pc, #304]	; (800d554 <tcp_split_unsent_seg+0x188>)
 800d422:	f001 f921 	bl	800e668 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d426:	8923      	ldrh	r3, [r4, #8]
 800d428:	b933      	cbnz	r3, 800d438 <tcp_split_unsent_seg+0x6c>
 800d42a:	4b48      	ldr	r3, [pc, #288]	; (800d54c <tcp_split_unsent_seg+0x180>)
 800d42c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d430:	494b      	ldr	r1, [pc, #300]	; (800d560 <tcp_split_unsent_seg+0x194>)
 800d432:	4848      	ldr	r0, [pc, #288]	; (800d554 <tcp_split_unsent_seg+0x188>)
 800d434:	f001 f918 	bl	800e668 <iprintf>
  optflags = useg->flags;
 800d438:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d43c:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800d440:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d444:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d446:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800d44a:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d44e:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800d452:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d456:	fa17 f181 	uxtah	r1, r7, r1
 800d45a:	b289      	uxth	r1, r1
 800d45c:	f7fd f940 	bl	800a6e0 <pbuf_alloc>
  if (p == NULL) {
 800d460:	4681      	mov	r9, r0
 800d462:	2800      	cmp	r0, #0
 800d464:	d0c0      	beq.n	800d3e8 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800d466:	6860      	ldr	r0, [r4, #4]
 800d468:	8922      	ldrh	r2, [r4, #8]
 800d46a:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d46c:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800d470:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d472:	4642      	mov	r2, r8
 800d474:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800d476:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d478:	b29b      	uxth	r3, r3
 800d47a:	f7fd fae5 	bl	800aa48 <pbuf_copy_partial>
 800d47e:	4540      	cmp	r0, r8
 800d480:	d160      	bne.n	800d544 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d482:	68e3      	ldr	r3, [r4, #12]
 800d484:	8998      	ldrh	r0, [r3, #12]
 800d486:	f7fc fb07 	bl	8009a98 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800d48a:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d48e:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800d490:	bf16      	itet	ne
 800d492:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d496:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800d49a:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800d49e:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d4a0:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800d4a2:	bf48      	it	mi
 800d4a4:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d4a8:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800d4aa:	bf48      	it	mi
 800d4ac:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d4b0:	f7fc faf5 	bl	8009a9e <lwip_htonl>
 800d4b4:	4642      	mov	r2, r8
 800d4b6:	182b      	adds	r3, r5, r0
 800d4b8:	4649      	mov	r1, r9
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f8cd b000 	str.w	fp, [sp]
 800d4c0:	f7ff fbc4 	bl	800cc4c <tcp_create_segment>
  if (seg == NULL) {
 800d4c4:	4680      	mov	r8, r0
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	d03c      	beq.n	800d544 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d4ca:	6860      	ldr	r0, [r4, #4]
 800d4cc:	eba5 050a 	sub.w	r5, r5, sl
 800d4d0:	f7fd f9da 	bl	800a888 <pbuf_clen>
 800d4d4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d4d8:	fa1f f985 	uxth.w	r9, r5
 800d4dc:	1a18      	subs	r0, r3, r0
 800d4de:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d4e2:	6860      	ldr	r0, [r4, #4]
 800d4e4:	8901      	ldrh	r1, [r0, #8]
 800d4e6:	fa11 f185 	uxtah	r1, r1, r5
 800d4ea:	b289      	uxth	r1, r1
 800d4ec:	f7fd f974 	bl	800a7d8 <pbuf_realloc>
  useg->len -= remainder;
 800d4f0:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d4f2:	4638      	mov	r0, r7
  useg->len -= remainder;
 800d4f4:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d4f6:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800d4f8:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d4fc:	899d      	ldrh	r5, [r3, #12]
 800d4fe:	f7fc facb 	bl	8009a98 <lwip_htons>
 800d502:	68e3      	ldr	r3, [r4, #12]
 800d504:	4328      	orrs	r0, r5
 800d506:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d508:	6860      	ldr	r0, [r4, #4]
 800d50a:	f7fd f9bd 	bl	800a888 <pbuf_clen>
 800d50e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d512:	4418      	add	r0, r3
 800d514:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d518:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d51c:	f7fd f9b4 	bl	800a888 <pbuf_clen>
 800d520:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800d524:	4418      	add	r0, r3
  seg->next = useg->next;
 800d526:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d528:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800d52c:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800d530:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800d534:	f8d8 0000 	ldr.w	r0, [r8]
 800d538:	2800      	cmp	r0, #0
 800d53a:	f47f af68 	bne.w	800d40e <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800d53e:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800d542:	e75e      	b.n	800d402 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800d544:	4648      	mov	r0, r9
 800d546:	f7fd f863 	bl	800a610 <pbuf_free>
 800d54a:	e74d      	b.n	800d3e8 <tcp_split_unsent_seg+0x1c>
 800d54c:	08015cb5 	.word	0x08015cb5
 800d550:	080160c4 	.word	0x080160c4
 800d554:	080137b4 	.word	0x080137b4
 800d558:	080160e6 	.word	0x080160e6
 800d55c:	08016108 	.word	0x08016108
 800d560:	08016115 	.word	0x08016115

0800d564 <tcp_enqueue_flags>:
{
 800d564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d568:	f011 0803 	ands.w	r8, r1, #3
{
 800d56c:	4604      	mov	r4, r0
 800d56e:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d570:	d106      	bne.n	800d580 <tcp_enqueue_flags+0x1c>
 800d572:	4b3e      	ldr	r3, [pc, #248]	; (800d66c <tcp_enqueue_flags+0x108>)
 800d574:	f240 4211 	movw	r2, #1041	; 0x411
 800d578:	493d      	ldr	r1, [pc, #244]	; (800d670 <tcp_enqueue_flags+0x10c>)
 800d57a:	483e      	ldr	r0, [pc, #248]	; (800d674 <tcp_enqueue_flags+0x110>)
 800d57c:	f001 f874 	bl	800e668 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d580:	b934      	cbnz	r4, 800d590 <tcp_enqueue_flags+0x2c>
 800d582:	4b3a      	ldr	r3, [pc, #232]	; (800d66c <tcp_enqueue_flags+0x108>)
 800d584:	f240 4213 	movw	r2, #1043	; 0x413
 800d588:	493b      	ldr	r1, [pc, #236]	; (800d678 <tcp_enqueue_flags+0x114>)
 800d58a:	483a      	ldr	r0, [pc, #232]	; (800d674 <tcp_enqueue_flags+0x110>)
 800d58c:	f001 f86c 	bl	800e668 <iprintf>
  if (flags & TCP_SYN) {
 800d590:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d594:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d598:	2036      	movs	r0, #54	; 0x36
 800d59a:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800d59e:	4649      	mov	r1, r9
 800d5a0:	f7fd f89e 	bl	800a6e0 <pbuf_alloc>
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	b940      	cbnz	r0, 800d5ba <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5a8:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800d5aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d5ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5b2:	8363      	strh	r3, [r4, #26]
}
 800d5b4:	b003      	add	sp, #12
 800d5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d5ba:	8943      	ldrh	r3, [r0, #10]
 800d5bc:	454b      	cmp	r3, r9
 800d5be:	d206      	bcs.n	800d5ce <tcp_enqueue_flags+0x6a>
 800d5c0:	4b2a      	ldr	r3, [pc, #168]	; (800d66c <tcp_enqueue_flags+0x108>)
 800d5c2:	f240 4239 	movw	r2, #1081	; 0x439
 800d5c6:	492d      	ldr	r1, [pc, #180]	; (800d67c <tcp_enqueue_flags+0x118>)
 800d5c8:	482a      	ldr	r0, [pc, #168]	; (800d674 <tcp_enqueue_flags+0x110>)
 800d5ca:	f001 f84d 	bl	800e668 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d5ce:	4629      	mov	r1, r5
 800d5d0:	9700      	str	r7, [sp, #0]
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	f7ff fb38 	bl	800cc4c <tcp_create_segment>
 800d5dc:	4605      	mov	r5, r0
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d0e2      	beq.n	800d5a8 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d5e2:	68c3      	ldr	r3, [r0, #12]
 800d5e4:	079a      	lsls	r2, r3, #30
 800d5e6:	d006      	beq.n	800d5f6 <tcp_enqueue_flags+0x92>
 800d5e8:	4b20      	ldr	r3, [pc, #128]	; (800d66c <tcp_enqueue_flags+0x108>)
 800d5ea:	f240 4242 	movw	r2, #1090	; 0x442
 800d5ee:	4924      	ldr	r1, [pc, #144]	; (800d680 <tcp_enqueue_flags+0x11c>)
 800d5f0:	4820      	ldr	r0, [pc, #128]	; (800d674 <tcp_enqueue_flags+0x110>)
 800d5f2:	f001 f839 	bl	800e668 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d5f6:	892b      	ldrh	r3, [r5, #8]
 800d5f8:	b133      	cbz	r3, 800d608 <tcp_enqueue_flags+0xa4>
 800d5fa:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <tcp_enqueue_flags+0x108>)
 800d5fc:	f240 4243 	movw	r2, #1091	; 0x443
 800d600:	4920      	ldr	r1, [pc, #128]	; (800d684 <tcp_enqueue_flags+0x120>)
 800d602:	481c      	ldr	r0, [pc, #112]	; (800d674 <tcp_enqueue_flags+0x110>)
 800d604:	f001 f830 	bl	800e668 <iprintf>
  if (pcb->unsent == NULL) {
 800d608:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d60a:	bb43      	cbnz	r3, 800d65e <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800d60c:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800d60e:	2300      	movs	r3, #0
 800d610:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d614:	f1b8 0f00 	cmp.w	r8, #0
 800d618:	d002      	beq.n	800d620 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800d61a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d61c:	3301      	adds	r3, #1
 800d61e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800d620:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d622:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800d624:	bf42      	ittt	mi
 800d626:	8b63      	ldrhmi	r3, [r4, #26]
 800d628:	f043 0320 	orrmi.w	r3, r3, #32
 800d62c:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d62e:	f7fd f92b 	bl	800a888 <pbuf_clen>
 800d632:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800d636:	4418      	add	r0, r3
 800d638:	b280      	uxth	r0, r0
 800d63a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800d63e:	2800      	cmp	r0, #0
 800d640:	d0b8      	beq.n	800d5b4 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d642:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800d644:	b948      	cbnz	r0, 800d65a <tcp_enqueue_flags+0xf6>
 800d646:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800d648:	2c00      	cmp	r4, #0
 800d64a:	d1b3      	bne.n	800d5b4 <tcp_enqueue_flags+0x50>
 800d64c:	4b07      	ldr	r3, [pc, #28]	; (800d66c <tcp_enqueue_flags+0x108>)
 800d64e:	f240 4265 	movw	r2, #1125	; 0x465
 800d652:	490d      	ldr	r1, [pc, #52]	; (800d688 <tcp_enqueue_flags+0x124>)
 800d654:	4807      	ldr	r0, [pc, #28]	; (800d674 <tcp_enqueue_flags+0x110>)
 800d656:	f001 f807 	bl	800e668 <iprintf>
  return ERR_OK;
 800d65a:	2000      	movs	r0, #0
 800d65c:	e7aa      	b.n	800d5b4 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d65e:	461a      	mov	r2, r3
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1fb      	bne.n	800d65e <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800d666:	6015      	str	r5, [r2, #0]
 800d668:	e7d1      	b.n	800d60e <tcp_enqueue_flags+0xaa>
 800d66a:	bf00      	nop
 800d66c:	08015cb5 	.word	0x08015cb5
 800d670:	08016123 	.word	0x08016123
 800d674:	080137b4 	.word	0x080137b4
 800d678:	08016178 	.word	0x08016178
 800d67c:	08016197 	.word	0x08016197
 800d680:	080161d0 	.word	0x080161d0
 800d684:	080161e8 	.word	0x080161e8
 800d688:	08016212 	.word	0x08016212

0800d68c <tcp_send_fin>:
{
 800d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d68e:	4604      	mov	r4, r0
 800d690:	b930      	cbnz	r0, 800d6a0 <tcp_send_fin+0x14>
 800d692:	4b13      	ldr	r3, [pc, #76]	; (800d6e0 <tcp_send_fin+0x54>)
 800d694:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d698:	4912      	ldr	r1, [pc, #72]	; (800d6e4 <tcp_send_fin+0x58>)
 800d69a:	4813      	ldr	r0, [pc, #76]	; (800d6e8 <tcp_send_fin+0x5c>)
 800d69c:	f000 ffe4 	bl	800e668 <iprintf>
  if (pcb->unsent != NULL) {
 800d6a0:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800d6a2:	b14d      	cbz	r5, 800d6b8 <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d6a4:	462f      	mov	r7, r5
 800d6a6:	682d      	ldr	r5, [r5, #0]
 800d6a8:	2d00      	cmp	r5, #0
 800d6aa:	d1fb      	bne.n	800d6a4 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	8998      	ldrh	r0, [r3, #12]
 800d6b0:	f7fc f9f2 	bl	8009a98 <lwip_htons>
 800d6b4:	0743      	lsls	r3, r0, #29
 800d6b6:	d005      	beq.n	800d6c4 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	2101      	movs	r1, #1
}
 800d6bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d6c0:	f7ff bf50 	b.w	800d564 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2001      	movs	r0, #1
 800d6c8:	899e      	ldrh	r6, [r3, #12]
 800d6ca:	f7fc f9e5 	bl	8009a98 <lwip_htons>
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	4330      	orrs	r0, r6
 800d6d2:	8198      	strh	r0, [r3, #12]
}
 800d6d4:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800d6d6:	8b63      	ldrh	r3, [r4, #26]
 800d6d8:	f043 0320 	orr.w	r3, r3, #32
 800d6dc:	8363      	strh	r3, [r4, #26]
}
 800d6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e0:	08015cb5 	.word	0x08015cb5
 800d6e4:	0801623a 	.word	0x0801623a
 800d6e8:	080137b4 	.word	0x080137b4

0800d6ec <tcp_rexmit_rto_prepare>:
{
 800d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800d6f0:	4604      	mov	r4, r0
 800d6f2:	b930      	cbnz	r0, 800d702 <tcp_rexmit_rto_prepare+0x16>
 800d6f4:	4b1c      	ldr	r3, [pc, #112]	; (800d768 <tcp_rexmit_rto_prepare+0x7c>)
 800d6f6:	f240 6263 	movw	r2, #1635	; 0x663
 800d6fa:	491c      	ldr	r1, [pc, #112]	; (800d76c <tcp_rexmit_rto_prepare+0x80>)
 800d6fc:	481c      	ldr	r0, [pc, #112]	; (800d770 <tcp_rexmit_rto_prepare+0x84>)
 800d6fe:	f000 ffb3 	bl	800e668 <iprintf>
  if (pcb->unacked == NULL) {
 800d702:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d704:	b945      	cbnz	r5, 800d718 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800d706:	f06f 0005 	mvn.w	r0, #5
}
 800d70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800d70e:	f7ff fa3b 	bl	800cb88 <tcp_output_segment_busy>
 800d712:	2800      	cmp	r0, #0
 800d714:	d1f7      	bne.n	800d706 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d716:	682d      	ldr	r5, [r5, #0]
 800d718:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800d71a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1f6      	bne.n	800d70e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800d720:	f7ff fa32 	bl	800cb88 <tcp_output_segment_busy>
 800d724:	4606      	mov	r6, r0
 800d726:	2800      	cmp	r0, #0
 800d728:	d1ed      	bne.n	800d706 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800d72a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d72c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800d72e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800d730:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800d734:	8b63      	ldrh	r3, [r4, #26]
 800d736:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d73a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d73c:	68eb      	ldr	r3, [r5, #12]
 800d73e:	6858      	ldr	r0, [r3, #4]
 800d740:	f7fc f9ad 	bl	8009a9e <lwip_htonl>
 800d744:	68eb      	ldr	r3, [r5, #12]
 800d746:	4607      	mov	r7, r0
 800d748:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800d74c:	8998      	ldrh	r0, [r3, #12]
 800d74e:	f7fc f9a3 	bl	8009a98 <lwip_htons>
 800d752:	f010 0303 	ands.w	r3, r0, #3
 800d756:	4447      	add	r7, r8
  return ERR_OK;
 800d758:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d75a:	bf18      	it	ne
 800d75c:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800d75e:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d760:	443b      	add	r3, r7
 800d762:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800d764:	e7d1      	b.n	800d70a <tcp_rexmit_rto_prepare+0x1e>
 800d766:	bf00      	nop
 800d768:	08015cb5 	.word	0x08015cb5
 800d76c:	08016254 	.word	0x08016254
 800d770:	080137b4 	.word	0x080137b4

0800d774 <tcp_rexmit>:
{
 800d774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800d776:	4604      	mov	r4, r0
 800d778:	b930      	cbnz	r0, 800d788 <tcp_rexmit+0x14>
 800d77a:	4b1b      	ldr	r3, [pc, #108]	; (800d7e8 <tcp_rexmit+0x74>)
 800d77c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800d780:	491a      	ldr	r1, [pc, #104]	; (800d7ec <tcp_rexmit+0x78>)
 800d782:	481b      	ldr	r0, [pc, #108]	; (800d7f0 <tcp_rexmit+0x7c>)
 800d784:	f000 ff70 	bl	800e668 <iprintf>
  if (pcb->unacked == NULL) {
 800d788:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800d78a:	b915      	cbnz	r5, 800d792 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800d78c:	f06f 0005 	mvn.w	r0, #5
}
 800d790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800d792:	4628      	mov	r0, r5
 800d794:	f7ff f9f8 	bl	800cb88 <tcp_output_segment_busy>
 800d798:	2800      	cmp	r0, #0
 800d79a:	d1f7      	bne.n	800d78c <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800d79c:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800d79e:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800d7a2:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800d7a4:	6833      	ldr	r3, [r6, #0]
 800d7a6:	b983      	cbnz	r3, 800d7ca <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800d7a8:	6833      	ldr	r3, [r6, #0]
 800d7aa:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d7ac:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	b90b      	cbnz	r3, 800d7b6 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800d7b2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800d7b6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800d7ba:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800d7bc:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800d7be:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800d7c0:	bf1c      	itt	ne
 800d7c2:	3301      	addne	r3, #1
 800d7c4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800d7c8:	e7e2      	b.n	800d790 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	6858      	ldr	r0, [r3, #4]
 800d7ce:	f7fc f966 	bl	8009a9e <lwip_htonl>
 800d7d2:	68eb      	ldr	r3, [r5, #12]
 800d7d4:	4607      	mov	r7, r0
 800d7d6:	6858      	ldr	r0, [r3, #4]
 800d7d8:	f7fc f961 	bl	8009a9e <lwip_htonl>
 800d7dc:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	dae2      	bge.n	800d7a8 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800d7e2:	6836      	ldr	r6, [r6, #0]
 800d7e4:	e7de      	b.n	800d7a4 <tcp_rexmit+0x30>
 800d7e6:	bf00      	nop
 800d7e8:	08015cb5 	.word	0x08015cb5
 800d7ec:	08016278 	.word	0x08016278
 800d7f0:	080137b4 	.word	0x080137b4

0800d7f4 <tcp_rexmit_fast>:
{
 800d7f4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	b930      	cbnz	r0, 800d808 <tcp_rexmit_fast+0x14>
 800d7fa:	4b15      	ldr	r3, [pc, #84]	; (800d850 <tcp_rexmit_fast+0x5c>)
 800d7fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800d800:	4914      	ldr	r1, [pc, #80]	; (800d854 <tcp_rexmit_fast+0x60>)
 800d802:	4815      	ldr	r0, [pc, #84]	; (800d858 <tcp_rexmit_fast+0x64>)
 800d804:	f000 ff30 	bl	800e668 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d808:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d80a:	b1fb      	cbz	r3, 800d84c <tcp_rexmit_fast+0x58>
 800d80c:	8b63      	ldrh	r3, [r4, #26]
 800d80e:	075b      	lsls	r3, r3, #29
 800d810:	d41c      	bmi.n	800d84c <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800d812:	4620      	mov	r0, r4
 800d814:	f7ff ffae 	bl	800d774 <tcp_rexmit>
 800d818:	b9c0      	cbnz	r0, 800d84c <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d81a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800d81e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800d822:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d824:	4299      	cmp	r1, r3
 800d826:	bf28      	it	cs
 800d828:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d82a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d82c:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d82e:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800d830:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d834:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800d836:	bf88      	it	hi
 800d838:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d83a:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800d83c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d840:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d844:	8b63      	ldrh	r3, [r4, #26]
 800d846:	f043 0304 	orr.w	r3, r3, #4
 800d84a:	8363      	strh	r3, [r4, #26]
}
 800d84c:	bd38      	pop	{r3, r4, r5, pc}
 800d84e:	bf00      	nop
 800d850:	08015cb5 	.word	0x08015cb5
 800d854:	08016290 	.word	0x08016290
 800d858:	080137b4 	.word	0x080137b4

0800d85c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d864:	4606      	mov	r6, r0
 800d866:	460f      	mov	r7, r1
 800d868:	4614      	mov	r4, r2
 800d86a:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d86e:	461d      	mov	r5, r3
{
 800d870:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d874:	b933      	cbnz	r3, 800d884 <tcp_rst+0x28>
 800d876:	4b18      	ldr	r3, [pc, #96]	; (800d8d8 <tcp_rst+0x7c>)
 800d878:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d87c:	4917      	ldr	r1, [pc, #92]	; (800d8dc <tcp_rst+0x80>)
 800d87e:	4818      	ldr	r0, [pc, #96]	; (800d8e0 <tcp_rst+0x84>)
 800d880:	f000 fef2 	bl	800e668 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d884:	f1b8 0f00 	cmp.w	r8, #0
 800d888:	d106      	bne.n	800d898 <tcp_rst+0x3c>
 800d88a:	4b13      	ldr	r3, [pc, #76]	; (800d8d8 <tcp_rst+0x7c>)
 800d88c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d890:	4914      	ldr	r1, [pc, #80]	; (800d8e4 <tcp_rst+0x88>)
 800d892:	4813      	ldr	r0, [pc, #76]	; (800d8e0 <tcp_rst+0x84>)
 800d894:	f000 fee8 	bl	800e668 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d898:	4638      	mov	r0, r7
 800d89a:	f7fc f900 	bl	8009a9e <lwip_htonl>
 800d89e:	2314      	movs	r3, #20
 800d8a0:	f646 010b 	movw	r1, #26635	; 0x680b
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	f8cd a000 	str.w	sl, [sp]
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800d8b0:	464b      	mov	r3, r9
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	f7ff fa3c 	bl	800cd30 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d8b8:	4604      	mov	r4, r0
 800d8ba:	b150      	cbz	r0, 800d8d2 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d8bc:	f7ff faa0 	bl	800ce00 <tcp_output_fill_options.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d8c0:	4643      	mov	r3, r8
 800d8c2:	462a      	mov	r2, r5
 800d8c4:	4621      	mov	r1, r4
 800d8c6:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d8c8:	b004      	add	sp, #16
 800d8ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d8ce:	f7ff baa7 	b.w	800ce20 <tcp_output_control_segment>
}
 800d8d2:	b004      	add	sp, #16
 800d8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d8:	08015cb5 	.word	0x08015cb5
 800d8dc:	080162ad 	.word	0x080162ad
 800d8e0:	080137b4 	.word	0x080137b4
 800d8e4:	080162c7 	.word	0x080162c7

0800d8e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d8e8:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	b930      	cbnz	r0, 800d8fc <tcp_send_empty_ack+0x14>
 800d8ee:	4b14      	ldr	r3, [pc, #80]	; (800d940 <tcp_send_empty_ack+0x58>)
 800d8f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d8f4:	4913      	ldr	r1, [pc, #76]	; (800d944 <tcp_send_empty_ack+0x5c>)
 800d8f6:	4814      	ldr	r0, [pc, #80]	; (800d948 <tcp_send_empty_ack+0x60>)
 800d8f8:	f000 feb6 	bl	800e668 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d8fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d8fe:	f7fc f8ce 	bl	8009a9e <lwip_htonl>
 800d902:	2100      	movs	r1, #0
 800d904:	4602      	mov	r2, r0
 800d906:	4620      	mov	r0, r4
 800d908:	f7ff fa54 	bl	800cdb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d90c:	4605      	mov	r5, r0
 800d90e:	b930      	cbnz	r0, 800d91e <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d910:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d912:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d916:	f043 0303 	orr.w	r3, r3, #3
 800d91a:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800d91c:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d91e:	f7ff fa6f 	bl	800ce00 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d922:	1d23      	adds	r3, r4, #4
 800d924:	4622      	mov	r2, r4
 800d926:	4629      	mov	r1, r5
 800d928:	4620      	mov	r0, r4
 800d92a:	f7ff fa79 	bl	800ce20 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800d92e:	8b63      	ldrh	r3, [r4, #26]
 800d930:	b118      	cbz	r0, 800d93a <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d932:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d936:	8363      	strh	r3, [r4, #26]
 800d938:	e7f0      	b.n	800d91c <tcp_send_empty_ack+0x34>
 800d93a:	f023 0303 	bic.w	r3, r3, #3
 800d93e:	e7fa      	b.n	800d936 <tcp_send_empty_ack+0x4e>
 800d940:	08015cb5 	.word	0x08015cb5
 800d944:	080162e2 	.word	0x080162e2
 800d948:	080137b4 	.word	0x080137b4

0800d94c <tcp_output>:
{
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d950:	4604      	mov	r4, r0
{
 800d952:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d954:	b930      	cbnz	r0, 800d964 <tcp_output+0x18>
 800d956:	4b8f      	ldr	r3, [pc, #572]	; (800db94 <tcp_output+0x248>)
 800d958:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d95c:	498e      	ldr	r1, [pc, #568]	; (800db98 <tcp_output+0x24c>)
 800d95e:	488f      	ldr	r0, [pc, #572]	; (800db9c <tcp_output+0x250>)
 800d960:	f000 fe82 	bl	800e668 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d964:	7d23      	ldrb	r3, [r4, #20]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d106      	bne.n	800d978 <tcp_output+0x2c>
 800d96a:	4b8a      	ldr	r3, [pc, #552]	; (800db94 <tcp_output+0x248>)
 800d96c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d970:	498b      	ldr	r1, [pc, #556]	; (800dba0 <tcp_output+0x254>)
 800d972:	488a      	ldr	r0, [pc, #552]	; (800db9c <tcp_output+0x250>)
 800d974:	f000 fe78 	bl	800e668 <iprintf>
  if (tcp_input_pcb == pcb) {
 800d978:	4b8a      	ldr	r3, [pc, #552]	; (800dba4 <tcp_output+0x258>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	f000 8171 	beq.w	800dc64 <tcp_output+0x318>
  seg = pcb->unsent;
 800d982:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800d984:	b94d      	cbnz	r5, 800d99a <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800d986:	8b63      	ldrh	r3, [r4, #26]
 800d988:	0798      	lsls	r0, r3, #30
 800d98a:	f140 8167 	bpl.w	800dc5c <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800d98e:	4620      	mov	r0, r4
}
 800d990:	b007      	add	sp, #28
 800d992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800d996:	f7ff bfa7 	b.w	800d8e8 <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d99a:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d99c:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d9a0:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800d9a4:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d9a8:	b340      	cbz	r0, 800d9fc <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800d9aa:	f7fc fd77 	bl	800a49c <netif_get_by_index>
    return ip_route(src, dst);
 800d9ae:	4607      	mov	r7, r0
  if (netif == NULL) {
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	f000 8170 	beq.w	800dc96 <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	b90b      	cbnz	r3, 800d9be <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d9ba:	6843      	ldr	r3, [r0, #4]
 800d9bc:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d9be:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d9c0:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d9c2:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d9c4:	bf28      	it	cs
 800d9c6:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d9c8:	f7fc f869 	bl	8009a9e <lwip_htonl>
 800d9cc:	892b      	ldrh	r3, [r5, #8]
 800d9ce:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800d9d0:	1a9b      	subs	r3, r3, r2
 800d9d2:	4418      	add	r0, r3
 800d9d4:	4540      	cmp	r0, r8
 800d9d6:	d915      	bls.n	800da04 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d9d8:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800d9dc:	4543      	cmp	r3, r8
 800d9de:	d1d2      	bne.n	800d986 <tcp_output+0x3a>
 800d9e0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1cf      	bne.n	800d986 <tcp_output+0x3a>
 800d9e6:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d1cb      	bne.n	800d986 <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800d9ee:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800d9f2:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800d9f6:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800d9fa:	e7c4      	b.n	800d986 <tcp_output+0x3a>
    return ip_route(src, dst);
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f7fb fa97 	bl	8008f30 <ip4_route>
 800da02:	e7d4      	b.n	800d9ae <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800da04:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800da06:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800da08:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800da0c:	b126      	cbz	r6, 800da18 <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800da0e:	4633      	mov	r3, r6
 800da10:	6836      	ldr	r6, [r6, #0]
 800da12:	2e00      	cmp	r6, #0
 800da14:	d1fb      	bne.n	800da0e <tcp_output+0xc2>
 800da16:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800da18:	f8df a178 	ldr.w	sl, [pc, #376]	; 800db94 <tcp_output+0x248>
 800da1c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800db9c <tcp_output+0x250>
 800da20:	e0de      	b.n	800dbe0 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800da22:	7d23      	ldrb	r3, [r4, #20]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d009      	beq.n	800da3c <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800da28:	68eb      	ldr	r3, [r5, #12]
 800da2a:	2010      	movs	r0, #16
 800da2c:	899b      	ldrh	r3, [r3, #12]
 800da2e:	9304      	str	r3, [sp, #16]
 800da30:	f7fc f832 	bl	8009a98 <lwip_htons>
 800da34:	9b04      	ldr	r3, [sp, #16]
 800da36:	68ea      	ldr	r2, [r5, #12]
 800da38:	4318      	orrs	r0, r3
 800da3a:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800da3c:	4628      	mov	r0, r5
 800da3e:	f7ff f8a3 	bl	800cb88 <tcp_output_segment_busy>
 800da42:	2800      	cmp	r0, #0
 800da44:	d16f      	bne.n	800db26 <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800da46:	68eb      	ldr	r3, [r5, #12]
 800da48:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da4a:	9304      	str	r3, [sp, #16]
 800da4c:	f7fc f827 	bl	8009a9e <lwip_htonl>
 800da50:	9b04      	ldr	r3, [sp, #16]
 800da52:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800da54:	68eb      	ldr	r3, [r5, #12]
 800da56:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800da58:	9304      	str	r3, [sp, #16]
 800da5a:	f7fc f81d 	bl	8009a98 <lwip_htons>
 800da5e:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800da60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800da62:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800da64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da66:	4413      	add	r3, r2
 800da68:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800da6a:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800da6c:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800da6e:	07d2      	lsls	r2, r2, #31
 800da70:	d449      	bmi.n	800db06 <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800da72:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800da76:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800da7a:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800da7c:	bfbc      	itt	lt
 800da7e:	2300      	movlt	r3, #0
 800da80:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800da82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da84:	b94b      	cbnz	r3, 800da9a <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800da86:	4948      	ldr	r1, [pc, #288]	; (800dba8 <tcp_output+0x25c>)
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800da88:	68eb      	ldr	r3, [r5, #12]
    pcb->rttest = tcp_ticks;
 800da8a:	6809      	ldr	r1, [r1, #0]
 800da8c:	9204      	str	r2, [sp, #16]
 800da8e:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800da90:	6858      	ldr	r0, [r3, #4]
 800da92:	f7fc f804 	bl	8009a9e <lwip_htonl>
 800da96:	9a04      	ldr	r2, [sp, #16]
 800da98:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800da9a:	6869      	ldr	r1, [r5, #4]
 800da9c:	68eb      	ldr	r3, [r5, #12]
 800da9e:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800daa0:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800daa4:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800daa6:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800daa8:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800daaa:	ebac 0c00 	sub.w	ip, ip, r0
 800daae:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800dab2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800dab6:	ebac 0000 	sub.w	r0, ip, r0
 800daba:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800dabc:	2100      	movs	r1, #0
 800dabe:	7419      	strb	r1, [r3, #16]
 800dac0:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800dac2:	7aa9      	ldrb	r1, [r5, #10]
 800dac4:	0089      	lsls	r1, r1, #2
 800dac6:	f001 0104 	and.w	r1, r1, #4
 800daca:	3114      	adds	r1, #20
 800dacc:	440b      	add	r3, r1
 800dace:	429a      	cmp	r2, r3
 800dad0:	d006      	beq.n	800dae0 <tcp_output+0x194>
 800dad2:	4653      	mov	r3, sl
 800dad4:	f240 621c 	movw	r2, #1564	; 0x61c
 800dad8:	4934      	ldr	r1, [pc, #208]	; (800dbac <tcp_output+0x260>)
 800dada:	4658      	mov	r0, fp
 800dadc:	f000 fdc4 	bl	800e668 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800dae0:	2306      	movs	r3, #6
 800dae2:	9702      	str	r7, [sp, #8]
 800dae4:	464a      	mov	r2, r9
 800dae6:	4621      	mov	r1, r4
 800dae8:	9301      	str	r3, [sp, #4]
 800daea:	7aa3      	ldrb	r3, [r4, #10]
 800daec:	9300      	str	r3, [sp, #0]
 800daee:	7ae3      	ldrb	r3, [r4, #11]
 800daf0:	6868      	ldr	r0, [r5, #4]
 800daf2:	f7fb fb7b 	bl	80091ec <ip4_output_if>
    if (err != ERR_OK) {
 800daf6:	b1b0      	cbz	r0, 800db26 <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800daf8:	8b63      	ldrh	r3, [r4, #26]
 800dafa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dafe:	8363      	strh	r3, [r4, #26]
}
 800db00:	b007      	add	sp, #28
 800db02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800db06:	464a      	mov	r2, r9
 800db08:	4639      	mov	r1, r7
 800db0a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800db0e:	9304      	str	r3, [sp, #16]
 800db10:	f7fd ffe4 	bl	800badc <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800db14:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800db18:	f7fb ffc1 	bl	8009a9e <lwip_htonl>
 800db1c:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800db1e:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800db22:	6158      	str	r0, [r3, #20]
    opts += 1;
 800db24:	e7a7      	b.n	800da76 <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800db26:	682b      	ldr	r3, [r5, #0]
 800db28:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800db2a:	7d23      	ldrb	r3, [r4, #20]
 800db2c:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800db2e:	bf1e      	ittt	ne
 800db30:	8b63      	ldrhne	r3, [r4, #26]
 800db32:	f023 0303 	bicne.w	r3, r3, #3
 800db36:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800db38:	68eb      	ldr	r3, [r5, #12]
 800db3a:	6858      	ldr	r0, [r3, #4]
 800db3c:	f7fb ffaf 	bl	8009a9e <lwip_htonl>
 800db40:	8929      	ldrh	r1, [r5, #8]
 800db42:	68eb      	ldr	r3, [r5, #12]
 800db44:	9104      	str	r1, [sp, #16]
 800db46:	9005      	str	r0, [sp, #20]
 800db48:	8998      	ldrh	r0, [r3, #12]
 800db4a:	f7fb ffa5 	bl	8009a98 <lwip_htons>
 800db4e:	f010 0303 	ands.w	r3, r0, #3
 800db52:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800db56:	bf18      	it	ne
 800db58:	2301      	movne	r3, #1
 800db5a:	440a      	add	r2, r1
 800db5c:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800db5e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800db60:	1ad2      	subs	r2, r2, r3
 800db62:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800db64:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800db66:	bfb8      	it	lt
 800db68:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800db6a:	892b      	ldrh	r3, [r5, #8]
 800db6c:	9304      	str	r3, [sp, #16]
 800db6e:	8990      	ldrh	r0, [r2, #12]
 800db70:	f7fb ff92 	bl	8009a98 <lwip_htons>
 800db74:	f010 0003 	ands.w	r0, r0, #3
 800db78:	9b04      	ldr	r3, [sp, #16]
 800db7a:	bf18      	it	ne
 800db7c:	2001      	movne	r0, #1
 800db7e:	42d8      	cmn	r0, r3
 800db80:	f000 8085 	beq.w	800dc8e <tcp_output+0x342>
      seg->next = NULL;
 800db84:	2300      	movs	r3, #0
 800db86:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800db88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db8a:	b98b      	cbnz	r3, 800dbb0 <tcp_output+0x264>
        pcb->unacked = seg;
 800db8c:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800db8e:	462e      	mov	r6, r5
 800db90:	e023      	b.n	800dbda <tcp_output+0x28e>
 800db92:	bf00      	nop
 800db94:	08015cb5 	.word	0x08015cb5
 800db98:	08016302 	.word	0x08016302
 800db9c:	080137b4 	.word	0x080137b4
 800dba0:	0801631a 	.word	0x0801631a
 800dba4:	20014064 	.word	0x20014064
 800dba8:	20014018 	.word	0x20014018
 800dbac:	08016357 	.word	0x08016357
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800dbb0:	68eb      	ldr	r3, [r5, #12]
 800dbb2:	6858      	ldr	r0, [r3, #4]
 800dbb4:	f7fb ff73 	bl	8009a9e <lwip_htonl>
 800dbb8:	68f2      	ldr	r2, [r6, #12]
 800dbba:	9004      	str	r0, [sp, #16]
 800dbbc:	6850      	ldr	r0, [r2, #4]
 800dbbe:	f7fb ff6e 	bl	8009a9e <lwip_htonl>
 800dbc2:	9b04      	ldr	r3, [sp, #16]
 800dbc4:	1a18      	subs	r0, r3, r0
 800dbc6:	2800      	cmp	r0, #0
 800dbc8:	da5f      	bge.n	800dc8a <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800dbca:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	d149      	bne.n	800dc68 <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800dbd8:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800dbda:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800dbdc:	2d00      	cmp	r5, #0
 800dbde:	d03a      	beq.n	800dc56 <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800dbe0:	68eb      	ldr	r3, [r5, #12]
 800dbe2:	6858      	ldr	r0, [r3, #4]
 800dbe4:	f7fb ff5b 	bl	8009a9e <lwip_htonl>
 800dbe8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dbea:	1ac0      	subs	r0, r0, r3
 800dbec:	892b      	ldrh	r3, [r5, #8]
 800dbee:	4418      	add	r0, r3
  while (seg != NULL &&
 800dbf0:	4540      	cmp	r0, r8
 800dbf2:	d82e      	bhi.n	800dc52 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800dbf4:	68eb      	ldr	r3, [r5, #12]
 800dbf6:	8998      	ldrh	r0, [r3, #12]
 800dbf8:	f7fb ff4e 	bl	8009a98 <lwip_htons>
 800dbfc:	0741      	lsls	r1, r0, #29
 800dbfe:	d506      	bpl.n	800dc0e <tcp_output+0x2c2>
 800dc00:	4653      	mov	r3, sl
 800dc02:	f240 5236 	movw	r2, #1334	; 0x536
 800dc06:	4925      	ldr	r1, [pc, #148]	; (800dc9c <tcp_output+0x350>)
 800dc08:	4658      	mov	r0, fp
 800dc0a:	f000 fd2d 	bl	800e668 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dc0e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f43f af06 	beq.w	800da22 <tcp_output+0xd6>
 800dc16:	8b62      	ldrh	r2, [r4, #26]
 800dc18:	f012 0f44 	tst.w	r2, #68	; 0x44
 800dc1c:	f47f af01 	bne.w	800da22 <tcp_output+0xd6>
 800dc20:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dc22:	b143      	cbz	r3, 800dc36 <tcp_output+0x2ea>
 800dc24:	6819      	ldr	r1, [r3, #0]
 800dc26:	2900      	cmp	r1, #0
 800dc28:	f47f aefb 	bne.w	800da22 <tcp_output+0xd6>
 800dc2c:	8919      	ldrh	r1, [r3, #8]
 800dc2e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800dc30:	4299      	cmp	r1, r3
 800dc32:	f4bf aef6 	bcs.w	800da22 <tcp_output+0xd6>
 800dc36:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f43f aef1 	beq.w	800da22 <tcp_output+0xd6>
 800dc40:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800dc44:	2b0f      	cmp	r3, #15
 800dc46:	f63f aeec 	bhi.w	800da22 <tcp_output+0xd6>
 800dc4a:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800dc4e:	f47f aee8 	bne.w	800da22 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800dc52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800dc54:	b913      	cbnz	r3, 800dc5c <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800dc5c:	8b63      	ldrh	r3, [r4, #26]
 800dc5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc62:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800dc64:	2000      	movs	r0, #0
 800dc66:	e74b      	b.n	800db00 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dc68:	68d2      	ldr	r2, [r2, #12]
 800dc6a:	9305      	str	r3, [sp, #20]
 800dc6c:	6850      	ldr	r0, [r2, #4]
 800dc6e:	f7fb ff16 	bl	8009a9e <lwip_htonl>
 800dc72:	68e9      	ldr	r1, [r5, #12]
 800dc74:	9004      	str	r0, [sp, #16]
 800dc76:	6848      	ldr	r0, [r1, #4]
 800dc78:	f7fb ff11 	bl	8009a9e <lwip_htonl>
 800dc7c:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800dc7e:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dc80:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800dc82:	2800      	cmp	r0, #0
 800dc84:	daa6      	bge.n	800dbd4 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	e7a1      	b.n	800dbce <tcp_output+0x282>
          useg->next = seg;
 800dc8a:	6035      	str	r5, [r6, #0]
 800dc8c:	e77f      	b.n	800db8e <tcp_output+0x242>
      tcp_seg_free(seg);
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f7fd f8e8 	bl	800ae64 <tcp_seg_free>
 800dc94:	e7a1      	b.n	800dbda <tcp_output+0x28e>
    return ERR_RTE;
 800dc96:	f06f 0003 	mvn.w	r0, #3
 800dc9a:	e731      	b.n	800db00 <tcp_output+0x1b4>
 800dc9c:	08016340 	.word	0x08016340

0800dca0 <tcp_rexmit_rto_commit>:
{
 800dca0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dca2:	4604      	mov	r4, r0
 800dca4:	b930      	cbnz	r0, 800dcb4 <tcp_rexmit_rto_commit+0x14>
 800dca6:	4b09      	ldr	r3, [pc, #36]	; (800dccc <tcp_rexmit_rto_commit+0x2c>)
 800dca8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dcac:	4908      	ldr	r1, [pc, #32]	; (800dcd0 <tcp_rexmit_rto_commit+0x30>)
 800dcae:	4809      	ldr	r0, [pc, #36]	; (800dcd4 <tcp_rexmit_rto_commit+0x34>)
 800dcb0:	f000 fcda 	bl	800e668 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800dcb4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800dcb8:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800dcba:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800dcbc:	bf1c      	itt	ne
 800dcbe:	3301      	addne	r3, #1
 800dcc0:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800dcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800dcc8:	f7ff be40 	b.w	800d94c <tcp_output>
 800dccc:	08015cb5 	.word	0x08015cb5
 800dcd0:	0801636a 	.word	0x0801636a
 800dcd4:	080137b4 	.word	0x080137b4

0800dcd8 <tcp_rexmit_rto>:
{
 800dcd8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800dcda:	4604      	mov	r4, r0
 800dcdc:	b930      	cbnz	r0, 800dcec <tcp_rexmit_rto+0x14>
 800dcde:	4b08      	ldr	r3, [pc, #32]	; (800dd00 <tcp_rexmit_rto+0x28>)
 800dce0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800dce4:	4907      	ldr	r1, [pc, #28]	; (800dd04 <tcp_rexmit_rto+0x2c>)
 800dce6:	4808      	ldr	r0, [pc, #32]	; (800dd08 <tcp_rexmit_rto+0x30>)
 800dce8:	f000 fcbe 	bl	800e668 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800dcec:	4620      	mov	r0, r4
 800dcee:	f7ff fcfd 	bl	800d6ec <tcp_rexmit_rto_prepare>
 800dcf2:	b920      	cbnz	r0, 800dcfe <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800dcf4:	4620      	mov	r0, r4
}
 800dcf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800dcfa:	f7ff bfd1 	b.w	800dca0 <tcp_rexmit_rto_commit>
}
 800dcfe:	bd10      	pop	{r4, pc}
 800dd00:	08015cb5 	.word	0x08015cb5
 800dd04:	0801638d 	.word	0x0801638d
 800dd08:	080137b4 	.word	0x080137b4

0800dd0c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800dd0c:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800dd0e:	4604      	mov	r4, r0
 800dd10:	b930      	cbnz	r0, 800dd20 <tcp_keepalive+0x14>
 800dd12:	4b0f      	ldr	r3, [pc, #60]	; (800dd50 <tcp_keepalive+0x44>)
 800dd14:	f640 0224 	movw	r2, #2084	; 0x824
 800dd18:	490e      	ldr	r1, [pc, #56]	; (800dd54 <tcp_keepalive+0x48>)
 800dd1a:	480f      	ldr	r0, [pc, #60]	; (800dd58 <tcp_keepalive+0x4c>)
 800dd1c:	f000 fca4 	bl	800e668 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800dd20:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800dd22:	3801      	subs	r0, #1
 800dd24:	f7fb febb 	bl	8009a9e <lwip_htonl>
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f7ff f841 	bl	800cdb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800dd32:	4605      	mov	r5, r0
 800dd34:	b148      	cbz	r0, 800dd4a <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800dd36:	f7ff f863 	bl	800ce00 <tcp_output_fill_options.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd3a:	1d23      	adds	r3, r4, #4
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800dd42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dd46:	f7ff b86b 	b.w	800ce20 <tcp_output_control_segment>
}
 800dd4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	08015cb5 	.word	0x08015cb5
 800dd54:	080163a9 	.word	0x080163a9
 800dd58:	080137b4 	.word	0x080137b4

0800dd5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800dd60:	4606      	mov	r6, r0
 800dd62:	b930      	cbnz	r0, 800dd72 <tcp_zero_window_probe+0x16>
 800dd64:	4b2c      	ldr	r3, [pc, #176]	; (800de18 <tcp_zero_window_probe+0xbc>)
 800dd66:	f640 024f 	movw	r2, #2127	; 0x84f
 800dd6a:	492c      	ldr	r1, [pc, #176]	; (800de1c <tcp_zero_window_probe+0xc0>)
 800dd6c:	482c      	ldr	r0, [pc, #176]	; (800de20 <tcp_zero_window_probe+0xc4>)
 800dd6e:	f000 fc7b 	bl	800e668 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800dd72:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800dd74:	2d00      	cmp	r5, #0
 800dd76:	d048      	beq.n	800de0a <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800dd78:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800dd7c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800dd7e:	bf1c      	itt	ne
 800dd80:	3301      	addne	r3, #1
 800dd82:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dd86:	68eb      	ldr	r3, [r5, #12]
 800dd88:	8998      	ldrh	r0, [r3, #12]
 800dd8a:	f7fb fe85 	bl	8009a98 <lwip_htons>
 800dd8e:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dd92:	68eb      	ldr	r3, [r5, #12]
 800dd94:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dd96:	bf18      	it	ne
 800dd98:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dd9a:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800dd9c:	bf1c      	itt	ne
 800dd9e:	fab4 f484 	clzne	r4, r4
 800dda2:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800dda4:	f084 0101 	eor.w	r1, r4, #1
 800dda8:	f7ff f804 	bl	800cdb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800ddac:	4607      	mov	r7, r0
 800ddae:	b378      	cbz	r0, 800de10 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ddb0:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800ddb4:	b1f4      	cbz	r4, 800ddf4 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ddb6:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800ddba:	2011      	movs	r0, #17
 800ddbc:	f7fb fe6c 	bl	8009a98 <lwip_htons>
 800ddc0:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800ddc4:	4320      	orrs	r0, r4
 800ddc6:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ddca:	68eb      	ldr	r3, [r5, #12]
 800ddcc:	6858      	ldr	r0, [r3, #4]
 800ddce:	f7fb fe66 	bl	8009a9e <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ddd2:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ddd4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ddd6:	1a1b      	subs	r3, r3, r0
 800ddd8:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800ddda:	bfb8      	it	lt
 800dddc:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ddde:	4638      	mov	r0, r7
 800dde0:	f7ff f80e 	bl	800ce00 <tcp_output_fill_options.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800dde4:	1d33      	adds	r3, r6, #4
 800dde6:	4632      	mov	r2, r6
 800dde8:	4639      	mov	r1, r7
 800ddea:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ddec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ddf0:	f7ff b816 	b.w	800ce20 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ddf4:	6868      	ldr	r0, [r5, #4]
 800ddf6:	f108 0114 	add.w	r1, r8, #20
 800ddfa:	892a      	ldrh	r2, [r5, #8]
 800ddfc:	8903      	ldrh	r3, [r0, #8]
 800ddfe:	1a9b      	subs	r3, r3, r2
 800de00:	2201      	movs	r2, #1
 800de02:	b29b      	uxth	r3, r3
 800de04:	f7fc fe20 	bl	800aa48 <pbuf_copy_partial>
 800de08:	e7df      	b.n	800ddca <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800de0a:	4628      	mov	r0, r5
}
 800de0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800de10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de14:	e7fa      	b.n	800de0c <tcp_zero_window_probe+0xb0>
 800de16:	bf00      	nop
 800de18:	08015cb5 	.word	0x08015cb5
 800de1c:	080163c4 	.word	0x080163c4
 800de20:	080137b4 	.word	0x080137b4

0800de24 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800de24:	b570      	push	{r4, r5, r6, lr}
 800de26:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de28:	200a      	movs	r0, #10
{
 800de2a:	460e      	mov	r6, r1
 800de2c:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800de2e:	f7fc f963 	bl	800a0f8 <memp_malloc>
  if (timeout == NULL) {
 800de32:	b938      	cbnz	r0, 800de44 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de34:	4b10      	ldr	r3, [pc, #64]	; (800de78 <sys_timeout_abs+0x54>)
 800de36:	22be      	movs	r2, #190	; 0xbe
 800de38:	4910      	ldr	r1, [pc, #64]	; (800de7c <sys_timeout_abs+0x58>)
 800de3a:	4811      	ldr	r0, [pc, #68]	; (800de80 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800de3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800de40:	f000 bc12 	b.w	800e668 <iprintf>
  timeout->next = NULL;
 800de44:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800de46:	4a0f      	ldr	r2, [pc, #60]	; (800de84 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800de48:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800de4a:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800de4c:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800de4e:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800de52:	b90b      	cbnz	r3, 800de58 <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800de54:	6010      	str	r0, [r2, #0]
}
 800de56:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800de58:	6859      	ldr	r1, [r3, #4]
 800de5a:	1a61      	subs	r1, r4, r1
 800de5c:	2900      	cmp	r1, #0
 800de5e:	da01      	bge.n	800de64 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800de60:	6003      	str	r3, [r0, #0]
 800de62:	e7f7      	b.n	800de54 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800de64:	4619      	mov	r1, r3
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	b11b      	cbz	r3, 800de72 <sys_timeout_abs+0x4e>
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	1aa2      	subs	r2, r4, r2
 800de6e:	2a00      	cmp	r2, #0
 800de70:	daf8      	bge.n	800de64 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800de72:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800de74:	6008      	str	r0, [r1, #0]
        break;
 800de76:	e7ee      	b.n	800de56 <sys_timeout_abs+0x32>
 800de78:	080163e7 	.word	0x080163e7
 800de7c:	0801645e 	.word	0x0801645e
 800de80:	080137b4 	.word	0x080137b4
 800de84:	20014068 	.word	0x20014068

0800de88 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800de88:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800de8a:	6843      	ldr	r3, [r0, #4]
{
 800de8c:	4604      	mov	r4, r0
  cyclic->handler();
 800de8e:	4798      	blx	r3

  now = sys_now();
 800de90:	f7f2 fde6 	bl	8000a60 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800de94:	4b07      	ldr	r3, [pc, #28]	; (800deb4 <lwip_cyclic_timer+0x2c>)
 800de96:	6825      	ldr	r5, [r4, #0]
 800de98:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800de9a:	4907      	ldr	r1, [pc, #28]	; (800deb8 <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800de9c:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800de9e:	1a1a      	subs	r2, r3, r0
 800dea0:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800dea2:	4622      	mov	r2, r4
 800dea4:	bfb4      	ite	lt
 800dea6:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800dea8:	4618      	movge	r0, r3
#endif
  }
}
 800deaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800deae:	f7ff bfb9 	b.w	800de24 <sys_timeout_abs>
 800deb2:	bf00      	nop
 800deb4:	20014068 	.word	0x20014068
 800deb8:	0800de89 	.word	0x0800de89

0800debc <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800debc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800dec0:	b570      	push	{r4, r5, r6, lr}
 800dec2:	4604      	mov	r4, r0
 800dec4:	460d      	mov	r5, r1
 800dec6:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800dec8:	d306      	bcc.n	800ded8 <sys_timeout+0x1c>
 800deca:	4b08      	ldr	r3, [pc, #32]	; (800deec <sys_timeout+0x30>)
 800decc:	f240 1229 	movw	r2, #297	; 0x129
 800ded0:	4907      	ldr	r1, [pc, #28]	; (800def0 <sys_timeout+0x34>)
 800ded2:	4808      	ldr	r0, [pc, #32]	; (800def4 <sys_timeout+0x38>)
 800ded4:	f000 fbc8 	bl	800e668 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ded8:	f7f2 fdc2 	bl	8000a60 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dedc:	4632      	mov	r2, r6
 800dede:	4629      	mov	r1, r5
 800dee0:	4420      	add	r0, r4
#endif
}
 800dee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800dee6:	f7ff bf9d 	b.w	800de24 <sys_timeout_abs>
 800deea:	bf00      	nop
 800deec:	080163e7 	.word	0x080163e7
 800def0:	0801649b 	.word	0x0801649b
 800def4:	080137b4 	.word	0x080137b4

0800def8 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800def8:	4b08      	ldr	r3, [pc, #32]	; (800df1c <tcp_timer_needed+0x24>)
 800defa:	689a      	ldr	r2, [r3, #8]
 800defc:	b962      	cbnz	r2, 800df18 <tcp_timer_needed+0x20>
 800defe:	4a08      	ldr	r2, [pc, #32]	; (800df20 <tcp_timer_needed+0x28>)
 800df00:	6812      	ldr	r2, [r2, #0]
 800df02:	b912      	cbnz	r2, 800df0a <tcp_timer_needed+0x12>
 800df04:	4a07      	ldr	r2, [pc, #28]	; (800df24 <tcp_timer_needed+0x2c>)
 800df06:	6812      	ldr	r2, [r2, #0]
 800df08:	b132      	cbz	r2, 800df18 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800df0a:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df0c:	4906      	ldr	r1, [pc, #24]	; (800df28 <tcp_timer_needed+0x30>)
 800df0e:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800df10:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df12:	2200      	movs	r2, #0
 800df14:	f7ff bfd2 	b.w	800debc <sys_timeout>
}
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	20014068 	.word	0x20014068
 800df20:	20014014 	.word	0x20014014
 800df24:	20014020 	.word	0x20014020
 800df28:	0800df2d 	.word	0x0800df2d

0800df2c <tcpip_tcp_timer>:
{
 800df2c:	b508      	push	{r3, lr}
  tcp_tmr();
 800df2e:	f7fd fc0b 	bl	800b748 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800df32:	4b08      	ldr	r3, [pc, #32]	; (800df54 <tcpip_tcp_timer+0x28>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	b913      	cbnz	r3, 800df3e <tcpip_tcp_timer+0x12>
 800df38:	4b07      	ldr	r3, [pc, #28]	; (800df58 <tcpip_tcp_timer+0x2c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	b133      	cbz	r3, 800df4c <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df3e:	2200      	movs	r2, #0
 800df40:	4906      	ldr	r1, [pc, #24]	; (800df5c <tcpip_tcp_timer+0x30>)
 800df42:	20fa      	movs	r0, #250	; 0xfa
}
 800df44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800df48:	f7ff bfb8 	b.w	800debc <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800df4c:	4a04      	ldr	r2, [pc, #16]	; (800df60 <tcpip_tcp_timer+0x34>)
 800df4e:	6093      	str	r3, [r2, #8]
}
 800df50:	bd08      	pop	{r3, pc}
 800df52:	bf00      	nop
 800df54:	20014014 	.word	0x20014014
 800df58:	20014020 	.word	0x20014020
 800df5c:	0800df2d 	.word	0x0800df2d
 800df60:	20014068 	.word	0x20014068

0800df64 <sys_timeouts_init>:
{
 800df64:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800df66:	4c08      	ldr	r4, [pc, #32]	; (800df88 <sys_timeouts_init+0x24>)
 800df68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800df6c:	4907      	ldr	r1, [pc, #28]	; (800df8c <sys_timeouts_init+0x28>)
 800df6e:	f104 0208 	add.w	r2, r4, #8
 800df72:	f7ff ffa3 	bl	800debc <sys_timeout>
 800df76:	f104 0210 	add.w	r2, r4, #16
 800df7a:	4904      	ldr	r1, [pc, #16]	; (800df8c <sys_timeouts_init+0x28>)
 800df7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800df80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800df84:	f7ff bf9a 	b.w	800debc <sys_timeout>
 800df88:	080136d4 	.word	0x080136d4
 800df8c:	0800de89 	.word	0x0800de89

0800df90 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800df90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800df92:	f7f2 fd65 	bl	8000a60 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800df96:	4d0b      	ldr	r5, [pc, #44]	; (800dfc4 <sys_check_timeouts+0x34>)
  now = sys_now();
 800df98:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800df9a:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800df9c:	b181      	cbz	r1, 800dfc0 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800df9e:	684b      	ldr	r3, [r1, #4]
 800dfa0:	1ae2      	subs	r2, r4, r3
 800dfa2:	2a00      	cmp	r2, #0
 800dfa4:	db0c      	blt.n	800dfc0 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800dfa6:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dfa8:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800dfaa:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800dfac:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800dfae:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800dfb2:	f7fc f8d1 	bl	800a158 <memp_free>
    if (handler != NULL) {
 800dfb6:	2e00      	cmp	r6, #0
 800dfb8:	d0ef      	beq.n	800df9a <sys_check_timeouts+0xa>
      handler(arg);
 800dfba:	4638      	mov	r0, r7
 800dfbc:	47b0      	blx	r6
 800dfbe:	e7ec      	b.n	800df9a <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800dfc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20014068 	.word	0x20014068

0800dfc8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800dfc8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800dfca:	4c07      	ldr	r4, [pc, #28]	; (800dfe8 <sys_timeouts_sleeptime+0x20>)
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	b13b      	cbz	r3, 800dfe0 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800dfd0:	f7f2 fd46 	bl	8000a60 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
    return 0;
 800dfd8:	1a18      	subs	r0, r3, r0
 800dfda:	bf48      	it	mi
 800dfdc:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800dfde:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800dfe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfe4:	e7fb      	b.n	800dfde <sys_timeouts_sleeptime+0x16>
 800dfe6:	bf00      	nop
 800dfe8:	20014068 	.word	0x20014068

0800dfec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800dfec:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dfee:	f000 fbc9 	bl	800e784 <rand>
 800dff2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800dff6:	4b02      	ldr	r3, [pc, #8]	; (800e000 <udp_init+0x14>)
 800dff8:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800dffc:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800dffe:	bd08      	pop	{r3, pc}
 800e000:	20001a68 	.word	0x20001a68

0800e004 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e008:	4688      	mov	r8, r1
 800e00a:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e00c:	4606      	mov	r6, r0
 800e00e:	b928      	cbnz	r0, 800e01c <udp_input+0x18>
 800e010:	4b5f      	ldr	r3, [pc, #380]	; (800e190 <udp_input+0x18c>)
 800e012:	22cf      	movs	r2, #207	; 0xcf
 800e014:	495f      	ldr	r1, [pc, #380]	; (800e194 <udp_input+0x190>)
 800e016:	4860      	ldr	r0, [pc, #384]	; (800e198 <udp_input+0x194>)
 800e018:	f000 fb26 	bl	800e668 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e01c:	f1b8 0f00 	cmp.w	r8, #0
 800e020:	d105      	bne.n	800e02e <udp_input+0x2a>
 800e022:	4b5b      	ldr	r3, [pc, #364]	; (800e190 <udp_input+0x18c>)
 800e024:	22d0      	movs	r2, #208	; 0xd0
 800e026:	495d      	ldr	r1, [pc, #372]	; (800e19c <udp_input+0x198>)
 800e028:	485b      	ldr	r0, [pc, #364]	; (800e198 <udp_input+0x194>)
 800e02a:	f000 fb1d 	bl	800e668 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e02e:	8973      	ldrh	r3, [r6, #10]
 800e030:	2b07      	cmp	r3, #7
 800e032:	d805      	bhi.n	800e040 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e034:	4630      	mov	r0, r6
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e036:	b005      	add	sp, #20
 800e038:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800e03c:	f7fc bae8 	b.w	800a610 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e040:	4f57      	ldr	r7, [pc, #348]	; (800e1a0 <udp_input+0x19c>)
  uncon_pcb = NULL;
 800e042:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800e044:	6874      	ldr	r4, [r6, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e046:	6839      	ldr	r1, [r7, #0]
  prev = NULL;
 800e048:	46aa      	mov	sl, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e04a:	6978      	ldr	r0, [r7, #20]
 800e04c:	f7fb f8df 	bl	800920e <ip4_addr_isbroadcast_u32>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e050:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800e1b0 <udp_input+0x1ac>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e054:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800e056:	8820      	ldrh	r0, [r4, #0]
 800e058:	f7fb fd1e 	bl	8009a98 <lwip_htons>
 800e05c:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800e05e:	8860      	ldrh	r0, [r4, #2]
 800e060:	f7fb fd1a 	bl	8009a98 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e064:	f8db 4000 	ldr.w	r4, [fp]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e068:	f8df c124 	ldr.w	ip, [pc, #292]	; 800e190 <udp_input+0x18c>
 800e06c:	494d      	ldr	r1, [pc, #308]	; (800e1a4 <udp_input+0x1a0>)
  dest = lwip_ntohs(udphdr->dest);
 800e06e:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e070:	b99c      	cbnz	r4, 800e09a <udp_input+0x96>
  if (pcb != NULL) {
 800e072:	b925      	cbnz	r5, 800e07e <udp_input+0x7a>
  if (for_us) {
 800e074:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d1da      	bne.n	800e034 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e07e:	2108      	movs	r1, #8
 800e080:	4630      	mov	r0, r6
 800e082:	f7fc fa91 	bl	800a5a8 <pbuf_remove_header>
 800e086:	2800      	cmp	r0, #0
 800e088:	d05e      	beq.n	800e148 <udp_input+0x144>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e08a:	4b41      	ldr	r3, [pc, #260]	; (800e190 <udp_input+0x18c>)
 800e08c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e090:	4945      	ldr	r1, [pc, #276]	; (800e1a8 <udp_input+0x1a4>)
 800e092:	4841      	ldr	r0, [pc, #260]	; (800e198 <udp_input+0x194>)
 800e094:	f000 fae8 	bl	800e668 <iprintf>
 800e098:	e7cc      	b.n	800e034 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800e09a:	8a62      	ldrh	r2, [r4, #18]
 800e09c:	9803      	ldr	r0, [sp, #12]
 800e09e:	4282      	cmp	r2, r0
 800e0a0:	d14d      	bne.n	800e13e <udp_input+0x13a>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e0a2:	f1b8 0f00 	cmp.w	r8, #0
 800e0a6:	d107      	bne.n	800e0b8 <udp_input+0xb4>
 800e0a8:	4663      	mov	r3, ip
 800e0aa:	2288      	movs	r2, #136	; 0x88
 800e0ac:	483a      	ldr	r0, [pc, #232]	; (800e198 <udp_input+0x194>)
 800e0ae:	f000 fadb 	bl	800e668 <iprintf>
 800e0b2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e190 <udp_input+0x18c>
 800e0b6:	493b      	ldr	r1, [pc, #236]	; (800e1a4 <udp_input+0x1a0>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0b8:	7a20      	ldrb	r0, [r4, #8]
 800e0ba:	b130      	cbz	r0, 800e0ca <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800e0c2:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0c4:	b2d2      	uxtb	r2, r2
 800e0c6:	4290      	cmp	r0, r2
 800e0c8:	d139      	bne.n	800e13e <udp_input+0x13a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0ca:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 800e0cc:	f1b9 0f00 	cmp.w	r9, #0
 800e0d0:	d030      	beq.n	800e134 <udp_input+0x130>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0d2:	b13a      	cbz	r2, 800e0e4 <udp_input+0xe0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0d4:	6978      	ldr	r0, [r7, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e0d6:	1c43      	adds	r3, r0, #1
 800e0d8:	d004      	beq.n	800e0e4 <udp_input+0xe0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e0da:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e0dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0e0:	4218      	tst	r0, r3
 800e0e2:	d12c      	bne.n	800e13e <udp_input+0x13a>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e0e4:	7c20      	ldrb	r0, [r4, #16]
 800e0e6:	0743      	lsls	r3, r0, #29
 800e0e8:	d40e      	bmi.n	800e108 <udp_input+0x104>
        if (uncon_pcb == NULL) {
 800e0ea:	b35d      	cbz	r5, 800e144 <udp_input+0x140>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e0ec:	f1b9 0f00 	cmp.w	r9, #0
 800e0f0:	d00a      	beq.n	800e108 <udp_input+0x104>
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	d107      	bne.n	800e108 <udp_input+0x104>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e0f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0fc:	682b      	ldr	r3, [r5, #0]
 800e0fe:	4283      	cmp	r3, r0
 800e100:	d002      	beq.n	800e108 <udp_input+0x104>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800e102:	4290      	cmp	r0, r2
 800e104:	bf08      	it	eq
 800e106:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800e108:	8aa2      	ldrh	r2, [r4, #20]
 800e10a:	9b02      	ldr	r3, [sp, #8]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d116      	bne.n	800e13e <udp_input+0x13a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e110:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800e112:	b112      	cbz	r2, 800e11a <udp_input+0x116>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e114:	6938      	ldr	r0, [r7, #16]
 800e116:	4282      	cmp	r2, r0
 800e118:	d111      	bne.n	800e13e <udp_input+0x13a>
        if (prev != NULL) {
 800e11a:	f1ba 0f00 	cmp.w	sl, #0
 800e11e:	d007      	beq.n	800e130 <udp_input+0x12c>
          prev->next = pcb->next;
 800e120:	68e3      	ldr	r3, [r4, #12]
 800e122:	f8ca 300c 	str.w	r3, [sl, #12]
          pcb->next = udp_pcbs;
 800e126:	f8db 3000 	ldr.w	r3, [fp]
          udp_pcbs = pcb;
 800e12a:	f8cb 4000 	str.w	r4, [fp]
          pcb->next = udp_pcbs;
 800e12e:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800e130:	4625      	mov	r5, r4
 800e132:	e7a4      	b.n	800e07e <udp_input+0x7a>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e134:	2a00      	cmp	r2, #0
 800e136:	d0d5      	beq.n	800e0e4 <udp_input+0xe0>
 800e138:	6978      	ldr	r0, [r7, #20]
 800e13a:	4290      	cmp	r0, r2
 800e13c:	d0d2      	beq.n	800e0e4 <udp_input+0xe0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e13e:	46a2      	mov	sl, r4
 800e140:	68e4      	ldr	r4, [r4, #12]
 800e142:	e795      	b.n	800e070 <udp_input+0x6c>
 800e144:	4625      	mov	r5, r4
 800e146:	e7df      	b.n	800e108 <udp_input+0x104>
    if (pcb != NULL) {
 800e148:	b16d      	cbz	r5, 800e166 <udp_input+0x162>
      if (pcb->recv != NULL) {
 800e14a:	69ac      	ldr	r4, [r5, #24]
 800e14c:	2c00      	cmp	r4, #0
 800e14e:	f43f af71 	beq.w	800e034 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e152:	9b02      	ldr	r3, [sp, #8]
 800e154:	4632      	mov	r2, r6
 800e156:	4629      	mov	r1, r5
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	4b14      	ldr	r3, [pc, #80]	; (800e1ac <udp_input+0x1a8>)
 800e15c:	69e8      	ldr	r0, [r5, #28]
 800e15e:	47a0      	blx	r4
}
 800e160:	b005      	add	sp, #20
 800e162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e166:	f1b9 0f00 	cmp.w	r9, #0
 800e16a:	f47f af63 	bne.w	800e034 <udp_input+0x30>
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e174:	2be0      	cmp	r3, #224	; 0xe0
 800e176:	f43f af5d 	beq.w	800e034 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e17a:	89b9      	ldrh	r1, [r7, #12]
 800e17c:	4630      	mov	r0, r6
 800e17e:	3108      	adds	r1, #8
 800e180:	b209      	sxth	r1, r1
 800e182:	f7fc fa3d 	bl	800a600 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e186:	2103      	movs	r1, #3
 800e188:	4630      	mov	r0, r6
 800e18a:	f7fa feaf 	bl	8008eec <icmp_dest_unreach>
 800e18e:	e751      	b.n	800e034 <udp_input+0x30>
 800e190:	080164d1 	.word	0x080164d1
 800e194:	08016543 	.word	0x08016543
 800e198:	080137b4 	.word	0x080137b4
 800e19c:	0801655b 	.word	0x0801655b
 800e1a0:	2001021c 	.word	0x2001021c
 800e1a4:	08016574 	.word	0x08016574
 800e1a8:	08016599 	.word	0x08016599
 800e1ac:	2001022c 	.word	0x2001022c
 800e1b0:	20014074 	.word	0x20014074

0800e1b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800e1b8:	4c2b      	ldr	r4, [pc, #172]	; (800e268 <udp_bind+0xb4>)
 800e1ba:	2900      	cmp	r1, #0
 800e1bc:	bf18      	it	ne
 800e1be:	460c      	movne	r4, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1c0:	b950      	cbnz	r0, 800e1d8 <udp_bind+0x24>
 800e1c2:	4b2a      	ldr	r3, [pc, #168]	; (800e26c <udp_bind+0xb8>)
 800e1c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800e1c8:	4929      	ldr	r1, [pc, #164]	; (800e270 <udp_bind+0xbc>)
 800e1ca:	482a      	ldr	r0, [pc, #168]	; (800e274 <udp_bind+0xc0>)
 800e1cc:	f000 fa4c 	bl	800e668 <iprintf>
 800e1d0:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e1d8:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 800e27c <udp_bind+0xc8>
 800e1dc:	f8dc 5000 	ldr.w	r5, [ip]
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	b9c9      	cbnz	r1, 800e218 <udp_bind+0x64>
  if (port == 0) {
 800e1e4:	2a00      	cmp	r2, #0
 800e1e6:	d13c      	bne.n	800e262 <udp_bind+0xae>
 800e1e8:	4f23      	ldr	r7, [pc, #140]	; (800e278 <udp_bind+0xc4>)
 800e1ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e1ee:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800e1f2:	883a      	ldrh	r2, [r7, #0]
 800e1f4:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e1f6:	462e      	mov	r6, r5
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e1f8:	bf16      	itet	ne
 800e1fa:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e1fc:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e200:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e202:	b97e      	cbnz	r6, 800e224 <udp_bind+0x70>
 800e204:	803a      	strh	r2, [r7, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e206:	6823      	ldr	r3, [r4, #0]
  pcb->local_port = port;
 800e208:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e20a:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800e20c:	b911      	cbnz	r1, 800e214 <udp_bind+0x60>
    pcb->next = udp_pcbs;
 800e20e:	60c5      	str	r5, [r0, #12]
    udp_pcbs = pcb;
 800e210:	f8cc 0000 	str.w	r0, [ip]
  return ERR_OK;
 800e214:	2000      	movs	r0, #0
 800e216:	e7dd      	b.n	800e1d4 <udp_bind+0x20>
    if (pcb == ipcb) {
 800e218:	4281      	cmp	r1, r0
 800e21a:	d001      	beq.n	800e220 <udp_bind+0x6c>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e21c:	68c9      	ldr	r1, [r1, #12]
 800e21e:	e7e0      	b.n	800e1e2 <udp_bind+0x2e>
      rebind = 1;
 800e220:	2101      	movs	r1, #1
 800e222:	e7df      	b.n	800e1e4 <udp_bind+0x30>
    if (pcb->local_port == udp_port) {
 800e224:	f8b6 8012 	ldrh.w	r8, [r6, #18]
 800e228:	4590      	cmp	r8, r2
 800e22a:	d107      	bne.n	800e23c <udp_bind+0x88>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e22c:	3b01      	subs	r3, #1
 800e22e:	b29b      	uxth	r3, r3
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1df      	bne.n	800e1f4 <udp_bind+0x40>
 800e234:	803a      	strh	r2, [r7, #0]
      return ERR_USE;
 800e236:	f06f 0007 	mvn.w	r0, #7
 800e23a:	e7cb      	b.n	800e1d4 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e23c:	68f6      	ldr	r6, [r6, #12]
 800e23e:	e7e0      	b.n	800e202 <udp_bind+0x4e>
      if (pcb != ipcb) {
 800e240:	4283      	cmp	r3, r0
 800e242:	d00a      	beq.n	800e25a <udp_bind+0xa6>
          if ((ipcb->local_port == port) &&
 800e244:	8a5e      	ldrh	r6, [r3, #18]
 800e246:	4296      	cmp	r6, r2
 800e248:	d107      	bne.n	800e25a <udp_bind+0xa6>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800e24a:	6827      	ldr	r7, [r4, #0]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e24c:	681e      	ldr	r6, [r3, #0]
          if ((ipcb->local_port == port) &&
 800e24e:	42be      	cmp	r6, r7
 800e250:	d0f1      	beq.n	800e236 <udp_bind+0x82>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800e252:	2f00      	cmp	r7, #0
 800e254:	d0ef      	beq.n	800e236 <udp_bind+0x82>
              ip_addr_isany(&ipcb->local_ip))) {
 800e256:	2e00      	cmp	r6, #0
 800e258:	d0ed      	beq.n	800e236 <udp_bind+0x82>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d1ef      	bne.n	800e240 <udp_bind+0x8c>
 800e260:	e7d1      	b.n	800e206 <udp_bind+0x52>
 800e262:	462b      	mov	r3, r5
 800e264:	e7fa      	b.n	800e25c <udp_bind+0xa8>
 800e266:	bf00      	nop
 800e268:	080135b0 	.word	0x080135b0
 800e26c:	080164d1 	.word	0x080164d1
 800e270:	080165b4 	.word	0x080165b4
 800e274:	080137b4 	.word	0x080137b4
 800e278:	20001a68 	.word	0x20001a68
 800e27c:	20014074 	.word	0x20014074

0800e280 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e280:	b930      	cbnz	r0, 800e290 <udp_recv+0x10>
 800e282:	4b05      	ldr	r3, [pc, #20]	; (800e298 <udp_recv+0x18>)
 800e284:	f240 428a 	movw	r2, #1162	; 0x48a
 800e288:	4904      	ldr	r1, [pc, #16]	; (800e29c <udp_recv+0x1c>)
 800e28a:	4805      	ldr	r0, [pc, #20]	; (800e2a0 <udp_recv+0x20>)
 800e28c:	f000 b9ec 	b.w	800e668 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800e290:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	080164d1 	.word	0x080164d1
 800e29c:	080167d8 	.word	0x080167d8
 800e2a0:	080137b4 	.word	0x080137b4

0800e2a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e2a4:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e2a6:	2000      	movs	r0, #0
 800e2a8:	f7fb ff26 	bl	800a0f8 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e2ac:	4604      	mov	r4, r0
 800e2ae:	b128      	cbz	r0, 800e2bc <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e2b0:	2220      	movs	r2, #32
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	f000 f9d0 	bl	800e658 <memset>
    pcb->ttl = UDP_TTL;
 800e2b8:	23ff      	movs	r3, #255	; 0xff
 800e2ba:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800e2bc:	4620      	mov	r0, r4
 800e2be:	bd10      	pop	{r4, pc}

0800e2c0 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800e2c0:	f7ff bff0 	b.w	800e2a4 <udp_new>

0800e2c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2c4:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e2c6:	b138      	cbz	r0, 800e2d8 <udp_netif_ip_addr_changed+0x14>
 800e2c8:	6803      	ldr	r3, [r0, #0]
 800e2ca:	b12b      	cbz	r3, 800e2d8 <udp_netif_ip_addr_changed+0x14>
 800e2cc:	b121      	cbz	r1, 800e2d8 <udp_netif_ip_addr_changed+0x14>
 800e2ce:	680b      	ldr	r3, [r1, #0]
 800e2d0:	b113      	cbz	r3, 800e2d8 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e2d2:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <udp_netif_ip_addr_changed+0x28>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	b903      	cbnz	r3, 800e2da <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800e2d8:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e2da:	681c      	ldr	r4, [r3, #0]
 800e2dc:	6802      	ldr	r2, [r0, #0]
 800e2de:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e2e0:	bf04      	itt	eq
 800e2e2:	680a      	ldreq	r2, [r1, #0]
 800e2e4:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	e7f5      	b.n	800e2d6 <udp_netif_ip_addr_changed+0x12>
 800e2ea:	bf00      	nop
 800e2ec:	20014074 	.word	0x20014074

0800e2f0 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e2f0:	8943      	ldrh	r3, [r0, #10]
 800e2f2:	2b0e      	cmp	r3, #14
{
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800e2fa:	d91a      	bls.n	800e332 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e2fc:	7bc3      	ldrb	r3, [r0, #15]
 800e2fe:	b91b      	cbnz	r3, 800e308 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800e300:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800e304:	3301      	adds	r3, #1
 800e306:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e308:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e30a:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800e30c:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800e30e:	07d9      	lsls	r1, r3, #31
 800e310:	d50a      	bpl.n	800e328 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e312:	2b01      	cmp	r3, #1
 800e314:	d111      	bne.n	800e33a <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e316:	7843      	ldrb	r3, [r0, #1]
 800e318:	b933      	cbnz	r3, 800e328 <ethernet_input+0x38>
 800e31a:	7883      	ldrb	r3, [r0, #2]
 800e31c:	2b5e      	cmp	r3, #94	; 0x5e
 800e31e:	d103      	bne.n	800e328 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e320:	7b63      	ldrb	r3, [r4, #13]
 800e322:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e326:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800e328:	2e08      	cmp	r6, #8
 800e32a:	d010      	beq.n	800e34e <ethernet_input+0x5e>
 800e32c:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800e330:	d01d      	beq.n	800e36e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e332:	4620      	mov	r0, r4
 800e334:	f7fc f96c 	bl	800a610 <pbuf_free>
  return ERR_OK;
 800e338:	e017      	b.n	800e36a <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e33a:	2206      	movs	r2, #6
 800e33c:	4913      	ldr	r1, [pc, #76]	; (800e38c <ethernet_input+0x9c>)
 800e33e:	f000 f96d 	bl	800e61c <memcmp>
 800e342:	2800      	cmp	r0, #0
 800e344:	d1f0      	bne.n	800e328 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800e346:	7b63      	ldrb	r3, [r4, #13]
 800e348:	f043 0308 	orr.w	r3, r3, #8
 800e34c:	e7eb      	b.n	800e326 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e34e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e352:	071a      	lsls	r2, r3, #28
 800e354:	d5ed      	bpl.n	800e332 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e356:	210e      	movs	r1, #14
 800e358:	4620      	mov	r0, r4
 800e35a:	f7fc f925 	bl	800a5a8 <pbuf_remove_header>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d1e7      	bne.n	800e332 <ethernet_input+0x42>
        ip4_input(p, netif);
 800e362:	4629      	mov	r1, r5
 800e364:	4620      	mov	r0, r4
 800e366:	f7fa fe11 	bl	8008f8c <ip4_input>
}
 800e36a:	2000      	movs	r0, #0
 800e36c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e36e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e372:	071b      	lsls	r3, r3, #28
 800e374:	d5dd      	bpl.n	800e332 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e376:	210e      	movs	r1, #14
 800e378:	4620      	mov	r0, r4
 800e37a:	f7fc f915 	bl	800a5a8 <pbuf_remove_header>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d1d7      	bne.n	800e332 <ethernet_input+0x42>
        etharp_input(p, netif);
 800e382:	4629      	mov	r1, r5
 800e384:	4620      	mov	r0, r4
 800e386:	f7fa fa5d 	bl	8008844 <etharp_input>
      break;
 800e38a:	e7ee      	b.n	800e36a <ethernet_input+0x7a>
 800e38c:	080136f0 	.word	0x080136f0

0800e390 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e394:	460d      	mov	r5, r1
 800e396:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e398:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800e39c:	4616      	mov	r6, r2
 800e39e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3a0:	f7fb fb7a 	bl	8009a98 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e3a4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800e3a6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f7fc f8f9 	bl	800a5a0 <pbuf_add_header>
 800e3ae:	b9e0      	cbnz	r0, 800e3ea <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e3b0:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800e3b2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	600b      	str	r3, [r1, #0]
 800e3ba:	88bb      	ldrh	r3, [r7, #4]
 800e3bc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e3be:	6833      	ldr	r3, [r6, #0]
 800e3c0:	f8c1 3006 	str.w	r3, [r1, #6]
 800e3c4:	88b3      	ldrh	r3, [r6, #4]
 800e3c6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e3c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e3cc:	2b06      	cmp	r3, #6
 800e3ce:	d006      	beq.n	800e3de <ethernet_output+0x4e>
 800e3d0:	4b08      	ldr	r3, [pc, #32]	; (800e3f4 <ethernet_output+0x64>)
 800e3d2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e3d6:	4908      	ldr	r1, [pc, #32]	; (800e3f8 <ethernet_output+0x68>)
 800e3d8:	4808      	ldr	r0, [pc, #32]	; (800e3fc <ethernet_output+0x6c>)
 800e3da:	f000 f945 	bl	800e668 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e3de:	69a3      	ldr	r3, [r4, #24]
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e3e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800e3e8:	4718      	bx	r3
}
 800e3ea:	f06f 0001 	mvn.w	r0, #1
 800e3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f2:	bf00      	nop
 800e3f4:	08016806 	.word	0x08016806
 800e3f8:	0801687e 	.word	0x0801687e
 800e3fc:	080137b4 	.word	0x080137b4

0800e400 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e400:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800e402:	2304      	movs	r3, #4
{
 800e404:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800e406:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e408:	4668      	mov	r0, sp
 800e40a:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800e40c:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800e40e:	f7f8 fad9 	bl	80069c4 <osMessageCreate>
 800e412:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e414:	fab0 f080 	clz	r0, r0
 800e418:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e41a:	4240      	negs	r0, r0
 800e41c:	b002      	add	sp, #8
 800e41e:	bd10      	pop	{r4, pc}

0800e420 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e420:	b510      	push	{r4, lr}
 800e422:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800e424:	6800      	ldr	r0, [r0, #0]
 800e426:	f7f8 fb3c 	bl	8006aa2 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800e42a:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800e430:	f7f8 bb3e 	b.w	8006ab0 <osMessageDelete>

0800e434 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e434:	2200      	movs	r2, #0
 800e436:	6800      	ldr	r0, [r0, #0]
{
 800e438:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800e43a:	f7f8 fac8 	bl	80069ce <osMessagePut>
 800e43e:	3800      	subs	r0, #0
 800e440:	bf18      	it	ne
 800e442:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e444:	4240      	negs	r0, r0
 800e446:	bd08      	pop	{r3, pc}

0800e448 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e44a:	4617      	mov	r7, r2
 800e44c:	b085      	sub	sp, #20
 800e44e:	4606      	mov	r6, r0
 800e450:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800e452:	f7f8 f9f8 	bl	8006846 <osKernelSysTick>
 800e456:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e458:	b177      	cbz	r7, 800e478 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800e45a:	463a      	mov	r2, r7
 800e45c:	6831      	ldr	r1, [r6, #0]
 800e45e:	a801      	add	r0, sp, #4
 800e460:	f7f8 fadd 	bl	8006a1e <osMessageGet>

    if(event.status == osEventMessage)
 800e464:	9b01      	ldr	r3, [sp, #4]
 800e466:	2b10      	cmp	r3, #16
 800e468:	d10d      	bne.n	800e486 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800e46a:	9b02      	ldr	r3, [sp, #8]
 800e46c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800e46e:	f7f8 f9ea 	bl	8006846 <osKernelSysTick>
 800e472:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e474:	b005      	add	sp, #20
 800e476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800e478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e47c:	6831      	ldr	r1, [r6, #0]
 800e47e:	a801      	add	r0, sp, #4
 800e480:	f7f8 facd 	bl	8006a1e <osMessageGet>
 800e484:	e7f1      	b.n	800e46a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800e486:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e48a:	e7f3      	b.n	800e474 <sys_arch_mbox_fetch+0x2c>

0800e48c <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e48e:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800e490:	2200      	movs	r2, #0
 800e492:	6801      	ldr	r1, [r0, #0]
 800e494:	a801      	add	r0, sp, #4
 800e496:	f7f8 fac2 	bl	8006a1e <osMessageGet>

  if(event.status == osEventMessage)
 800e49a:	9b01      	ldr	r3, [sp, #4]
 800e49c:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800e49e:	bf05      	ittet	eq
 800e4a0:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800e4a2:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800e4a4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    *msg = (void *)event.value.v;
 800e4a8:	6023      	streq	r3, [r4, #0]
  }
}
 800e4aa:	b004      	add	sp, #16
 800e4ac:	bd10      	pop	{r4, pc}

0800e4ae <sys_mbox_valid>:
 800e4ae:	6800      	ldr	r0, [r0, #0]
 800e4b0:	3800      	subs	r0, #0
 800e4b2:	bf18      	it	ne
 800e4b4:	2001      	movne	r0, #1
 800e4b6:	4770      	bx	lr

0800e4b8 <sys_mbox_set_invalid>:
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	6003      	str	r3, [r0, #0]
 800e4bc:	4770      	bx	lr

0800e4be <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e4be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4c0:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800e4c2:	2400      	movs	r4, #0
{
 800e4c4:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e4c6:	a801      	add	r0, sp, #4
 800e4c8:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800e4ca:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800e4cc:	f7f8 fa3c 	bl	8006948 <osSemaphoreCreate>
 800e4d0:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800e4d2:	b130      	cbz	r0, 800e4e2 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800e4d4:	b945      	cbnz	r5, 800e4e8 <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	f7f8 fa4b 	bl	8006972 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800e4dc:	4628      	mov	r0, r5
}
 800e4de:	b002      	add	sp, #8
 800e4e0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800e4e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4e6:	e7fa      	b.n	800e4de <sys_sem_new+0x20>
  return ERR_OK;
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	e7f8      	b.n	800e4de <sys_sem_new+0x20>

0800e4ec <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800e4ec:	b570      	push	{r4, r5, r6, lr}
 800e4ee:	460e      	mov	r6, r1
 800e4f0:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800e4f2:	f7f8 f9a8 	bl	8006846 <osKernelSysTick>
 800e4f6:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800e4f8:	b146      	cbz	r6, 800e50c <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	6828      	ldr	r0, [r5, #0]
 800e4fe:	f7f8 fa38 	bl	8006972 <osSemaphoreWait>
 800e502:	b958      	cbnz	r0, 800e51c <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800e504:	f7f8 f99f 	bl	8006846 <osKernelSysTick>
 800e508:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e50a:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800e50c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e510:	6828      	ldr	r0, [r5, #0]
 800e512:	f7f8 fa2e 	bl	8006972 <osSemaphoreWait>
 800e516:	2800      	cmp	r0, #0
 800e518:	d1f8      	bne.n	800e50c <sys_arch_sem_wait+0x20>
 800e51a:	e7f3      	b.n	800e504 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800e51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e520:	e7f3      	b.n	800e50a <sys_arch_sem_wait+0x1e>

0800e522 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800e522:	6800      	ldr	r0, [r0, #0]
 800e524:	f7f8 ba4a 	b.w	80069bc <osSemaphoreRelease>

0800e528 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800e528:	6800      	ldr	r0, [r0, #0]
 800e52a:	f7f8 ba49 	b.w	80069c0 <osSemaphoreDelete>

0800e52e <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800e52e:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800e530:	3800      	subs	r0, #0
 800e532:	bf18      	it	ne
 800e534:	2001      	movne	r0, #1
 800e536:	4770      	bx	lr

0800e538 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800e538:	2300      	movs	r3, #0
 800e53a:	6003      	str	r3, [r0, #0]
}
 800e53c:	4770      	bx	lr
	...

0800e540 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800e540:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800e542:	4803      	ldr	r0, [pc, #12]	; (800e550 <sys_init+0x10>)
 800e544:	f7f8 f9ab 	bl	800689e <osMutexCreate>
 800e548:	4b02      	ldr	r3, [pc, #8]	; (800e554 <sys_init+0x14>)
 800e54a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800e54c:	bd08      	pop	{r3, pc}
 800e54e:	bf00      	nop
 800e550:	080136fc 	.word	0x080136fc
 800e554:	20014078 	.word	0x20014078

0800e558 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e558:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800e55a:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800e55c:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e55e:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800e560:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800e562:	f7f8 f99c 	bl	800689e <osMutexCreate>
 800e566:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800e568:	fab0 f080 	clz	r0, r0
 800e56c:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800e56e:	4240      	negs	r0, r0
 800e570:	b002      	add	sp, #8
 800e572:	bd10      	pop	{r4, pc}

0800e574 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800e574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e578:	6800      	ldr	r0, [r0, #0]
 800e57a:	f7f8 b993 	b.w	80068a4 <osMutexWait>

0800e57e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800e57e:	6800      	ldr	r0, [r0, #0]
 800e580:	f7f8 b9b5 	b.w	80068ee <osMutexRelease>

0800e584 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800e584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e586:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800e58a:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800e58c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800e58e:	f8ad 100c 	strh.w	r1, [sp, #12]
 800e592:	2100      	movs	r1, #0
 800e594:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800e598:	4611      	mov	r1, r2
 800e59a:	f7f8 f95b 	bl	8006854 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800e59e:	b007      	add	sp, #28
 800e5a0:	f85d fb04 	ldr.w	pc, [sp], #4

0800e5a4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800e5a4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800e5a6:	4b04      	ldr	r3, [pc, #16]	; (800e5b8 <sys_arch_protect+0x14>)
 800e5a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	f7f8 f979 	bl	80068a4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800e5b2:	2001      	movs	r0, #1
 800e5b4:	bd08      	pop	{r3, pc}
 800e5b6:	bf00      	nop
 800e5b8:	20014078 	.word	0x20014078

0800e5bc <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800e5bc:	4b01      	ldr	r3, [pc, #4]	; (800e5c4 <sys_arch_unprotect+0x8>)
 800e5be:	6818      	ldr	r0, [r3, #0]
 800e5c0:	f7f8 b995 	b.w	80068ee <osMutexRelease>
 800e5c4:	20014078 	.word	0x20014078

0800e5c8 <__errno>:
 800e5c8:	4b01      	ldr	r3, [pc, #4]	; (800e5d0 <__errno+0x8>)
 800e5ca:	6818      	ldr	r0, [r3, #0]
 800e5cc:	4770      	bx	lr
 800e5ce:	bf00      	nop
 800e5d0:	20001a6c 	.word	0x20001a6c

0800e5d4 <__libc_init_array>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	4d0d      	ldr	r5, [pc, #52]	; (800e60c <__libc_init_array+0x38>)
 800e5d8:	4c0d      	ldr	r4, [pc, #52]	; (800e610 <__libc_init_array+0x3c>)
 800e5da:	1b64      	subs	r4, r4, r5
 800e5dc:	10a4      	asrs	r4, r4, #2
 800e5de:	2600      	movs	r6, #0
 800e5e0:	42a6      	cmp	r6, r4
 800e5e2:	d109      	bne.n	800e5f8 <__libc_init_array+0x24>
 800e5e4:	4d0b      	ldr	r5, [pc, #44]	; (800e614 <__libc_init_array+0x40>)
 800e5e6:	4c0c      	ldr	r4, [pc, #48]	; (800e618 <__libc_init_array+0x44>)
 800e5e8:	f001 f90c 	bl	800f804 <_init>
 800e5ec:	1b64      	subs	r4, r4, r5
 800e5ee:	10a4      	asrs	r4, r4, #2
 800e5f0:	2600      	movs	r6, #0
 800e5f2:	42a6      	cmp	r6, r4
 800e5f4:	d105      	bne.n	800e602 <__libc_init_array+0x2e>
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5fc:	4798      	blx	r3
 800e5fe:	3601      	adds	r6, #1
 800e600:	e7ee      	b.n	800e5e0 <__libc_init_array+0xc>
 800e602:	f855 3b04 	ldr.w	r3, [r5], #4
 800e606:	4798      	blx	r3
 800e608:	3601      	adds	r6, #1
 800e60a:	e7f2      	b.n	800e5f2 <__libc_init_array+0x1e>
 800e60c:	08016a00 	.word	0x08016a00
 800e610:	08016a00 	.word	0x08016a00
 800e614:	08016a00 	.word	0x08016a00
 800e618:	08016a04 	.word	0x08016a04

0800e61c <memcmp>:
 800e61c:	b510      	push	{r4, lr}
 800e61e:	3901      	subs	r1, #1
 800e620:	4402      	add	r2, r0
 800e622:	4290      	cmp	r0, r2
 800e624:	d101      	bne.n	800e62a <memcmp+0xe>
 800e626:	2000      	movs	r0, #0
 800e628:	e005      	b.n	800e636 <memcmp+0x1a>
 800e62a:	7803      	ldrb	r3, [r0, #0]
 800e62c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e630:	42a3      	cmp	r3, r4
 800e632:	d001      	beq.n	800e638 <memcmp+0x1c>
 800e634:	1b18      	subs	r0, r3, r4
 800e636:	bd10      	pop	{r4, pc}
 800e638:	3001      	adds	r0, #1
 800e63a:	e7f2      	b.n	800e622 <memcmp+0x6>

0800e63c <memcpy>:
 800e63c:	440a      	add	r2, r1
 800e63e:	4291      	cmp	r1, r2
 800e640:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e644:	d100      	bne.n	800e648 <memcpy+0xc>
 800e646:	4770      	bx	lr
 800e648:	b510      	push	{r4, lr}
 800e64a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e64e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e652:	4291      	cmp	r1, r2
 800e654:	d1f9      	bne.n	800e64a <memcpy+0xe>
 800e656:	bd10      	pop	{r4, pc}

0800e658 <memset>:
 800e658:	4402      	add	r2, r0
 800e65a:	4603      	mov	r3, r0
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d100      	bne.n	800e662 <memset+0xa>
 800e660:	4770      	bx	lr
 800e662:	f803 1b01 	strb.w	r1, [r3], #1
 800e666:	e7f9      	b.n	800e65c <memset+0x4>

0800e668 <iprintf>:
 800e668:	b40f      	push	{r0, r1, r2, r3}
 800e66a:	4b0a      	ldr	r3, [pc, #40]	; (800e694 <iprintf+0x2c>)
 800e66c:	b513      	push	{r0, r1, r4, lr}
 800e66e:	681c      	ldr	r4, [r3, #0]
 800e670:	b124      	cbz	r4, 800e67c <iprintf+0x14>
 800e672:	69a3      	ldr	r3, [r4, #24]
 800e674:	b913      	cbnz	r3, 800e67c <iprintf+0x14>
 800e676:	4620      	mov	r0, r4
 800e678:	f000 fac2 	bl	800ec00 <__sinit>
 800e67c:	ab05      	add	r3, sp, #20
 800e67e:	9a04      	ldr	r2, [sp, #16]
 800e680:	68a1      	ldr	r1, [r4, #8]
 800e682:	9301      	str	r3, [sp, #4]
 800e684:	4620      	mov	r0, r4
 800e686:	f000 fce5 	bl	800f054 <_vfiprintf_r>
 800e68a:	b002      	add	sp, #8
 800e68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e690:	b004      	add	sp, #16
 800e692:	4770      	bx	lr
 800e694:	20001a6c 	.word	0x20001a6c

0800e698 <_puts_r>:
 800e698:	b570      	push	{r4, r5, r6, lr}
 800e69a:	460e      	mov	r6, r1
 800e69c:	4605      	mov	r5, r0
 800e69e:	b118      	cbz	r0, 800e6a8 <_puts_r+0x10>
 800e6a0:	6983      	ldr	r3, [r0, #24]
 800e6a2:	b90b      	cbnz	r3, 800e6a8 <_puts_r+0x10>
 800e6a4:	f000 faac 	bl	800ec00 <__sinit>
 800e6a8:	69ab      	ldr	r3, [r5, #24]
 800e6aa:	68ac      	ldr	r4, [r5, #8]
 800e6ac:	b913      	cbnz	r3, 800e6b4 <_puts_r+0x1c>
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f000 faa6 	bl	800ec00 <__sinit>
 800e6b4:	4b2c      	ldr	r3, [pc, #176]	; (800e768 <_puts_r+0xd0>)
 800e6b6:	429c      	cmp	r4, r3
 800e6b8:	d120      	bne.n	800e6fc <_puts_r+0x64>
 800e6ba:	686c      	ldr	r4, [r5, #4]
 800e6bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e6be:	07db      	lsls	r3, r3, #31
 800e6c0:	d405      	bmi.n	800e6ce <_puts_r+0x36>
 800e6c2:	89a3      	ldrh	r3, [r4, #12]
 800e6c4:	0598      	lsls	r0, r3, #22
 800e6c6:	d402      	bmi.n	800e6ce <_puts_r+0x36>
 800e6c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e6ca:	f000 fb49 	bl	800ed60 <__retarget_lock_acquire_recursive>
 800e6ce:	89a3      	ldrh	r3, [r4, #12]
 800e6d0:	0719      	lsls	r1, r3, #28
 800e6d2:	d51d      	bpl.n	800e710 <_puts_r+0x78>
 800e6d4:	6923      	ldr	r3, [r4, #16]
 800e6d6:	b1db      	cbz	r3, 800e710 <_puts_r+0x78>
 800e6d8:	3e01      	subs	r6, #1
 800e6da:	68a3      	ldr	r3, [r4, #8]
 800e6dc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	60a3      	str	r3, [r4, #8]
 800e6e4:	bb39      	cbnz	r1, 800e736 <_puts_r+0x9e>
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	da38      	bge.n	800e75c <_puts_r+0xc4>
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	210a      	movs	r1, #10
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	f000 f88e 	bl	800e810 <__swbuf_r>
 800e6f4:	3001      	adds	r0, #1
 800e6f6:	d011      	beq.n	800e71c <_puts_r+0x84>
 800e6f8:	250a      	movs	r5, #10
 800e6fa:	e011      	b.n	800e720 <_puts_r+0x88>
 800e6fc:	4b1b      	ldr	r3, [pc, #108]	; (800e76c <_puts_r+0xd4>)
 800e6fe:	429c      	cmp	r4, r3
 800e700:	d101      	bne.n	800e706 <_puts_r+0x6e>
 800e702:	68ac      	ldr	r4, [r5, #8]
 800e704:	e7da      	b.n	800e6bc <_puts_r+0x24>
 800e706:	4b1a      	ldr	r3, [pc, #104]	; (800e770 <_puts_r+0xd8>)
 800e708:	429c      	cmp	r4, r3
 800e70a:	bf08      	it	eq
 800e70c:	68ec      	ldreq	r4, [r5, #12]
 800e70e:	e7d5      	b.n	800e6bc <_puts_r+0x24>
 800e710:	4621      	mov	r1, r4
 800e712:	4628      	mov	r0, r5
 800e714:	f000 f8ce 	bl	800e8b4 <__swsetup_r>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d0dd      	beq.n	800e6d8 <_puts_r+0x40>
 800e71c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e722:	07da      	lsls	r2, r3, #31
 800e724:	d405      	bmi.n	800e732 <_puts_r+0x9a>
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	059b      	lsls	r3, r3, #22
 800e72a:	d402      	bmi.n	800e732 <_puts_r+0x9a>
 800e72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e72e:	f000 fb18 	bl	800ed62 <__retarget_lock_release_recursive>
 800e732:	4628      	mov	r0, r5
 800e734:	bd70      	pop	{r4, r5, r6, pc}
 800e736:	2b00      	cmp	r3, #0
 800e738:	da04      	bge.n	800e744 <_puts_r+0xac>
 800e73a:	69a2      	ldr	r2, [r4, #24]
 800e73c:	429a      	cmp	r2, r3
 800e73e:	dc06      	bgt.n	800e74e <_puts_r+0xb6>
 800e740:	290a      	cmp	r1, #10
 800e742:	d004      	beq.n	800e74e <_puts_r+0xb6>
 800e744:	6823      	ldr	r3, [r4, #0]
 800e746:	1c5a      	adds	r2, r3, #1
 800e748:	6022      	str	r2, [r4, #0]
 800e74a:	7019      	strb	r1, [r3, #0]
 800e74c:	e7c5      	b.n	800e6da <_puts_r+0x42>
 800e74e:	4622      	mov	r2, r4
 800e750:	4628      	mov	r0, r5
 800e752:	f000 f85d 	bl	800e810 <__swbuf_r>
 800e756:	3001      	adds	r0, #1
 800e758:	d1bf      	bne.n	800e6da <_puts_r+0x42>
 800e75a:	e7df      	b.n	800e71c <_puts_r+0x84>
 800e75c:	6823      	ldr	r3, [r4, #0]
 800e75e:	250a      	movs	r5, #10
 800e760:	1c5a      	adds	r2, r3, #1
 800e762:	6022      	str	r2, [r4, #0]
 800e764:	701d      	strb	r5, [r3, #0]
 800e766:	e7db      	b.n	800e720 <_puts_r+0x88>
 800e768:	08016984 	.word	0x08016984
 800e76c:	080169a4 	.word	0x080169a4
 800e770:	08016964 	.word	0x08016964

0800e774 <puts>:
 800e774:	4b02      	ldr	r3, [pc, #8]	; (800e780 <puts+0xc>)
 800e776:	4601      	mov	r1, r0
 800e778:	6818      	ldr	r0, [r3, #0]
 800e77a:	f7ff bf8d 	b.w	800e698 <_puts_r>
 800e77e:	bf00      	nop
 800e780:	20001a6c 	.word	0x20001a6c

0800e784 <rand>:
 800e784:	4b16      	ldr	r3, [pc, #88]	; (800e7e0 <rand+0x5c>)
 800e786:	b510      	push	{r4, lr}
 800e788:	681c      	ldr	r4, [r3, #0]
 800e78a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e78c:	b9b3      	cbnz	r3, 800e7bc <rand+0x38>
 800e78e:	2018      	movs	r0, #24
 800e790:	f000 fb4e 	bl	800ee30 <malloc>
 800e794:	63a0      	str	r0, [r4, #56]	; 0x38
 800e796:	b928      	cbnz	r0, 800e7a4 <rand+0x20>
 800e798:	4602      	mov	r2, r0
 800e79a:	4b12      	ldr	r3, [pc, #72]	; (800e7e4 <rand+0x60>)
 800e79c:	4812      	ldr	r0, [pc, #72]	; (800e7e8 <rand+0x64>)
 800e79e:	214e      	movs	r1, #78	; 0x4e
 800e7a0:	f000 f8f6 	bl	800e990 <__assert_func>
 800e7a4:	4a11      	ldr	r2, [pc, #68]	; (800e7ec <rand+0x68>)
 800e7a6:	4b12      	ldr	r3, [pc, #72]	; (800e7f0 <rand+0x6c>)
 800e7a8:	e9c0 2300 	strd	r2, r3, [r0]
 800e7ac:	4b11      	ldr	r3, [pc, #68]	; (800e7f4 <rand+0x70>)
 800e7ae:	6083      	str	r3, [r0, #8]
 800e7b0:	230b      	movs	r3, #11
 800e7b2:	8183      	strh	r3, [r0, #12]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e7bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e7be:	4a0e      	ldr	r2, [pc, #56]	; (800e7f8 <rand+0x74>)
 800e7c0:	6920      	ldr	r0, [r4, #16]
 800e7c2:	6963      	ldr	r3, [r4, #20]
 800e7c4:	490d      	ldr	r1, [pc, #52]	; (800e7fc <rand+0x78>)
 800e7c6:	4342      	muls	r2, r0
 800e7c8:	fb01 2203 	mla	r2, r1, r3, r2
 800e7cc:	fba0 0101 	umull	r0, r1, r0, r1
 800e7d0:	1c43      	adds	r3, r0, #1
 800e7d2:	eb42 0001 	adc.w	r0, r2, r1
 800e7d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e7da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e7de:	bd10      	pop	{r4, pc}
 800e7e0:	20001a6c 	.word	0x20001a6c
 800e7e4:	080168b4 	.word	0x080168b4
 800e7e8:	080168cb 	.word	0x080168cb
 800e7ec:	abcd330e 	.word	0xabcd330e
 800e7f0:	e66d1234 	.word	0xe66d1234
 800e7f4:	0005deec 	.word	0x0005deec
 800e7f8:	5851f42d 	.word	0x5851f42d
 800e7fc:	4c957f2d 	.word	0x4c957f2d

0800e800 <strcpy>:
 800e800:	4603      	mov	r3, r0
 800e802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e806:	f803 2b01 	strb.w	r2, [r3], #1
 800e80a:	2a00      	cmp	r2, #0
 800e80c:	d1f9      	bne.n	800e802 <strcpy+0x2>
 800e80e:	4770      	bx	lr

0800e810 <__swbuf_r>:
 800e810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e812:	460e      	mov	r6, r1
 800e814:	4614      	mov	r4, r2
 800e816:	4605      	mov	r5, r0
 800e818:	b118      	cbz	r0, 800e822 <__swbuf_r+0x12>
 800e81a:	6983      	ldr	r3, [r0, #24]
 800e81c:	b90b      	cbnz	r3, 800e822 <__swbuf_r+0x12>
 800e81e:	f000 f9ef 	bl	800ec00 <__sinit>
 800e822:	4b21      	ldr	r3, [pc, #132]	; (800e8a8 <__swbuf_r+0x98>)
 800e824:	429c      	cmp	r4, r3
 800e826:	d12b      	bne.n	800e880 <__swbuf_r+0x70>
 800e828:	686c      	ldr	r4, [r5, #4]
 800e82a:	69a3      	ldr	r3, [r4, #24]
 800e82c:	60a3      	str	r3, [r4, #8]
 800e82e:	89a3      	ldrh	r3, [r4, #12]
 800e830:	071a      	lsls	r2, r3, #28
 800e832:	d52f      	bpl.n	800e894 <__swbuf_r+0x84>
 800e834:	6923      	ldr	r3, [r4, #16]
 800e836:	b36b      	cbz	r3, 800e894 <__swbuf_r+0x84>
 800e838:	6923      	ldr	r3, [r4, #16]
 800e83a:	6820      	ldr	r0, [r4, #0]
 800e83c:	1ac0      	subs	r0, r0, r3
 800e83e:	6963      	ldr	r3, [r4, #20]
 800e840:	b2f6      	uxtb	r6, r6
 800e842:	4283      	cmp	r3, r0
 800e844:	4637      	mov	r7, r6
 800e846:	dc04      	bgt.n	800e852 <__swbuf_r+0x42>
 800e848:	4621      	mov	r1, r4
 800e84a:	4628      	mov	r0, r5
 800e84c:	f000 f944 	bl	800ead8 <_fflush_r>
 800e850:	bb30      	cbnz	r0, 800e8a0 <__swbuf_r+0x90>
 800e852:	68a3      	ldr	r3, [r4, #8]
 800e854:	3b01      	subs	r3, #1
 800e856:	60a3      	str	r3, [r4, #8]
 800e858:	6823      	ldr	r3, [r4, #0]
 800e85a:	1c5a      	adds	r2, r3, #1
 800e85c:	6022      	str	r2, [r4, #0]
 800e85e:	701e      	strb	r6, [r3, #0]
 800e860:	6963      	ldr	r3, [r4, #20]
 800e862:	3001      	adds	r0, #1
 800e864:	4283      	cmp	r3, r0
 800e866:	d004      	beq.n	800e872 <__swbuf_r+0x62>
 800e868:	89a3      	ldrh	r3, [r4, #12]
 800e86a:	07db      	lsls	r3, r3, #31
 800e86c:	d506      	bpl.n	800e87c <__swbuf_r+0x6c>
 800e86e:	2e0a      	cmp	r6, #10
 800e870:	d104      	bne.n	800e87c <__swbuf_r+0x6c>
 800e872:	4621      	mov	r1, r4
 800e874:	4628      	mov	r0, r5
 800e876:	f000 f92f 	bl	800ead8 <_fflush_r>
 800e87a:	b988      	cbnz	r0, 800e8a0 <__swbuf_r+0x90>
 800e87c:	4638      	mov	r0, r7
 800e87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e880:	4b0a      	ldr	r3, [pc, #40]	; (800e8ac <__swbuf_r+0x9c>)
 800e882:	429c      	cmp	r4, r3
 800e884:	d101      	bne.n	800e88a <__swbuf_r+0x7a>
 800e886:	68ac      	ldr	r4, [r5, #8]
 800e888:	e7cf      	b.n	800e82a <__swbuf_r+0x1a>
 800e88a:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <__swbuf_r+0xa0>)
 800e88c:	429c      	cmp	r4, r3
 800e88e:	bf08      	it	eq
 800e890:	68ec      	ldreq	r4, [r5, #12]
 800e892:	e7ca      	b.n	800e82a <__swbuf_r+0x1a>
 800e894:	4621      	mov	r1, r4
 800e896:	4628      	mov	r0, r5
 800e898:	f000 f80c 	bl	800e8b4 <__swsetup_r>
 800e89c:	2800      	cmp	r0, #0
 800e89e:	d0cb      	beq.n	800e838 <__swbuf_r+0x28>
 800e8a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e8a4:	e7ea      	b.n	800e87c <__swbuf_r+0x6c>
 800e8a6:	bf00      	nop
 800e8a8:	08016984 	.word	0x08016984
 800e8ac:	080169a4 	.word	0x080169a4
 800e8b0:	08016964 	.word	0x08016964

0800e8b4 <__swsetup_r>:
 800e8b4:	4b32      	ldr	r3, [pc, #200]	; (800e980 <__swsetup_r+0xcc>)
 800e8b6:	b570      	push	{r4, r5, r6, lr}
 800e8b8:	681d      	ldr	r5, [r3, #0]
 800e8ba:	4606      	mov	r6, r0
 800e8bc:	460c      	mov	r4, r1
 800e8be:	b125      	cbz	r5, 800e8ca <__swsetup_r+0x16>
 800e8c0:	69ab      	ldr	r3, [r5, #24]
 800e8c2:	b913      	cbnz	r3, 800e8ca <__swsetup_r+0x16>
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	f000 f99b 	bl	800ec00 <__sinit>
 800e8ca:	4b2e      	ldr	r3, [pc, #184]	; (800e984 <__swsetup_r+0xd0>)
 800e8cc:	429c      	cmp	r4, r3
 800e8ce:	d10f      	bne.n	800e8f0 <__swsetup_r+0x3c>
 800e8d0:	686c      	ldr	r4, [r5, #4]
 800e8d2:	89a3      	ldrh	r3, [r4, #12]
 800e8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8d8:	0719      	lsls	r1, r3, #28
 800e8da:	d42c      	bmi.n	800e936 <__swsetup_r+0x82>
 800e8dc:	06dd      	lsls	r5, r3, #27
 800e8de:	d411      	bmi.n	800e904 <__swsetup_r+0x50>
 800e8e0:	2309      	movs	r3, #9
 800e8e2:	6033      	str	r3, [r6, #0]
 800e8e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8e8:	81a3      	strh	r3, [r4, #12]
 800e8ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8ee:	e03e      	b.n	800e96e <__swsetup_r+0xba>
 800e8f0:	4b25      	ldr	r3, [pc, #148]	; (800e988 <__swsetup_r+0xd4>)
 800e8f2:	429c      	cmp	r4, r3
 800e8f4:	d101      	bne.n	800e8fa <__swsetup_r+0x46>
 800e8f6:	68ac      	ldr	r4, [r5, #8]
 800e8f8:	e7eb      	b.n	800e8d2 <__swsetup_r+0x1e>
 800e8fa:	4b24      	ldr	r3, [pc, #144]	; (800e98c <__swsetup_r+0xd8>)
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	bf08      	it	eq
 800e900:	68ec      	ldreq	r4, [r5, #12]
 800e902:	e7e6      	b.n	800e8d2 <__swsetup_r+0x1e>
 800e904:	0758      	lsls	r0, r3, #29
 800e906:	d512      	bpl.n	800e92e <__swsetup_r+0x7a>
 800e908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e90a:	b141      	cbz	r1, 800e91e <__swsetup_r+0x6a>
 800e90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e910:	4299      	cmp	r1, r3
 800e912:	d002      	beq.n	800e91a <__swsetup_r+0x66>
 800e914:	4630      	mov	r0, r6
 800e916:	f000 fa93 	bl	800ee40 <_free_r>
 800e91a:	2300      	movs	r3, #0
 800e91c:	6363      	str	r3, [r4, #52]	; 0x34
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e924:	81a3      	strh	r3, [r4, #12]
 800e926:	2300      	movs	r3, #0
 800e928:	6063      	str	r3, [r4, #4]
 800e92a:	6923      	ldr	r3, [r4, #16]
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	89a3      	ldrh	r3, [r4, #12]
 800e930:	f043 0308 	orr.w	r3, r3, #8
 800e934:	81a3      	strh	r3, [r4, #12]
 800e936:	6923      	ldr	r3, [r4, #16]
 800e938:	b94b      	cbnz	r3, 800e94e <__swsetup_r+0x9a>
 800e93a:	89a3      	ldrh	r3, [r4, #12]
 800e93c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e944:	d003      	beq.n	800e94e <__swsetup_r+0x9a>
 800e946:	4621      	mov	r1, r4
 800e948:	4630      	mov	r0, r6
 800e94a:	f000 fa31 	bl	800edb0 <__smakebuf_r>
 800e94e:	89a0      	ldrh	r0, [r4, #12]
 800e950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e954:	f010 0301 	ands.w	r3, r0, #1
 800e958:	d00a      	beq.n	800e970 <__swsetup_r+0xbc>
 800e95a:	2300      	movs	r3, #0
 800e95c:	60a3      	str	r3, [r4, #8]
 800e95e:	6963      	ldr	r3, [r4, #20]
 800e960:	425b      	negs	r3, r3
 800e962:	61a3      	str	r3, [r4, #24]
 800e964:	6923      	ldr	r3, [r4, #16]
 800e966:	b943      	cbnz	r3, 800e97a <__swsetup_r+0xc6>
 800e968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e96c:	d1ba      	bne.n	800e8e4 <__swsetup_r+0x30>
 800e96e:	bd70      	pop	{r4, r5, r6, pc}
 800e970:	0781      	lsls	r1, r0, #30
 800e972:	bf58      	it	pl
 800e974:	6963      	ldrpl	r3, [r4, #20]
 800e976:	60a3      	str	r3, [r4, #8]
 800e978:	e7f4      	b.n	800e964 <__swsetup_r+0xb0>
 800e97a:	2000      	movs	r0, #0
 800e97c:	e7f7      	b.n	800e96e <__swsetup_r+0xba>
 800e97e:	bf00      	nop
 800e980:	20001a6c 	.word	0x20001a6c
 800e984:	08016984 	.word	0x08016984
 800e988:	080169a4 	.word	0x080169a4
 800e98c:	08016964 	.word	0x08016964

0800e990 <__assert_func>:
 800e990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e992:	4614      	mov	r4, r2
 800e994:	461a      	mov	r2, r3
 800e996:	4b09      	ldr	r3, [pc, #36]	; (800e9bc <__assert_func+0x2c>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4605      	mov	r5, r0
 800e99c:	68d8      	ldr	r0, [r3, #12]
 800e99e:	b14c      	cbz	r4, 800e9b4 <__assert_func+0x24>
 800e9a0:	4b07      	ldr	r3, [pc, #28]	; (800e9c0 <__assert_func+0x30>)
 800e9a2:	9100      	str	r1, [sp, #0]
 800e9a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9a8:	4906      	ldr	r1, [pc, #24]	; (800e9c4 <__assert_func+0x34>)
 800e9aa:	462b      	mov	r3, r5
 800e9ac:	f000 f9a6 	bl	800ecfc <fiprintf>
 800e9b0:	f000 fe7a 	bl	800f6a8 <abort>
 800e9b4:	4b04      	ldr	r3, [pc, #16]	; (800e9c8 <__assert_func+0x38>)
 800e9b6:	461c      	mov	r4, r3
 800e9b8:	e7f3      	b.n	800e9a2 <__assert_func+0x12>
 800e9ba:	bf00      	nop
 800e9bc:	20001a6c 	.word	0x20001a6c
 800e9c0:	08016926 	.word	0x08016926
 800e9c4:	08016933 	.word	0x08016933
 800e9c8:	0801386b 	.word	0x0801386b

0800e9cc <__sflush_r>:
 800e9cc:	898a      	ldrh	r2, [r1, #12]
 800e9ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d2:	4605      	mov	r5, r0
 800e9d4:	0710      	lsls	r0, r2, #28
 800e9d6:	460c      	mov	r4, r1
 800e9d8:	d458      	bmi.n	800ea8c <__sflush_r+0xc0>
 800e9da:	684b      	ldr	r3, [r1, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	dc05      	bgt.n	800e9ec <__sflush_r+0x20>
 800e9e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dc02      	bgt.n	800e9ec <__sflush_r+0x20>
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9ee:	2e00      	cmp	r6, #0
 800e9f0:	d0f9      	beq.n	800e9e6 <__sflush_r+0x1a>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9f8:	682f      	ldr	r7, [r5, #0]
 800e9fa:	602b      	str	r3, [r5, #0]
 800e9fc:	d032      	beq.n	800ea64 <__sflush_r+0x98>
 800e9fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ea00:	89a3      	ldrh	r3, [r4, #12]
 800ea02:	075a      	lsls	r2, r3, #29
 800ea04:	d505      	bpl.n	800ea12 <__sflush_r+0x46>
 800ea06:	6863      	ldr	r3, [r4, #4]
 800ea08:	1ac0      	subs	r0, r0, r3
 800ea0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea0c:	b10b      	cbz	r3, 800ea12 <__sflush_r+0x46>
 800ea0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ea10:	1ac0      	subs	r0, r0, r3
 800ea12:	2300      	movs	r3, #0
 800ea14:	4602      	mov	r2, r0
 800ea16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ea18:	6a21      	ldr	r1, [r4, #32]
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	47b0      	blx	r6
 800ea1e:	1c43      	adds	r3, r0, #1
 800ea20:	89a3      	ldrh	r3, [r4, #12]
 800ea22:	d106      	bne.n	800ea32 <__sflush_r+0x66>
 800ea24:	6829      	ldr	r1, [r5, #0]
 800ea26:	291d      	cmp	r1, #29
 800ea28:	d82c      	bhi.n	800ea84 <__sflush_r+0xb8>
 800ea2a:	4a2a      	ldr	r2, [pc, #168]	; (800ead4 <__sflush_r+0x108>)
 800ea2c:	40ca      	lsrs	r2, r1
 800ea2e:	07d6      	lsls	r6, r2, #31
 800ea30:	d528      	bpl.n	800ea84 <__sflush_r+0xb8>
 800ea32:	2200      	movs	r2, #0
 800ea34:	6062      	str	r2, [r4, #4]
 800ea36:	04d9      	lsls	r1, r3, #19
 800ea38:	6922      	ldr	r2, [r4, #16]
 800ea3a:	6022      	str	r2, [r4, #0]
 800ea3c:	d504      	bpl.n	800ea48 <__sflush_r+0x7c>
 800ea3e:	1c42      	adds	r2, r0, #1
 800ea40:	d101      	bne.n	800ea46 <__sflush_r+0x7a>
 800ea42:	682b      	ldr	r3, [r5, #0]
 800ea44:	b903      	cbnz	r3, 800ea48 <__sflush_r+0x7c>
 800ea46:	6560      	str	r0, [r4, #84]	; 0x54
 800ea48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea4a:	602f      	str	r7, [r5, #0]
 800ea4c:	2900      	cmp	r1, #0
 800ea4e:	d0ca      	beq.n	800e9e6 <__sflush_r+0x1a>
 800ea50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea54:	4299      	cmp	r1, r3
 800ea56:	d002      	beq.n	800ea5e <__sflush_r+0x92>
 800ea58:	4628      	mov	r0, r5
 800ea5a:	f000 f9f1 	bl	800ee40 <_free_r>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	6360      	str	r0, [r4, #52]	; 0x34
 800ea62:	e7c1      	b.n	800e9e8 <__sflush_r+0x1c>
 800ea64:	6a21      	ldr	r1, [r4, #32]
 800ea66:	2301      	movs	r3, #1
 800ea68:	4628      	mov	r0, r5
 800ea6a:	47b0      	blx	r6
 800ea6c:	1c41      	adds	r1, r0, #1
 800ea6e:	d1c7      	bne.n	800ea00 <__sflush_r+0x34>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d0c4      	beq.n	800ea00 <__sflush_r+0x34>
 800ea76:	2b1d      	cmp	r3, #29
 800ea78:	d001      	beq.n	800ea7e <__sflush_r+0xb2>
 800ea7a:	2b16      	cmp	r3, #22
 800ea7c:	d101      	bne.n	800ea82 <__sflush_r+0xb6>
 800ea7e:	602f      	str	r7, [r5, #0]
 800ea80:	e7b1      	b.n	800e9e6 <__sflush_r+0x1a>
 800ea82:	89a3      	ldrh	r3, [r4, #12]
 800ea84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea88:	81a3      	strh	r3, [r4, #12]
 800ea8a:	e7ad      	b.n	800e9e8 <__sflush_r+0x1c>
 800ea8c:	690f      	ldr	r7, [r1, #16]
 800ea8e:	2f00      	cmp	r7, #0
 800ea90:	d0a9      	beq.n	800e9e6 <__sflush_r+0x1a>
 800ea92:	0793      	lsls	r3, r2, #30
 800ea94:	680e      	ldr	r6, [r1, #0]
 800ea96:	bf08      	it	eq
 800ea98:	694b      	ldreq	r3, [r1, #20]
 800ea9a:	600f      	str	r7, [r1, #0]
 800ea9c:	bf18      	it	ne
 800ea9e:	2300      	movne	r3, #0
 800eaa0:	eba6 0807 	sub.w	r8, r6, r7
 800eaa4:	608b      	str	r3, [r1, #8]
 800eaa6:	f1b8 0f00 	cmp.w	r8, #0
 800eaaa:	dd9c      	ble.n	800e9e6 <__sflush_r+0x1a>
 800eaac:	6a21      	ldr	r1, [r4, #32]
 800eaae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eab0:	4643      	mov	r3, r8
 800eab2:	463a      	mov	r2, r7
 800eab4:	4628      	mov	r0, r5
 800eab6:	47b0      	blx	r6
 800eab8:	2800      	cmp	r0, #0
 800eaba:	dc06      	bgt.n	800eaca <__sflush_r+0xfe>
 800eabc:	89a3      	ldrh	r3, [r4, #12]
 800eabe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eac2:	81a3      	strh	r3, [r4, #12]
 800eac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eac8:	e78e      	b.n	800e9e8 <__sflush_r+0x1c>
 800eaca:	4407      	add	r7, r0
 800eacc:	eba8 0800 	sub.w	r8, r8, r0
 800ead0:	e7e9      	b.n	800eaa6 <__sflush_r+0xda>
 800ead2:	bf00      	nop
 800ead4:	20400001 	.word	0x20400001

0800ead8 <_fflush_r>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	690b      	ldr	r3, [r1, #16]
 800eadc:	4605      	mov	r5, r0
 800eade:	460c      	mov	r4, r1
 800eae0:	b913      	cbnz	r3, 800eae8 <_fflush_r+0x10>
 800eae2:	2500      	movs	r5, #0
 800eae4:	4628      	mov	r0, r5
 800eae6:	bd38      	pop	{r3, r4, r5, pc}
 800eae8:	b118      	cbz	r0, 800eaf2 <_fflush_r+0x1a>
 800eaea:	6983      	ldr	r3, [r0, #24]
 800eaec:	b90b      	cbnz	r3, 800eaf2 <_fflush_r+0x1a>
 800eaee:	f000 f887 	bl	800ec00 <__sinit>
 800eaf2:	4b14      	ldr	r3, [pc, #80]	; (800eb44 <_fflush_r+0x6c>)
 800eaf4:	429c      	cmp	r4, r3
 800eaf6:	d11b      	bne.n	800eb30 <_fflush_r+0x58>
 800eaf8:	686c      	ldr	r4, [r5, #4]
 800eafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0ef      	beq.n	800eae2 <_fflush_r+0xa>
 800eb02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eb04:	07d0      	lsls	r0, r2, #31
 800eb06:	d404      	bmi.n	800eb12 <_fflush_r+0x3a>
 800eb08:	0599      	lsls	r1, r3, #22
 800eb0a:	d402      	bmi.n	800eb12 <_fflush_r+0x3a>
 800eb0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb0e:	f000 f927 	bl	800ed60 <__retarget_lock_acquire_recursive>
 800eb12:	4628      	mov	r0, r5
 800eb14:	4621      	mov	r1, r4
 800eb16:	f7ff ff59 	bl	800e9cc <__sflush_r>
 800eb1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb1c:	07da      	lsls	r2, r3, #31
 800eb1e:	4605      	mov	r5, r0
 800eb20:	d4e0      	bmi.n	800eae4 <_fflush_r+0xc>
 800eb22:	89a3      	ldrh	r3, [r4, #12]
 800eb24:	059b      	lsls	r3, r3, #22
 800eb26:	d4dd      	bmi.n	800eae4 <_fflush_r+0xc>
 800eb28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb2a:	f000 f91a 	bl	800ed62 <__retarget_lock_release_recursive>
 800eb2e:	e7d9      	b.n	800eae4 <_fflush_r+0xc>
 800eb30:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <_fflush_r+0x70>)
 800eb32:	429c      	cmp	r4, r3
 800eb34:	d101      	bne.n	800eb3a <_fflush_r+0x62>
 800eb36:	68ac      	ldr	r4, [r5, #8]
 800eb38:	e7df      	b.n	800eafa <_fflush_r+0x22>
 800eb3a:	4b04      	ldr	r3, [pc, #16]	; (800eb4c <_fflush_r+0x74>)
 800eb3c:	429c      	cmp	r4, r3
 800eb3e:	bf08      	it	eq
 800eb40:	68ec      	ldreq	r4, [r5, #12]
 800eb42:	e7da      	b.n	800eafa <_fflush_r+0x22>
 800eb44:	08016984 	.word	0x08016984
 800eb48:	080169a4 	.word	0x080169a4
 800eb4c:	08016964 	.word	0x08016964

0800eb50 <std>:
 800eb50:	2300      	movs	r3, #0
 800eb52:	b510      	push	{r4, lr}
 800eb54:	4604      	mov	r4, r0
 800eb56:	e9c0 3300 	strd	r3, r3, [r0]
 800eb5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb5e:	6083      	str	r3, [r0, #8]
 800eb60:	8181      	strh	r1, [r0, #12]
 800eb62:	6643      	str	r3, [r0, #100]	; 0x64
 800eb64:	81c2      	strh	r2, [r0, #14]
 800eb66:	6183      	str	r3, [r0, #24]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	2208      	movs	r2, #8
 800eb6c:	305c      	adds	r0, #92	; 0x5c
 800eb6e:	f7ff fd73 	bl	800e658 <memset>
 800eb72:	4b05      	ldr	r3, [pc, #20]	; (800eb88 <std+0x38>)
 800eb74:	6263      	str	r3, [r4, #36]	; 0x24
 800eb76:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <std+0x3c>)
 800eb78:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb7a:	4b05      	ldr	r3, [pc, #20]	; (800eb90 <std+0x40>)
 800eb7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb7e:	4b05      	ldr	r3, [pc, #20]	; (800eb94 <std+0x44>)
 800eb80:	6224      	str	r4, [r4, #32]
 800eb82:	6323      	str	r3, [r4, #48]	; 0x30
 800eb84:	bd10      	pop	{r4, pc}
 800eb86:	bf00      	nop
 800eb88:	0800f5fd 	.word	0x0800f5fd
 800eb8c:	0800f61f 	.word	0x0800f61f
 800eb90:	0800f657 	.word	0x0800f657
 800eb94:	0800f67b 	.word	0x0800f67b

0800eb98 <_cleanup_r>:
 800eb98:	4901      	ldr	r1, [pc, #4]	; (800eba0 <_cleanup_r+0x8>)
 800eb9a:	f000 b8c1 	b.w	800ed20 <_fwalk_reent>
 800eb9e:	bf00      	nop
 800eba0:	0800ead9 	.word	0x0800ead9

0800eba4 <__sfmoreglue>:
 800eba4:	b570      	push	{r4, r5, r6, lr}
 800eba6:	2268      	movs	r2, #104	; 0x68
 800eba8:	1e4d      	subs	r5, r1, #1
 800ebaa:	4355      	muls	r5, r2
 800ebac:	460e      	mov	r6, r1
 800ebae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ebb2:	f000 f9b1 	bl	800ef18 <_malloc_r>
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	b140      	cbz	r0, 800ebcc <__sfmoreglue+0x28>
 800ebba:	2100      	movs	r1, #0
 800ebbc:	e9c0 1600 	strd	r1, r6, [r0]
 800ebc0:	300c      	adds	r0, #12
 800ebc2:	60a0      	str	r0, [r4, #8]
 800ebc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ebc8:	f7ff fd46 	bl	800e658 <memset>
 800ebcc:	4620      	mov	r0, r4
 800ebce:	bd70      	pop	{r4, r5, r6, pc}

0800ebd0 <__sfp_lock_acquire>:
 800ebd0:	4801      	ldr	r0, [pc, #4]	; (800ebd8 <__sfp_lock_acquire+0x8>)
 800ebd2:	f000 b8c5 	b.w	800ed60 <__retarget_lock_acquire_recursive>
 800ebd6:	bf00      	nop
 800ebd8:	20014081 	.word	0x20014081

0800ebdc <__sfp_lock_release>:
 800ebdc:	4801      	ldr	r0, [pc, #4]	; (800ebe4 <__sfp_lock_release+0x8>)
 800ebde:	f000 b8c0 	b.w	800ed62 <__retarget_lock_release_recursive>
 800ebe2:	bf00      	nop
 800ebe4:	20014081 	.word	0x20014081

0800ebe8 <__sinit_lock_acquire>:
 800ebe8:	4801      	ldr	r0, [pc, #4]	; (800ebf0 <__sinit_lock_acquire+0x8>)
 800ebea:	f000 b8b9 	b.w	800ed60 <__retarget_lock_acquire_recursive>
 800ebee:	bf00      	nop
 800ebf0:	20014082 	.word	0x20014082

0800ebf4 <__sinit_lock_release>:
 800ebf4:	4801      	ldr	r0, [pc, #4]	; (800ebfc <__sinit_lock_release+0x8>)
 800ebf6:	f000 b8b4 	b.w	800ed62 <__retarget_lock_release_recursive>
 800ebfa:	bf00      	nop
 800ebfc:	20014082 	.word	0x20014082

0800ec00 <__sinit>:
 800ec00:	b510      	push	{r4, lr}
 800ec02:	4604      	mov	r4, r0
 800ec04:	f7ff fff0 	bl	800ebe8 <__sinit_lock_acquire>
 800ec08:	69a3      	ldr	r3, [r4, #24]
 800ec0a:	b11b      	cbz	r3, 800ec14 <__sinit+0x14>
 800ec0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec10:	f7ff bff0 	b.w	800ebf4 <__sinit_lock_release>
 800ec14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec18:	6523      	str	r3, [r4, #80]	; 0x50
 800ec1a:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <__sinit+0x68>)
 800ec1c:	4a13      	ldr	r2, [pc, #76]	; (800ec6c <__sinit+0x6c>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec22:	42a3      	cmp	r3, r4
 800ec24:	bf04      	itt	eq
 800ec26:	2301      	moveq	r3, #1
 800ec28:	61a3      	streq	r3, [r4, #24]
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f000 f820 	bl	800ec70 <__sfp>
 800ec30:	6060      	str	r0, [r4, #4]
 800ec32:	4620      	mov	r0, r4
 800ec34:	f000 f81c 	bl	800ec70 <__sfp>
 800ec38:	60a0      	str	r0, [r4, #8]
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	f000 f818 	bl	800ec70 <__sfp>
 800ec40:	2200      	movs	r2, #0
 800ec42:	60e0      	str	r0, [r4, #12]
 800ec44:	2104      	movs	r1, #4
 800ec46:	6860      	ldr	r0, [r4, #4]
 800ec48:	f7ff ff82 	bl	800eb50 <std>
 800ec4c:	68a0      	ldr	r0, [r4, #8]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	2109      	movs	r1, #9
 800ec52:	f7ff ff7d 	bl	800eb50 <std>
 800ec56:	68e0      	ldr	r0, [r4, #12]
 800ec58:	2202      	movs	r2, #2
 800ec5a:	2112      	movs	r1, #18
 800ec5c:	f7ff ff78 	bl	800eb50 <std>
 800ec60:	2301      	movs	r3, #1
 800ec62:	61a3      	str	r3, [r4, #24]
 800ec64:	e7d2      	b.n	800ec0c <__sinit+0xc>
 800ec66:	bf00      	nop
 800ec68:	080168b0 	.word	0x080168b0
 800ec6c:	0800eb99 	.word	0x0800eb99

0800ec70 <__sfp>:
 800ec70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec72:	4607      	mov	r7, r0
 800ec74:	f7ff ffac 	bl	800ebd0 <__sfp_lock_acquire>
 800ec78:	4b1e      	ldr	r3, [pc, #120]	; (800ecf4 <__sfp+0x84>)
 800ec7a:	681e      	ldr	r6, [r3, #0]
 800ec7c:	69b3      	ldr	r3, [r6, #24]
 800ec7e:	b913      	cbnz	r3, 800ec86 <__sfp+0x16>
 800ec80:	4630      	mov	r0, r6
 800ec82:	f7ff ffbd 	bl	800ec00 <__sinit>
 800ec86:	3648      	adds	r6, #72	; 0x48
 800ec88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	d503      	bpl.n	800ec98 <__sfp+0x28>
 800ec90:	6833      	ldr	r3, [r6, #0]
 800ec92:	b30b      	cbz	r3, 800ecd8 <__sfp+0x68>
 800ec94:	6836      	ldr	r6, [r6, #0]
 800ec96:	e7f7      	b.n	800ec88 <__sfp+0x18>
 800ec98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec9c:	b9d5      	cbnz	r5, 800ecd4 <__sfp+0x64>
 800ec9e:	4b16      	ldr	r3, [pc, #88]	; (800ecf8 <__sfp+0x88>)
 800eca0:	60e3      	str	r3, [r4, #12]
 800eca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eca6:	6665      	str	r5, [r4, #100]	; 0x64
 800eca8:	f000 f859 	bl	800ed5e <__retarget_lock_init_recursive>
 800ecac:	f7ff ff96 	bl	800ebdc <__sfp_lock_release>
 800ecb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ecb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ecb8:	6025      	str	r5, [r4, #0]
 800ecba:	61a5      	str	r5, [r4, #24]
 800ecbc:	2208      	movs	r2, #8
 800ecbe:	4629      	mov	r1, r5
 800ecc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ecc4:	f7ff fcc8 	bl	800e658 <memset>
 800ecc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd4:	3468      	adds	r4, #104	; 0x68
 800ecd6:	e7d9      	b.n	800ec8c <__sfp+0x1c>
 800ecd8:	2104      	movs	r1, #4
 800ecda:	4638      	mov	r0, r7
 800ecdc:	f7ff ff62 	bl	800eba4 <__sfmoreglue>
 800ece0:	4604      	mov	r4, r0
 800ece2:	6030      	str	r0, [r6, #0]
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d1d5      	bne.n	800ec94 <__sfp+0x24>
 800ece8:	f7ff ff78 	bl	800ebdc <__sfp_lock_release>
 800ecec:	230c      	movs	r3, #12
 800ecee:	603b      	str	r3, [r7, #0]
 800ecf0:	e7ee      	b.n	800ecd0 <__sfp+0x60>
 800ecf2:	bf00      	nop
 800ecf4:	080168b0 	.word	0x080168b0
 800ecf8:	ffff0001 	.word	0xffff0001

0800ecfc <fiprintf>:
 800ecfc:	b40e      	push	{r1, r2, r3}
 800ecfe:	b503      	push	{r0, r1, lr}
 800ed00:	4601      	mov	r1, r0
 800ed02:	ab03      	add	r3, sp, #12
 800ed04:	4805      	ldr	r0, [pc, #20]	; (800ed1c <fiprintf+0x20>)
 800ed06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed0a:	6800      	ldr	r0, [r0, #0]
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	f000 f9a1 	bl	800f054 <_vfiprintf_r>
 800ed12:	b002      	add	sp, #8
 800ed14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed18:	b003      	add	sp, #12
 800ed1a:	4770      	bx	lr
 800ed1c:	20001a6c 	.word	0x20001a6c

0800ed20 <_fwalk_reent>:
 800ed20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed24:	4606      	mov	r6, r0
 800ed26:	4688      	mov	r8, r1
 800ed28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed2c:	2700      	movs	r7, #0
 800ed2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed32:	f1b9 0901 	subs.w	r9, r9, #1
 800ed36:	d505      	bpl.n	800ed44 <_fwalk_reent+0x24>
 800ed38:	6824      	ldr	r4, [r4, #0]
 800ed3a:	2c00      	cmp	r4, #0
 800ed3c:	d1f7      	bne.n	800ed2e <_fwalk_reent+0xe>
 800ed3e:	4638      	mov	r0, r7
 800ed40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed44:	89ab      	ldrh	r3, [r5, #12]
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d907      	bls.n	800ed5a <_fwalk_reent+0x3a>
 800ed4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	d003      	beq.n	800ed5a <_fwalk_reent+0x3a>
 800ed52:	4629      	mov	r1, r5
 800ed54:	4630      	mov	r0, r6
 800ed56:	47c0      	blx	r8
 800ed58:	4307      	orrs	r7, r0
 800ed5a:	3568      	adds	r5, #104	; 0x68
 800ed5c:	e7e9      	b.n	800ed32 <_fwalk_reent+0x12>

0800ed5e <__retarget_lock_init_recursive>:
 800ed5e:	4770      	bx	lr

0800ed60 <__retarget_lock_acquire_recursive>:
 800ed60:	4770      	bx	lr

0800ed62 <__retarget_lock_release_recursive>:
 800ed62:	4770      	bx	lr

0800ed64 <__swhatbuf_r>:
 800ed64:	b570      	push	{r4, r5, r6, lr}
 800ed66:	460e      	mov	r6, r1
 800ed68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed6c:	2900      	cmp	r1, #0
 800ed6e:	b096      	sub	sp, #88	; 0x58
 800ed70:	4614      	mov	r4, r2
 800ed72:	461d      	mov	r5, r3
 800ed74:	da08      	bge.n	800ed88 <__swhatbuf_r+0x24>
 800ed76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	602a      	str	r2, [r5, #0]
 800ed7e:	061a      	lsls	r2, r3, #24
 800ed80:	d410      	bmi.n	800eda4 <__swhatbuf_r+0x40>
 800ed82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed86:	e00e      	b.n	800eda6 <__swhatbuf_r+0x42>
 800ed88:	466a      	mov	r2, sp
 800ed8a:	f000 fca5 	bl	800f6d8 <_fstat_r>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	dbf1      	blt.n	800ed76 <__swhatbuf_r+0x12>
 800ed92:	9a01      	ldr	r2, [sp, #4]
 800ed94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed9c:	425a      	negs	r2, r3
 800ed9e:	415a      	adcs	r2, r3
 800eda0:	602a      	str	r2, [r5, #0]
 800eda2:	e7ee      	b.n	800ed82 <__swhatbuf_r+0x1e>
 800eda4:	2340      	movs	r3, #64	; 0x40
 800eda6:	2000      	movs	r0, #0
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	b016      	add	sp, #88	; 0x58
 800edac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800edb0 <__smakebuf_r>:
 800edb0:	898b      	ldrh	r3, [r1, #12]
 800edb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800edb4:	079d      	lsls	r5, r3, #30
 800edb6:	4606      	mov	r6, r0
 800edb8:	460c      	mov	r4, r1
 800edba:	d507      	bpl.n	800edcc <__smakebuf_r+0x1c>
 800edbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edc0:	6023      	str	r3, [r4, #0]
 800edc2:	6123      	str	r3, [r4, #16]
 800edc4:	2301      	movs	r3, #1
 800edc6:	6163      	str	r3, [r4, #20]
 800edc8:	b002      	add	sp, #8
 800edca:	bd70      	pop	{r4, r5, r6, pc}
 800edcc:	ab01      	add	r3, sp, #4
 800edce:	466a      	mov	r2, sp
 800edd0:	f7ff ffc8 	bl	800ed64 <__swhatbuf_r>
 800edd4:	9900      	ldr	r1, [sp, #0]
 800edd6:	4605      	mov	r5, r0
 800edd8:	4630      	mov	r0, r6
 800edda:	f000 f89d 	bl	800ef18 <_malloc_r>
 800edde:	b948      	cbnz	r0, 800edf4 <__smakebuf_r+0x44>
 800ede0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ede4:	059a      	lsls	r2, r3, #22
 800ede6:	d4ef      	bmi.n	800edc8 <__smakebuf_r+0x18>
 800ede8:	f023 0303 	bic.w	r3, r3, #3
 800edec:	f043 0302 	orr.w	r3, r3, #2
 800edf0:	81a3      	strh	r3, [r4, #12]
 800edf2:	e7e3      	b.n	800edbc <__smakebuf_r+0xc>
 800edf4:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <__smakebuf_r+0x7c>)
 800edf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	6020      	str	r0, [r4, #0]
 800edfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee00:	81a3      	strh	r3, [r4, #12]
 800ee02:	9b00      	ldr	r3, [sp, #0]
 800ee04:	6163      	str	r3, [r4, #20]
 800ee06:	9b01      	ldr	r3, [sp, #4]
 800ee08:	6120      	str	r0, [r4, #16]
 800ee0a:	b15b      	cbz	r3, 800ee24 <__smakebuf_r+0x74>
 800ee0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee10:	4630      	mov	r0, r6
 800ee12:	f000 fc73 	bl	800f6fc <_isatty_r>
 800ee16:	b128      	cbz	r0, 800ee24 <__smakebuf_r+0x74>
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	f023 0303 	bic.w	r3, r3, #3
 800ee1e:	f043 0301 	orr.w	r3, r3, #1
 800ee22:	81a3      	strh	r3, [r4, #12]
 800ee24:	89a0      	ldrh	r0, [r4, #12]
 800ee26:	4305      	orrs	r5, r0
 800ee28:	81a5      	strh	r5, [r4, #12]
 800ee2a:	e7cd      	b.n	800edc8 <__smakebuf_r+0x18>
 800ee2c:	0800eb99 	.word	0x0800eb99

0800ee30 <malloc>:
 800ee30:	4b02      	ldr	r3, [pc, #8]	; (800ee3c <malloc+0xc>)
 800ee32:	4601      	mov	r1, r0
 800ee34:	6818      	ldr	r0, [r3, #0]
 800ee36:	f000 b86f 	b.w	800ef18 <_malloc_r>
 800ee3a:	bf00      	nop
 800ee3c:	20001a6c 	.word	0x20001a6c

0800ee40 <_free_r>:
 800ee40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee42:	2900      	cmp	r1, #0
 800ee44:	d044      	beq.n	800eed0 <_free_r+0x90>
 800ee46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee4a:	9001      	str	r0, [sp, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f1a1 0404 	sub.w	r4, r1, #4
 800ee52:	bfb8      	it	lt
 800ee54:	18e4      	addlt	r4, r4, r3
 800ee56:	f000 fc73 	bl	800f740 <__malloc_lock>
 800ee5a:	4a1e      	ldr	r2, [pc, #120]	; (800eed4 <_free_r+0x94>)
 800ee5c:	9801      	ldr	r0, [sp, #4]
 800ee5e:	6813      	ldr	r3, [r2, #0]
 800ee60:	b933      	cbnz	r3, 800ee70 <_free_r+0x30>
 800ee62:	6063      	str	r3, [r4, #4]
 800ee64:	6014      	str	r4, [r2, #0]
 800ee66:	b003      	add	sp, #12
 800ee68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ee6c:	f000 bc6e 	b.w	800f74c <__malloc_unlock>
 800ee70:	42a3      	cmp	r3, r4
 800ee72:	d908      	bls.n	800ee86 <_free_r+0x46>
 800ee74:	6825      	ldr	r5, [r4, #0]
 800ee76:	1961      	adds	r1, r4, r5
 800ee78:	428b      	cmp	r3, r1
 800ee7a:	bf01      	itttt	eq
 800ee7c:	6819      	ldreq	r1, [r3, #0]
 800ee7e:	685b      	ldreq	r3, [r3, #4]
 800ee80:	1949      	addeq	r1, r1, r5
 800ee82:	6021      	streq	r1, [r4, #0]
 800ee84:	e7ed      	b.n	800ee62 <_free_r+0x22>
 800ee86:	461a      	mov	r2, r3
 800ee88:	685b      	ldr	r3, [r3, #4]
 800ee8a:	b10b      	cbz	r3, 800ee90 <_free_r+0x50>
 800ee8c:	42a3      	cmp	r3, r4
 800ee8e:	d9fa      	bls.n	800ee86 <_free_r+0x46>
 800ee90:	6811      	ldr	r1, [r2, #0]
 800ee92:	1855      	adds	r5, r2, r1
 800ee94:	42a5      	cmp	r5, r4
 800ee96:	d10b      	bne.n	800eeb0 <_free_r+0x70>
 800ee98:	6824      	ldr	r4, [r4, #0]
 800ee9a:	4421      	add	r1, r4
 800ee9c:	1854      	adds	r4, r2, r1
 800ee9e:	42a3      	cmp	r3, r4
 800eea0:	6011      	str	r1, [r2, #0]
 800eea2:	d1e0      	bne.n	800ee66 <_free_r+0x26>
 800eea4:	681c      	ldr	r4, [r3, #0]
 800eea6:	685b      	ldr	r3, [r3, #4]
 800eea8:	6053      	str	r3, [r2, #4]
 800eeaa:	4421      	add	r1, r4
 800eeac:	6011      	str	r1, [r2, #0]
 800eeae:	e7da      	b.n	800ee66 <_free_r+0x26>
 800eeb0:	d902      	bls.n	800eeb8 <_free_r+0x78>
 800eeb2:	230c      	movs	r3, #12
 800eeb4:	6003      	str	r3, [r0, #0]
 800eeb6:	e7d6      	b.n	800ee66 <_free_r+0x26>
 800eeb8:	6825      	ldr	r5, [r4, #0]
 800eeba:	1961      	adds	r1, r4, r5
 800eebc:	428b      	cmp	r3, r1
 800eebe:	bf04      	itt	eq
 800eec0:	6819      	ldreq	r1, [r3, #0]
 800eec2:	685b      	ldreq	r3, [r3, #4]
 800eec4:	6063      	str	r3, [r4, #4]
 800eec6:	bf04      	itt	eq
 800eec8:	1949      	addeq	r1, r1, r5
 800eeca:	6021      	streq	r1, [r4, #0]
 800eecc:	6054      	str	r4, [r2, #4]
 800eece:	e7ca      	b.n	800ee66 <_free_r+0x26>
 800eed0:	b003      	add	sp, #12
 800eed2:	bd30      	pop	{r4, r5, pc}
 800eed4:	20014084 	.word	0x20014084

0800eed8 <sbrk_aligned>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	4e0e      	ldr	r6, [pc, #56]	; (800ef14 <sbrk_aligned+0x3c>)
 800eedc:	460c      	mov	r4, r1
 800eede:	6831      	ldr	r1, [r6, #0]
 800eee0:	4605      	mov	r5, r0
 800eee2:	b911      	cbnz	r1, 800eeea <sbrk_aligned+0x12>
 800eee4:	f000 fb7a 	bl	800f5dc <_sbrk_r>
 800eee8:	6030      	str	r0, [r6, #0]
 800eeea:	4621      	mov	r1, r4
 800eeec:	4628      	mov	r0, r5
 800eeee:	f000 fb75 	bl	800f5dc <_sbrk_r>
 800eef2:	1c43      	adds	r3, r0, #1
 800eef4:	d00a      	beq.n	800ef0c <sbrk_aligned+0x34>
 800eef6:	1cc4      	adds	r4, r0, #3
 800eef8:	f024 0403 	bic.w	r4, r4, #3
 800eefc:	42a0      	cmp	r0, r4
 800eefe:	d007      	beq.n	800ef10 <sbrk_aligned+0x38>
 800ef00:	1a21      	subs	r1, r4, r0
 800ef02:	4628      	mov	r0, r5
 800ef04:	f000 fb6a 	bl	800f5dc <_sbrk_r>
 800ef08:	3001      	adds	r0, #1
 800ef0a:	d101      	bne.n	800ef10 <sbrk_aligned+0x38>
 800ef0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ef10:	4620      	mov	r0, r4
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
 800ef14:	20014088 	.word	0x20014088

0800ef18 <_malloc_r>:
 800ef18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef1c:	1ccd      	adds	r5, r1, #3
 800ef1e:	f025 0503 	bic.w	r5, r5, #3
 800ef22:	3508      	adds	r5, #8
 800ef24:	2d0c      	cmp	r5, #12
 800ef26:	bf38      	it	cc
 800ef28:	250c      	movcc	r5, #12
 800ef2a:	2d00      	cmp	r5, #0
 800ef2c:	4607      	mov	r7, r0
 800ef2e:	db01      	blt.n	800ef34 <_malloc_r+0x1c>
 800ef30:	42a9      	cmp	r1, r5
 800ef32:	d905      	bls.n	800ef40 <_malloc_r+0x28>
 800ef34:	230c      	movs	r3, #12
 800ef36:	603b      	str	r3, [r7, #0]
 800ef38:	2600      	movs	r6, #0
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef40:	4e2e      	ldr	r6, [pc, #184]	; (800effc <_malloc_r+0xe4>)
 800ef42:	f000 fbfd 	bl	800f740 <__malloc_lock>
 800ef46:	6833      	ldr	r3, [r6, #0]
 800ef48:	461c      	mov	r4, r3
 800ef4a:	bb34      	cbnz	r4, 800ef9a <_malloc_r+0x82>
 800ef4c:	4629      	mov	r1, r5
 800ef4e:	4638      	mov	r0, r7
 800ef50:	f7ff ffc2 	bl	800eed8 <sbrk_aligned>
 800ef54:	1c43      	adds	r3, r0, #1
 800ef56:	4604      	mov	r4, r0
 800ef58:	d14d      	bne.n	800eff6 <_malloc_r+0xde>
 800ef5a:	6834      	ldr	r4, [r6, #0]
 800ef5c:	4626      	mov	r6, r4
 800ef5e:	2e00      	cmp	r6, #0
 800ef60:	d140      	bne.n	800efe4 <_malloc_r+0xcc>
 800ef62:	6823      	ldr	r3, [r4, #0]
 800ef64:	4631      	mov	r1, r6
 800ef66:	4638      	mov	r0, r7
 800ef68:	eb04 0803 	add.w	r8, r4, r3
 800ef6c:	f000 fb36 	bl	800f5dc <_sbrk_r>
 800ef70:	4580      	cmp	r8, r0
 800ef72:	d13a      	bne.n	800efea <_malloc_r+0xd2>
 800ef74:	6821      	ldr	r1, [r4, #0]
 800ef76:	3503      	adds	r5, #3
 800ef78:	1a6d      	subs	r5, r5, r1
 800ef7a:	f025 0503 	bic.w	r5, r5, #3
 800ef7e:	3508      	adds	r5, #8
 800ef80:	2d0c      	cmp	r5, #12
 800ef82:	bf38      	it	cc
 800ef84:	250c      	movcc	r5, #12
 800ef86:	4629      	mov	r1, r5
 800ef88:	4638      	mov	r0, r7
 800ef8a:	f7ff ffa5 	bl	800eed8 <sbrk_aligned>
 800ef8e:	3001      	adds	r0, #1
 800ef90:	d02b      	beq.n	800efea <_malloc_r+0xd2>
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	442b      	add	r3, r5
 800ef96:	6023      	str	r3, [r4, #0]
 800ef98:	e00e      	b.n	800efb8 <_malloc_r+0xa0>
 800ef9a:	6822      	ldr	r2, [r4, #0]
 800ef9c:	1b52      	subs	r2, r2, r5
 800ef9e:	d41e      	bmi.n	800efde <_malloc_r+0xc6>
 800efa0:	2a0b      	cmp	r2, #11
 800efa2:	d916      	bls.n	800efd2 <_malloc_r+0xba>
 800efa4:	1961      	adds	r1, r4, r5
 800efa6:	42a3      	cmp	r3, r4
 800efa8:	6025      	str	r5, [r4, #0]
 800efaa:	bf18      	it	ne
 800efac:	6059      	strne	r1, [r3, #4]
 800efae:	6863      	ldr	r3, [r4, #4]
 800efb0:	bf08      	it	eq
 800efb2:	6031      	streq	r1, [r6, #0]
 800efb4:	5162      	str	r2, [r4, r5]
 800efb6:	604b      	str	r3, [r1, #4]
 800efb8:	4638      	mov	r0, r7
 800efba:	f104 060b 	add.w	r6, r4, #11
 800efbe:	f000 fbc5 	bl	800f74c <__malloc_unlock>
 800efc2:	f026 0607 	bic.w	r6, r6, #7
 800efc6:	1d23      	adds	r3, r4, #4
 800efc8:	1af2      	subs	r2, r6, r3
 800efca:	d0b6      	beq.n	800ef3a <_malloc_r+0x22>
 800efcc:	1b9b      	subs	r3, r3, r6
 800efce:	50a3      	str	r3, [r4, r2]
 800efd0:	e7b3      	b.n	800ef3a <_malloc_r+0x22>
 800efd2:	6862      	ldr	r2, [r4, #4]
 800efd4:	42a3      	cmp	r3, r4
 800efd6:	bf0c      	ite	eq
 800efd8:	6032      	streq	r2, [r6, #0]
 800efda:	605a      	strne	r2, [r3, #4]
 800efdc:	e7ec      	b.n	800efb8 <_malloc_r+0xa0>
 800efde:	4623      	mov	r3, r4
 800efe0:	6864      	ldr	r4, [r4, #4]
 800efe2:	e7b2      	b.n	800ef4a <_malloc_r+0x32>
 800efe4:	4634      	mov	r4, r6
 800efe6:	6876      	ldr	r6, [r6, #4]
 800efe8:	e7b9      	b.n	800ef5e <_malloc_r+0x46>
 800efea:	230c      	movs	r3, #12
 800efec:	603b      	str	r3, [r7, #0]
 800efee:	4638      	mov	r0, r7
 800eff0:	f000 fbac 	bl	800f74c <__malloc_unlock>
 800eff4:	e7a1      	b.n	800ef3a <_malloc_r+0x22>
 800eff6:	6025      	str	r5, [r4, #0]
 800eff8:	e7de      	b.n	800efb8 <_malloc_r+0xa0>
 800effa:	bf00      	nop
 800effc:	20014084 	.word	0x20014084

0800f000 <__sfputc_r>:
 800f000:	6893      	ldr	r3, [r2, #8]
 800f002:	3b01      	subs	r3, #1
 800f004:	2b00      	cmp	r3, #0
 800f006:	b410      	push	{r4}
 800f008:	6093      	str	r3, [r2, #8]
 800f00a:	da08      	bge.n	800f01e <__sfputc_r+0x1e>
 800f00c:	6994      	ldr	r4, [r2, #24]
 800f00e:	42a3      	cmp	r3, r4
 800f010:	db01      	blt.n	800f016 <__sfputc_r+0x16>
 800f012:	290a      	cmp	r1, #10
 800f014:	d103      	bne.n	800f01e <__sfputc_r+0x1e>
 800f016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f01a:	f7ff bbf9 	b.w	800e810 <__swbuf_r>
 800f01e:	6813      	ldr	r3, [r2, #0]
 800f020:	1c58      	adds	r0, r3, #1
 800f022:	6010      	str	r0, [r2, #0]
 800f024:	7019      	strb	r1, [r3, #0]
 800f026:	4608      	mov	r0, r1
 800f028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f02c:	4770      	bx	lr

0800f02e <__sfputs_r>:
 800f02e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f030:	4606      	mov	r6, r0
 800f032:	460f      	mov	r7, r1
 800f034:	4614      	mov	r4, r2
 800f036:	18d5      	adds	r5, r2, r3
 800f038:	42ac      	cmp	r4, r5
 800f03a:	d101      	bne.n	800f040 <__sfputs_r+0x12>
 800f03c:	2000      	movs	r0, #0
 800f03e:	e007      	b.n	800f050 <__sfputs_r+0x22>
 800f040:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f044:	463a      	mov	r2, r7
 800f046:	4630      	mov	r0, r6
 800f048:	f7ff ffda 	bl	800f000 <__sfputc_r>
 800f04c:	1c43      	adds	r3, r0, #1
 800f04e:	d1f3      	bne.n	800f038 <__sfputs_r+0xa>
 800f050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f054 <_vfiprintf_r>:
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	460d      	mov	r5, r1
 800f05a:	b09d      	sub	sp, #116	; 0x74
 800f05c:	4614      	mov	r4, r2
 800f05e:	4698      	mov	r8, r3
 800f060:	4606      	mov	r6, r0
 800f062:	b118      	cbz	r0, 800f06c <_vfiprintf_r+0x18>
 800f064:	6983      	ldr	r3, [r0, #24]
 800f066:	b90b      	cbnz	r3, 800f06c <_vfiprintf_r+0x18>
 800f068:	f7ff fdca 	bl	800ec00 <__sinit>
 800f06c:	4b89      	ldr	r3, [pc, #548]	; (800f294 <_vfiprintf_r+0x240>)
 800f06e:	429d      	cmp	r5, r3
 800f070:	d11b      	bne.n	800f0aa <_vfiprintf_r+0x56>
 800f072:	6875      	ldr	r5, [r6, #4]
 800f074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f076:	07d9      	lsls	r1, r3, #31
 800f078:	d405      	bmi.n	800f086 <_vfiprintf_r+0x32>
 800f07a:	89ab      	ldrh	r3, [r5, #12]
 800f07c:	059a      	lsls	r2, r3, #22
 800f07e:	d402      	bmi.n	800f086 <_vfiprintf_r+0x32>
 800f080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f082:	f7ff fe6d 	bl	800ed60 <__retarget_lock_acquire_recursive>
 800f086:	89ab      	ldrh	r3, [r5, #12]
 800f088:	071b      	lsls	r3, r3, #28
 800f08a:	d501      	bpl.n	800f090 <_vfiprintf_r+0x3c>
 800f08c:	692b      	ldr	r3, [r5, #16]
 800f08e:	b9eb      	cbnz	r3, 800f0cc <_vfiprintf_r+0x78>
 800f090:	4629      	mov	r1, r5
 800f092:	4630      	mov	r0, r6
 800f094:	f7ff fc0e 	bl	800e8b4 <__swsetup_r>
 800f098:	b1c0      	cbz	r0, 800f0cc <_vfiprintf_r+0x78>
 800f09a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f09c:	07dc      	lsls	r4, r3, #31
 800f09e:	d50e      	bpl.n	800f0be <_vfiprintf_r+0x6a>
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0a4:	b01d      	add	sp, #116	; 0x74
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	4b7b      	ldr	r3, [pc, #492]	; (800f298 <_vfiprintf_r+0x244>)
 800f0ac:	429d      	cmp	r5, r3
 800f0ae:	d101      	bne.n	800f0b4 <_vfiprintf_r+0x60>
 800f0b0:	68b5      	ldr	r5, [r6, #8]
 800f0b2:	e7df      	b.n	800f074 <_vfiprintf_r+0x20>
 800f0b4:	4b79      	ldr	r3, [pc, #484]	; (800f29c <_vfiprintf_r+0x248>)
 800f0b6:	429d      	cmp	r5, r3
 800f0b8:	bf08      	it	eq
 800f0ba:	68f5      	ldreq	r5, [r6, #12]
 800f0bc:	e7da      	b.n	800f074 <_vfiprintf_r+0x20>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	0598      	lsls	r0, r3, #22
 800f0c2:	d4ed      	bmi.n	800f0a0 <_vfiprintf_r+0x4c>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f0c6:	f7ff fe4c 	bl	800ed62 <__retarget_lock_release_recursive>
 800f0ca:	e7e9      	b.n	800f0a0 <_vfiprintf_r+0x4c>
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d0:	2320      	movs	r3, #32
 800f0d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f0d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0da:	2330      	movs	r3, #48	; 0x30
 800f0dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f2a0 <_vfiprintf_r+0x24c>
 800f0e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f0e4:	f04f 0901 	mov.w	r9, #1
 800f0e8:	4623      	mov	r3, r4
 800f0ea:	469a      	mov	sl, r3
 800f0ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0f0:	b10a      	cbz	r2, 800f0f6 <_vfiprintf_r+0xa2>
 800f0f2:	2a25      	cmp	r2, #37	; 0x25
 800f0f4:	d1f9      	bne.n	800f0ea <_vfiprintf_r+0x96>
 800f0f6:	ebba 0b04 	subs.w	fp, sl, r4
 800f0fa:	d00b      	beq.n	800f114 <_vfiprintf_r+0xc0>
 800f0fc:	465b      	mov	r3, fp
 800f0fe:	4622      	mov	r2, r4
 800f100:	4629      	mov	r1, r5
 800f102:	4630      	mov	r0, r6
 800f104:	f7ff ff93 	bl	800f02e <__sfputs_r>
 800f108:	3001      	adds	r0, #1
 800f10a:	f000 80aa 	beq.w	800f262 <_vfiprintf_r+0x20e>
 800f10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f110:	445a      	add	r2, fp
 800f112:	9209      	str	r2, [sp, #36]	; 0x24
 800f114:	f89a 3000 	ldrb.w	r3, [sl]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 80a2 	beq.w	800f262 <_vfiprintf_r+0x20e>
 800f11e:	2300      	movs	r3, #0
 800f120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f128:	f10a 0a01 	add.w	sl, sl, #1
 800f12c:	9304      	str	r3, [sp, #16]
 800f12e:	9307      	str	r3, [sp, #28]
 800f130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f134:	931a      	str	r3, [sp, #104]	; 0x68
 800f136:	4654      	mov	r4, sl
 800f138:	2205      	movs	r2, #5
 800f13a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f13e:	4858      	ldr	r0, [pc, #352]	; (800f2a0 <_vfiprintf_r+0x24c>)
 800f140:	f7f1 f86e 	bl	8000220 <memchr>
 800f144:	9a04      	ldr	r2, [sp, #16]
 800f146:	b9d8      	cbnz	r0, 800f180 <_vfiprintf_r+0x12c>
 800f148:	06d1      	lsls	r1, r2, #27
 800f14a:	bf44      	itt	mi
 800f14c:	2320      	movmi	r3, #32
 800f14e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f152:	0713      	lsls	r3, r2, #28
 800f154:	bf44      	itt	mi
 800f156:	232b      	movmi	r3, #43	; 0x2b
 800f158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f15c:	f89a 3000 	ldrb.w	r3, [sl]
 800f160:	2b2a      	cmp	r3, #42	; 0x2a
 800f162:	d015      	beq.n	800f190 <_vfiprintf_r+0x13c>
 800f164:	9a07      	ldr	r2, [sp, #28]
 800f166:	4654      	mov	r4, sl
 800f168:	2000      	movs	r0, #0
 800f16a:	f04f 0c0a 	mov.w	ip, #10
 800f16e:	4621      	mov	r1, r4
 800f170:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f174:	3b30      	subs	r3, #48	; 0x30
 800f176:	2b09      	cmp	r3, #9
 800f178:	d94e      	bls.n	800f218 <_vfiprintf_r+0x1c4>
 800f17a:	b1b0      	cbz	r0, 800f1aa <_vfiprintf_r+0x156>
 800f17c:	9207      	str	r2, [sp, #28]
 800f17e:	e014      	b.n	800f1aa <_vfiprintf_r+0x156>
 800f180:	eba0 0308 	sub.w	r3, r0, r8
 800f184:	fa09 f303 	lsl.w	r3, r9, r3
 800f188:	4313      	orrs	r3, r2
 800f18a:	9304      	str	r3, [sp, #16]
 800f18c:	46a2      	mov	sl, r4
 800f18e:	e7d2      	b.n	800f136 <_vfiprintf_r+0xe2>
 800f190:	9b03      	ldr	r3, [sp, #12]
 800f192:	1d19      	adds	r1, r3, #4
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	9103      	str	r1, [sp, #12]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	bfbb      	ittet	lt
 800f19c:	425b      	neglt	r3, r3
 800f19e:	f042 0202 	orrlt.w	r2, r2, #2
 800f1a2:	9307      	strge	r3, [sp, #28]
 800f1a4:	9307      	strlt	r3, [sp, #28]
 800f1a6:	bfb8      	it	lt
 800f1a8:	9204      	strlt	r2, [sp, #16]
 800f1aa:	7823      	ldrb	r3, [r4, #0]
 800f1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800f1ae:	d10c      	bne.n	800f1ca <_vfiprintf_r+0x176>
 800f1b0:	7863      	ldrb	r3, [r4, #1]
 800f1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800f1b4:	d135      	bne.n	800f222 <_vfiprintf_r+0x1ce>
 800f1b6:	9b03      	ldr	r3, [sp, #12]
 800f1b8:	1d1a      	adds	r2, r3, #4
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	9203      	str	r2, [sp, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	bfb8      	it	lt
 800f1c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f1c6:	3402      	adds	r4, #2
 800f1c8:	9305      	str	r3, [sp, #20]
 800f1ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f2b0 <_vfiprintf_r+0x25c>
 800f1ce:	7821      	ldrb	r1, [r4, #0]
 800f1d0:	2203      	movs	r2, #3
 800f1d2:	4650      	mov	r0, sl
 800f1d4:	f7f1 f824 	bl	8000220 <memchr>
 800f1d8:	b140      	cbz	r0, 800f1ec <_vfiprintf_r+0x198>
 800f1da:	2340      	movs	r3, #64	; 0x40
 800f1dc:	eba0 000a 	sub.w	r0, r0, sl
 800f1e0:	fa03 f000 	lsl.w	r0, r3, r0
 800f1e4:	9b04      	ldr	r3, [sp, #16]
 800f1e6:	4303      	orrs	r3, r0
 800f1e8:	3401      	adds	r4, #1
 800f1ea:	9304      	str	r3, [sp, #16]
 800f1ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1f0:	482c      	ldr	r0, [pc, #176]	; (800f2a4 <_vfiprintf_r+0x250>)
 800f1f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1f6:	2206      	movs	r2, #6
 800f1f8:	f7f1 f812 	bl	8000220 <memchr>
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d03f      	beq.n	800f280 <_vfiprintf_r+0x22c>
 800f200:	4b29      	ldr	r3, [pc, #164]	; (800f2a8 <_vfiprintf_r+0x254>)
 800f202:	bb1b      	cbnz	r3, 800f24c <_vfiprintf_r+0x1f8>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	3307      	adds	r3, #7
 800f208:	f023 0307 	bic.w	r3, r3, #7
 800f20c:	3308      	adds	r3, #8
 800f20e:	9303      	str	r3, [sp, #12]
 800f210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f212:	443b      	add	r3, r7
 800f214:	9309      	str	r3, [sp, #36]	; 0x24
 800f216:	e767      	b.n	800f0e8 <_vfiprintf_r+0x94>
 800f218:	fb0c 3202 	mla	r2, ip, r2, r3
 800f21c:	460c      	mov	r4, r1
 800f21e:	2001      	movs	r0, #1
 800f220:	e7a5      	b.n	800f16e <_vfiprintf_r+0x11a>
 800f222:	2300      	movs	r3, #0
 800f224:	3401      	adds	r4, #1
 800f226:	9305      	str	r3, [sp, #20]
 800f228:	4619      	mov	r1, r3
 800f22a:	f04f 0c0a 	mov.w	ip, #10
 800f22e:	4620      	mov	r0, r4
 800f230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f234:	3a30      	subs	r2, #48	; 0x30
 800f236:	2a09      	cmp	r2, #9
 800f238:	d903      	bls.n	800f242 <_vfiprintf_r+0x1ee>
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d0c5      	beq.n	800f1ca <_vfiprintf_r+0x176>
 800f23e:	9105      	str	r1, [sp, #20]
 800f240:	e7c3      	b.n	800f1ca <_vfiprintf_r+0x176>
 800f242:	fb0c 2101 	mla	r1, ip, r1, r2
 800f246:	4604      	mov	r4, r0
 800f248:	2301      	movs	r3, #1
 800f24a:	e7f0      	b.n	800f22e <_vfiprintf_r+0x1da>
 800f24c:	ab03      	add	r3, sp, #12
 800f24e:	9300      	str	r3, [sp, #0]
 800f250:	462a      	mov	r2, r5
 800f252:	4b16      	ldr	r3, [pc, #88]	; (800f2ac <_vfiprintf_r+0x258>)
 800f254:	a904      	add	r1, sp, #16
 800f256:	4630      	mov	r0, r6
 800f258:	f3af 8000 	nop.w
 800f25c:	4607      	mov	r7, r0
 800f25e:	1c78      	adds	r0, r7, #1
 800f260:	d1d6      	bne.n	800f210 <_vfiprintf_r+0x1bc>
 800f262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f264:	07d9      	lsls	r1, r3, #31
 800f266:	d405      	bmi.n	800f274 <_vfiprintf_r+0x220>
 800f268:	89ab      	ldrh	r3, [r5, #12]
 800f26a:	059a      	lsls	r2, r3, #22
 800f26c:	d402      	bmi.n	800f274 <_vfiprintf_r+0x220>
 800f26e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f270:	f7ff fd77 	bl	800ed62 <__retarget_lock_release_recursive>
 800f274:	89ab      	ldrh	r3, [r5, #12]
 800f276:	065b      	lsls	r3, r3, #25
 800f278:	f53f af12 	bmi.w	800f0a0 <_vfiprintf_r+0x4c>
 800f27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f27e:	e711      	b.n	800f0a4 <_vfiprintf_r+0x50>
 800f280:	ab03      	add	r3, sp, #12
 800f282:	9300      	str	r3, [sp, #0]
 800f284:	462a      	mov	r2, r5
 800f286:	4b09      	ldr	r3, [pc, #36]	; (800f2ac <_vfiprintf_r+0x258>)
 800f288:	a904      	add	r1, sp, #16
 800f28a:	4630      	mov	r0, r6
 800f28c:	f000 f880 	bl	800f390 <_printf_i>
 800f290:	e7e4      	b.n	800f25c <_vfiprintf_r+0x208>
 800f292:	bf00      	nop
 800f294:	08016984 	.word	0x08016984
 800f298:	080169a4 	.word	0x080169a4
 800f29c:	08016964 	.word	0x08016964
 800f2a0:	080169c4 	.word	0x080169c4
 800f2a4:	080169ce 	.word	0x080169ce
 800f2a8:	00000000 	.word	0x00000000
 800f2ac:	0800f02f 	.word	0x0800f02f
 800f2b0:	080169ca 	.word	0x080169ca

0800f2b4 <_printf_common>:
 800f2b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2b8:	4616      	mov	r6, r2
 800f2ba:	4699      	mov	r9, r3
 800f2bc:	688a      	ldr	r2, [r1, #8]
 800f2be:	690b      	ldr	r3, [r1, #16]
 800f2c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	bfb8      	it	lt
 800f2c8:	4613      	movlt	r3, r2
 800f2ca:	6033      	str	r3, [r6, #0]
 800f2cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	460c      	mov	r4, r1
 800f2d4:	b10a      	cbz	r2, 800f2da <_printf_common+0x26>
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	6033      	str	r3, [r6, #0]
 800f2da:	6823      	ldr	r3, [r4, #0]
 800f2dc:	0699      	lsls	r1, r3, #26
 800f2de:	bf42      	ittt	mi
 800f2e0:	6833      	ldrmi	r3, [r6, #0]
 800f2e2:	3302      	addmi	r3, #2
 800f2e4:	6033      	strmi	r3, [r6, #0]
 800f2e6:	6825      	ldr	r5, [r4, #0]
 800f2e8:	f015 0506 	ands.w	r5, r5, #6
 800f2ec:	d106      	bne.n	800f2fc <_printf_common+0x48>
 800f2ee:	f104 0a19 	add.w	sl, r4, #25
 800f2f2:	68e3      	ldr	r3, [r4, #12]
 800f2f4:	6832      	ldr	r2, [r6, #0]
 800f2f6:	1a9b      	subs	r3, r3, r2
 800f2f8:	42ab      	cmp	r3, r5
 800f2fa:	dc26      	bgt.n	800f34a <_printf_common+0x96>
 800f2fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f300:	1e13      	subs	r3, r2, #0
 800f302:	6822      	ldr	r2, [r4, #0]
 800f304:	bf18      	it	ne
 800f306:	2301      	movne	r3, #1
 800f308:	0692      	lsls	r2, r2, #26
 800f30a:	d42b      	bmi.n	800f364 <_printf_common+0xb0>
 800f30c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f310:	4649      	mov	r1, r9
 800f312:	4638      	mov	r0, r7
 800f314:	47c0      	blx	r8
 800f316:	3001      	adds	r0, #1
 800f318:	d01e      	beq.n	800f358 <_printf_common+0xa4>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	68e5      	ldr	r5, [r4, #12]
 800f31e:	6832      	ldr	r2, [r6, #0]
 800f320:	f003 0306 	and.w	r3, r3, #6
 800f324:	2b04      	cmp	r3, #4
 800f326:	bf08      	it	eq
 800f328:	1aad      	subeq	r5, r5, r2
 800f32a:	68a3      	ldr	r3, [r4, #8]
 800f32c:	6922      	ldr	r2, [r4, #16]
 800f32e:	bf0c      	ite	eq
 800f330:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f334:	2500      	movne	r5, #0
 800f336:	4293      	cmp	r3, r2
 800f338:	bfc4      	itt	gt
 800f33a:	1a9b      	subgt	r3, r3, r2
 800f33c:	18ed      	addgt	r5, r5, r3
 800f33e:	2600      	movs	r6, #0
 800f340:	341a      	adds	r4, #26
 800f342:	42b5      	cmp	r5, r6
 800f344:	d11a      	bne.n	800f37c <_printf_common+0xc8>
 800f346:	2000      	movs	r0, #0
 800f348:	e008      	b.n	800f35c <_printf_common+0xa8>
 800f34a:	2301      	movs	r3, #1
 800f34c:	4652      	mov	r2, sl
 800f34e:	4649      	mov	r1, r9
 800f350:	4638      	mov	r0, r7
 800f352:	47c0      	blx	r8
 800f354:	3001      	adds	r0, #1
 800f356:	d103      	bne.n	800f360 <_printf_common+0xac>
 800f358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f360:	3501      	adds	r5, #1
 800f362:	e7c6      	b.n	800f2f2 <_printf_common+0x3e>
 800f364:	18e1      	adds	r1, r4, r3
 800f366:	1c5a      	adds	r2, r3, #1
 800f368:	2030      	movs	r0, #48	; 0x30
 800f36a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f36e:	4422      	add	r2, r4
 800f370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f378:	3302      	adds	r3, #2
 800f37a:	e7c7      	b.n	800f30c <_printf_common+0x58>
 800f37c:	2301      	movs	r3, #1
 800f37e:	4622      	mov	r2, r4
 800f380:	4649      	mov	r1, r9
 800f382:	4638      	mov	r0, r7
 800f384:	47c0      	blx	r8
 800f386:	3001      	adds	r0, #1
 800f388:	d0e6      	beq.n	800f358 <_printf_common+0xa4>
 800f38a:	3601      	adds	r6, #1
 800f38c:	e7d9      	b.n	800f342 <_printf_common+0x8e>
	...

0800f390 <_printf_i>:
 800f390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f394:	7e0f      	ldrb	r7, [r1, #24]
 800f396:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f398:	2f78      	cmp	r7, #120	; 0x78
 800f39a:	4691      	mov	r9, r2
 800f39c:	4680      	mov	r8, r0
 800f39e:	460c      	mov	r4, r1
 800f3a0:	469a      	mov	sl, r3
 800f3a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3a6:	d807      	bhi.n	800f3b8 <_printf_i+0x28>
 800f3a8:	2f62      	cmp	r7, #98	; 0x62
 800f3aa:	d80a      	bhi.n	800f3c2 <_printf_i+0x32>
 800f3ac:	2f00      	cmp	r7, #0
 800f3ae:	f000 80d8 	beq.w	800f562 <_printf_i+0x1d2>
 800f3b2:	2f58      	cmp	r7, #88	; 0x58
 800f3b4:	f000 80a3 	beq.w	800f4fe <_printf_i+0x16e>
 800f3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3c0:	e03a      	b.n	800f438 <_printf_i+0xa8>
 800f3c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3c6:	2b15      	cmp	r3, #21
 800f3c8:	d8f6      	bhi.n	800f3b8 <_printf_i+0x28>
 800f3ca:	a101      	add	r1, pc, #4	; (adr r1, 800f3d0 <_printf_i+0x40>)
 800f3cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f3d0:	0800f429 	.word	0x0800f429
 800f3d4:	0800f43d 	.word	0x0800f43d
 800f3d8:	0800f3b9 	.word	0x0800f3b9
 800f3dc:	0800f3b9 	.word	0x0800f3b9
 800f3e0:	0800f3b9 	.word	0x0800f3b9
 800f3e4:	0800f3b9 	.word	0x0800f3b9
 800f3e8:	0800f43d 	.word	0x0800f43d
 800f3ec:	0800f3b9 	.word	0x0800f3b9
 800f3f0:	0800f3b9 	.word	0x0800f3b9
 800f3f4:	0800f3b9 	.word	0x0800f3b9
 800f3f8:	0800f3b9 	.word	0x0800f3b9
 800f3fc:	0800f549 	.word	0x0800f549
 800f400:	0800f46d 	.word	0x0800f46d
 800f404:	0800f52b 	.word	0x0800f52b
 800f408:	0800f3b9 	.word	0x0800f3b9
 800f40c:	0800f3b9 	.word	0x0800f3b9
 800f410:	0800f56b 	.word	0x0800f56b
 800f414:	0800f3b9 	.word	0x0800f3b9
 800f418:	0800f46d 	.word	0x0800f46d
 800f41c:	0800f3b9 	.word	0x0800f3b9
 800f420:	0800f3b9 	.word	0x0800f3b9
 800f424:	0800f533 	.word	0x0800f533
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	1d1a      	adds	r2, r3, #4
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	602a      	str	r2, [r5, #0]
 800f430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f438:	2301      	movs	r3, #1
 800f43a:	e0a3      	b.n	800f584 <_printf_i+0x1f4>
 800f43c:	6820      	ldr	r0, [r4, #0]
 800f43e:	6829      	ldr	r1, [r5, #0]
 800f440:	0606      	lsls	r6, r0, #24
 800f442:	f101 0304 	add.w	r3, r1, #4
 800f446:	d50a      	bpl.n	800f45e <_printf_i+0xce>
 800f448:	680e      	ldr	r6, [r1, #0]
 800f44a:	602b      	str	r3, [r5, #0]
 800f44c:	2e00      	cmp	r6, #0
 800f44e:	da03      	bge.n	800f458 <_printf_i+0xc8>
 800f450:	232d      	movs	r3, #45	; 0x2d
 800f452:	4276      	negs	r6, r6
 800f454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f458:	485e      	ldr	r0, [pc, #376]	; (800f5d4 <_printf_i+0x244>)
 800f45a:	230a      	movs	r3, #10
 800f45c:	e019      	b.n	800f492 <_printf_i+0x102>
 800f45e:	680e      	ldr	r6, [r1, #0]
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f466:	bf18      	it	ne
 800f468:	b236      	sxthne	r6, r6
 800f46a:	e7ef      	b.n	800f44c <_printf_i+0xbc>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	6820      	ldr	r0, [r4, #0]
 800f470:	1d19      	adds	r1, r3, #4
 800f472:	6029      	str	r1, [r5, #0]
 800f474:	0601      	lsls	r1, r0, #24
 800f476:	d501      	bpl.n	800f47c <_printf_i+0xec>
 800f478:	681e      	ldr	r6, [r3, #0]
 800f47a:	e002      	b.n	800f482 <_printf_i+0xf2>
 800f47c:	0646      	lsls	r6, r0, #25
 800f47e:	d5fb      	bpl.n	800f478 <_printf_i+0xe8>
 800f480:	881e      	ldrh	r6, [r3, #0]
 800f482:	4854      	ldr	r0, [pc, #336]	; (800f5d4 <_printf_i+0x244>)
 800f484:	2f6f      	cmp	r7, #111	; 0x6f
 800f486:	bf0c      	ite	eq
 800f488:	2308      	moveq	r3, #8
 800f48a:	230a      	movne	r3, #10
 800f48c:	2100      	movs	r1, #0
 800f48e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f492:	6865      	ldr	r5, [r4, #4]
 800f494:	60a5      	str	r5, [r4, #8]
 800f496:	2d00      	cmp	r5, #0
 800f498:	bfa2      	ittt	ge
 800f49a:	6821      	ldrge	r1, [r4, #0]
 800f49c:	f021 0104 	bicge.w	r1, r1, #4
 800f4a0:	6021      	strge	r1, [r4, #0]
 800f4a2:	b90e      	cbnz	r6, 800f4a8 <_printf_i+0x118>
 800f4a4:	2d00      	cmp	r5, #0
 800f4a6:	d04d      	beq.n	800f544 <_printf_i+0x1b4>
 800f4a8:	4615      	mov	r5, r2
 800f4aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4ae:	fb03 6711 	mls	r7, r3, r1, r6
 800f4b2:	5dc7      	ldrb	r7, [r0, r7]
 800f4b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f4b8:	4637      	mov	r7, r6
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	460e      	mov	r6, r1
 800f4be:	d9f4      	bls.n	800f4aa <_printf_i+0x11a>
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d10b      	bne.n	800f4dc <_printf_i+0x14c>
 800f4c4:	6823      	ldr	r3, [r4, #0]
 800f4c6:	07de      	lsls	r6, r3, #31
 800f4c8:	d508      	bpl.n	800f4dc <_printf_i+0x14c>
 800f4ca:	6923      	ldr	r3, [r4, #16]
 800f4cc:	6861      	ldr	r1, [r4, #4]
 800f4ce:	4299      	cmp	r1, r3
 800f4d0:	bfde      	ittt	le
 800f4d2:	2330      	movle	r3, #48	; 0x30
 800f4d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f4d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f4dc:	1b52      	subs	r2, r2, r5
 800f4de:	6122      	str	r2, [r4, #16]
 800f4e0:	f8cd a000 	str.w	sl, [sp]
 800f4e4:	464b      	mov	r3, r9
 800f4e6:	aa03      	add	r2, sp, #12
 800f4e8:	4621      	mov	r1, r4
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	f7ff fee2 	bl	800f2b4 <_printf_common>
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d14c      	bne.n	800f58e <_printf_i+0x1fe>
 800f4f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4f8:	b004      	add	sp, #16
 800f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fe:	4835      	ldr	r0, [pc, #212]	; (800f5d4 <_printf_i+0x244>)
 800f500:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f504:	6829      	ldr	r1, [r5, #0]
 800f506:	6823      	ldr	r3, [r4, #0]
 800f508:	f851 6b04 	ldr.w	r6, [r1], #4
 800f50c:	6029      	str	r1, [r5, #0]
 800f50e:	061d      	lsls	r5, r3, #24
 800f510:	d514      	bpl.n	800f53c <_printf_i+0x1ac>
 800f512:	07df      	lsls	r7, r3, #31
 800f514:	bf44      	itt	mi
 800f516:	f043 0320 	orrmi.w	r3, r3, #32
 800f51a:	6023      	strmi	r3, [r4, #0]
 800f51c:	b91e      	cbnz	r6, 800f526 <_printf_i+0x196>
 800f51e:	6823      	ldr	r3, [r4, #0]
 800f520:	f023 0320 	bic.w	r3, r3, #32
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	2310      	movs	r3, #16
 800f528:	e7b0      	b.n	800f48c <_printf_i+0xfc>
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	f043 0320 	orr.w	r3, r3, #32
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	2378      	movs	r3, #120	; 0x78
 800f534:	4828      	ldr	r0, [pc, #160]	; (800f5d8 <_printf_i+0x248>)
 800f536:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f53a:	e7e3      	b.n	800f504 <_printf_i+0x174>
 800f53c:	0659      	lsls	r1, r3, #25
 800f53e:	bf48      	it	mi
 800f540:	b2b6      	uxthmi	r6, r6
 800f542:	e7e6      	b.n	800f512 <_printf_i+0x182>
 800f544:	4615      	mov	r5, r2
 800f546:	e7bb      	b.n	800f4c0 <_printf_i+0x130>
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	6826      	ldr	r6, [r4, #0]
 800f54c:	6961      	ldr	r1, [r4, #20]
 800f54e:	1d18      	adds	r0, r3, #4
 800f550:	6028      	str	r0, [r5, #0]
 800f552:	0635      	lsls	r5, r6, #24
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	d501      	bpl.n	800f55c <_printf_i+0x1cc>
 800f558:	6019      	str	r1, [r3, #0]
 800f55a:	e002      	b.n	800f562 <_printf_i+0x1d2>
 800f55c:	0670      	lsls	r0, r6, #25
 800f55e:	d5fb      	bpl.n	800f558 <_printf_i+0x1c8>
 800f560:	8019      	strh	r1, [r3, #0]
 800f562:	2300      	movs	r3, #0
 800f564:	6123      	str	r3, [r4, #16]
 800f566:	4615      	mov	r5, r2
 800f568:	e7ba      	b.n	800f4e0 <_printf_i+0x150>
 800f56a:	682b      	ldr	r3, [r5, #0]
 800f56c:	1d1a      	adds	r2, r3, #4
 800f56e:	602a      	str	r2, [r5, #0]
 800f570:	681d      	ldr	r5, [r3, #0]
 800f572:	6862      	ldr	r2, [r4, #4]
 800f574:	2100      	movs	r1, #0
 800f576:	4628      	mov	r0, r5
 800f578:	f7f0 fe52 	bl	8000220 <memchr>
 800f57c:	b108      	cbz	r0, 800f582 <_printf_i+0x1f2>
 800f57e:	1b40      	subs	r0, r0, r5
 800f580:	6060      	str	r0, [r4, #4]
 800f582:	6863      	ldr	r3, [r4, #4]
 800f584:	6123      	str	r3, [r4, #16]
 800f586:	2300      	movs	r3, #0
 800f588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f58c:	e7a8      	b.n	800f4e0 <_printf_i+0x150>
 800f58e:	6923      	ldr	r3, [r4, #16]
 800f590:	462a      	mov	r2, r5
 800f592:	4649      	mov	r1, r9
 800f594:	4640      	mov	r0, r8
 800f596:	47d0      	blx	sl
 800f598:	3001      	adds	r0, #1
 800f59a:	d0ab      	beq.n	800f4f4 <_printf_i+0x164>
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	079b      	lsls	r3, r3, #30
 800f5a0:	d413      	bmi.n	800f5ca <_printf_i+0x23a>
 800f5a2:	68e0      	ldr	r0, [r4, #12]
 800f5a4:	9b03      	ldr	r3, [sp, #12]
 800f5a6:	4298      	cmp	r0, r3
 800f5a8:	bfb8      	it	lt
 800f5aa:	4618      	movlt	r0, r3
 800f5ac:	e7a4      	b.n	800f4f8 <_printf_i+0x168>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	4632      	mov	r2, r6
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	47d0      	blx	sl
 800f5b8:	3001      	adds	r0, #1
 800f5ba:	d09b      	beq.n	800f4f4 <_printf_i+0x164>
 800f5bc:	3501      	adds	r5, #1
 800f5be:	68e3      	ldr	r3, [r4, #12]
 800f5c0:	9903      	ldr	r1, [sp, #12]
 800f5c2:	1a5b      	subs	r3, r3, r1
 800f5c4:	42ab      	cmp	r3, r5
 800f5c6:	dcf2      	bgt.n	800f5ae <_printf_i+0x21e>
 800f5c8:	e7eb      	b.n	800f5a2 <_printf_i+0x212>
 800f5ca:	2500      	movs	r5, #0
 800f5cc:	f104 0619 	add.w	r6, r4, #25
 800f5d0:	e7f5      	b.n	800f5be <_printf_i+0x22e>
 800f5d2:	bf00      	nop
 800f5d4:	080169d5 	.word	0x080169d5
 800f5d8:	080169e6 	.word	0x080169e6

0800f5dc <_sbrk_r>:
 800f5dc:	b538      	push	{r3, r4, r5, lr}
 800f5de:	4d06      	ldr	r5, [pc, #24]	; (800f5f8 <_sbrk_r+0x1c>)
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	602b      	str	r3, [r5, #0]
 800f5e8:	f7f1 f816 	bl	8000618 <_sbrk>
 800f5ec:	1c43      	adds	r3, r0, #1
 800f5ee:	d102      	bne.n	800f5f6 <_sbrk_r+0x1a>
 800f5f0:	682b      	ldr	r3, [r5, #0]
 800f5f2:	b103      	cbz	r3, 800f5f6 <_sbrk_r+0x1a>
 800f5f4:	6023      	str	r3, [r4, #0]
 800f5f6:	bd38      	pop	{r3, r4, r5, pc}
 800f5f8:	2001407c 	.word	0x2001407c

0800f5fc <__sread>:
 800f5fc:	b510      	push	{r4, lr}
 800f5fe:	460c      	mov	r4, r1
 800f600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f604:	f000 f8a8 	bl	800f758 <_read_r>
 800f608:	2800      	cmp	r0, #0
 800f60a:	bfab      	itete	ge
 800f60c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f60e:	89a3      	ldrhlt	r3, [r4, #12]
 800f610:	181b      	addge	r3, r3, r0
 800f612:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f616:	bfac      	ite	ge
 800f618:	6563      	strge	r3, [r4, #84]	; 0x54
 800f61a:	81a3      	strhlt	r3, [r4, #12]
 800f61c:	bd10      	pop	{r4, pc}

0800f61e <__swrite>:
 800f61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f622:	461f      	mov	r7, r3
 800f624:	898b      	ldrh	r3, [r1, #12]
 800f626:	05db      	lsls	r3, r3, #23
 800f628:	4605      	mov	r5, r0
 800f62a:	460c      	mov	r4, r1
 800f62c:	4616      	mov	r6, r2
 800f62e:	d505      	bpl.n	800f63c <__swrite+0x1e>
 800f630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f634:	2302      	movs	r3, #2
 800f636:	2200      	movs	r2, #0
 800f638:	f000 f870 	bl	800f71c <_lseek_r>
 800f63c:	89a3      	ldrh	r3, [r4, #12]
 800f63e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f642:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f646:	81a3      	strh	r3, [r4, #12]
 800f648:	4632      	mov	r2, r6
 800f64a:	463b      	mov	r3, r7
 800f64c:	4628      	mov	r0, r5
 800f64e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f652:	f000 b817 	b.w	800f684 <_write_r>

0800f656 <__sseek>:
 800f656:	b510      	push	{r4, lr}
 800f658:	460c      	mov	r4, r1
 800f65a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f65e:	f000 f85d 	bl	800f71c <_lseek_r>
 800f662:	1c43      	adds	r3, r0, #1
 800f664:	89a3      	ldrh	r3, [r4, #12]
 800f666:	bf15      	itete	ne
 800f668:	6560      	strne	r0, [r4, #84]	; 0x54
 800f66a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f66e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f672:	81a3      	strheq	r3, [r4, #12]
 800f674:	bf18      	it	ne
 800f676:	81a3      	strhne	r3, [r4, #12]
 800f678:	bd10      	pop	{r4, pc}

0800f67a <__sclose>:
 800f67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f67e:	f000 b81b 	b.w	800f6b8 <_close_r>
	...

0800f684 <_write_r>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4d07      	ldr	r5, [pc, #28]	; (800f6a4 <_write_r+0x20>)
 800f688:	4604      	mov	r4, r0
 800f68a:	4608      	mov	r0, r1
 800f68c:	4611      	mov	r1, r2
 800f68e:	2200      	movs	r2, #0
 800f690:	602a      	str	r2, [r5, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	f7f0 fff0 	bl	8000678 <_write>
 800f698:	1c43      	adds	r3, r0, #1
 800f69a:	d102      	bne.n	800f6a2 <_write_r+0x1e>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	b103      	cbz	r3, 800f6a2 <_write_r+0x1e>
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
 800f6a4:	2001407c 	.word	0x2001407c

0800f6a8 <abort>:
 800f6a8:	b508      	push	{r3, lr}
 800f6aa:	2006      	movs	r0, #6
 800f6ac:	f000 f88e 	bl	800f7cc <raise>
 800f6b0:	2001      	movs	r0, #1
 800f6b2:	f7f0 ffdb 	bl	800066c <_exit>
	...

0800f6b8 <_close_r>:
 800f6b8:	b538      	push	{r3, r4, r5, lr}
 800f6ba:	4d06      	ldr	r5, [pc, #24]	; (800f6d4 <_close_r+0x1c>)
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4604      	mov	r4, r0
 800f6c0:	4608      	mov	r0, r1
 800f6c2:	602b      	str	r3, [r5, #0]
 800f6c4:	f7f0 ffe6 	bl	8000694 <_close>
 800f6c8:	1c43      	adds	r3, r0, #1
 800f6ca:	d102      	bne.n	800f6d2 <_close_r+0x1a>
 800f6cc:	682b      	ldr	r3, [r5, #0]
 800f6ce:	b103      	cbz	r3, 800f6d2 <_close_r+0x1a>
 800f6d0:	6023      	str	r3, [r4, #0]
 800f6d2:	bd38      	pop	{r3, r4, r5, pc}
 800f6d4:	2001407c 	.word	0x2001407c

0800f6d8 <_fstat_r>:
 800f6d8:	b538      	push	{r3, r4, r5, lr}
 800f6da:	4d07      	ldr	r5, [pc, #28]	; (800f6f8 <_fstat_r+0x20>)
 800f6dc:	2300      	movs	r3, #0
 800f6de:	4604      	mov	r4, r0
 800f6e0:	4608      	mov	r0, r1
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	602b      	str	r3, [r5, #0]
 800f6e6:	f7f0 ffd8 	bl	800069a <_fstat>
 800f6ea:	1c43      	adds	r3, r0, #1
 800f6ec:	d102      	bne.n	800f6f4 <_fstat_r+0x1c>
 800f6ee:	682b      	ldr	r3, [r5, #0]
 800f6f0:	b103      	cbz	r3, 800f6f4 <_fstat_r+0x1c>
 800f6f2:	6023      	str	r3, [r4, #0]
 800f6f4:	bd38      	pop	{r3, r4, r5, pc}
 800f6f6:	bf00      	nop
 800f6f8:	2001407c 	.word	0x2001407c

0800f6fc <_isatty_r>:
 800f6fc:	b538      	push	{r3, r4, r5, lr}
 800f6fe:	4d06      	ldr	r5, [pc, #24]	; (800f718 <_isatty_r+0x1c>)
 800f700:	2300      	movs	r3, #0
 800f702:	4604      	mov	r4, r0
 800f704:	4608      	mov	r0, r1
 800f706:	602b      	str	r3, [r5, #0]
 800f708:	f7f0 ffcc 	bl	80006a4 <_isatty>
 800f70c:	1c43      	adds	r3, r0, #1
 800f70e:	d102      	bne.n	800f716 <_isatty_r+0x1a>
 800f710:	682b      	ldr	r3, [r5, #0]
 800f712:	b103      	cbz	r3, 800f716 <_isatty_r+0x1a>
 800f714:	6023      	str	r3, [r4, #0]
 800f716:	bd38      	pop	{r3, r4, r5, pc}
 800f718:	2001407c 	.word	0x2001407c

0800f71c <_lseek_r>:
 800f71c:	b538      	push	{r3, r4, r5, lr}
 800f71e:	4d07      	ldr	r5, [pc, #28]	; (800f73c <_lseek_r+0x20>)
 800f720:	4604      	mov	r4, r0
 800f722:	4608      	mov	r0, r1
 800f724:	4611      	mov	r1, r2
 800f726:	2200      	movs	r2, #0
 800f728:	602a      	str	r2, [r5, #0]
 800f72a:	461a      	mov	r2, r3
 800f72c:	f7f0 ffbc 	bl	80006a8 <_lseek>
 800f730:	1c43      	adds	r3, r0, #1
 800f732:	d102      	bne.n	800f73a <_lseek_r+0x1e>
 800f734:	682b      	ldr	r3, [r5, #0]
 800f736:	b103      	cbz	r3, 800f73a <_lseek_r+0x1e>
 800f738:	6023      	str	r3, [r4, #0]
 800f73a:	bd38      	pop	{r3, r4, r5, pc}
 800f73c:	2001407c 	.word	0x2001407c

0800f740 <__malloc_lock>:
 800f740:	4801      	ldr	r0, [pc, #4]	; (800f748 <__malloc_lock+0x8>)
 800f742:	f7ff bb0d 	b.w	800ed60 <__retarget_lock_acquire_recursive>
 800f746:	bf00      	nop
 800f748:	20014080 	.word	0x20014080

0800f74c <__malloc_unlock>:
 800f74c:	4801      	ldr	r0, [pc, #4]	; (800f754 <__malloc_unlock+0x8>)
 800f74e:	f7ff bb08 	b.w	800ed62 <__retarget_lock_release_recursive>
 800f752:	bf00      	nop
 800f754:	20014080 	.word	0x20014080

0800f758 <_read_r>:
 800f758:	b538      	push	{r3, r4, r5, lr}
 800f75a:	4d07      	ldr	r5, [pc, #28]	; (800f778 <_read_r+0x20>)
 800f75c:	4604      	mov	r4, r0
 800f75e:	4608      	mov	r0, r1
 800f760:	4611      	mov	r1, r2
 800f762:	2200      	movs	r2, #0
 800f764:	602a      	str	r2, [r5, #0]
 800f766:	461a      	mov	r2, r3
 800f768:	f7f0 ffa0 	bl	80006ac <_read>
 800f76c:	1c43      	adds	r3, r0, #1
 800f76e:	d102      	bne.n	800f776 <_read_r+0x1e>
 800f770:	682b      	ldr	r3, [r5, #0]
 800f772:	b103      	cbz	r3, 800f776 <_read_r+0x1e>
 800f774:	6023      	str	r3, [r4, #0]
 800f776:	bd38      	pop	{r3, r4, r5, pc}
 800f778:	2001407c 	.word	0x2001407c

0800f77c <_raise_r>:
 800f77c:	291f      	cmp	r1, #31
 800f77e:	b538      	push	{r3, r4, r5, lr}
 800f780:	4604      	mov	r4, r0
 800f782:	460d      	mov	r5, r1
 800f784:	d904      	bls.n	800f790 <_raise_r+0x14>
 800f786:	2316      	movs	r3, #22
 800f788:	6003      	str	r3, [r0, #0]
 800f78a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f792:	b112      	cbz	r2, 800f79a <_raise_r+0x1e>
 800f794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f798:	b94b      	cbnz	r3, 800f7ae <_raise_r+0x32>
 800f79a:	4620      	mov	r0, r4
 800f79c:	f000 f830 	bl	800f800 <_getpid_r>
 800f7a0:	462a      	mov	r2, r5
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7aa:	f000 b817 	b.w	800f7dc <_kill_r>
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d00a      	beq.n	800f7c8 <_raise_r+0x4c>
 800f7b2:	1c59      	adds	r1, r3, #1
 800f7b4:	d103      	bne.n	800f7be <_raise_r+0x42>
 800f7b6:	2316      	movs	r3, #22
 800f7b8:	6003      	str	r3, [r0, #0]
 800f7ba:	2001      	movs	r0, #1
 800f7bc:	e7e7      	b.n	800f78e <_raise_r+0x12>
 800f7be:	2400      	movs	r4, #0
 800f7c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	4798      	blx	r3
 800f7c8:	2000      	movs	r0, #0
 800f7ca:	e7e0      	b.n	800f78e <_raise_r+0x12>

0800f7cc <raise>:
 800f7cc:	4b02      	ldr	r3, [pc, #8]	; (800f7d8 <raise+0xc>)
 800f7ce:	4601      	mov	r1, r0
 800f7d0:	6818      	ldr	r0, [r3, #0]
 800f7d2:	f7ff bfd3 	b.w	800f77c <_raise_r>
 800f7d6:	bf00      	nop
 800f7d8:	20001a6c 	.word	0x20001a6c

0800f7dc <_kill_r>:
 800f7dc:	b538      	push	{r3, r4, r5, lr}
 800f7de:	4d07      	ldr	r5, [pc, #28]	; (800f7fc <_kill_r+0x20>)
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	4604      	mov	r4, r0
 800f7e4:	4608      	mov	r0, r1
 800f7e6:	4611      	mov	r1, r2
 800f7e8:	602b      	str	r3, [r5, #0]
 800f7ea:	f7f0 ff37 	bl	800065c <_kill>
 800f7ee:	1c43      	adds	r3, r0, #1
 800f7f0:	d102      	bne.n	800f7f8 <_kill_r+0x1c>
 800f7f2:	682b      	ldr	r3, [r5, #0]
 800f7f4:	b103      	cbz	r3, 800f7f8 <_kill_r+0x1c>
 800f7f6:	6023      	str	r3, [r4, #0]
 800f7f8:	bd38      	pop	{r3, r4, r5, pc}
 800f7fa:	bf00      	nop
 800f7fc:	2001407c 	.word	0x2001407c

0800f800 <_getpid_r>:
 800f800:	f7f0 bf2a 	b.w	8000658 <_getpid>

0800f804 <_init>:
 800f804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f806:	bf00      	nop
 800f808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f80a:	bc08      	pop	{r3}
 800f80c:	469e      	mov	lr, r3
 800f80e:	4770      	bx	lr

0800f810 <_fini>:
 800f810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f812:	bf00      	nop
 800f814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f816:	bc08      	pop	{r3}
 800f818:	469e      	mov	lr, r3
 800f81a:	4770      	bx	lr
