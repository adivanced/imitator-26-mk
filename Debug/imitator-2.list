
imitator-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b014  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  0801b1e4  0801b1e4  0002b1e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ea30  0801ea30  00031c00  2**0
                  CONTENTS
  4 .ARM          00000008  0801ea30  0801ea30  0002ea30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ea38  0801ea38  00031c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ea38  0801ea38  0002ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ea3c  0801ea3c  0002ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ac0  20000000  0801ea40  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20001ac0  08020500  00031ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20001b60  080205a0  00031b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0004db40  20001c00  08020640  00031c00  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2004f740  08020640  0003f740  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00031c00  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034bc6  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007a84  00000000  00000000  000667f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002528  00000000  00000000  0006e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000023b0  00000000  00000000  000707a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012b4d  00000000  00000000  00072b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039a51  00000000  00000000  000856a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00115aed  00000000  00000000  000bf0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001d4be3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a2d4  00000000  00000000  001d4c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001c00 	.word	0x20001c00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801b1cc 	.word	0x0801b1cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001c04 	.word	0x20001c04
 800020c:	0801b1cc 	.word	0x0801b1cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2110      	movs	r1, #16
 80005dc:	4826      	ldr	r0, [pc, #152]	; (8000678 <keyboard_GPIO_init+0xb4>)
 80005de:	f005 fddf 	bl	80061a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2101      	movs	r1, #1
 80005e6:	4825      	ldr	r0, [pc, #148]	; (800067c <keyboard_GPIO_init+0xb8>)
 80005e8:	f005 fdda 	bl	80061a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	21c0      	movs	r1, #192	; 0xc0
 80005f0:	4823      	ldr	r0, [pc, #140]	; (8000680 <keyboard_GPIO_init+0xbc>)
 80005f2:	f005 fdd5 	bl	80061a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f6:	2310      	movs	r3, #16
 80005f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80005fe:	2302      	movs	r3, #2
 8000600:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	4619      	mov	r1, r3
 800060a:	481b      	ldr	r0, [pc, #108]	; (8000678 <keyboard_GPIO_init+0xb4>)
 800060c:	f005 fc04 	bl	8005e18 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000610:	230c      	movs	r3, #12
 8000612:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000618:	2302      	movs	r3, #2
 800061a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	4619      	mov	r1, r3
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <keyboard_GPIO_init+0xb8>)
 8000622:	f005 fbf9 	bl	8005e18 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000626:	2301      	movs	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	4619      	mov	r1, r3
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <keyboard_GPIO_init+0xb8>)
 800063c:	f005 fbec 	bl	8005e18 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000640:	23c0      	movs	r3, #192	; 0xc0
 8000642:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <keyboard_GPIO_init+0xbc>)
 8000656:	f005 fbdf 	bl	8005e18 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065a:	2340      	movs	r3, #64	; 0x40
 800065c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <keyboard_GPIO_init+0xc0>)
 800066c:	f005 fbd4 	bl	8005e18 <HAL_GPIO_Init>
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40020400 	.word	0x40020400
 800067c:	40022000 	.word	0x40022000
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00

08000688 <get_current_keyboard_state>:

void get_current_keyboard_state(){
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	stage = (stage+1)%8;
 800068c:	4b95      	ldr	r3, [pc, #596]	; (80008e4 <get_current_keyboard_state+0x25c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <get_current_keyboard_state+0x25c>)
 8000698:	6013      	str	r3, [r2, #0]
	switch(stage){
 800069a:	4b92      	ldr	r3, [pc, #584]	; (80008e4 <get_current_keyboard_state+0x25c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b07      	cmp	r3, #7
 80006a0:	f200 82a3 	bhi.w	8000bea <get_current_keyboard_state+0x562>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <get_current_keyboard_state+0x24>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006cd 	.word	0x080006cd
 80006b0:	080006f7 	.word	0x080006f7
 80006b4:	08000807 	.word	0x08000807
 80006b8:	08000831 	.word	0x08000831
 80006bc:	0800095d 	.word	0x0800095d
 80006c0:	08000987 	.word	0x08000987
 80006c4:	08000a97 	.word	0x08000a97
 80006c8:	08000ac1 	.word	0x08000ac1
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2180      	movs	r1, #128	; 0x80
 80006d0:	4885      	ldr	r0, [pc, #532]	; (80008e8 <get_current_keyboard_state+0x260>)
 80006d2:	f005 fd65 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 80006d6:	2200      	movs	r2, #0
 80006d8:	2110      	movs	r1, #16
 80006da:	4884      	ldr	r0, [pc, #528]	; (80008ec <get_current_keyboard_state+0x264>)
 80006dc:	f005 fd60 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4882      	ldr	r0, [pc, #520]	; (80008f0 <get_current_keyboard_state+0x268>)
 80006e6:	f005 fd5b 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	487e      	ldr	r0, [pc, #504]	; (80008e8 <get_current_keyboard_state+0x260>)
 80006f0:	f005 fd56 	bl	80061a0 <HAL_GPIO_WritePin>
			break;
 80006f4:	e279      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 80006f6:	2140      	movs	r1, #64	; 0x40
 80006f8:	487e      	ldr	r0, [pc, #504]	; (80008f4 <get_current_keyboard_state+0x26c>)
 80006fa:	f005 fd39 	bl	8006170 <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b01      	cmp	r3, #1
 8000702:	d109      	bne.n	8000718 <get_current_keyboard_state+0x90>
 8000704:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b15      	cmp	r3, #21
 800070a:	d80e      	bhi.n	800072a <get_current_keyboard_state+0xa2>
 800070c:	4b7a      	ldr	r3, [pc, #488]	; (80008f8 <get_current_keyboard_state+0x270>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a79      	ldr	r2, [pc, #484]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000714:	6013      	str	r3, [r2, #0]
 8000716:	e008      	b.n	800072a <get_current_keyboard_state+0xa2>
 8000718:	4b77      	ldr	r3, [pc, #476]	; (80008f8 <get_current_keyboard_state+0x270>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d004      	beq.n	800072a <get_current_keyboard_state+0xa2>
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3b01      	subs	r3, #1
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000728:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 800072a:	2108      	movs	r1, #8
 800072c:	4870      	ldr	r0, [pc, #448]	; (80008f0 <get_current_keyboard_state+0x268>)
 800072e:	f005 fd1f 	bl	8006170 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d109      	bne.n	800074c <get_current_keyboard_state+0xc4>
 8000738:	4b6f      	ldr	r3, [pc, #444]	; (80008f8 <get_current_keyboard_state+0x270>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	2b15      	cmp	r3, #21
 800073e:	d80e      	bhi.n	800075e <get_current_keyboard_state+0xd6>
 8000740:	4b6d      	ldr	r3, [pc, #436]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000748:	6053      	str	r3, [r2, #4]
 800074a:	e008      	b.n	800075e <get_current_keyboard_state+0xd6>
 800074c:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <get_current_keyboard_state+0x270>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <get_current_keyboard_state+0xd6>
 8000754:	4b68      	ldr	r3, [pc, #416]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	3b01      	subs	r3, #1
 800075a:	4a67      	ldr	r2, [pc, #412]	; (80008f8 <get_current_keyboard_state+0x270>)
 800075c:	6053      	str	r3, [r2, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 800075e:	2104      	movs	r1, #4
 8000760:	4863      	ldr	r0, [pc, #396]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000762:	f005 fd05 	bl	8006170 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d109      	bne.n	8000780 <get_current_keyboard_state+0xf8>
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <get_current_keyboard_state+0x270>)
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	2b15      	cmp	r3, #21
 8000772:	d80e      	bhi.n	8000792 <get_current_keyboard_state+0x10a>
 8000774:	4b60      	ldr	r3, [pc, #384]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	3301      	adds	r3, #1
 800077a:	4a5f      	ldr	r2, [pc, #380]	; (80008f8 <get_current_keyboard_state+0x270>)
 800077c:	6093      	str	r3, [r2, #8]
 800077e:	e008      	b.n	8000792 <get_current_keyboard_state+0x10a>
 8000780:	4b5d      	ldr	r3, [pc, #372]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d004      	beq.n	8000792 <get_current_keyboard_state+0x10a>
 8000788:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <get_current_keyboard_state+0x270>)
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a5a      	ldr	r2, [pc, #360]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000790:	6093      	str	r3, [r2, #8]

			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 8000792:	4b59      	ldr	r3, [pc, #356]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b0e      	cmp	r3, #14
 8000798:	d907      	bls.n	80007aa <get_current_keyboard_state+0x122>
 800079a:	4b58      	ldr	r3, [pc, #352]	; (80008fc <get_current_keyboard_state+0x274>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	f043 0301 	orr.w	r3, r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b55      	ldr	r3, [pc, #340]	; (80008fc <get_current_keyboard_state+0x274>)
 80007a6:	801a      	strh	r2, [r3, #0]
 80007a8:	e006      	b.n	80007b8 <get_current_keyboard_state+0x130>
 80007aa:	4b54      	ldr	r3, [pc, #336]	; (80008fc <get_current_keyboard_state+0x274>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <get_current_keyboard_state+0x274>)
 80007b6:	801a      	strh	r2, [r3, #0]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 80007b8:	4b4f      	ldr	r3, [pc, #316]	; (80008f8 <get_current_keyboard_state+0x270>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b0e      	cmp	r3, #14
 80007be:	d907      	bls.n	80007d0 <get_current_keyboard_state+0x148>
 80007c0:	4b4e      	ldr	r3, [pc, #312]	; (80008fc <get_current_keyboard_state+0x274>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <get_current_keyboard_state+0x274>)
 80007cc:	801a      	strh	r2, [r3, #0]
 80007ce:	e006      	b.n	80007de <get_current_keyboard_state+0x156>
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <get_current_keyboard_state+0x274>)
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	f023 0302 	bic.w	r3, r3, #2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b48      	ldr	r3, [pc, #288]	; (80008fc <get_current_keyboard_state+0x274>)
 80007dc:	801a      	strh	r2, [r3, #0]
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80007de:	4b46      	ldr	r3, [pc, #280]	; (80008f8 <get_current_keyboard_state+0x270>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b0e      	cmp	r3, #14
 80007e4:	d907      	bls.n	80007f6 <get_current_keyboard_state+0x16e>
 80007e6:	4b45      	ldr	r3, [pc, #276]	; (80008fc <get_current_keyboard_state+0x274>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	f043 0304 	orr.w	r3, r3, #4
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b42      	ldr	r3, [pc, #264]	; (80008fc <get_current_keyboard_state+0x274>)
 80007f2:	801a      	strh	r2, [r3, #0]
			break;
 80007f4:	e1f9      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80007f6:	4b41      	ldr	r3, [pc, #260]	; (80008fc <get_current_keyboard_state+0x274>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	f023 0304 	bic.w	r3, r3, #4
 80007fe:	b29a      	uxth	r2, r3
 8000800:	4b3e      	ldr	r3, [pc, #248]	; (80008fc <get_current_keyboard_state+0x274>)
 8000802:	801a      	strh	r2, [r3, #0]
			break;
 8000804:	e1f1      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 2:{	
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4837      	ldr	r0, [pc, #220]	; (80008e8 <get_current_keyboard_state+0x260>)
 800080c:	f005 fcc8 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	; 0x80
 8000814:	4834      	ldr	r0, [pc, #208]	; (80008e8 <get_current_keyboard_state+0x260>)
 8000816:	f005 fcc3 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000820:	f005 fcbe 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4830      	ldr	r0, [pc, #192]	; (80008ec <get_current_keyboard_state+0x264>)
 800082a:	f005 fcb9 	bl	80061a0 <HAL_GPIO_WritePin>
			break;
 800082e:	e1dc      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4830      	ldr	r0, [pc, #192]	; (80008f4 <get_current_keyboard_state+0x26c>)
 8000834:	f005 fc9c 	bl	8006170 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d109      	bne.n	8000852 <get_current_keyboard_state+0x1ca>
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	2b15      	cmp	r3, #21
 8000844:	d80e      	bhi.n	8000864 <get_current_keyboard_state+0x1dc>
 8000846:	4b2c      	ldr	r3, [pc, #176]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	3301      	adds	r3, #1
 800084c:	4a2a      	ldr	r2, [pc, #168]	; (80008f8 <get_current_keyboard_state+0x270>)
 800084e:	60d3      	str	r3, [r2, #12]
 8000850:	e008      	b.n	8000864 <get_current_keyboard_state+0x1dc>
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <get_current_keyboard_state+0x1dc>
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <get_current_keyboard_state+0x270>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	3b01      	subs	r3, #1
 8000860:	4a25      	ldr	r2, [pc, #148]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000862:	60d3      	str	r3, [r2, #12]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 8000864:	2108      	movs	r1, #8
 8000866:	4822      	ldr	r0, [pc, #136]	; (80008f0 <get_current_keyboard_state+0x268>)
 8000868:	f005 fc82 	bl	8006170 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d109      	bne.n	8000886 <get_current_keyboard_state+0x1fe>
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	2b15      	cmp	r3, #21
 8000878:	d80e      	bhi.n	8000898 <get_current_keyboard_state+0x210>
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <get_current_keyboard_state+0x270>)
 800087c:	691b      	ldr	r3, [r3, #16]
 800087e:	3301      	adds	r3, #1
 8000880:	4a1d      	ldr	r2, [pc, #116]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000882:	6113      	str	r3, [r2, #16]
 8000884:	e008      	b.n	8000898 <get_current_keyboard_state+0x210>
 8000886:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <get_current_keyboard_state+0x210>
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	3b01      	subs	r3, #1
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <get_current_keyboard_state+0x270>)
 8000896:	6113      	str	r3, [r2, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 8000898:	2104      	movs	r1, #4
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <get_current_keyboard_state+0x268>)
 800089c:	f005 fc68 	bl	8006170 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d109      	bne.n	80008ba <get_current_keyboard_state+0x232>
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008a8:	695b      	ldr	r3, [r3, #20]
 80008aa:	2b15      	cmp	r3, #21
 80008ac:	d80e      	bhi.n	80008cc <get_current_keyboard_state+0x244>
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a10      	ldr	r2, [pc, #64]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008b6:	6153      	str	r3, [r2, #20]
 80008b8:	e008      	b.n	80008cc <get_current_keyboard_state+0x244>
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d004      	beq.n	80008cc <get_current_keyboard_state+0x244>
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008ca:	6153      	str	r3, [r2, #20]
	
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <get_current_keyboard_state+0x270>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	2b0e      	cmp	r3, #14
 80008d2:	d915      	bls.n	8000900 <get_current_keyboard_state+0x278>
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <get_current_keyboard_state+0x274>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	b29a      	uxth	r2, r3
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <get_current_keyboard_state+0x274>)
 80008e0:	801a      	strh	r2, [r3, #0]
 80008e2:	e014      	b.n	800090e <get_current_keyboard_state+0x286>
 80008e4:	20001c4c 	.word	0x20001c4c
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40022000 	.word	0x40022000
 80008f4:	40021c00 	.word	0x40021c00
 80008f8:	20001c1c 	.word	0x20001c1c
 80008fc:	20001c50 	.word	0x20001c50
 8000900:	4b92      	ldr	r3, [pc, #584]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	f023 0308 	bic.w	r3, r3, #8
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b90      	ldr	r3, [pc, #576]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800090c:	801a      	strh	r2, [r3, #0]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 800090e:	4b90      	ldr	r3, [pc, #576]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	2b0e      	cmp	r3, #14
 8000914:	d907      	bls.n	8000926 <get_current_keyboard_state+0x29e>
 8000916:	4b8d      	ldr	r3, [pc, #564]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	f043 0310 	orr.w	r3, r3, #16
 800091e:	b29a      	uxth	r2, r3
 8000920:	4b8a      	ldr	r3, [pc, #552]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000922:	801a      	strh	r2, [r3, #0]
 8000924:	e006      	b.n	8000934 <get_current_keyboard_state+0x2ac>
 8000926:	4b89      	ldr	r3, [pc, #548]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	f023 0310 	bic.w	r3, r3, #16
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b86      	ldr	r3, [pc, #536]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000932:	801a      	strh	r2, [r3, #0]
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8000934:	4b86      	ldr	r3, [pc, #536]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	2b0e      	cmp	r3, #14
 800093a:	d907      	bls.n	800094c <get_current_keyboard_state+0x2c4>
 800093c:	4b83      	ldr	r3, [pc, #524]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	b29a      	uxth	r2, r3
 8000946:	4b81      	ldr	r3, [pc, #516]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000948:	801a      	strh	r2, [r3, #0]
			break;
 800094a:	e14e      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 800094c:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	f023 0320 	bic.w	r3, r3, #32
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b7d      	ldr	r3, [pc, #500]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000958:	801a      	strh	r2, [r3, #0]
			break;
 800095a:	e146      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	2110      	movs	r1, #16
 8000960:	487c      	ldr	r0, [pc, #496]	; (8000b54 <get_current_keyboard_state+0x4cc>)
 8000962:	f005 fc1d 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	487b      	ldr	r0, [pc, #492]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 800096c:	f005 fc18 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	2101      	movs	r1, #1
 8000974:	4879      	ldr	r0, [pc, #484]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000976:	f005 fc13 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 800097a:	2201      	movs	r2, #1
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4876      	ldr	r0, [pc, #472]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000980:	f005 fc0e 	bl	80061a0 <HAL_GPIO_WritePin>
			break;
 8000984:	e131      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4875      	ldr	r0, [pc, #468]	; (8000b60 <get_current_keyboard_state+0x4d8>)
 800098a:	f005 fbf1 	bl	8006170 <HAL_GPIO_ReadPin>
 800098e:	4603      	mov	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d109      	bne.n	80009a8 <get_current_keyboard_state+0x320>
 8000994:	4b6e      	ldr	r3, [pc, #440]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	2b15      	cmp	r3, #21
 800099a:	d80e      	bhi.n	80009ba <get_current_keyboard_state+0x332>
 800099c:	4b6c      	ldr	r3, [pc, #432]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a6b      	ldr	r2, [pc, #428]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	e008      	b.n	80009ba <get_current_keyboard_state+0x332>
 80009a8:	4b69      	ldr	r3, [pc, #420]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d004      	beq.n	80009ba <get_current_keyboard_state+0x332>
 80009b0:	4b67      	ldr	r3, [pc, #412]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	4a66      	ldr	r2, [pc, #408]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009b8:	6193      	str	r3, [r2, #24]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 80009ba:	2108      	movs	r1, #8
 80009bc:	4867      	ldr	r0, [pc, #412]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 80009be:	f005 fbd7 	bl	8006170 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d109      	bne.n	80009dc <get_current_keyboard_state+0x354>
 80009c8:	4b61      	ldr	r3, [pc, #388]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009ca:	69db      	ldr	r3, [r3, #28]
 80009cc:	2b15      	cmp	r3, #21
 80009ce:	d80e      	bhi.n	80009ee <get_current_keyboard_state+0x366>
 80009d0:	4b5f      	ldr	r3, [pc, #380]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	4a5e      	ldr	r2, [pc, #376]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	e008      	b.n	80009ee <get_current_keyboard_state+0x366>
 80009dc:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <get_current_keyboard_state+0x366>
 80009e4:	4b5a      	ldr	r3, [pc, #360]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a59      	ldr	r2, [pc, #356]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009ec:	61d3      	str	r3, [r2, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 80009ee:	2104      	movs	r1, #4
 80009f0:	485a      	ldr	r0, [pc, #360]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 80009f2:	f005 fbbd 	bl	8006170 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d109      	bne.n	8000a10 <get_current_keyboard_state+0x388>
 80009fc:	4b54      	ldr	r3, [pc, #336]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 80009fe:	6a1b      	ldr	r3, [r3, #32]
 8000a00:	2b15      	cmp	r3, #21
 8000a02:	d80e      	bhi.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a04:	4b52      	ldr	r3, [pc, #328]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a51      	ldr	r2, [pc, #324]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a0c:	6213      	str	r3, [r2, #32]
 8000a0e:	e008      	b.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d004      	beq.n	8000a22 <get_current_keyboard_state+0x39a>
 8000a18:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a20:	6213      	str	r3, [r2, #32]

			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 8000a22:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2b0e      	cmp	r3, #14
 8000a28:	d907      	bls.n	8000a3a <get_current_keyboard_state+0x3b2>
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a36:	801a      	strh	r2, [r3, #0]
 8000a38:	e006      	b.n	8000a48 <get_current_keyboard_state+0x3c0>
 8000a3a:	4b44      	ldr	r3, [pc, #272]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b41      	ldr	r3, [pc, #260]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a46:	801a      	strh	r2, [r3, #0]
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8000a48:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	2b0e      	cmp	r3, #14
 8000a4e:	d907      	bls.n	8000a60 <get_current_keyboard_state+0x3d8>
 8000a50:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a5c:	801a      	strh	r2, [r3, #0]
 8000a5e:	e006      	b.n	8000a6e <get_current_keyboard_state+0x3e6>
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b38      	ldr	r3, [pc, #224]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a6c:	801a      	strh	r2, [r3, #0]
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000a6e:	4b38      	ldr	r3, [pc, #224]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	2b0e      	cmp	r3, #14
 8000a74:	d907      	bls.n	8000a86 <get_current_keyboard_state+0x3fe>
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	4b32      	ldr	r3, [pc, #200]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a82:	801a      	strh	r2, [r3, #0]
			break;
 8000a84:	e0b1      	b.n	8000bea <get_current_keyboard_state+0x562>
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a8e:	b29a      	uxth	r2, r3
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <get_current_keyboard_state+0x4c4>)
 8000a92:	801a      	strh	r2, [r3, #0]
			break;
 8000a94:	e0a9      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 6:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2110      	movs	r1, #16
 8000a9a:	482e      	ldr	r0, [pc, #184]	; (8000b54 <get_current_keyboard_state+0x4cc>)
 8000a9c:	f005 fb80 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2140      	movs	r1, #64	; 0x40
 8000aa4:	482c      	ldr	r0, [pc, #176]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000aa6:	f005 fb7b 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	482a      	ldr	r0, [pc, #168]	; (8000b58 <get_current_keyboard_state+0x4d0>)
 8000ab0:	f005 fb76 	bl	80061a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4828      	ldr	r0, [pc, #160]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000aba:	f005 fb71 	bl	80061a0 <HAL_GPIO_WritePin>
			break;
 8000abe:	e094      	b.n	8000bea <get_current_keyboard_state+0x562>
		}
		case 7:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	4827      	ldr	r0, [pc, #156]	; (8000b60 <get_current_keyboard_state+0x4d8>)
 8000ac4:	f005 fb54 	bl	8006170 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d109      	bne.n	8000ae2 <get_current_keyboard_state+0x45a>
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	2b15      	cmp	r3, #21
 8000ad4:	d80e      	bhi.n	8000af4 <get_current_keyboard_state+0x46c>
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ada:	3301      	adds	r3, #1
 8000adc:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ade:	6253      	str	r3, [r2, #36]	; 0x24
 8000ae0:	e008      	b.n	8000af4 <get_current_keyboard_state+0x46c>
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d004      	beq.n	8000af4 <get_current_keyboard_state+0x46c>
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	3b01      	subs	r3, #1
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000af2:	6253      	str	r3, [r2, #36]	; 0x24
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 8000af4:	2108      	movs	r1, #8
 8000af6:	4819      	ldr	r0, [pc, #100]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000af8:	f005 fb3a 	bl	8006170 <HAL_GPIO_ReadPin>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d109      	bne.n	8000b16 <get_current_keyboard_state+0x48e>
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	2b15      	cmp	r3, #21
 8000b08:	d80e      	bhi.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b12:	6293      	str	r3, [r2, #40]	; 0x28
 8000b14:	e008      	b.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d004      	beq.n	8000b28 <get_current_keyboard_state+0x4a0>
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b26:	6293      	str	r3, [r2, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8000b28:	2104      	movs	r1, #4
 8000b2a:	480c      	ldr	r0, [pc, #48]	; (8000b5c <get_current_keyboard_state+0x4d4>)
 8000b2c:	f005 fb20 	bl	8006170 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d116      	bne.n	8000b64 <get_current_keyboard_state+0x4dc>
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	2b15      	cmp	r3, #21
 8000b3c:	d81b      	bhi.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	3301      	adds	r3, #1
 8000b44:	4a02      	ldr	r2, [pc, #8]	; (8000b50 <get_current_keyboard_state+0x4c8>)
 8000b46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b48:	e015      	b.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b4a:	bf00      	nop
 8000b4c:	20001c50 	.word	0x20001c50
 8000b50:	20001c1c 	.word	0x20001c1c
 8000b54:	40020400 	.word	0x40020400
 8000b58:	40021800 	.word	0x40021800
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40021c00 	.word	0x40021c00
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d004      	beq.n	8000b76 <get_current_keyboard_state+0x4ee>
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b74:	62d3      	str	r3, [r2, #44]	; 0x2c

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 8000b76:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	2b0e      	cmp	r3, #14
 8000b7c:	d907      	bls.n	8000b8e <get_current_keyboard_state+0x506>
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b8a:	801a      	strh	r2, [r3, #0]
 8000b8c:	e006      	b.n	8000b9c <get_current_keyboard_state+0x514>
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000b9a:	801a      	strh	r2, [r3, #0]
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba0:	2b0e      	cmp	r3, #14
 8000ba2:	d907      	bls.n	8000bb4 <get_current_keyboard_state+0x52c>
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bac:	b29a      	uxth	r2, r3
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bb0:	801a      	strh	r2, [r3, #0]
 8000bb2:	e006      	b.n	8000bc2 <get_current_keyboard_state+0x53a>
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bc0:	801a      	strh	r2, [r3, #0]
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <get_current_keyboard_state+0x568>)
 8000bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc6:	2b0e      	cmp	r3, #14
 8000bc8:	d907      	bls.n	8000bda <get_current_keyboard_state+0x552>
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bd6:	801a      	strh	r2, [r3, #0]
			break;
 8000bd8:	e006      	b.n	8000be8 <get_current_keyboard_state+0x560>
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <get_current_keyboard_state+0x56c>)
 8000be6:	801a      	strh	r2, [r3, #0]
			break;
 8000be8:	bf00      	nop
		}

	}
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20001c1c 	.word	0x20001c1c
 8000bf4:	20001c50 	.word	0x20001c50

08000bf8 <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pins : PF8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <spinner_GPIO_init+0x60>)
 8000c20:	f005 f8fa 	bl	8005e18 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <spinner_GPIO_init+0x64>)
 8000c36:	f005 f8ef 	bl	8005e18 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4804      	ldr	r0, [pc, #16]	; (8000c5c <spinner_GPIO_init+0x64>)
 8000c4c:	f005 f8e4 	bl	8005e18 <HAL_GPIO_Init>
}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021400 	.word	0x40021400
 8000c5c:	40020800 	.word	0x40020800

08000c60 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6a:	4815      	ldr	r0, [pc, #84]	; (8000cc0 <get_current_spinner_button_state+0x60>)
 8000c6c:	f005 fa80 	bl	8006170 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_RESET){
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d109      	bne.n	8000c8e <get_current_spinner_button_state+0x2e>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b3b      	cmp	r3, #59	; 0x3b
 8000c80:	d80e      	bhi.n	8000ca0 <get_current_spinner_button_state+0x40>
				spinner_button_count++;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e008      	b.n	8000ca0 <get_current_spinner_button_state+0x40>
		}
	}else{
		if(spinner_button_count >= 3){
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d904      	bls.n	8000ca0 <get_current_spinner_button_state+0x40>
			spinner_button_count-=3;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3b03      	subs	r3, #3
 8000c9c:	4a09      	ldr	r2, [pc, #36]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000c9e:	6013      	str	r3, [r2, #0]
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <get_current_spinner_button_state+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b27      	cmp	r3, #39	; 0x27
 8000ca6:	d903      	bls.n	8000cb0 <get_current_spinner_button_state+0x50>
		spinner_button_state=1;
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <get_current_spinner_button_state+0x68>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
	}else{
		spinner_button_state=0;
	}
}
 8000cae:	e002      	b.n	8000cb6 <get_current_spinner_button_state+0x56>
		spinner_button_state=0;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <get_current_spinner_button_state+0x68>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	20001c58 	.word	0x20001c58
 8000cc8:	20001c54 	.word	0x20001c54

08000ccc <get_spinner_position_change>:


void get_spinner_position_change(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	switch(spinner_stage){
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <get_spinner_position_change+0x130>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b05      	cmp	r3, #5
 8000cd6:	f200 808f 	bhi.w	8000df8 <get_spinner_position_change+0x12c>
 8000cda:	a201      	add	r2, pc, #4	; (adr r2, 8000ce0 <get_spinner_position_change+0x14>)
 8000cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce0:	08000cf9 	.word	0x08000cf9
 8000ce4:	08000d25 	.word	0x08000d25
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d79 	.word	0x08000d79
 8000cf0:	08000db7 	.word	0x08000db7
 8000cf4:	08000dcd 	.word	0x08000dcd
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4841      	ldr	r0, [pc, #260]	; (8000e00 <get_spinner_position_change+0x134>)
 8000cfc:	f005 fa38 	bl	8006170 <HAL_GPIO_ReadPin>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d16d      	bne.n	8000de2 <get_spinner_position_change+0x116>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	483d      	ldr	r0, [pc, #244]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d0a:	f005 fa31 	bl	8006170 <HAL_GPIO_ReadPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <get_spinner_position_change+0x50>
					spinner_stage = 1;
 8000d14:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
				}else{
					spinner_stage = 3;
				}
			}
			break;
 8000d1a:	e062      	b.n	8000de2 <get_spinner_position_change+0x116>
					spinner_stage = 3;
 8000d1c:	4b37      	ldr	r3, [pc, #220]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	601a      	str	r2, [r3, #0]
			break;
 8000d22:	e05e      	b.n	8000de2 <get_spinner_position_change+0x116>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000d24:	2140      	movs	r1, #64	; 0x40
 8000d26:	4836      	ldr	r0, [pc, #216]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d28:	f005 fa22 	bl	8006170 <HAL_GPIO_ReadPin>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d159      	bne.n	8000de6 <get_spinner_position_change+0x11a>
				//if(spinner_position){
					//spinner_position--;
				minuscnt++;
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	4a32      	ldr	r2, [pc, #200]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d3a:	6013      	str	r3, [r2, #0]
				pluscnt=0;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
				if(minuscnt >= 4){
 8000d42:	4b30      	ldr	r3, [pc, #192]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b03      	cmp	r3, #3
 8000d48:	d907      	bls.n	8000d5a <get_spinner_position_change+0x8e>
					spinner_position--;
 8000d4a:	4b30      	ldr	r3, [pc, #192]	; (8000e0c <get_spinner_position_change+0x140>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	4a2e      	ldr	r2, [pc, #184]	; (8000e0c <get_spinner_position_change+0x140>)
 8000d52:	6013      	str	r3, [r2, #0]
					minuscnt=0;
 8000d54:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
				}
				//}
				spinner_stage = 2;
 8000d5a:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d60:	e041      	b.n	8000de6 <get_spinner_position_change+0x11a>
		}
		case 2:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	4826      	ldr	r0, [pc, #152]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d66:	f005 fa03 	bl	8006170 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d13c      	bne.n	8000dea <get_spinner_position_change+0x11e>
				spinner_stage = 0;
 8000d70:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <get_spinner_position_change+0x130>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000d76:	e038      	b.n	8000dea <get_spinner_position_change+0x11e>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <get_spinner_position_change+0x134>)
 8000d7c:	f005 f9f8 	bl	8006170 <HAL_GPIO_ReadPin>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d133      	bne.n	8000dee <get_spinner_position_change+0x122>
				//if(spinner_position < 1000){
					//spinner_position++;
				pluscnt++;
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d8e:	6013      	str	r3, [r2, #0]
				minuscnt=0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <get_spinner_position_change+0x138>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
				if(pluscnt>=2){
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d907      	bls.n	8000dae <get_spinner_position_change+0xe2>
					spinner_position++;
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <get_spinner_position_change+0x140>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	3301      	adds	r3, #1
 8000da4:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <get_spinner_position_change+0x140>)
 8000da6:	6013      	str	r3, [r2, #0]
					pluscnt=0;
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <get_spinner_position_change+0x13c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
				}
				//}				
				spinner_stage = 4;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <get_spinner_position_change+0x130>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000db4:	e01b      	b.n	8000dee <get_spinner_position_change+0x122>
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000db6:	2180      	movs	r1, #128	; 0x80
 8000db8:	4811      	ldr	r0, [pc, #68]	; (8000e00 <get_spinner_position_change+0x134>)
 8000dba:	f005 f9d9 	bl	8006170 <HAL_GPIO_ReadPin>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d116      	bne.n	8000df2 <get_spinner_position_change+0x126>
				spinner_stage = 5;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <get_spinner_position_change+0x130>)
 8000dc6:	2205      	movs	r2, #5
 8000dc8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000dca:	e012      	b.n	8000df2 <get_spinner_position_change+0x126>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <get_spinner_position_change+0x134>)
 8000dd0:	f005 f9ce 	bl	8006170 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10d      	bne.n	8000df6 <get_spinner_position_change+0x12a>
				spinner_stage = 0;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <get_spinner_position_change+0x130>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
			}
			break;
 8000de0:	e009      	b.n	8000df6 <get_spinner_position_change+0x12a>
			break;
 8000de2:	bf00      	nop
 8000de4:	e008      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000de6:	bf00      	nop
 8000de8:	e006      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000dea:	bf00      	nop
 8000dec:	e004      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;			
 8000dee:	bf00      	nop
 8000df0:	e002      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;
 8000df2:	bf00      	nop
 8000df4:	e000      	b.n	8000df8 <get_spinner_position_change+0x12c>
			break;
 8000df6:	bf00      	nop
		}
	}
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20001c5c 	.word	0x20001c5c
 8000e00:	40020800 	.word	0x40020800
 8000e04:	20001c64 	.word	0x20001c64
 8000e08:	20001c60 	.word	0x20001c60
 8000e0c:	20000000 	.word	0x20000000

08000e10 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e28:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4803      	ldr	r0, [pc, #12]	; (8000e44 <switch_GPIO_init+0x34>)
 8000e38:	f004 ffee 	bl	8005e18 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021400 	.word	0x40021400

08000e48 <get_current_switch_state>:

void get_current_switch_state(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e52:	4809      	ldr	r0, [pc, #36]	; (8000e78 <get_current_switch_state+0x30>)
 8000e54:	f005 f98c 	bl	8006170 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_SET){
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d103      	bne.n	8000e6a <get_current_switch_state+0x22>
		switch_state = 0;
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <get_current_switch_state+0x34>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
	}else{
		switch_state = 1;
	}
}
 8000e68:	e002      	b.n	8000e70 <get_current_switch_state+0x28>
		switch_state = 1;
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <get_current_switch_state+0x34>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021400 	.word	0x40021400
 8000e7c:	20001c68 	.word	0x20001c68

08000e80 <print_rectangle>:
			framebuf[i * SCRWIDTH + j] = color;
		}
	}
}

void print_rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e01a      	b.n	8000eca <print_rectangle+0x4a>
		for(uint32_t j = x; j < x+w; j++){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e00e      	b.n	8000eb8 <print_rectangle+0x38>
			framebuf[i*SCRWIDTH+j] = color;
 8000e9a:	697a      	ldr	r2, [r7, #20]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	1a9b      	subs	r3, r3, r2
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <print_rectangle+0x64>)
 8000eac:	8c3a      	ldrh	r2, [r7, #32]
 8000eae:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3ea      	bcc.n	8000e9a <print_rectangle+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d3de      	bcc.n	8000e94 <print_rectangle+0x14>
		}
	}
}
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	20001c6c 	.word	0x20001c6c

08000ee8 <print_rectangle_empty>:

void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000ee8:	b480      	push	{r7}
 8000eea:	b087      	sub	sp, #28
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e041      	b.n	8000f80 <print_rectangle_empty+0x98>
		for(uint32_t j = x; j < x+w; j++){
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	e035      	b.n	8000f6e <print_rectangle_empty+0x86>
			if(i != y && i != y+h-1){
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d022      	beq.n	8000f50 <print_rectangle_empty+0x68>
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	3b01      	subs	r3, #1
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d01b      	beq.n	8000f50 <print_rectangle_empty+0x68>
				framebuf[i*SCRWIDTH+x] = color;
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	015b      	lsls	r3, r3, #5
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	491c      	ldr	r1, [pc, #112]	; (8000f9c <print_rectangle_empty+0xb4>)
 8000f2a:	8c3a      	ldrh	r2, [r7, #32]
 8000f2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				framebuf[i*SCRWIDTH+x+w-1] = color;
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	4613      	mov	r3, r2
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	1a9b      	subs	r3, r3, r2
 8000f38:	015b      	lsls	r3, r3, #5
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	441a      	add	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4915      	ldr	r1, [pc, #84]	; (8000f9c <print_rectangle_empty+0xb4>)
 8000f48:	8c3a      	ldrh	r2, [r7, #32]
 8000f4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				break;
 8000f4e:	e014      	b.n	8000f7a <print_rectangle_empty+0x92>
			}
			framebuf[i*SCRWIDTH+j] = color;
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4613      	mov	r3, r2
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	015b      	lsls	r3, r3, #5
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4413      	add	r3, r2
 8000f60:	490e      	ldr	r1, [pc, #56]	; (8000f9c <print_rectangle_empty+0xb4>)
 8000f62:	8c3a      	ldrh	r2, [r7, #32]
 8000f64:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d3c3      	bcc.n	8000f02 <print_rectangle_empty+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	4413      	add	r3, r2
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d3b7      	bcc.n	8000efc <print_rectangle_empty+0x14>
		}
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20001c6c 	.word	0x20001c6c

08000fa0 <print_char>:


void print_char(uint32_t x, uint32_t y, uint8_t index, uint16_t color){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b08f      	sub	sp, #60	; 0x3c
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4611      	mov	r1, r2
 8000fac:	461a      	mov	r2, r3
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 8000fb6:	79fa      	ldrb	r2, [r7, #7]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b4b      	ldr	r3, [pc, #300]	; (80010f0 <print_char+0x150>)
 8000fc4:	4413      	add	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
 8000fd0:	e03c      	b.n	800104c <print_char+0xac>
		uint32_t yiter = y;
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe0:	e02b      	b.n	800103a <print_char+0x9a>
			if(*fptr & mask){
 8000fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000fea:	4013      	ands	r3, r2
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00c      	beq.n	800100c <print_char+0x6c>
				framebuf[yiter * SCRWIDTH + xiter] = color;
 8000ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	4413      	add	r3, r2
 8001002:	493c      	ldr	r1, [pc, #240]	; (80010f4 <print_char+0x154>)
 8001004:	88ba      	ldrh	r2, [r7, #4]
 8001006:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800100a:	e00b      	b.n	8001024 <print_char+0x84>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 800100c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800100e:	4613      	mov	r3, r2
 8001010:	011b      	lsls	r3, r3, #4
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	015b      	lsls	r3, r3, #5
 8001016:	461a      	mov	r2, r3
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	4413      	add	r3, r2
 800101c:	4a35      	ldr	r2, [pc, #212]	; (80010f4 <print_char+0x154>)
 800101e:	2100      	movs	r1, #0
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 8001024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter++;
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	3301      	adds	r3, #1
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	3301      	adds	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	2b07      	cmp	r3, #7
 800103e:	d9d0      	bls.n	8000fe2 <print_char+0x42>
		}
		xiter++;
 8001040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001042:	3301      	adds	r3, #1
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001048:	3301      	adds	r3, #1
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	330c      	adds	r3, #12
 8001050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001052:	429a      	cmp	r2, r3
 8001054:	d3bd      	bcc.n	8000fd2 <print_char+0x32>
	}
	xiter = x;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	e039      	b.n	80010d6 <print_char+0x136>
		uint32_t yiter = y+8;
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3308      	adds	r3, #8
 8001066:	61fb      	str	r3, [r7, #28]
		uint8_t mask = 0b00000001;
 8001068:	2301      	movs	r3, #1
 800106a:	76fb      	strb	r3, [r7, #27]
		for(uint32_t i = 0; i < 8; i++){
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	e028      	b.n	80010c4 <print_char+0x124>
			if(*fptr & mask){
 8001072:	6a3b      	ldr	r3, [r7, #32]
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	7efb      	ldrb	r3, [r7, #27]
 8001078:	4013      	ands	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d00c      	beq.n	800109a <print_char+0xfa>
				framebuf[yiter * 480 + xiter] = color;
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	4613      	mov	r3, r2
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	461a      	mov	r2, r3
 800108c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108e:	4413      	add	r3, r2
 8001090:	4918      	ldr	r1, [pc, #96]	; (80010f4 <print_char+0x154>)
 8001092:	88ba      	ldrh	r2, [r7, #4]
 8001094:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001098:	e00b      	b.n	80010b2 <print_char+0x112>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 800109a:	69fa      	ldr	r2, [r7, #28]
 800109c:	4613      	mov	r3, r2
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	1a9b      	subs	r3, r3, r2
 80010a2:	015b      	lsls	r3, r3, #5
 80010a4:	461a      	mov	r2, r3
 80010a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010a8:	4413      	add	r3, r2
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <print_char+0x154>)
 80010ac:	2100      	movs	r1, #0
 80010ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 80010b2:	7efb      	ldrb	r3, [r7, #27]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	76fb      	strb	r3, [r7, #27]
			yiter++;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3301      	adds	r3, #1
 80010bc:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < 8; i++){
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b07      	cmp	r3, #7
 80010c8:	d9d3      	bls.n	8001072 <print_char+0xd2>
		}
		xiter++;
 80010ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010cc:	3301      	adds	r3, #1
 80010ce:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	3301      	adds	r3, #1
 80010d4:	623b      	str	r3, [r7, #32]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	3318      	adds	r3, #24
 80010da:	6a3a      	ldr	r2, [r7, #32]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c0      	bcc.n	8001062 <print_char+0xc2>
	}

}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	373c      	adds	r7, #60	; 0x3c
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	20001c6c 	.word	0x20001c6c

080010f8 <print_char_scaled>:


void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 80010f8:	b480      	push	{r7}
 80010fa:	b097      	sub	sp, #92	; 0x5c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	4611      	mov	r1, r2
 8001104:	461a      	mov	r2, r3
 8001106:	460b      	mov	r3, r1
 8001108:	71fb      	strb	r3, [r7, #7]
 800110a:	4613      	mov	r3, r2
 800110c:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 800110e:	79fa      	ldrb	r2, [r7, #7]
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	461a      	mov	r2, r3
 800111a:	4b80      	ldr	r3, [pc, #512]	; (800131c <print_char_scaled+0x224>)
 800111c:	4413      	add	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	653b      	str	r3, [r7, #80]	; 0x50
 8001128:	e06e      	b.n	8001208 <print_char_scaled+0x110>
		uint32_t yiter = y;
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t mask = 0b00000001;
 800112e:	2301      	movs	r3, #1
 8001130:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for(uint32_t i = 0; i < 8; i++){
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
 8001138:	e05c      	b.n	80011f4 <print_char_scaled+0xfc>
			if(*fptr & mask){
 800113a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001142:	4013      	ands	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d024      	beq.n	8001194 <print_char_scaled+0x9c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800114a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800114c:	643b      	str	r3, [r7, #64]	; 0x40
 800114e:	e01a      	b.n	8001186 <print_char_scaled+0x8e>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001154:	e00e      	b.n	8001174 <print_char_scaled+0x7c>
						framebuf[iy * SCRWIDTH + ix] = color;	
 8001156:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001158:	4613      	mov	r3, r2
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	1a9b      	subs	r3, r3, r2
 800115e:	015b      	lsls	r3, r3, #5
 8001160:	461a      	mov	r2, r3
 8001162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001164:	4413      	add	r3, r2
 8001166:	496e      	ldr	r1, [pc, #440]	; (8001320 <print_char_scaled+0x228>)
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800116e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001170:	3301      	adds	r3, #1
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001174:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001178:	4413      	add	r3, r2
 800117a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800117c:	429a      	cmp	r2, r3
 800117e:	d3ea      	bcc.n	8001156 <print_char_scaled+0x5e>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001180:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001182:	3301      	adds	r3, #1
 8001184:	643b      	str	r3, [r7, #64]	; 0x40
 8001186:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001188:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800118a:	4413      	add	r3, r2
 800118c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800118e:	429a      	cmp	r2, r3
 8001190:	d3de      	bcc.n	8001150 <print_char_scaled+0x58>
 8001192:	e023      	b.n	80011dc <print_char_scaled+0xe4>
					}
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
 8001198:	e01a      	b.n	80011d0 <print_char_scaled+0xd8>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800119a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
 800119e:	e00e      	b.n	80011be <print_char_scaled+0xc6>
						framebuf[iy * SCRWIDTH + ix] = 0;
 80011a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011a2:	4613      	mov	r3, r2
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	015b      	lsls	r3, r3, #5
 80011aa:	461a      	mov	r2, r3
 80011ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ae:	4413      	add	r3, r2
 80011b0:	4a5b      	ldr	r2, [pc, #364]	; (8001320 <print_char_scaled+0x228>)
 80011b2:	2100      	movs	r1, #0
 80011b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80011b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ba:	3301      	adds	r3, #1
 80011bc:	637b      	str	r3, [r7, #52]	; 0x34
 80011be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011c2:	4413      	add	r3, r2
 80011c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d3ea      	bcc.n	80011a0 <print_char_scaled+0xa8>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80011ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011cc:	3301      	adds	r3, #1
 80011ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80011d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011d4:	4413      	add	r3, r2
 80011d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80011d8:	429a      	cmp	r2, r3
 80011da:	d3de      	bcc.n	800119a <print_char_scaled+0xa2>
					}
				}
			}
			mask = mask << 1;
 80011dc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			yiter+=scale;
 80011e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011ea:	4413      	add	r3, r2
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		for(uint32_t i = 0; i < 8; i++){
 80011ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f0:	3301      	adds	r3, #1
 80011f2:	647b      	str	r3, [r7, #68]	; 0x44
 80011f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011f6:	2b07      	cmp	r3, #7
 80011f8:	d99f      	bls.n	800113a <print_char_scaled+0x42>
		}
		xiter+=scale;
 80011fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80011fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80011fe:	4413      	add	r3, r2
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001204:	3301      	adds	r3, #1
 8001206:	653b      	str	r3, [r7, #80]	; 0x50
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	330c      	adds	r3, #12
 800120c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800120e:	429a      	cmp	r2, r3
 8001210:	d38b      	bcc.n	800112a <print_char_scaled+0x32>
	}
	xiter = x;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	330c      	adds	r3, #12
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
 800121c:	e071      	b.n	8001302 <print_char_scaled+0x20a>
		uint32_t yiter = y+8*scale;
 800121e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4413      	add	r3, r2
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
 8001232:	e05c      	b.n	80012ee <print_char_scaled+0x1f6>
			if(*fptr & mask){
 8001234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800123c:	4013      	ands	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d024      	beq.n	800128e <print_char_scaled+0x196>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001246:	623b      	str	r3, [r7, #32]
 8001248:	e01a      	b.n	8001280 <print_char_scaled+0x188>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800124a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e00e      	b.n	800126e <print_char_scaled+0x176>
						framebuf[iy * SCRWIDTH + ix] = color;	
 8001250:	6a3a      	ldr	r2, [r7, #32]
 8001252:	4613      	mov	r3, r2
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	461a      	mov	r2, r3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	4413      	add	r3, r2
 8001260:	492f      	ldr	r1, [pc, #188]	; (8001320 <print_char_scaled+0x228>)
 8001262:	88ba      	ldrh	r2, [r7, #4]
 8001264:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3301      	adds	r3, #1
 800126c:	61fb      	str	r3, [r7, #28]
 800126e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001270:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001272:	4413      	add	r3, r2
 8001274:	69fa      	ldr	r2, [r7, #28]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3ea      	bcc.n	8001250 <print_char_scaled+0x158>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	3301      	adds	r3, #1
 800127e:	623b      	str	r3, [r7, #32]
 8001280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001282:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001284:	4413      	add	r3, r2
 8001286:	6a3a      	ldr	r2, [r7, #32]
 8001288:	429a      	cmp	r2, r3
 800128a:	d3de      	bcc.n	800124a <print_char_scaled+0x152>
 800128c:	e023      	b.n	80012d6 <print_char_scaled+0x1de>
					}
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800128e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001290:	61bb      	str	r3, [r7, #24]
 8001292:	e01a      	b.n	80012ca <print_char_scaled+0x1d2>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00e      	b.n	80012b8 <print_char_scaled+0x1c0>
						framebuf[iy * SCRWIDTH + ix] = 0;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4613      	mov	r3, r2
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	1a9b      	subs	r3, r3, r2
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	461a      	mov	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	4413      	add	r3, r2
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <print_char_scaled+0x228>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012bc:	4413      	add	r3, r2
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d3ea      	bcc.n	800129a <print_char_scaled+0x1a2>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012ce:	4413      	add	r3, r2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3de      	bcc.n	8001294 <print_char_scaled+0x19c>
					}
				}
			}
			mask = mask << 1;
 80012d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter+=scale;
 80012e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012e4:	4413      	add	r3, r2
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	3301      	adds	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d99f      	bls.n	8001234 <print_char_scaled+0x13c>
		}
		xiter+=scale;
 80012f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f8:	4413      	add	r3, r2
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	3301      	adds	r3, #1
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	3318      	adds	r3, #24
 8001306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001308:	429a      	cmp	r2, r3
 800130a:	d388      	bcc.n	800121e <print_char_scaled+0x126>
	}
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	375c      	adds	r7, #92	; 0x5c
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000004 	.word	0x20000004
 8001320:	20001c6c 	.word	0x20001c6c

08001324 <print_char_scaled_y>:


void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 8001324:	b480      	push	{r7}
 8001326:	b093      	sub	sp, #76	; 0x4c
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	460b      	mov	r3, r1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	4613      	mov	r3, r2
 8001338:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 800133a:	79fa      	ldrb	r2, [r7, #7]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	461a      	mov	r2, r3
 8001346:	4b67      	ldr	r3, [pc, #412]	; (80014e4 <print_char_scaled_y+0x1c0>)
 8001348:	4413      	add	r3, r2
 800134a:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
 8001354:	e055      	b.n	8001402 <print_char_scaled_y+0xde>
		uint32_t yiter = y;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t mask = 0b00000001;
 800135a:	2301      	movs	r3, #1
 800135c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for(uint32_t i = 0; i < 8; i++){
 8001360:	2300      	movs	r3, #0
 8001362:	637b      	str	r3, [r7, #52]	; 0x34
 8001364:	e044      	b.n	80013f0 <print_char_scaled_y+0xcc>
			if(*fptr & mask){
 8001366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800136e:	4013      	ands	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d018      	beq.n	80013a8 <print_char_scaled_y+0x84>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
 800137a:	e00e      	b.n	800139a <print_char_scaled_y+0x76>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 800137c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800137e:	4613      	mov	r3, r2
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	015b      	lsls	r3, r3, #5
 8001386:	461a      	mov	r2, r3
 8001388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800138a:	4413      	add	r3, r2
 800138c:	4956      	ldr	r1, [pc, #344]	; (80014e8 <print_char_scaled_y+0x1c4>)
 800138e:	88ba      	ldrh	r2, [r7, #4]
 8001390:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001396:	3301      	adds	r3, #1
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
 800139a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800139c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800139e:	4413      	add	r3, r2
 80013a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d3ea      	bcc.n	800137c <print_char_scaled_y+0x58>
 80013a6:	e017      	b.n	80013d8 <print_char_scaled_y+0xb4>
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ac:	e00e      	b.n	80013cc <print_char_scaled_y+0xa8>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 80013ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b0:	4613      	mov	r3, r2
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	1a9b      	subs	r3, r3, r2
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	461a      	mov	r2, r3
 80013ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013bc:	4413      	add	r3, r2
 80013be:	4a4a      	ldr	r2, [pc, #296]	; (80014e8 <print_char_scaled_y+0x1c4>)
 80013c0:	2100      	movs	r1, #0
 80013c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	3301      	adds	r3, #1
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013d0:	4413      	add	r3, r2
 80013d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d3ea      	bcc.n	80013ae <print_char_scaled_y+0x8a>
				}
			}
			mask = mask << 1;
 80013d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			yiter+=scale;
 80013e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e6:	4413      	add	r3, r2
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(uint32_t i = 0; i < 8; i++){
 80013ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ec:	3301      	adds	r3, #1
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
 80013f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d9b7      	bls.n	8001366 <print_char_scaled_y+0x42>
		}
		xiter++;
 80013f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f8:	3301      	adds	r3, #1
 80013fa:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80013fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013fe:	3301      	adds	r3, #1
 8001400:	643b      	str	r3, [r7, #64]	; 0x40
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	330c      	adds	r3, #12
 8001406:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001408:	429a      	cmp	r2, r3
 800140a:	d3a4      	bcc.n	8001356 <print_char_scaled_y+0x32>
	}
	xiter = x;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	330c      	adds	r3, #12
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
 8001416:	e058      	b.n	80014ca <print_char_scaled_y+0x1a6>
		uint32_t yiter = y+8*scale;
 8001418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	4413      	add	r3, r2
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t mask = 0b00000001;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(uint32_t i = 0; i < 8; i++){
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	e044      	b.n	80014b8 <print_char_scaled_y+0x194>
			if(*fptr & mask){
 800142e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001436:	4013      	ands	r3, r2
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d018      	beq.n	8001470 <print_char_scaled_y+0x14c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	e00e      	b.n	8001462 <print_char_scaled_y+0x13e>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4613      	mov	r3, r2
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	015b      	lsls	r3, r3, #5
 800144e:	461a      	mov	r2, r3
 8001450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001452:	4413      	add	r3, r2
 8001454:	4924      	ldr	r1, [pc, #144]	; (80014e8 <print_char_scaled_y+0x1c4>)
 8001456:	88ba      	ldrh	r2, [r7, #4]
 8001458:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	3301      	adds	r3, #1
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001466:	4413      	add	r3, r2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3ea      	bcc.n	8001444 <print_char_scaled_y+0x120>
 800146e:	e017      	b.n	80014a0 <print_char_scaled_y+0x17c>
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00e      	b.n	8001494 <print_char_scaled_y+0x170>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4613      	mov	r3, r2
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	1a9b      	subs	r3, r3, r2
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	461a      	mov	r2, r3
 8001482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001484:	4413      	add	r3, r2
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <print_char_scaled_y+0x1c4>)
 8001488:	2100      	movs	r1, #0
 800148a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001498:	4413      	add	r3, r2
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3ea      	bcc.n	8001476 <print_char_scaled_y+0x152>
				}
			}
			mask = mask << 1;
 80014a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			yiter+=scale;
 80014aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ae:	4413      	add	r3, r2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = 0; i < 8; i++){
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3301      	adds	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	2b07      	cmp	r3, #7
 80014bc:	d9b7      	bls.n	800142e <print_char_scaled_y+0x10a>
		}
		xiter++;
 80014be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c0:	3301      	adds	r3, #1
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80014c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c6:	3301      	adds	r3, #1
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	3318      	adds	r3, #24
 80014ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d3a1      	bcc.n	8001418 <print_char_scaled_y+0xf4>
	}
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	374c      	adds	r7, #76	; 0x4c
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000004 	.word	0x20000004
 80014e8:	20001c6c 	.word	0x20001c6c

080014ec <print_string>:

void print_string(uint32_t x, uint32_t y, char* string, uint16_t color){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe fe88 	bl	8000210 <strlen>
 8001500:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e00c      	b.n	8001522 <print_string+0x36>
		print_char(x, y, *i, color);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	781a      	ldrb	r2, [r3, #0]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	68b9      	ldr	r1, [r7, #8]
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fd45 	bl	8000fa0 <print_char>
		x += 12;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	330c      	adds	r3, #12
 800151a:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4413      	add	r3, r2
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	429a      	cmp	r2, r3
 800152c:	d3ec      	bcc.n	8001508 <print_string+0x1c>
		//y += 16;
	}
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <print_string_scaled>:

void print_string_scaled(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af02      	add	r7, sp, #8
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7fe fe62 	bl	8000210 <strlen>
 800154c:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e015      	b.n	8001580 <print_string_scaled+0x48>
		print_char_scaled(x, y, *i, color, scale);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	8879      	ldrh	r1, [r7, #2]
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	460b      	mov	r3, r1
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f7ff fdc8 	bl	80010f8 <print_char_scaled>
		x += 12*scale;
 8001568:	6a3a      	ldr	r2, [r7, #32]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4413      	add	r3, r2
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3e3      	bcc.n	8001554 <print_string_scaled+0x1c>
		//y += 16*scale;
	}
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <print_string_scaled_y>:

void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 8001596:	b580      	push	{r7, lr}
 8001598:	b088      	sub	sp, #32
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7fe fe33 	bl	8000210 <strlen>
 80015aa:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00f      	b.n	80015d2 <print_string_scaled_y+0x3c>
		print_char_scaled_y(x, y, *i, color, scale);
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	781a      	ldrb	r2, [r3, #0]
 80015b6:	8879      	ldrh	r1, [r7, #2]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	460b      	mov	r3, r1
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff feaf 	bl	8001324 <print_char_scaled_y>
		x += 12;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	330c      	adds	r3, #12
 80015ca:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d3e9      	bcc.n	80015b2 <print_string_scaled_y+0x1c>
		//y += 16*scale;
	}
}
 80015de:	bf00      	nop
 80015e0:	bf00      	nop
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <fill_screen>:
// 16
// 12
// 272
// 4

void fill_screen(uint16_t color){for(uint16_t* i = framebuf; i < framebuf+SCRWIDTH*SCRHEIGHT; i++){*i = color;}}
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <fill_screen+0x34>)
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e005      	b.n	8001604 <fill_screen+0x1c>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	88fa      	ldrh	r2, [r7, #6]
 80015fc:	801a      	strh	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	3302      	adds	r3, #2
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <fill_screen+0x38>)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4293      	cmp	r3, r2
 800160a:	d3f5      	bcc.n	80015f8 <fill_screen+0x10>
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20001c6c 	.word	0x20001c6c
 8001620:	2004186c 	.word	0x2004186c

08001624 <print_number>:


void print_number(uint32_t x, uint32_t y, uint32_t number, uint16_t color, uint32_t scale){
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af02      	add	r7, sp, #8
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	807b      	strh	r3, [r7, #2]
	if(!number){
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d11b      	bne.n	8001670 <print_number+0x4c>
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 8001638:	6a3a      	ldr	r2, [r7, #32]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	18d0      	adds	r0, r2, r3
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <print_number+0xe0>)
 800164c:	fba3 2301 	umull	r2, r3, r3, r1
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	1aca      	subs	r2, r1, r3
 800165c:	b2d3      	uxtb	r3, r2
 800165e:	3330      	adds	r3, #48	; 0x30
 8001660:	b2da      	uxtb	r2, r3
 8001662:	8879      	ldrh	r1, [r7, #2]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	460b      	mov	r3, r1
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	f7ff fd44 	bl	80010f8 <print_char_scaled>
	}

	uint32_t numlen = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
	uint32_t num_cp = number;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	613b      	str	r3, [r7, #16]
	while(num_cp){
 8001678:	e008      	b.n	800168c <print_number+0x68>
		numlen++;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
		num_cp /= 10;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4a20      	ldr	r2, [pc, #128]	; (8001704 <print_number+0xe0>)
 8001684:	fba2 2303 	umull	r2, r3, r2, r3
 8001688:	08db      	lsrs	r3, r3, #3
 800168a:	613b      	str	r3, [r7, #16]
	while(num_cp){
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f3      	bne.n	800167a <print_number+0x56>
	}

	x += numlen * scale * 12;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	fb03 f202 	mul.w	r2, r3, r2
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
	while(number){
 80016aa:	e023      	b.n	80016f4 <print_number+0xd0>
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <print_number+0xe0>)
 80016b0:	fba3 2301 	umull	r2, r3, r3, r1
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	4613      	mov	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	1aca      	subs	r2, r1, r3
 80016c0:	b2d3      	uxtb	r3, r2
 80016c2:	3330      	adds	r3, #48	; 0x30
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	8879      	ldrh	r1, [r7, #2]
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	460b      	mov	r3, r1
 80016ce:	68b9      	ldr	r1, [r7, #8]
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7ff fd11 	bl	80010f8 <print_char_scaled>
		x -= scale * 12;
 80016d6:	6a3a      	ldr	r2, [r7, #32]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]
		number /= 10;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a06      	ldr	r2, [pc, #24]	; (8001704 <print_number+0xe0>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	607b      	str	r3, [r7, #4]
	while(number){
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1d8      	bne.n	80016ac <print_number+0x88>
	}
}
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	cccccccd 	.word	0xcccccccd

08001708 <print_fat_rectangle>:

uint32_t state_progress = 0;
uint32_t mem_sp_st = 0; // memorized spinner position for diff
uint32_t system_angle = 180;

void print_fat_rectangle(){
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
	uint32_t x = 80;
 800170e:	2350      	movs	r3, #80	; 0x50
 8001710:	617b      	str	r3, [r7, #20]
	uint32_t y = 80;
 8001712:	2350      	movs	r3, #80	; 0x50
 8001714:	613b      	str	r3, [r7, #16]
	uint32_t width = 320;
 8001716:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800171a:	60fb      	str	r3, [r7, #12]
	uint32_t height = 100;
 800171c:	2364      	movs	r3, #100	; 0x64
 800171e:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 8001720:	2300      	movs	r3, #0
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	e017      	b.n	8001756 <print_fat_rectangle+0x4e>
		print_rectangle_empty(x, y, width, height, 0x797);
 8001726:	f240 7397 	movw	r3, #1943	; 0x797
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	6978      	ldr	r0, [r7, #20]
 8001734:	f7ff fbd8 	bl	8000ee8 <print_rectangle_empty>
		x++;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
		y++;
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	3301      	adds	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
		width -= 2;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3b02      	subs	r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
		height -= 2;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b02      	subs	r3, #2
 800174e:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	3301      	adds	r3, #1
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d9e4      	bls.n	8001726 <print_fat_rectangle+0x1e>
	}
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <state_machine>:





void state_machine(){
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af02      	add	r7, sp, #8
	uint32_t kbd_st = keyboard_state;
 800176e:	4ba5      	ldr	r3, [pc, #660]	; (8001a04 <state_machine+0x29c>)
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
	uint32_t sw_st = switch_state;
 8001774:	4ba4      	ldr	r3, [pc, #656]	; (8001a08 <state_machine+0x2a0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]
	uint32_t spb_st = spinner_button_state;
 800177a:	4ba4      	ldr	r3, [pc, #656]	; (8001a0c <state_machine+0x2a4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	607b      	str	r3, [r7, #4]
	uint32_t sp_st = spinner_position;
 8001780:	4ba3      	ldr	r3, [pc, #652]	; (8001a10 <state_machine+0x2a8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	603b      	str	r3, [r7, #0]


	static uint32_t state_time = 0;

	switch(system_state){
 8001786:	4ba3      	ldr	r3, [pc, #652]	; (8001a14 <state_machine+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b11      	cmp	r3, #17
 800178c:	f201 835a 	bhi.w	8002e44 <state_machine+0x16dc>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <state_machine+0x30>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017e1 	.word	0x080017e1
 800179c:	08001817 	.word	0x08001817
 80017a0:	080018d5 	.word	0x080018d5
 80017a4:	0800198f 	.word	0x0800198f
 80017a8:	08001a89 	.word	0x08001a89
 80017ac:	08001bb7 	.word	0x08001bb7
 80017b0:	08001c6f 	.word	0x08001c6f
 80017b4:	08001dd1 	.word	0x08001dd1
 80017b8:	08001f91 	.word	0x08001f91
 80017bc:	080020bf 	.word	0x080020bf
 80017c0:	08002245 	.word	0x08002245
 80017c4:	080023a3 	.word	0x080023a3
 80017c8:	0800252f 	.word	0x0800252f
 80017cc:	080026af 	.word	0x080026af
 80017d0:	08002841 	.word	0x08002841
 80017d4:	080029c1 	.word	0x080029c1
 80017d8:	08002b1d 	.word	0x08002b1d
 80017dc:	08002ca5 	.word	0x08002ca5
		case 0:{
			if(need_out){
 80017e0:	4b8d      	ldr	r3, [pc, #564]	; (8001a18 <state_machine+0x2b0>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <state_machine+0x8c>
				fill_screen(0);
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff fefd 	bl	80015e8 <fill_screen>
				need_out = 0;
 80017ee:	4b8a      	ldr	r3, [pc, #552]	; (8001a18 <state_machine+0x2b0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
			}


			if(sw_st){
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f001 8301 	beq.w	8002dfe <state_machine+0x1696>
				system_state = 1;
 80017fc:	4b85      	ldr	r3, [pc, #532]	; (8001a14 <state_machine+0x2ac>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001802:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <state_machine+0x2b0>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]

				state_time = tick_fun();
 8001808:	f009 fdac 	bl	800b364 <xTaskGetTickCount>
 800180c:	4603      	mov	r3, r0
 800180e:	4a83      	ldr	r2, [pc, #524]	; (8001a1c <state_machine+0x2b4>)
 8001810:	6013      	str	r3, [r2, #0]
			}
			break;
 8001812:	f001 baf4 	b.w	8002dfe <state_machine+0x1696>
		}
		case 1:{
			if(need_out){
 8001816:	4b80      	ldr	r3, [pc, #512]	; (8001a18 <state_machine+0x2b0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d010      	beq.n	8001840 <state_machine+0xd8>
				fill_screen(0);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fee2 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001824:	f7ff ff70 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state1_string, 0x797, 2);
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f240 7397 	movw	r3, #1943	; 0x797
 8001830:	4a7b      	ldr	r2, [pc, #492]	; (8001a20 <state_machine+0x2b8>)
 8001832:	2178      	movs	r1, #120	; 0x78
 8001834:	2073      	movs	r0, #115	; 0x73
 8001836:	f7ff feae 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 800183a:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <state_machine+0x2b0>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
			}

			if(tick_fun() - state_time >= 1000){
 8001840:	f009 fd90 	bl	800b364 <xTaskGetTickCount>
 8001844:	4602      	mov	r2, r0
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <state_machine+0x2b4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001850:	d30a      	bcc.n	8001868 <state_machine+0x100>
				system_state = 2;
 8001852:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <state_machine+0x2ac>)
 8001854:	2202      	movs	r2, #2
 8001856:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001858:	4b6f      	ldr	r3, [pc, #444]	; (8001a18 <state_machine+0x2b0>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]
				state_time = tick_fun();
 800185e:	f009 fd81 	bl	800b364 <xTaskGetTickCount>
 8001862:	4603      	mov	r3, r0
 8001864:	4a6d      	ldr	r2, [pc, #436]	; (8001a1c <state_machine+0x2b4>)
 8001866:	6013      	str	r3, [r2, #0]
			}

			check_brightness();
 8001868:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <state_machine+0x2bc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d11f      	bne.n	80018b0 <state_machine+0x148>
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <state_machine+0x2bc>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01a      	beq.n	80018b6 <state_machine+0x14e>
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <state_machine+0x2c0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d103      	bne.n	8001890 <state_machine+0x128>
 8001888:	4b67      	ldr	r3, [pc, #412]	; (8001a28 <state_machine+0x2c0>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e004      	b.n	800189a <state_machine+0x132>
 8001890:	4b65      	ldr	r3, [pc, #404]	; (8001a28 <state_machine+0x2c0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	4a64      	ldr	r2, [pc, #400]	; (8001a28 <state_machine+0x2c0>)
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <state_machine+0x2c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a63      	ldr	r2, [pc, #396]	; (8001a2c <state_machine+0x2c4>)
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4861      	ldr	r0, [pc, #388]	; (8001a30 <state_machine+0x2c8>)
 80018aa:	f004 fe63 	bl	8006574 <HAL_LTDC_SetAlpha>
 80018ae:	e002      	b.n	80018b6 <state_machine+0x14e>
 80018b0:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <state_machine+0x2bc>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
			check_switch();
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f041 82a2 	bne.w	8002e02 <state_machine+0x169a>
 80018be:	4b55      	ldr	r3, [pc, #340]	; (8001a14 <state_machine+0x2ac>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	4b5b      	ldr	r3, [pc, #364]	; (8001a34 <state_machine+0x2cc>)
 80018c6:	22b4      	movs	r2, #180	; 0xb4
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <state_machine+0x2b0>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
			break;
 80018d0:	f001 ba97 	b.w	8002e02 <state_machine+0x169a>
		}
		case 2:{
			if(need_out){
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <state_machine+0x2b0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <state_machine+0x196>
				fill_screen(0);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff fe83 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 80018e2:	f7ff ff11 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(115, 120, state2_string, 0x797, 2);
 80018e6:	2302      	movs	r3, #2
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	f240 7397 	movw	r3, #1943	; 0x797
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <state_machine+0x2d0>)
 80018f0:	2178      	movs	r1, #120	; 0x78
 80018f2:	2073      	movs	r0, #115	; 0x73
 80018f4:	f7ff fe4f 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <state_machine+0x2b0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
			}


			if(tick_fun() - state_time >= 1000){
 80018fe:	f009 fd31 	bl	800b364 <xTaskGetTickCount>
 8001902:	4602      	mov	r2, r0
 8001904:	4b45      	ldr	r3, [pc, #276]	; (8001a1c <state_machine+0x2b4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800190e:	d308      	bcc.n	8001922 <state_machine+0x1ba>
				system_state = 3;
 8001910:	4b40      	ldr	r3, [pc, #256]	; (8001a14 <state_machine+0x2ac>)
 8001912:	2203      	movs	r2, #3
 8001914:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001916:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <state_machine+0x2b0>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]

				state_time = 0;
 800191c:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <state_machine+0x2b4>)
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001922:	4b40      	ldr	r3, [pc, #256]	; (8001a24 <state_machine+0x2bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d11f      	bne.n	800196a <state_machine+0x202>
 800192a:	4b3e      	ldr	r3, [pc, #248]	; (8001a24 <state_machine+0x2bc>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	2b00      	cmp	r3, #0
 8001938:	d01a      	beq.n	8001970 <state_machine+0x208>
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <state_machine+0x2c0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d103      	bne.n	800194a <state_machine+0x1e2>
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <state_machine+0x2c0>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	e004      	b.n	8001954 <state_machine+0x1ec>
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <state_machine+0x2c0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a35      	ldr	r2, [pc, #212]	; (8001a28 <state_machine+0x2c0>)
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <state_machine+0x2c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <state_machine+0x2c4>)
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	4833      	ldr	r0, [pc, #204]	; (8001a30 <state_machine+0x2c8>)
 8001964:	f004 fe06 	bl	8006574 <HAL_LTDC_SetAlpha>
 8001968:	e002      	b.n	8001970 <state_machine+0x208>
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <state_machine+0x2bc>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	f041 8247 	bne.w	8002e06 <state_machine+0x169e>
 8001978:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <state_machine+0x2ac>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	4b2d      	ldr	r3, [pc, #180]	; (8001a34 <state_machine+0x2cc>)
 8001980:	22b4      	movs	r2, #180	; 0xb4
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <state_machine+0x2b0>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]
			break;
 800198a:	f001 ba3c 	b.w	8002e06 <state_machine+0x169e>
		}
		case 3:{
			if(need_out){
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <state_machine+0x2b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <state_machine+0x250>
				fill_screen(0);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff fe26 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 800199c:	f7ff feb4 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(90, 120, state3_string, 0x797, 2);
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f240 7397 	movw	r3, #1943	; 0x797
 80019a8:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <state_machine+0x2d4>)
 80019aa:	2178      	movs	r1, #120	; 0x78
 80019ac:	205a      	movs	r0, #90	; 0x5a
 80019ae:	f7ff fdf2 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 80019b2:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <state_machine+0x2b0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_TEST){
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <state_machine+0x272>
				state_progress = 0;
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <state_machine+0x2d8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
				state_time = 0;
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <state_machine+0x2b4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
				system_state = 4;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <state_machine+0x2ac>)
 80019d0:	2204      	movs	r2, #4
 80019d2:	601a      	str	r2, [r3, #0]
				need_out = 1;
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <state_machine+0x2b0>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <state_machine+0x2bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d140      	bne.n	8001a64 <state_machine+0x2fc>
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <state_machine+0x2bc>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d03b      	beq.n	8001a6a <state_machine+0x302>
 80019f2:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <state_machine+0x2c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d124      	bne.n	8001a44 <state_machine+0x2dc>
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <state_machine+0x2c0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e025      	b.n	8001a4e <state_machine+0x2e6>
 8001a02:	bf00      	nop
 8001a04:	20001c50 	.word	0x20001c50
 8001a08:	20001c68 	.word	0x20001c68
 8001a0c:	20001c54 	.word	0x20001c54
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20041870 	.word	0x20041870
 8001a18:	20001a24 	.word	0x20001a24
 8001a1c:	20041b40 	.word	0x20041b40
 8001a20:	20001814 	.word	0x20001814
 8001a24:	2004186c 	.word	0x2004186c
 8001a28:	20001804 	.word	0x20001804
 8001a2c:	20001808 	.word	0x20001808
 8001a30:	20041a94 	.word	0x20041a94
 8001a34:	20001a28 	.word	0x20001a28
 8001a38:	20001828 	.word	0x20001828
 8001a3c:	20001840 	.word	0x20001840
 8001a40:	20041874 	.word	0x20041874
 8001a44:	4b9e      	ldr	r3, [pc, #632]	; (8001cc0 <state_machine+0x558>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	4a9d      	ldr	r2, [pc, #628]	; (8001cc0 <state_machine+0x558>)
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <state_machine+0x558>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a9c      	ldr	r2, [pc, #624]	; (8001cc4 <state_machine+0x55c>)
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	489a      	ldr	r0, [pc, #616]	; (8001cc8 <state_machine+0x560>)
 8001a5e:	f004 fd89 	bl	8006574 <HAL_LTDC_SetAlpha>
 8001a62:	e002      	b.n	8001a6a <state_machine+0x302>
 8001a64:	4b99      	ldr	r3, [pc, #612]	; (8001ccc <state_machine+0x564>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
			check_switch();
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f041 81cc 	bne.w	8002e0a <state_machine+0x16a2>
 8001a72:	4b97      	ldr	r3, [pc, #604]	; (8001cd0 <state_machine+0x568>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	4b96      	ldr	r3, [pc, #600]	; (8001cd4 <state_machine+0x56c>)
 8001a7a:	22b4      	movs	r2, #180	; 0xb4
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <state_machine+0x570>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
			break;
 8001a84:	f001 b9c1 	b.w	8002e0a <state_machine+0x16a2>
		}
		case 4:{
			if(need_out){
 8001a88:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <state_machine+0x570>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01a      	beq.n	8001ac6 <state_machine+0x35e>
				fill_screen(0);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff fda9 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001a96:	f7ff fe37 	bl	8001708 <print_fat_rectangle>
				print_string_scaled(185, 105, state4_string, 0x797, 2);
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	f240 7397 	movw	r3, #1943	; 0x797
 8001aa2:	4a8e      	ldr	r2, [pc, #568]	; (8001cdc <state_machine+0x574>)
 8001aa4:	2169      	movs	r1, #105	; 0x69
 8001aa6:	20b9      	movs	r0, #185	; 0xb9
 8001aa8:	f7ff fd46 	bl	8001538 <print_string_scaled>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001aac:	f240 7397 	movw	r3, #1943	; 0x797
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ab8:	2196      	movs	r1, #150	; 0x96
 8001aba:	2064      	movs	r0, #100	; 0x64
 8001abc:	f7ff fa14 	bl	8000ee8 <print_rectangle_empty>
				need_out = 0;
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <state_machine+0x570>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
			}
			if(!state_time){state_time = tick_fun();}else{
 8001ac6:	4b86      	ldr	r3, [pc, #536]	; (8001ce0 <state_machine+0x578>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d105      	bne.n	8001ada <state_machine+0x372>
 8001ace:	f009 fc49 	bl	800b364 <xTaskGetTickCount>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	4a82      	ldr	r2, [pc, #520]	; (8001ce0 <state_machine+0x578>)
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e010      	b.n	8001afc <state_machine+0x394>
				if(tick_fun() - state_time >= 300){
 8001ada:	f009 fc43 	bl	800b364 <xTaskGetTickCount>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <state_machine+0x578>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001aea:	d307      	bcc.n	8001afc <state_machine+0x394>
					state_time = 0;
 8001aec:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <state_machine+0x578>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001af2:	4b7c      	ldr	r3, [pc, #496]	; (8001ce4 <state_machine+0x57c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	330a      	adds	r3, #10
 8001af8:	4a7a      	ldr	r2, [pc, #488]	; (8001ce4 <state_machine+0x57c>)
 8001afa:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001afc:	4b79      	ldr	r3, [pc, #484]	; (8001ce4 <state_machine+0x57c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d012      	beq.n	8001b2a <state_machine+0x3c2>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001b04:	4b77      	ldr	r3, [pc, #476]	; (8001ce4 <state_machine+0x57c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a77      	ldr	r2, [pc, #476]	; (8001ce8 <state_machine+0x580>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	08da      	lsrs	r2, r3, #3
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	1a9b      	subs	r3, r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f240 7397 	movw	r3, #1943	; 0x797
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	230a      	movs	r3, #10
 8001b22:	2196      	movs	r1, #150	; 0x96
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f7ff f9ab 	bl	8000e80 <print_rectangle>
			}

			if(state_progress == 100){
 8001b2a:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <state_machine+0x57c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d10b      	bne.n	8001b4a <state_machine+0x3e2>
				state_progress = 0;
 8001b32:	4b6c      	ldr	r3, [pc, #432]	; (8001ce4 <state_machine+0x57c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <state_machine+0x578>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001b3e:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <state_machine+0x570>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
				system_state = 5;
 8001b44:	4b62      	ldr	r3, [pc, #392]	; (8001cd0 <state_machine+0x568>)
 8001b46:	2205      	movs	r2, #5
 8001b48:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001b4a:	4b60      	ldr	r3, [pc, #384]	; (8001ccc <state_machine+0x564>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d11f      	bne.n	8001b92 <state_machine+0x42a>
 8001b52:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <state_machine+0x564>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01a      	beq.n	8001b98 <state_machine+0x430>
 8001b62:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <state_machine+0x558>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d103      	bne.n	8001b72 <state_machine+0x40a>
 8001b6a:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <state_machine+0x558>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e004      	b.n	8001b7c <state_machine+0x414>
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <state_machine+0x558>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	4a51      	ldr	r2, [pc, #324]	; (8001cc0 <state_machine+0x558>)
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <state_machine+0x558>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a50      	ldr	r2, [pc, #320]	; (8001cc4 <state_machine+0x55c>)
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	2200      	movs	r2, #0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <state_machine+0x560>)
 8001b8c:	f004 fcf2 	bl	8006574 <HAL_LTDC_SetAlpha>
 8001b90:	e002      	b.n	8001b98 <state_machine+0x430>
 8001b92:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <state_machine+0x564>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
			check_switch();
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f041 8137 	bne.w	8002e0e <state_machine+0x16a6>
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <state_machine+0x568>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <state_machine+0x56c>)
 8001ba8:	22b4      	movs	r2, #180	; 0xb4
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <state_machine+0x570>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
			break;
 8001bb2:	f001 b92c 	b.w	8002e0e <state_machine+0x16a6>
		}
		case 5:{
			if(need_out){
 8001bb6:	4b48      	ldr	r3, [pc, #288]	; (8001cd8 <state_machine+0x570>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <state_machine+0x478>
				fill_screen(0);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fd12 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001bc4:	f7ff fda0 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(120, 120, state5_string, 0x797, 2);
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f240 7397 	movw	r3, #1943	; 0x797
 8001bd0:	4a46      	ldr	r2, [pc, #280]	; (8001cec <state_machine+0x584>)
 8001bd2:	2178      	movs	r1, #120	; 0x78
 8001bd4:	2078      	movs	r0, #120	; 0x78
 8001bd6:	f7ff fcde 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <state_machine+0x570>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_CALIBRATION){
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <state_machine+0x49a>
				system_state = 6;
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <state_machine+0x568>)
 8001bec:	2206      	movs	r2, #6
 8001bee:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <state_machine+0x570>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001bf6:	4b3a      	ldr	r3, [pc, #232]	; (8001ce0 <state_machine+0x578>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
				state_progress = 0;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <state_machine+0x57c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <state_machine+0x564>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11f      	bne.n	8001c4a <state_machine+0x4e2>
 8001c0a:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <state_machine+0x564>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01a      	beq.n	8001c50 <state_machine+0x4e8>
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <state_machine+0x558>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d103      	bne.n	8001c2a <state_machine+0x4c2>
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <state_machine+0x558>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e004      	b.n	8001c34 <state_machine+0x4cc>
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <state_machine+0x558>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <state_machine+0x558>)
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <state_machine+0x558>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a22      	ldr	r2, [pc, #136]	; (8001cc4 <state_machine+0x55c>)
 8001c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	4619      	mov	r1, r3
 8001c42:	4821      	ldr	r0, [pc, #132]	; (8001cc8 <state_machine+0x560>)
 8001c44:	f004 fc96 	bl	8006574 <HAL_LTDC_SetAlpha>
 8001c48:	e002      	b.n	8001c50 <state_machine+0x4e8>
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <state_machine+0x564>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f041 80dd 	bne.w	8002e12 <state_machine+0x16aa>
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <state_machine+0x568>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <state_machine+0x56c>)
 8001c60:	22b4      	movs	r2, #180	; 0xb4
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <state_machine+0x570>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
			break;
 8001c6a:	f001 b8d2 	b.w	8002e12 <state_machine+0x16aa>
		}
		case 6:{
			if(need_out){
 8001c6e:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <state_machine+0x570>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01a      	beq.n	8001cac <state_machine+0x544>
				fill_screen(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff fcb6 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001c7c:	f7ff fd44 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state6_string, 0x797, 2);
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f240 7397 	movw	r3, #1943	; 0x797
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <state_machine+0x588>)
 8001c8a:	2164      	movs	r1, #100	; 0x64
 8001c8c:	20b4      	movs	r0, #180	; 0xb4
 8001c8e:	f7ff fc82 	bl	8001596 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001c92:	f240 7397 	movw	r3, #1943	; 0x797
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	230a      	movs	r3, #10
 8001c9a:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001c9e:	2196      	movs	r1, #150	; 0x96
 8001ca0:	2064      	movs	r0, #100	; 0x64
 8001ca2:	f7ff f921 	bl	8000ee8 <print_rectangle_empty>
				need_out = 0;
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <state_machine+0x570>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = tick_fun();}else{
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <state_machine+0x578>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d11f      	bne.n	8001cf4 <state_machine+0x58c>
 8001cb4:	f009 fb56 	bl	800b364 <xTaskGetTickCount>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <state_machine+0x578>)
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	e02a      	b.n	8001d16 <state_machine+0x5ae>
 8001cc0:	20001804 	.word	0x20001804
 8001cc4:	20001808 	.word	0x20001808
 8001cc8:	20041a94 	.word	0x20041a94
 8001ccc:	2004186c 	.word	0x2004186c
 8001cd0:	20041870 	.word	0x20041870
 8001cd4:	20001a28 	.word	0x20001a28
 8001cd8:	20001a24 	.word	0x20001a24
 8001cdc:	2000185c 	.word	0x2000185c
 8001ce0:	20041b40 	.word	0x20041b40
 8001ce4:	20041874 	.word	0x20041874
 8001ce8:	cccccccd 	.word	0xcccccccd
 8001cec:	20001864 	.word	0x20001864
 8001cf0:	2000187c 	.word	0x2000187c
				if(tick_fun() - state_time >= 300){
 8001cf4:	f009 fb36 	bl	800b364 <xTaskGetTickCount>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b99      	ldr	r3, [pc, #612]	; (8001f60 <state_machine+0x7f8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d04:	d307      	bcc.n	8001d16 <state_machine+0x5ae>
					state_time = 0;
 8001d06:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <state_machine+0x7f8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001d0c:	4b95      	ldr	r3, [pc, #596]	; (8001f64 <state_machine+0x7fc>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	330a      	adds	r3, #10
 8001d12:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <state_machine+0x7fc>)
 8001d14:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001d16:	4b93      	ldr	r3, [pc, #588]	; (8001f64 <state_machine+0x7fc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d012      	beq.n	8001d44 <state_machine+0x5dc>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001d1e:	4b91      	ldr	r3, [pc, #580]	; (8001f64 <state_machine+0x7fc>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a91      	ldr	r2, [pc, #580]	; (8001f68 <state_machine+0x800>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	1a9b      	subs	r3, r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	461a      	mov	r2, r3
 8001d34:	f240 7397 	movw	r3, #1943	; 0x797
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	2196      	movs	r1, #150	; 0x96
 8001d3e:	2064      	movs	r0, #100	; 0x64
 8001d40:	f7ff f89e 	bl	8000e80 <print_rectangle>
			}

			if(state_progress == 100){
 8001d44:	4b87      	ldr	r3, [pc, #540]	; (8001f64 <state_machine+0x7fc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b64      	cmp	r3, #100	; 0x64
 8001d4a:	d10b      	bne.n	8001d64 <state_machine+0x5fc>
				state_progress = 0;
 8001d4c:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <state_machine+0x7fc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <state_machine+0x7f8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001d58:	4b84      	ldr	r3, [pc, #528]	; (8001f6c <state_machine+0x804>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
				system_state = 7;
 8001d5e:	4b84      	ldr	r3, [pc, #528]	; (8001f70 <state_machine+0x808>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8001d64:	4b83      	ldr	r3, [pc, #524]	; (8001f74 <state_machine+0x80c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11f      	bne.n	8001dac <state_machine+0x644>
 8001d6c:	4b81      	ldr	r3, [pc, #516]	; (8001f74 <state_machine+0x80c>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01a      	beq.n	8001db2 <state_machine+0x64a>
 8001d7c:	4b7e      	ldr	r3, [pc, #504]	; (8001f78 <state_machine+0x810>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d103      	bne.n	8001d8c <state_machine+0x624>
 8001d84:	4b7c      	ldr	r3, [pc, #496]	; (8001f78 <state_machine+0x810>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e004      	b.n	8001d96 <state_machine+0x62e>
 8001d8c:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <state_machine+0x810>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a79      	ldr	r2, [pc, #484]	; (8001f78 <state_machine+0x810>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b78      	ldr	r3, [pc, #480]	; (8001f78 <state_machine+0x810>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a78      	ldr	r2, [pc, #480]	; (8001f7c <state_machine+0x814>)
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	2200      	movs	r2, #0
 8001da2:	4619      	mov	r1, r3
 8001da4:	4876      	ldr	r0, [pc, #472]	; (8001f80 <state_machine+0x818>)
 8001da6:	f004 fbe5 	bl	8006574 <HAL_LTDC_SetAlpha>
 8001daa:	e002      	b.n	8001db2 <state_machine+0x64a>
 8001dac:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <state_machine+0x80c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
			check_switch();
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f041 802e 	bne.w	8002e16 <state_machine+0x16ae>
 8001dba:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <state_machine+0x808>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <state_machine+0x81c>)
 8001dc2:	22b4      	movs	r2, #180	; 0xb4
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	4b69      	ldr	r3, [pc, #420]	; (8001f6c <state_machine+0x804>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
			break;
 8001dcc:	f001 b823 	b.w	8002e16 <state_machine+0x16ae>
		}
		case 7:{
			if(need_out){
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <state_machine+0x804>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01a      	beq.n	8001e0e <state_machine+0x6a6>
				fill_screen(0);
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f7ff fc05 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001dde:	f7ff fc93 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(110, 90, state7_string, 0x797, 2);	
 8001de2:	2302      	movs	r3, #2
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f240 7397 	movw	r3, #1943	; 0x797
 8001dea:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <state_machine+0x820>)
 8001dec:	215a      	movs	r1, #90	; 0x5a
 8001dee:	206e      	movs	r0, #110	; 0x6e
 8001df0:	f7ff fbd1 	bl	8001596 <print_string_scaled_y>
				print_number(180, 130, system_angle, 0x797, 2);
 8001df4:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <state_machine+0x81c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	f240 7397 	movw	r3, #1943	; 0x797
 8001e00:	2182      	movs	r1, #130	; 0x82
 8001e02:	20b4      	movs	r0, #180	; 0xb4
 8001e04:	f7ff fc0e 	bl	8001624 <print_number>
				need_out = 0;
 8001e08:	4b58      	ldr	r3, [pc, #352]	; (8001f6c <state_machine+0x804>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
			}


			if(!mem_sp_st){
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <state_machine+0x824>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d103      	bne.n	8001e1e <state_machine+0x6b6>
				mem_sp_st = sp_st;
 8001e16:	4a5d      	ldr	r2, [pc, #372]	; (8001f8c <state_machine+0x824>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e05d      	b.n	8001eda <state_machine+0x772>
			}else{
				if(mem_sp_st > sp_st){
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	; (8001f8c <state_machine+0x824>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d229      	bcs.n	8001e7c <state_machine+0x714>
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001e28:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <state_machine+0x81c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <state_machine+0x824>)
 8001e2e:	6819      	ldr	r1, [r3, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	1acb      	subs	r3, r1, r3
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db09      	blt.n	8001e50 <state_machine+0x6e8>
						system_angle -= (mem_sp_st - sp_st)*2;
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <state_machine+0x81c>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <state_machine+0x824>)
 8001e42:	6819      	ldr	r1, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	1acb      	subs	r3, r1, r3
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <state_machine+0x81c>)
 8001e4e:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 100, 40, 0);
 8001e50:	2300      	movs	r3, #0
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2328      	movs	r3, #40	; 0x28
 8001e56:	2264      	movs	r2, #100	; 0x64
 8001e58:	2182      	movs	r1, #130	; 0x82
 8001e5a:	20b4      	movs	r0, #180	; 0xb4
 8001e5c:	f7ff f810 	bl	8000e80 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001e60:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <state_machine+0x81c>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f240 7397 	movw	r3, #1943	; 0x797
 8001e6c:	2182      	movs	r1, #130	; 0x82
 8001e6e:	20b4      	movs	r0, #180	; 0xb4
 8001e70:	f7ff fbd8 	bl	8001624 <print_number>
					mem_sp_st = 0;
 8001e74:	4b45      	ldr	r3, [pc, #276]	; (8001f8c <state_machine+0x824>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e02e      	b.n	8001eda <state_machine+0x772>
				}else if(mem_sp_st < sp_st){
 8001e7c:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <state_machine+0x824>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d929      	bls.n	8001eda <state_machine+0x772>
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <state_machine+0x824>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	005a      	lsls	r2, r3, #1
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <state_machine+0x81c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001e9a:	d809      	bhi.n	8001eb0 <state_machine+0x748>
						system_angle += (sp_st - mem_sp_st)*2;
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <state_machine+0x824>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	4b37      	ldr	r3, [pc, #220]	; (8001f84 <state_machine+0x81c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4413      	add	r3, r2
 8001eac:	4a35      	ldr	r2, [pc, #212]	; (8001f84 <state_machine+0x81c>)
 8001eae:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 20, 20, 0);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2314      	movs	r3, #20
 8001eb6:	2214      	movs	r2, #20
 8001eb8:	2182      	movs	r1, #130	; 0x82
 8001eba:	20b4      	movs	r0, #180	; 0xb4
 8001ebc:	f7fe ffe0 	bl	8000e80 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <state_machine+0x81c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f240 7397 	movw	r3, #1943	; 0x797
 8001ecc:	2182      	movs	r1, #130	; 0x82
 8001ece:	20b4      	movs	r0, #180	; 0xb4
 8001ed0:	f7ff fba8 	bl	8001624 <print_number>
					mem_sp_st = 0;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <state_machine+0x824>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
				}	
			}

			if(spb_st){
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <state_machine+0x78a>
				mem_sp_st = 0;
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <state_machine+0x824>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <state_machine+0x804>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
				system_state = 8;
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <state_machine+0x808>)
 8001eee:	2208      	movs	r2, #8
 8001ef0:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <state_machine+0x80c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11f      	bne.n	8001f3a <state_machine+0x7d2>
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <state_machine+0x80c>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01a      	beq.n	8001f40 <state_machine+0x7d8>
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <state_machine+0x810>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <state_machine+0x7b2>
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <state_machine+0x810>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e004      	b.n	8001f24 <state_machine+0x7bc>
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <state_machine+0x810>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <state_machine+0x810>)
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <state_machine+0x810>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <state_machine+0x814>)
 8001f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	4619      	mov	r1, r3
 8001f32:	4813      	ldr	r0, [pc, #76]	; (8001f80 <state_machine+0x818>)
 8001f34:	f004 fb1e 	bl	8006574 <HAL_LTDC_SetAlpha>
 8001f38:	e002      	b.n	8001f40 <state_machine+0x7d8>
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <state_machine+0x80c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
			check_switch();
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f040 8769 	bne.w	8002e1a <state_machine+0x16b2>
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <state_machine+0x808>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <state_machine+0x81c>)
 8001f50:	22b4      	movs	r2, #180	; 0xb4
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <state_machine+0x804>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
			break;
 8001f5a:	f000 bf5e 	b.w	8002e1a <state_machine+0x16b2>
 8001f5e:	bf00      	nop
 8001f60:	20041b40 	.word	0x20041b40
 8001f64:	20041874 	.word	0x20041874
 8001f68:	cccccccd 	.word	0xcccccccd
 8001f6c:	20001a24 	.word	0x20001a24
 8001f70:	20041870 	.word	0x20041870
 8001f74:	2004186c 	.word	0x2004186c
 8001f78:	20001804 	.word	0x20001804
 8001f7c:	20001808 	.word	0x20001808
 8001f80:	20041a94 	.word	0x20041a94
 8001f84:	20001a28 	.word	0x20001a28
 8001f88:	20001888 	.word	0x20001888
 8001f8c:	20041878 	.word	0x20041878
		}
		case 8:{
			if(need_out){
 8001f90:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <state_machine+0xaac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01a      	beq.n	8001fce <state_machine+0x866>
				fill_screen(0);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f7ff fb25 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 8001f9e:	f7ff fbb3 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(180, 100, state8_string, 0x797, 2);
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	f240 7397 	movw	r3, #1943	; 0x797
 8001faa:	4a9b      	ldr	r2, [pc, #620]	; (8002218 <state_machine+0xab0>)
 8001fac:	2164      	movs	r1, #100	; 0x64
 8001fae:	20b4      	movs	r0, #180	; 0xb4
 8001fb0:	f7ff faf1 	bl	8001596 <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001fb4:	f240 7397 	movw	r3, #1943	; 0x797
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	230a      	movs	r3, #10
 8001fbc:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001fc0:	2196      	movs	r1, #150	; 0x96
 8001fc2:	2064      	movs	r0, #100	; 0x64
 8001fc4:	f7fe ff90 	bl	8000ee8 <print_rectangle_empty>
				need_out = 0;
 8001fc8:	4b92      	ldr	r3, [pc, #584]	; (8002214 <state_machine+0xaac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = tick_fun();}else{
 8001fce:	4b93      	ldr	r3, [pc, #588]	; (800221c <state_machine+0xab4>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <state_machine+0x87a>
 8001fd6:	f009 f9c5 	bl	800b364 <xTaskGetTickCount>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4a8f      	ldr	r2, [pc, #572]	; (800221c <state_machine+0xab4>)
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e010      	b.n	8002004 <state_machine+0x89c>
				if(tick_fun() - state_time >= 300){
 8001fe2:	f009 f9bf 	bl	800b364 <xTaskGetTickCount>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	; (800221c <state_machine+0xab4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001ff2:	d307      	bcc.n	8002004 <state_machine+0x89c>
					state_time = 0;
 8001ff4:	4b89      	ldr	r3, [pc, #548]	; (800221c <state_machine+0xab4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001ffa:	4b89      	ldr	r3, [pc, #548]	; (8002220 <state_machine+0xab8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330a      	adds	r3, #10
 8002000:	4a87      	ldr	r2, [pc, #540]	; (8002220 <state_machine+0xab8>)
 8002002:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8002004:	4b86      	ldr	r3, [pc, #536]	; (8002220 <state_machine+0xab8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d012      	beq.n	8002032 <state_machine+0x8ca>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 800200c:	4b84      	ldr	r3, [pc, #528]	; (8002220 <state_machine+0xab8>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a84      	ldr	r2, [pc, #528]	; (8002224 <state_machine+0xabc>)
 8002012:	fba2 2303 	umull	r2, r3, r2, r3
 8002016:	08da      	lsrs	r2, r3, #3
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	461a      	mov	r2, r3
 8002022:	f240 7397 	movw	r3, #1943	; 0x797
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	230a      	movs	r3, #10
 800202a:	2196      	movs	r1, #150	; 0x96
 800202c:	2064      	movs	r0, #100	; 0x64
 800202e:	f7fe ff27 	bl	8000e80 <print_rectangle>
			}

			if(state_progress == 100){
 8002032:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <state_machine+0xab8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b64      	cmp	r3, #100	; 0x64
 8002038:	d10b      	bne.n	8002052 <state_machine+0x8ea>
				state_progress = 0;
 800203a:	4b79      	ldr	r3, [pc, #484]	; (8002220 <state_machine+0xab8>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8002040:	4b76      	ldr	r3, [pc, #472]	; (800221c <state_machine+0xab4>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <state_machine+0xaac>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
				system_state = 9;
 800204c:	4b76      	ldr	r3, [pc, #472]	; (8002228 <state_machine+0xac0>)
 800204e:	2209      	movs	r2, #9
 8002050:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8002052:	4b76      	ldr	r3, [pc, #472]	; (800222c <state_machine+0xac4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11f      	bne.n	800209a <state_machine+0x932>
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <state_machine+0xac4>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01a      	beq.n	80020a0 <state_machine+0x938>
 800206a:	4b71      	ldr	r3, [pc, #452]	; (8002230 <state_machine+0xac8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d103      	bne.n	800207a <state_machine+0x912>
 8002072:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <state_machine+0xac8>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e004      	b.n	8002084 <state_machine+0x91c>
 800207a:	4b6d      	ldr	r3, [pc, #436]	; (8002230 <state_machine+0xac8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	4a6b      	ldr	r2, [pc, #428]	; (8002230 <state_machine+0xac8>)
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <state_machine+0xac8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <state_machine+0xacc>)
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	2200      	movs	r2, #0
 8002090:	4619      	mov	r1, r3
 8002092:	4869      	ldr	r0, [pc, #420]	; (8002238 <state_machine+0xad0>)
 8002094:	f004 fa6e 	bl	8006574 <HAL_LTDC_SetAlpha>
 8002098:	e002      	b.n	80020a0 <state_machine+0x938>
 800209a:	4b64      	ldr	r3, [pc, #400]	; (800222c <state_machine+0xac4>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
			check_switch();
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 86bb 	bne.w	8002e1e <state_machine+0x16b6>
 80020a8:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <state_machine+0xac0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <state_machine+0xad4>)
 80020b0:	22b4      	movs	r2, #180	; 0xb4
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	4b57      	ldr	r3, [pc, #348]	; (8002214 <state_machine+0xaac>)
 80020b6:	2201      	movs	r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
			break;
 80020ba:	f000 beb0 	b.w	8002e1e <state_machine+0x16b6>
		}
		case 9:{
			if(need_out){
 80020be:	4b55      	ldr	r3, [pc, #340]	; (8002214 <state_machine+0xaac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <state_machine+0x980>
				fill_screen(0);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7ff fa8e 	bl	80015e8 <fill_screen>
				print_fat_rectangle();
 80020cc:	f7ff fb1c 	bl	8001708 <print_fat_rectangle>
				print_string_scaled_y(165, 105, state9_string, 0x797, 2);
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f240 7397 	movw	r3, #1943	; 0x797
 80020d8:	4a59      	ldr	r2, [pc, #356]	; (8002240 <state_machine+0xad8>)
 80020da:	2169      	movs	r1, #105	; 0x69
 80020dc:	20a5      	movs	r0, #165	; 0xa5
 80020de:	f7ff fa5a 	bl	8001596 <print_string_scaled_y>
				need_out = 0;
 80020e2:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <state_machine+0xaac>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <state_machine+0x998>
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <state_machine+0xaac>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <state_machine+0xac0>)
 80020fa:	220a      	movs	r2, #10
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e052      	b.n	80021a6 <state_machine+0xa3e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <state_machine+0x9b0>
 800210a:	4b42      	ldr	r3, [pc, #264]	; (8002214 <state_machine+0xaac>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	4b45      	ldr	r3, [pc, #276]	; (8002228 <state_machine+0xac0>)
 8002112:	220b      	movs	r2, #11
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	e046      	b.n	80021a6 <state_machine+0xa3e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d006      	beq.n	8002130 <state_machine+0x9c8>
 8002122:	4b3c      	ldr	r3, [pc, #240]	; (8002214 <state_machine+0xaac>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <state_machine+0xac0>)
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e03a      	b.n	80021a6 <state_machine+0xa3e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <state_machine+0x9e0>
 800213a:	4b36      	ldr	r3, [pc, #216]	; (8002214 <state_machine+0xaac>)
 800213c:	2201      	movs	r2, #1
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <state_machine+0xac0>)
 8002142:	220d      	movs	r2, #13
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e02e      	b.n	80021a6 <state_machine+0xa3e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <state_machine+0x9f8>
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <state_machine+0xaac>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <state_machine+0xac0>)
 800215a:	220e      	movs	r2, #14
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e022      	b.n	80021a6 <state_machine+0xa3e>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <state_machine+0xa10>
 800216a:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <state_machine+0xaac>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <state_machine+0xac0>)
 8002172:	220f      	movs	r2, #15
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e016      	b.n	80021a6 <state_machine+0xa3e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d006      	beq.n	8002190 <state_machine+0xa28>
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <state_machine+0xaac>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <state_machine+0xac0>)
 800218a:	2210      	movs	r2, #16
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e00a      	b.n	80021a6 <state_machine+0xa3e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <state_machine+0xa3e>
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <state_machine+0xaac>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <state_machine+0xac0>)
 80021a2:	2211      	movs	r2, #17
 80021a4:	601a      	str	r2, [r3, #0]

			check_brightness();
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <state_machine+0xac4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11f      	bne.n	80021ee <state_machine+0xa86>
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <state_machine+0xac4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <state_machine+0xa8c>
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <state_machine+0xac8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d103      	bne.n	80021ce <state_machine+0xa66>
 80021c6:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <state_machine+0xac8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	e004      	b.n	80021d8 <state_machine+0xa70>
 80021ce:	4b18      	ldr	r3, [pc, #96]	; (8002230 <state_machine+0xac8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a16      	ldr	r2, [pc, #88]	; (8002230 <state_machine+0xac8>)
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <state_machine+0xac8>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <state_machine+0xacc>)
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	2200      	movs	r2, #0
 80021e4:	4619      	mov	r1, r3
 80021e6:	4814      	ldr	r0, [pc, #80]	; (8002238 <state_machine+0xad0>)
 80021e8:	f004 f9c4 	bl	8006574 <HAL_LTDC_SetAlpha>
 80021ec:	e002      	b.n	80021f4 <state_machine+0xa8c>
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <state_machine+0xac4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
			check_switch();
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 8613 	bne.w	8002e22 <state_machine+0x16ba>
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <state_machine+0xac0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <state_machine+0xad4>)
 8002204:	22b4      	movs	r2, #180	; 0xb4
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	4b02      	ldr	r3, [pc, #8]	; (8002214 <state_machine+0xaac>)
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]
			break;
 800220e:	f000 be08 	b.w	8002e22 <state_machine+0x16ba>
 8002212:	bf00      	nop
 8002214:	20001a24 	.word	0x20001a24
 8002218:	200018a0 	.word	0x200018a0
 800221c:	20041b40 	.word	0x20041b40
 8002220:	20041874 	.word	0x20041874
 8002224:	cccccccd 	.word	0xcccccccd
 8002228:	20041870 	.word	0x20041870
 800222c:	2004186c 	.word	0x2004186c
 8002230:	20001804 	.word	0x20001804
 8002234:	20001808 	.word	0x20001808
 8002238:	20041a94 	.word	0x20041a94
 800223c:	20001a28 	.word	0x20001a28
 8002240:	200018ac 	.word	0x200018ac
		}
		case 10:{
			if(need_out){
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <state_machine+0xd18>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <state_machine+0xb10>
				fill_screen(0);
 800224c:	2000      	movs	r0, #0
 800224e:	f7ff f9cb 	bl	80015e8 <fill_screen>
				print_string(10, 40, state10_string, 0x797);
 8002252:	f240 7397 	movw	r3, #1943	; 0x797
 8002256:	4a8b      	ldr	r2, [pc, #556]	; (8002484 <state_machine+0xd1c>)
 8002258:	2128      	movs	r1, #40	; 0x28
 800225a:	200a      	movs	r0, #10
 800225c:	f7ff f946 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state10_string_2, 0x797, 3);
 8002260:	2303      	movs	r3, #3
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f240 7397 	movw	r3, #1943	; 0x797
 8002268:	4a87      	ldr	r2, [pc, #540]	; (8002488 <state_machine+0xd20>)
 800226a:	2164      	movs	r1, #100	; 0x64
 800226c:	200a      	movs	r0, #10
 800226e:	f7ff f963 	bl	8001538 <print_string_scaled>
				need_out = 0;
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <state_machine+0xd18>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <state_machine+0xb28>
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <state_machine+0xd18>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	4b80      	ldr	r3, [pc, #512]	; (800248c <state_machine+0xd24>)
 800228a:	220a      	movs	r2, #10
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e052      	b.n	8002336 <state_machine+0xbce>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d006      	beq.n	80022a8 <state_machine+0xb40>
 800229a:	4b79      	ldr	r3, [pc, #484]	; (8002480 <state_machine+0xd18>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b7a      	ldr	r3, [pc, #488]	; (800248c <state_machine+0xd24>)
 80022a2:	220b      	movs	r2, #11
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e046      	b.n	8002336 <state_machine+0xbce>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <state_machine+0xb58>
 80022b2:	4b73      	ldr	r3, [pc, #460]	; (8002480 <state_machine+0xd18>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	4b74      	ldr	r3, [pc, #464]	; (800248c <state_machine+0xd24>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e03a      	b.n	8002336 <state_machine+0xbce>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <state_machine+0xb70>
 80022ca:	4b6d      	ldr	r3, [pc, #436]	; (8002480 <state_machine+0xd18>)
 80022cc:	2201      	movs	r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	4b6e      	ldr	r3, [pc, #440]	; (800248c <state_machine+0xd24>)
 80022d2:	220d      	movs	r2, #13
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e02e      	b.n	8002336 <state_machine+0xbce>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d006      	beq.n	80022f0 <state_machine+0xb88>
 80022e2:	4b67      	ldr	r3, [pc, #412]	; (8002480 <state_machine+0xd18>)
 80022e4:	2201      	movs	r2, #1
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	4b68      	ldr	r3, [pc, #416]	; (800248c <state_machine+0xd24>)
 80022ea:	220e      	movs	r2, #14
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e022      	b.n	8002336 <state_machine+0xbce>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0320 	and.w	r3, r3, #32
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <state_machine+0xba0>
 80022fa:	4b61      	ldr	r3, [pc, #388]	; (8002480 <state_machine+0xd18>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <state_machine+0xd24>)
 8002302:	220f      	movs	r2, #15
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	e016      	b.n	8002336 <state_machine+0xbce>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <state_machine+0xbb8>
 8002312:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <state_machine+0xd18>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4b5c      	ldr	r3, [pc, #368]	; (800248c <state_machine+0xd24>)
 800231a:	2210      	movs	r2, #16
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	e00a      	b.n	8002336 <state_machine+0xbce>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <state_machine+0xbce>
 800232a:	4b55      	ldr	r3, [pc, #340]	; (8002480 <state_machine+0xd18>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	4b56      	ldr	r3, [pc, #344]	; (800248c <state_machine+0xd24>)
 8002332:	2211      	movs	r2, #17
 8002334:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002336:	4b56      	ldr	r3, [pc, #344]	; (8002490 <state_machine+0xd28>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <state_machine+0xc16>
 800233e:	4b54      	ldr	r3, [pc, #336]	; (8002490 <state_machine+0xd28>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d01a      	beq.n	8002384 <state_machine+0xc1c>
 800234e:	4b51      	ldr	r3, [pc, #324]	; (8002494 <state_machine+0xd2c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d103      	bne.n	800235e <state_machine+0xbf6>
 8002356:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <state_machine+0xd2c>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e004      	b.n	8002368 <state_machine+0xc00>
 800235e:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <state_machine+0xd2c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <state_machine+0xd2c>)
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <state_machine+0xd2c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <state_machine+0xd30>)
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4849      	ldr	r0, [pc, #292]	; (800249c <state_machine+0xd34>)
 8002378:	f004 f8fc 	bl	8006574 <HAL_LTDC_SetAlpha>
 800237c:	e002      	b.n	8002384 <state_machine+0xc1c>
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <state_machine+0xd28>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
			check_switch();
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 854d 	bne.w	8002e26 <state_machine+0x16be>
 800238c:	4b3f      	ldr	r3, [pc, #252]	; (800248c <state_machine+0xd24>)
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	4b43      	ldr	r3, [pc, #268]	; (80024a0 <state_machine+0xd38>)
 8002394:	22b4      	movs	r2, #180	; 0xb4
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	4b39      	ldr	r3, [pc, #228]	; (8002480 <state_machine+0xd18>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]
			break;			
 800239e:	f000 bd42 	b.w	8002e26 <state_machine+0x16be>
		}
		case 11:{
			if(need_out){
 80023a2:	4b37      	ldr	r3, [pc, #220]	; (8002480 <state_machine+0xd18>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d015      	beq.n	80023d6 <state_machine+0xc6e>
				fill_screen(0);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff f91c 	bl	80015e8 <fill_screen>
				print_string(10, 40, state11_string, 0x797);
 80023b0:	f240 7397 	movw	r3, #1943	; 0x797
 80023b4:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <state_machine+0xd3c>)
 80023b6:	2128      	movs	r1, #40	; 0x28
 80023b8:	200a      	movs	r0, #10
 80023ba:	f7ff f897 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state11_string_2, 0x797, 3);
 80023be:	2303      	movs	r3, #3
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f240 7397 	movw	r3, #1943	; 0x797
 80023c6:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <state_machine+0xd40>)
 80023c8:	2164      	movs	r1, #100	; 0x64
 80023ca:	200a      	movs	r0, #10
 80023cc:	f7ff f8b4 	bl	8001538 <print_string_scaled>
				need_out = 0;
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <state_machine+0xd18>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
			}			

			check_data();
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d006      	beq.n	80023ee <state_machine+0xc86>
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <state_machine+0xd18>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	4b29      	ldr	r3, [pc, #164]	; (800248c <state_machine+0xd24>)
 80023e8:	220a      	movs	r2, #10
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	e069      	b.n	80024c2 <state_machine+0xd5a>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <state_machine+0xc9e>
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <state_machine+0xd18>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <state_machine+0xd24>)
 8002400:	220b      	movs	r2, #11
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e05d      	b.n	80024c2 <state_machine+0xd5a>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <state_machine+0xcb6>
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <state_machine+0xd18>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <state_machine+0xd24>)
 8002418:	220c      	movs	r2, #12
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e051      	b.n	80024c2 <state_machine+0xd5a>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d006      	beq.n	8002436 <state_machine+0xcce>
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <state_machine+0xd18>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	4b17      	ldr	r3, [pc, #92]	; (800248c <state_machine+0xd24>)
 8002430:	220d      	movs	r2, #13
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	e045      	b.n	80024c2 <state_machine+0xd5a>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d006      	beq.n	800244e <state_machine+0xce6>
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <state_machine+0xd18>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <state_machine+0xd24>)
 8002448:	220e      	movs	r2, #14
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	e039      	b.n	80024c2 <state_machine+0xd5a>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <state_machine+0xcfe>
 8002458:	4b09      	ldr	r3, [pc, #36]	; (8002480 <state_machine+0xd18>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <state_machine+0xd24>)
 8002460:	220f      	movs	r2, #15
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e02d      	b.n	80024c2 <state_machine+0xd5a>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d01d      	beq.n	80024ac <state_machine+0xd44>
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <state_machine+0xd18>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <state_machine+0xd24>)
 8002478:	2210      	movs	r2, #16
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e021      	b.n	80024c2 <state_machine+0xd5a>
 800247e:	bf00      	nop
 8002480:	20001a24 	.word	0x20001a24
 8002484:	200018bc 	.word	0x200018bc
 8002488:	20001998 	.word	0x20001998
 800248c:	20041870 	.word	0x20041870
 8002490:	2004186c 	.word	0x2004186c
 8002494:	20001804 	.word	0x20001804
 8002498:	20001808 	.word	0x20001808
 800249c:	20041a94 	.word	0x20041a94
 80024a0:	20001a28 	.word	0x20001a28
 80024a4:	200018d0 	.word	0x200018d0
 80024a8:	200019a4 	.word	0x200019a4
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <state_machine+0xd5a>
 80024b6:	4b9d      	ldr	r3, [pc, #628]	; (800272c <state_machine+0xfc4>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	4b9c      	ldr	r3, [pc, #624]	; (8002730 <state_machine+0xfc8>)
 80024be:	2211      	movs	r2, #17
 80024c0:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 80024c2:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <state_machine+0xfcc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d11f      	bne.n	800250a <state_machine+0xda2>
 80024ca:	4b9a      	ldr	r3, [pc, #616]	; (8002734 <state_machine+0xfcc>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01a      	beq.n	8002510 <state_machine+0xda8>
 80024da:	4b97      	ldr	r3, [pc, #604]	; (8002738 <state_machine+0xfd0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d103      	bne.n	80024ea <state_machine+0xd82>
 80024e2:	4b95      	ldr	r3, [pc, #596]	; (8002738 <state_machine+0xfd0>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e004      	b.n	80024f4 <state_machine+0xd8c>
 80024ea:	4b93      	ldr	r3, [pc, #588]	; (8002738 <state_machine+0xfd0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	4a91      	ldr	r2, [pc, #580]	; (8002738 <state_machine+0xfd0>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b90      	ldr	r3, [pc, #576]	; (8002738 <state_machine+0xfd0>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a90      	ldr	r2, [pc, #576]	; (800273c <state_machine+0xfd4>)
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	2200      	movs	r2, #0
 8002500:	4619      	mov	r1, r3
 8002502:	488f      	ldr	r0, [pc, #572]	; (8002740 <state_machine+0xfd8>)
 8002504:	f004 f836 	bl	8006574 <HAL_LTDC_SetAlpha>
 8002508:	e002      	b.n	8002510 <state_machine+0xda8>
 800250a:	4b8a      	ldr	r3, [pc, #552]	; (8002734 <state_machine+0xfcc>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
			check_switch();
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f040 8489 	bne.w	8002e2a <state_machine+0x16c2>
 8002518:	4b85      	ldr	r3, [pc, #532]	; (8002730 <state_machine+0xfc8>)
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	4b89      	ldr	r3, [pc, #548]	; (8002744 <state_machine+0xfdc>)
 8002520:	22b4      	movs	r2, #180	; 0xb4
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <state_machine+0xfc4>)
 8002526:	2201      	movs	r2, #1
 8002528:	601a      	str	r2, [r3, #0]
			break;			
 800252a:	f000 bc7e 	b.w	8002e2a <state_machine+0x16c2>
		}
		case 12:{
			if(need_out){
 800252e:	4b7f      	ldr	r3, [pc, #508]	; (800272c <state_machine+0xfc4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d027      	beq.n	8002586 <state_machine+0xe1e>
				fill_screen(0);
 8002536:	2000      	movs	r0, #0
 8002538:	f7ff f856 	bl	80015e8 <fill_screen>
				print_string(10, 40, state12_string, 0x797);
 800253c:	f240 7397 	movw	r3, #1943	; 0x797
 8002540:	4a81      	ldr	r2, [pc, #516]	; (8002748 <state_machine+0xfe0>)
 8002542:	2128      	movs	r1, #40	; 0x28
 8002544:	200a      	movs	r0, #10
 8002546:	f7fe ffd1 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state12_string_2, 0x797, 3);
 800254a:	2303      	movs	r3, #3
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	f240 7397 	movw	r3, #1943	; 0x797
 8002552:	4a7e      	ldr	r2, [pc, #504]	; (800274c <state_machine+0xfe4>)
 8002554:	2164      	movs	r1, #100	; 0x64
 8002556:	200a      	movs	r0, #10
 8002558:	f7fe ffee 	bl	8001538 <print_string_scaled>
				print_string_scaled_y(10, 145, state12_string_3, 0x797, 2);
 800255c:	2302      	movs	r3, #2
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f240 7397 	movw	r3, #1943	; 0x797
 8002564:	4a7a      	ldr	r2, [pc, #488]	; (8002750 <state_machine+0xfe8>)
 8002566:	2191      	movs	r1, #145	; 0x91
 8002568:	200a      	movs	r0, #10
 800256a:	f7ff f814 	bl	8001596 <print_string_scaled_y>
				print_string_scaled_y(50, 180, state12_string_4, 0x797, 2);
 800256e:	2302      	movs	r3, #2
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	f240 7397 	movw	r3, #1943	; 0x797
 8002576:	4a77      	ldr	r2, [pc, #476]	; (8002754 <state_machine+0xfec>)
 8002578:	21b4      	movs	r1, #180	; 0xb4
 800257a:	2032      	movs	r0, #50	; 0x32
 800257c:	f7ff f80b 	bl	8001596 <print_string_scaled_y>

				need_out = 0;
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <state_machine+0xfc4>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d006      	beq.n	800259e <state_machine+0xe36>
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <state_machine+0xfc4>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	4b66      	ldr	r3, [pc, #408]	; (8002730 <state_machine+0xfc8>)
 8002598:	220a      	movs	r2, #10
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	e052      	b.n	8002644 <state_machine+0xedc>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d006      	beq.n	80025b6 <state_machine+0xe4e>
 80025a8:	4b60      	ldr	r3, [pc, #384]	; (800272c <state_machine+0xfc4>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	4b60      	ldr	r3, [pc, #384]	; (8002730 <state_machine+0xfc8>)
 80025b0:	220b      	movs	r2, #11
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e046      	b.n	8002644 <state_machine+0xedc>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d006      	beq.n	80025ce <state_machine+0xe66>
 80025c0:	4b5a      	ldr	r3, [pc, #360]	; (800272c <state_machine+0xfc4>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4b5a      	ldr	r3, [pc, #360]	; (8002730 <state_machine+0xfc8>)
 80025c8:	220c      	movs	r2, #12
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	e03a      	b.n	8002644 <state_machine+0xedc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <state_machine+0xe7e>
 80025d8:	4b54      	ldr	r3, [pc, #336]	; (800272c <state_machine+0xfc4>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	4b54      	ldr	r3, [pc, #336]	; (8002730 <state_machine+0xfc8>)
 80025e0:	220d      	movs	r2, #13
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e02e      	b.n	8002644 <state_machine+0xedc>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <state_machine+0xe96>
 80025f0:	4b4e      	ldr	r3, [pc, #312]	; (800272c <state_machine+0xfc4>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	4b4e      	ldr	r3, [pc, #312]	; (8002730 <state_machine+0xfc8>)
 80025f8:	220e      	movs	r2, #14
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	e022      	b.n	8002644 <state_machine+0xedc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <state_machine+0xeae>
 8002608:	4b48      	ldr	r3, [pc, #288]	; (800272c <state_machine+0xfc4>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	4b48      	ldr	r3, [pc, #288]	; (8002730 <state_machine+0xfc8>)
 8002610:	220f      	movs	r2, #15
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	e016      	b.n	8002644 <state_machine+0xedc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <state_machine+0xec6>
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <state_machine+0xfc4>)
 8002622:	2201      	movs	r2, #1
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <state_machine+0xfc8>)
 8002628:	2210      	movs	r2, #16
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e00a      	b.n	8002644 <state_machine+0xedc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <state_machine+0xedc>
 8002638:	4b3c      	ldr	r3, [pc, #240]	; (800272c <state_machine+0xfc4>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <state_machine+0xfc8>)
 8002640:	2211      	movs	r2, #17
 8002642:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <state_machine+0xfcc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d11f      	bne.n	800268c <state_machine+0xf24>
 800264c:	4b39      	ldr	r3, [pc, #228]	; (8002734 <state_machine+0xfcc>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01a      	beq.n	8002692 <state_machine+0xf2a>
 800265c:	4b36      	ldr	r3, [pc, #216]	; (8002738 <state_machine+0xfd0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d103      	bne.n	800266c <state_machine+0xf04>
 8002664:	4b34      	ldr	r3, [pc, #208]	; (8002738 <state_machine+0xfd0>)
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e004      	b.n	8002676 <state_machine+0xf0e>
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <state_machine+0xfd0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a31      	ldr	r2, [pc, #196]	; (8002738 <state_machine+0xfd0>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <state_machine+0xfd0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a30      	ldr	r2, [pc, #192]	; (800273c <state_machine+0xfd4>)
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	2200      	movs	r2, #0
 8002682:	4619      	mov	r1, r3
 8002684:	482e      	ldr	r0, [pc, #184]	; (8002740 <state_machine+0xfd8>)
 8002686:	f003 ff75 	bl	8006574 <HAL_LTDC_SetAlpha>
 800268a:	e002      	b.n	8002692 <state_machine+0xf2a>
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <state_machine+0xfcc>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
			check_switch();
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	f040 83ca 	bne.w	8002e2e <state_machine+0x16c6>
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <state_machine+0xfc8>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b28      	ldr	r3, [pc, #160]	; (8002744 <state_machine+0xfdc>)
 80026a2:	22b4      	movs	r2, #180	; 0xb4
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <state_machine+0xfc4>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
			break;			
 80026ac:	e3bf      	b.n	8002e2e <state_machine+0x16c6>
		}
		case 13:{
			if(need_out){
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <state_machine+0xfc4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d015      	beq.n	80026e2 <state_machine+0xf7a>
				fill_screen(0);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe ff96 	bl	80015e8 <fill_screen>
				print_string(10, 40, state13_string, 0x797);
 80026bc:	f240 7397 	movw	r3, #1943	; 0x797
 80026c0:	4a25      	ldr	r2, [pc, #148]	; (8002758 <state_machine+0xff0>)
 80026c2:	2128      	movs	r1, #40	; 0x28
 80026c4:	200a      	movs	r0, #10
 80026c6:	f7fe ff11 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state13_string_2, 0x797, 3);
 80026ca:	2303      	movs	r3, #3
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f240 7397 	movw	r3, #1943	; 0x797
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <state_machine+0xff4>)
 80026d4:	2164      	movs	r1, #100	; 0x64
 80026d6:	200a      	movs	r0, #10
 80026d8:	f7fe ff2e 	bl	8001538 <print_string_scaled>
				need_out = 0;
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <state_machine+0xfc4>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <state_machine+0xf92>
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <state_machine+0xfc4>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <state_machine+0xfc8>)
 80026f4:	220a      	movs	r2, #10
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e06d      	b.n	80027d6 <state_machine+0x106e>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d006      	beq.n	8002712 <state_machine+0xfaa>
 8002704:	4b09      	ldr	r3, [pc, #36]	; (800272c <state_machine+0xfc4>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <state_machine+0xfc8>)
 800270c:	220b      	movs	r2, #11
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e061      	b.n	80027d6 <state_machine+0x106e>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002718:	2b00      	cmp	r3, #0
 800271a:	d021      	beq.n	8002760 <state_machine+0xff8>
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <state_machine+0xfc4>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <state_machine+0xfc8>)
 8002724:	220c      	movs	r2, #12
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e055      	b.n	80027d6 <state_machine+0x106e>
 800272a:	bf00      	nop
 800272c:	20001a24 	.word	0x20001a24
 8002730:	20041870 	.word	0x20041870
 8002734:	2004186c 	.word	0x2004186c
 8002738:	20001804 	.word	0x20001804
 800273c:	20001808 	.word	0x20001808
 8002740:	20041a94 	.word	0x20041a94
 8002744:	20001a28 	.word	0x20001a28
 8002748:	200018f0 	.word	0x200018f0
 800274c:	200019b0 	.word	0x200019b0
 8002750:	200019c0 	.word	0x200019c0
 8002754:	200019d8 	.word	0x200019d8
 8002758:	20001914 	.word	0x20001914
 800275c:	200019f0 	.word	0x200019f0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <state_machine+0x1010>
 800276a:	4b8c      	ldr	r3, [pc, #560]	; (800299c <state_machine+0x1234>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <state_machine+0x1238>)
 8002772:	220d      	movs	r2, #13
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e02e      	b.n	80027d6 <state_machine+0x106e>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <state_machine+0x1028>
 8002782:	4b86      	ldr	r3, [pc, #536]	; (800299c <state_machine+0x1234>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <state_machine+0x1238>)
 800278a:	220e      	movs	r2, #14
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e022      	b.n	80027d6 <state_machine+0x106e>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <state_machine+0x1040>
 800279a:	4b80      	ldr	r3, [pc, #512]	; (800299c <state_machine+0x1234>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4b7f      	ldr	r3, [pc, #508]	; (80029a0 <state_machine+0x1238>)
 80027a2:	220f      	movs	r2, #15
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e016      	b.n	80027d6 <state_machine+0x106e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <state_machine+0x1058>
 80027b2:	4b7a      	ldr	r3, [pc, #488]	; (800299c <state_machine+0x1234>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4b79      	ldr	r3, [pc, #484]	; (80029a0 <state_machine+0x1238>)
 80027ba:	2210      	movs	r2, #16
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e00a      	b.n	80027d6 <state_machine+0x106e>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <state_machine+0x106e>
 80027ca:	4b74      	ldr	r3, [pc, #464]	; (800299c <state_machine+0x1234>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <state_machine+0x1238>)
 80027d2:	2211      	movs	r2, #17
 80027d4:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 80027d6:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <state_machine+0x123c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11f      	bne.n	800281e <state_machine+0x10b6>
 80027de:	4b71      	ldr	r3, [pc, #452]	; (80029a4 <state_machine+0x123c>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d01a      	beq.n	8002824 <state_machine+0x10bc>
 80027ee:	4b6e      	ldr	r3, [pc, #440]	; (80029a8 <state_machine+0x1240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d103      	bne.n	80027fe <state_machine+0x1096>
 80027f6:	4b6c      	ldr	r3, [pc, #432]	; (80029a8 <state_machine+0x1240>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e004      	b.n	8002808 <state_machine+0x10a0>
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <state_machine+0x1240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a68      	ldr	r2, [pc, #416]	; (80029a8 <state_machine+0x1240>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <state_machine+0x1240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a67      	ldr	r2, [pc, #412]	; (80029ac <state_machine+0x1244>)
 800280e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002812:	2200      	movs	r2, #0
 8002814:	4619      	mov	r1, r3
 8002816:	4866      	ldr	r0, [pc, #408]	; (80029b0 <state_machine+0x1248>)
 8002818:	f003 feac 	bl	8006574 <HAL_LTDC_SetAlpha>
 800281c:	e002      	b.n	8002824 <state_machine+0x10bc>
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <state_machine+0x123c>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
			check_switch();
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8303 	bne.w	8002e32 <state_machine+0x16ca>
 800282c:	4b5c      	ldr	r3, [pc, #368]	; (80029a0 <state_machine+0x1238>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4b60      	ldr	r3, [pc, #384]	; (80029b4 <state_machine+0x124c>)
 8002834:	22b4      	movs	r2, #180	; 0xb4
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <state_machine+0x1234>)
 800283a:	2201      	movs	r2, #1
 800283c:	601a      	str	r2, [r3, #0]
			break;			
 800283e:	e2f8      	b.n	8002e32 <state_machine+0x16ca>
		}
		case 14:{
			if(need_out){
 8002840:	4b56      	ldr	r3, [pc, #344]	; (800299c <state_machine+0x1234>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <state_machine+0x110c>
				fill_screen(0);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fecd 	bl	80015e8 <fill_screen>
				print_string(10, 40, state14_string, 0x797);
 800284e:	f240 7397 	movw	r3, #1943	; 0x797
 8002852:	4a59      	ldr	r2, [pc, #356]	; (80029b8 <state_machine+0x1250>)
 8002854:	2128      	movs	r1, #40	; 0x28
 8002856:	200a      	movs	r0, #10
 8002858:	f7fe fe48 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state14_string_2, 0x797, 3);
 800285c:	2303      	movs	r3, #3
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	f240 7397 	movw	r3, #1943	; 0x797
 8002864:	4a55      	ldr	r2, [pc, #340]	; (80029bc <state_machine+0x1254>)
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	200a      	movs	r0, #10
 800286a:	f7fe fe65 	bl	8001538 <print_string_scaled>
				need_out = 0;
 800286e:	4b4b      	ldr	r3, [pc, #300]	; (800299c <state_machine+0x1234>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <state_machine+0x1124>
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <state_machine+0x1234>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <state_machine+0x1238>)
 8002886:	220a      	movs	r2, #10
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	e052      	b.n	8002932 <state_machine+0x11ca>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <state_machine+0x113c>
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <state_machine+0x1234>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <state_machine+0x1238>)
 800289e:	220b      	movs	r2, #11
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	e046      	b.n	8002932 <state_machine+0x11ca>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <state_machine+0x1154>
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <state_machine+0x1234>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <state_machine+0x1238>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e03a      	b.n	8002932 <state_machine+0x11ca>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d006      	beq.n	80028d4 <state_machine+0x116c>
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <state_machine+0x1234>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b34      	ldr	r3, [pc, #208]	; (80029a0 <state_machine+0x1238>)
 80028ce:	220d      	movs	r2, #13
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e02e      	b.n	8002932 <state_machine+0x11ca>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <state_machine+0x1184>
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <state_machine+0x1234>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	4b2e      	ldr	r3, [pc, #184]	; (80029a0 <state_machine+0x1238>)
 80028e6:	220e      	movs	r2, #14
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e022      	b.n	8002932 <state_machine+0x11ca>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <state_machine+0x119c>
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <state_machine+0x1234>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <state_machine+0x1238>)
 80028fe:	220f      	movs	r2, #15
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e016      	b.n	8002932 <state_machine+0x11ca>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <state_machine+0x11b4>
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <state_machine+0x1234>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <state_machine+0x1238>)
 8002916:	2210      	movs	r2, #16
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e00a      	b.n	8002932 <state_machine+0x11ca>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <state_machine+0x11ca>
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <state_machine+0x1234>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <state_machine+0x1238>)
 800292e:	2211      	movs	r2, #17
 8002930:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002932:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <state_machine+0x123c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11f      	bne.n	800297a <state_machine+0x1212>
 800293a:	4b1a      	ldr	r3, [pc, #104]	; (80029a4 <state_machine+0x123c>)
 800293c:	2201      	movs	r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01a      	beq.n	8002980 <state_machine+0x1218>
 800294a:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <state_machine+0x1240>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d103      	bne.n	800295a <state_machine+0x11f2>
 8002952:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <state_machine+0x1240>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	e004      	b.n	8002964 <state_machine+0x11fc>
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <state_machine+0x1240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <state_machine+0x1240>)
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <state_machine+0x1240>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a10      	ldr	r2, [pc, #64]	; (80029ac <state_machine+0x1244>)
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296e:	2200      	movs	r2, #0
 8002970:	4619      	mov	r1, r3
 8002972:	480f      	ldr	r0, [pc, #60]	; (80029b0 <state_machine+0x1248>)
 8002974:	f003 fdfe 	bl	8006574 <HAL_LTDC_SetAlpha>
 8002978:	e002      	b.n	8002980 <state_machine+0x1218>
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <state_machine+0x123c>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
			check_switch();
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 8257 	bne.w	8002e36 <state_machine+0x16ce>
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <state_machine+0x1238>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	4b09      	ldr	r3, [pc, #36]	; (80029b4 <state_machine+0x124c>)
 8002990:	22b4      	movs	r2, #180	; 0xb4
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <state_machine+0x1234>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]
			break;			
 800299a:	e24c      	b.n	8002e36 <state_machine+0x16ce>
 800299c:	20001a24 	.word	0x20001a24
 80029a0:	20041870 	.word	0x20041870
 80029a4:	2004186c 	.word	0x2004186c
 80029a8:	20001804 	.word	0x20001804
 80029ac:	20001808 	.word	0x20001808
 80029b0:	20041a94 	.word	0x20041a94
 80029b4:	20001a28 	.word	0x20001a28
 80029b8:	20001934 	.word	0x20001934
 80029bc:	200019fc 	.word	0x200019fc
		}
		case 15:{
			if(need_out){
 80029c0:	4b8d      	ldr	r3, [pc, #564]	; (8002bf8 <state_machine+0x1490>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d015      	beq.n	80029f4 <state_machine+0x128c>
				fill_screen(0);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fe0d 	bl	80015e8 <fill_screen>
				print_string(10, 40, state15_string, 0x797);
 80029ce:	f240 7397 	movw	r3, #1943	; 0x797
 80029d2:	4a8a      	ldr	r2, [pc, #552]	; (8002bfc <state_machine+0x1494>)
 80029d4:	2128      	movs	r1, #40	; 0x28
 80029d6:	200a      	movs	r0, #10
 80029d8:	f7fe fd88 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state15_string_2, 0x797, 2);
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	f240 7397 	movw	r3, #1943	; 0x797
 80029e4:	4a86      	ldr	r2, [pc, #536]	; (8002c00 <state_machine+0x1498>)
 80029e6:	2164      	movs	r1, #100	; 0x64
 80029e8:	200a      	movs	r0, #10
 80029ea:	f7fe fda5 	bl	8001538 <print_string_scaled>
				need_out = 0;
 80029ee:	4b82      	ldr	r3, [pc, #520]	; (8002bf8 <state_machine+0x1490>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d006      	beq.n	8002a0c <state_machine+0x12a4>
 80029fe:	4b7e      	ldr	r3, [pc, #504]	; (8002bf8 <state_machine+0x1490>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	4b7f      	ldr	r3, [pc, #508]	; (8002c04 <state_machine+0x149c>)
 8002a06:	220a      	movs	r2, #10
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e052      	b.n	8002ab2 <state_machine+0x134a>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <state_machine+0x12bc>
 8002a16:	4b78      	ldr	r3, [pc, #480]	; (8002bf8 <state_machine+0x1490>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	4b79      	ldr	r3, [pc, #484]	; (8002c04 <state_machine+0x149c>)
 8002a1e:	220b      	movs	r2, #11
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e046      	b.n	8002ab2 <state_machine+0x134a>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <state_machine+0x12d4>
 8002a2e:	4b72      	ldr	r3, [pc, #456]	; (8002bf8 <state_machine+0x1490>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <state_machine+0x149c>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e03a      	b.n	8002ab2 <state_machine+0x134a>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d006      	beq.n	8002a54 <state_machine+0x12ec>
 8002a46:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <state_machine+0x1490>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b6d      	ldr	r3, [pc, #436]	; (8002c04 <state_machine+0x149c>)
 8002a4e:	220d      	movs	r2, #13
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e02e      	b.n	8002ab2 <state_machine+0x134a>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d006      	beq.n	8002a6c <state_machine+0x1304>
 8002a5e:	4b66      	ldr	r3, [pc, #408]	; (8002bf8 <state_machine+0x1490>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <state_machine+0x149c>)
 8002a66:	220e      	movs	r2, #14
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e022      	b.n	8002ab2 <state_machine+0x134a>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <state_machine+0x131c>
 8002a76:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <state_machine+0x1490>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	4b61      	ldr	r3, [pc, #388]	; (8002c04 <state_machine+0x149c>)
 8002a7e:	220f      	movs	r2, #15
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e016      	b.n	8002ab2 <state_machine+0x134a>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d006      	beq.n	8002a9c <state_machine+0x1334>
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <state_machine+0x1490>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	4b5b      	ldr	r3, [pc, #364]	; (8002c04 <state_machine+0x149c>)
 8002a96:	2210      	movs	r2, #16
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e00a      	b.n	8002ab2 <state_machine+0x134a>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <state_machine+0x134a>
 8002aa6:	4b54      	ldr	r3, [pc, #336]	; (8002bf8 <state_machine+0x1490>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	4b55      	ldr	r3, [pc, #340]	; (8002c04 <state_machine+0x149c>)
 8002aae:	2211      	movs	r2, #17
 8002ab0:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002ab2:	4b55      	ldr	r3, [pc, #340]	; (8002c08 <state_machine+0x14a0>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d11f      	bne.n	8002afa <state_machine+0x1392>
 8002aba:	4b53      	ldr	r3, [pc, #332]	; (8002c08 <state_machine+0x14a0>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01a      	beq.n	8002b00 <state_machine+0x1398>
 8002aca:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <state_machine+0x14a4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d103      	bne.n	8002ada <state_machine+0x1372>
 8002ad2:	4b4e      	ldr	r3, [pc, #312]	; (8002c0c <state_machine+0x14a4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	e004      	b.n	8002ae4 <state_machine+0x137c>
 8002ada:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <state_machine+0x14a4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <state_machine+0x14a4>)
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <state_machine+0x14a4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a49      	ldr	r2, [pc, #292]	; (8002c10 <state_machine+0x14a8>)
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	2200      	movs	r2, #0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4848      	ldr	r0, [pc, #288]	; (8002c14 <state_machine+0x14ac>)
 8002af4:	f003 fd3e 	bl	8006574 <HAL_LTDC_SetAlpha>
 8002af8:	e002      	b.n	8002b00 <state_machine+0x1398>
 8002afa:	4b43      	ldr	r3, [pc, #268]	; (8002c08 <state_machine+0x14a0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
			check_switch();
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 8199 	bne.w	8002e3a <state_machine+0x16d2>
 8002b08:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <state_machine+0x149c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <state_machine+0x14b0>)
 8002b10:	22b4      	movs	r2, #180	; 0xb4
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <state_machine+0x1490>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
			break;			
 8002b1a:	e18e      	b.n	8002e3a <state_machine+0x16d2>
		}
		case 16:{
			if(need_out){
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <state_machine+0x1490>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <state_machine+0x13e8>
				fill_screen(0);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fe fd5f 	bl	80015e8 <fill_screen>
				print_string(10, 40, state16_string, 0x797);
 8002b2a:	f240 7397 	movw	r3, #1943	; 0x797
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <state_machine+0x14b4>)
 8002b30:	2128      	movs	r1, #40	; 0x28
 8002b32:	200a      	movs	r0, #10
 8002b34:	f7fe fcda 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state16_string_2, 0x797, 3);
 8002b38:	2303      	movs	r3, #3
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	f240 7397 	movw	r3, #1943	; 0x797
 8002b40:	4a37      	ldr	r2, [pc, #220]	; (8002c20 <state_machine+0x14b8>)
 8002b42:	2164      	movs	r1, #100	; 0x64
 8002b44:	200a      	movs	r0, #10
 8002b46:	f7fe fcf7 	bl	8001538 <print_string_scaled>
				need_out = 0;
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <state_machine+0x1490>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d006      	beq.n	8002b68 <state_machine+0x1400>
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <state_machine+0x1490>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <state_machine+0x149c>)
 8002b62:	220a      	movs	r2, #10
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e068      	b.n	8002c3a <state_machine+0x14d2>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <state_machine+0x1418>
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <state_machine+0x1490>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <state_machine+0x149c>)
 8002b7a:	220b      	movs	r2, #11
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e05c      	b.n	8002c3a <state_machine+0x14d2>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <state_machine+0x1430>
 8002b8a:	4b1b      	ldr	r3, [pc, #108]	; (8002bf8 <state_machine+0x1490>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <state_machine+0x149c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e050      	b.n	8002c3a <state_machine+0x14d2>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <state_machine+0x1448>
 8002ba2:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <state_machine+0x1490>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <state_machine+0x149c>)
 8002baa:	220d      	movs	r2, #13
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e044      	b.n	8002c3a <state_machine+0x14d2>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <state_machine+0x1460>
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <state_machine+0x1490>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <state_machine+0x149c>)
 8002bc2:	220e      	movs	r2, #14
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e038      	b.n	8002c3a <state_machine+0x14d2>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d006      	beq.n	8002be0 <state_machine+0x1478>
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <state_machine+0x1490>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <state_machine+0x149c>)
 8002bda:	220f      	movs	r2, #15
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e02c      	b.n	8002c3a <state_machine+0x14d2>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01c      	beq.n	8002c24 <state_machine+0x14bc>
 8002bea:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <state_machine+0x1490>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <state_machine+0x149c>)
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e020      	b.n	8002c3a <state_machine+0x14d2>
 8002bf8:	20001a24 	.word	0x20001a24
 8002bfc:	20001948 	.word	0x20001948
 8002c00:	20001a04 	.word	0x20001a04
 8002c04:	20041870 	.word	0x20041870
 8002c08:	2004186c 	.word	0x2004186c
 8002c0c:	20001804 	.word	0x20001804
 8002c10:	20001808 	.word	0x20001808
 8002c14:	20041a94 	.word	0x20041a94
 8002c18:	20001a28 	.word	0x20001a28
 8002c1c:	20001960 	.word	0x20001960
 8002c20:	20001a14 	.word	0x20001a14
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <state_machine+0x14d2>
 8002c2e:	4b87      	ldr	r3, [pc, #540]	; (8002e4c <state_machine+0x16e4>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4b86      	ldr	r3, [pc, #536]	; (8002e50 <state_machine+0x16e8>)
 8002c36:	2211      	movs	r2, #17
 8002c38:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002c3a:	4b86      	ldr	r3, [pc, #536]	; (8002e54 <state_machine+0x16ec>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d11f      	bne.n	8002c82 <state_machine+0x151a>
 8002c42:	4b84      	ldr	r3, [pc, #528]	; (8002e54 <state_machine+0x16ec>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01a      	beq.n	8002c88 <state_machine+0x1520>
 8002c52:	4b81      	ldr	r3, [pc, #516]	; (8002e58 <state_machine+0x16f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d103      	bne.n	8002c62 <state_machine+0x14fa>
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <state_machine+0x16f0>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e004      	b.n	8002c6c <state_machine+0x1504>
 8002c62:	4b7d      	ldr	r3, [pc, #500]	; (8002e58 <state_machine+0x16f0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <state_machine+0x16f0>)
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b7a      	ldr	r3, [pc, #488]	; (8002e58 <state_machine+0x16f0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a7a      	ldr	r2, [pc, #488]	; (8002e5c <state_machine+0x16f4>)
 8002c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c76:	2200      	movs	r2, #0
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4879      	ldr	r0, [pc, #484]	; (8002e60 <state_machine+0x16f8>)
 8002c7c:	f003 fc7a 	bl	8006574 <HAL_LTDC_SetAlpha>
 8002c80:	e002      	b.n	8002c88 <state_machine+0x1520>
 8002c82:	4b74      	ldr	r3, [pc, #464]	; (8002e54 <state_machine+0x16ec>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
			check_switch();
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f040 80d7 	bne.w	8002e3e <state_machine+0x16d6>
 8002c90:	4b6f      	ldr	r3, [pc, #444]	; (8002e50 <state_machine+0x16e8>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
 8002c96:	4b73      	ldr	r3, [pc, #460]	; (8002e64 <state_machine+0x16fc>)
 8002c98:	22b4      	movs	r2, #180	; 0xb4
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	4b6b      	ldr	r3, [pc, #428]	; (8002e4c <state_machine+0x16e4>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]
			break;			
 8002ca2:	e0cc      	b.n	8002e3e <state_machine+0x16d6>
		}
		case 17:{
			if(need_out){
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <state_machine+0x16e4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <state_machine+0x1570>
				fill_screen(0);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fe fc9b 	bl	80015e8 <fill_screen>
				print_string(10, 40, state17_string, 0x797);
 8002cb2:	f240 7397 	movw	r3, #1943	; 0x797
 8002cb6:	4a6c      	ldr	r2, [pc, #432]	; (8002e68 <state_machine+0x1700>)
 8002cb8:	2128      	movs	r1, #40	; 0x28
 8002cba:	200a      	movs	r0, #10
 8002cbc:	f7fe fc16 	bl	80014ec <print_string>
				print_string_scaled(10, 100, state17_string_2, 0x797, 3);
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	f240 7397 	movw	r3, #1943	; 0x797
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <state_machine+0x1704>)
 8002cca:	2164      	movs	r1, #100	; 0x64
 8002ccc:	200a      	movs	r0, #10
 8002cce:	f7fe fc33 	bl	8001538 <print_string_scaled>
				need_out = 0;
 8002cd2:	4b5e      	ldr	r3, [pc, #376]	; (8002e4c <state_machine+0x16e4>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <state_machine+0x1588>
 8002ce2:	4b5a      	ldr	r3, [pc, #360]	; (8002e4c <state_machine+0x16e4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <state_machine+0x16e8>)
 8002cea:	220a      	movs	r2, #10
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e052      	b.n	8002d96 <state_machine+0x162e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d006      	beq.n	8002d08 <state_machine+0x15a0>
 8002cfa:	4b54      	ldr	r3, [pc, #336]	; (8002e4c <state_machine+0x16e4>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <state_machine+0x16e8>)
 8002d02:	220b      	movs	r2, #11
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e046      	b.n	8002d96 <state_machine+0x162e>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d006      	beq.n	8002d20 <state_machine+0x15b8>
 8002d12:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <state_machine+0x16e4>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4b4d      	ldr	r3, [pc, #308]	; (8002e50 <state_machine+0x16e8>)
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e03a      	b.n	8002d96 <state_machine+0x162e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d006      	beq.n	8002d38 <state_machine+0x15d0>
 8002d2a:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <state_machine+0x16e4>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <state_machine+0x16e8>)
 8002d32:	220d      	movs	r2, #13
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e02e      	b.n	8002d96 <state_machine+0x162e>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <state_machine+0x15e8>
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <state_machine+0x16e4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <state_machine+0x16e8>)
 8002d4a:	220e      	movs	r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e022      	b.n	8002d96 <state_machine+0x162e>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0320 	and.w	r3, r3, #32
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <state_machine+0x1600>
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <state_machine+0x16e4>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <state_machine+0x16e8>)
 8002d62:	220f      	movs	r2, #15
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	e016      	b.n	8002d96 <state_machine+0x162e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d006      	beq.n	8002d80 <state_machine+0x1618>
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <state_machine+0x16e4>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <state_machine+0x16e8>)
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	e00a      	b.n	8002d96 <state_machine+0x162e>
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <state_machine+0x162e>
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <state_machine+0x16e4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	4b2f      	ldr	r3, [pc, #188]	; (8002e50 <state_machine+0x16e8>)
 8002d92:	2211      	movs	r2, #17
 8002d94:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <state_machine+0x16ec>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d11f      	bne.n	8002dde <state_machine+0x1676>
 8002d9e:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <state_machine+0x16ec>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01a      	beq.n	8002de4 <state_machine+0x167c>
 8002dae:	4b2a      	ldr	r3, [pc, #168]	; (8002e58 <state_machine+0x16f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d103      	bne.n	8002dbe <state_machine+0x1656>
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <state_machine+0x16f0>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e004      	b.n	8002dc8 <state_machine+0x1660>
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <state_machine+0x16f0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <state_machine+0x16f0>)
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <state_machine+0x16f0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	; (8002e5c <state_machine+0x16f4>)
 8002dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4822      	ldr	r0, [pc, #136]	; (8002e60 <state_machine+0x16f8>)
 8002dd8:	f003 fbcc 	bl	8006574 <HAL_LTDC_SetAlpha>
 8002ddc:	e002      	b.n	8002de4 <state_machine+0x167c>
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <state_machine+0x16ec>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
			check_switch();
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d12b      	bne.n	8002e42 <state_machine+0x16da>
 8002dea:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <state_machine+0x16e8>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	4b1c      	ldr	r3, [pc, #112]	; (8002e64 <state_machine+0x16fc>)
 8002df2:	22b4      	movs	r2, #180	; 0xb4
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <state_machine+0x16e4>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
			break;			
 8002dfc:	e021      	b.n	8002e42 <state_machine+0x16da>
			break;
 8002dfe:	bf00      	nop
 8002e00:	e020      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e02:	bf00      	nop
 8002e04:	e01e      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e06:	bf00      	nop
 8002e08:	e01c      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e0a:	bf00      	nop
 8002e0c:	e01a      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e0e:	bf00      	nop
 8002e10:	e018      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e12:	bf00      	nop
 8002e14:	e016      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e16:	bf00      	nop
 8002e18:	e014      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e1a:	bf00      	nop
 8002e1c:	e012      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e1e:	bf00      	nop
 8002e20:	e010      	b.n	8002e44 <state_machine+0x16dc>
			break;
 8002e22:	bf00      	nop
 8002e24:	e00e      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e26:	bf00      	nop
 8002e28:	e00c      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e2a:	bf00      	nop
 8002e2c:	e00a      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e2e:	bf00      	nop
 8002e30:	e008      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e32:	bf00      	nop
 8002e34:	e006      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e36:	bf00      	nop
 8002e38:	e004      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e3a:	bf00      	nop
 8002e3c:	e002      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e3e:	bf00      	nop
 8002e40:	e000      	b.n	8002e44 <state_machine+0x16dc>
			break;			
 8002e42:	bf00      	nop
		}																				
	}
}
 8002e44:	bf00      	nop
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20001a24 	.word	0x20001a24
 8002e50:	20041870 	.word	0x20041870
 8002e54:	2004186c 	.word	0x2004186c
 8002e58:	20001804 	.word	0x20001804
 8002e5c:	20001808 	.word	0x20001808
 8002e60:	20041a94 	.word	0x20041a94
 8002e64:	20001a28 	.word	0x20001a28
 8002e68:	20001974 	.word	0x20001974
 8002e6c:	20001a1c 	.word	0x20001a1c

08002e70 <tcp_ether_init>:

static struct netbuf *netbuf;
char mb_req_buf[MB_ADU_MAXSIZE];
char mb_repl_buf[MB_ADU_MAXSIZE];

int tcp_ether_init(){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
	conn = netconn_new(NETCONN_TCP);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2010      	movs	r0, #16
 8002e7c:	f009 ff64 	bl	800cd48 <netconn_new_with_proto_and_callback>
 8002e80:	4603      	mov	r3, r0
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <tcp_ether_init+0x6c>)
 8002e84:	6013      	str	r3, [r2, #0]
	if(conn == NULL){return -1;}
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <tcp_ether_init+0x6c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <tcp_ether_init+0x24>
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e92:	e01f      	b.n	8002ed4 <tcp_ether_init+0x64>
	if(netconn_bind(conn, IP_ADDR_ANY, 502) == ERR_OK){
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <tcp_ether_init+0x6c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8002e9c:	4910      	ldr	r1, [pc, #64]	; (8002ee0 <tcp_ether_init+0x70>)
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f009 ffcc 	bl	800ce3c <netconn_bind>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d112      	bne.n	8002ed0 <tcp_ether_init+0x60>
		netconn_listen(conn);
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <tcp_ether_init+0x6c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	21ff      	movs	r1, #255	; 0xff
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f009 fffb 	bl	800ceac <netconn_listen_with_backlog>
		for(;;){
			int stt = 228;
 8002eb6:	23e4      	movs	r3, #228	; 0xe4
 8002eb8:	607b      	str	r3, [r7, #4]
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <tcp_ether_init+0x6c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4909      	ldr	r1, [pc, #36]	; (8002ee4 <tcp_ether_init+0x74>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f00a f81f 	bl	800cf04 <netconn_accept>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f4      	bne.n	8002eb6 <tcp_ether_init+0x46>
				return 0;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e001      	b.n	8002ed4 <tcp_ether_init+0x64>
			}
		}
	}else{
		return -2;
 8002ed0:	f06f 0301 	mvn.w	r3, #1
	}
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	2004187c 	.word	0x2004187c
 8002ee0:	0801e8d4 	.word	0x0801e8d4
 8002ee4:	20041880 	.word	0x20041880

08002ee8 <state_ether>:

int ether_state = 0;

void state_ether(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af02      	add	r7, sp, #8

	switch(ether_state){
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <state_ether+0xc0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <state_ether+0x14>
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d00d      	beq.n	8002f16 <state_ether+0x2e>
			}
			break;
		}
	}

}
 8002efa:	e050      	b.n	8002f9e <state_ether+0xb6>
			if(netconn_recv(newconn, &netbuf) == ERR_OK){
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <state_ether+0xc4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	492b      	ldr	r1, [pc, #172]	; (8002fb0 <state_ether+0xc8>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00a fa06 	bl	800d314 <netconn_recv>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d144      	bne.n	8002f98 <state_ether+0xb0>
				ether_state = 1;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <state_ether+0xc0>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
			break;
 8002f14:	e040      	b.n	8002f98 <state_ether+0xb0>
			for(uint32_t i = 0; i < netbuf->p->len; i++){mb_req_buf[i]=((char*)netbuf->p->payload)[i];} // get the message from the client
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	e00e      	b.n	8002f3a <state_ether+0x52>
 8002f1c:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <state_ether+0xc8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	7819      	ldrb	r1, [r3, #0]
 8002f2a:	4a22      	ldr	r2, [pc, #136]	; (8002fb4 <state_ether+0xcc>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	460a      	mov	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3301      	adds	r3, #1
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <state_ether+0xc8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	895b      	ldrh	r3, [r3, #10]
 8002f42:	461a      	mov	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d3e8      	bcc.n	8002f1c <state_ether+0x34>
			uint16_t buf_len = netbuf->p->len;
 8002f4a:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <state_ether+0xc8>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	895b      	ldrh	r3, [r3, #10]
 8002f52:	807b      	strh	r3, [r7, #2]
			buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len); // process the data
 8002f54:	887b      	ldrh	r3, [r7, #2]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <state_ether+0xcc>)
 8002f5a:	4817      	ldr	r0, [pc, #92]	; (8002fb8 <state_ether+0xd0>)
 8002f5c:	f000 fdaf 	bl	8003abe <mb_process>
 8002f60:	4603      	mov	r3, r0
 8002f62:	807b      	strh	r3, [r7, #2]
			netconn_write(newconn, mb_repl_buf, buf_len, NETCONN_COPY); // send the message back to the client
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <state_ether+0xc4>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2301      	movs	r3, #1
 8002f70:	4911      	ldr	r1, [pc, #68]	; (8002fb8 <state_ether+0xd0>)
 8002f72:	f00a fa49 	bl	800d408 <netconn_write_partly>
			if(netbuf_next(netbuf) <= 0){
 8002f76:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <state_ether+0xc8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f00b fe74 	bl	800ec68 <netbuf_next>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	dc0a      	bgt.n	8002f9c <state_ether+0xb4>
				netbuf_delete(netbuf);
 8002f86:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <state_ether+0xc8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f00b fe4c 	bl	800ec28 <netbuf_delete>
				ether_state = 0;
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <state_ether+0xc0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
			break;
 8002f96:	e001      	b.n	8002f9c <state_ether+0xb4>
			break;
 8002f98:	bf00      	nop
 8002f9a:	e000      	b.n	8002f9e <state_ether+0xb6>
			break;
 8002f9c:	bf00      	nop
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20041a90 	.word	0x20041a90
 8002fac:	20041880 	.word	0x20041880
 8002fb0:	20041884 	.word	0x20041884
 8002fb4:	20041888 	.word	0x20041888
 8002fb8:	2004198c 	.word	0x2004198c

08002fbc <inf_loop>:
  .name = "defaultTask",
  .stack_size = 512 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
void inf_loop(){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	print_string(10, 40, "TEST!", 0x797);
 8002fc0:	f240 7397 	movw	r3, #1943	; 0x797
 8002fc4:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <inf_loop+0x24>)
 8002fc6:	2128      	movs	r1, #40	; 0x28
 8002fc8:	200a      	movs	r0, #10
 8002fca:	f7fe fa8f 	bl	80014ec <print_string>

	for(;;){
		state_machine();
 8002fce:	f7fe fbcb 	bl	8001768 <state_machine>
		state_ether();
 8002fd2:	f7ff ff89 	bl	8002ee8 <state_ether>
		osDelay(1);
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	f005 ff9a 	bl	8008f10 <osDelay>
		state_machine();
 8002fdc:	e7f7      	b.n	8002fce <inf_loop+0x12>
 8002fde:	bf00      	nop
 8002fe0:	0801b1f0 	.word	0x0801b1f0

08002fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fe8:	f001 fb7b 	bl	80046e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fec:	f000 f822 	bl	8003034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ff0:	f000 f90a 	bl	8003208 <MX_GPIO_Init>
  MX_LTDC_Init();
 8002ff4:	f000 f886 	bl	8003104 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuf, LTDC_LAYER_1);
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <main+0x3c>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4809      	ldr	r0, [pc, #36]	; (8003024 <main+0x40>)
 8003000:	f003 faee 	bl	80065e0 <HAL_LTDC_SetAddress>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003004:	f005 fe4c 	bl	8008ca0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <main+0x44>)
 800300a:	2100      	movs	r1, #0
 800300c:	4807      	ldr	r0, [pc, #28]	; (800302c <main+0x48>)
 800300e:	f005 fed9 	bl	8008dc4 <osThreadNew>
 8003012:	4603      	mov	r3, r0
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <main+0x4c>)
 8003016:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003018:	f005 fe76 	bl	8008d08 <osKernelStart>
  /* USER CODE BEGIN WHILE */




	while (1)
 800301c:	e7fe      	b.n	800301c <main+0x38>
 800301e:	bf00      	nop
 8003020:	20001c6c 	.word	0x20001c6c
 8003024:	20041a94 	.word	0x20041a94
 8003028:	0801e778 	.word	0x0801e778
 800302c:	08003a41 	.word	0x08003a41
 8003030:	20041b3c 	.word	0x20041b3c

08003034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b094      	sub	sp, #80	; 0x50
 8003038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800303a:	f107 0320 	add.w	r3, r7, #32
 800303e:	2230      	movs	r2, #48	; 0x30
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f017 f8f9 	bl	801a23a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003048:	f107 030c 	add.w	r3, r7, #12
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003058:	4b28      	ldr	r3, [pc, #160]	; (80030fc <SystemClock_Config+0xc8>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	4a27      	ldr	r2, [pc, #156]	; (80030fc <SystemClock_Config+0xc8>)
 800305e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003062:	6413      	str	r3, [r2, #64]	; 0x40
 8003064:	4b25      	ldr	r3, [pc, #148]	; (80030fc <SystemClock_Config+0xc8>)
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003070:	4b23      	ldr	r3, [pc, #140]	; (8003100 <SystemClock_Config+0xcc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003078:	4a21      	ldr	r2, [pc, #132]	; (8003100 <SystemClock_Config+0xcc>)
 800307a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b1f      	ldr	r3, [pc, #124]	; (8003100 <SystemClock_Config+0xcc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003088:	607b      	str	r3, [r7, #4]
 800308a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800308c:	2302      	movs	r3, #2
 800308e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003090:	2301      	movs	r3, #1
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003094:	2310      	movs	r3, #16
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003098:	2302      	movs	r3, #2
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800309c:	2300      	movs	r3, #0
 800309e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80030a0:	230f      	movs	r3, #15
 80030a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80030a4:	23d8      	movs	r3, #216	; 0xd8
 80030a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030a8:	2302      	movs	r3, #2
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030ac:	2302      	movs	r3, #2
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b0:	f107 0320 	add.w	r3, r7, #32
 80030b4:	4618      	mov	r0, r3
 80030b6:	f003 fc63 	bl	8006980 <HAL_RCC_OscConfig>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80030c0:	f000 fcf8 	bl	8003ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030c4:	230f      	movs	r3, #15
 80030c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c8:	2302      	movs	r3, #2
 80030ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	2103      	movs	r1, #3
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fef0 	bl	8006ec8 <HAL_RCC_ClockConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80030ee:	f000 fce1 	bl	8003ab4 <Error_Handler>
  }
}
 80030f2:	bf00      	nop
 80030f4:	3750      	adds	r7, #80	; 0x50
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000

08003104 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2234      	movs	r2, #52	; 0x34
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f017 f892 	bl	801a23a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003116:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <MX_LTDC_Init+0x100>)
 800311a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800311c:	4b38      	ldr	r3, [pc, #224]	; (8003200 <MX_LTDC_Init+0xfc>)
 800311e:	2200      	movs	r2, #0
 8003120:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003124:	2200      	movs	r2, #0
 8003126:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <MX_LTDC_Init+0xfc>)
 800312a:	2200      	movs	r2, #0
 800312c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800312e:	4b34      	ldr	r3, [pc, #208]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003130:	2200      	movs	r2, #0
 8003132:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003136:	2200      	movs	r2, #0
 8003138:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <MX_LTDC_Init+0xfc>)
 800313c:	2209      	movs	r2, #9
 800313e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003142:	222b      	movs	r2, #43	; 0x2b
 8003144:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003148:	2215      	movs	r2, #21
 800314a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 800314c:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <MX_LTDC_Init+0xfc>)
 800314e:	f240 220b 	movw	r2, #523	; 0x20b
 8003152:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003156:	f240 1225 	movw	r2, #293	; 0x125
 800315a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <MX_LTDC_Init+0xfc>)
 800315e:	f240 2213 	movw	r2, #531	; 0x213
 8003162:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8003164:	4b26      	ldr	r3, [pc, #152]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003166:	f240 1229 	movw	r2, #297	; 0x129
 800316a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <MX_LTDC_Init+0xfc>)
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <MX_LTDC_Init+0xfc>)
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003184:	481e      	ldr	r0, [pc, #120]	; (8003200 <MX_LTDC_Init+0xfc>)
 8003186:	f003 f825 	bl	80061d4 <HAL_LTDC_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003190:	f000 fc90 	bl	8003ab4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003194:	2300      	movs	r3, #0
 8003196:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003198:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800319c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80031a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031a6:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80031a8:	2302      	movs	r3, #2
 80031aa:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80031ac:	23ff      	movs	r3, #255	; 0xff
 80031ae:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80031b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80031ba:	2305      	movs	r3, #5
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80031c2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80031c8:	f44f 7388 	mov.w	r3, #272	; 0x110
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	2200      	movs	r2, #0
 80031e4:	4619      	mov	r1, r3
 80031e6:	4806      	ldr	r0, [pc, #24]	; (8003200 <MX_LTDC_Init+0xfc>)
 80031e8:	f003 f986 	bl	80064f8 <HAL_LTDC_ConfigLayer>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80031f2:	f000 fc5f 	bl	8003ab4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80031f6:	bf00      	nop
 80031f8:	3738      	adds	r7, #56	; 0x38
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20041a94 	.word	0x20041a94
 8003204:	40016800 	.word	0x40016800

08003208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b090      	sub	sp, #64	; 0x40
 800320c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800321e:	4bae      	ldr	r3, [pc, #696]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	4aad      	ldr	r2, [pc, #692]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003224:	f043 0310 	orr.w	r3, r3, #16
 8003228:	6313      	str	r3, [r2, #48]	; 0x30
 800322a:	4bab      	ldr	r3, [pc, #684]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	62bb      	str	r3, [r7, #40]	; 0x28
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003236:	4ba8      	ldr	r3, [pc, #672]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	4aa7      	ldr	r2, [pc, #668]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800323c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003240:	6313      	str	r3, [r2, #48]	; 0x30
 8003242:	4ba5      	ldr	r3, [pc, #660]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800324e:	4ba2      	ldr	r3, [pc, #648]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	4aa1      	ldr	r2, [pc, #644]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	6313      	str	r3, [r2, #48]	; 0x30
 800325a:	4b9f      	ldr	r3, [pc, #636]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003266:	4b9c      	ldr	r3, [pc, #624]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a9b      	ldr	r2, [pc, #620]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800326c:	f043 0308 	orr.w	r3, r3, #8
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b99      	ldr	r3, [pc, #612]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800327e:	4b96      	ldr	r3, [pc, #600]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a95      	ldr	r2, [pc, #596]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b93      	ldr	r3, [pc, #588]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	61bb      	str	r3, [r7, #24]
 8003294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	4b90      	ldr	r3, [pc, #576]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a8f      	ldr	r2, [pc, #572]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b8d      	ldr	r3, [pc, #564]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80032ae:	4b8a      	ldr	r3, [pc, #552]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a89      	ldr	r2, [pc, #548]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b87      	ldr	r3, [pc, #540]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032c2:	613b      	str	r3, [r7, #16]
 80032c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80032c6:	4b84      	ldr	r3, [pc, #528]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a83      	ldr	r2, [pc, #524]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b81      	ldr	r3, [pc, #516]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032de:	4b7e      	ldr	r3, [pc, #504]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	4a7d      	ldr	r2, [pc, #500]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032e8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ea:	4b7b      	ldr	r3, [pc, #492]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032f6:	4b78      	ldr	r3, [pc, #480]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a77      	ldr	r2, [pc, #476]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b75      	ldr	r3, [pc, #468]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800330e:	4b72      	ldr	r3, [pc, #456]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a71      	ldr	r2, [pc, #452]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 8003314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b6f      	ldr	r3, [pc, #444]	; (80034d8 <MX_GPIO_Init+0x2d0>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	603b      	str	r3, [r7, #0]
 8003324:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003326:	2201      	movs	r2, #1
 8003328:	2120      	movs	r1, #32
 800332a:	486c      	ldr	r0, [pc, #432]	; (80034dc <MX_GPIO_Init+0x2d4>)
 800332c:	f002 ff38 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003330:	2200      	movs	r2, #0
 8003332:	210c      	movs	r1, #12
 8003334:	486a      	ldr	r0, [pc, #424]	; (80034e0 <MX_GPIO_Init+0x2d8>)
 8003336:	f002 ff33 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800333a:	2201      	movs	r2, #1
 800333c:	2108      	movs	r1, #8
 800333e:	4869      	ldr	r0, [pc, #420]	; (80034e4 <MX_GPIO_Init+0x2dc>)
 8003340:	f002 ff2e 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003344:	2201      	movs	r2, #1
 8003346:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800334a:	4865      	ldr	r0, [pc, #404]	; (80034e0 <MX_GPIO_Init+0x2d8>)
 800334c:	f002 ff28 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003350:	2200      	movs	r2, #0
 8003352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003356:	4864      	ldr	r0, [pc, #400]	; (80034e8 <MX_GPIO_Init+0x2e0>)
 8003358:	f002 ff22 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800335c:	2200      	movs	r2, #0
 800335e:	21c8      	movs	r1, #200	; 0xc8
 8003360:	4862      	ldr	r0, [pc, #392]	; (80034ec <MX_GPIO_Init+0x2e4>)
 8003362:	f002 ff1d 	bl	80061a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003366:	2308      	movs	r3, #8
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336a:	2300      	movs	r3, #0
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003376:	4619      	mov	r1, r3
 8003378:	485d      	ldr	r0, [pc, #372]	; (80034f0 <MX_GPIO_Init+0x2e8>)
 800337a:	f002 fd4d 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800337e:	2304      	movs	r3, #4
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800338e:	2309      	movs	r3, #9
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003396:	4619      	mov	r1, r3
 8003398:	4855      	ldr	r0, [pc, #340]	; (80034f0 <MX_GPIO_Init+0x2e8>)
 800339a:	f002 fd3d 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800339e:	f64f 7383 	movw	r3, #65411	; 0xff83
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033ac:	2303      	movs	r3, #3
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033b0:	230c      	movs	r3, #12
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b8:	4619      	mov	r1, r3
 80033ba:	484d      	ldr	r0, [pc, #308]	; (80034f0 <MX_GPIO_Init+0x2e8>)
 80033bc:	f002 fd2c 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80033c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033c6:	2312      	movs	r3, #18
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ce:	2300      	movs	r3, #0
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033d2:	2304      	movs	r3, #4
 80033d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033da:	4619      	mov	r1, r3
 80033dc:	4845      	ldr	r0, [pc, #276]	; (80034f4 <MX_GPIO_Init+0x2ec>)
 80033de:	f002 fd1b 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80033e2:	f643 4323 	movw	r3, #15395	; 0x3c23
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f0:	2303      	movs	r3, #3
 80033f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80033f4:	230a      	movs	r3, #10
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033fc:	4619      	mov	r1, r3
 80033fe:	483d      	ldr	r0, [pc, #244]	; (80034f4 <MX_GPIO_Init+0x2ec>)
 8003400:	f002 fd0a 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003404:	2310      	movs	r3, #16
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003414:	2302      	movs	r3, #2
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4835      	ldr	r0, [pc, #212]	; (80034f4 <MX_GPIO_Init+0x2ec>)
 8003420:	f002 fcfa 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003430:	2300      	movs	r3, #0
 8003432:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003434:	2308      	movs	r3, #8
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800343c:	4619      	mov	r1, r3
 800343e:	4827      	ldr	r0, [pc, #156]	; (80034dc <MX_GPIO_Init+0x2d4>)
 8003440:	f002 fcea 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003444:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344e:	2300      	movs	r3, #0
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003456:	230c      	movs	r3, #12
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800345e:	4619      	mov	r1, r3
 8003460:	4825      	ldr	r0, [pc, #148]	; (80034f8 <MX_GPIO_Init+0x2f0>)
 8003462:	f002 fcd9 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003478:	2301      	movs	r3, #1
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800347c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003480:	4619      	mov	r1, r3
 8003482:	481e      	ldr	r0, [pc, #120]	; (80034fc <MX_GPIO_Init+0x2f4>)
 8003484:	f002 fcc8 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003488:	2360      	movs	r3, #96	; 0x60
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003494:	2300      	movs	r3, #0
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003498:	230d      	movs	r3, #13
 800349a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800349c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034a0:	4619      	mov	r1, r3
 80034a2:	4813      	ldr	r0, [pc, #76]	; (80034f0 <MX_GPIO_Init+0x2e8>)
 80034a4:	f002 fcb8 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034b8:	2307      	movs	r3, #7
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c0:	4619      	mov	r1, r3
 80034c2:	480c      	ldr	r0, [pc, #48]	; (80034f4 <MX_GPIO_Init+0x2ec>)
 80034c4:	f002 fca8 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80034c8:	2340      	movs	r3, #64	; 0x40
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034cc:	2302      	movs	r3, #2
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
 80034d4:	e014      	b.n	8003500 <MX_GPIO_Init+0x2f8>
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020c00 	.word	0x40020c00
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40022800 	.word	0x40022800
 80034e8:	40021c00 	.word	0x40021c00
 80034ec:	40021800 	.word	0x40021800
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40020800 	.word	0x40020800
 80034fc:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003500:	2303      	movs	r3, #3
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003504:	230a      	movs	r3, #10
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800350c:	4619      	mov	r1, r3
 800350e:	48bd      	ldr	r0, [pc, #756]	; (8003804 <MX_GPIO_Init+0x5fc>)
 8003510:	f002 fc82 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003514:	f248 1333 	movw	r3, #33075	; 0x8133
 8003518:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003526:	230c      	movs	r3, #12
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800352a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800352e:	4619      	mov	r1, r3
 8003530:	48b5      	ldr	r0, [pc, #724]	; (8003808 <MX_GPIO_Init+0x600>)
 8003532:	f002 fc71 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800353c:	2300      	movs	r3, #0
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003548:	4619      	mov	r1, r3
 800354a:	48b0      	ldr	r0, [pc, #704]	; (800380c <MX_GPIO_Init+0x604>)
 800354c:	f002 fc64 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003550:	2340      	movs	r3, #64	; 0x40
 8003552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003554:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800355e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003562:	4619      	mov	r1, r3
 8003564:	48aa      	ldr	r0, [pc, #680]	; (8003810 <MX_GPIO_Init+0x608>)
 8003566:	f002 fc57 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800356a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003574:	2300      	movs	r3, #0
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800357c:	230c      	movs	r3, #12
 800357e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003584:	4619      	mov	r1, r3
 8003586:	48a2      	ldr	r0, [pc, #648]	; (8003810 <MX_GPIO_Init+0x608>)
 8003588:	f002 fc46 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800358c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003592:	2302      	movs	r3, #2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003596:	2300      	movs	r3, #0
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800359e:	230a      	movs	r3, #10
 80035a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a6:	4619      	mov	r1, r3
 80035a8:	489a      	ldr	r0, [pc, #616]	; (8003814 <MX_GPIO_Init+0x60c>)
 80035aa:	f002 fc35 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80035ae:	23f0      	movs	r3, #240	; 0xf0
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ba:	2300      	movs	r3, #0
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035be:	230a      	movs	r3, #10
 80035c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80035c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c6:	4619      	mov	r1, r3
 80035c8:	4893      	ldr	r0, [pc, #588]	; (8003818 <MX_GPIO_Init+0x610>)
 80035ca:	f002 fc25 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80035ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035e0:	230a      	movs	r3, #10
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80035e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e8:	4619      	mov	r1, r3
 80035ea:	4887      	ldr	r0, [pc, #540]	; (8003808 <MX_GPIO_Init+0x600>)
 80035ec:	f002 fc14 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80035f0:	2320      	movs	r3, #32
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f4:	2301      	movs	r3, #1
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003604:	4619      	mov	r1, r3
 8003606:	4882      	ldr	r0, [pc, #520]	; (8003810 <MX_GPIO_Init+0x608>)
 8003608:	f002 fc06 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800360c:	2308      	movs	r3, #8
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800361c:	230d      	movs	r3, #13
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8003620:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003624:	4619      	mov	r1, r3
 8003626:	487a      	ldr	r0, [pc, #488]	; (8003810 <MX_GPIO_Init+0x608>)
 8003628:	f002 fbf6 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800362c:	f241 030c 	movw	r3, #4108	; 0x100c
 8003630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003632:	2301      	movs	r3, #1
 8003634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363a:	2300      	movs	r3, #0
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800363e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003642:	4619      	mov	r1, r3
 8003644:	4874      	ldr	r0, [pc, #464]	; (8003818 <MX_GPIO_Init+0x610>)
 8003646:	f002 fbe7 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800364a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800364e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003650:	2300      	movs	r3, #0
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003658:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800365c:	4619      	mov	r1, r3
 800365e:	486f      	ldr	r0, [pc, #444]	; (800381c <MX_GPIO_Init+0x614>)
 8003660:	f002 fbda 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003664:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003672:	2303      	movs	r3, #3
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003676:	230c      	movs	r3, #12
 8003678:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800367a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367e:	4619      	mov	r1, r3
 8003680:	4867      	ldr	r0, [pc, #412]	; (8003820 <MX_GPIO_Init+0x618>)
 8003682:	f002 fbc9 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003686:	2308      	movs	r3, #8
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800368a:	2301      	movs	r3, #1
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003692:	2300      	movs	r3, #0
 8003694:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369a:	4619      	mov	r1, r3
 800369c:	4861      	ldr	r0, [pc, #388]	; (8003824 <MX_GPIO_Init+0x61c>)
 800369e:	f002 fbbb 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80036a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80036b4:	230d      	movs	r3, #13
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80036b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036bc:	4619      	mov	r1, r3
 80036be:	4852      	ldr	r0, [pc, #328]	; (8003808 <MX_GPIO_Init+0x600>)
 80036c0:	f002 fbaa 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80036c4:	2310      	movs	r3, #16
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c8:	2300      	movs	r3, #0
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80036d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d4:	4619      	mov	r1, r3
 80036d6:	484e      	ldr	r0, [pc, #312]	; (8003810 <MX_GPIO_Init+0x608>)
 80036d8:	f002 fb9e 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80036dc:	2304      	movs	r3, #4
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e8:	2303      	movs	r3, #3
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80036ec:	230c      	movs	r3, #12
 80036ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f4:	4619      	mov	r1, r3
 80036f6:	4846      	ldr	r0, [pc, #280]	; (8003810 <MX_GPIO_Init+0x608>)
 80036f8:	f002 fb8e 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80036fc:	f248 0304 	movw	r3, #32772	; 0x8004
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003702:	2300      	movs	r3, #0
 8003704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800370a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800370e:	4619      	mov	r1, r3
 8003710:	4845      	ldr	r0, [pc, #276]	; (8003828 <MX_GPIO_Init+0x620>)
 8003712:	f002 fb81 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003716:	2302      	movs	r3, #2
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800371a:	2302      	movs	r3, #2
 800371c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	2300      	movs	r3, #0
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003722:	2300      	movs	r3, #0
 8003724:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003726:	2305      	movs	r3, #5
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800372a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800372e:	4619      	mov	r1, r3
 8003730:	4839      	ldr	r0, [pc, #228]	; (8003818 <MX_GPIO_Init+0x610>)
 8003732:	f002 fb71 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373c:	2301      	movs	r3, #1
 800373e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003740:	2300      	movs	r3, #0
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	2300      	movs	r3, #0
 8003746:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800374c:	4619      	mov	r1, r3
 800374e:	4836      	ldr	r0, [pc, #216]	; (8003828 <MX_GPIO_Init+0x620>)
 8003750:	f002 fb62 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003754:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375a:	2302      	movs	r3, #2
 800375c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375e:	2300      	movs	r3, #0
 8003760:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003762:	2300      	movs	r3, #0
 8003764:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003766:	230d      	movs	r3, #13
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800376a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800376e:	4619      	mov	r1, r3
 8003770:	482d      	ldr	r0, [pc, #180]	; (8003828 <MX_GPIO_Init+0x620>)
 8003772:	f002 fb51 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003776:	2301      	movs	r3, #1
 8003778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377a:	2302      	movs	r3, #2
 800377c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003782:	2300      	movs	r3, #0
 8003784:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003786:	2302      	movs	r3, #2
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800378a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378e:	4619      	mov	r1, r3
 8003790:	4821      	ldr	r0, [pc, #132]	; (8003818 <MX_GPIO_Init+0x610>)
 8003792:	f002 fb41 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037a8:	2307      	movs	r3, #7
 80037aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80037ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b0:	4619      	mov	r1, r3
 80037b2:	4818      	ldr	r0, [pc, #96]	; (8003814 <MX_GPIO_Init+0x60c>)
 80037b4:	f002 fb30 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80037b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c6:	2300      	movs	r3, #0
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80037ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d2:	4619      	mov	r1, r3
 80037d4:	480f      	ldr	r0, [pc, #60]	; (8003814 <MX_GPIO_Init+0x60c>)
 80037d6:	f002 fb1f 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80037da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80037e0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80037ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ee:	4619      	mov	r1, r3
 80037f0:	4809      	ldr	r0, [pc, #36]	; (8003818 <MX_GPIO_Init+0x610>)
 80037f2:	f002 fb11 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80037f6:	23c0      	movs	r3, #192	; 0xc0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	e014      	b.n	800382c <MX_GPIO_Init+0x624>
 8003802:	bf00      	nop
 8003804:	40020400 	.word	0x40020400
 8003808:	40021800 	.word	0x40021800
 800380c:	40022400 	.word	0x40022400
 8003810:	40020c00 	.word	0x40020c00
 8003814:	40020000 	.word	0x40020000
 8003818:	40022000 	.word	0x40022000
 800381c:	40020800 	.word	0x40020800
 8003820:	40021400 	.word	0x40021400
 8003824:	40022800 	.word	0x40022800
 8003828:	40021c00 	.word	0x40021c00
 800382c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382e:	2303      	movs	r3, #3
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003832:	2308      	movs	r3, #8
 8003834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800383a:	4619      	mov	r1, r3
 800383c:	4879      	ldr	r0, [pc, #484]	; (8003a24 <MX_GPIO_Init+0x81c>)
 800383e:	f002 faeb 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003842:	2310      	movs	r3, #16
 8003844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003846:	2302      	movs	r3, #2
 8003848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384a:	2300      	movs	r3, #0
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800384e:	2303      	movs	r3, #3
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003852:	230a      	movs	r3, #10
 8003854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8003856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800385a:	4619      	mov	r1, r3
 800385c:	4872      	ldr	r0, [pc, #456]	; (8003a28 <MX_GPIO_Init+0x820>)
 800385e:	f002 fadb 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003862:	2328      	movs	r3, #40	; 0x28
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003866:	2302      	movs	r3, #2
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386a:	2300      	movs	r3, #0
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800386e:	2303      	movs	r3, #3
 8003870:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003872:	230c      	movs	r3, #12
 8003874:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387a:	4619      	mov	r1, r3
 800387c:	486a      	ldr	r0, [pc, #424]	; (8003a28 <MX_GPIO_Init+0x820>)
 800387e:	f002 facb 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003882:	23c8      	movs	r3, #200	; 0xc8
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003886:	2301      	movs	r3, #1
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003896:	4619      	mov	r1, r3
 8003898:	4864      	ldr	r0, [pc, #400]	; (8003a2c <MX_GPIO_Init+0x824>)
 800389a:	f002 fabd 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800389e:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038a4:	2303      	movs	r3, #3
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b0:	4619      	mov	r1, r3
 80038b2:	485f      	ldr	r0, [pc, #380]	; (8003a30 <MX_GPIO_Init+0x828>)
 80038b4:	f002 fab0 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80038b8:	2308      	movs	r3, #8
 80038ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038bc:	2302      	movs	r3, #2
 80038be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c4:	2303      	movs	r3, #3
 80038c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038c8:	230c      	movs	r3, #12
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80038cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038d0:	4619      	mov	r1, r3
 80038d2:	4854      	ldr	r0, [pc, #336]	; (8003a24 <MX_GPIO_Init+0x81c>)
 80038d4:	f002 faa0 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80038d8:	2305      	movs	r3, #5
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80038e8:	230a      	movs	r3, #10
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038f0:	4619      	mov	r1, r3
 80038f2:	484c      	ldr	r0, [pc, #304]	; (8003a24 <MX_GPIO_Init+0x81c>)
 80038f4:	f002 fa90 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038f8:	2304      	movs	r3, #4
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fc:	2302      	movs	r3, #2
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003908:	2309      	movs	r3, #9
 800390a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003910:	4619      	mov	r1, r3
 8003912:	4848      	ldr	r0, [pc, #288]	; (8003a34 <MX_GPIO_Init+0x82c>)
 8003914:	f002 fa80 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003918:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	2302      	movs	r3, #2
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003922:	2300      	movs	r3, #0
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003926:	2303      	movs	r3, #3
 8003928:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800392a:	2309      	movs	r3, #9
 800392c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800392e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003932:	4619      	mov	r1, r3
 8003934:	4840      	ldr	r0, [pc, #256]	; (8003a38 <MX_GPIO_Init+0x830>)
 8003936:	f002 fa6f 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800393a:	2304      	movs	r3, #4
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800393e:	2300      	movs	r3, #0
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394a:	4619      	mov	r1, r3
 800394c:	4837      	ldr	r0, [pc, #220]	; (8003a2c <MX_GPIO_Init+0x824>)
 800394e:	f002 fa63 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003952:	2301      	movs	r3, #1
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003956:	2303      	movs	r3, #3
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395a:	2300      	movs	r3, #0
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003962:	4619      	mov	r1, r3
 8003964:	4835      	ldr	r0, [pc, #212]	; (8003a3c <MX_GPIO_Init+0x834>)
 8003966:	f002 fa57 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800396a:	2350      	movs	r3, #80	; 0x50
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800397a:	230d      	movs	r3, #13
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003982:	4619      	mov	r1, r3
 8003984:	482d      	ldr	r0, [pc, #180]	; (8003a3c <MX_GPIO_Init+0x834>)
 8003986:	f002 fa47 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800398a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003990:	2312      	movs	r3, #18
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800399c:	2304      	movs	r3, #4
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	4820      	ldr	r0, [pc, #128]	; (8003a28 <MX_GPIO_Init+0x820>)
 80039a8:	f002 fa36 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80039ac:	2328      	movs	r3, #40	; 0x28
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039bc:	230a      	movs	r3, #10
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c4:	4619      	mov	r1, r3
 80039c6:	481d      	ldr	r0, [pc, #116]	; (8003a3c <MX_GPIO_Init+0x834>)
 80039c8:	f002 fa26 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80039cc:	2340      	movs	r3, #64	; 0x40
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80039dc:	2309      	movs	r3, #9
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80039e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e4:	4619      	mov	r1, r3
 80039e6:	4810      	ldr	r0, [pc, #64]	; (8003a28 <MX_GPIO_Init+0x820>)
 80039e8:	f002 fa16 	bl	8005e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80039ec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039fa:	2300      	movs	r3, #0
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039fe:	2305      	movs	r3, #5
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a06:	4619      	mov	r1, r3
 8003a08:	480a      	ldr	r0, [pc, #40]	; (8003a34 <MX_GPIO_Init+0x82c>)
 8003a0a:	f002 fa05 	bl	8005e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	keyboard_GPIO_init();
 8003a0e:	f7fc fdd9 	bl	80005c4 <keyboard_GPIO_init>
	switch_GPIO_init();
 8003a12:	f7fd f9fd 	bl	8000e10 <switch_GPIO_init>
	spinner_GPIO_init();
 8003a16:	f7fd f8ef 	bl	8000bf8 <spinner_GPIO_init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8003a1a:	bf00      	nop
 8003a1c:	3740      	adds	r7, #64	; 0x40
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40020800 	.word	0x40020800
 8003a28:	40021c00 	.word	0x40021c00
 8003a2c:	40021800 	.word	0x40021800
 8003a30:	40021400 	.word	0x40021400
 8003a34:	40020400 	.word	0x40020400
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40020000 	.word	0x40020000

08003a40 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8003a48:	f004 fb06 	bl	8008058 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

osDelay(1);
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	f005 fa5f 	bl	8008f10 <osDelay>

  if(tcp_ether_init()!=0){
 8003a52:	f7ff fa0d 	bl	8002e70 <tcp_ether_init>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d007      	beq.n	8003a6c <StartDefaultTask+0x2c>
  	print_string(10, 40, "ETHERNET FAILURE!", 0x797);
 8003a5c:	f240 7397 	movw	r3, #1943	; 0x797
 8003a60:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <StartDefaultTask+0x48>)
 8003a62:	2128      	movs	r1, #40	; 0x28
 8003a64:	200a      	movs	r0, #10
 8003a66:	f7fd fd41 	bl	80014ec <print_string>
 8003a6a:	e008      	b.n	8003a7e <StartDefaultTask+0x3e>
  }else{
  	print_string(10, 40, "ETHERNET SUCCESS!", 0x797);
 8003a6c:	f240 7397 	movw	r3, #1943	; 0x797
 8003a70:	4a06      	ldr	r2, [pc, #24]	; (8003a8c <StartDefaultTask+0x4c>)
 8003a72:	2128      	movs	r1, #40	; 0x28
 8003a74:	200a      	movs	r0, #10
 8003a76:	f7fd fd39 	bl	80014ec <print_string>
  	inf_loop();
 8003a7a:	f7ff fa9f 	bl	8002fbc <inf_loop>
  /* Infinite loop */
  for(;;)
  {
  	//state_machine();
  	//state_ether();
    osDelay(1);
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f005 fa46 	bl	8008f10 <osDelay>
 8003a84:	e7fb      	b.n	8003a7e <StartDefaultTask+0x3e>
 8003a86:	bf00      	nop
 8003a88:	0801b1f8 	.word	0x0801b1f8
 8003a8c:	0801b20c 	.word	0x0801b20c

08003a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003aa2:	f000 fe2b 	bl	80046fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40001000 	.word	0x40001000

08003ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ab8:	b672      	cpsid	i
}
 8003aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003abc:	e7fe      	b.n	8003abc <Error_Handler+0x8>

08003abe <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(char *mb_repl_buf, char *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 8003acc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f016 fbb1 	bl	801a23a <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f8fd 	bl	8003cda <mb_mbap_copy>
	uint16_t pduLen = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	3307      	adds	r3, #7
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 8003aec:	7d7b      	ldrb	r3, [r7, #21]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	dc1c      	bgt.n	8003b2c <mb_process+0x6e>
 8003af2:	2b0f      	cmp	r3, #15
 8003af4:	da23      	bge.n	8003b3e <mb_process+0x80>
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	dc02      	bgt.n	8003b00 <mb_process+0x42>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	dc04      	bgt.n	8003b08 <mb_process+0x4a>
 8003afe:	e015      	b.n	8003b2c <mb_process+0x6e>
 8003b00:	3b05      	subs	r3, #5
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d812      	bhi.n	8003b2c <mb_process+0x6e>
 8003b06:	e008      	b.n	8003b1a <mb_process+0x5c>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f82b 	bl	8003b6a <mb_process_pdu_read_fn>
 8003b14:	4603      	mov	r3, r0
 8003b16:	82fb      	strh	r3, [r7, #22]
		break;
 8003b18:	e012      	b.n	8003b40 <mb_process+0x82>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68b9      	ldr	r1, [r7, #8]
 8003b20:	68f8      	ldr	r0, [r7, #12]
 8003b22:	f000 f876 	bl	8003c12 <mb_process_pdu_write_single_fn>
 8003b26:	4603      	mov	r3, r0
 8003b28:	82fb      	strh	r3, [r7, #22]
		break;
 8003b2a:	e009      	b.n	8003b40 <mb_process+0x82>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 8003b2c:	7d7b      	ldrb	r3, [r7, #21]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4619      	mov	r1, r3
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f972 	bl	8003e1c <mb_process_err>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	82fb      	strh	r3, [r7, #22]
		break;
 8003b3c:	e000      	b.n	8003b40 <mb_process+0x82>
		break;
 8003b3e:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 8003b40:	8afb      	ldrh	r3, [r7, #22]
 8003b42:	3301      	adds	r3, #1
 8003b44:	121a      	asrs	r2, r3, #8
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3305      	adds	r3, #5
 8003b56:	3201      	adds	r2, #1
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 8003b5c:	8afb      	ldrh	r3, [r7, #22]
 8003b5e:	3307      	adds	r3, #7
 8003b60:	b29b      	uxth	r3, r3
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3307      	adds	r3, #7
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3309      	adds	r3, #9
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	330b      	adds	r3, #11
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	330a      	adds	r3, #10
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	4413      	add	r3, r2
 8003bae:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	8a7a      	ldrh	r2, [r7, #18]
 8003bb6:	8ab9      	ldrh	r1, [r7, #20]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 f8b1 	bl	8003d20 <mb_process_start_address>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <mb_process_pdu_read_fn+0x6a>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 f926 	bl	8003e1c <mb_process_err>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	e01a      	b.n	8003c0a <mb_process_pdu_read_fn+0xa0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3307      	adds	r3, #7
 8003bd8:	7dfa      	ldrb	r2, [r7, #23]
 8003bda:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	8a7a      	ldrh	r2, [r7, #18]
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f934 	bl	8003e52 <mb_pdu_calculate_N>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]
//			read_inputs(mb_req_buf, start_address, quantity);
//			break;
//		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8a7a      	ldrh	r2, [r7, #18]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f927 	bl	8003e52 <mb_pdu_calculate_N>
 8003c04:	4603      	mov	r3, r0
 8003c06:	3302      	adds	r3, #2
 8003c08:	b29b      	uxth	r3, r3
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3307      	adds	r3, #7
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	3309      	adds	r3, #9
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3308      	adds	r3, #8
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	021b      	lsls	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	330b      	adds	r3, #11
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	330a      	adds	r3, #10
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	4413      	add	r3, r2
 8003c56:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	8ab9      	ldrh	r1, [r7, #20]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f85d 	bl	8003d20 <mb_process_start_address>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <mb_process_pdu_write_single_fn+0x6a>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4619      	mov	r1, r3
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f8d2 	bl	8003e1c <mb_process_err>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	e02a      	b.n	8003cd2 <mb_process_pdu_write_single_fn+0xc0>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8003c7c:	7dfb      	ldrb	r3, [r7, #23]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	8a7a      	ldrh	r2, [r7, #18]
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 f8ab 	bl	8003de0 <mb_process_val>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <mb_process_pdu_write_single_fn+0x8e>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
 8003c92:	2203      	movs	r2, #3
 8003c94:	4619      	mov	r1, r3
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f8c0 	bl	8003e1c <mb_process_err>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	e018      	b.n	8003cd2 <mb_process_pdu_write_single_fn+0xc0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3307      	adds	r3, #7
 8003ca4:	7dfa      	ldrb	r2, [r7, #23]
 8003ca6:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3308      	adds	r3, #8
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	7a12      	ldrb	r2, [r2, #8]
 8003cb0:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3309      	adds	r3, #9
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	7a52      	ldrb	r2, [r2, #9]
 8003cba:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	330a      	adds	r3, #10
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	7a92      	ldrb	r2, [r2, #10]
 8003cc4:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	330b      	adds	r3, #11
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	7ad2      	ldrb	r2, [r2, #11]
 8003cce:	701a      	strb	r2, [r3, #0]

//		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
//		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
	}
	return 5; // PDU size for write single XXX command
 8003cd0:	2305      	movs	r3, #5
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <mb_mbap_copy>:

static void mb_mbap_copy(char *mb_repl_buf, char *mb_req_buf) {
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	7852      	ldrb	r2, [r2, #1]
 8003cf4:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	7892      	ldrb	r2, [r2, #2]
 8003cfe:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3303      	adds	r3, #3
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	78d2      	ldrb	r2, [r2, #3]
 8003d08:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	3306      	adds	r3, #6
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	7992      	ldrb	r2, [r2, #6]
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	80fb      	strh	r3, [r7, #6]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	80bb      	strh	r3, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	2b05      	cmp	r3, #5
 8003d3c:	d849      	bhi.n	8003dd2 <mb_process_start_address+0xb2>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <mb_process_start_address+0x24>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d5d 	.word	0x08003d5d
 8003d48:	08003d6d 	.word	0x08003d6d
 8003d4c:	08003d7d 	.word	0x08003d7d
 8003d50:	08003d8d 	.word	0x08003d8d
 8003d54:	08003d9d 	.word	0x08003d9d
 8003d58:	08003dad 	.word	0x08003dad
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8003d5c:	88ba      	ldrh	r2, [r7, #4]
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	4413      	add	r3, r2
 8003d62:	2bff      	cmp	r3, #255	; 0xff
 8003d64:	dd2a      	ble.n	8003dbc <mb_process_start_address+0x9c>
			exception_code = 2;
 8003d66:	2302      	movs	r3, #2
 8003d68:	73fb      	strb	r3, [r7, #15]
		break;
 8003d6a:	e027      	b.n	8003dbc <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8003d6c:	88ba      	ldrh	r2, [r7, #4]
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	4413      	add	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	dd24      	ble.n	8003dc0 <mb_process_start_address+0xa0>
			exception_code = 2;
 8003d76:	2302      	movs	r3, #2
 8003d78:	73fb      	strb	r3, [r7, #15]
		break;
 8003d7a:	e021      	b.n	8003dc0 <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8003d7c:	88ba      	ldrh	r2, [r7, #4]
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	4413      	add	r3, r2
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	dd1e      	ble.n	8003dc4 <mb_process_start_address+0xa4>
			exception_code = 2;
 8003d86:	2302      	movs	r3, #2
 8003d88:	73fb      	strb	r3, [r7, #15]
		break;
 8003d8a:	e01b      	b.n	8003dc4 <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8003d8c:	88ba      	ldrh	r2, [r7, #4]
 8003d8e:	887b      	ldrh	r3, [r7, #2]
 8003d90:	4413      	add	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	dd18      	ble.n	8003dc8 <mb_process_start_address+0xa8>
			exception_code = 2;
 8003d96:	2302      	movs	r3, #2
 8003d98:	73fb      	strb	r3, [r7, #15]
		break;
 8003d9a:	e015      	b.n	8003dc8 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8003d9c:	88ba      	ldrh	r2, [r7, #4]
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	4413      	add	r3, r2
 8003da2:	2bff      	cmp	r3, #255	; 0xff
 8003da4:	dd12      	ble.n	8003dcc <mb_process_start_address+0xac>
			exception_code = 2;
 8003da6:	2302      	movs	r3, #2
 8003da8:	73fb      	strb	r3, [r7, #15]
		break;
 8003daa:	e00f      	b.n	8003dcc <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8003dac:	88ba      	ldrh	r2, [r7, #4]
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	4413      	add	r3, r2
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	dd0c      	ble.n	8003dd0 <mb_process_start_address+0xb0>
			exception_code = 2;
 8003db6:	2302      	movs	r3, #2
 8003db8:	73fb      	strb	r3, [r7, #15]
		break;
 8003dba:	e009      	b.n	8003dd0 <mb_process_start_address+0xb0>
		break;
 8003dbc:	bf00      	nop
 8003dbe:	e008      	b.n	8003dd2 <mb_process_start_address+0xb2>
		break;
 8003dc0:	bf00      	nop
 8003dc2:	e006      	b.n	8003dd2 <mb_process_start_address+0xb2>
		break;
 8003dc4:	bf00      	nop
 8003dc6:	e004      	b.n	8003dd2 <mb_process_start_address+0xb2>
		break;
 8003dc8:	bf00      	nop
 8003dca:	e002      	b.n	8003dd2 <mb_process_start_address+0xb2>
		break;
 8003dcc:	bf00      	nop
 8003dce:	e000      	b.n	8003dd2 <mb_process_start_address+0xb2>
		break;
 8003dd0:	bf00      	nop
	}
	return exception_code;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	460a      	mov	r2, r1
 8003dea:	80fb      	strh	r3, [r7, #6]
 8003dec:	4613      	mov	r3, r2
 8003dee:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2b05      	cmp	r3, #5
 8003df8:	d109      	bne.n	8003e0e <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003e00:	d004      	beq.n	8003e0c <mb_process_val+0x2c>
 8003e02:	88bb      	ldrh	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <mb_process_val+0x2c>
			exception_code = 3;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	73fb      	strb	r3, [r7, #15]
		break;
 8003e0c:	bf00      	nop
	}
	return exception_code;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <mb_process_err>:

static uint16_t mb_process_err(char *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	70fb      	strb	r3, [r7, #3]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3307      	adds	r3, #7
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	883a      	ldrh	r2, [r7, #0]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]
	return 2;
 8003e44:	2302      	movs	r3, #2
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	4603      	mov	r3, r0
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	80fb      	strh	r3, [r7, #6]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	dc02      	bgt.n	8003e6e <mb_pdu_calculate_N+0x1c>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dc04      	bgt.n	8003e76 <mb_pdu_calculate_N+0x24>
 8003e6c:	e017      	b.n	8003e9e <mb_pdu_calculate_N+0x4c>
 8003e6e:	3b03      	subs	r3, #3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d814      	bhi.n	8003e9e <mb_pdu_calculate_N+0x4c>
 8003e74:	e00f      	b.n	8003e96 <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8003e76:	88bb      	ldrh	r3, [r7, #4]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 8003e82:	88bb      	ldrh	r3, [r7, #4]
 8003e84:	08db      	lsrs	r3, r3, #3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3301      	adds	r3, #1
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	e008      	b.n	8003ea0 <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8003e8e:	88bb      	ldrh	r3, [r7, #4]
 8003e90:	08db      	lsrs	r3, r3, #3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	e004      	b.n	8003ea0 <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8003e96:	88bb      	ldrh	r3, [r7, #4]
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	e000      	b.n	8003ea0 <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8003e9e:	2300      	movs	r3, #0
	}
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_MspInit+0x5c>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a14      	ldr	r2, [pc, #80]	; (8003f08 <HAL_MspInit+0x5c>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_MspInit+0x5c>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	607b      	str	r3, [r7, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <HAL_MspInit+0x5c>)
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ece:	4a0e      	ldr	r2, [pc, #56]	; (8003f08 <HAL_MspInit+0x5c>)
 8003ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ed6:	4b0c      	ldr	r3, [pc, #48]	; (8003f08 <HAL_MspInit+0x5c>)
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	210f      	movs	r1, #15
 8003ee6:	f06f 0001 	mvn.w	r0, #1
 8003eea:	f000 fd03 	bl	80048f4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2105      	movs	r1, #5
 8003ef2:	2005      	movs	r0, #5
 8003ef4:	f000 fcfe 	bl	80048f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003ef8:	2005      	movs	r0, #5
 8003efa:	f000 fd17 	bl	800492c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800

08003f0c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b0ae      	sub	sp, #184	; 0xb8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f24:	f107 0320 	add.w	r3, r7, #32
 8003f28:	2284      	movs	r2, #132	; 0x84
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f016 f984 	bl	801a23a <memset>
  if(hltdc->Instance==LTDC)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a72      	ldr	r2, [pc, #456]	; (8004100 <HAL_LTDC_MspInit+0x1f4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	f040 80dd 	bne.w	80040f8 <HAL_LTDC_MspInit+0x1ec>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f3e:	2308      	movs	r3, #8
 8003f40:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 249;
 8003f42:	23f9      	movs	r3, #249	; 0xf9
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003f46:	2302      	movs	r3, #2
 8003f48:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f5c:	f107 0320 	add.w	r3, r7, #32
 8003f60:	4618      	mov	r0, r3
 8003f62:	f003 f9b5 	bl	80072d0 <HAL_RCCEx_PeriphCLKConfig>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8003f6c:	f7ff fda2 	bl	8003ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003f70:	4b64      	ldr	r3, [pc, #400]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f74:	4a63      	ldr	r2, [pc, #396]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f7a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f7c:	4b61      	ldr	r3, [pc, #388]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	4a5d      	ldr	r2, [pc, #372]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003f8e:	f043 0310 	orr.w	r3, r3, #16
 8003f92:	6313      	str	r3, [r2, #48]	; 0x30
 8003f94:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	f003 0310 	and.w	r3, r3, #16
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003fa0:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	4a57      	ldr	r2, [pc, #348]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003faa:	6313      	str	r3, [r2, #48]	; 0x30
 8003fac:	4b55      	ldr	r3, [pc, #340]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003fb8:	4b52      	ldr	r3, [pc, #328]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	4a51      	ldr	r2, [pc, #324]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fc2:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc4:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	4a4b      	ldr	r2, [pc, #300]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fda:	6313      	str	r3, [r2, #48]	; 0x30
 8003fdc:	4b49      	ldr	r3, [pc, #292]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003fe8:	4b46      	ldr	r3, [pc, #280]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4a45      	ldr	r2, [pc, #276]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff4:	4b43      	ldr	r3, [pc, #268]	; (8004104 <HAL_LTDC_MspInit+0x1f8>)
 8003ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004000:	2310      	movs	r3, #16
 8004002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004006:	2302      	movs	r3, #2
 8004008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400c:	2300      	movs	r3, #0
 800400e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004018:	230e      	movs	r3, #14
 800401a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800401e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004022:	4619      	mov	r1, r3
 8004024:	4838      	ldr	r0, [pc, #224]	; (8004108 <HAL_LTDC_MspInit+0x1fc>)
 8004026:	f001 fef7 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800402a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800402e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004032:	2302      	movs	r3, #2
 8004034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004044:	230e      	movs	r3, #14
 8004046:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800404a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800404e:	4619      	mov	r1, r3
 8004050:	482e      	ldr	r0, [pc, #184]	; (800410c <HAL_LTDC_MspInit+0x200>)
 8004052:	f001 fee1 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004056:	23f7      	movs	r3, #247	; 0xf7
 8004058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004062:	2300      	movs	r3, #0
 8004064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800406e:	230e      	movs	r3, #14
 8004070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004074:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004078:	4619      	mov	r1, r3
 800407a:	4825      	ldr	r0, [pc, #148]	; (8004110 <HAL_LTDC_MspInit+0x204>)
 800407c:	f001 fecc 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004084:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004088:	2302      	movs	r3, #2
 800408a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004094:	2300      	movs	r3, #0
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800409a:	2309      	movs	r3, #9
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80040a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040a4:	4619      	mov	r1, r3
 80040a6:	481b      	ldr	r0, [pc, #108]	; (8004114 <HAL_LTDC_MspInit+0x208>)
 80040a8:	f001 feb6 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80040ac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80040b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c0:	2300      	movs	r3, #0
 80040c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040c6:	230e      	movs	r3, #14
 80040c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80040cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4811      	ldr	r0, [pc, #68]	; (8004118 <HAL_LTDC_MspInit+0x20c>)
 80040d4:	f001 fea0 	bl	8005e18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80040d8:	2200      	movs	r2, #0
 80040da:	2105      	movs	r1, #5
 80040dc:	2058      	movs	r0, #88	; 0x58
 80040de:	f000 fc09 	bl	80048f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80040e2:	2058      	movs	r0, #88	; 0x58
 80040e4:	f000 fc22 	bl	800492c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 80040e8:	2200      	movs	r2, #0
 80040ea:	2105      	movs	r1, #5
 80040ec:	2059      	movs	r0, #89	; 0x59
 80040ee:	f000 fc01 	bl	80048f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80040f2:	2059      	movs	r0, #89	; 0x59
 80040f4:	f000 fc1a 	bl	800492c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80040f8:	bf00      	nop
 80040fa:	37b8      	adds	r7, #184	; 0xb8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40016800 	.word	0x40016800
 8004104:	40023800 	.word	0x40023800
 8004108:	40021000 	.word	0x40021000
 800410c:	40022400 	.word	0x40022400
 8004110:	40022800 	.word	0x40022800
 8004114:	40021800 	.word	0x40021800
 8004118:	40022000 	.word	0x40022000

0800411c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08e      	sub	sp, #56	; 0x38
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800412c:	4b33      	ldr	r3, [pc, #204]	; (80041fc <HAL_InitTick+0xe0>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	4a32      	ldr	r2, [pc, #200]	; (80041fc <HAL_InitTick+0xe0>)
 8004132:	f043 0310 	orr.w	r3, r3, #16
 8004136:	6413      	str	r3, [r2, #64]	; 0x40
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <HAL_InitTick+0xe0>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004144:	f107 0210 	add.w	r2, r7, #16
 8004148:	f107 0314 	add.w	r3, r7, #20
 800414c:	4611      	mov	r1, r2
 800414e:	4618      	mov	r0, r3
 8004150:	f003 f88c 	bl	800726c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800415e:	f003 f871 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 8004162:	6378      	str	r0, [r7, #52]	; 0x34
 8004164:	e004      	b.n	8004170 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004166:	f003 f86d 	bl	8007244 <HAL_RCC_GetPCLK1Freq>
 800416a:	4603      	mov	r3, r0
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004172:	4a23      	ldr	r2, [pc, #140]	; (8004200 <HAL_InitTick+0xe4>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	0c9b      	lsrs	r3, r3, #18
 800417a:	3b01      	subs	r3, #1
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_InitTick+0xe8>)
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <HAL_InitTick+0xec>)
 8004182:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004184:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <HAL_InitTick+0xe8>)
 8004186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800418a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_InitTick+0xe8>)
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004192:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <HAL_InitTick+0xe8>)
 8004194:	2200      	movs	r2, #0
 8004196:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <HAL_InitTick+0xe8>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <HAL_InitTick+0xe8>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80041a4:	4817      	ldr	r0, [pc, #92]	; (8004204 <HAL_InitTick+0xe8>)
 80041a6:	f003 fc83 	bl	8007ab0 <HAL_TIM_Base_Init>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80041b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11b      	bne.n	80041f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80041b8:	4812      	ldr	r0, [pc, #72]	; (8004204 <HAL_InitTick+0xe8>)
 80041ba:	f003 fcdb 	bl	8007b74 <HAL_TIM_Base_Start_IT>
 80041be:	4603      	mov	r3, r0
 80041c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80041c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d111      	bne.n	80041f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041cc:	2036      	movs	r0, #54	; 0x36
 80041ce:	f000 fbad 	bl	800492c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b0f      	cmp	r3, #15
 80041d6:	d808      	bhi.n	80041ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80041d8:	2200      	movs	r2, #0
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	2036      	movs	r0, #54	; 0x36
 80041de:	f000 fb89 	bl	80048f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_InitTick+0xf0>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	e002      	b.n	80041f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80041f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3738      	adds	r7, #56	; 0x38
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	431bde83 	.word	0x431bde83
 8004204:	20041b44 	.word	0x20041b44
 8004208:	40001000 	.word	0x40001000
 800420c:	20001a30 	.word	0x20001a30

08004210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004214:	e7fe      	b.n	8004214 <NMI_Handler+0x4>
	...

08004218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    uint8_t reason = *((uint8_t*)0xE000ED2A);
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HardFault_Handler+0x1c>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	71fb      	strb	r3, [r7, #7]
    print_string(10, 40, "HARDFAULT!", 0x797);
 8004224:	f240 7397 	movw	r3, #1943	; 0x797
 8004228:	4a03      	ldr	r2, [pc, #12]	; (8004238 <HardFault_Handler+0x20>)
 800422a:	2128      	movs	r1, #40	; 0x28
 800422c:	200a      	movs	r0, #10
 800422e:	f7fd f95d 	bl	80014ec <print_string>
  {
 8004232:	e7f4      	b.n	800421e <HardFault_Handler+0x6>
 8004234:	e000ed2a 	.word	0xe000ed2a
 8004238:	0801b220 	.word	0x0801b220

0800423c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004240:	e7fe      	b.n	8004240 <MemManage_Handler+0x4>

08004242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004246:	e7fe      	b.n	8004246 <BusFault_Handler+0x4>

08004248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800424c:	e7fe      	b.n	800424c <UsageFault_Handler+0x4>

0800424e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800424e:	b480      	push	{r7}
 8004250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004260:	bf00      	nop
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  get_current_keyboard_state();
 8004270:	f7fc fa0a 	bl	8000688 <get_current_keyboard_state>
  get_current_spinner_button_state();
 8004274:	f7fc fcf4 	bl	8000c60 <get_current_spinner_button_state>
  get_spinner_position_change();
 8004278:	f7fc fd28 	bl	8000ccc <get_spinner_position_change>
  get_current_switch_state();
 800427c:	f7fc fde4 	bl	8000e48 <get_current_switch_state>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004280:	4802      	ldr	r0, [pc, #8]	; (800428c <TIM6_DAC_IRQHandler+0x20>)
 8004282:	f003 fcef 	bl	8007c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20041b44 	.word	0x20041b44

08004290 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004294:	4802      	ldr	r0, [pc, #8]	; (80042a0 <ETH_IRQHandler+0x10>)
 8004296:	f000 fee5 	bl	8005064 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2004659c 	.word	0x2004659c

080042a4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80042a8:	4802      	ldr	r0, [pc, #8]	; (80042b4 <LTDC_IRQHandler+0x10>)
 80042aa:	f002 f863 	bl	8006374 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20041a94 	.word	0x20041a94

080042b8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80042bc:	4802      	ldr	r0, [pc, #8]	; (80042c8 <LTDC_ER_IRQHandler+0x10>)
 80042be:	f002 f859 	bl	8006374 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20041a94 	.word	0x20041a94

080042cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return 1;
 80042d0:	2301      	movs	r3, #1
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_kill>:

int _kill(int pid, int sig)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <_kill+0x20>)
 80042e8:	2216      	movs	r2, #22
 80042ea:	601a      	str	r2, [r3, #0]
  return -1;
 80042ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	2004f73c 	.word	0x2004f73c

08004300 <_exit>:

void _exit (int status)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7ff ffe5 	bl	80042dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004312:	e7fe      	b.n	8004312 <_exit+0x12>

08004314 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004320:	2300      	movs	r3, #0
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	e00a      	b.n	800433c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004326:	f3af 8000 	nop.w
 800432a:	4601      	mov	r1, r0
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	60ba      	str	r2, [r7, #8]
 8004332:	b2ca      	uxtb	r2, r1
 8004334:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	429a      	cmp	r2, r3
 8004342:	dbf0      	blt.n	8004326 <_read+0x12>
  }

  return len;
 8004344:	687b      	ldr	r3, [r7, #4]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b086      	sub	sp, #24
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800435a:	2300      	movs	r3, #0
 800435c:	617b      	str	r3, [r7, #20]
 800435e:	e009      	b.n	8004374 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	60ba      	str	r2, [r7, #8]
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	3301      	adds	r3, #1
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	429a      	cmp	r2, r3
 800437a:	dbf1      	blt.n	8004360 <_write+0x12>
  }
  return len;
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <_close>:

int _close(int file)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ae:	605a      	str	r2, [r3, #4]
  return 0;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_isatty>:

int _isatty(int file)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043c6:	2301      	movs	r3, #1
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
	...

080043f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <_sbrk+0x5c>)
 80043fa:	4b15      	ldr	r3, [pc, #84]	; (8004450 <_sbrk+0x60>)
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <_sbrk+0x64>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <_sbrk+0x64>)
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <_sbrk+0x68>)
 8004410:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <_sbrk+0x64>)
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d205      	bcs.n	800442c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <_sbrk+0x6c>)
 8004422:	220c      	movs	r2, #12
 8004424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800442a:	e009      	b.n	8004440 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800442c:	4b09      	ldr	r3, [pc, #36]	; (8004454 <_sbrk+0x64>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <_sbrk+0x64>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	4a06      	ldr	r2, [pc, #24]	; (8004454 <_sbrk+0x64>)
 800443c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800443e:	68fb      	ldr	r3, [r7, #12]
}
 8004440:	4618      	mov	r0, r3
 8004442:	371c      	adds	r7, #28
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20050000 	.word	0x20050000
 8004450:	00000400 	.word	0x00000400
 8004454:	20041b90 	.word	0x20041b90
 8004458:	2004f740 	.word	0x2004f740
 800445c:	2004f73c 	.word	0x2004f73c

08004460 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <SystemInit+0x20>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	4a05      	ldr	r2, [pc, #20]	; (8004480 <SystemInit+0x20>)
 800446c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004470:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	e000ed00 	.word	0xe000ed00

08004484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004488:	f7ff ffea 	bl	8004460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800448c:	480c      	ldr	r0, [pc, #48]	; (80044c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800448e:	490d      	ldr	r1, [pc, #52]	; (80044c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004490:	4a0d      	ldr	r2, [pc, #52]	; (80044c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004494:	e002      	b.n	800449c <LoopCopyDataInit>

08004496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800449a:	3304      	adds	r3, #4

0800449c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800449c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800449e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044a0:	d3f9      	bcc.n	8004496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044a4:	4c0a      	ldr	r4, [pc, #40]	; (80044d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044a8:	e001      	b.n	80044ae <LoopFillZerobss>

080044aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044ac:	3204      	adds	r2, #4

080044ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044b0:	d3fb      	bcc.n	80044aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80044b2:	f015 fe7d 	bl	801a1b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b6:	f7fe fd95 	bl	8002fe4 <main>
  bx  lr    
 80044ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80044c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044c4:	20001ac0 	.word	0x20001ac0
  ldr r2, =_sidata
 80044c8:	0801ea40 	.word	0x0801ea40
  ldr r2, =_sbss
 80044cc:	20001c00 	.word	0x20001c00
  ldr r4, =_ebss
 80044d0:	2004f740 	.word	0x2004f740

080044d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC_IRQHandler>

080044d6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
 80044de:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <LAN8742_RegisterBusIO+0x28>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <LAN8742_RegisterBusIO+0x28>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <LAN8742_RegisterBusIO+0x28>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004502:	e014      	b.n	800452e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800453a:	b580      	push	{r7, lr}
 800453c:	b086      	sub	sp, #24
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d139      	bne.n	80045ca <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d002      	beq.n	8004564 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	e01c      	b.n	80045aa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	f107 020c 	add.w	r2, r7, #12
 8004578:	2112      	movs	r1, #18
 800457a:	6978      	ldr	r0, [r7, #20]
 800457c:	4798      	blx	r3
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	da03      	bge.n	800458c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8004584:	f06f 0304 	mvn.w	r3, #4
 8004588:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800458a:	e00b      	b.n	80045a4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	429a      	cmp	r2, r3
 8004596:	d105      	bne.n	80045a4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	613b      	str	r3, [r7, #16]
         break;
 80045a2:	e005      	b.n	80045b0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	3301      	adds	r3, #1
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b1f      	cmp	r3, #31
 80045ae:	d9df      	bls.n	8004570 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b1f      	cmp	r3, #31
 80045b6:	d902      	bls.n	80045be <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80045b8:	f06f 0302 	mvn.w	r3, #2
 80045bc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80045ca:	693b      	ldr	r3, [r7, #16]
 }
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6810      	ldr	r0, [r2, #0]
 80045e8:	f107 020c 	add.w	r2, r7, #12
 80045ec:	2101      	movs	r1, #1
 80045ee:	4798      	blx	r3
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da02      	bge.n	80045fc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80045f6:	f06f 0304 	mvn.w	r3, #4
 80045fa:	e06e      	b.n	80046da <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6810      	ldr	r0, [r2, #0]
 8004604:	f107 020c 	add.w	r2, r7, #12
 8004608:	2101      	movs	r1, #1
 800460a:	4798      	blx	r3
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	da02      	bge.n	8004618 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004612:	f06f 0304 	mvn.w	r3, #4
 8004616:	e060      	b.n	80046da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f003 0304 	and.w	r3, r3, #4
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8004622:	2301      	movs	r3, #1
 8004624:	e059      	b.n	80046da <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6810      	ldr	r0, [r2, #0]
 800462e:	f107 020c 	add.w	r2, r7, #12
 8004632:	2100      	movs	r1, #0
 8004634:	4798      	blx	r3
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	da02      	bge.n	8004642 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800463c:	f06f 0304 	mvn.w	r3, #4
 8004640:	e04b      	b.n	80046da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d11b      	bne.n	8004684 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d006      	beq.n	8004664 <LAN8742_GetLinkState+0x90>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004660:	2302      	movs	r3, #2
 8004662:	e03a      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800466e:	2303      	movs	r3, #3
 8004670:	e033      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800467c:	2304      	movs	r3, #4
 800467e:	e02c      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004680:	2305      	movs	r3, #5
 8004682:	e02a      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6810      	ldr	r0, [r2, #0]
 800468c:	f107 020c 	add.w	r2, r7, #12
 8004690:	211f      	movs	r1, #31
 8004692:	4798      	blx	r3
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	da02      	bge.n	80046a0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800469a:	f06f 0304 	mvn.w	r3, #4
 800469e:	e01c      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80046aa:	2306      	movs	r3, #6
 80046ac:	e015      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 031c 	and.w	r3, r3, #28
 80046b4:	2b18      	cmp	r3, #24
 80046b6:	d101      	bne.n	80046bc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80046b8:	2302      	movs	r3, #2
 80046ba:	e00e      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 031c 	and.w	r3, r3, #28
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d101      	bne.n	80046ca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e007      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 031c 	and.w	r3, r3, #28
 80046d0:	2b14      	cmp	r3, #20
 80046d2:	d101      	bne.n	80046d8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80046d4:	2304      	movs	r3, #4
 80046d6:	e000      	b.n	80046da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80046d8:	2305      	movs	r3, #5
    }
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046e6:	2003      	movs	r0, #3
 80046e8:	f000 f8f9 	bl	80048de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046ec:	200f      	movs	r0, #15
 80046ee:	f7ff fd15 	bl	800411c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046f2:	f7ff fbdb 	bl	8003eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <HAL_IncTick+0x20>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_IncTick+0x24>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4413      	add	r3, r2
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_IncTick+0x24>)
 800470e:	6013      	str	r3, [r2, #0]
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20001a34 	.word	0x20001a34
 8004720:	20041b94 	.word	0x20041b94

08004724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  return uwTick;
 8004728:	4b03      	ldr	r3, [pc, #12]	; (8004738 <HAL_GetTick+0x14>)
 800472a:	681b      	ldr	r3, [r3, #0]
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	20041b94 	.word	0x20041b94

0800473c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7ff ffee 	bl	8004724 <HAL_GetTick>
 8004748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004754:	d005      	beq.n	8004762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <HAL_Delay+0x44>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004762:	bf00      	nop
 8004764:	f7ff ffde 	bl	8004724 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d8f7      	bhi.n	8004764 <HAL_Delay+0x28>
  {
  }
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20001a34 	.word	0x20001a34

08004784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <__NVIC_SetPriorityGrouping+0x40>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a0:	4013      	ands	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <__NVIC_SetPriorityGrouping+0x40>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60d3      	str	r3, [r2, #12]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00
 80047c8:	05fa0000 	.word	0x05fa0000

080047cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <__NVIC_GetPriorityGrouping+0x18>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 0307 	and.w	r3, r3, #7
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db0b      	blt.n	8004812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4907      	ldr	r1, [pc, #28]	; (8004820 <__NVIC_EnableIRQ+0x38>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2001      	movs	r0, #1
 800480a:	fa00 f202 	lsl.w	r2, r0, r2
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db0a      	blt.n	800484e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	490c      	ldr	r1, [pc, #48]	; (8004870 <__NVIC_SetPriority+0x4c>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	440b      	add	r3, r1
 8004848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800484c:	e00a      	b.n	8004864 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4908      	ldr	r1, [pc, #32]	; (8004874 <__NVIC_SetPriority+0x50>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3b04      	subs	r3, #4
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	440b      	add	r3, r1
 8004862:	761a      	strb	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000e100 	.word	0xe000e100
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf28      	it	cs
 8004896:	2304      	movcs	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3304      	adds	r3, #4
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d902      	bls.n	80048a8 <NVIC_EncodePriority+0x30>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3b03      	subs	r3, #3
 80048a6:	e000      	b.n	80048aa <NVIC_EncodePriority+0x32>
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	401a      	ands	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	43d9      	mvns	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	4313      	orrs	r3, r2
         );
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff ff4c 	bl	8004784 <__NVIC_SetPriorityGrouping>
}
 80048ec:	bf00      	nop
 80048ee:	3708      	adds	r7, #8
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	4603      	mov	r3, r0
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004906:	f7ff ff61 	bl	80047cc <__NVIC_GetPriorityGrouping>
 800490a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	68b9      	ldr	r1, [r7, #8]
 8004910:	6978      	ldr	r0, [r7, #20]
 8004912:	f7ff ffb1 	bl	8004878 <NVIC_EncodePriority>
 8004916:	4602      	mov	r2, r0
 8004918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff80 	bl	8004824 <__NVIC_SetPriority>
}
 8004924:	bf00      	nop
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	4603      	mov	r3, r0
 8004934:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff ff54 	bl	80047e8 <__NVIC_EnableIRQ>
}
 8004940:	bf00      	nop
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e086      	b.n	8004a68 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2223      	movs	r2, #35	; 0x23
 8004968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f003 ff95 	bl	800889c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004972:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_ETH_Init+0x128>)
 8004974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004976:	4a3e      	ldr	r2, [pc, #248]	; (8004a70 <HAL_ETH_Init+0x128>)
 8004978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800497c:	6453      	str	r3, [r2, #68]	; 0x44
 800497e:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <HAL_ETH_Init+0x128>)
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004986:	60bb      	str	r3, [r7, #8]
 8004988:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800498a:	4b3a      	ldr	r3, [pc, #232]	; (8004a74 <HAL_ETH_Init+0x12c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a39      	ldr	r2, [pc, #228]	; (8004a74 <HAL_ETH_Init+0x12c>)
 8004990:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004994:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004996:	4b37      	ldr	r3, [pc, #220]	; (8004a74 <HAL_ETH_Init+0x12c>)
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4935      	ldr	r1, [pc, #212]	; (8004a74 <HAL_ETH_Init+0x12c>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80049a4:	4b33      	ldr	r3, [pc, #204]	; (8004a74 <HAL_ETH_Init+0x12c>)
 80049a6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049c0:	f7ff feb0 	bl	8004724 <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80049c6:	e011      	b.n	80049ec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80049c8:	f7ff feac 	bl	8004724 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049d6:	d909      	bls.n	80049ec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2204      	movs	r2, #4
 80049dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	22e0      	movs	r2, #224	; 0xe0
 80049e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e03d      	b.n	8004a68 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1e4      	bne.n	80049c8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 ff4e 	bl	80058a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fff9 	bl	80059fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f001 f84f 	bl	8005aae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	461a      	mov	r2, r3
 8004a16:	2100      	movs	r1, #0
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 ffb7 	bl	800598c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8004a2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_ETH_Init+0x130>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004a52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2210      	movs	r2, #16
 8004a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40013800 	.word	0x40013800
 8004a78:	00020060 	.word	0x00020060

08004a7c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d15f      	bne.n	8004b4e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2223      	movs	r2, #35	; 0x23
 8004a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2204      	movs	r2, #4
 8004aa0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f9f6 	bl	8004e94 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f7ff fe43 	bl	800473c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ad4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	f043 0302 	orr.w	r3, r3, #2
 8004ae8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aec:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fd73 	bl	80055da <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f7ff fe15 	bl	800473c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0204 	orr.w	r2, r2, #4
 8004b28:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b32:	69d9      	ldr	r1, [r3, #28]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <HAL_ETH_Start_IT+0xdc>)
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b40:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2223      	movs	r2, #35	; 0x23
 8004b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e000      	b.n	8004b50 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
  }
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	0001a0c1 	.word	0x0001a0c1

08004b5c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6a:	2b23      	cmp	r3, #35	; 0x23
 8004b6c:	d16e      	bne.n	8004c4c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2223      	movs	r2, #35	; 0x23
 8004b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7e:	69d9      	ldr	r1, [r3, #28]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <HAL_ETH_Stop_IT+0xfc>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b8c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ba4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	f023 0302 	bic.w	r3, r3, #2
 8004bb8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bbc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0204 	bic.w	r2, r2, #4
 8004bcc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bd6:	2001      	movs	r0, #1
 8004bd8:	f7ff fdb0 	bl	800473c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fcf8 	bl	80055da <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0208 	bic.w	r2, r2, #8
 8004bf8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c02:	2001      	movs	r0, #1
 8004c04:	f7ff fd9a 	bl	800473c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e00e      	b.n	8004c34 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	3212      	adds	r2, #18
 8004c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c20:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	3301      	adds	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d9ed      	bls.n	8004c16 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2210      	movs	r2, #16
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3718      	adds	r7, #24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	fffe5f3e 	.word	0xfffe5f3e

08004c5c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e045      	b.n	8004d0c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c86:	2b23      	cmp	r3, #35	; 0x23
 8004c88:	d13f      	bne.n	8004d0a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004c92:	2201      	movs	r2, #1
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 ff78 	bl	8005b8c <ETH_Prepare_Tx_Descriptors>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e02a      	b.n	8004d0c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004cb6:	f3bf 8f4f 	dsb	sy
}
 8004cba:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	1c5a      	adds	r2, r3, #1
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d904      	bls.n	8004cd8 <HAL_ETH_Transmit_IT+0x7c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	1f1a      	subs	r2, r3, #4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0304 	and.w	r3, r3, #4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00d      	beq.n	8004d06 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d00:	461a      	mov	r2, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	e000      	b.n	8004d0c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
  }
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3708      	adds	r7, #8
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d109      	bne.n	8004d40 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0a4      	b.n	8004e8a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d46:	2b23      	cmp	r3, #35	; 0x23
 8004d48:	d001      	beq.n	8004d4e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e09d      	b.n	8004e8a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d52:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	3212      	adds	r2, #18
 8004d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d5e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d64:	f1c3 0304 	rsb	r3, r3, #4
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004d6a:	e066      	b.n	8004e3a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d103      	bne.n	8004d9c <HAL_ETH_ReadData+0x88>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d03c      	beq.n	8004e16 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	0c1b      	lsrs	r3, r3, #16
 8004dba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004dbe:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004df0:	461a      	mov	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f003 feff 	bl	8008bf8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	441a      	add	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2200      	movs	r2, #0
 8004e14:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d902      	bls.n	8004e28 <HAL_ETH_ReadData+0x114>
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	3212      	adds	r2, #18
 8004e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e32:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	3301      	adds	r3, #1
 8004e38:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	db06      	blt.n	8004e50 <HAL_ETH_ReadData+0x13c>
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d202      	bcs.n	8004e50 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d08d      	beq.n	8004d6c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f815 	bl	8004e94 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d108      	bne.n	8004e88 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	e000      	b.n	8004e8a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3720      	adds	r7, #32
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
	...

08004e94 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	3212      	adds	r2, #18
 8004eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004ebc:	e042      	b.n	8004f44 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d112      	bne.n	8004eec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004ec6:	f107 0308 	add.w	r3, r7, #8
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f003 fe64 	bl	8008b98 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d102      	bne.n	8004edc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	74fb      	strb	r3, [r7, #19]
 8004eda:	e007      	b.n	8004eec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004eec:	7cfb      	ldrb	r3, [r7, #19]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d028      	beq.n	8004f44 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695a      	ldr	r2, [r3, #20]
 8004efe:	4b26      	ldr	r3, [pc, #152]	; (8004f98 <ETH_UpdateDescriptor+0x104>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	6053      	str	r3, [r2, #4]
 8004f06:	e005      	b.n	8004f14 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	3301      	adds	r3, #1
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d902      	bls.n	8004f32 <ETH_UpdateDescriptor+0x9e>
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	3212      	adds	r2, #18
 8004f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3c:	617b      	str	r3, [r7, #20]
      desccount--;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <ETH_UpdateDescriptor+0xbc>
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1b6      	bne.n	8004ebe <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d01a      	beq.n	8004f90 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004f64:	f3bf 8f5f 	dmb	sy
}
 8004f68:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6919      	ldr	r1, [r3, #16]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	00db      	lsls	r3, r3, #3
 8004f78:	18ca      	adds	r2, r1, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f82:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004f90:	bf00      	nop
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	80004000 	.word	0x80004000

08004f9c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004fba:	e047      	b.n	800504c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d902      	bls.n	8004fe8 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02c      	beq.n	800504c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	440b      	add	r3, r1
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db1f      	blt.n	8005048 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	3304      	adds	r3, #4
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	f003 fe31 	bl	8008c7c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3304      	adds	r3, #4
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	2200      	movs	r2, #0
 8005026:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	3301      	adds	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d902      	bls.n	800503a <HAL_ETH_ReleaseTxPacket+0x9e>
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3b04      	subs	r3, #4
 8005038:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c
 8005046:	e001      	b.n	800504c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_ETH_ReleaseTxPacket+0xbc>
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1b1      	bne.n	8004fbc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800508c:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <HAL_ETH_IRQHandler+0x158>)
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <HAL_ETH_IRQHandler+0x56>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <HAL_ETH_IRQHandler+0x15c>)
 80050b2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f003 f953 	bl	8008360 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00f      	beq.n	80050e4 <HAL_ETH_IRQHandler+0x80>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80050dc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f003 f94e 	bl	8008380 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d042      	beq.n	8005174 <HAL_ETH_IRQHandler+0x110>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d03d      	beq.n	8005174 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fe:	f043 0208 	orr.w	r2, r3, #8
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d01a      	beq.n	8005148 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511a:	695a      	ldr	r2, [r3, #20]
 800511c:	4b29      	ldr	r3, [pc, #164]	; (80051c4 <HAL_ETH_IRQHandler+0x160>)
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	6812      	ldr	r2, [r2, #0]
 8005134:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8005138:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800513c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	22e0      	movs	r2, #224	; 0xe0
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005146:	e012      	b.n	800516e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	f248 6380 	movw	r3, #34432	; 0x8680
 8005156:	4013      	ands	r3, r2
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005166:	461a      	mov	r2, r3
 8005168:	f248 6380 	movw	r3, #34432	; 0x8680
 800516c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f003 f916 	bl	80083a0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00e      	beq.n	800519c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005184:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f81a 	bl	80051c8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80051a6:	4b05      	ldr	r3, [pc, #20]	; (80051bc <HAL_ETH_IRQHandler+0x158>)
 80051a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051ac:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f814 	bl	80051dc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	40013c00 	.word	0x40013c00
 80051c0:	00010040 	.word	0x00010040
 80051c4:	007e2000 	.word	0x007e2000

080051c8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f003 031c 	and.w	r3, r3, #28
 800520c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	02db      	lsls	r3, r3, #11
 8005212:	b29b      	uxth	r3, r3
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	019b      	lsls	r3, r3, #6
 800521e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0302 	bic.w	r3, r3, #2
 800522e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005240:	f7ff fa70 	bl	8004724 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005246:	e00d      	b.n	8005264 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005248:	f7ff fa6c 	bl	8004724 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005256:	d301      	bcc.n	800525c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e010      	b.n	800527e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ec      	bne.n	8005248 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695b      	ldr	r3, [r3, #20]
 8005274:	b29b      	uxth	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f003 031c 	and.w	r3, r3, #28
 80052a2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	02db      	lsls	r3, r3, #11
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	697a      	ldr	r2, [r7, #20]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	019b      	lsls	r3, r3, #6
 80052b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f043 0302 	orr.w	r3, r3, #2
 80052c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f043 0301 	orr.w	r3, r3, #1
 80052cc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052e0:	f7ff fa20 	bl	8004724 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80052e6:	e00d      	b.n	8005304 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80052e8:	f7ff fa1c 	bl	8004724 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f6:	d301      	bcc.n	80052fc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e009      	b.n	8005310 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ec      	bne.n	80052e8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e0e6      	b.n	80054fa <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	461a      	mov	r2, r3
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf14      	ite	ne
 8005380:	2301      	movne	r3, #1
 8005382:	2300      	moveq	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005396:	2b00      	cmp	r3, #0
 8005398:	bf0c      	ite	eq
 800539a:	2301      	moveq	r3, #1
 800539c:	2300      	movne	r3, #0
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005400:	2b00      	cmp	r3, #0
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf14      	ite	ne
 800541e:	2301      	movne	r3, #1
 8005420:	2300      	moveq	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf14      	ite	ne
 8005446:	2301      	movne	r3, #1
 8005448:	2300      	moveq	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	bf14      	ite	ne
 8005460:	2301      	movne	r3, #1
 8005462:	2300      	moveq	r3, #0
 8005464:	b2db      	uxtb	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	bf14      	ite	ne
 800547a:	2301      	movne	r3, #1
 800547c:	2300      	moveq	r3, #0
 800547e:	b2db      	uxtb	r3, r3
 8005480:	461a      	mov	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	461a      	mov	r2, r3
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bf14      	ite	ne
 80054ea:	2301      	movne	r3, #1
 80054ec:	2300      	moveq	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e00b      	b.n	8005532 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005520:	2b10      	cmp	r3, #16
 8005522:	d105      	bne.n	8005530 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005524:	6839      	ldr	r1, [r7, #0]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f87c 	bl	8005624 <ETH_SetMACConfig>

    return HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	e000      	b.n	8005532 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
  }
}
 8005532:	4618      	mov	r0, r3
 8005534:	3708      	adds	r7, #8
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 031c 	bic.w	r3, r3, #28
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005554:	f001 fe6a 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8005558:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a14      	ldr	r2, [pc, #80]	; (80055b0 <HAL_ETH_SetMDIOClockRange+0x74>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d804      	bhi.n	800556c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f043 0308 	orr.w	r3, r3, #8
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e019      	b.n	80055a0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4a11      	ldr	r2, [pc, #68]	; (80055b4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d204      	bcs.n	800557e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f043 030c 	orr.w	r3, r3, #12
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	e010      	b.n	80055a0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4a0d      	ldr	r2, [pc, #52]	; (80055b8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d90c      	bls.n	80055a0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4a0c      	ldr	r2, [pc, #48]	; (80055bc <HAL_ETH_SetMDIOClockRange+0x80>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d804      	bhi.n	8005598 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f043 0304 	orr.w	r3, r3, #4
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e003      	b.n	80055a0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	611a      	str	r2, [r3, #16]
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	02160ebf 	.word	0x02160ebf
 80055b4:	03938700 	.word	0x03938700
 80055b8:	05f5e0ff 	.word	0x05f5e0ff
 80055bc:	08f0d17f 	.word	0x08f0d17f

080055c0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b084      	sub	sp, #16
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80055fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800560a:	2001      	movs	r0, #1
 800560c:	f7ff f896 	bl	800473c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800561a:	6193      	str	r3, [r2, #24]
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4b53      	ldr	r3, [pc, #332]	; (8005788 <ETH_SetMACConfig+0x164>)
 800563a:	4013      	ands	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	7b9b      	ldrb	r3, [r3, #14]
 8005642:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	7c12      	ldrb	r2, [r2, #16]
 8005648:	2a00      	cmp	r2, #0
 800564a:	d102      	bne.n	8005652 <ETH_SetMACConfig+0x2e>
 800564c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005650:	e000      	b.n	8005654 <ETH_SetMACConfig+0x30>
 8005652:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005654:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	7c52      	ldrb	r2, [r2, #17]
 800565a:	2a00      	cmp	r2, #0
 800565c:	d102      	bne.n	8005664 <ETH_SetMACConfig+0x40>
 800565e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005662:	e000      	b.n	8005666 <ETH_SetMACConfig+0x42>
 8005664:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005666:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800566c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	7fdb      	ldrb	r3, [r3, #31]
 8005672:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005674:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800567a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	7f92      	ldrb	r2, [r2, #30]
 8005680:	2a00      	cmp	r2, #0
 8005682:	d102      	bne.n	800568a <ETH_SetMACConfig+0x66>
 8005684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005688:	e000      	b.n	800568c <ETH_SetMACConfig+0x68>
 800568a:	2200      	movs	r2, #0
                        macconf->Speed |
 800568c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	7f1b      	ldrb	r3, [r3, #28]
 8005692:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005694:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800569a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80056a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d102      	bne.n	80056b4 <ETH_SetMACConfig+0x90>
 80056ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056b2:	e000      	b.n	80056b6 <ETH_SetMACConfig+0x92>
 80056b4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80056b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	7bdb      	ldrb	r3, [r3, #15]
 80056bc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80056be:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80056c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056cc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80056ce:	4313      	orrs	r3, r2
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80056e6:	2001      	movs	r0, #1
 80056e8:	f7ff f828 	bl	800473c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005702:	4013      	ands	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005712:	2a00      	cmp	r2, #0
 8005714:	d101      	bne.n	800571a <ETH_SetMACConfig+0xf6>
 8005716:	2280      	movs	r2, #128	; 0x80
 8005718:	e000      	b.n	800571c <ETH_SetMACConfig+0xf8>
 800571a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800571c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005722:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800572a:	2a01      	cmp	r2, #1
 800572c:	d101      	bne.n	8005732 <ETH_SetMACConfig+0x10e>
 800572e:	2208      	movs	r2, #8
 8005730:	e000      	b.n	8005734 <ETH_SetMACConfig+0x110>
 8005732:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005734:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800573c:	2a01      	cmp	r2, #1
 800573e:	d101      	bne.n	8005744 <ETH_SetMACConfig+0x120>
 8005740:	2204      	movs	r2, #4
 8005742:	e000      	b.n	8005746 <ETH_SetMACConfig+0x122>
 8005744:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005746:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800574e:	2a01      	cmp	r2, #1
 8005750:	d101      	bne.n	8005756 <ETH_SetMACConfig+0x132>
 8005752:	2202      	movs	r2, #2
 8005754:	e000      	b.n	8005758 <ETH_SetMACConfig+0x134>
 8005756:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005758:	4313      	orrs	r3, r2
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005770:	2001      	movs	r0, #1
 8005772:	f7fe ffe3 	bl	800473c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	619a      	str	r2, [r3, #24]
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	fd20810f 	.word	0xfd20810f

0800578c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	4b3d      	ldr	r3, [pc, #244]	; (800589c <ETH_SetDMAConfig+0x110>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	7b1b      	ldrb	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <ETH_SetDMAConfig+0x2c>
 80057b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80057b6:	e000      	b.n	80057ba <ETH_SetDMAConfig+0x2e>
 80057b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	7b5b      	ldrb	r3, [r3, #13]
 80057be:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80057c0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	7f52      	ldrb	r2, [r2, #29]
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d102      	bne.n	80057d0 <ETH_SetDMAConfig+0x44>
 80057ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057ce:	e000      	b.n	80057d2 <ETH_SetDMAConfig+0x46>
 80057d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80057d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	7b9b      	ldrb	r3, [r3, #14]
 80057d8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80057da:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80057e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	7f1b      	ldrb	r3, [r3, #28]
 80057e6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80057e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	7f9b      	ldrb	r3, [r3, #30]
 80057ee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80057f0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80057f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057fe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005800:	4313      	orrs	r3, r2
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	4313      	orrs	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005810:	461a      	mov	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005822:	2001      	movs	r0, #1
 8005824:	f7fe ff8a 	bl	800473c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005830:	461a      	mov	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	791b      	ldrb	r3, [r3, #4]
 800583a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005840:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005846:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800584c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005854:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005856:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800585e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005864:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800586e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005872:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005880:	2001      	movs	r0, #1
 8005882:	f7fe ff5b 	bl	800473c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588e:	461a      	mov	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6013      	str	r3, [r2, #0]
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	f8de3f23 	.word	0xf8de3f23

080058a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b0a6      	sub	sp, #152	; 0x98
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80058b4:	2300      	movs	r3, #0
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80058e2:	2300      	movs	r3, #0
 80058e4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005902:	2300      	movs	r3, #0
 8005904:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005908:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800590c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800590e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005912:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800591a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fe7f 	bl	8005624 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005926:	2301      	movs	r3, #1
 8005928:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800592a:	2301      	movs	r3, #1
 800592c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005934:	2301      	movs	r3, #1
 8005936:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800593c:	2300      	movs	r3, #0
 800593e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005948:	2300      	movs	r3, #0
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005952:	2301      	movs	r3, #1
 8005954:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800595a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800595c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005960:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005966:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005968:	2301      	movs	r3, #1
 800596a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800596e:	2300      	movs	r3, #0
 8005970:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005972:	2300      	movs	r3, #0
 8005974:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005976:	f107 0308 	add.w	r3, r7, #8
 800597a:	4619      	mov	r1, r3
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f7ff ff05 	bl	800578c <ETH_SetDMAConfig>
}
 8005982:	bf00      	nop
 8005984:	3798      	adds	r7, #152	; 0x98
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3305      	adds	r3, #5
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	3204      	adds	r2, #4
 80059a4:	7812      	ldrb	r2, [r2, #0]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4b11      	ldr	r3, [pc, #68]	; (80059f4 <ETH_MACAddressConfig+0x68>)
 80059ae:	4413      	add	r3, r2
 80059b0:	461a      	mov	r2, r3
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	3303      	adds	r3, #3
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	061a      	lsls	r2, r3, #24
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	3302      	adds	r3, #2
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	041b      	lsls	r3, r3, #16
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3301      	adds	r3, #1
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	4313      	orrs	r3, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <ETH_MACAddressConfig+0x6c>)
 80059de:	4413      	add	r3, r2
 80059e0:	461a      	mov	r2, r3
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6013      	str	r3, [r2, #0]
}
 80059e6:	bf00      	nop
 80059e8:	371c      	adds	r7, #28
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	40028040 	.word	0x40028040
 80059f8:	40028044 	.word	0x40028044

080059fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e03e      	b.n	8005a88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68d9      	ldr	r1, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	440b      	add	r3, r1
 8005a1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2200      	movs	r2, #0
 8005a32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	3206      	adds	r2, #6
 8005a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d80c      	bhi.n	8005a6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	68d9      	ldr	r1, [r3, #12]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	461a      	mov	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	60da      	str	r2, [r3, #12]
 8005a6a:	e004      	b.n	8005a76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d9bd      	bls.n	8005a0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa0:	611a      	str	r2, [r3, #16]
}
 8005aa2:	bf00      	nop
 8005aa4:	3714      	adds	r7, #20
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	e048      	b.n	8005b4e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6919      	ldr	r1, [r3, #16]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	440b      	add	r3, r1
 8005acc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2200      	movs	r2, #0
 8005ade:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005af8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	3212      	adds	r2, #18
 8005b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d80c      	bhi.n	8005b3e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6919      	ldr	r1, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	440b      	add	r3, r1
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	60da      	str	r2, [r3, #12]
 8005b3c:	e004      	b.n	8005b48 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	461a      	mov	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d9b3      	bls.n	8005abc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691a      	ldr	r2, [r3, #16]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7e:	60da      	str	r2, [r3, #12]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b091      	sub	sp, #68	; 0x44
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005baa:	2300      	movs	r3, #0
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bce:	d007      	beq.n	8005be0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005be0:	2302      	movs	r3, #2
 8005be2:	e111      	b.n	8005e08 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	3301      	adds	r3, #1
 8005be8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	4b86      	ldr	r3, [pc, #536]	; (8005e14 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bfe:	6852      	ldr	r2, [r2, #4]
 8005c00:	431a      	orrs	r2, r3
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c40:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005c66:	e082      	b.n	8005d6e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d006      	beq.n	8005c88 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e005      	b.n	8005c94 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c96:	3301      	adds	r3, #1
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d902      	bls.n	8005ca6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cbc:	d007      	beq.n	8005cce <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d029      	beq.n	8005d22 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce0:	e019      	b.n	8005d16 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8005ce2:	f3bf 8f5f 	dmb	sy
}
 8005ce6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	2b03      	cmp	r3, #3
 8005cfe:	d902      	bls.n	8005d06 <ETH_Prepare_Tx_Descriptors+0x17a>
 8005d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d02:	3b04      	subs	r3, #4
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d12:	3301      	adds	r3, #1
 8005d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d3e1      	bcc.n	8005ce2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e072      	b.n	8005e08 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	3301      	adds	r3, #1
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4e:	6852      	ldr	r2, [r2, #4]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	3301      	adds	r3, #1
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005d5c:	f3bf 8f5f 	dmb	sy
}
 8005d60:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f47f af78 	bne.w	8005c68 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d006      	beq.n	8005d8c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e005      	b.n	8005d98 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	6a3a      	ldr	r2, [r7, #32]
 8005da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005dae:	f3bf 8f5f 	dmb	sy
}
 8005db2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbe:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dc8:	3304      	adds	r3, #4
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dda:	613b      	str	r3, [r7, #16]
  return(result);
 8005ddc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f383 8810 	msr	PRIMASK, r3
}
 8005dea:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	4413      	add	r3, r2
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	629a      	str	r2, [r3, #40]	; 0x28
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3744      	adds	r7, #68	; 0x44
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	ffffe000 	.word	0xffffe000

08005e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b089      	sub	sp, #36	; 0x24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
 8005e36:	e175      	b.n	8006124 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e38:	2201      	movs	r2, #1
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	f040 8164 	bne.w	800611e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d005      	beq.n	8005e6e <HAL_GPIO_Init+0x56>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d130      	bne.n	8005ed0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	2203      	movs	r2, #3
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	4013      	ands	r3, r2
 8005e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	f003 0201 	and.w	r2, r3, #1
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69ba      	ldr	r2, [r7, #24]
 8005ece:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d017      	beq.n	8005f0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	2203      	movs	r2, #3
 8005ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eec:	43db      	mvns	r3, r3
 8005eee:	69ba      	ldr	r2, [r7, #24]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d123      	bne.n	8005f60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	08da      	lsrs	r2, r3, #3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3208      	adds	r2, #8
 8005f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	220f      	movs	r2, #15
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	691a      	ldr	r2, [r3, #16]
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	08da      	lsrs	r2, r3, #3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3208      	adds	r2, #8
 8005f5a:	69b9      	ldr	r1, [r7, #24]
 8005f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	4013      	ands	r3, r2
 8005f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0203 	and.w	r2, r3, #3
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	fa02 f303 	lsl.w	r3, r2, r3
 8005f88:	69ba      	ldr	r2, [r7, #24]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 80be 	beq.w	800611e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fa2:	4b66      	ldr	r3, [pc, #408]	; (800613c <HAL_GPIO_Init+0x324>)
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	4a65      	ldr	r2, [pc, #404]	; (800613c <HAL_GPIO_Init+0x324>)
 8005fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fac:	6453      	str	r3, [r2, #68]	; 0x44
 8005fae:	4b63      	ldr	r3, [pc, #396]	; (800613c <HAL_GPIO_Init+0x324>)
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fb6:	60fb      	str	r3, [r7, #12]
 8005fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005fba:	4a61      	ldr	r2, [pc, #388]	; (8006140 <HAL_GPIO_Init+0x328>)
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	089b      	lsrs	r3, r3, #2
 8005fc0:	3302      	adds	r3, #2
 8005fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	f003 0303 	and.w	r3, r3, #3
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	220f      	movs	r2, #15
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a58      	ldr	r2, [pc, #352]	; (8006144 <HAL_GPIO_Init+0x32c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d037      	beq.n	8006056 <HAL_GPIO_Init+0x23e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a57      	ldr	r2, [pc, #348]	; (8006148 <HAL_GPIO_Init+0x330>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <HAL_GPIO_Init+0x23a>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a56      	ldr	r2, [pc, #344]	; (800614c <HAL_GPIO_Init+0x334>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d02b      	beq.n	800604e <HAL_GPIO_Init+0x236>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a55      	ldr	r2, [pc, #340]	; (8006150 <HAL_GPIO_Init+0x338>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d025      	beq.n	800604a <HAL_GPIO_Init+0x232>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a54      	ldr	r2, [pc, #336]	; (8006154 <HAL_GPIO_Init+0x33c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01f      	beq.n	8006046 <HAL_GPIO_Init+0x22e>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a53      	ldr	r2, [pc, #332]	; (8006158 <HAL_GPIO_Init+0x340>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d019      	beq.n	8006042 <HAL_GPIO_Init+0x22a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a52      	ldr	r2, [pc, #328]	; (800615c <HAL_GPIO_Init+0x344>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d013      	beq.n	800603e <HAL_GPIO_Init+0x226>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a51      	ldr	r2, [pc, #324]	; (8006160 <HAL_GPIO_Init+0x348>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d00d      	beq.n	800603a <HAL_GPIO_Init+0x222>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_GPIO_Init+0x34c>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d007      	beq.n	8006036 <HAL_GPIO_Init+0x21e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a4f      	ldr	r2, [pc, #316]	; (8006168 <HAL_GPIO_Init+0x350>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d101      	bne.n	8006032 <HAL_GPIO_Init+0x21a>
 800602e:	2309      	movs	r3, #9
 8006030:	e012      	b.n	8006058 <HAL_GPIO_Init+0x240>
 8006032:	230a      	movs	r3, #10
 8006034:	e010      	b.n	8006058 <HAL_GPIO_Init+0x240>
 8006036:	2308      	movs	r3, #8
 8006038:	e00e      	b.n	8006058 <HAL_GPIO_Init+0x240>
 800603a:	2307      	movs	r3, #7
 800603c:	e00c      	b.n	8006058 <HAL_GPIO_Init+0x240>
 800603e:	2306      	movs	r3, #6
 8006040:	e00a      	b.n	8006058 <HAL_GPIO_Init+0x240>
 8006042:	2305      	movs	r3, #5
 8006044:	e008      	b.n	8006058 <HAL_GPIO_Init+0x240>
 8006046:	2304      	movs	r3, #4
 8006048:	e006      	b.n	8006058 <HAL_GPIO_Init+0x240>
 800604a:	2303      	movs	r3, #3
 800604c:	e004      	b.n	8006058 <HAL_GPIO_Init+0x240>
 800604e:	2302      	movs	r3, #2
 8006050:	e002      	b.n	8006058 <HAL_GPIO_Init+0x240>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <HAL_GPIO_Init+0x240>
 8006056:	2300      	movs	r3, #0
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	f002 0203 	and.w	r2, r2, #3
 800605e:	0092      	lsls	r2, r2, #2
 8006060:	4093      	lsls	r3, r2
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4313      	orrs	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006068:	4935      	ldr	r1, [pc, #212]	; (8006140 <HAL_GPIO_Init+0x328>)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	089b      	lsrs	r3, r3, #2
 800606e:	3302      	adds	r3, #2
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006076:	4b3d      	ldr	r3, [pc, #244]	; (800616c <HAL_GPIO_Init+0x354>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	43db      	mvns	r3, r3
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	4013      	ands	r3, r2
 8006084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800609a:	4a34      	ldr	r2, [pc, #208]	; (800616c <HAL_GPIO_Init+0x354>)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060a0:	4b32      	ldr	r3, [pc, #200]	; (800616c <HAL_GPIO_Init+0x354>)
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	4013      	ands	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d003      	beq.n	80060c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80060c4:	4a29      	ldr	r2, [pc, #164]	; (800616c <HAL_GPIO_Init+0x354>)
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80060ca:	4b28      	ldr	r3, [pc, #160]	; (800616c <HAL_GPIO_Init+0x354>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	43db      	mvns	r3, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4013      	ands	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d003      	beq.n	80060ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060ee:	4a1f      	ldr	r2, [pc, #124]	; (800616c <HAL_GPIO_Init+0x354>)
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060f4:	4b1d      	ldr	r3, [pc, #116]	; (800616c <HAL_GPIO_Init+0x354>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	43db      	mvns	r3, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4013      	ands	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <HAL_GPIO_Init+0x354>)
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	3301      	adds	r3, #1
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	2b0f      	cmp	r3, #15
 8006128:	f67f ae86 	bls.w	8005e38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	3724      	adds	r7, #36	; 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40023800 	.word	0x40023800
 8006140:	40013800 	.word	0x40013800
 8006144:	40020000 	.word	0x40020000
 8006148:	40020400 	.word	0x40020400
 800614c:	40020800 	.word	0x40020800
 8006150:	40020c00 	.word	0x40020c00
 8006154:	40021000 	.word	0x40021000
 8006158:	40021400 	.word	0x40021400
 800615c:	40021800 	.word	0x40021800
 8006160:	40021c00 	.word	0x40021c00
 8006164:	40022000 	.word	0x40022000
 8006168:	40022400 	.word	0x40022400
 800616c:	40013c00 	.word	0x40013c00

08006170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	887b      	ldrh	r3, [r7, #2]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d002      	beq.n	800618e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
 800618c:	e001      	b.n	8006192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
 80061ac:	4613      	mov	r3, r2
 80061ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061b0:	787b      	ldrb	r3, [r7, #1]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80061bc:	e003      	b.n	80061c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80061be:	887b      	ldrh	r3, [r7, #2]
 80061c0:	041a      	lsls	r2, r3, #16
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	619a      	str	r2, [r3, #24]
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
	...

080061d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0bf      	b.n	8006366 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d106      	bne.n	8006200 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fd fe86 	bl	8003f0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006216:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6999      	ldr	r1, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800622c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6899      	ldr	r1, [r3, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <HAL_LTDC_Init+0x19c>)
 8006248:	400b      	ands	r3, r1
 800624a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	041b      	lsls	r3, r3, #16
 8006252:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6899      	ldr	r1, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68d9      	ldr	r1, [r3, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <HAL_LTDC_Init+0x19c>)
 8006276:	400b      	ands	r3, r1
 8006278:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	041b      	lsls	r3, r3, #16
 8006280:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68d9      	ldr	r1, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6919      	ldr	r1, [r3, #16]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	4b33      	ldr	r3, [pc, #204]	; (8006370 <HAL_LTDC_Init+0x19c>)
 80062a4:	400b      	ands	r3, r1
 80062a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	041b      	lsls	r3, r3, #16
 80062ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6919      	ldr	r1, [r3, #16]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6959      	ldr	r1, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HAL_LTDC_Init+0x19c>)
 80062d2:	400b      	ands	r3, r1
 80062d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	041b      	lsls	r3, r3, #16
 80062dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6959      	ldr	r1, [r3, #20]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006304:	041b      	lsls	r3, r3, #16
 8006306:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006316:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0206 	orr.w	r2, r2, #6
 8006342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	699a      	ldr	r2, [r3, #24]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	f000f800 	.word	0xf000f800

08006374 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006382:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d023      	beq.n	80063de <HAL_LTDC_IRQHandler+0x6a>
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b00      	cmp	r3, #0
 800639e:	d01e      	beq.n	80063de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0204 	bic.w	r2, r2, #4
 80063ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2204      	movs	r2, #4
 80063b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063be:	f043 0201 	orr.w	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f86f 	bl	80064bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d023      	beq.n	8006430 <HAL_LTDC_IRQHandler+0xbc>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01e      	beq.n	8006430 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0202 	bic.w	r2, r2, #2
 8006400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2202      	movs	r2, #2
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006410:	f043 0202 	orr.w	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f846 	bl	80064bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01b      	beq.n	8006472 <HAL_LTDC_IRQHandler+0xfe>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d016      	beq.n	8006472 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f022 0201 	bic.w	r2, r2, #1
 8006452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2201      	movs	r2, #1
 800645a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f82f 	bl	80064d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d01b      	beq.n	80064b4 <HAL_LTDC_IRQHandler+0x140>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d016      	beq.n	80064b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0208 	bic.w	r2, r2, #8
 8006494:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2208      	movs	r2, #8
 800649c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f818 	bl	80064e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80064b4:	bf00      	nop
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_LTDC_ConfigLayer+0x1a>
 800650e:	2302      	movs	r3, #2
 8006510:	e02c      	b.n	800656c <HAL_LTDC_ConfigLayer+0x74>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2134      	movs	r1, #52	; 0x34
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4614      	mov	r4, r2
 8006536:	461d      	mov	r5, r3
 8006538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800653a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800653e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f87d 	bl	800664c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2201      	movs	r2, #1
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bdb0      	pop	{r4, r5, r7, pc}

08006574 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_LTDC_SetAlpha+0x1a>
 800658a:	2302      	movs	r3, #2
 800658c:	e024      	b.n	80065d8 <HAL_LTDC_SetAlpha+0x64>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2234      	movs	r2, #52	; 0x34
 80065a2:	fb02 f303 	mul.w	r3, r2, r3
 80065a6:	3338      	adds	r3, #56	; 0x38
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4413      	add	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6979      	ldr	r1, [r7, #20]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f847 	bl	800664c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_LTDC_SetAddress+0x1a>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e024      	b.n	8006644 <HAL_LTDC_SetAddress+0x64>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2234      	movs	r2, #52	; 0x34
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	3338      	adds	r3, #56	; 0x38
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f811 	bl	800664c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2201      	movs	r2, #1
 8006630:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800664c:	b480      	push	{r7}
 800664e:	b089      	sub	sp, #36	; 0x24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	0c1b      	lsrs	r3, r3, #16
 8006664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006668:	4413      	add	r3, r2
 800666a:	041b      	lsls	r3, r3, #16
 800666c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	01db      	lsls	r3, r3, #7
 8006678:	4413      	add	r3, r2
 800667a:	3384      	adds	r3, #132	; 0x84
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	4611      	mov	r1, r2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	01d2      	lsls	r2, r2, #7
 8006688:	440a      	add	r2, r1
 800668a:	3284      	adds	r2, #132	; 0x84
 800668c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006690:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	0c1b      	lsrs	r3, r3, #16
 800669e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066a2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066a4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4619      	mov	r1, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	01db      	lsls	r3, r3, #7
 80066b0:	440b      	add	r3, r1
 80066b2:	3384      	adds	r3, #132	; 0x84
 80066b4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	68da      	ldr	r2, [r3, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ca:	4413      	add	r3, r2
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	01db      	lsls	r3, r3, #7
 80066da:	4413      	add	r3, r2
 80066dc:	3384      	adds	r3, #132	; 0x84
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	4611      	mov	r1, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	01d2      	lsls	r2, r2, #7
 80066ea:	440a      	add	r2, r1
 80066ec:	3284      	adds	r2, #132	; 0x84
 80066ee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80066f2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	689a      	ldr	r2, [r3, #8]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006702:	4413      	add	r3, r2
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4619      	mov	r1, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	01db      	lsls	r3, r3, #7
 8006710:	440b      	add	r3, r1
 8006712:	3384      	adds	r3, #132	; 0x84
 8006714:	4619      	mov	r1, r3
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4313      	orrs	r3, r2
 800671a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	461a      	mov	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	01db      	lsls	r3, r3, #7
 8006726:	4413      	add	r3, r2
 8006728:	3384      	adds	r3, #132	; 0x84
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	6812      	ldr	r2, [r2, #0]
 8006730:	4611      	mov	r1, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	01d2      	lsls	r2, r2, #7
 8006736:	440a      	add	r2, r1
 8006738:	3284      	adds	r2, #132	; 0x84
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	461a      	mov	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	01db      	lsls	r3, r3, #7
 800674a:	4413      	add	r3, r2
 800674c:	3384      	adds	r3, #132	; 0x84
 800674e:	461a      	mov	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006766:	041b      	lsls	r3, r3, #16
 8006768:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	061b      	lsls	r3, r3, #24
 8006770:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	461a      	mov	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	01db      	lsls	r3, r3, #7
 800677c:	4413      	add	r3, r2
 800677e:	3384      	adds	r3, #132	; 0x84
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	01db      	lsls	r3, r3, #7
 800678c:	4413      	add	r3, r2
 800678e:	3384      	adds	r3, #132	; 0x84
 8006790:	461a      	mov	r2, r3
 8006792:	2300      	movs	r3, #0
 8006794:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800679c:	461a      	mov	r2, r3
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	431a      	orrs	r2, r3
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	431a      	orrs	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4619      	mov	r1, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	01db      	lsls	r3, r3, #7
 80067b0:	440b      	add	r3, r1
 80067b2:	3384      	adds	r3, #132	; 0x84
 80067b4:	4619      	mov	r1, r3
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	01db      	lsls	r3, r3, #7
 80067c6:	4413      	add	r3, r2
 80067c8:	3384      	adds	r3, #132	; 0x84
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	4611      	mov	r1, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	01d2      	lsls	r2, r2, #7
 80067d6:	440a      	add	r2, r1
 80067d8:	3284      	adds	r2, #132	; 0x84
 80067da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067de:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	01db      	lsls	r3, r3, #7
 80067ea:	4413      	add	r3, r2
 80067ec:	3384      	adds	r3, #132	; 0x84
 80067ee:	461a      	mov	r2, r3
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	01db      	lsls	r3, r3, #7
 8006800:	4413      	add	r3, r2
 8006802:	3384      	adds	r3, #132	; 0x84
 8006804:	69da      	ldr	r2, [r3, #28]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4619      	mov	r1, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	01db      	lsls	r3, r3, #7
 8006810:	440b      	add	r3, r1
 8006812:	3384      	adds	r3, #132	; 0x84
 8006814:	4619      	mov	r1, r3
 8006816:	4b58      	ldr	r3, [pc, #352]	; (8006978 <LTDC_SetConfig+0x32c>)
 8006818:	4013      	ands	r3, r2
 800681a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	68f9      	ldr	r1, [r7, #12]
 8006826:	6809      	ldr	r1, [r1, #0]
 8006828:	4608      	mov	r0, r1
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	01c9      	lsls	r1, r1, #7
 800682e:	4401      	add	r1, r0
 8006830:	3184      	adds	r1, #132	; 0x84
 8006832:	4313      	orrs	r3, r2
 8006834:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	01db      	lsls	r3, r3, #7
 8006840:	4413      	add	r3, r2
 8006842:	3384      	adds	r3, #132	; 0x84
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	4413      	add	r3, r2
 8006852:	3384      	adds	r3, #132	; 0x84
 8006854:	461a      	mov	r2, r3
 8006856:	2300      	movs	r3, #0
 8006858:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	4413      	add	r3, r2
 8006866:	3384      	adds	r3, #132	; 0x84
 8006868:	461a      	mov	r2, r3
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006878:	2304      	movs	r3, #4
 800687a:	61fb      	str	r3, [r7, #28]
 800687c:	e01b      	b.n	80068b6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d102      	bne.n	800688c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006886:	2303      	movs	r3, #3
 8006888:	61fb      	str	r3, [r7, #28]
 800688a:	e014      	b.n	80068b6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d00b      	beq.n	80068ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006898:	2b02      	cmp	r3, #2
 800689a:	d007      	beq.n	80068ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d003      	beq.n	80068ac <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068a8:	2b07      	cmp	r3, #7
 80068aa:	d102      	bne.n	80068b2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80068ac:	2302      	movs	r3, #2
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	e001      	b.n	80068b6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80068b2:	2301      	movs	r3, #1
 80068b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	461a      	mov	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	01db      	lsls	r3, r3, #7
 80068c0:	4413      	add	r3, r2
 80068c2:	3384      	adds	r3, #132	; 0x84
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	4611      	mov	r1, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	01d2      	lsls	r2, r2, #7
 80068d0:	440a      	add	r2, r1
 80068d2:	3284      	adds	r2, #132	; 0x84
 80068d4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80068d8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
 80068e4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6859      	ldr	r1, [r3, #4]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1acb      	subs	r3, r1, r3
 80068f0:	69f9      	ldr	r1, [r7, #28]
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80068f8:	68f9      	ldr	r1, [r7, #12]
 80068fa:	6809      	ldr	r1, [r1, #0]
 80068fc:	4608      	mov	r0, r1
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	01c9      	lsls	r1, r1, #7
 8006902:	4401      	add	r1, r0
 8006904:	3184      	adds	r1, #132	; 0x84
 8006906:	4313      	orrs	r3, r2
 8006908:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	01db      	lsls	r3, r3, #7
 8006914:	4413      	add	r3, r2
 8006916:	3384      	adds	r3, #132	; 0x84
 8006918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4619      	mov	r1, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	01db      	lsls	r3, r3, #7
 8006924:	440b      	add	r3, r1
 8006926:	3384      	adds	r3, #132	; 0x84
 8006928:	4619      	mov	r1, r3
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <LTDC_SetConfig+0x330>)
 800692c:	4013      	ands	r3, r2
 800692e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	01db      	lsls	r3, r3, #7
 800693a:	4413      	add	r3, r2
 800693c:	3384      	adds	r3, #132	; 0x84
 800693e:	461a      	mov	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	01db      	lsls	r3, r3, #7
 8006950:	4413      	add	r3, r2
 8006952:	3384      	adds	r3, #132	; 0x84
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	6812      	ldr	r2, [r2, #0]
 800695a:	4611      	mov	r1, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	01d2      	lsls	r2, r2, #7
 8006960:	440a      	add	r2, r1
 8006962:	3284      	adds	r2, #132	; 0x84
 8006964:	f043 0301 	orr.w	r3, r3, #1
 8006968:	6013      	str	r3, [r2, #0]
}
 800696a:	bf00      	nop
 800696c:	3724      	adds	r7, #36	; 0x24
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	fffff8f8 	.word	0xfffff8f8
 800697c:	fffff800 	.word	0xfffff800

08006980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e291      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8087 	beq.w	8006ab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069a4:	4b96      	ldr	r3, [pc, #600]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 030c 	and.w	r3, r3, #12
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d00c      	beq.n	80069ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069b0:	4b93      	ldr	r3, [pc, #588]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 030c 	and.w	r3, r3, #12
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d112      	bne.n	80069e2 <HAL_RCC_OscConfig+0x62>
 80069bc:	4b90      	ldr	r3, [pc, #576]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c8:	d10b      	bne.n	80069e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ca:	4b8d      	ldr	r3, [pc, #564]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d06c      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x130>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d168      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e26b      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ea:	d106      	bne.n	80069fa <HAL_RCC_OscConfig+0x7a>
 80069ec:	4b84      	ldr	r3, [pc, #528]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a83      	ldr	r2, [pc, #524]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e02e      	b.n	8006a58 <HAL_RCC_OscConfig+0xd8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x9c>
 8006a02:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7e      	ldr	r2, [pc, #504]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b7c      	ldr	r3, [pc, #496]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7b      	ldr	r2, [pc, #492]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e01d      	b.n	8006a58 <HAL_RCC_OscConfig+0xd8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0xc0>
 8006a26:	4b76      	ldr	r3, [pc, #472]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a75      	ldr	r2, [pc, #468]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b73      	ldr	r3, [pc, #460]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a72      	ldr	r2, [pc, #456]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e00b      	b.n	8006a58 <HAL_RCC_OscConfig+0xd8>
 8006a40:	4b6f      	ldr	r3, [pc, #444]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a6e      	ldr	r2, [pc, #440]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6b      	ldr	r2, [pc, #428]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d013      	beq.n	8006a88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fd fe60 	bl	8004724 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fd fe5c 	bl	8004724 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	; 0x64
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e21f      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	4b61      	ldr	r3, [pc, #388]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0xe8>
 8006a86:	e014      	b.n	8006ab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a88:	f7fd fe4c 	bl	8004724 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a90:	f7fd fe48 	bl	8004724 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b64      	cmp	r3, #100	; 0x64
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e20b      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa2:	4b57      	ldr	r3, [pc, #348]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x110>
 8006aae:	e000      	b.n	8006ab2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d069      	beq.n	8006b92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006abe:	4b50      	ldr	r3, [pc, #320]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aca:	4b4d      	ldr	r3, [pc, #308]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d11c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x190>
 8006ad6:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d116      	bne.n	8006b10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_RCC_OscConfig+0x17a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d001      	beq.n	8006afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e1df      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afa:	4b41      	ldr	r3, [pc, #260]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	493d      	ldr	r1, [pc, #244]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0e:	e040      	b.n	8006b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d023      	beq.n	8006b60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b18:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a38      	ldr	r2, [pc, #224]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fd fdfe 	bl	8004724 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fd fdfa 	bl	8004724 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e1bd      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3e:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4a:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4929      	ldr	r1, [pc, #164]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]
 8006b5e:	e018      	b.n	8006b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b60:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6c:	f7fd fdda 	bl	8004724 <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b74:	f7fd fdd6 	bl	8004724 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e199      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f0      	bne.n	8006b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d038      	beq.n	8006c10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d019      	beq.n	8006bda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba6:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006baa:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb2:	f7fd fdb7 	bl	8004724 <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bba:	f7fd fdb3 	bl	8004724 <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e176      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x23a>
 8006bd8:	e01a      	b.n	8006c10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bde:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fd fd9d 	bl	8004724 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fd fd99 	bl	8004724 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d903      	bls.n	8006c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e15c      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
 8006c00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c04:	4b91      	ldr	r3, [pc, #580]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ee      	bne.n	8006bee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80a4 	beq.w	8006d66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1e:	4b8b      	ldr	r3, [pc, #556]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10d      	bne.n	8006c46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2a:	4b88      	ldr	r3, [pc, #544]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	4a87      	ldr	r2, [pc, #540]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6413      	str	r3, [r2, #64]	; 0x40
 8006c36:	4b85      	ldr	r3, [pc, #532]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60bb      	str	r3, [r7, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c46:	4b82      	ldr	r3, [pc, #520]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d118      	bne.n	8006c84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c52:	4b7f      	ldr	r3, [pc, #508]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a7e      	ldr	r2, [pc, #504]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5e:	f7fd fd61 	bl	8004724 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fd fd5d 	bl	8004724 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b64      	cmp	r3, #100	; 0x64
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e120      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c78:	4b75      	ldr	r3, [pc, #468]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCC_OscConfig+0x31a>
 8006c8c:	4b6f      	ldr	r3, [pc, #444]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4a6e      	ldr	r2, [pc, #440]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
 8006c98:	e02d      	b.n	8006cf6 <HAL_RCC_OscConfig+0x376>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x33c>
 8006ca2:	4b6a      	ldr	r3, [pc, #424]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a69      	ldr	r2, [pc, #420]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
 8006cae:	4b67      	ldr	r3, [pc, #412]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a66      	ldr	r2, [pc, #408]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cb4:	f023 0304 	bic.w	r3, r3, #4
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	e01c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x376>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b05      	cmp	r3, #5
 8006cc2:	d10c      	bne.n	8006cde <HAL_RCC_OscConfig+0x35e>
 8006cc4:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	4a60      	ldr	r2, [pc, #384]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cca:	f043 0304 	orr.w	r3, r3, #4
 8006cce:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd0:	4b5e      	ldr	r3, [pc, #376]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	4a5d      	ldr	r2, [pc, #372]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	6713      	str	r3, [r2, #112]	; 0x70
 8006cdc:	e00b      	b.n	8006cf6 <HAL_RCC_OscConfig+0x376>
 8006cde:	4b5b      	ldr	r3, [pc, #364]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce2:	4a5a      	ldr	r2, [pc, #360]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cea:	4b58      	ldr	r3, [pc, #352]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a57      	ldr	r2, [pc, #348]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006cf0:	f023 0304 	bic.w	r3, r3, #4
 8006cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d015      	beq.n	8006d2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfe:	f7fd fd11 	bl	8004724 <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	e00a      	b.n	8006d1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fd fd0d 	bl	8004724 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e0ce      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	4b4b      	ldr	r3, [pc, #300]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0ee      	beq.n	8006d06 <HAL_RCC_OscConfig+0x386>
 8006d28:	e014      	b.n	8006d54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2a:	f7fd fcfb 	bl	8004724 <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d30:	e00a      	b.n	8006d48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d32:	f7fd fcf7 	bl	8004724 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e0b8      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d48:	4b40      	ldr	r3, [pc, #256]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1ee      	bne.n	8006d32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d105      	bne.n	8006d66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d5a:	4b3c      	ldr	r3, [pc, #240]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	4a3b      	ldr	r2, [pc, #236]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80a4 	beq.w	8006eb8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d70:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 030c 	and.w	r3, r3, #12
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d06b      	beq.n	8006e54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d149      	bne.n	8006e18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d84:	4b31      	ldr	r3, [pc, #196]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a30      	ldr	r2, [pc, #192]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fd fcc8 	bl	8004724 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d98:	f7fd fcc4 	bl	8004724 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e087      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	4b28      	ldr	r3, [pc, #160]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69da      	ldr	r2, [r3, #28]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006dde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006de2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a18      	ldr	r2, [pc, #96]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fd fc98 	bl	8004724 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006df8:	f7fd fc94 	bl	8004724 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e057      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0a:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0x478>
 8006e16:	e04f      	b.n	8006eb8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e18:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a0b      	ldr	r2, [pc, #44]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e24:	f7fd fc7e 	bl	8004724 <HAL_GetTick>
 8006e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2a:	e008      	b.n	8006e3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e2c:	f7fd fc7a 	bl	8004724 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d901      	bls.n	8006e3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e03d      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3e:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <HAL_RCC_OscConfig+0x4cc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f0      	bne.n	8006e2c <HAL_RCC_OscConfig+0x4ac>
 8006e4a:	e035      	b.n	8006eb8 <HAL_RCC_OscConfig+0x538>
 8006e4c:	40023800 	.word	0x40023800
 8006e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x544>)
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d028      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d121      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d11a      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e84:	4013      	ands	r3, r2
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d111      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d107      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d001      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40023800 	.word	0x40023800

08006ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e0d0      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ee0:	4b6a      	ldr	r3, [pc, #424]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 030f 	and.w	r3, r3, #15
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d910      	bls.n	8006f10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eee:	4b67      	ldr	r3, [pc, #412]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f023 020f 	bic.w	r2, r3, #15
 8006ef6:	4965      	ldr	r1, [pc, #404]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b63      	ldr	r3, [pc, #396]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d001      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e0b8      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0302 	and.w	r3, r3, #2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d020      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f28:	4b59      	ldr	r3, [pc, #356]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a58      	ldr	r2, [pc, #352]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f40:	4b53      	ldr	r3, [pc, #332]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4a52      	ldr	r2, [pc, #328]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f4c:	4b50      	ldr	r3, [pc, #320]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	494d      	ldr	r1, [pc, #308]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d040      	beq.n	8006fec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d107      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f72:	4b47      	ldr	r3, [pc, #284]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d115      	bne.n	8006faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e07f      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f8a:	4b41      	ldr	r3, [pc, #260]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d109      	bne.n	8006faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e073      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f9a:	4b3d      	ldr	r3, [pc, #244]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e06b      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006faa:	4b39      	ldr	r3, [pc, #228]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f023 0203 	bic.w	r2, r3, #3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	4936      	ldr	r1, [pc, #216]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fbc:	f7fd fbb2 	bl	8004724 <HAL_GetTick>
 8006fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc2:	e00a      	b.n	8006fda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc4:	f7fd fbae 	bl	8004724 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e053      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fda:	4b2d      	ldr	r3, [pc, #180]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f003 020c 	and.w	r2, r3, #12
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d1eb      	bne.n	8006fc4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 030f 	and.w	r3, r3, #15
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d210      	bcs.n	800701c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffa:	4b24      	ldr	r3, [pc, #144]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 020f 	bic.w	r2, r3, #15
 8007002:	4922      	ldr	r1, [pc, #136]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	4313      	orrs	r3, r2
 8007008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700a:	4b20      	ldr	r3, [pc, #128]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 030f 	and.w	r3, r3, #15
 8007012:	683a      	ldr	r2, [r7, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d001      	beq.n	800701c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e032      	b.n	8007082 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007028:	4b19      	ldr	r3, [pc, #100]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	4916      	ldr	r1, [pc, #88]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8007036:	4313      	orrs	r3, r2
 8007038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0308 	and.w	r3, r3, #8
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	00db      	lsls	r3, r3, #3
 8007054:	490e      	ldr	r1, [pc, #56]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8007056:	4313      	orrs	r3, r2
 8007058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800705a:	f000 f821 	bl	80070a0 <HAL_RCC_GetSysClockFreq>
 800705e:	4602      	mov	r2, r0
 8007060:	4b0b      	ldr	r3, [pc, #44]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	091b      	lsrs	r3, r3, #4
 8007066:	f003 030f 	and.w	r3, r3, #15
 800706a:	490a      	ldr	r1, [pc, #40]	; (8007094 <HAL_RCC_ClockConfig+0x1cc>)
 800706c:	5ccb      	ldrb	r3, [r1, r3]
 800706e:	fa22 f303 	lsr.w	r3, r2, r3
 8007072:	4a09      	ldr	r2, [pc, #36]	; (8007098 <HAL_RCC_ClockConfig+0x1d0>)
 8007074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <HAL_RCC_ClockConfig+0x1d4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4618      	mov	r0, r3
 800707c:	f7fd f84e 	bl	800411c <HAL_InitTick>

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40023c00 	.word	0x40023c00
 8007090:	40023800 	.word	0x40023800
 8007094:	0801e79c 	.word	0x0801e79c
 8007098:	20001a2c 	.word	0x20001a2c
 800709c:	20001a30 	.word	0x20001a30

080070a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070a4:	b090      	sub	sp, #64	; 0x40
 80070a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
 80070ac:	2300      	movs	r3, #0
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	2300      	movs	r3, #0
 80070b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070b8:	4b59      	ldr	r3, [pc, #356]	; (8007220 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 030c 	and.w	r3, r3, #12
 80070c0:	2b08      	cmp	r3, #8
 80070c2:	d00d      	beq.n	80070e0 <HAL_RCC_GetSysClockFreq+0x40>
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	f200 80a1 	bhi.w	800720c <HAL_RCC_GetSysClockFreq+0x16c>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_RCC_GetSysClockFreq+0x34>
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d003      	beq.n	80070da <HAL_RCC_GetSysClockFreq+0x3a>
 80070d2:	e09b      	b.n	800720c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070d4:	4b53      	ldr	r3, [pc, #332]	; (8007224 <HAL_RCC_GetSysClockFreq+0x184>)
 80070d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070d8:	e09b      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070da:	4b53      	ldr	r3, [pc, #332]	; (8007228 <HAL_RCC_GetSysClockFreq+0x188>)
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070de:	e098      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070e0:	4b4f      	ldr	r3, [pc, #316]	; (8007220 <HAL_RCC_GetSysClockFreq+0x180>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070ea:	4b4d      	ldr	r3, [pc, #308]	; (8007220 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d028      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070f6:	4b4a      	ldr	r3, [pc, #296]	; (8007220 <HAL_RCC_GetSysClockFreq+0x180>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	099b      	lsrs	r3, r3, #6
 80070fc:	2200      	movs	r2, #0
 80070fe:	623b      	str	r3, [r7, #32]
 8007100:	627a      	str	r2, [r7, #36]	; 0x24
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007108:	2100      	movs	r1, #0
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <HAL_RCC_GetSysClockFreq+0x188>)
 800710c:	fb03 f201 	mul.w	r2, r3, r1
 8007110:	2300      	movs	r3, #0
 8007112:	fb00 f303 	mul.w	r3, r0, r3
 8007116:	4413      	add	r3, r2
 8007118:	4a43      	ldr	r2, [pc, #268]	; (8007228 <HAL_RCC_GetSysClockFreq+0x188>)
 800711a:	fba0 1202 	umull	r1, r2, r0, r2
 800711e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007120:	460a      	mov	r2, r1
 8007122:	62ba      	str	r2, [r7, #40]	; 0x28
 8007124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007126:	4413      	add	r3, r2
 8007128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800712a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712c:	2200      	movs	r2, #0
 800712e:	61bb      	str	r3, [r7, #24]
 8007130:	61fa      	str	r2, [r7, #28]
 8007132:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007136:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800713a:	f7f9 f8c1 	bl	80002c0 <__aeabi_uldivmod>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4613      	mov	r3, r2
 8007144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007146:	e053      	b.n	80071f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007148:	4b35      	ldr	r3, [pc, #212]	; (8007220 <HAL_RCC_GetSysClockFreq+0x180>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	099b      	lsrs	r3, r3, #6
 800714e:	2200      	movs	r2, #0
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	617a      	str	r2, [r7, #20]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800715a:	f04f 0b00 	mov.w	fp, #0
 800715e:	4652      	mov	r2, sl
 8007160:	465b      	mov	r3, fp
 8007162:	f04f 0000 	mov.w	r0, #0
 8007166:	f04f 0100 	mov.w	r1, #0
 800716a:	0159      	lsls	r1, r3, #5
 800716c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007170:	0150      	lsls	r0, r2, #5
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	ebb2 080a 	subs.w	r8, r2, sl
 800717a:	eb63 090b 	sbc.w	r9, r3, fp
 800717e:	f04f 0200 	mov.w	r2, #0
 8007182:	f04f 0300 	mov.w	r3, #0
 8007186:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800718a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800718e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007192:	ebb2 0408 	subs.w	r4, r2, r8
 8007196:	eb63 0509 	sbc.w	r5, r3, r9
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	00eb      	lsls	r3, r5, #3
 80071a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071a8:	00e2      	lsls	r2, r4, #3
 80071aa:	4614      	mov	r4, r2
 80071ac:	461d      	mov	r5, r3
 80071ae:	eb14 030a 	adds.w	r3, r4, sl
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	eb45 030b 	adc.w	r3, r5, fp
 80071b8:	607b      	str	r3, [r7, #4]
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	f04f 0300 	mov.w	r3, #0
 80071c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071c6:	4629      	mov	r1, r5
 80071c8:	028b      	lsls	r3, r1, #10
 80071ca:	4621      	mov	r1, r4
 80071cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80071d0:	4621      	mov	r1, r4
 80071d2:	028a      	lsls	r2, r1, #10
 80071d4:	4610      	mov	r0, r2
 80071d6:	4619      	mov	r1, r3
 80071d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071da:	2200      	movs	r2, #0
 80071dc:	60bb      	str	r3, [r7, #8]
 80071de:	60fa      	str	r2, [r7, #12]
 80071e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071e4:	f7f9 f86c 	bl	80002c0 <__aeabi_uldivmod>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4613      	mov	r3, r2
 80071ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_RCC_GetSysClockFreq+0x180>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	0c1b      	lsrs	r3, r3, #16
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	3301      	adds	r3, #1
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007204:	fbb2 f3f3 	udiv	r3, r2, r3
 8007208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800720a:	e002      	b.n	8007212 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <HAL_RCC_GetSysClockFreq+0x184>)
 800720e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007214:	4618      	mov	r0, r3
 8007216:	3740      	adds	r7, #64	; 0x40
 8007218:	46bd      	mov	sp, r7
 800721a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800721e:	bf00      	nop
 8007220:	40023800 	.word	0x40023800
 8007224:	00f42400 	.word	0x00f42400
 8007228:	017d7840 	.word	0x017d7840

0800722c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <HAL_RCC_GetHCLKFreq+0x14>)
 8007232:	681b      	ldr	r3, [r3, #0]
}
 8007234:	4618      	mov	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	20001a2c 	.word	0x20001a2c

08007244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007248:	f7ff fff0 	bl	800722c <HAL_RCC_GetHCLKFreq>
 800724c:	4602      	mov	r2, r0
 800724e:	4b05      	ldr	r3, [pc, #20]	; (8007264 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	0a9b      	lsrs	r3, r3, #10
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	4903      	ldr	r1, [pc, #12]	; (8007268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800725a:	5ccb      	ldrb	r3, [r1, r3]
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007260:	4618      	mov	r0, r3
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40023800 	.word	0x40023800
 8007268:	0801e7ac 	.word	0x0801e7ac

0800726c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	220f      	movs	r2, #15
 800727a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800727c:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <HAL_RCC_GetClockConfig+0x5c>)
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0203 	and.w	r2, r3, #3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007288:	4b0f      	ldr	r3, [pc, #60]	; (80072c8 <HAL_RCC_GetClockConfig+0x5c>)
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007294:	4b0c      	ldr	r3, [pc, #48]	; (80072c8 <HAL_RCC_GetClockConfig+0x5c>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80072a0:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <HAL_RCC_GetClockConfig+0x5c>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	08db      	lsrs	r3, r3, #3
 80072a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <HAL_RCC_GetClockConfig+0x60>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	601a      	str	r2, [r3, #0]
}
 80072ba:	bf00      	nop
 80072bc:	370c      	adds	r7, #12
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40023800 	.word	0x40023800
 80072cc:	40023c00 	.word	0x40023c00

080072d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d012      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072f8:	4b69      	ldr	r3, [pc, #420]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	4a68      	ldr	r2, [pc, #416]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007302:	6093      	str	r3, [r2, #8]
 8007304:	4b66      	ldr	r3, [pc, #408]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	4964      	ldr	r1, [pc, #400]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800730e:	4313      	orrs	r3, r2
 8007310:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800731a:	2301      	movs	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d017      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800732a:	4b5d      	ldr	r3, [pc, #372]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007338:	4959      	ldr	r1, [pc, #356]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007348:	d101      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007356:	2301      	movs	r3, #1
 8007358:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d017      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007366:	4b4e      	ldr	r3, [pc, #312]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800736c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	494a      	ldr	r1, [pc, #296]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007376:	4313      	orrs	r3, r2
 8007378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007384:	d101      	bne.n	800738a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007392:	2301      	movs	r3, #1
 8007394:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80073a2:	2301      	movs	r3, #1
 80073a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 0320 	and.w	r3, r3, #32
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 808b 	beq.w	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073b4:	4b3a      	ldr	r3, [pc, #232]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	4a39      	ldr	r2, [pc, #228]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073be:	6413      	str	r3, [r2, #64]	; 0x40
 80073c0:	4b37      	ldr	r3, [pc, #220]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c8:	60bb      	str	r3, [r7, #8]
 80073ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073cc:	4b35      	ldr	r3, [pc, #212]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a34      	ldr	r2, [pc, #208]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073d8:	f7fd f9a4 	bl	8004724 <HAL_GetTick>
 80073dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073de:	e008      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e0:	f7fd f9a0 	bl	8004724 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b64      	cmp	r3, #100	; 0x64
 80073ec:	d901      	bls.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e357      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80073f2:	4b2c      	ldr	r3, [pc, #176]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f0      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073fe:	4b28      	ldr	r3, [pc, #160]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007406:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d035      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	429a      	cmp	r2, r3
 800741a:	d02e      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800741c:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007424:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742a:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007430:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007432:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	4a1a      	ldr	r2, [pc, #104]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800743c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800743e:	4a18      	ldr	r2, [pc, #96]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007444:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b01      	cmp	r3, #1
 800744e:	d114      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fd f968 	bl	8004724 <HAL_GetTick>
 8007454:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007456:	e00a      	b.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007458:	f7fd f964 	bl	8004724 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	f241 3288 	movw	r2, #5000	; 0x1388
 8007466:	4293      	cmp	r3, r2
 8007468:	d901      	bls.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e319      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	f003 0302 	and.w	r3, r3, #2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0ee      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007482:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007486:	d111      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007488:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007496:	400b      	ands	r3, r1
 8007498:	4901      	ldr	r1, [pc, #4]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749a:	4313      	orrs	r3, r2
 800749c:	608b      	str	r3, [r1, #8]
 800749e:	e00b      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40007000 	.word	0x40007000
 80074a8:	0ffffcff 	.word	0x0ffffcff
 80074ac:	4baa      	ldr	r3, [pc, #680]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4aa9      	ldr	r2, [pc, #676]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074b6:	6093      	str	r3, [r2, #8]
 80074b8:	4ba7      	ldr	r3, [pc, #668]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074c4:	49a4      	ldr	r1, [pc, #656]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d010      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074d6:	4ba0      	ldr	r3, [pc, #640]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074dc:	4a9e      	ldr	r2, [pc, #632]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80074e6:	4b9c      	ldr	r3, [pc, #624]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f0:	4999      	ldr	r1, [pc, #612]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007504:	4b94      	ldr	r3, [pc, #592]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007512:	4991      	ldr	r1, [pc, #580]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007526:	4b8c      	ldr	r3, [pc, #560]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007534:	4988      	ldr	r1, [pc, #544]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007548:	4b83      	ldr	r3, [pc, #524]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800754a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800754e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007556:	4980      	ldr	r1, [pc, #512]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800756a:	4b7b      	ldr	r3, [pc, #492]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007578:	4977      	ldr	r1, [pc, #476]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800758c:	4b72      	ldr	r3, [pc, #456]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007592:	f023 0203 	bic.w	r2, r3, #3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	496f      	ldr	r1, [pc, #444]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759c:	4313      	orrs	r3, r2
 800759e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075ae:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b4:	f023 020c 	bic.w	r2, r3, #12
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075bc:	4966      	ldr	r1, [pc, #408]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075d0:	4b61      	ldr	r3, [pc, #388]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075de:	495e      	ldr	r1, [pc, #376]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075f2:	4b59      	ldr	r3, [pc, #356]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	4955      	ldr	r1, [pc, #340]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007602:	4313      	orrs	r3, r2
 8007604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007614:	4b50      	ldr	r3, [pc, #320]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800761a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	494d      	ldr	r1, [pc, #308]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007624:	4313      	orrs	r3, r2
 8007626:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007636:	4b48      	ldr	r3, [pc, #288]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007644:	4944      	ldr	r1, [pc, #272]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00a      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007658:	4b3f      	ldr	r3, [pc, #252]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800765a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007666:	493c      	ldr	r1, [pc, #240]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800767a:	4b37      	ldr	r3, [pc, #220]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007680:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007688:	4933      	ldr	r1, [pc, #204]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800768a:	4313      	orrs	r3, r2
 800768c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00a      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800769c:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800769e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076aa:	492b      	ldr	r1, [pc, #172]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80076be:	4b26      	ldr	r3, [pc, #152]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076cc:	4922      	ldr	r1, [pc, #136]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076dc:	d101      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0308 	and.w	r3, r3, #8
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80076ee:	2301      	movs	r3, #1
 80076f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076fe:	4b16      	ldr	r3, [pc, #88]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007704:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800770c:	4912      	ldr	r1, [pc, #72]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00b      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007720:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007726:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007730:	4909      	ldr	r1, [pc, #36]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d006      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 80d9 	beq.w	80078fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800774c:	4b02      	ldr	r3, [pc, #8]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a01      	ldr	r2, [pc, #4]	; (8007758 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007752:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007756:	e001      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007758:	40023800 	.word	0x40023800
 800775c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800775e:	f7fc ffe1 	bl	8004724 <HAL_GetTick>
 8007762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007764:	e008      	b.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007766:	f7fc ffdd 	bl	8004724 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b64      	cmp	r3, #100	; 0x64
 8007772:	d901      	bls.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e194      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007778:	4b6c      	ldr	r3, [pc, #432]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1f0      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0301 	and.w	r3, r3, #1
 800778c:	2b00      	cmp	r3, #0
 800778e:	d021      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007794:	2b00      	cmp	r3, #0
 8007796:	d11d      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007798:	4b64      	ldr	r3, [pc, #400]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800779a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800779e:	0c1b      	lsrs	r3, r3, #16
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077a6:	4b61      	ldr	r3, [pc, #388]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ac:	0e1b      	lsrs	r3, r3, #24
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	019a      	lsls	r2, r3, #6
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	431a      	orrs	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	061b      	lsls	r3, r3, #24
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	071b      	lsls	r3, r3, #28
 80077cc:	4957      	ldr	r1, [pc, #348]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d02e      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077fe:	d129      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007800:	4b4a      	ldr	r3, [pc, #296]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007806:	0c1b      	lsrs	r3, r3, #16
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800780e:	4b47      	ldr	r3, [pc, #284]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007814:	0f1b      	lsrs	r3, r3, #28
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	019a      	lsls	r2, r3, #6
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	041b      	lsls	r3, r3, #16
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	061b      	lsls	r3, r3, #24
 800782e:	431a      	orrs	r2, r3
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	071b      	lsls	r3, r3, #28
 8007834:	493d      	ldr	r1, [pc, #244]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007836:	4313      	orrs	r3, r2
 8007838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800783c:	4b3b      	ldr	r3, [pc, #236]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800783e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007842:	f023 021f 	bic.w	r2, r3, #31
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	3b01      	subs	r3, #1
 800784c:	4937      	ldr	r1, [pc, #220]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01d      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007860:	4b32      	ldr	r3, [pc, #200]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007862:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007866:	0e1b      	lsrs	r3, r3, #24
 8007868:	f003 030f 	and.w	r3, r3, #15
 800786c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800786e:	4b2f      	ldr	r3, [pc, #188]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007874:	0f1b      	lsrs	r3, r3, #28
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	019a      	lsls	r2, r3, #6
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	431a      	orrs	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	061b      	lsls	r3, r3, #24
 800788e:	431a      	orrs	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	071b      	lsls	r3, r3, #28
 8007894:	4925      	ldr	r1, [pc, #148]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d011      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	019a      	lsls	r2, r3, #6
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	041b      	lsls	r3, r3, #16
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	061b      	lsls	r3, r3, #24
 80078bc:	431a      	orrs	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	071b      	lsls	r3, r3, #28
 80078c4:	4919      	ldr	r1, [pc, #100]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c6:	4313      	orrs	r3, r2
 80078c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80078cc:	4b17      	ldr	r3, [pc, #92]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a16      	ldr	r2, [pc, #88]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d8:	f7fc ff24 	bl	8004724 <HAL_GetTick>
 80078dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078e0:	f7fc ff20 	bl	8004724 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b64      	cmp	r3, #100	; 0x64
 80078ec:	d901      	bls.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e0d7      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80078f2:	4b0e      	ldr	r3, [pc, #56]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0f0      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b01      	cmp	r3, #1
 8007902:	f040 80cd 	bne.w	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007906:	4b09      	ldr	r3, [pc, #36]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a08      	ldr	r2, [pc, #32]	; (800792c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800790c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007912:	f7fc ff07 	bl	8004724 <HAL_GetTick>
 8007916:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007918:	e00a      	b.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800791a:	f7fc ff03 	bl	8004724 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b64      	cmp	r3, #100	; 0x64
 8007926:	d903      	bls.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e0ba      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800792c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007930:	4b5e      	ldr	r3, [pc, #376]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800793c:	d0ed      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d003      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d009      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800795a:	2b00      	cmp	r3, #0
 800795c:	d02e      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d12a      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007966:	4b51      	ldr	r3, [pc, #324]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796c:	0c1b      	lsrs	r3, r3, #16
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007974:	4b4d      	ldr	r3, [pc, #308]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797a:	0f1b      	lsrs	r3, r3, #28
 800797c:	f003 0307 	and.w	r3, r3, #7
 8007980:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	019a      	lsls	r2, r3, #6
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	061b      	lsls	r3, r3, #24
 8007994:	431a      	orrs	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	071b      	lsls	r3, r3, #28
 800799a:	4944      	ldr	r1, [pc, #272]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800799c:	4313      	orrs	r3, r2
 800799e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079a2:	4b42      	ldr	r3, [pc, #264]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b0:	3b01      	subs	r3, #1
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	493d      	ldr	r1, [pc, #244]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d022      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079d0:	d11d      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079d2:	4b36      	ldr	r3, [pc, #216]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	0e1b      	lsrs	r3, r3, #24
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079e0:	4b32      	ldr	r3, [pc, #200]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e6:	0f1b      	lsrs	r3, r3, #28
 80079e8:	f003 0307 	and.w	r3, r3, #7
 80079ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	019a      	lsls	r2, r3, #6
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	041b      	lsls	r3, r3, #16
 80079fa:	431a      	orrs	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	061b      	lsls	r3, r3, #24
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	071b      	lsls	r3, r3, #28
 8007a06:	4929      	ldr	r1, [pc, #164]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d028      	beq.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a1a:	4b24      	ldr	r3, [pc, #144]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a28:	4b20      	ldr	r3, [pc, #128]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	f003 0303 	and.w	r3, r3, #3
 8007a34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	019a      	lsls	r2, r3, #6
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	431a      	orrs	r2, r3
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	061b      	lsls	r3, r3, #24
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	69db      	ldr	r3, [r3, #28]
 8007a4c:	071b      	lsls	r3, r3, #28
 8007a4e:	4917      	ldr	r1, [pc, #92]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a50:	4313      	orrs	r3, r2
 8007a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a56:	4b15      	ldr	r3, [pc, #84]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	4911      	ldr	r1, [pc, #68]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a66:	4313      	orrs	r3, r2
 8007a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a6c:	4b0f      	ldr	r3, [pc, #60]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0e      	ldr	r2, [pc, #56]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a78:	f7fc fe54 	bl	8004724 <HAL_GetTick>
 8007a7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a80:	f7fc fe50 	bl	8004724 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b64      	cmp	r3, #100	; 0x64
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e007      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a92:	4b06      	ldr	r3, [pc, #24]	; (8007aac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a9e:	d1ef      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40023800 	.word	0x40023800

08007ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e049      	b.n	8007b56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d106      	bne.n	8007adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f841 	bl	8007b5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f000 f9e8 	bl	8007ec4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b083      	sub	sp, #12
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
	...

08007b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d001      	beq.n	8007b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e054      	b.n	8007c36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2202      	movs	r2, #2
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f042 0201 	orr.w	r2, r2, #1
 8007ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a26      	ldr	r2, [pc, #152]	; (8007c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d022      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb6:	d01d      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	; (8007c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d018      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a21      	ldr	r2, [pc, #132]	; (8007c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d013      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00e      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <HAL_TIM_Base_Start_IT+0xe0>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d009      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1c      	ldr	r2, [pc, #112]	; (8007c58 <HAL_TIM_Base_Start_IT+0xe4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIM_Base_Start_IT+0x80>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1b      	ldr	r2, [pc, #108]	; (8007c5c <HAL_TIM_Base_Start_IT+0xe8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d115      	bne.n	8007c20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	4b19      	ldr	r3, [pc, #100]	; (8007c60 <HAL_TIM_Base_Start_IT+0xec>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b06      	cmp	r3, #6
 8007c04:	d015      	beq.n	8007c32 <HAL_TIM_Base_Start_IT+0xbe>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d011      	beq.n	8007c32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f042 0201 	orr.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1e:	e008      	b.n	8007c32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e000      	b.n	8007c34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40001800 	.word	0x40001800
 8007c60:	00010007 	.word	0x00010007

08007c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d020      	beq.n	8007cc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f003 0302 	and.w	r3, r3, #2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01b      	beq.n	8007cc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0202 	mvn.w	r2, #2
 8007c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	f003 0303 	and.w	r3, r3, #3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8e9 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007cb4:	e005      	b.n	8007cc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f8db 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f8ec 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f003 0304 	and.w	r3, r3, #4
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d020      	beq.n	8007d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01b      	beq.n	8007d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0204 	mvn.w	r2, #4
 8007ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8c3 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007d00:	e005      	b.n	8007d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f8b5 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8c6 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f003 0308 	and.w	r3, r3, #8
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d020      	beq.n	8007d60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 0308 	and.w	r3, r3, #8
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01b      	beq.n	8007d60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f06f 0208 	mvn.w	r2, #8
 8007d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f89d 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007d4c:	e005      	b.n	8007d5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f88f 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f8a0 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0310 	and.w	r3, r3, #16
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d020      	beq.n	8007dac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0310 	and.w	r3, r3, #16
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d01b      	beq.n	8007dac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0210 	mvn.w	r2, #16
 8007d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2208      	movs	r2, #8
 8007d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f877 	bl	8007e86 <HAL_TIM_IC_CaptureCallback>
 8007d98:	e005      	b.n	8007da6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 f869 	bl	8007e72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f87a 	bl	8007e9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d00c      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d007      	beq.n	8007dd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0201 	mvn.w	r2, #1
 8007dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7fb fe60 	bl	8003a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d104      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00c      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f919 	bl	8008030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00c      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f911 	bl	8008044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00c      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d007      	beq.n	8007e46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f834 	bl	8007eae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00c      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d007      	beq.n	8007e6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f06f 0220 	mvn.w	r2, #32
 8007e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 f8d9 	bl	800801c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b083      	sub	sp, #12
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b083      	sub	sp, #12
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a46      	ldr	r2, [pc, #280]	; (8007ff0 <TIM_Base_SetConfig+0x12c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ee2:	d00f      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a43      	ldr	r2, [pc, #268]	; (8007ff4 <TIM_Base_SetConfig+0x130>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a42      	ldr	r2, [pc, #264]	; (8007ff8 <TIM_Base_SetConfig+0x134>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a41      	ldr	r2, [pc, #260]	; (8007ffc <TIM_Base_SetConfig+0x138>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_Base_SetConfig+0x40>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a40      	ldr	r2, [pc, #256]	; (8008000 <TIM_Base_SetConfig+0x13c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d108      	bne.n	8007f16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a35      	ldr	r2, [pc, #212]	; (8007ff0 <TIM_Base_SetConfig+0x12c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d02b      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f24:	d027      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a32      	ldr	r2, [pc, #200]	; (8007ff4 <TIM_Base_SetConfig+0x130>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d023      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a31      	ldr	r2, [pc, #196]	; (8007ff8 <TIM_Base_SetConfig+0x134>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d01f      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a30      	ldr	r2, [pc, #192]	; (8007ffc <TIM_Base_SetConfig+0x138>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d01b      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a2f      	ldr	r2, [pc, #188]	; (8008000 <TIM_Base_SetConfig+0x13c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d017      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a2e      	ldr	r2, [pc, #184]	; (8008004 <TIM_Base_SetConfig+0x140>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a2d      	ldr	r2, [pc, #180]	; (8008008 <TIM_Base_SetConfig+0x144>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00f      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a2c      	ldr	r2, [pc, #176]	; (800800c <TIM_Base_SetConfig+0x148>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00b      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a2b      	ldr	r2, [pc, #172]	; (8008010 <TIM_Base_SetConfig+0x14c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <TIM_Base_SetConfig+0x150>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d003      	beq.n	8007f76 <TIM_Base_SetConfig+0xb2>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a29      	ldr	r2, [pc, #164]	; (8008018 <TIM_Base_SetConfig+0x154>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d108      	bne.n	8007f88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a10      	ldr	r2, [pc, #64]	; (8007ff0 <TIM_Base_SetConfig+0x12c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d003      	beq.n	8007fbc <TIM_Base_SetConfig+0xf8>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a12      	ldr	r2, [pc, #72]	; (8008000 <TIM_Base_SetConfig+0x13c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d103      	bne.n	8007fc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d105      	bne.n	8007fe2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	f023 0201 	bic.w	r2, r3, #1
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	611a      	str	r2, [r3, #16]
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	3714      	adds	r7, #20
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40010000 	.word	0x40010000
 8007ff4:	40000400 	.word	0x40000400
 8007ff8:	40000800 	.word	0x40000800
 8007ffc:	40000c00 	.word	0x40000c00
 8008000:	40010400 	.word	0x40010400
 8008004:	40014000 	.word	0x40014000
 8008008:	40014400 	.word	0x40014400
 800800c:	40014800 	.word	0x40014800
 8008010:	40001800 	.word	0x40001800
 8008014:	40001c00 	.word	0x40001c00
 8008018:	40002000 	.word	0x40002000

0800801c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800805e:	4b98      	ldr	r3, [pc, #608]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008060:	22c0      	movs	r2, #192	; 0xc0
 8008062:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008064:	4b96      	ldr	r3, [pc, #600]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008066:	22a8      	movs	r2, #168	; 0xa8
 8008068:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800806a:	4b95      	ldr	r3, [pc, #596]	; (80082c0 <MX_LWIP_Init+0x268>)
 800806c:	2200      	movs	r2, #0
 800806e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8008070:	4b93      	ldr	r3, [pc, #588]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008072:	227b      	movs	r2, #123	; 0x7b
 8008074:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008076:	4b93      	ldr	r3, [pc, #588]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008078:	22ff      	movs	r2, #255	; 0xff
 800807a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800807c:	4b91      	ldr	r3, [pc, #580]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800807e:	22ff      	movs	r2, #255	; 0xff
 8008080:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008082:	4b90      	ldr	r3, [pc, #576]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008088:	4b8e      	ldr	r3, [pc, #568]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800808a:	2200      	movs	r2, #0
 800808c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800808e:	4b8e      	ldr	r3, [pc, #568]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008090:	22c0      	movs	r2, #192	; 0xc0
 8008092:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008094:	4b8c      	ldr	r3, [pc, #560]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008096:	22a8      	movs	r2, #168	; 0xa8
 8008098:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800809a:	4b8b      	ldr	r3, [pc, #556]	; (80082c8 <MX_LWIP_Init+0x270>)
 800809c:	2200      	movs	r2, #0
 800809e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80080a0:	4b89      	ldr	r3, [pc, #548]	; (80082c8 <MX_LWIP_Init+0x270>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80080a6:	2100      	movs	r1, #0
 80080a8:	2000      	movs	r0, #0
 80080aa:	f006 ff7b 	bl	800efa4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80080ae:	4b84      	ldr	r3, [pc, #528]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	061a      	lsls	r2, r3, #24
 80080b4:	4b82      	ldr	r3, [pc, #520]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	431a      	orrs	r2, r3
 80080bc:	4b80      	ldr	r3, [pc, #512]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080be:	789b      	ldrb	r3, [r3, #2]
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	4313      	orrs	r3, r2
 80080c4:	4a7e      	ldr	r2, [pc, #504]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080c6:	78d2      	ldrb	r2, [r2, #3]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	061a      	lsls	r2, r3, #24
 80080cc:	4b7c      	ldr	r3, [pc, #496]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	0619      	lsls	r1, r3, #24
 80080d2:	4b7b      	ldr	r3, [pc, #492]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080d4:	785b      	ldrb	r3, [r3, #1]
 80080d6:	041b      	lsls	r3, r3, #16
 80080d8:	4319      	orrs	r1, r3
 80080da:	4b79      	ldr	r3, [pc, #484]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080dc:	789b      	ldrb	r3, [r3, #2]
 80080de:	021b      	lsls	r3, r3, #8
 80080e0:	430b      	orrs	r3, r1
 80080e2:	4977      	ldr	r1, [pc, #476]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080e4:	78c9      	ldrb	r1, [r1, #3]
 80080e6:	430b      	orrs	r3, r1
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080ee:	431a      	orrs	r2, r3
 80080f0:	4b73      	ldr	r3, [pc, #460]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	0619      	lsls	r1, r3, #24
 80080f6:	4b72      	ldr	r3, [pc, #456]	; (80082c0 <MX_LWIP_Init+0x268>)
 80080f8:	785b      	ldrb	r3, [r3, #1]
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	4319      	orrs	r1, r3
 80080fe:	4b70      	ldr	r3, [pc, #448]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008100:	789b      	ldrb	r3, [r3, #2]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	430b      	orrs	r3, r1
 8008106:	496e      	ldr	r1, [pc, #440]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008108:	78c9      	ldrb	r1, [r1, #3]
 800810a:	430b      	orrs	r3, r1
 800810c:	0a1b      	lsrs	r3, r3, #8
 800810e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008112:	431a      	orrs	r2, r3
 8008114:	4b6a      	ldr	r3, [pc, #424]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	0619      	lsls	r1, r3, #24
 800811a:	4b69      	ldr	r3, [pc, #420]	; (80082c0 <MX_LWIP_Init+0x268>)
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	041b      	lsls	r3, r3, #16
 8008120:	4319      	orrs	r1, r3
 8008122:	4b67      	ldr	r3, [pc, #412]	; (80082c0 <MX_LWIP_Init+0x268>)
 8008124:	789b      	ldrb	r3, [r3, #2]
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	430b      	orrs	r3, r1
 800812a:	4965      	ldr	r1, [pc, #404]	; (80082c0 <MX_LWIP_Init+0x268>)
 800812c:	78c9      	ldrb	r1, [r1, #3]
 800812e:	430b      	orrs	r3, r1
 8008130:	0e1b      	lsrs	r3, r3, #24
 8008132:	4313      	orrs	r3, r2
 8008134:	4a65      	ldr	r2, [pc, #404]	; (80082cc <MX_LWIP_Init+0x274>)
 8008136:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008138:	4b62      	ldr	r3, [pc, #392]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	061a      	lsls	r2, r3, #24
 800813e:	4b61      	ldr	r3, [pc, #388]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008140:	785b      	ldrb	r3, [r3, #1]
 8008142:	041b      	lsls	r3, r3, #16
 8008144:	431a      	orrs	r2, r3
 8008146:	4b5f      	ldr	r3, [pc, #380]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008148:	789b      	ldrb	r3, [r3, #2]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	4313      	orrs	r3, r2
 800814e:	4a5d      	ldr	r2, [pc, #372]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008150:	78d2      	ldrb	r2, [r2, #3]
 8008152:	4313      	orrs	r3, r2
 8008154:	061a      	lsls	r2, r3, #24
 8008156:	4b5b      	ldr	r3, [pc, #364]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	0619      	lsls	r1, r3, #24
 800815c:	4b59      	ldr	r3, [pc, #356]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	041b      	lsls	r3, r3, #16
 8008162:	4319      	orrs	r1, r3
 8008164:	4b57      	ldr	r3, [pc, #348]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008166:	789b      	ldrb	r3, [r3, #2]
 8008168:	021b      	lsls	r3, r3, #8
 800816a:	430b      	orrs	r3, r1
 800816c:	4955      	ldr	r1, [pc, #340]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800816e:	78c9      	ldrb	r1, [r1, #3]
 8008170:	430b      	orrs	r3, r1
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008178:	431a      	orrs	r2, r3
 800817a:	4b52      	ldr	r3, [pc, #328]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	0619      	lsls	r1, r3, #24
 8008180:	4b50      	ldr	r3, [pc, #320]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	041b      	lsls	r3, r3, #16
 8008186:	4319      	orrs	r1, r3
 8008188:	4b4e      	ldr	r3, [pc, #312]	; (80082c4 <MX_LWIP_Init+0x26c>)
 800818a:	789b      	ldrb	r3, [r3, #2]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	430b      	orrs	r3, r1
 8008190:	494c      	ldr	r1, [pc, #304]	; (80082c4 <MX_LWIP_Init+0x26c>)
 8008192:	78c9      	ldrb	r1, [r1, #3]
 8008194:	430b      	orrs	r3, r1
 8008196:	0a1b      	lsrs	r3, r3, #8
 8008198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800819c:	431a      	orrs	r2, r3
 800819e:	4b49      	ldr	r3, [pc, #292]	; (80082c4 <MX_LWIP_Init+0x26c>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	0619      	lsls	r1, r3, #24
 80081a4:	4b47      	ldr	r3, [pc, #284]	; (80082c4 <MX_LWIP_Init+0x26c>)
 80081a6:	785b      	ldrb	r3, [r3, #1]
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	4319      	orrs	r1, r3
 80081ac:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <MX_LWIP_Init+0x26c>)
 80081ae:	789b      	ldrb	r3, [r3, #2]
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	430b      	orrs	r3, r1
 80081b4:	4943      	ldr	r1, [pc, #268]	; (80082c4 <MX_LWIP_Init+0x26c>)
 80081b6:	78c9      	ldrb	r1, [r1, #3]
 80081b8:	430b      	orrs	r3, r1
 80081ba:	0e1b      	lsrs	r3, r3, #24
 80081bc:	4313      	orrs	r3, r2
 80081be:	4a44      	ldr	r2, [pc, #272]	; (80082d0 <MX_LWIP_Init+0x278>)
 80081c0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80081c2:	4b41      	ldr	r3, [pc, #260]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	061a      	lsls	r2, r3, #24
 80081c8:	4b3f      	ldr	r3, [pc, #252]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081ca:	785b      	ldrb	r3, [r3, #1]
 80081cc:	041b      	lsls	r3, r3, #16
 80081ce:	431a      	orrs	r2, r3
 80081d0:	4b3d      	ldr	r3, [pc, #244]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081d2:	789b      	ldrb	r3, [r3, #2]
 80081d4:	021b      	lsls	r3, r3, #8
 80081d6:	4313      	orrs	r3, r2
 80081d8:	4a3b      	ldr	r2, [pc, #236]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081da:	78d2      	ldrb	r2, [r2, #3]
 80081dc:	4313      	orrs	r3, r2
 80081de:	061a      	lsls	r2, r3, #24
 80081e0:	4b39      	ldr	r3, [pc, #228]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	0619      	lsls	r1, r3, #24
 80081e6:	4b38      	ldr	r3, [pc, #224]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081e8:	785b      	ldrb	r3, [r3, #1]
 80081ea:	041b      	lsls	r3, r3, #16
 80081ec:	4319      	orrs	r1, r3
 80081ee:	4b36      	ldr	r3, [pc, #216]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081f0:	789b      	ldrb	r3, [r3, #2]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	430b      	orrs	r3, r1
 80081f6:	4934      	ldr	r1, [pc, #208]	; (80082c8 <MX_LWIP_Init+0x270>)
 80081f8:	78c9      	ldrb	r1, [r1, #3]
 80081fa:	430b      	orrs	r3, r1
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008202:	431a      	orrs	r2, r3
 8008204:	4b30      	ldr	r3, [pc, #192]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	0619      	lsls	r1, r3, #24
 800820a:	4b2f      	ldr	r3, [pc, #188]	; (80082c8 <MX_LWIP_Init+0x270>)
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	041b      	lsls	r3, r3, #16
 8008210:	4319      	orrs	r1, r3
 8008212:	4b2d      	ldr	r3, [pc, #180]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008214:	789b      	ldrb	r3, [r3, #2]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	430b      	orrs	r3, r1
 800821a:	492b      	ldr	r1, [pc, #172]	; (80082c8 <MX_LWIP_Init+0x270>)
 800821c:	78c9      	ldrb	r1, [r1, #3]
 800821e:	430b      	orrs	r3, r1
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008226:	431a      	orrs	r2, r3
 8008228:	4b27      	ldr	r3, [pc, #156]	; (80082c8 <MX_LWIP_Init+0x270>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	0619      	lsls	r1, r3, #24
 800822e:	4b26      	ldr	r3, [pc, #152]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008230:	785b      	ldrb	r3, [r3, #1]
 8008232:	041b      	lsls	r3, r3, #16
 8008234:	4319      	orrs	r1, r3
 8008236:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008238:	789b      	ldrb	r3, [r3, #2]
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	430b      	orrs	r3, r1
 800823e:	4922      	ldr	r1, [pc, #136]	; (80082c8 <MX_LWIP_Init+0x270>)
 8008240:	78c9      	ldrb	r1, [r1, #3]
 8008242:	430b      	orrs	r3, r1
 8008244:	0e1b      	lsrs	r3, r3, #24
 8008246:	4313      	orrs	r3, r2
 8008248:	4a22      	ldr	r2, [pc, #136]	; (80082d4 <MX_LWIP_Init+0x27c>)
 800824a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800824c:	4b22      	ldr	r3, [pc, #136]	; (80082d8 <MX_LWIP_Init+0x280>)
 800824e:	9302      	str	r3, [sp, #8]
 8008250:	4b22      	ldr	r3, [pc, #136]	; (80082dc <MX_LWIP_Init+0x284>)
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	2300      	movs	r3, #0
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4b1e      	ldr	r3, [pc, #120]	; (80082d4 <MX_LWIP_Init+0x27c>)
 800825a:	4a1d      	ldr	r2, [pc, #116]	; (80082d0 <MX_LWIP_Init+0x278>)
 800825c:	491b      	ldr	r1, [pc, #108]	; (80082cc <MX_LWIP_Init+0x274>)
 800825e:	4820      	ldr	r0, [pc, #128]	; (80082e0 <MX_LWIP_Init+0x288>)
 8008260:	f007 fc6a 	bl	800fb38 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008264:	481e      	ldr	r0, [pc, #120]	; (80082e0 <MX_LWIP_Init+0x288>)
 8008266:	f007 fe19 	bl	800fe9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800826a:	4b1d      	ldr	r3, [pc, #116]	; (80082e0 <MX_LWIP_Init+0x288>)
 800826c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008270:	089b      	lsrs	r3, r3, #2
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d003      	beq.n	8008284 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800827c:	4818      	ldr	r0, [pc, #96]	; (80082e0 <MX_LWIP_Init+0x288>)
 800827e:	f007 fe1d 	bl	800febc <netif_set_up>
 8008282:	e002      	b.n	800828a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008284:	4816      	ldr	r0, [pc, #88]	; (80082e0 <MX_LWIP_Init+0x288>)
 8008286:	f007 fe85 	bl	800ff94 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800828a:	4916      	ldr	r1, [pc, #88]	; (80082e4 <MX_LWIP_Init+0x28c>)
 800828c:	4814      	ldr	r0, [pc, #80]	; (80082e0 <MX_LWIP_Init+0x288>)
 800828e:	f007 ff17 	bl	80100c0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8008292:	2224      	movs	r2, #36	; 0x24
 8008294:	2100      	movs	r1, #0
 8008296:	4814      	ldr	r0, [pc, #80]	; (80082e8 <MX_LWIP_Init+0x290>)
 8008298:	f011 ffcf 	bl	801a23a <memset>
  attributes.name = "EthLink";
 800829c:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <MX_LWIP_Init+0x290>)
 800829e:	4a13      	ldr	r2, [pc, #76]	; (80082ec <MX_LWIP_Init+0x294>)
 80082a0:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80082a2:	4b11      	ldr	r3, [pc, #68]	; (80082e8 <MX_LWIP_Init+0x290>)
 80082a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082a8:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80082aa:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <MX_LWIP_Init+0x290>)
 80082ac:	2210      	movs	r2, #16
 80082ae:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80082b0:	4a0d      	ldr	r2, [pc, #52]	; (80082e8 <MX_LWIP_Init+0x290>)
 80082b2:	490b      	ldr	r1, [pc, #44]	; (80082e0 <MX_LWIP_Init+0x288>)
 80082b4:	480e      	ldr	r0, [pc, #56]	; (80082f0 <MX_LWIP_Init+0x298>)
 80082b6:	f000 fd85 	bl	8008dc4 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80082ba:	bf00      	nop
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20041bd8 	.word	0x20041bd8
 80082c4:	20041bdc 	.word	0x20041bdc
 80082c8:	20041be0 	.word	0x20041be0
 80082cc:	20041bcc 	.word	0x20041bcc
 80082d0:	20041bd0 	.word	0x20041bd0
 80082d4:	20041bd4 	.word	0x20041bd4
 80082d8:	0800eeb5 	.word	0x0800eeb5
 80082dc:	080087f1 	.word	0x080087f1
 80082e0:	20041b98 	.word	0x20041b98
 80082e4:	080082f5 	.word	0x080082f5
 80082e8:	20041be4 	.word	0x20041be4
 80082ec:	0801b22c 	.word	0x0801b22c
 80082f0:	08008a7d 	.word	0x08008a7d

080082f4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800831a:	2320      	movs	r3, #32
 800831c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800831e:	f3bf 8f4f 	dsb	sy
}
 8008322:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8008324:	e00b      	b.n	800833e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8008326:	4a0d      	ldr	r2, [pc, #52]	; (800835c <SCB_InvalidateDCache_by_Addr+0x54>)
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4413      	add	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	1ad3      	subs	r3, r2, r3
 800833c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dcf0      	bgt.n	8008326 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8008344:	f3bf 8f4f 	dsb	sy
}
 8008348:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800834a:	f3bf 8f6f 	isb	sy
}
 800834e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8008350:	bf00      	nop
 8008352:	371c      	adds	r7, #28
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr
 800835c:	e000ed00 	.word	0xe000ed00

08008360 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <HAL_ETH_RxCpltCallback+0x1c>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f001 f847 	bl	8009400 <osSemaphoreRelease>
}
 8008372:	bf00      	nop
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20046594 	.word	0x20046594

08008380 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008388:	4b04      	ldr	r3, [pc, #16]	; (800839c <HAL_ETH_TxCpltCallback+0x1c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4618      	mov	r0, r3
 800838e:	f001 f837 	bl	8009400 <osSemaphoreRelease>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20046598 	.word	0x20046598

080083a0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7fd f909 	bl	80055c0 <HAL_ETH_GetDMAError>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b4:	2b80      	cmp	r3, #128	; 0x80
 80083b6:	d104      	bne.n	80083c2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80083b8:	4b04      	ldr	r3, [pc, #16]	; (80083cc <HAL_ETH_ErrorCallback+0x2c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 f81f 	bl	8009400 <osSemaphoreRelease>
  }
}
 80083c2:	bf00      	nop
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20046594 	.word	0x20046594

080083d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b0aa      	sub	sp, #168	; 0xa8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80083ea:	f107 0310 	add.w	r3, r7, #16
 80083ee:	2264      	movs	r2, #100	; 0x64
 80083f0:	2100      	movs	r1, #0
 80083f2:	4618      	mov	r0, r3
 80083f4:	f011 ff21 	bl	801a23a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80083f8:	4b85      	ldr	r3, [pc, #532]	; (8008610 <low_level_init+0x240>)
 80083fa:	4a86      	ldr	r2, [pc, #536]	; (8008614 <low_level_init+0x244>)
 80083fc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80083fe:	2300      	movs	r3, #0
 8008400:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8008402:	2380      	movs	r3, #128	; 0x80
 8008404:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008406:	23e1      	movs	r3, #225	; 0xe1
 8008408:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800840a:	2300      	movs	r3, #0
 800840c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800840e:	2300      	movs	r3, #0
 8008410:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008412:	2300      	movs	r3, #0
 8008414:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008416:	4a7e      	ldr	r2, [pc, #504]	; (8008610 <low_level_init+0x240>)
 8008418:	f107 0308 	add.w	r3, r7, #8
 800841c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800841e:	4b7c      	ldr	r3, [pc, #496]	; (8008610 <low_level_init+0x240>)
 8008420:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008424:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008426:	4b7a      	ldr	r3, [pc, #488]	; (8008610 <low_level_init+0x240>)
 8008428:	4a7b      	ldr	r2, [pc, #492]	; (8008618 <low_level_init+0x248>)
 800842a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800842c:	4b78      	ldr	r3, [pc, #480]	; (8008610 <low_level_init+0x240>)
 800842e:	4a7b      	ldr	r2, [pc, #492]	; (800861c <low_level_init+0x24c>)
 8008430:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008432:	4b77      	ldr	r3, [pc, #476]	; (8008610 <low_level_init+0x240>)
 8008434:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008438:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800843a:	4875      	ldr	r0, [pc, #468]	; (8008610 <low_level_init+0x240>)
 800843c:	f7fc fa84 	bl	8004948 <HAL_ETH_Init>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008446:	2238      	movs	r2, #56	; 0x38
 8008448:	2100      	movs	r1, #0
 800844a:	4875      	ldr	r0, [pc, #468]	; (8008620 <low_level_init+0x250>)
 800844c:	f011 fef5 	bl	801a23a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008450:	4b73      	ldr	r3, [pc, #460]	; (8008620 <low_level_init+0x250>)
 8008452:	2221      	movs	r2, #33	; 0x21
 8008454:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008456:	4b72      	ldr	r3, [pc, #456]	; (8008620 <low_level_init+0x250>)
 8008458:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800845c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800845e:	4b70      	ldr	r3, [pc, #448]	; (8008620 <low_level_init+0x250>)
 8008460:	2200      	movs	r2, #0
 8008462:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008464:	486f      	ldr	r0, [pc, #444]	; (8008624 <low_level_init+0x254>)
 8008466:	f007 fa21 	bl	800f8ac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2206      	movs	r2, #6
 800846e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008472:	4b67      	ldr	r3, [pc, #412]	; (8008610 <low_level_init+0x240>)
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	781a      	ldrb	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800847e:	4b64      	ldr	r3, [pc, #400]	; (8008610 <low_level_init+0x240>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	785a      	ldrb	r2, [r3, #1]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800848a:	4b61      	ldr	r3, [pc, #388]	; (8008610 <low_level_init+0x240>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	789a      	ldrb	r2, [r3, #2]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008496:	4b5e      	ldr	r3, [pc, #376]	; (8008610 <low_level_init+0x240>)
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	78da      	ldrb	r2, [r3, #3]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80084a2:	4b5b      	ldr	r3, [pc, #364]	; (8008610 <low_level_init+0x240>)
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	791a      	ldrb	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80084ae:	4b58      	ldr	r3, [pc, #352]	; (8008610 <low_level_init+0x240>)
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	795a      	ldrb	r2, [r3, #5]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80084c0:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084c8:	f043 030a 	orr.w	r3, r3, #10
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80084d4:	2200      	movs	r2, #0
 80084d6:	2101      	movs	r1, #1
 80084d8:	2001      	movs	r0, #1
 80084da:	f000 fe8f 	bl	80091fc <osSemaphoreNew>
 80084de:	4603      	mov	r3, r0
 80084e0:	4a51      	ldr	r2, [pc, #324]	; (8008628 <low_level_init+0x258>)
 80084e2:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80084e4:	2200      	movs	r2, #0
 80084e6:	2101      	movs	r1, #1
 80084e8:	2001      	movs	r0, #1
 80084ea:	f000 fe87 	bl	80091fc <osSemaphoreNew>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4a4e      	ldr	r2, [pc, #312]	; (800862c <low_level_init+0x25c>)
 80084f2:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80084f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80084f8:	2224      	movs	r2, #36	; 0x24
 80084fa:	2100      	movs	r1, #0
 80084fc:	4618      	mov	r0, r3
 80084fe:	f011 fe9c 	bl	801a23a <memset>
  attributes.name = "EthIf";
 8008502:	4b4b      	ldr	r3, [pc, #300]	; (8008630 <low_level_init+0x260>)
 8008504:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8008506:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800850a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800850e:	2330      	movs	r3, #48	; 0x30
 8008510:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008514:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008518:	461a      	mov	r2, r3
 800851a:	6879      	ldr	r1, [r7, #4]
 800851c:	4845      	ldr	r0, [pc, #276]	; (8008634 <low_level_init+0x264>)
 800851e:	f000 fc51 	bl	8008dc4 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8008522:	4945      	ldr	r1, [pc, #276]	; (8008638 <low_level_init+0x268>)
 8008524:	4845      	ldr	r0, [pc, #276]	; (800863c <low_level_init+0x26c>)
 8008526:	f7fb ffd6 	bl	80044d6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800852a:	4844      	ldr	r0, [pc, #272]	; (800863c <low_level_init+0x26c>)
 800852c:	f7fc f805 	bl	800453a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8008530:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8008534:	2b00      	cmp	r3, #0
 8008536:	d164      	bne.n	8008602 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008538:	4840      	ldr	r0, [pc, #256]	; (800863c <low_level_init+0x26c>)
 800853a:	f7fc f84b 	bl	80045d4 <LAN8742_GetLinkState>
 800853e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8008542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008546:	2b01      	cmp	r3, #1
 8008548:	dc06      	bgt.n	8008558 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f007 fd88 	bl	8010060 <netif_set_link_down>
      netif_set_down(netif);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f007 fd1f 	bl	800ff94 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008556:	e056      	b.n	8008606 <low_level_init+0x236>
      switch (PHYLinkState)
 8008558:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800855c:	3b02      	subs	r3, #2
 800855e:	2b03      	cmp	r3, #3
 8008560:	d82a      	bhi.n	80085b8 <low_level_init+0x1e8>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <low_level_init+0x198>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008579 	.word	0x08008579
 800856c:	0800858b 	.word	0x0800858b
 8008570:	0800859b 	.word	0x0800859b
 8008574:	080085ab 	.word	0x080085ab
        duplex = ETH_FULLDUPLEX_MODE;
 8008578:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800857c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008580:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008588:	e01f      	b.n	80085ca <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800858a:	2300      	movs	r3, #0
 800858c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008598:	e017      	b.n	80085ca <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800859a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800859e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80085a2:	2300      	movs	r3, #0
 80085a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80085a8:	e00f      	b.n	80085ca <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80085b0:	2300      	movs	r3, #0
 80085b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80085b6:	e008      	b.n	80085ca <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80085b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80085c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80085c8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80085ca:	f107 0310 	add.w	r3, r7, #16
 80085ce:	4619      	mov	r1, r3
 80085d0:	480f      	ldr	r0, [pc, #60]	; (8008610 <low_level_init+0x240>)
 80085d2:	f7fc fea1 	bl	8005318 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80085d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085da:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 80085dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80085e2:	f107 0310 	add.w	r3, r7, #16
 80085e6:	4619      	mov	r1, r3
 80085e8:	4809      	ldr	r0, [pc, #36]	; (8008610 <low_level_init+0x240>)
 80085ea:	f7fc ff8c 	bl	8005506 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80085ee:	4808      	ldr	r0, [pc, #32]	; (8008610 <low_level_init+0x240>)
 80085f0:	f7fc fa44 	bl	8004a7c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f007 fc61 	bl	800febc <netif_set_up>
    netif_set_link_up(netif);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f007 fcfc 	bl	800fff8 <netif_set_link_up>
}
 8008600:	e001      	b.n	8008606 <low_level_init+0x236>
    Error_Handler();
 8008602:	f7fb fa57 	bl	8003ab4 <Error_Handler>
}
 8008606:	bf00      	nop
 8008608:	37a8      	adds	r7, #168	; 0xa8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	2004659c 	.word	0x2004659c
 8008614:	40028000 	.word	0x40028000
 8008618:	20001b60 	.word	0x20001b60
 800861c:	20001ac0 	.word	0x20001ac0
 8008620:	2004664c 	.word	0x2004664c
 8008624:	0801e7b4 	.word	0x0801e7b4
 8008628:	20046594 	.word	0x20046594
 800862c:	20046598 	.word	0x20046598
 8008630:	0801b234 	.word	0x0801b234
 8008634:	0800879d 	.word	0x0800879d
 8008638:	20001a38 	.word	0x20001a38
 800863c:	20046684 	.word	0x20046684

08008640 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b092      	sub	sp, #72	; 0x48
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800864a:	2300      	movs	r3, #0
 800864c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008658:	f107 030c 	add.w	r3, r7, #12
 800865c:	2230      	movs	r2, #48	; 0x30
 800865e:	2100      	movs	r1, #0
 8008660:	4618      	mov	r0, r3
 8008662:	f011 fdea 	bl	801a23a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	2230      	movs	r2, #48	; 0x30
 800866c:	2100      	movs	r1, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f011 fde3 	bl	801a23a <memset>

  for(q = p; q != NULL; q = q->next)
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	643b      	str	r3, [r7, #64]	; 0x40
 8008678:	e045      	b.n	8008706 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800867a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867c:	2b03      	cmp	r3, #3
 800867e:	d902      	bls.n	8008686 <low_level_output+0x46>
      return ERR_IF;
 8008680:	f06f 030b 	mvn.w	r3, #11
 8008684:	e065      	b.n	8008752 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8008686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008688:	6859      	ldr	r1, [r3, #4]
 800868a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800868c:	4613      	mov	r3, r2
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	3348      	adds	r3, #72	; 0x48
 8008696:	443b      	add	r3, r7
 8008698:	3b3c      	subs	r3, #60	; 0x3c
 800869a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800869c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800869e:	895b      	ldrh	r3, [r3, #10]
 80086a0:	4619      	mov	r1, r3
 80086a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a4:	4613      	mov	r3, r2
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	3348      	adds	r3, #72	; 0x48
 80086ae:	443b      	add	r3, r7
 80086b0:	3b38      	subs	r3, #56	; 0x38
 80086b2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80086b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d011      	beq.n	80086de <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80086ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086bc:	1e5a      	subs	r2, r3, #1
 80086be:	f107 000c 	add.w	r0, r7, #12
 80086c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086c4:	460b      	mov	r3, r1
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	440b      	add	r3, r1
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	18c1      	adds	r1, r0, r3
 80086ce:	4613      	mov	r3, r2
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	3348      	adds	r3, #72	; 0x48
 80086d8:	443b      	add	r3, r7
 80086da:	3b34      	subs	r3, #52	; 0x34
 80086dc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80086de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d109      	bne.n	80086fa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80086e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086e8:	4613      	mov	r3, r2
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	4413      	add	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	3348      	adds	r3, #72	; 0x48
 80086f2:	443b      	add	r3, r7
 80086f4:	3b34      	subs	r3, #52	; 0x34
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80086fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086fc:	3301      	adds	r3, #1
 80086fe:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	643b      	str	r3, [r7, #64]	; 0x40
 8008706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1b6      	bne.n	800867a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	891b      	ldrh	r3, [r3, #8]
 8008710:	461a      	mov	r2, r3
 8008712:	4b12      	ldr	r3, [pc, #72]	; (800875c <low_level_output+0x11c>)
 8008714:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008716:	4a11      	ldr	r2, [pc, #68]	; (800875c <low_level_output+0x11c>)
 8008718:	f107 030c 	add.w	r3, r7, #12
 800871c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800871e:	4a0f      	ldr	r2, [pc, #60]	; (800875c <low_level_output+0x11c>)
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8008724:	6838      	ldr	r0, [r7, #0]
 8008726:	f008 f91f 	bl	8010968 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800872a:	490c      	ldr	r1, [pc, #48]	; (800875c <low_level_output+0x11c>)
 800872c:	480c      	ldr	r0, [pc, #48]	; (8008760 <low_level_output+0x120>)
 800872e:	f7fc fa95 	bl	8004c5c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8008732:	bf00      	nop
 8008734:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <low_level_output+0x124>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fdf9 	bl	8009334 <osSemaphoreAcquire>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f5      	bne.n	8008734 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008748:	4805      	ldr	r0, [pc, #20]	; (8008760 <low_level_output+0x120>)
 800874a:	f7fc fc27 	bl	8004f9c <HAL_ETH_ReleaseTxPacket>

  return errval;
 800874e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008752:	4618      	mov	r0, r3
 8008754:	3748      	adds	r7, #72	; 0x48
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	2004664c 	.word	0x2004664c
 8008760:	2004659c 	.word	0x2004659c
 8008764:	20046598 	.word	0x20046598

08008768 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008774:	4b07      	ldr	r3, [pc, #28]	; (8008794 <low_level_input+0x2c>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d105      	bne.n	8008788 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	4619      	mov	r1, r3
 8008782:	4805      	ldr	r0, [pc, #20]	; (8008798 <low_level_input+0x30>)
 8008784:	f7fc fac6 	bl	8004d14 <HAL_ETH_ReadData>
  }

  return p;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20046590 	.word	0x20046590
 8008798:	2004659c 	.word	0x2004659c

0800879c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80087ac:	4b0f      	ldr	r3, [pc, #60]	; (80087ec <ethernetif_input+0x50>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087b4:	4618      	mov	r0, r3
 80087b6:	f000 fdbd 	bl	8009334 <osSemaphoreAcquire>
 80087ba:	4603      	mov	r3, r0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f5      	bne.n	80087ac <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80087c0:	68b8      	ldr	r0, [r7, #8]
 80087c2:	f7ff ffd1 	bl	8008768 <low_level_input>
 80087c6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	68b9      	ldr	r1, [r7, #8]
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	4798      	blx	r3
 80087d8:	4603      	mov	r3, r0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f008 f81c 	bl	801081c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1ea      	bne.n	80087c0 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80087ea:	e7df      	b.n	80087ac <ethernetif_input+0x10>
 80087ec:	20046594 	.word	0x20046594

080087f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <ethernetif_init+0x1c>
 80087fe:	4b0e      	ldr	r3, [pc, #56]	; (8008838 <ethernetif_init+0x48>)
 8008800:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008804:	490d      	ldr	r1, [pc, #52]	; (800883c <ethernetif_init+0x4c>)
 8008806:	480e      	ldr	r0, [pc, #56]	; (8008840 <ethernetif_init+0x50>)
 8008808:	f011 fdb4 	bl	801a374 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2273      	movs	r2, #115	; 0x73
 8008810:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2274      	movs	r2, #116	; 0x74
 8008818:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a09      	ldr	r2, [pc, #36]	; (8008844 <ethernetif_init+0x54>)
 8008820:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a08      	ldr	r2, [pc, #32]	; (8008848 <ethernetif_init+0x58>)
 8008826:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff fdd1 	bl	80083d0 <low_level_init>

  return ERR_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	0801b23c 	.word	0x0801b23c
 800883c:	0801b258 	.word	0x0801b258
 8008840:	0801b268 	.word	0x0801b268
 8008844:	08017f65 	.word	0x08017f65
 8008848:	08008641 	.word	0x08008641

0800884c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008858:	68f9      	ldr	r1, [r7, #12]
 800885a:	4809      	ldr	r0, [pc, #36]	; (8008880 <pbuf_free_custom+0x34>)
 800885c:	f007 f916 	bl	800fa8c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008860:	4b08      	ldr	r3, [pc, #32]	; (8008884 <pbuf_free_custom+0x38>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d107      	bne.n	8008878 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008868:	4b06      	ldr	r3, [pc, #24]	; (8008884 <pbuf_free_custom+0x38>)
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800886e:	4b06      	ldr	r3, [pc, #24]	; (8008888 <pbuf_free_custom+0x3c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f000 fdc4 	bl	8009400 <osSemaphoreRelease>
  }
}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	0801e7b4 	.word	0x0801e7b4
 8008884:	20046590 	.word	0x20046590
 8008888:	20046594 	.word	0x20046594

0800888c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008890:	f7fb ff48 	bl	8004724 <HAL_GetTick>
 8008894:	4603      	mov	r3, r0
}
 8008896:	4618      	mov	r0, r3
 8008898:	bd80      	pop	{r7, pc}
	...

0800889c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08e      	sub	sp, #56	; 0x38
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	60da      	str	r2, [r3, #12]
 80088b2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a44      	ldr	r2, [pc, #272]	; (80089cc <HAL_ETH_MspInit+0x130>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	f040 8081 	bne.w	80089c2 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80088c0:	4b43      	ldr	r3, [pc, #268]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c4:	4a42      	ldr	r2, [pc, #264]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80088ca:	6313      	str	r3, [r2, #48]	; 0x30
 80088cc:	4b40      	ldr	r3, [pc, #256]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d4:	623b      	str	r3, [r7, #32]
 80088d6:	6a3b      	ldr	r3, [r7, #32]
 80088d8:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088dc:	4a3c      	ldr	r2, [pc, #240]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088e2:	6313      	str	r3, [r2, #48]	; 0x30
 80088e4:	4b3a      	ldr	r3, [pc, #232]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4b37      	ldr	r3, [pc, #220]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	4a36      	ldr	r2, [pc, #216]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088fa:	6313      	str	r3, [r2, #48]	; 0x30
 80088fc:	4b34      	ldr	r3, [pc, #208]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008904:	61bb      	str	r3, [r7, #24]
 8008906:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008908:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	4a30      	ldr	r2, [pc, #192]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 800890e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008912:	6313      	str	r3, [r2, #48]	; 0x30
 8008914:	4b2e      	ldr	r3, [pc, #184]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 8008916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008920:	4b2b      	ldr	r3, [pc, #172]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 8008922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008924:	4a2a      	ldr	r2, [pc, #168]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 8008926:	f043 0304 	orr.w	r3, r3, #4
 800892a:	6313      	str	r3, [r2, #48]	; 0x30
 800892c:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 800892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008938:	4b25      	ldr	r3, [pc, #148]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 800893a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893c:	4a24      	ldr	r2, [pc, #144]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 800893e:	f043 0301 	orr.w	r3, r3, #1
 8008942:	6313      	str	r3, [r2, #48]	; 0x30
 8008944:	4b22      	ldr	r3, [pc, #136]	; (80089d0 <HAL_ETH_MspInit+0x134>)
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8008950:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008956:	2302      	movs	r3, #2
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800895a:	2300      	movs	r3, #0
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800895e:	2303      	movs	r3, #3
 8008960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008962:	230b      	movs	r3, #11
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896a:	4619      	mov	r1, r3
 800896c:	4819      	ldr	r0, [pc, #100]	; (80089d4 <HAL_ETH_MspInit+0x138>)
 800896e:	f7fd fa53 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008972:	2332      	movs	r3, #50	; 0x32
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008976:	2302      	movs	r3, #2
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800897a:	2300      	movs	r3, #0
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800897e:	2303      	movs	r3, #3
 8008980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008982:	230b      	movs	r3, #11
 8008984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800898a:	4619      	mov	r1, r3
 800898c:	4812      	ldr	r0, [pc, #72]	; (80089d8 <HAL_ETH_MspInit+0x13c>)
 800898e:	f7fd fa43 	bl	8005e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008992:	2386      	movs	r3, #134	; 0x86
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008996:	2302      	movs	r3, #2
 8008998:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800899a:	2300      	movs	r3, #0
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800899e:	2303      	movs	r3, #3
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089a2:	230b      	movs	r3, #11
 80089a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089aa:	4619      	mov	r1, r3
 80089ac:	480b      	ldr	r0, [pc, #44]	; (80089dc <HAL_ETH_MspInit+0x140>)
 80089ae:	f7fd fa33 	bl	8005e18 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2105      	movs	r1, #5
 80089b6:	203d      	movs	r0, #61	; 0x3d
 80089b8:	f7fb ff9c 	bl	80048f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80089bc:	203d      	movs	r0, #61	; 0x3d
 80089be:	f7fb ffb5 	bl	800492c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80089c2:	bf00      	nop
 80089c4:	3738      	adds	r7, #56	; 0x38
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40028000 	.word	0x40028000
 80089d0:	40023800 	.word	0x40023800
 80089d4:	40021800 	.word	0x40021800
 80089d8:	40020800 	.word	0x40020800
 80089dc:	40020000 	.word	0x40020000

080089e0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80089e4:	4802      	ldr	r0, [pc, #8]	; (80089f0 <ETH_PHY_IO_Init+0x10>)
 80089e6:	f7fc fda9 	bl	800553c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	2004659c 	.word	0x2004659c

080089f4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
  return 0;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	68f9      	ldr	r1, [r7, #12]
 8008a16:	4807      	ldr	r0, [pc, #28]	; (8008a34 <ETH_PHY_IO_ReadReg+0x30>)
 8008a18:	f7fc fbea 	bl	80051f0 <HAL_ETH_ReadPHYRegister>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a26:	e000      	b.n	8008a2a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	2004659c 	.word	0x2004659c

08008a38 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	68f9      	ldr	r1, [r7, #12]
 8008a4a:	4807      	ldr	r0, [pc, #28]	; (8008a68 <ETH_PHY_IO_WriteReg+0x30>)
 8008a4c:	f7fc fc1b 	bl	8005286 <HAL_ETH_WritePHYRegister>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a5a:	e000      	b.n	8008a5e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2004659c 	.word	0x2004659c

08008a6c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008a70:	f7fb fe58 	bl	8004724 <HAL_GetTick>
 8008a74:	4603      	mov	r3, r0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b0a0      	sub	sp, #128	; 0x80
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008a84:	f107 0308 	add.w	r3, r7, #8
 8008a88:	2264      	movs	r2, #100	; 0x64
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f011 fbd4 	bl	801a23a <memset>
  int32_t PHYLinkState = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008a96:	2300      	movs	r3, #0
 8008a98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008aa6:	483a      	ldr	r0, [pc, #232]	; (8008b90 <ethernet_link_thread+0x114>)
 8008aa8:	f7fb fd94 	bl	80045d4 <LAN8742_GetLinkState>
 8008aac:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8008aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ab4:	089b      	lsrs	r3, r3, #2
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00c      	beq.n	8008ada <ethernet_link_thread+0x5e>
 8008ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	dc09      	bgt.n	8008ada <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008ac6:	4833      	ldr	r0, [pc, #204]	; (8008b94 <ethernet_link_thread+0x118>)
 8008ac8:	f7fc f848 	bl	8004b5c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008acc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ace:	f007 fa61 	bl	800ff94 <netif_set_down>
    netif_set_link_down(netif);
 8008ad2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008ad4:	f007 fac4 	bl	8010060 <netif_set_link_down>
 8008ad8:	e055      	b.n	8008b86 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008adc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ae0:	f003 0304 	and.w	r3, r3, #4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d14e      	bne.n	8008b86 <ethernet_link_thread+0x10a>
 8008ae8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	dd4b      	ble.n	8008b86 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8008aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008af0:	3b02      	subs	r3, #2
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d82a      	bhi.n	8008b4c <ethernet_link_thread+0xd0>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <ethernet_link_thread+0x80>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b1f 	.word	0x08008b1f
 8008b04:	08008b2f 	.word	0x08008b2f
 8008b08:	08008b3f 	.word	0x08008b3f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008b0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b10:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008b12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b16:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008b1c:	e017      	b.n	8008b4e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8008b22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b26:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008b2c:	e00f      	b.n	8008b4e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b32:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008b34:	2300      	movs	r3, #0
 8008b36:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008b3c:	e007      	b.n	8008b4e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8008b42:	2300      	movs	r3, #0
 8008b44:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008b46:	2301      	movs	r3, #1
 8008b48:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008b4a:	e000      	b.n	8008b4e <ethernet_link_thread+0xd2>
    default:
      break;
 8008b4c:	bf00      	nop
    }

    if(linkchanged)
 8008b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d018      	beq.n	8008b86 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008b54:	f107 0308 	add.w	r3, r7, #8
 8008b58:	4619      	mov	r1, r3
 8008b5a:	480e      	ldr	r0, [pc, #56]	; (8008b94 <ethernet_link_thread+0x118>)
 8008b5c:	f7fc fbdc 	bl	8005318 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008b60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b62:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b66:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008b68:	f107 0308 	add.w	r3, r7, #8
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4809      	ldr	r0, [pc, #36]	; (8008b94 <ethernet_link_thread+0x118>)
 8008b70:	f7fc fcc9 	bl	8005506 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008b74:	4807      	ldr	r0, [pc, #28]	; (8008b94 <ethernet_link_thread+0x118>)
 8008b76:	f7fb ff81 	bl	8004a7c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008b7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b7c:	f007 f99e 	bl	800febc <netif_set_up>
      netif_set_link_up(netif);
 8008b80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b82:	f007 fa39 	bl	800fff8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008b86:	2064      	movs	r0, #100	; 0x64
 8008b88:	f000 f9c2 	bl	8008f10 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008b8c:	e78b      	b.n	8008aa6 <ethernet_link_thread+0x2a>
 8008b8e:	bf00      	nop
 8008b90:	20046684 	.word	0x20046684
 8008b94:	2004659c 	.word	0x2004659c

08008b98 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008ba0:	4812      	ldr	r0, [pc, #72]	; (8008bec <HAL_ETH_RxAllocateCallback+0x54>)
 8008ba2:	f006 feff 	bl	800f9a4 <memp_malloc_pool>
 8008ba6:	60f8      	str	r0, [r7, #12]
  if (p)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d014      	beq.n	8008bd8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f103 0220 	add.w	r2, r3, #32
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a0d      	ldr	r2, [pc, #52]	; (8008bf0 <HAL_ETH_RxAllocateCallback+0x58>)
 8008bbc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008bc6:	9201      	str	r2, [sp, #4]
 8008bc8:	9300      	str	r3, [sp, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2241      	movs	r2, #65	; 0x41
 8008bce:	2100      	movs	r1, #0
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f007 fc69 	bl	80104a8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008bd6:	e005      	b.n	8008be4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008bd8:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
}
 8008be4:	bf00      	nop
 8008be6:	3710      	adds	r7, #16
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	0801e7b4 	.word	0x0801e7b4
 8008bf0:	0800884d 	.word	0x0800884d
 8008bf4:	20046590 	.word	0x20046590

08008bf8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
 8008c04:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	3b20      	subs	r3, #32
 8008c16:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	2200      	movs	r2, #0
 8008c22:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	887a      	ldrh	r2, [r7, #2]
 8008c28:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	e003      	b.n	8008c42 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69fa      	ldr	r2, [r7, #28]
 8008c40:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	61fb      	str	r3, [r7, #28]
 8008c4e:	e009      	b.n	8008c64 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	891a      	ldrh	r2, [r3, #8]
 8008c54:	887b      	ldrh	r3, [r7, #2]
 8008c56:	4413      	add	r3, r2
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	61fb      	str	r3, [r7, #28]
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f2      	bne.n	8008c50 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fb4a 	bl	8008308 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008c74:	bf00      	nop
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f007 fdc9 	bl	801081c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008c8a:	bf00      	nop
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008c92:	b480      	push	{r7}
 8008c94:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008c96:	bf00      	nop
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ca6:	f3ef 8305 	mrs	r3, IPSR
 8008caa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008cac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb6:	607b      	str	r3, [r7, #4]
  return(result);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cbe:	f3ef 8311 	mrs	r3, BASEPRI
 8008cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <osKernelInitialize+0x3a>
 8008cca:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <osKernelInitialize+0x64>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d103      	bne.n	8008cda <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008cd2:	f06f 0305 	mvn.w	r3, #5
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e00c      	b.n	8008cf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008cda:	4b0a      	ldr	r3, [pc, #40]	; (8008d04 <osKernelInitialize+0x64>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008ce2:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <osKernelInitialize+0x64>)
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e002      	b.n	8008cf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	200466a4 	.word	0x200466a4

08008d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d0e:	f3ef 8305 	mrs	r3, IPSR
 8008d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d10f      	bne.n	8008d3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d1e:	607b      	str	r3, [r7, #4]
  return(result);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d26:	f3ef 8311 	mrs	r3, BASEPRI
 8008d2a:	603b      	str	r3, [r7, #0]
  return(result);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d007      	beq.n	8008d42 <osKernelStart+0x3a>
 8008d32:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <osKernelStart+0x68>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d103      	bne.n	8008d42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008d3a:	f06f 0305 	mvn.w	r3, #5
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	e010      	b.n	8008d64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008d42:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <osKernelStart+0x68>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d109      	bne.n	8008d5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008d4a:	f7ff ffa2 	bl	8008c92 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008d4e:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <osKernelStart+0x68>)
 8008d50:	2202      	movs	r2, #2
 8008d52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008d54:	f002 f9e4 	bl	800b120 <vTaskStartScheduler>
      stat = osOK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
 8008d5c:	e002      	b.n	8008d64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d64:	68fb      	ldr	r3, [r7, #12]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	200466a4 	.word	0x200466a4

08008d74 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d7a:	f3ef 8305 	mrs	r3, IPSR
 8008d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d80:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10f      	bne.n	8008da6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d86:	f3ef 8310 	mrs	r3, PRIMASK
 8008d8a:	607b      	str	r3, [r7, #4]
  return(result);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d92:	f3ef 8311 	mrs	r3, BASEPRI
 8008d96:	603b      	str	r3, [r7, #0]
  return(result);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <osKernelGetTickCount+0x3a>
 8008d9e:	4b08      	ldr	r3, [pc, #32]	; (8008dc0 <osKernelGetTickCount+0x4c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d103      	bne.n	8008dae <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008da6:	f002 faed 	bl	800b384 <xTaskGetTickCountFromISR>
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	e002      	b.n	8008db4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8008dae:	f002 fad9 	bl	800b364 <xTaskGetTickCount>
 8008db2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008db4:	68fb      	ldr	r3, [r7, #12]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200466a4 	.word	0x200466a4

08008dc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b090      	sub	sp, #64	; 0x40
 8008dc8:	af04      	add	r7, sp, #16
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd4:	f3ef 8305 	mrs	r3, IPSR
 8008dd8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008dda:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 808f 	bne.w	8008f00 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de2:	f3ef 8310 	mrs	r3, PRIMASK
 8008de6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dee:	f3ef 8311 	mrs	r3, BASEPRI
 8008df2:	617b      	str	r3, [r7, #20]
  return(result);
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <osThreadNew+0x3e>
 8008dfa:	4b44      	ldr	r3, [pc, #272]	; (8008f0c <osThreadNew+0x148>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d07e      	beq.n	8008f00 <osThreadNew+0x13c>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d07b      	beq.n	8008f00 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008e08:	2380      	movs	r3, #128	; 0x80
 8008e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008e0c:	2318      	movs	r3, #24
 8008e0e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d045      	beq.n	8008eac <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d002      	beq.n	8008e2e <osThreadNew+0x6a>
        name = attr->name;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d008      	beq.n	8008e54 <osThreadNew+0x90>
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	2b38      	cmp	r3, #56	; 0x38
 8008e46:	d805      	bhi.n	8008e54 <osThreadNew+0x90>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <osThreadNew+0x94>
        return (NULL);
 8008e54:	2300      	movs	r3, #0
 8008e56:	e054      	b.n	8008f02 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	695b      	ldr	r3, [r3, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d003      	beq.n	8008e68 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	089b      	lsrs	r3, r3, #2
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00e      	beq.n	8008e8e <osThreadNew+0xca>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2bbb      	cmp	r3, #187	; 0xbb
 8008e76:	d90a      	bls.n	8008e8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d006      	beq.n	8008e8e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <osThreadNew+0xca>
        mem = 1;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	623b      	str	r3, [r7, #32]
 8008e8c:	e010      	b.n	8008eb0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10c      	bne.n	8008eb0 <osThreadNew+0xec>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d108      	bne.n	8008eb0 <osThreadNew+0xec>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <osThreadNew+0xec>
          mem = 0;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	623b      	str	r3, [r7, #32]
 8008eaa:	e001      	b.n	8008eb0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d110      	bne.n	8008ed8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ebe:	9202      	str	r2, [sp, #8]
 8008ec0:	9301      	str	r3, [sp, #4]
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f001 ff31 	bl	800ad34 <xTaskCreateStatic>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	613b      	str	r3, [r7, #16]
 8008ed6:	e013      	b.n	8008f00 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008ed8:	6a3b      	ldr	r3, [r7, #32]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d110      	bne.n	8008f00 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	f107 0310 	add.w	r3, r7, #16
 8008ee6:	9301      	str	r3, [sp, #4]
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	f001 ff82 	bl	800adfa <xTaskCreate>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d001      	beq.n	8008f00 <osThreadNew+0x13c>
          hTask = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f00:	693b      	ldr	r3, [r7, #16]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3730      	adds	r7, #48	; 0x30
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200466a4 	.word	0x200466a4

08008f10 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f18:	f3ef 8305 	mrs	r3, IPSR
 8008f1c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f1e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10f      	bne.n	8008f44 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f24:	f3ef 8310 	mrs	r3, PRIMASK
 8008f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d105      	bne.n	8008f3c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f30:	f3ef 8311 	mrs	r3, BASEPRI
 8008f34:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d007      	beq.n	8008f4c <osDelay+0x3c>
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <osDelay+0x58>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	d103      	bne.n	8008f4c <osDelay+0x3c>
    stat = osErrorISR;
 8008f44:	f06f 0305 	mvn.w	r3, #5
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e007      	b.n	8008f5c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f002 f8ac 	bl	800b0b4 <vTaskDelay>
    }
  }

  return (stat);
 8008f5c:	697b      	ldr	r3, [r7, #20]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	200466a4 	.word	0x200466a4

08008f6c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08a      	sub	sp, #40	; 0x28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008f74:	2300      	movs	r3, #0
 8008f76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f78:	f3ef 8305 	mrs	r3, IPSR
 8008f7c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f040 8085 	bne.w	8009090 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f86:	f3ef 8310 	mrs	r3, PRIMASK
 8008f8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d105      	bne.n	8008f9e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f92:	f3ef 8311 	mrs	r3, BASEPRI
 8008f96:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <osMutexNew+0x3a>
 8008f9e:	4b3f      	ldr	r3, [pc, #252]	; (800909c <osMutexNew+0x130>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b02      	cmp	r3, #2
 8008fa4:	d074      	beq.n	8009090 <osMutexNew+0x124>
    if (attr != NULL) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	623b      	str	r3, [r7, #32]
 8008fb2:	e001      	b.n	8008fb8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008fb8:	6a3b      	ldr	r3, [r7, #32]
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <osMutexNew+0x5c>
      rmtx = 1U;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	61fb      	str	r3, [r7, #28]
 8008fc6:	e001      	b.n	8008fcc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d15c      	bne.n	8009090 <osMutexNew+0x124>
      mem = -1;
 8008fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fda:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d015      	beq.n	800900e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d006      	beq.n	8008ff8 <osMutexNew+0x8c>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	2b4f      	cmp	r3, #79	; 0x4f
 8008ff0:	d902      	bls.n	8008ff8 <osMutexNew+0x8c>
          mem = 1;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	61bb      	str	r3, [r7, #24]
 8008ff6:	e00c      	b.n	8009012 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d108      	bne.n	8009012 <osMutexNew+0xa6>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d104      	bne.n	8009012 <osMutexNew+0xa6>
            mem = 0;
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
 800900c:	e001      	b.n	8009012 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800900e:	2300      	movs	r3, #0
 8009010:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d112      	bne.n	800903e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	4619      	mov	r1, r3
 8009024:	2004      	movs	r0, #4
 8009026:	f000 feb8 	bl	8009d9a <xQueueCreateMutexStatic>
 800902a:	6278      	str	r0, [r7, #36]	; 0x24
 800902c:	e016      	b.n	800905c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	4619      	mov	r1, r3
 8009034:	2001      	movs	r0, #1
 8009036:	f000 feb0 	bl	8009d9a <xQueueCreateMutexStatic>
 800903a:	6278      	str	r0, [r7, #36]	; 0x24
 800903c:	e00e      	b.n	800905c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10b      	bne.n	800905c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800904a:	2004      	movs	r0, #4
 800904c:	f000 fe8d 	bl	8009d6a <xQueueCreateMutex>
 8009050:	6278      	str	r0, [r7, #36]	; 0x24
 8009052:	e003      	b.n	800905c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009054:	2001      	movs	r0, #1
 8009056:	f000 fe88 	bl	8009d6a <xQueueCreateMutex>
 800905a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00c      	beq.n	800907c <osMutexNew+0x110>
        if (attr != NULL) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <osMutexNew+0x104>
          name = attr->name;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	e001      	b.n	8009074 <osMutexNew+0x108>
        } else {
          name = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009074:	6979      	ldr	r1, [r7, #20]
 8009076:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009078:	f001 fdd4 	bl	800ac24 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	2b00      	cmp	r3, #0
 8009080:	d006      	beq.n	8009090 <osMutexNew+0x124>
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009092:	4618      	mov	r0, r3
 8009094:	3728      	adds	r7, #40	; 0x28
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	200466a4 	.word	0x200466a4

080090a0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b088      	sub	sp, #32
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090be:	f3ef 8305 	mrs	r3, IPSR
 80090c2:	613b      	str	r3, [r7, #16]
  return(result);
 80090c4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10f      	bne.n	80090ea <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ca:	f3ef 8310 	mrs	r3, PRIMASK
 80090ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d105      	bne.n	80090e2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090d6:	f3ef 8311 	mrs	r3, BASEPRI
 80090da:	60bb      	str	r3, [r7, #8]
  return(result);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d007      	beq.n	80090f2 <osMutexAcquire+0x52>
 80090e2:	4b1d      	ldr	r3, [pc, #116]	; (8009158 <osMutexAcquire+0xb8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d103      	bne.n	80090f2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80090ea:	f06f 0305 	mvn.w	r3, #5
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	e02c      	b.n	800914c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d103      	bne.n	8009100 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80090f8:	f06f 0303 	mvn.w	r3, #3
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	e025      	b.n	800914c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d011      	beq.n	800912a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	69b8      	ldr	r0, [r7, #24]
 800910a:	f000 fe97 	bl	8009e3c <xQueueTakeMutexRecursive>
 800910e:	4603      	mov	r3, r0
 8009110:	2b01      	cmp	r3, #1
 8009112:	d01b      	beq.n	800914c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800911a:	f06f 0301 	mvn.w	r3, #1
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	e014      	b.n	800914c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009122:	f06f 0302 	mvn.w	r3, #2
 8009126:	61fb      	str	r3, [r7, #28]
 8009128:	e010      	b.n	800914c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800912a:	6839      	ldr	r1, [r7, #0]
 800912c:	69b8      	ldr	r0, [r7, #24]
 800912e:	f001 fa51 	bl	800a5d4 <xQueueSemaphoreTake>
 8009132:	4603      	mov	r3, r0
 8009134:	2b01      	cmp	r3, #1
 8009136:	d009      	beq.n	800914c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800913e:	f06f 0301 	mvn.w	r3, #1
 8009142:	61fb      	str	r3, [r7, #28]
 8009144:	e002      	b.n	800914c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8009146:	f06f 0302 	mvn.w	r3, #2
 800914a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800914c:	69fb      	ldr	r3, [r7, #28]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3720      	adds	r7, #32
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200466a4 	.word	0x200466a4

0800915c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f023 0301 	bic.w	r3, r3, #1
 800916a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009178:	f3ef 8305 	mrs	r3, IPSR
 800917c:	613b      	str	r3, [r7, #16]
  return(result);
 800917e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10f      	bne.n	80091a4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009184:	f3ef 8310 	mrs	r3, PRIMASK
 8009188:	60fb      	str	r3, [r7, #12]
  return(result);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d105      	bne.n	800919c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009190:	f3ef 8311 	mrs	r3, BASEPRI
 8009194:	60bb      	str	r3, [r7, #8]
  return(result);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <osMutexRelease+0x50>
 800919c:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <osMutexRelease+0x9c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d103      	bne.n	80091ac <osMutexRelease+0x50>
    stat = osErrorISR;
 80091a4:	f06f 0305 	mvn.w	r3, #5
 80091a8:	61fb      	str	r3, [r7, #28]
 80091aa:	e01f      	b.n	80091ec <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80091b2:	f06f 0303 	mvn.w	r3, #3
 80091b6:	61fb      	str	r3, [r7, #28]
 80091b8:	e018      	b.n	80091ec <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d009      	beq.n	80091d4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80091c0:	69b8      	ldr	r0, [r7, #24]
 80091c2:	f000 fe05 	bl	8009dd0 <xQueueGiveMutexRecursive>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d00f      	beq.n	80091ec <osMutexRelease+0x90>
        stat = osErrorResource;
 80091cc:	f06f 0302 	mvn.w	r3, #2
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	e00b      	b.n	80091ec <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80091d4:	2300      	movs	r3, #0
 80091d6:	2200      	movs	r2, #0
 80091d8:	2100      	movs	r1, #0
 80091da:	69b8      	ldr	r0, [r7, #24]
 80091dc:	f000 fed8 	bl	8009f90 <xQueueGenericSend>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d002      	beq.n	80091ec <osMutexRelease+0x90>
        stat = osErrorResource;
 80091e6:	f06f 0302 	mvn.w	r3, #2
 80091ea:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80091ec:	69fb      	ldr	r3, [r7, #28]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	200466a4 	.word	0x200466a4

080091fc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08c      	sub	sp, #48	; 0x30
 8009200:	af02      	add	r7, sp, #8
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800920c:	f3ef 8305 	mrs	r3, IPSR
 8009210:	61bb      	str	r3, [r7, #24]
  return(result);
 8009212:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009214:	2b00      	cmp	r3, #0
 8009216:	f040 8086 	bne.w	8009326 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800921a:	f3ef 8310 	mrs	r3, PRIMASK
 800921e:	617b      	str	r3, [r7, #20]
  return(result);
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d105      	bne.n	8009232 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009226:	f3ef 8311 	mrs	r3, BASEPRI
 800922a:	613b      	str	r3, [r7, #16]
  return(result);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <osSemaphoreNew+0x3e>
 8009232:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <osSemaphoreNew+0x134>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b02      	cmp	r3, #2
 8009238:	d075      	beq.n	8009326 <osSemaphoreNew+0x12a>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d072      	beq.n	8009326 <osSemaphoreNew+0x12a>
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	429a      	cmp	r2, r3
 8009246:	d86e      	bhi.n	8009326 <osSemaphoreNew+0x12a>
    mem = -1;
 8009248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800924c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d015      	beq.n	8009280 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <osSemaphoreNew+0x6e>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b4f      	cmp	r3, #79	; 0x4f
 8009262:	d902      	bls.n	800926a <osSemaphoreNew+0x6e>
        mem = 1;
 8009264:	2301      	movs	r3, #1
 8009266:	623b      	str	r3, [r7, #32]
 8009268:	e00c      	b.n	8009284 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d108      	bne.n	8009284 <osSemaphoreNew+0x88>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <osSemaphoreNew+0x88>
          mem = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	623b      	str	r3, [r7, #32]
 800927e:	e001      	b.n	8009284 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009280:	2300      	movs	r3, #0
 8009282:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800928a:	d04c      	beq.n	8009326 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d128      	bne.n	80092e4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d10a      	bne.n	80092ae <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2203      	movs	r2, #3
 800929e:	9200      	str	r2, [sp, #0]
 80092a0:	2200      	movs	r2, #0
 80092a2:	2100      	movs	r1, #0
 80092a4:	2001      	movs	r0, #1
 80092a6:	f000 fc5f 	bl	8009b68 <xQueueGenericCreateStatic>
 80092aa:	6278      	str	r0, [r7, #36]	; 0x24
 80092ac:	e005      	b.n	80092ba <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80092ae:	2203      	movs	r2, #3
 80092b0:	2100      	movs	r1, #0
 80092b2:	2001      	movs	r0, #1
 80092b4:	f000 fcda 	bl	8009c6c <xQueueGenericCreate>
 80092b8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80092ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d022      	beq.n	8009306 <osSemaphoreNew+0x10a>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d01f      	beq.n	8009306 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80092c6:	2300      	movs	r3, #0
 80092c8:	2200      	movs	r2, #0
 80092ca:	2100      	movs	r1, #0
 80092cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092ce:	f000 fe5f 	bl	8009f90 <xQueueGenericSend>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d016      	beq.n	8009306 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80092d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092da:	f001 fb55 	bl	800a988 <vQueueDelete>
            hSemaphore = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
 80092e2:	e010      	b.n	8009306 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d108      	bne.n	80092fc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	461a      	mov	r2, r3
 80092f0:	68b9      	ldr	r1, [r7, #8]
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fdda 	bl	8009eac <xQueueCreateCountingSemaphoreStatic>
 80092f8:	6278      	str	r0, [r7, #36]	; 0x24
 80092fa:	e004      	b.n	8009306 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80092fc:	68b9      	ldr	r1, [r7, #8]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 fe0f 	bl	8009f22 <xQueueCreateCountingSemaphore>
 8009304:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00c      	beq.n	8009326 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <osSemaphoreNew+0x11e>
          name = attr->name;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	61fb      	str	r3, [r7, #28]
 8009318:	e001      	b.n	800931e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800931e:	69f9      	ldr	r1, [r7, #28]
 8009320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009322:	f001 fc7f 	bl	800ac24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009328:	4618      	mov	r0, r3
 800932a:	3728      	adds	r7, #40	; 0x28
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	200466a4 	.word	0x200466a4

08009334 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009342:	2300      	movs	r3, #0
 8009344:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d103      	bne.n	8009354 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800934c:	f06f 0303 	mvn.w	r3, #3
 8009350:	61fb      	str	r3, [r7, #28]
 8009352:	e04b      	b.n	80093ec <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009354:	f3ef 8305 	mrs	r3, IPSR
 8009358:	617b      	str	r3, [r7, #20]
  return(result);
 800935a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10f      	bne.n	8009380 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009360:	f3ef 8310 	mrs	r3, PRIMASK
 8009364:	613b      	str	r3, [r7, #16]
  return(result);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800936c:	f3ef 8311 	mrs	r3, BASEPRI
 8009370:	60fb      	str	r3, [r7, #12]
  return(result);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d026      	beq.n	80093c6 <osSemaphoreAcquire+0x92>
 8009378:	4b1f      	ldr	r3, [pc, #124]	; (80093f8 <osSemaphoreAcquire+0xc4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d122      	bne.n	80093c6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8009386:	f06f 0303 	mvn.w	r3, #3
 800938a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800938c:	e02d      	b.n	80093ea <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	461a      	mov	r2, r3
 8009398:	2100      	movs	r1, #0
 800939a:	69b8      	ldr	r0, [r7, #24]
 800939c:	f001 fa2e 	bl	800a7fc <xQueueReceiveFromISR>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d003      	beq.n	80093ae <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80093a6:	f06f 0302 	mvn.w	r3, #2
 80093aa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80093ac:	e01d      	b.n	80093ea <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01a      	beq.n	80093ea <osSemaphoreAcquire+0xb6>
 80093b4:	4b11      	ldr	r3, [pc, #68]	; (80093fc <osSemaphoreAcquire+0xc8>)
 80093b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80093c4:	e011      	b.n	80093ea <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	69b8      	ldr	r0, [r7, #24]
 80093ca:	f001 f903 	bl	800a5d4 <xQueueSemaphoreTake>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d00b      	beq.n	80093ec <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80093da:	f06f 0301 	mvn.w	r3, #1
 80093de:	61fb      	str	r3, [r7, #28]
 80093e0:	e004      	b.n	80093ec <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80093e2:	f06f 0302 	mvn.w	r3, #2
 80093e6:	61fb      	str	r3, [r7, #28]
 80093e8:	e000      	b.n	80093ec <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80093ea:	bf00      	nop
      }
    }
  }

  return (stat);
 80093ec:	69fb      	ldr	r3, [r7, #28]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3720      	adds	r7, #32
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	200466a4 	.word	0x200466a4
 80093fc:	e000ed04 	.word	0xe000ed04

08009400 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800940c:	2300      	movs	r3, #0
 800940e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d103      	bne.n	800941e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009416:	f06f 0303 	mvn.w	r3, #3
 800941a:	61fb      	str	r3, [r7, #28]
 800941c:	e03e      	b.n	800949c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800941e:	f3ef 8305 	mrs	r3, IPSR
 8009422:	617b      	str	r3, [r7, #20]
  return(result);
 8009424:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10f      	bne.n	800944a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800942a:	f3ef 8310 	mrs	r3, PRIMASK
 800942e:	613b      	str	r3, [r7, #16]
  return(result);
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d105      	bne.n	8009442 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009436:	f3ef 8311 	mrs	r3, BASEPRI
 800943a:	60fb      	str	r3, [r7, #12]
  return(result);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d01e      	beq.n	8009480 <osSemaphoreRelease+0x80>
 8009442:	4b19      	ldr	r3, [pc, #100]	; (80094a8 <osSemaphoreRelease+0xa8>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d11a      	bne.n	8009480 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800944a:	2300      	movs	r3, #0
 800944c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800944e:	f107 0308 	add.w	r3, r7, #8
 8009452:	4619      	mov	r1, r3
 8009454:	69b8      	ldr	r0, [r7, #24]
 8009456:	f000 ff41 	bl	800a2dc <xQueueGiveFromISR>
 800945a:	4603      	mov	r3, r0
 800945c:	2b01      	cmp	r3, #1
 800945e:	d003      	beq.n	8009468 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8009460:	f06f 0302 	mvn.w	r3, #2
 8009464:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009466:	e018      	b.n	800949a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d015      	beq.n	800949a <osSemaphoreRelease+0x9a>
 800946e:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <osSemaphoreRelease+0xac>)
 8009470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009474:	601a      	str	r2, [r3, #0]
 8009476:	f3bf 8f4f 	dsb	sy
 800947a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800947e:	e00c      	b.n	800949a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	69b8      	ldr	r0, [r7, #24]
 8009488:	f000 fd82 	bl	8009f90 <xQueueGenericSend>
 800948c:	4603      	mov	r3, r0
 800948e:	2b01      	cmp	r3, #1
 8009490:	d004      	beq.n	800949c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009492:	f06f 0302 	mvn.w	r3, #2
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e000      	b.n	800949c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800949a:	bf00      	nop
    }
  }

  return (stat);
 800949c:	69fb      	ldr	r3, [r7, #28]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	200466a4 	.word	0x200466a4
 80094ac:	e000ed04 	.word	0xe000ed04

080094b0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094bc:	f3ef 8305 	mrs	r3, IPSR
 80094c0:	617b      	str	r3, [r7, #20]
  return(result);
 80094c2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10f      	bne.n	80094e8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094c8:	f3ef 8310 	mrs	r3, PRIMASK
 80094cc:	613b      	str	r3, [r7, #16]
  return(result);
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094d4:	f3ef 8311 	mrs	r3, BASEPRI
 80094d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d007      	beq.n	80094f0 <osSemaphoreDelete+0x40>
 80094e0:	4b0d      	ldr	r3, [pc, #52]	; (8009518 <osSemaphoreDelete+0x68>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d103      	bne.n	80094f0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80094e8:	f06f 0305 	mvn.w	r3, #5
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e00e      	b.n	800950e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d103      	bne.n	80094fe <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80094f6:	f06f 0303 	mvn.w	r3, #3
 80094fa:	61fb      	str	r3, [r7, #28]
 80094fc:	e007      	b.n	800950e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80094fe:	69b8      	ldr	r0, [r7, #24]
 8009500:	f001 fbba 	bl	800ac78 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009504:	2300      	movs	r3, #0
 8009506:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8009508:	69b8      	ldr	r0, [r7, #24]
 800950a:	f001 fa3d 	bl	800a988 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800950e:	69fb      	ldr	r3, [r7, #28]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	200466a4 	.word	0x200466a4

0800951c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b08c      	sub	sp, #48	; 0x30
 8009520:	af02      	add	r7, sp, #8
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009528:	2300      	movs	r3, #0
 800952a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800952c:	f3ef 8305 	mrs	r3, IPSR
 8009530:	61bb      	str	r3, [r7, #24]
  return(result);
 8009532:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009534:	2b00      	cmp	r3, #0
 8009536:	d16f      	bne.n	8009618 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009538:	f3ef 8310 	mrs	r3, PRIMASK
 800953c:	617b      	str	r3, [r7, #20]
  return(result);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d105      	bne.n	8009550 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009544:	f3ef 8311 	mrs	r3, BASEPRI
 8009548:	613b      	str	r3, [r7, #16]
  return(result);
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <osMessageQueueNew+0x3c>
 8009550:	4b34      	ldr	r3, [pc, #208]	; (8009624 <osMessageQueueNew+0x108>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b02      	cmp	r3, #2
 8009556:	d05f      	beq.n	8009618 <osMessageQueueNew+0xfc>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d05c      	beq.n	8009618 <osMessageQueueNew+0xfc>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d059      	beq.n	8009618 <osMessageQueueNew+0xfc>
    mem = -1;
 8009564:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009568:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d029      	beq.n	80095c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d012      	beq.n	800959e <osMessageQueueNew+0x82>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	2b4f      	cmp	r3, #79	; 0x4f
 800957e:	d90e      	bls.n	800959e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00a      	beq.n	800959e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	695a      	ldr	r2, [r3, #20]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68b9      	ldr	r1, [r7, #8]
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	429a      	cmp	r2, r3
 8009596:	d302      	bcc.n	800959e <osMessageQueueNew+0x82>
        mem = 1;
 8009598:	2301      	movs	r3, #1
 800959a:	623b      	str	r3, [r7, #32]
 800959c:	e014      	b.n	80095c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d110      	bne.n	80095c8 <osMessageQueueNew+0xac>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10c      	bne.n	80095c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d108      	bne.n	80095c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d104      	bne.n	80095c8 <osMessageQueueNew+0xac>
          mem = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	623b      	str	r3, [r7, #32]
 80095c2:	e001      	b.n	80095c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80095c8:	6a3b      	ldr	r3, [r7, #32]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d10b      	bne.n	80095e6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	691a      	ldr	r2, [r3, #16]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2100      	movs	r1, #0
 80095d8:	9100      	str	r1, [sp, #0]
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 fac3 	bl	8009b68 <xQueueGenericCreateStatic>
 80095e2:	6278      	str	r0, [r7, #36]	; 0x24
 80095e4:	e008      	b.n	80095f8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d105      	bne.n	80095f8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80095ec:	2200      	movs	r2, #0
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fb3b 	bl	8009c6c <xQueueGenericCreate>
 80095f6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00c      	beq.n	8009618 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d003      	beq.n	800960c <osMessageQueueNew+0xf0>
        name = attr->name;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	e001      	b.n	8009610 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009610:	69f9      	ldr	r1, [r7, #28]
 8009612:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009614:	f001 fb06 	bl	800ac24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800961a:	4618      	mov	r0, r3
 800961c:	3728      	adds	r7, #40	; 0x28
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	200466a4 	.word	0x200466a4

08009628 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009628:	b580      	push	{r7, lr}
 800962a:	b08a      	sub	sp, #40	; 0x28
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	603b      	str	r3, [r7, #0]
 8009634:	4613      	mov	r3, r2
 8009636:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800963c:	2300      	movs	r3, #0
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009640:	f3ef 8305 	mrs	r3, IPSR
 8009644:	61fb      	str	r3, [r7, #28]
  return(result);
 8009646:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10f      	bne.n	800966c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964c:	f3ef 8310 	mrs	r3, PRIMASK
 8009650:	61bb      	str	r3, [r7, #24]
  return(result);
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009658:	f3ef 8311 	mrs	r3, BASEPRI
 800965c:	617b      	str	r3, [r7, #20]
  return(result);
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d02c      	beq.n	80096be <osMessageQueuePut+0x96>
 8009664:	4b28      	ldr	r3, [pc, #160]	; (8009708 <osMessageQueuePut+0xe0>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b02      	cmp	r3, #2
 800966a:	d128      	bne.n	80096be <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <osMessageQueuePut+0x56>
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d002      	beq.n	800967e <osMessageQueuePut+0x56>
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800967e:	f06f 0303 	mvn.w	r3, #3
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009684:	e039      	b.n	80096fa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800968a:	f107 0210 	add.w	r2, r7, #16
 800968e:	2300      	movs	r3, #0
 8009690:	68b9      	ldr	r1, [r7, #8]
 8009692:	6a38      	ldr	r0, [r7, #32]
 8009694:	f000 fd82 	bl	800a19c <xQueueGenericSendFromISR>
 8009698:	4603      	mov	r3, r0
 800969a:	2b01      	cmp	r3, #1
 800969c:	d003      	beq.n	80096a6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800969e:	f06f 0302 	mvn.w	r3, #2
 80096a2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096a4:	e029      	b.n	80096fa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d026      	beq.n	80096fa <osMessageQueuePut+0xd2>
 80096ac:	4b17      	ldr	r3, [pc, #92]	; (800970c <osMessageQueuePut+0xe4>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096bc:	e01d      	b.n	80096fa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d002      	beq.n	80096ca <osMessageQueuePut+0xa2>
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d103      	bne.n	80096d2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80096ca:	f06f 0303 	mvn.w	r3, #3
 80096ce:	627b      	str	r3, [r7, #36]	; 0x24
 80096d0:	e014      	b.n	80096fc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80096d2:	2300      	movs	r3, #0
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	68b9      	ldr	r1, [r7, #8]
 80096d8:	6a38      	ldr	r0, [r7, #32]
 80096da:	f000 fc59 	bl	8009f90 <xQueueGenericSend>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d00b      	beq.n	80096fc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80096ea:	f06f 0301 	mvn.w	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
 80096f0:	e004      	b.n	80096fc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80096f2:	f06f 0302 	mvn.w	r3, #2
 80096f6:	627b      	str	r3, [r7, #36]	; 0x24
 80096f8:	e000      	b.n	80096fc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096fa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3728      	adds	r7, #40	; 0x28
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	200466a4 	.word	0x200466a4
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	; 0x28
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009722:	2300      	movs	r3, #0
 8009724:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009726:	f3ef 8305 	mrs	r3, IPSR
 800972a:	61fb      	str	r3, [r7, #28]
  return(result);
 800972c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10f      	bne.n	8009752 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009732:	f3ef 8310 	mrs	r3, PRIMASK
 8009736:	61bb      	str	r3, [r7, #24]
  return(result);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d105      	bne.n	800974a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800973e:	f3ef 8311 	mrs	r3, BASEPRI
 8009742:	617b      	str	r3, [r7, #20]
  return(result);
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d02c      	beq.n	80097a4 <osMessageQueueGet+0x94>
 800974a:	4b28      	ldr	r3, [pc, #160]	; (80097ec <osMessageQueueGet+0xdc>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b02      	cmp	r3, #2
 8009750:	d128      	bne.n	80097a4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009752:	6a3b      	ldr	r3, [r7, #32]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <osMessageQueueGet+0x54>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <osMessageQueueGet+0x54>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009764:	f06f 0303 	mvn.w	r3, #3
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800976a:	e038      	b.n	80097de <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800976c:	2300      	movs	r3, #0
 800976e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009770:	f107 0310 	add.w	r3, r7, #16
 8009774:	461a      	mov	r2, r3
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	6a38      	ldr	r0, [r7, #32]
 800977a:	f001 f83f 	bl	800a7fc <xQueueReceiveFromISR>
 800977e:	4603      	mov	r3, r0
 8009780:	2b01      	cmp	r3, #1
 8009782:	d003      	beq.n	800978c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009784:	f06f 0302 	mvn.w	r3, #2
 8009788:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800978a:	e028      	b.n	80097de <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d025      	beq.n	80097de <osMessageQueueGet+0xce>
 8009792:	4b17      	ldr	r3, [pc, #92]	; (80097f0 <osMessageQueueGet+0xe0>)
 8009794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097a2:	e01c      	b.n	80097de <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <osMessageQueueGet+0xa0>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d103      	bne.n	80097b8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80097b0:	f06f 0303 	mvn.w	r3, #3
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
 80097b6:	e013      	b.n	80097e0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	6a38      	ldr	r0, [r7, #32]
 80097be:	f000 fe23 	bl	800a408 <xQueueReceive>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d00b      	beq.n	80097e0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80097ce:	f06f 0301 	mvn.w	r3, #1
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
 80097d4:	e004      	b.n	80097e0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80097d6:	f06f 0302 	mvn.w	r3, #2
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
 80097dc:	e000      	b.n	80097e0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80097de:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80097e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3728      	adds	r7, #40	; 0x28
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	200466a4 	.word	0x200466a4
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <osMessageQueueGetCount+0x18>
    count = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	61fb      	str	r3, [r7, #28]
 800980a:	e01e      	b.n	800984a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800980c:	f3ef 8305 	mrs	r3, IPSR
 8009810:	617b      	str	r3, [r7, #20]
  return(result);
 8009812:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10f      	bne.n	8009838 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009818:	f3ef 8310 	mrs	r3, PRIMASK
 800981c:	613b      	str	r3, [r7, #16]
  return(result);
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d105      	bne.n	8009830 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009824:	f3ef 8311 	mrs	r3, BASEPRI
 8009828:	60fb      	str	r3, [r7, #12]
  return(result);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d008      	beq.n	8009842 <osMessageQueueGetCount+0x4e>
 8009830:	4b08      	ldr	r3, [pc, #32]	; (8009854 <osMessageQueueGetCount+0x60>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b02      	cmp	r3, #2
 8009836:	d104      	bne.n	8009842 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009838:	69b8      	ldr	r0, [r7, #24]
 800983a:	f001 f885 	bl	800a948 <uxQueueMessagesWaitingFromISR>
 800983e:	61f8      	str	r0, [r7, #28]
 8009840:	e003      	b.n	800984a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009842:	69b8      	ldr	r0, [r7, #24]
 8009844:	f001 f860 	bl	800a908 <uxQueueMessagesWaiting>
 8009848:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800984a:	69fb      	ldr	r3, [r7, #28]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3720      	adds	r7, #32
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	200466a4 	.word	0x200466a4

08009858 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009858:	b580      	push	{r7, lr}
 800985a:	b088      	sub	sp, #32
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009864:	f3ef 8305 	mrs	r3, IPSR
 8009868:	617b      	str	r3, [r7, #20]
  return(result);
 800986a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10f      	bne.n	8009890 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009870:	f3ef 8310 	mrs	r3, PRIMASK
 8009874:	613b      	str	r3, [r7, #16]
  return(result);
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d105      	bne.n	8009888 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800987c:	f3ef 8311 	mrs	r3, BASEPRI
 8009880:	60fb      	str	r3, [r7, #12]
  return(result);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d007      	beq.n	8009898 <osMessageQueueDelete+0x40>
 8009888:	4b0d      	ldr	r3, [pc, #52]	; (80098c0 <osMessageQueueDelete+0x68>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d103      	bne.n	8009898 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8009890:	f06f 0305 	mvn.w	r3, #5
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	e00e      	b.n	80098b6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d103      	bne.n	80098a6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800989e:	f06f 0303 	mvn.w	r3, #3
 80098a2:	61fb      	str	r3, [r7, #28]
 80098a4:	e007      	b.n	80098b6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80098a6:	69b8      	ldr	r0, [r7, #24]
 80098a8:	f001 f9e6 	bl	800ac78 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80098b0:	69b8      	ldr	r0, [r7, #24]
 80098b2:	f001 f869 	bl	800a988 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80098b6:	69fb      	ldr	r3, [r7, #28]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3720      	adds	r7, #32
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	200466a4 	.word	0x200466a4

080098c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	4a07      	ldr	r2, [pc, #28]	; (80098f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80098d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	4a06      	ldr	r2, [pc, #24]	; (80098f4 <vApplicationGetIdleTaskMemory+0x30>)
 80098da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2280      	movs	r2, #128	; 0x80
 80098e0:	601a      	str	r2, [r3, #0]
}
 80098e2:	bf00      	nop
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	200466a8 	.word	0x200466a8
 80098f4:	20046764 	.word	0x20046764

080098f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4a07      	ldr	r2, [pc, #28]	; (8009924 <vApplicationGetTimerTaskMemory+0x2c>)
 8009908:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	4a06      	ldr	r2, [pc, #24]	; (8009928 <vApplicationGetTimerTaskMemory+0x30>)
 800990e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009916:	601a      	str	r2, [r3, #0]
}
 8009918:	bf00      	nop
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	20046964 	.word	0x20046964
 8009928:	20046a20 	.word	0x20046a20

0800992c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f103 0208 	add.w	r2, r3, #8
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f103 0208 	add.w	r2, r3, #8
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f103 0208 	add.w	r2, r3, #8
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	683a      	ldr	r2, [r7, #0]
 80099aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
}
 80099c2:	bf00      	nop
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr

080099ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099ce:	b480      	push	{r7}
 80099d0:	b085      	sub	sp, #20
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099e4:	d103      	bne.n	80099ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	e00c      	b.n	8009a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3308      	adds	r3, #8
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e002      	b.n	80099fc <vListInsert+0x2e>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68ba      	ldr	r2, [r7, #8]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d2f6      	bcs.n	80099f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	685a      	ldr	r2, [r3, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	1c5a      	adds	r2, r3, #1
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6892      	ldr	r2, [r2, #8]
 8009a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6852      	ldr	r2, [r2, #4]
 8009a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d103      	bne.n	8009a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689a      	ldr	r2, [r3, #8]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	1e5a      	subs	r2, r3, #1
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10c      	bne.n	8009ac2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	b672      	cpsid	i
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	b662      	cpsie	i
 8009abc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009ac2:	f002 fe13 	bl	800c6ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ace:	68f9      	ldr	r1, [r7, #12]
 8009ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009ad2:	fb01 f303 	mul.w	r3, r1, r3
 8009ad6:	441a      	add	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af2:	3b01      	subs	r3, #1
 8009af4:	68f9      	ldr	r1, [r7, #12]
 8009af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009af8:	fb01 f303 	mul.w	r3, r1, r3
 8009afc:	441a      	add	r2, r3
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	22ff      	movs	r2, #255	; 0xff
 8009b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	22ff      	movs	r2, #255	; 0xff
 8009b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d114      	bne.n	8009b42 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	691b      	ldr	r3, [r3, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01a      	beq.n	8009b56 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3310      	adds	r3, #16
 8009b24:	4618      	mov	r0, r3
 8009b26:	f001 fdb5 	bl	800b694 <xTaskRemoveFromEventList>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d012      	beq.n	8009b56 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b30:	4b0c      	ldr	r3, [pc, #48]	; (8009b64 <xQueueGenericReset+0xd0>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	f3bf 8f4f 	dsb	sy
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	e009      	b.n	8009b56 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	3310      	adds	r3, #16
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fef0 	bl	800992c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3324      	adds	r3, #36	; 0x24
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff feeb 	bl	800992c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009b56:	f002 fdfd 	bl	800c754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009b5a:	2301      	movs	r3, #1
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08e      	sub	sp, #56	; 0x38
 8009b6c:	af02      	add	r7, sp, #8
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10c      	bne.n	8009b96 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	b672      	cpsid	i
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	b662      	cpsie	i
 8009b90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	b672      	cpsid	i
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	b662      	cpsie	i
 8009bb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <xQueueGenericCreateStatic+0x5a>
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <xQueueGenericCreateStatic+0x5e>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <xQueueGenericCreateStatic+0x60>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10c      	bne.n	8009be6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	b672      	cpsid	i
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	b662      	cpsie	i
 8009be0:	623b      	str	r3, [r7, #32]
}
 8009be2:	bf00      	nop
 8009be4:	e7fe      	b.n	8009be4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <xQueueGenericCreateStatic+0x8a>
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d101      	bne.n	8009bf6 <xQueueGenericCreateStatic+0x8e>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e000      	b.n	8009bf8 <xQueueGenericCreateStatic+0x90>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10c      	bne.n	8009c16 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	b672      	cpsid	i
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	b662      	cpsie	i
 8009c10:	61fb      	str	r3, [r7, #28]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c16:	2350      	movs	r3, #80	; 0x50
 8009c18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b50      	cmp	r3, #80	; 0x50
 8009c1e:	d00c      	beq.n	8009c3a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	b672      	cpsid	i
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	b662      	cpsie	i
 8009c34:	61bb      	str	r3, [r7, #24]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009c3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00d      	beq.n	8009c62 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c48:	2201      	movs	r2, #1
 8009c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009c4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	4613      	mov	r3, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f000 f847 	bl	8009cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3730      	adds	r7, #48	; 0x30
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10c      	bne.n	8009c9a <xQueueGenericCreate+0x2e>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	b672      	cpsid	i
 8009c86:	f383 8811 	msr	BASEPRI, r3
 8009c8a:	f3bf 8f6f 	isb	sy
 8009c8e:	f3bf 8f4f 	dsb	sy
 8009c92:	b662      	cpsie	i
 8009c94:	613b      	str	r3, [r7, #16]
}
 8009c96:	bf00      	nop
 8009c98:	e7fe      	b.n	8009c98 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	e004      	b.n	8009cb0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
 8009cae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	3350      	adds	r3, #80	; 0x50
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f002 fe45 	bl	800c944 <pvPortMalloc>
 8009cba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	3350      	adds	r3, #80	; 0x50
 8009cca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cd4:	79fa      	ldrb	r2, [r7, #7]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	4613      	mov	r3, r2
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	68b9      	ldr	r1, [r7, #8]
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f805 	bl	8009cf0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
	}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3720      	adds	r7, #32
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d103      	bne.n	8009d0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	601a      	str	r2, [r3, #0]
 8009d0a:	e002      	b.n	8009d12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d12:	69bb      	ldr	r3, [r7, #24]
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d1e:	2101      	movs	r1, #1
 8009d20:	69b8      	ldr	r0, [r7, #24]
 8009d22:	f7ff feb7 	bl	8009a94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d2e:	bf00      	nop
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b082      	sub	sp, #8
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00e      	beq.n	8009d62 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2200      	movs	r2, #0
 8009d54:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d56:	2300      	movs	r3, #0
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f917 	bl	8009f90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009d62:	bf00      	nop
 8009d64:	3708      	adds	r7, #8
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b086      	sub	sp, #24
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	4603      	mov	r3, r0
 8009d72:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009d74:	2301      	movs	r3, #1
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	6939      	ldr	r1, [r7, #16]
 8009d82:	6978      	ldr	r0, [r7, #20]
 8009d84:	f7ff ff72 	bl	8009c6c <xQueueGenericCreate>
 8009d88:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7ff ffd3 	bl	8009d36 <prvInitialiseMutex>

		return xNewQueue;
 8009d90:	68fb      	ldr	r3, [r7, #12]
	}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b088      	sub	sp, #32
 8009d9e:	af02      	add	r7, sp, #8
 8009da0:	4603      	mov	r3, r0
 8009da2:	6039      	str	r1, [r7, #0]
 8009da4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009da6:	2301      	movs	r3, #1
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	2300      	movs	r3, #0
 8009dac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2200      	movs	r2, #0
 8009db6:	6939      	ldr	r1, [r7, #16]
 8009db8:	6978      	ldr	r0, [r7, #20]
 8009dba:	f7ff fed5 	bl	8009b68 <xQueueGenericCreateStatic>
 8009dbe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f7ff ffb8 	bl	8009d36 <prvInitialiseMutex>

		return xNewQueue;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
	}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10c      	bne.n	8009dfc <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	b672      	cpsid	i
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	b662      	cpsie	i
 8009df6:	60fb      	str	r3, [r7, #12]
}
 8009df8:	bf00      	nop
 8009dfa:	e7fe      	b.n	8009dfa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	689c      	ldr	r4, [r3, #8]
 8009e00:	f001 fe12 	bl	800ba28 <xTaskGetCurrentTaskHandle>
 8009e04:	4603      	mov	r3, r0
 8009e06:	429c      	cmp	r4, r3
 8009e08:	d111      	bne.n	8009e2e <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	1e5a      	subs	r2, r3, #1
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d105      	bne.n	8009e28 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2200      	movs	r2, #0
 8009e20:	2100      	movs	r1, #0
 8009e22:	6938      	ldr	r0, [r7, #16]
 8009e24:	f000 f8b4 	bl	8009f90 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e001      	b.n	8009e32 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009e32:	697b      	ldr	r3, [r7, #20]
	}
 8009e34:	4618      	mov	r0, r3
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd90      	pop	{r4, r7, pc}

08009e3c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10c      	bne.n	8009e6a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e54:	b672      	cpsid	i
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	b662      	cpsie	i
 8009e64:	60fb      	str	r3, [r7, #12]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	689c      	ldr	r4, [r3, #8]
 8009e6e:	f001 fddb 	bl	800ba28 <xTaskGetCurrentTaskHandle>
 8009e72:	4603      	mov	r3, r0
 8009e74:	429c      	cmp	r4, r3
 8009e76:	d107      	bne.n	8009e88 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009e82:	2301      	movs	r3, #1
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	e00c      	b.n	8009ea2 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6938      	ldr	r0, [r7, #16]
 8009e8c:	f000 fba2 	bl	800a5d4 <xQueueSemaphoreTake>
 8009e90:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d004      	beq.n	8009ea2 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009ea2:	697b      	ldr	r3, [r7, #20]
	}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	371c      	adds	r7, #28
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd90      	pop	{r4, r7, pc}

08009eac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08a      	sub	sp, #40	; 0x28
 8009eb0:	af02      	add	r7, sp, #8
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10c      	bne.n	8009ed8 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	b672      	cpsid	i
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	b662      	cpsie	i
 8009ed2:	61bb      	str	r3, [r7, #24]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d90c      	bls.n	8009efa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee4:	b672      	cpsid	i
 8009ee6:	f383 8811 	msr	BASEPRI, r3
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	f3bf 8f4f 	dsb	sy
 8009ef2:	b662      	cpsie	i
 8009ef4:	617b      	str	r3, [r7, #20]
}
 8009ef6:	bf00      	nop
 8009ef8:	e7fe      	b.n	8009ef8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009efa:	2302      	movs	r3, #2
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f7ff fe2f 	bl	8009b68 <xQueueGenericCreateStatic>
 8009f0a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	68ba      	ldr	r2, [r7, #8]
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f18:	69fb      	ldr	r3, [r7, #28]
	}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3720      	adds	r7, #32
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b086      	sub	sp, #24
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10c      	bne.n	8009f4c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f36:	b672      	cpsid	i
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	b662      	cpsie	i
 8009f46:	613b      	str	r3, [r7, #16]
}
 8009f48:	bf00      	nop
 8009f4a:	e7fe      	b.n	8009f4a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009f4c:	683a      	ldr	r2, [r7, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d90c      	bls.n	8009f6e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	b672      	cpsid	i
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	b662      	cpsie	i
 8009f68:	60fb      	str	r3, [r7, #12]
}
 8009f6a:	bf00      	nop
 8009f6c:	e7fe      	b.n	8009f6c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009f6e:	2202      	movs	r2, #2
 8009f70:	2100      	movs	r1, #0
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7ff fe7a 	bl	8009c6c <xQueueGenericCreate>
 8009f78:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d002      	beq.n	8009f86 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009f86:	697b      	ldr	r3, [r7, #20]
	}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	; 0x38
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
 8009f9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10c      	bne.n	8009fc6 <xQueueGenericSend+0x36>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	b672      	cpsid	i
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	b662      	cpsie	i
 8009fc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d103      	bne.n	8009fd4 <xQueueGenericSend+0x44>
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <xQueueGenericSend+0x48>
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e000      	b.n	8009fda <xQueueGenericSend+0x4a>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <xQueueGenericSend+0x68>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	b672      	cpsid	i
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	b662      	cpsie	i
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d103      	bne.n	800a006 <xQueueGenericSend+0x76>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <xQueueGenericSend+0x7a>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueGenericSend+0x7c>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10c      	bne.n	800a02a <xQueueGenericSend+0x9a>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	b672      	cpsid	i
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	b662      	cpsie	i
 800a024:	623b      	str	r3, [r7, #32]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a02a:	f001 fd0d 	bl	800ba48 <xTaskGetSchedulerState>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d102      	bne.n	800a03a <xQueueGenericSend+0xaa>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <xQueueGenericSend+0xae>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <xQueueGenericSend+0xb0>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10c      	bne.n	800a05e <xQueueGenericSend+0xce>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	b672      	cpsid	i
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	b662      	cpsie	i
 800a058:	61fb      	str	r3, [r7, #28]
}
 800a05a:	bf00      	nop
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a05e:	f002 fb45 	bl	800c6ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d302      	bcc.n	800a074 <xQueueGenericSend+0xe4>
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b02      	cmp	r3, #2
 800a072:	d129      	bne.n	800a0c8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a074:	683a      	ldr	r2, [r7, #0]
 800a076:	68b9      	ldr	r1, [r7, #8]
 800a078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a07a:	f000 fcc2 	bl	800aa02 <prvCopyDataToQueue>
 800a07e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a084:	2b00      	cmp	r3, #0
 800a086:	d010      	beq.n	800a0aa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	3324      	adds	r3, #36	; 0x24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f001 fb01 	bl	800b694 <xTaskRemoveFromEventList>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d013      	beq.n	800a0c0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a098:	4b3f      	ldr	r3, [pc, #252]	; (800a198 <xQueueGenericSend+0x208>)
 800a09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	f3bf 8f6f 	isb	sy
 800a0a8:	e00a      	b.n	800a0c0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d007      	beq.n	800a0c0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a0b0:	4b39      	ldr	r3, [pc, #228]	; (800a198 <xQueueGenericSend+0x208>)
 800a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a0c0:	f002 fb48 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e063      	b.n	800a190 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d103      	bne.n	800a0d6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0ce:	f002 fb41 	bl	800c754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e05c      	b.n	800a190 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d106      	bne.n	800a0ea <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0dc:	f107 0314 	add.w	r3, r7, #20
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f001 fb3d 	bl	800b760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0ea:	f002 fb33 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0ee:	f001 f88b 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0f2:	f002 fafb 	bl	800c6ec <vPortEnterCritical>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a102:	d103      	bne.n	800a10c <xQueueGenericSend+0x17c>
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a10e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a112:	b25b      	sxtb	r3, r3
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a118:	d103      	bne.n	800a122 <xQueueGenericSend+0x192>
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a122:	f002 fb17 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a126:	1d3a      	adds	r2, r7, #4
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4611      	mov	r1, r2
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fb2c 	bl	800b78c <xTaskCheckForTimeOut>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d124      	bne.n	800a184 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a13a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a13c:	f000 fd59 	bl	800abf2 <prvIsQueueFull>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d018      	beq.n	800a178 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a148:	3310      	adds	r3, #16
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4611      	mov	r1, r2
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fa4c 	bl	800b5ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a156:	f000 fce4 	bl	800ab22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a15a:	f001 f863 	bl	800b224 <xTaskResumeAll>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	f47f af7c 	bne.w	800a05e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a166:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <xQueueGenericSend+0x208>)
 800a168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	e772      	b.n	800a05e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a17a:	f000 fcd2 	bl	800ab22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a17e:	f001 f851 	bl	800b224 <xTaskResumeAll>
 800a182:	e76c      	b.n	800a05e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a186:	f000 fccc 	bl	800ab22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a18a:	f001 f84b 	bl	800b224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a18e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a190:	4618      	mov	r0, r3
 800a192:	3738      	adds	r7, #56	; 0x38
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08e      	sub	sp, #56	; 0x38
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10c      	bne.n	800a1ce <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b8:	b672      	cpsid	i
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	b662      	cpsie	i
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d103      	bne.n	800a1dc <xQueueGenericSendFromISR+0x40>
 800a1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d101      	bne.n	800a1e0 <xQueueGenericSendFromISR+0x44>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e000      	b.n	800a1e2 <xQueueGenericSendFromISR+0x46>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d10c      	bne.n	800a200 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	b672      	cpsid	i
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	b662      	cpsie	i
 800a1fa:	623b      	str	r3, [r7, #32]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d103      	bne.n	800a20e <xQueueGenericSendFromISR+0x72>
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <xQueueGenericSendFromISR+0x76>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueGenericSendFromISR+0x78>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10c      	bne.n	800a232 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	b672      	cpsid	i
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	b662      	cpsie	i
 800a22c:	61fb      	str	r3, [r7, #28]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a232:	f002 fb43 	bl	800c8bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a236:	f3ef 8211 	mrs	r2, BASEPRI
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	b672      	cpsid	i
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	b662      	cpsie	i
 800a24e:	61ba      	str	r2, [r7, #24]
 800a250:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a252:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a254:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <xQueueGenericSendFromISR+0xcc>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d12c      	bne.n	800a2c2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a278:	f000 fbc3 	bl	800aa02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a27c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a284:	d112      	bne.n	800a2ac <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d016      	beq.n	800a2bc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	3324      	adds	r3, #36	; 0x24
 800a292:	4618      	mov	r0, r3
 800a294:	f001 f9fe 	bl	800b694 <xTaskRemoveFromEventList>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00e      	beq.n	800a2bc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	601a      	str	r2, [r3, #0]
 800a2aa:	e007      	b.n	800a2bc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a2ac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	b25a      	sxtb	r2, r3
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a2c0:	e001      	b.n	800a2c6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2c8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a2d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3738      	adds	r7, #56	; 0x38
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b08e      	sub	sp, #56	; 0x38
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10c      	bne.n	800a30a <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f4:	b672      	cpsid	i
 800a2f6:	f383 8811 	msr	BASEPRI, r3
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	b662      	cpsie	i
 800a304:	623b      	str	r3, [r7, #32]
}
 800a306:	bf00      	nop
 800a308:	e7fe      	b.n	800a308 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00c      	beq.n	800a32c <xQueueGiveFromISR+0x50>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	b672      	cpsid	i
 800a318:	f383 8811 	msr	BASEPRI, r3
 800a31c:	f3bf 8f6f 	isb	sy
 800a320:	f3bf 8f4f 	dsb	sy
 800a324:	b662      	cpsie	i
 800a326:	61fb      	str	r3, [r7, #28]
}
 800a328:	bf00      	nop
 800a32a:	e7fe      	b.n	800a32a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d103      	bne.n	800a33c <xQueueGiveFromISR+0x60>
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <xQueueGiveFromISR+0x64>
 800a33c:	2301      	movs	r3, #1
 800a33e:	e000      	b.n	800a342 <xQueueGiveFromISR+0x66>
 800a340:	2300      	movs	r3, #0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10c      	bne.n	800a360 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34a:	b672      	cpsid	i
 800a34c:	f383 8811 	msr	BASEPRI, r3
 800a350:	f3bf 8f6f 	isb	sy
 800a354:	f3bf 8f4f 	dsb	sy
 800a358:	b662      	cpsie	i
 800a35a:	61bb      	str	r3, [r7, #24]
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a360:	f002 faac 	bl	800c8bc <vPortValidateInterruptPriority>
	__asm volatile
 800a364:	f3ef 8211 	mrs	r2, BASEPRI
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	617a      	str	r2, [r7, #20]
 800a37e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a380:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a382:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a390:	429a      	cmp	r2, r3
 800a392:	d22b      	bcs.n	800a3ec <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3a4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3ae:	d112      	bne.n	800a3d6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d016      	beq.n	800a3e6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ba:	3324      	adds	r3, #36	; 0x24
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f969 	bl	800b694 <xTaskRemoveFromEventList>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00e      	beq.n	800a3e6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00b      	beq.n	800a3e6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	e007      	b.n	800a3e6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a3d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3da:	3301      	adds	r3, #1
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	b25a      	sxtb	r2, r3
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ea:	e001      	b.n	800a3f0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f383 8811 	msr	BASEPRI, r3
}
 800a3fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3738      	adds	r7, #56	; 0x38
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
	...

0800a408 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08c      	sub	sp, #48	; 0x30
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a414:	2300      	movs	r3, #0
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10c      	bne.n	800a43c <xQueueReceive+0x34>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	b672      	cpsid	i
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	b662      	cpsie	i
 800a436:	623b      	str	r3, [r7, #32]
}
 800a438:	bf00      	nop
 800a43a:	e7fe      	b.n	800a43a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d103      	bne.n	800a44a <xQueueReceive+0x42>
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <xQueueReceive+0x46>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <xQueueReceive+0x48>
 800a44e:	2300      	movs	r3, #0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10c      	bne.n	800a46e <xQueueReceive+0x66>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	b672      	cpsid	i
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	b662      	cpsie	i
 800a468:	61fb      	str	r3, [r7, #28]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a46e:	f001 faeb 	bl	800ba48 <xTaskGetSchedulerState>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <xQueueReceive+0x76>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <xQueueReceive+0x7a>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <xQueueReceive+0x7c>
 800a482:	2300      	movs	r3, #0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10c      	bne.n	800a4a2 <xQueueReceive+0x9a>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	b672      	cpsid	i
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	b662      	cpsie	i
 800a49c:	61bb      	str	r3, [r7, #24]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4a2:	f002 f923 	bl	800c6ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01f      	beq.n	800a4f2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4b6:	f000 fb0e 	bl	800aad6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	1e5a      	subs	r2, r3, #1
 800a4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00f      	beq.n	800a4ea <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	3310      	adds	r3, #16
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f001 f8e0 	bl	800b694 <xTaskRemoveFromEventList>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d007      	beq.n	800a4ea <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a4da:	4b3d      	ldr	r3, [pc, #244]	; (800a5d0 <xQueueReceive+0x1c8>)
 800a4dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a4ea:	f002 f933 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e069      	b.n	800a5c6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d103      	bne.n	800a500 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a4f8:	f002 f92c 	bl	800c754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	e062      	b.n	800a5c6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	2b00      	cmp	r3, #0
 800a504:	d106      	bne.n	800a514 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a506:	f107 0310 	add.w	r3, r7, #16
 800a50a:	4618      	mov	r0, r3
 800a50c:	f001 f928 	bl	800b760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a510:	2301      	movs	r3, #1
 800a512:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a514:	f002 f91e 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a518:	f000 fe76 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a51c:	f002 f8e6 	bl	800c6ec <vPortEnterCritical>
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a526:	b25b      	sxtb	r3, r3
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a52c:	d103      	bne.n	800a536 <xQueueReceive+0x12e>
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a53c:	b25b      	sxtb	r3, r3
 800a53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a542:	d103      	bne.n	800a54c <xQueueReceive+0x144>
 800a544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a546:	2200      	movs	r2, #0
 800a548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a54c:	f002 f902 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a550:	1d3a      	adds	r2, r7, #4
 800a552:	f107 0310 	add.w	r3, r7, #16
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f001 f917 	bl	800b78c <xTaskCheckForTimeOut>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d123      	bne.n	800a5ac <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a564:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a566:	f000 fb2e 	bl	800abc6 <prvIsQueueEmpty>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d017      	beq.n	800a5a0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a572:	3324      	adds	r3, #36	; 0x24
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	4611      	mov	r1, r2
 800a578:	4618      	mov	r0, r3
 800a57a:	f001 f837 	bl	800b5ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a580:	f000 facf 	bl	800ab22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a584:	f000 fe4e 	bl	800b224 <xTaskResumeAll>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d189      	bne.n	800a4a2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a58e:	4b10      	ldr	r3, [pc, #64]	; (800a5d0 <xQueueReceive+0x1c8>)
 800a590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a594:	601a      	str	r2, [r3, #0]
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	e780      	b.n	800a4a2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a2:	f000 fabe 	bl	800ab22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5a6:	f000 fe3d 	bl	800b224 <xTaskResumeAll>
 800a5aa:	e77a      	b.n	800a4a2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ae:	f000 fab8 	bl	800ab22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5b2:	f000 fe37 	bl	800b224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5b8:	f000 fb05 	bl	800abc6 <prvIsQueueEmpty>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f43f af6f 	beq.w	800a4a2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3730      	adds	r7, #48	; 0x30
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	e000ed04 	.word	0xe000ed04

0800a5d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08e      	sub	sp, #56	; 0x38
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	b672      	cpsid	i
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	b662      	cpsie	i
 800a604:	623b      	str	r3, [r7, #32]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d00c      	beq.n	800a62c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	b672      	cpsid	i
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	b662      	cpsie	i
 800a626:	61fb      	str	r3, [r7, #28]
}
 800a628:	bf00      	nop
 800a62a:	e7fe      	b.n	800a62a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a62c:	f001 fa0c 	bl	800ba48 <xTaskGetSchedulerState>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d102      	bne.n	800a63c <xQueueSemaphoreTake+0x68>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <xQueueSemaphoreTake+0x6c>
 800a63c:	2301      	movs	r3, #1
 800a63e:	e000      	b.n	800a642 <xQueueSemaphoreTake+0x6e>
 800a640:	2300      	movs	r3, #0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10c      	bne.n	800a660 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	b672      	cpsid	i
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	b662      	cpsie	i
 800a65a:	61bb      	str	r3, [r7, #24]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a660:	f002 f844 	bl	800c6ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a668:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d024      	beq.n	800a6ba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a676:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d104      	bne.n	800a68a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a680:	f001 fb60 	bl	800bd44 <pvTaskIncrementMutexHeldCount>
 800a684:	4602      	mov	r2, r0
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a688:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00f      	beq.n	800a6b2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f000 fffc 	bl	800b694 <xTaskRemoveFromEventList>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6a2:	4b55      	ldr	r3, [pc, #340]	; (800a7f8 <xQueueSemaphoreTake+0x224>)
 800a6a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6b2:	f002 f84f 	bl	800c754 <vPortExitCritical>
				return pdPASS;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e099      	b.n	800a7ee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d113      	bne.n	800a6e8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00c      	beq.n	800a6e0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ca:	b672      	cpsid	i
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	b662      	cpsie	i
 800a6da:	617b      	str	r3, [r7, #20]
}
 800a6dc:	bf00      	nop
 800a6de:	e7fe      	b.n	800a6de <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a6e0:	f002 f838 	bl	800c754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	e082      	b.n	800a7ee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6ee:	f107 030c 	add.w	r3, r7, #12
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 f834 	bl	800b760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6fc:	f002 f82a 	bl	800c754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a700:	f000 fd82 	bl	800b208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a704:	f001 fff2 	bl	800c6ec <vPortEnterCritical>
 800a708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a70e:	b25b      	sxtb	r3, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a714:	d103      	bne.n	800a71e <xQueueSemaphoreTake+0x14a>
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a724:	b25b      	sxtb	r3, r3
 800a726:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a72a:	d103      	bne.n	800a734 <xQueueSemaphoreTake+0x160>
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a734:	f002 f80e 	bl	800c754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a738:	463a      	mov	r2, r7
 800a73a:	f107 030c 	add.w	r3, r7, #12
 800a73e:	4611      	mov	r1, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f001 f823 	bl	800b78c <xTaskCheckForTimeOut>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d132      	bne.n	800a7b2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a74c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a74e:	f000 fa3a 	bl	800abc6 <prvIsQueueEmpty>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d026      	beq.n	800a7a6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d109      	bne.n	800a774 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a760:	f001 ffc4 	bl	800c6ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	4618      	mov	r0, r3
 800a76a:	f001 f98b 	bl	800ba84 <xTaskPriorityInherit>
 800a76e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a770:	f001 fff0 	bl	800c754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a776:	3324      	adds	r3, #36	; 0x24
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 ff35 	bl	800b5ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a784:	f000 f9cd 	bl	800ab22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a788:	f000 fd4c 	bl	800b224 <xTaskResumeAll>
 800a78c:	4603      	mov	r3, r0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f47f af66 	bne.w	800a660 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a794:	4b18      	ldr	r3, [pc, #96]	; (800a7f8 <xQueueSemaphoreTake+0x224>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	e75c      	b.n	800a660 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a7a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7a8:	f000 f9bb 	bl	800ab22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ac:	f000 fd3a 	bl	800b224 <xTaskResumeAll>
 800a7b0:	e756      	b.n	800a660 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a7b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7b4:	f000 f9b5 	bl	800ab22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7b8:	f000 fd34 	bl	800b224 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7be:	f000 fa02 	bl	800abc6 <prvIsQueueEmpty>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f43f af4b 	beq.w	800a660 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00d      	beq.n	800a7ec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a7d0:	f001 ff8c 	bl	800c6ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7d6:	f000 f8fc 	bl	800a9d2 <prvGetDisinheritPriorityAfterTimeout>
 800a7da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fa28 	bl	800bc38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a7e8:	f001 ffb4 	bl	800c754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3738      	adds	r7, #56	; 0x38
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08e      	sub	sp, #56	; 0x38
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10c      	bne.n	800a82c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	b672      	cpsid	i
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	b662      	cpsie	i
 800a826:	623b      	str	r3, [r7, #32]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d103      	bne.n	800a83a <xQueueReceiveFromISR+0x3e>
 800a832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <xQueueReceiveFromISR+0x42>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <xQueueReceiveFromISR+0x44>
 800a83e:	2300      	movs	r3, #0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10c      	bne.n	800a85e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a848:	b672      	cpsid	i
 800a84a:	f383 8811 	msr	BASEPRI, r3
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f3bf 8f4f 	dsb	sy
 800a856:	b662      	cpsie	i
 800a858:	61fb      	str	r3, [r7, #28]
}
 800a85a:	bf00      	nop
 800a85c:	e7fe      	b.n	800a85c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a85e:	f002 f82d 	bl	800c8bc <vPortValidateInterruptPriority>
	__asm volatile
 800a862:	f3ef 8211 	mrs	r2, BASEPRI
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	b672      	cpsid	i
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	b662      	cpsie	i
 800a87a:	61ba      	str	r2, [r7, #24]
 800a87c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a87e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a886:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d02f      	beq.n	800a8ee <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a89c:	f000 f91b 	bl	800aad6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	1e5a      	subs	r2, r3, #1
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a8a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a8ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8b0:	d112      	bne.n	800a8d8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d016      	beq.n	800a8e8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8bc:	3310      	adds	r3, #16
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fee8 	bl	800b694 <xTaskRemoveFromEventList>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00e      	beq.n	800a8e8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	e007      	b.n	800a8e8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8dc:	3301      	adds	r3, #1
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	b25a      	sxtb	r2, r3
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a8ec:	e001      	b.n	800a8f2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f383 8811 	msr	BASEPRI, r3
}
 800a8fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a900:	4618      	mov	r0, r3
 800a902:	3738      	adds	r7, #56	; 0x38
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d10c      	bne.n	800a930 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a91a:	b672      	cpsid	i
 800a91c:	f383 8811 	msr	BASEPRI, r3
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	f3bf 8f4f 	dsb	sy
 800a928:	b662      	cpsie	i
 800a92a:	60bb      	str	r3, [r7, #8]
}
 800a92c:	bf00      	nop
 800a92e:	e7fe      	b.n	800a92e <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a930:	f001 fedc 	bl	800c6ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a938:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a93a:	f001 ff0b 	bl	800c754 <vPortExitCritical>

	return uxReturn;
 800a93e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10c      	bne.n	800a974 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	b672      	cpsid	i
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	b662      	cpsie	i
 800a96e:	60fb      	str	r3, [r7, #12]
}
 800a970:	bf00      	nop
 800a972:	e7fe      	b.n	800a972 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a978:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a97a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a97c:	4618      	mov	r0, r3
 800a97e:	371c      	adds	r7, #28
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr

0800a988 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10c      	bne.n	800a9b4 <vQueueDelete+0x2c>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	b672      	cpsid	i
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	b662      	cpsie	i
 800a9ae:	60bb      	str	r3, [r7, #8]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f95f 	bl	800ac78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f002 f887 	bl	800cad8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a9ca:	bf00      	nop
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d006      	beq.n	800a9f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a9ec:	60fb      	str	r3, [r7, #12]
 800a9ee:	e001      	b.n	800a9f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
	}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr

0800aa02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b086      	sub	sp, #24
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10d      	bne.n	800aa3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d14d      	bne.n	800aac4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f001 f891 	bl	800bb54 <xTaskPriorityDisinherit>
 800aa32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	609a      	str	r2, [r3, #8]
 800aa3a:	e043      	b.n	800aac4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d119      	bne.n	800aa76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6858      	ldr	r0, [r3, #4]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	f00f fbe6 	bl	801a21e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5a:	441a      	add	r2, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	429a      	cmp	r2, r3
 800aa6a:	d32b      	bcc.n	800aac4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	605a      	str	r2, [r3, #4]
 800aa74:	e026      	b.n	800aac4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	68d8      	ldr	r0, [r3, #12]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa7e:	461a      	mov	r2, r3
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	f00f fbcc 	bl	801a21e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	68da      	ldr	r2, [r3, #12]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa8e:	425b      	negs	r3, r3
 800aa90:	441a      	add	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d207      	bcs.n	800aab2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	689a      	ldr	r2, [r3, #8]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	425b      	negs	r3, r3
 800aaac:	441a      	add	r2, r3
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d105      	bne.n	800aac4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d002      	beq.n	800aac4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	1c5a      	adds	r2, r3, #1
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800aacc:	697b      	ldr	r3, [r7, #20]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d018      	beq.n	800ab1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf0:	441a      	add	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	689b      	ldr	r3, [r3, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d303      	bcc.n	800ab0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68d9      	ldr	r1, [r3, #12]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab12:	461a      	mov	r2, r3
 800ab14:	6838      	ldr	r0, [r7, #0]
 800ab16:	f00f fb82 	bl	801a21e <memcpy>
	}
}
 800ab1a:	bf00      	nop
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab2a:	f001 fddf 	bl	800c6ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab36:	e011      	b.n	800ab5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d012      	beq.n	800ab66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3324      	adds	r3, #36	; 0x24
 800ab44:	4618      	mov	r0, r3
 800ab46:	f000 fda5 	bl	800b694 <xTaskRemoveFromEventList>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab50:	f000 fe82 	bl	800b858 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dce9      	bgt.n	800ab38 <prvUnlockQueue+0x16>
 800ab64:	e000      	b.n	800ab68 <prvUnlockQueue+0x46>
					break;
 800ab66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	22ff      	movs	r2, #255	; 0xff
 800ab6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ab70:	f001 fdf0 	bl	800c754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab74:	f001 fdba 	bl	800c6ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab80:	e011      	b.n	800aba6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d012      	beq.n	800abb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3310      	adds	r3, #16
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 fd80 	bl	800b694 <xTaskRemoveFromEventList>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab9a:	f000 fe5d 	bl	800b858 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab9e:	7bbb      	ldrb	r3, [r7, #14]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dce9      	bgt.n	800ab82 <prvUnlockQueue+0x60>
 800abae:	e000      	b.n	800abb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	22ff      	movs	r2, #255	; 0xff
 800abb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800abba:	f001 fdcb 	bl	800c754 <vPortExitCritical>
}
 800abbe:	bf00      	nop
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abce:	f001 fd8d 	bl	800c6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d102      	bne.n	800abe0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abda:	2301      	movs	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	e001      	b.n	800abe4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abe4:	f001 fdb6 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800abe8:	68fb      	ldr	r3, [r7, #12]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}

0800abf2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800abf2:	b580      	push	{r7, lr}
 800abf4:	b084      	sub	sp, #16
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abfa:	f001 fd77 	bl	800c6ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d102      	bne.n	800ac10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	e001      	b.n	800ac14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac14:	f001 fd9e 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800ac18:	68fb      	ldr	r3, [r7, #12]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3710      	adds	r7, #16
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
	...

0800ac24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac2e:	2300      	movs	r3, #0
 800ac30:	60fb      	str	r3, [r7, #12]
 800ac32:	e014      	b.n	800ac5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac34:	4a0f      	ldr	r2, [pc, #60]	; (800ac74 <vQueueAddToRegistry+0x50>)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10b      	bne.n	800ac58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac40:	490c      	ldr	r1, [pc, #48]	; (800ac74 <vQueueAddToRegistry+0x50>)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac4a:	4a0a      	ldr	r2, [pc, #40]	; (800ac74 <vQueueAddToRegistry+0x50>)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	4413      	add	r3, r2
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac56:	e006      	b.n	800ac66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	60fb      	str	r3, [r7, #12]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b07      	cmp	r3, #7
 800ac62:	d9e7      	bls.n	800ac34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	20046e20 	.word	0x20046e20

0800ac78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac80:	2300      	movs	r3, #0
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	e016      	b.n	800acb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac86:	4a10      	ldr	r2, [pc, #64]	; (800acc8 <vQueueUnregisterQueue+0x50>)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d10b      	bne.n	800acae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ac96:	4a0c      	ldr	r2, [pc, #48]	; (800acc8 <vQueueUnregisterQueue+0x50>)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aca0:	4a09      	ldr	r2, [pc, #36]	; (800acc8 <vQueueUnregisterQueue+0x50>)
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	00db      	lsls	r3, r3, #3
 800aca6:	4413      	add	r3, r2
 800aca8:	2200      	movs	r2, #0
 800acaa:	605a      	str	r2, [r3, #4]
				break;
 800acac:	e006      	b.n	800acbc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3301      	adds	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b07      	cmp	r3, #7
 800acb8:	d9e5      	bls.n	800ac86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	20046e20 	.word	0x20046e20

0800accc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800acdc:	f001 fd06 	bl	800c6ec <vPortEnterCritical>
 800ace0:	697b      	ldr	r3, [r7, #20]
 800ace2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ace6:	b25b      	sxtb	r3, r3
 800ace8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acec:	d103      	bne.n	800acf6 <vQueueWaitForMessageRestricted+0x2a>
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acfc:	b25b      	sxtb	r3, r3
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad02:	d103      	bne.n	800ad0c <vQueueWaitForMessageRestricted+0x40>
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad0c:	f001 fd22 	bl	800c754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d106      	bne.n	800ad26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	3324      	adds	r3, #36	; 0x24
 800ad1c:	687a      	ldr	r2, [r7, #4]
 800ad1e:	68b9      	ldr	r1, [r7, #8]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f000 fc89 	bl	800b638 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad26:	6978      	ldr	r0, [r7, #20]
 800ad28:	f7ff fefb 	bl	800ab22 <prvUnlockQueue>
	}
 800ad2c:	bf00      	nop
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08e      	sub	sp, #56	; 0x38
 800ad38:	af04      	add	r7, sp, #16
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
 800ad40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10c      	bne.n	800ad62 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	b672      	cpsid	i
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	b662      	cpsie	i
 800ad5c:	623b      	str	r3, [r7, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10c      	bne.n	800ad82 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	b672      	cpsid	i
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	b662      	cpsie	i
 800ad7c:	61fb      	str	r3, [r7, #28]
}
 800ad7e:	bf00      	nop
 800ad80:	e7fe      	b.n	800ad80 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad82:	23bc      	movs	r3, #188	; 0xbc
 800ad84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2bbc      	cmp	r3, #188	; 0xbc
 800ad8a:	d00c      	beq.n	800ada6 <xTaskCreateStatic+0x72>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	b672      	cpsid	i
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	b662      	cpsie	i
 800ada0:	61bb      	str	r3, [r7, #24]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ada6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ada8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d01e      	beq.n	800adec <xTaskCreateStatic+0xb8>
 800adae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d01b      	beq.n	800adec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc0:	2202      	movs	r2, #2
 800adc2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adc6:	2300      	movs	r3, #0
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	9302      	str	r3, [sp, #8]
 800adce:	f107 0314 	add.w	r3, r7, #20
 800add2:	9301      	str	r3, [sp, #4]
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	68b9      	ldr	r1, [r7, #8]
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f000 f850 	bl	800ae84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ade4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ade6:	f000 f8f5 	bl	800afd4 <prvAddNewTaskToReadyList>
 800adea:	e001      	b.n	800adf0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800adf0:	697b      	ldr	r3, [r7, #20]
	}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3728      	adds	r7, #40	; 0x28
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b08c      	sub	sp, #48	; 0x30
 800adfe:	af04      	add	r7, sp, #16
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	603b      	str	r3, [r7, #0]
 800ae06:	4613      	mov	r3, r2
 800ae08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f001 fd98 	bl	800c944 <pvPortMalloc>
 800ae14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00e      	beq.n	800ae3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae1c:	20bc      	movs	r0, #188	; 0xbc
 800ae1e:	f001 fd91 	bl	800c944 <pvPortMalloc>
 800ae22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d003      	beq.n	800ae32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae2a:	69fb      	ldr	r3, [r7, #28]
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae30:	e005      	b.n	800ae3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae32:	6978      	ldr	r0, [r7, #20]
 800ae34:	f001 fe50 	bl	800cad8 <vPortFree>
 800ae38:	e001      	b.n	800ae3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae3e:	69fb      	ldr	r3, [r7, #28]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d017      	beq.n	800ae74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	2200      	movs	r2, #0
 800ae48:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae4c:	88fa      	ldrh	r2, [r7, #6]
 800ae4e:	2300      	movs	r3, #0
 800ae50:	9303      	str	r3, [sp, #12]
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	9302      	str	r3, [sp, #8]
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	9301      	str	r3, [sp, #4]
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	68b9      	ldr	r1, [r7, #8]
 800ae62:	68f8      	ldr	r0, [r7, #12]
 800ae64:	f000 f80e 	bl	800ae84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae68:	69f8      	ldr	r0, [r7, #28]
 800ae6a:	f000 f8b3 	bl	800afd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	61bb      	str	r3, [r7, #24]
 800ae72:	e002      	b.n	800ae7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae7a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3720      	adds	r7, #32
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	607a      	str	r2, [r7, #4]
 800ae90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	21a5      	movs	r1, #165	; 0xa5
 800ae9e:	f00f f9cc 	bl	801a23a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800aeac:	440b      	add	r3, r1
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	f003 0307 	and.w	r3, r3, #7
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00c      	beq.n	800aee0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeca:	b672      	cpsid	i
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	b662      	cpsie	i
 800aeda:	617b      	str	r3, [r7, #20]
}
 800aedc:	bf00      	nop
 800aede:	e7fe      	b.n	800aede <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d01f      	beq.n	800af26 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aee6:	2300      	movs	r3, #0
 800aee8:	61fb      	str	r3, [r7, #28]
 800aeea:	e012      	b.n	800af12 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	4413      	add	r3, r2
 800aef2:	7819      	ldrb	r1, [r3, #0]
 800aef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	4413      	add	r3, r2
 800aefa:	3334      	adds	r3, #52	; 0x34
 800aefc:	460a      	mov	r2, r1
 800aefe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	69fb      	ldr	r3, [r7, #28]
 800af04:	4413      	add	r3, r2
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d006      	beq.n	800af1a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	3301      	adds	r3, #1
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	2b0f      	cmp	r3, #15
 800af16:	d9e9      	bls.n	800aeec <prvInitialiseNewTask+0x68>
 800af18:	e000      	b.n	800af1c <prvInitialiseNewTask+0x98>
			{
				break;
 800af1a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af24:	e003      	b.n	800af2e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af30:	2b37      	cmp	r3, #55	; 0x37
 800af32:	d901      	bls.n	800af38 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af34:	2337      	movs	r3, #55	; 0x37
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af3c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800af44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af46:	2200      	movs	r2, #0
 800af48:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	3304      	adds	r3, #4
 800af4e:	4618      	mov	r0, r3
 800af50:	f7fe fd0c 	bl	800996c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	3318      	adds	r3, #24
 800af58:	4618      	mov	r0, r3
 800af5a:	f7fe fd07 	bl	800996c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af62:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af66:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af72:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af76:	2200      	movs	r2, #0
 800af78:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7e:	2200      	movs	r2, #0
 800af80:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	3354      	adds	r3, #84	; 0x54
 800af88:	2260      	movs	r2, #96	; 0x60
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f00f f954 	bl	801a23a <memset>
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	4a0c      	ldr	r2, [pc, #48]	; (800afc8 <prvInitialiseNewTask+0x144>)
 800af96:	659a      	str	r2, [r3, #88]	; 0x58
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	4a0c      	ldr	r2, [pc, #48]	; (800afcc <prvInitialiseNewTask+0x148>)
 800af9c:	65da      	str	r2, [r3, #92]	; 0x5c
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	4a0b      	ldr	r2, [pc, #44]	; (800afd0 <prvInitialiseNewTask+0x14c>)
 800afa2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	68f9      	ldr	r1, [r7, #12]
 800afa8:	69b8      	ldr	r0, [r7, #24]
 800afaa:	f001 fa8f 	bl	800c4cc <pxPortInitialiseStack>
 800afae:	4602      	mov	r2, r0
 800afb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afbe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc0:	bf00      	nop
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	0801e908 	.word	0x0801e908
 800afcc:	0801e928 	.word	0x0801e928
 800afd0:	0801e8e8 	.word	0x0801e8e8

0800afd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afdc:	f001 fb86 	bl	800c6ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afe0:	4b2d      	ldr	r3, [pc, #180]	; (800b098 <prvAddNewTaskToReadyList+0xc4>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	4a2c      	ldr	r2, [pc, #176]	; (800b098 <prvAddNewTaskToReadyList+0xc4>)
 800afe8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afea:	4b2c      	ldr	r3, [pc, #176]	; (800b09c <prvAddNewTaskToReadyList+0xc8>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d109      	bne.n	800b006 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aff2:	4a2a      	ldr	r2, [pc, #168]	; (800b09c <prvAddNewTaskToReadyList+0xc8>)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aff8:	4b27      	ldr	r3, [pc, #156]	; (800b098 <prvAddNewTaskToReadyList+0xc4>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d110      	bne.n	800b022 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b000:	f000 fc4e 	bl	800b8a0 <prvInitialiseTaskLists>
 800b004:	e00d      	b.n	800b022 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b006:	4b26      	ldr	r3, [pc, #152]	; (800b0a0 <prvAddNewTaskToReadyList+0xcc>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d109      	bne.n	800b022 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b00e:	4b23      	ldr	r3, [pc, #140]	; (800b09c <prvAddNewTaskToReadyList+0xc8>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	429a      	cmp	r2, r3
 800b01a:	d802      	bhi.n	800b022 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b01c:	4a1f      	ldr	r2, [pc, #124]	; (800b09c <prvAddNewTaskToReadyList+0xc8>)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b022:	4b20      	ldr	r3, [pc, #128]	; (800b0a4 <prvAddNewTaskToReadyList+0xd0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3301      	adds	r3, #1
 800b028:	4a1e      	ldr	r2, [pc, #120]	; (800b0a4 <prvAddNewTaskToReadyList+0xd0>)
 800b02a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b02c:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <prvAddNewTaskToReadyList+0xd0>)
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b038:	4b1b      	ldr	r3, [pc, #108]	; (800b0a8 <prvAddNewTaskToReadyList+0xd4>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d903      	bls.n	800b048 <prvAddNewTaskToReadyList+0x74>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b044:	4a18      	ldr	r2, [pc, #96]	; (800b0a8 <prvAddNewTaskToReadyList+0xd4>)
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04c:	4613      	mov	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4a15      	ldr	r2, [pc, #84]	; (800b0ac <prvAddNewTaskToReadyList+0xd8>)
 800b056:	441a      	add	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3304      	adds	r3, #4
 800b05c:	4619      	mov	r1, r3
 800b05e:	4610      	mov	r0, r2
 800b060:	f7fe fc91 	bl	8009986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b064:	f001 fb76 	bl	800c754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b068:	4b0d      	ldr	r3, [pc, #52]	; (800b0a0 <prvAddNewTaskToReadyList+0xcc>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00e      	beq.n	800b08e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b070:	4b0a      	ldr	r3, [pc, #40]	; (800b09c <prvAddNewTaskToReadyList+0xc8>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d207      	bcs.n	800b08e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <prvAddNewTaskToReadyList+0xdc>)
 800b080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	f3bf 8f4f 	dsb	sy
 800b08a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b08e:	bf00      	nop
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	20047334 	.word	0x20047334
 800b09c:	20046e60 	.word	0x20046e60
 800b0a0:	20047340 	.word	0x20047340
 800b0a4:	20047350 	.word	0x20047350
 800b0a8:	2004733c 	.word	0x2004733c
 800b0ac:	20046e64 	.word	0x20046e64
 800b0b0:	e000ed04 	.word	0xe000ed04

0800b0b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d019      	beq.n	800b0fa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0c6:	4b14      	ldr	r3, [pc, #80]	; (800b118 <vTaskDelay+0x64>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00c      	beq.n	800b0e8 <vTaskDelay+0x34>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d2:	b672      	cpsid	i
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	b662      	cpsie	i
 800b0e2:	60bb      	str	r3, [r7, #8]
}
 800b0e4:	bf00      	nop
 800b0e6:	e7fe      	b.n	800b0e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b0e8:	f000 f88e 	bl	800b208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fe3c 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0f4:	f000 f896 	bl	800b224 <xTaskResumeAll>
 800b0f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d107      	bne.n	800b110 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b100:	4b06      	ldr	r3, [pc, #24]	; (800b11c <vTaskDelay+0x68>)
 800b102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	f3bf 8f4f 	dsb	sy
 800b10c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b110:	bf00      	nop
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	2004735c 	.word	0x2004735c
 800b11c:	e000ed04 	.word	0xe000ed04

0800b120 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b08a      	sub	sp, #40	; 0x28
 800b124:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b126:	2300      	movs	r3, #0
 800b128:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b12a:	2300      	movs	r3, #0
 800b12c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b12e:	463a      	mov	r2, r7
 800b130:	1d39      	adds	r1, r7, #4
 800b132:	f107 0308 	add.w	r3, r7, #8
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe fbc4 	bl	80098c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	9202      	str	r2, [sp, #8]
 800b144:	9301      	str	r3, [sp, #4]
 800b146:	2300      	movs	r3, #0
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	2300      	movs	r3, #0
 800b14c:	460a      	mov	r2, r1
 800b14e:	4926      	ldr	r1, [pc, #152]	; (800b1e8 <vTaskStartScheduler+0xc8>)
 800b150:	4826      	ldr	r0, [pc, #152]	; (800b1ec <vTaskStartScheduler+0xcc>)
 800b152:	f7ff fdef 	bl	800ad34 <xTaskCreateStatic>
 800b156:	4603      	mov	r3, r0
 800b158:	4a25      	ldr	r2, [pc, #148]	; (800b1f0 <vTaskStartScheduler+0xd0>)
 800b15a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b15c:	4b24      	ldr	r3, [pc, #144]	; (800b1f0 <vTaskStartScheduler+0xd0>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b164:	2301      	movs	r3, #1
 800b166:	617b      	str	r3, [r7, #20]
 800b168:	e001      	b.n	800b16e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d102      	bne.n	800b17a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b174:	f000 fe4e 	bl	800be14 <xTimerCreateTimerTask>
 800b178:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d11d      	bne.n	800b1bc <vTaskStartScheduler+0x9c>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	b672      	cpsid	i
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	b662      	cpsie	i
 800b194:	613b      	str	r3, [r7, #16]
}
 800b196:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b198:	4b16      	ldr	r3, [pc, #88]	; (800b1f4 <vTaskStartScheduler+0xd4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	3354      	adds	r3, #84	; 0x54
 800b19e:	4a16      	ldr	r2, [pc, #88]	; (800b1f8 <vTaskStartScheduler+0xd8>)
 800b1a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b1a2:	4b16      	ldr	r3, [pc, #88]	; (800b1fc <vTaskStartScheduler+0xdc>)
 800b1a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b1aa:	4b15      	ldr	r3, [pc, #84]	; (800b200 <vTaskStartScheduler+0xe0>)
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b1b0:	4b14      	ldr	r3, [pc, #80]	; (800b204 <vTaskStartScheduler+0xe4>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b1b6:	f001 fa1b 	bl	800c5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b1ba:	e010      	b.n	800b1de <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1c2:	d10c      	bne.n	800b1de <vTaskStartScheduler+0xbe>
	__asm volatile
 800b1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c8:	b672      	cpsid	i
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	b662      	cpsie	i
 800b1d8:	60fb      	str	r3, [r7, #12]
}
 800b1da:	bf00      	nop
 800b1dc:	e7fe      	b.n	800b1dc <vTaskStartScheduler+0xbc>
}
 800b1de:	bf00      	nop
 800b1e0:	3718      	adds	r7, #24
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	0801b290 	.word	0x0801b290
 800b1ec:	0800b871 	.word	0x0800b871
 800b1f0:	20047358 	.word	0x20047358
 800b1f4:	20046e60 	.word	0x20046e60
 800b1f8:	20001a5c 	.word	0x20001a5c
 800b1fc:	20047354 	.word	0x20047354
 800b200:	20047340 	.word	0x20047340
 800b204:	20047338 	.word	0x20047338

0800b208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b20c:	4b04      	ldr	r3, [pc, #16]	; (800b220 <vTaskSuspendAll+0x18>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3301      	adds	r3, #1
 800b212:	4a03      	ldr	r2, [pc, #12]	; (800b220 <vTaskSuspendAll+0x18>)
 800b214:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b216:	bf00      	nop
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	2004735c 	.word	0x2004735c

0800b224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b22e:	2300      	movs	r3, #0
 800b230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b232:	4b43      	ldr	r3, [pc, #268]	; (800b340 <xTaskResumeAll+0x11c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10c      	bne.n	800b254 <xTaskResumeAll+0x30>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	b672      	cpsid	i
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	b662      	cpsie	i
 800b24e:	603b      	str	r3, [r7, #0]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b254:	f001 fa4a 	bl	800c6ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b258:	4b39      	ldr	r3, [pc, #228]	; (800b340 <xTaskResumeAll+0x11c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	4a38      	ldr	r2, [pc, #224]	; (800b340 <xTaskResumeAll+0x11c>)
 800b260:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b262:	4b37      	ldr	r3, [pc, #220]	; (800b340 <xTaskResumeAll+0x11c>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d162      	bne.n	800b330 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b26a:	4b36      	ldr	r3, [pc, #216]	; (800b344 <xTaskResumeAll+0x120>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d05e      	beq.n	800b330 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b272:	e02f      	b.n	800b2d4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b274:	4b34      	ldr	r3, [pc, #208]	; (800b348 <xTaskResumeAll+0x124>)
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	3318      	adds	r3, #24
 800b280:	4618      	mov	r0, r3
 800b282:	f7fe fbdd 	bl	8009a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	3304      	adds	r3, #4
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fe fbd8 	bl	8009a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b294:	4b2d      	ldr	r3, [pc, #180]	; (800b34c <xTaskResumeAll+0x128>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d903      	bls.n	800b2a4 <xTaskResumeAll+0x80>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a0:	4a2a      	ldr	r2, [pc, #168]	; (800b34c <xTaskResumeAll+0x128>)
 800b2a2:	6013      	str	r3, [r2, #0]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4a27      	ldr	r2, [pc, #156]	; (800b350 <xTaskResumeAll+0x12c>)
 800b2b2:	441a      	add	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	4610      	mov	r0, r2
 800b2bc:	f7fe fb63 	bl	8009986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c4:	4b23      	ldr	r3, [pc, #140]	; (800b354 <xTaskResumeAll+0x130>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d302      	bcc.n	800b2d4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b2ce:	4b22      	ldr	r3, [pc, #136]	; (800b358 <xTaskResumeAll+0x134>)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2d4:	4b1c      	ldr	r3, [pc, #112]	; (800b348 <xTaskResumeAll+0x124>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1cb      	bne.n	800b274 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2e2:	f000 fb81 	bl	800b9e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b2e6:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <xTaskResumeAll+0x138>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d010      	beq.n	800b314 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2f2:	f000 f859 	bl	800b3a8 <xTaskIncrementTick>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b2fc:	4b16      	ldr	r3, [pc, #88]	; (800b358 <xTaskResumeAll+0x134>)
 800b2fe:	2201      	movs	r2, #1
 800b300:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	3b01      	subs	r3, #1
 800b306:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1f1      	bne.n	800b2f2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <xTaskResumeAll+0x138>)
 800b310:	2200      	movs	r2, #0
 800b312:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b314:	4b10      	ldr	r3, [pc, #64]	; (800b358 <xTaskResumeAll+0x134>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d009      	beq.n	800b330 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b320:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <xTaskResumeAll+0x13c>)
 800b322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b326:	601a      	str	r2, [r3, #0]
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b330:	f001 fa10 	bl	800c754 <vPortExitCritical>

	return xAlreadyYielded;
 800b334:	68bb      	ldr	r3, [r7, #8]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	2004735c 	.word	0x2004735c
 800b344:	20047334 	.word	0x20047334
 800b348:	200472f4 	.word	0x200472f4
 800b34c:	2004733c 	.word	0x2004733c
 800b350:	20046e64 	.word	0x20046e64
 800b354:	20046e60 	.word	0x20046e60
 800b358:	20047348 	.word	0x20047348
 800b35c:	20047344 	.word	0x20047344
 800b360:	e000ed04 	.word	0xe000ed04

0800b364 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b36a:	4b05      	ldr	r3, [pc, #20]	; (800b380 <xTaskGetTickCount+0x1c>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b370:	687b      	ldr	r3, [r7, #4]
}
 800b372:	4618      	mov	r0, r3
 800b374:	370c      	adds	r7, #12
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	20047338 	.word	0x20047338

0800b384 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b38a:	f001 fa97 	bl	800c8bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b38e:	2300      	movs	r3, #0
 800b390:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b392:	4b04      	ldr	r3, [pc, #16]	; (800b3a4 <xTaskGetTickCountFromISR+0x20>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b398:	683b      	ldr	r3, [r7, #0]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3708      	adds	r7, #8
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20047338 	.word	0x20047338

0800b3a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b2:	4b50      	ldr	r3, [pc, #320]	; (800b4f4 <xTaskIncrementTick+0x14c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	f040 808b 	bne.w	800b4d2 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b3bc:	4b4e      	ldr	r3, [pc, #312]	; (800b4f8 <xTaskIncrementTick+0x150>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b3c4:	4a4c      	ldr	r2, [pc, #304]	; (800b4f8 <xTaskIncrementTick+0x150>)
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d122      	bne.n	800b416 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b3d0:	4b4a      	ldr	r3, [pc, #296]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00c      	beq.n	800b3f4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	b672      	cpsid	i
 800b3e0:	f383 8811 	msr	BASEPRI, r3
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	f3bf 8f4f 	dsb	sy
 800b3ec:	b662      	cpsie	i
 800b3ee:	603b      	str	r3, [r7, #0]
}
 800b3f0:	bf00      	nop
 800b3f2:	e7fe      	b.n	800b3f2 <xTaskIncrementTick+0x4a>
 800b3f4:	4b41      	ldr	r3, [pc, #260]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	60fb      	str	r3, [r7, #12]
 800b3fa:	4b41      	ldr	r3, [pc, #260]	; (800b500 <xTaskIncrementTick+0x158>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a3f      	ldr	r2, [pc, #252]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	4a3f      	ldr	r2, [pc, #252]	; (800b500 <xTaskIncrementTick+0x158>)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	4b3e      	ldr	r3, [pc, #248]	; (800b504 <xTaskIncrementTick+0x15c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	4a3d      	ldr	r2, [pc, #244]	; (800b504 <xTaskIncrementTick+0x15c>)
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	f000 fae9 	bl	800b9e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b416:	4b3c      	ldr	r3, [pc, #240]	; (800b508 <xTaskIncrementTick+0x160>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d349      	bcc.n	800b4b4 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b420:	4b36      	ldr	r3, [pc, #216]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d104      	bne.n	800b434 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b42a:	4b37      	ldr	r3, [pc, #220]	; (800b508 <xTaskIncrementTick+0x160>)
 800b42c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b430:	601a      	str	r2, [r3, #0]
					break;
 800b432:	e03f      	b.n	800b4b4 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b434:	4b31      	ldr	r3, [pc, #196]	; (800b4fc <xTaskIncrementTick+0x154>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d203      	bcs.n	800b454 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b44c:	4a2e      	ldr	r2, [pc, #184]	; (800b508 <xTaskIncrementTick+0x160>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b452:	e02f      	b.n	800b4b4 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	3304      	adds	r3, #4
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe faf1 	bl	8009a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b462:	2b00      	cmp	r3, #0
 800b464:	d004      	beq.n	800b470 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	3318      	adds	r3, #24
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fe fae8 	bl	8009a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b474:	4b25      	ldr	r3, [pc, #148]	; (800b50c <xTaskIncrementTick+0x164>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d903      	bls.n	800b484 <xTaskIncrementTick+0xdc>
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	4a22      	ldr	r2, [pc, #136]	; (800b50c <xTaskIncrementTick+0x164>)
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b488:	4613      	mov	r3, r2
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	4a1f      	ldr	r2, [pc, #124]	; (800b510 <xTaskIncrementTick+0x168>)
 800b492:	441a      	add	r2, r3
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7fe fa73 	bl	8009986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	4b1b      	ldr	r3, [pc, #108]	; (800b514 <xTaskIncrementTick+0x16c>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d3b8      	bcc.n	800b420 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4b2:	e7b5      	b.n	800b420 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4b4:	4b17      	ldr	r3, [pc, #92]	; (800b514 <xTaskIncrementTick+0x16c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4ba:	4915      	ldr	r1, [pc, #84]	; (800b510 <xTaskIncrementTick+0x168>)
 800b4bc:	4613      	mov	r3, r2
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	4413      	add	r3, r2
 800b4c2:	009b      	lsls	r3, r3, #2
 800b4c4:	440b      	add	r3, r1
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d907      	bls.n	800b4dc <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	617b      	str	r3, [r7, #20]
 800b4d0:	e004      	b.n	800b4dc <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b4d2:	4b11      	ldr	r3, [pc, #68]	; (800b518 <xTaskIncrementTick+0x170>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	4a0f      	ldr	r2, [pc, #60]	; (800b518 <xTaskIncrementTick+0x170>)
 800b4da:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b4dc:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <xTaskIncrementTick+0x174>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d001      	beq.n	800b4e8 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b4e8:	697b      	ldr	r3, [r7, #20]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2004735c 	.word	0x2004735c
 800b4f8:	20047338 	.word	0x20047338
 800b4fc:	200472ec 	.word	0x200472ec
 800b500:	200472f0 	.word	0x200472f0
 800b504:	2004734c 	.word	0x2004734c
 800b508:	20047354 	.word	0x20047354
 800b50c:	2004733c 	.word	0x2004733c
 800b510:	20046e64 	.word	0x20046e64
 800b514:	20046e60 	.word	0x20046e60
 800b518:	20047344 	.word	0x20047344
 800b51c:	20047348 	.word	0x20047348

0800b520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b526:	4b2b      	ldr	r3, [pc, #172]	; (800b5d4 <vTaskSwitchContext+0xb4>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b52e:	4b2a      	ldr	r3, [pc, #168]	; (800b5d8 <vTaskSwitchContext+0xb8>)
 800b530:	2201      	movs	r2, #1
 800b532:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b534:	e048      	b.n	800b5c8 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b536:	4b28      	ldr	r3, [pc, #160]	; (800b5d8 <vTaskSwitchContext+0xb8>)
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b53c:	4b27      	ldr	r3, [pc, #156]	; (800b5dc <vTaskSwitchContext+0xbc>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	60fb      	str	r3, [r7, #12]
 800b542:	e012      	b.n	800b56a <vTaskSwitchContext+0x4a>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10c      	bne.n	800b564 <vTaskSwitchContext+0x44>
	__asm volatile
 800b54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54e:	b672      	cpsid	i
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	b662      	cpsie	i
 800b55e:	607b      	str	r3, [r7, #4]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <vTaskSwitchContext+0x42>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3b01      	subs	r3, #1
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	491d      	ldr	r1, [pc, #116]	; (800b5e0 <vTaskSwitchContext+0xc0>)
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	4613      	mov	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	440b      	add	r3, r1
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0e2      	beq.n	800b544 <vTaskSwitchContext+0x24>
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	4613      	mov	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	4413      	add	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4a15      	ldr	r2, [pc, #84]	; (800b5e0 <vTaskSwitchContext+0xc0>)
 800b58a:	4413      	add	r3, r2
 800b58c:	60bb      	str	r3, [r7, #8]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	605a      	str	r2, [r3, #4]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	685a      	ldr	r2, [r3, #4]
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d104      	bne.n	800b5ae <vTaskSwitchContext+0x8e>
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	605a      	str	r2, [r3, #4]
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	4a0b      	ldr	r2, [pc, #44]	; (800b5e4 <vTaskSwitchContext+0xc4>)
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	4a08      	ldr	r2, [pc, #32]	; (800b5dc <vTaskSwitchContext+0xbc>)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b5be:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <vTaskSwitchContext+0xc4>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	3354      	adds	r3, #84	; 0x54
 800b5c4:	4a08      	ldr	r2, [pc, #32]	; (800b5e8 <vTaskSwitchContext+0xc8>)
 800b5c6:	6013      	str	r3, [r2, #0]
}
 800b5c8:	bf00      	nop
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	2004735c 	.word	0x2004735c
 800b5d8:	20047348 	.word	0x20047348
 800b5dc:	2004733c 	.word	0x2004733c
 800b5e0:	20046e64 	.word	0x20046e64
 800b5e4:	20046e60 	.word	0x20046e60
 800b5e8:	20001a5c 	.word	0x20001a5c

0800b5ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d10c      	bne.n	800b616 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b600:	b672      	cpsid	i
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	b662      	cpsie	i
 800b610:	60fb      	str	r3, [r7, #12]
}
 800b612:	bf00      	nop
 800b614:	e7fe      	b.n	800b614 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b616:	4b07      	ldr	r3, [pc, #28]	; (800b634 <vTaskPlaceOnEventList+0x48>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3318      	adds	r3, #24
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7fe f9d5 	bl	80099ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b624:	2101      	movs	r1, #1
 800b626:	6838      	ldr	r0, [r7, #0]
 800b628:	f000 fba0 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20046e60 	.word	0x20046e60

0800b638 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10c      	bne.n	800b664 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64e:	b672      	cpsid	i
 800b650:	f383 8811 	msr	BASEPRI, r3
 800b654:	f3bf 8f6f 	isb	sy
 800b658:	f3bf 8f4f 	dsb	sy
 800b65c:	b662      	cpsie	i
 800b65e:	617b      	str	r3, [r7, #20]
}
 800b660:	bf00      	nop
 800b662:	e7fe      	b.n	800b662 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b664:	4b0a      	ldr	r3, [pc, #40]	; (800b690 <vTaskPlaceOnEventListRestricted+0x58>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3318      	adds	r3, #24
 800b66a:	4619      	mov	r1, r3
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7fe f98a 	bl	8009986 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d002      	beq.n	800b67e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b67c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	68b8      	ldr	r0, [r7, #8]
 800b682:	f000 fb73 	bl	800bd6c <prvAddCurrentTaskToDelayedList>
	}
 800b686:	bf00      	nop
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20046e60 	.word	0x20046e60

0800b694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10c      	bne.n	800b6c4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ae:	b672      	cpsid	i
 800b6b0:	f383 8811 	msr	BASEPRI, r3
 800b6b4:	f3bf 8f6f 	isb	sy
 800b6b8:	f3bf 8f4f 	dsb	sy
 800b6bc:	b662      	cpsie	i
 800b6be:	60fb      	str	r3, [r7, #12]
}
 800b6c0:	bf00      	nop
 800b6c2:	e7fe      	b.n	800b6c2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe f9b9 	bl	8009a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ce:	4b1e      	ldr	r3, [pc, #120]	; (800b748 <xTaskRemoveFromEventList+0xb4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d11d      	bne.n	800b712 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	3304      	adds	r3, #4
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe f9b0 	bl	8009a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e4:	4b19      	ldr	r3, [pc, #100]	; (800b74c <xTaskRemoveFromEventList+0xb8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d903      	bls.n	800b6f4 <xTaskRemoveFromEventList+0x60>
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	4a16      	ldr	r2, [pc, #88]	; (800b74c <xTaskRemoveFromEventList+0xb8>)
 800b6f2:	6013      	str	r3, [r2, #0]
 800b6f4:	693b      	ldr	r3, [r7, #16]
 800b6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4413      	add	r3, r2
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	4a13      	ldr	r2, [pc, #76]	; (800b750 <xTaskRemoveFromEventList+0xbc>)
 800b702:	441a      	add	r2, r3
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	3304      	adds	r3, #4
 800b708:	4619      	mov	r1, r3
 800b70a:	4610      	mov	r0, r2
 800b70c:	f7fe f93b 	bl	8009986 <vListInsertEnd>
 800b710:	e005      	b.n	800b71e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	3318      	adds	r3, #24
 800b716:	4619      	mov	r1, r3
 800b718:	480e      	ldr	r0, [pc, #56]	; (800b754 <xTaskRemoveFromEventList+0xc0>)
 800b71a:	f7fe f934 	bl	8009986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b722:	4b0d      	ldr	r3, [pc, #52]	; (800b758 <xTaskRemoveFromEventList+0xc4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b728:	429a      	cmp	r2, r3
 800b72a:	d905      	bls.n	800b738 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b72c:	2301      	movs	r3, #1
 800b72e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b730:	4b0a      	ldr	r3, [pc, #40]	; (800b75c <xTaskRemoveFromEventList+0xc8>)
 800b732:	2201      	movs	r2, #1
 800b734:	601a      	str	r2, [r3, #0]
 800b736:	e001      	b.n	800b73c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b73c:	697b      	ldr	r3, [r7, #20]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3718      	adds	r7, #24
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	2004735c 	.word	0x2004735c
 800b74c:	2004733c 	.word	0x2004733c
 800b750:	20046e64 	.word	0x20046e64
 800b754:	200472f4 	.word	0x200472f4
 800b758:	20046e60 	.word	0x20046e60
 800b75c:	20047348 	.word	0x20047348

0800b760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b768:	4b06      	ldr	r3, [pc, #24]	; (800b784 <vTaskInternalSetTimeOutState+0x24>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b770:	4b05      	ldr	r3, [pc, #20]	; (800b788 <vTaskInternalSetTimeOutState+0x28>)
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	605a      	str	r2, [r3, #4]
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	2004734c 	.word	0x2004734c
 800b788:	20047338 	.word	0x20047338

0800b78c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d10c      	bne.n	800b7b6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	b672      	cpsid	i
 800b7a2:	f383 8811 	msr	BASEPRI, r3
 800b7a6:	f3bf 8f6f 	isb	sy
 800b7aa:	f3bf 8f4f 	dsb	sy
 800b7ae:	b662      	cpsie	i
 800b7b0:	613b      	str	r3, [r7, #16]
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d10c      	bne.n	800b7d6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b7bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c0:	b672      	cpsid	i
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	b662      	cpsie	i
 800b7d0:	60fb      	str	r3, [r7, #12]
}
 800b7d2:	bf00      	nop
 800b7d4:	e7fe      	b.n	800b7d4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b7d6:	f000 ff89 	bl	800c6ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b7da:	4b1d      	ldr	r3, [pc, #116]	; (800b850 <xTaskCheckForTimeOut+0xc4>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	69ba      	ldr	r2, [r7, #24]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7f2:	d102      	bne.n	800b7fa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	61fb      	str	r3, [r7, #28]
 800b7f8:	e023      	b.n	800b842 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	4b15      	ldr	r3, [pc, #84]	; (800b854 <xTaskCheckForTimeOut+0xc8>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	429a      	cmp	r2, r3
 800b804:	d007      	beq.n	800b816 <xTaskCheckForTimeOut+0x8a>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	69ba      	ldr	r2, [r7, #24]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d302      	bcc.n	800b816 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b810:	2301      	movs	r3, #1
 800b812:	61fb      	str	r3, [r7, #28]
 800b814:	e015      	b.n	800b842 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	697a      	ldr	r2, [r7, #20]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d20b      	bcs.n	800b838 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	1ad2      	subs	r2, r2, r3
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f7ff ff97 	bl	800b760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b832:	2300      	movs	r3, #0
 800b834:	61fb      	str	r3, [r7, #28]
 800b836:	e004      	b.n	800b842 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b83e:	2301      	movs	r3, #1
 800b840:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b842:	f000 ff87 	bl	800c754 <vPortExitCritical>

	return xReturn;
 800b846:	69fb      	ldr	r3, [r7, #28]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3720      	adds	r7, #32
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	20047338 	.word	0x20047338
 800b854:	2004734c 	.word	0x2004734c

0800b858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b858:	b480      	push	{r7}
 800b85a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b85c:	4b03      	ldr	r3, [pc, #12]	; (800b86c <vTaskMissedYield+0x14>)
 800b85e:	2201      	movs	r2, #1
 800b860:	601a      	str	r2, [r3, #0]
}
 800b862:	bf00      	nop
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	20047348 	.word	0x20047348

0800b870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b878:	f000 f852 	bl	800b920 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <prvIdleTask+0x28>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d9f9      	bls.n	800b878 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b884:	4b05      	ldr	r3, [pc, #20]	; (800b89c <prvIdleTask+0x2c>)
 800b886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88a:	601a      	str	r2, [r3, #0]
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b894:	e7f0      	b.n	800b878 <prvIdleTask+0x8>
 800b896:	bf00      	nop
 800b898:	20046e64 	.word	0x20046e64
 800b89c:	e000ed04 	.word	0xe000ed04

0800b8a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	607b      	str	r3, [r7, #4]
 800b8aa:	e00c      	b.n	800b8c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	4613      	mov	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4a12      	ldr	r2, [pc, #72]	; (800b900 <prvInitialiseTaskLists+0x60>)
 800b8b8:	4413      	add	r3, r2
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe f836 	bl	800992c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	607b      	str	r3, [r7, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b37      	cmp	r3, #55	; 0x37
 800b8ca:	d9ef      	bls.n	800b8ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b8cc:	480d      	ldr	r0, [pc, #52]	; (800b904 <prvInitialiseTaskLists+0x64>)
 800b8ce:	f7fe f82d 	bl	800992c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b8d2:	480d      	ldr	r0, [pc, #52]	; (800b908 <prvInitialiseTaskLists+0x68>)
 800b8d4:	f7fe f82a 	bl	800992c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b8d8:	480c      	ldr	r0, [pc, #48]	; (800b90c <prvInitialiseTaskLists+0x6c>)
 800b8da:	f7fe f827 	bl	800992c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b8de:	480c      	ldr	r0, [pc, #48]	; (800b910 <prvInitialiseTaskLists+0x70>)
 800b8e0:	f7fe f824 	bl	800992c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b8e4:	480b      	ldr	r0, [pc, #44]	; (800b914 <prvInitialiseTaskLists+0x74>)
 800b8e6:	f7fe f821 	bl	800992c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b8ea:	4b0b      	ldr	r3, [pc, #44]	; (800b918 <prvInitialiseTaskLists+0x78>)
 800b8ec:	4a05      	ldr	r2, [pc, #20]	; (800b904 <prvInitialiseTaskLists+0x64>)
 800b8ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	; (800b91c <prvInitialiseTaskLists+0x7c>)
 800b8f2:	4a05      	ldr	r2, [pc, #20]	; (800b908 <prvInitialiseTaskLists+0x68>)
 800b8f4:	601a      	str	r2, [r3, #0]
}
 800b8f6:	bf00      	nop
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20046e64 	.word	0x20046e64
 800b904:	200472c4 	.word	0x200472c4
 800b908:	200472d8 	.word	0x200472d8
 800b90c:	200472f4 	.word	0x200472f4
 800b910:	20047308 	.word	0x20047308
 800b914:	20047320 	.word	0x20047320
 800b918:	200472ec 	.word	0x200472ec
 800b91c:	200472f0 	.word	0x200472f0

0800b920 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b926:	e019      	b.n	800b95c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b928:	f000 fee0 	bl	800c6ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b92c:	4b10      	ldr	r3, [pc, #64]	; (800b970 <prvCheckTasksWaitingTermination+0x50>)
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3304      	adds	r3, #4
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe f881 	bl	8009a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b93e:	4b0d      	ldr	r3, [pc, #52]	; (800b974 <prvCheckTasksWaitingTermination+0x54>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3b01      	subs	r3, #1
 800b944:	4a0b      	ldr	r2, [pc, #44]	; (800b974 <prvCheckTasksWaitingTermination+0x54>)
 800b946:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b948:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <prvCheckTasksWaitingTermination+0x58>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	4a0a      	ldr	r2, [pc, #40]	; (800b978 <prvCheckTasksWaitingTermination+0x58>)
 800b950:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b952:	f000 feff 	bl	800c754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 f810 	bl	800b97c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <prvCheckTasksWaitingTermination+0x58>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d1e1      	bne.n	800b928 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop
 800b968:	3708      	adds	r7, #8
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	20047308 	.word	0x20047308
 800b974:	20047334 	.word	0x20047334
 800b978:	2004731c 	.word	0x2004731c

0800b97c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3354      	adds	r3, #84	; 0x54
 800b988:	4618      	mov	r0, r3
 800b98a:	f00e fd57 	bl	801a43c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b994:	2b00      	cmp	r3, #0
 800b996:	d108      	bne.n	800b9aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b99c:	4618      	mov	r0, r3
 800b99e:	f001 f89b 	bl	800cad8 <vPortFree>
				vPortFree( pxTCB );
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f001 f898 	bl	800cad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9a8:	e01a      	b.n	800b9e0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d103      	bne.n	800b9bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f001 f88f 	bl	800cad8 <vPortFree>
	}
 800b9ba:	e011      	b.n	800b9e0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	d00c      	beq.n	800b9e0 <prvDeleteTCB+0x64>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	b672      	cpsid	i
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	b662      	cpsie	i
 800b9da:	60fb      	str	r3, [r7, #12]
}
 800b9dc:	bf00      	nop
 800b9de:	e7fe      	b.n	800b9de <prvDeleteTCB+0x62>
	}
 800b9e0:	bf00      	nop
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9ee:	4b0c      	ldr	r3, [pc, #48]	; (800ba20 <prvResetNextTaskUnblockTime+0x38>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d104      	bne.n	800ba02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ba24 <prvResetNextTaskUnblockTime+0x3c>)
 800b9fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba00:	e008      	b.n	800ba14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba02:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <prvResetNextTaskUnblockTime+0x38>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	4a04      	ldr	r2, [pc, #16]	; (800ba24 <prvResetNextTaskUnblockTime+0x3c>)
 800ba12:	6013      	str	r3, [r2, #0]
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	200472ec 	.word	0x200472ec
 800ba24:	20047354 	.word	0x20047354

0800ba28 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ba2e:	4b05      	ldr	r3, [pc, #20]	; (800ba44 <xTaskGetCurrentTaskHandle+0x1c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ba34:	687b      	ldr	r3, [r7, #4]
	}
 800ba36:	4618      	mov	r0, r3
 800ba38:	370c      	adds	r7, #12
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20046e60 	.word	0x20046e60

0800ba48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba4e:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <xTaskGetSchedulerState+0x34>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d102      	bne.n	800ba5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba56:	2301      	movs	r3, #1
 800ba58:	607b      	str	r3, [r7, #4]
 800ba5a:	e008      	b.n	800ba6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba5c:	4b08      	ldr	r3, [pc, #32]	; (800ba80 <xTaskGetSchedulerState+0x38>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d102      	bne.n	800ba6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba64:	2302      	movs	r3, #2
 800ba66:	607b      	str	r3, [r7, #4]
 800ba68:	e001      	b.n	800ba6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba6e:	687b      	ldr	r3, [r7, #4]
	}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr
 800ba7c:	20047340 	.word	0x20047340
 800ba80:	2004735c 	.word	0x2004735c

0800ba84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d051      	beq.n	800bb3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9e:	4b2a      	ldr	r3, [pc, #168]	; (800bb48 <xTaskPriorityInherit+0xc4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d241      	bcs.n	800bb2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	2b00      	cmp	r3, #0
 800baae:	db06      	blt.n	800babe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bab0:	4b25      	ldr	r3, [pc, #148]	; (800bb48 <xTaskPriorityInherit+0xc4>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	6959      	ldr	r1, [r3, #20]
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac6:	4613      	mov	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4413      	add	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4a1f      	ldr	r2, [pc, #124]	; (800bb4c <xTaskPriorityInherit+0xc8>)
 800bad0:	4413      	add	r3, r2
 800bad2:	4299      	cmp	r1, r3
 800bad4:	d122      	bne.n	800bb1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	3304      	adds	r3, #4
 800bada:	4618      	mov	r0, r3
 800badc:	f7fd ffb0 	bl	8009a40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bae0:	4b19      	ldr	r3, [pc, #100]	; (800bb48 <xTaskPriorityInherit+0xc4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baee:	4b18      	ldr	r3, [pc, #96]	; (800bb50 <xTaskPriorityInherit+0xcc>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d903      	bls.n	800bafe <xTaskPriorityInherit+0x7a>
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafa:	4a15      	ldr	r2, [pc, #84]	; (800bb50 <xTaskPriorityInherit+0xcc>)
 800bafc:	6013      	str	r3, [r2, #0]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4a10      	ldr	r2, [pc, #64]	; (800bb4c <xTaskPriorityInherit+0xc8>)
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	3304      	adds	r3, #4
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f7fd ff36 	bl	8009986 <vListInsertEnd>
 800bb1a:	e004      	b.n	800bb26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <xTaskPriorityInherit+0xc4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	60fb      	str	r3, [r7, #12]
 800bb2a:	e008      	b.n	800bb3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <xTaskPriorityInherit+0xc4>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d201      	bcs.n	800bb3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20046e60 	.word	0x20046e60
 800bb4c:	20046e64 	.word	0x20046e64
 800bb50:	2004733c 	.word	0x2004733c

0800bb54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb60:	2300      	movs	r3, #0
 800bb62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d05a      	beq.n	800bc20 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb6a:	4b30      	ldr	r3, [pc, #192]	; (800bc2c <xTaskPriorityDisinherit+0xd8>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	693a      	ldr	r2, [r7, #16]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d00c      	beq.n	800bb8e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bb74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb78:	b672      	cpsid	i
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	b662      	cpsie	i
 800bb88:	60fb      	str	r3, [r7, #12]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d10c      	bne.n	800bbb0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bb96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9a:	b672      	cpsid	i
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	b662      	cpsie	i
 800bbaa:	60bb      	str	r3, [r7, #8]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbb4:	1e5a      	subs	r2, r3, #1
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d02c      	beq.n	800bc20 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d128      	bne.n	800bc20 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	3304      	adds	r3, #4
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fd ff34 	bl	8009a40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf0:	4b0f      	ldr	r3, [pc, #60]	; (800bc30 <xTaskPriorityDisinherit+0xdc>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d903      	bls.n	800bc00 <xTaskPriorityDisinherit+0xac>
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfc:	4a0c      	ldr	r2, [pc, #48]	; (800bc30 <xTaskPriorityDisinherit+0xdc>)
 800bbfe:	6013      	str	r3, [r2, #0]
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc04:	4613      	mov	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4a09      	ldr	r2, [pc, #36]	; (800bc34 <xTaskPriorityDisinherit+0xe0>)
 800bc0e:	441a      	add	r2, r3
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	3304      	adds	r3, #4
 800bc14:	4619      	mov	r1, r3
 800bc16:	4610      	mov	r0, r2
 800bc18:	f7fd feb5 	bl	8009986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc20:	697b      	ldr	r3, [r7, #20]
	}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3718      	adds	r7, #24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20046e60 	.word	0x20046e60
 800bc30:	2004733c 	.word	0x2004733c
 800bc34:	20046e64 	.word	0x20046e64

0800bc38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b088      	sub	sp, #32
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc46:	2301      	movs	r3, #1
 800bc48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d06e      	beq.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10c      	bne.n	800bc72 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	b672      	cpsid	i
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	b662      	cpsie	i
 800bc6c:	60fb      	str	r3, [r7, #12]
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d902      	bls.n	800bc82 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	61fb      	str	r3, [r7, #28]
 800bc80:	e002      	b.n	800bc88 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc82:	69bb      	ldr	r3, [r7, #24]
 800bc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8c:	69fa      	ldr	r2, [r7, #28]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d04d      	beq.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d148      	bne.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bc9c:	4b26      	ldr	r3, [pc, #152]	; (800bd38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d10c      	bne.n	800bcc0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcaa:	b672      	cpsid	i
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	b662      	cpsie	i
 800bcba:	60bb      	str	r3, [r7, #8]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcc6:	69bb      	ldr	r3, [r7, #24]
 800bcc8:	69fa      	ldr	r2, [r7, #28]
 800bcca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bccc:	69bb      	ldr	r3, [r7, #24]
 800bcce:	699b      	ldr	r3, [r3, #24]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	db04      	blt.n	800bcde <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	6959      	ldr	r1, [r3, #20]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	4613      	mov	r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	4413      	add	r3, r2
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	4a13      	ldr	r2, [pc, #76]	; (800bd3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bcee:	4413      	add	r3, r2
 800bcf0:	4299      	cmp	r1, r3
 800bcf2:	d11c      	bne.n	800bd2e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	3304      	adds	r3, #4
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f7fd fea1 	bl	8009a40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd02:	4b0f      	ldr	r3, [pc, #60]	; (800bd40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d903      	bls.n	800bd12 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800bd0a:	69bb      	ldr	r3, [r7, #24]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	4a0c      	ldr	r2, [pc, #48]	; (800bd40 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd16:	4613      	mov	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4a07      	ldr	r2, [pc, #28]	; (800bd3c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd20:	441a      	add	r2, r3
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4619      	mov	r1, r3
 800bd28:	4610      	mov	r0, r2
 800bd2a:	f7fd fe2c 	bl	8009986 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd2e:	bf00      	nop
 800bd30:	3720      	adds	r7, #32
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20046e60 	.word	0x20046e60
 800bd3c:	20046e64 	.word	0x20046e64
 800bd40:	2004733c 	.word	0x2004733c

0800bd44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd44:	b480      	push	{r7}
 800bd46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd50:	4b05      	ldr	r3, [pc, #20]	; (800bd68 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd56:	3201      	adds	r2, #1
 800bd58:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bd5a:	4b03      	ldr	r3, [pc, #12]	; (800bd68 <pvTaskIncrementMutexHeldCount+0x24>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
	}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	20046e60 	.word	0x20046e60

0800bd6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd76:	4b21      	ldr	r3, [pc, #132]	; (800bdfc <prvAddCurrentTaskToDelayedList+0x90>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd7c:	4b20      	ldr	r3, [pc, #128]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3304      	adds	r3, #4
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fd fe5c 	bl	8009a40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd8e:	d10a      	bne.n	800bda6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d007      	beq.n	800bda6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd96:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3304      	adds	r3, #4
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4819      	ldr	r0, [pc, #100]	; (800be04 <prvAddCurrentTaskToDelayedList+0x98>)
 800bda0:	f7fd fdf1 	bl	8009986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bda4:	e026      	b.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4413      	add	r3, r2
 800bdac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdae:	4b14      	ldr	r3, [pc, #80]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdb6:	68ba      	ldr	r2, [r7, #8]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d209      	bcs.n	800bdd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdbe:	4b12      	ldr	r3, [pc, #72]	; (800be08 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	4b0f      	ldr	r3, [pc, #60]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	4619      	mov	r1, r3
 800bdca:	4610      	mov	r0, r2
 800bdcc:	f7fd fdff 	bl	80099ce <vListInsert>
}
 800bdd0:	e010      	b.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd2:	4b0e      	ldr	r3, [pc, #56]	; (800be0c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b0a      	ldr	r3, [pc, #40]	; (800be00 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4619      	mov	r1, r3
 800bdde:	4610      	mov	r0, r2
 800bde0:	f7fd fdf5 	bl	80099ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bde4:	4b0a      	ldr	r3, [pc, #40]	; (800be10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d202      	bcs.n	800bdf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdee:	4a08      	ldr	r2, [pc, #32]	; (800be10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	6013      	str	r3, [r2, #0]
}
 800bdf4:	bf00      	nop
 800bdf6:	3710      	adds	r7, #16
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	20047338 	.word	0x20047338
 800be00:	20046e60 	.word	0x20046e60
 800be04:	20047320 	.word	0x20047320
 800be08:	200472f0 	.word	0x200472f0
 800be0c:	200472ec 	.word	0x200472ec
 800be10:	20047354 	.word	0x20047354

0800be14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b08a      	sub	sp, #40	; 0x28
 800be18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be1a:	2300      	movs	r3, #0
 800be1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be1e:	f000 fb15 	bl	800c44c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be22:	4b1d      	ldr	r3, [pc, #116]	; (800be98 <xTimerCreateTimerTask+0x84>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d021      	beq.n	800be6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be2e:	2300      	movs	r3, #0
 800be30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be32:	1d3a      	adds	r2, r7, #4
 800be34:	f107 0108 	add.w	r1, r7, #8
 800be38:	f107 030c 	add.w	r3, r7, #12
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fd fd5b 	bl	80098f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be42:	6879      	ldr	r1, [r7, #4]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	9202      	str	r2, [sp, #8]
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	2302      	movs	r3, #2
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	2300      	movs	r3, #0
 800be52:	460a      	mov	r2, r1
 800be54:	4911      	ldr	r1, [pc, #68]	; (800be9c <xTimerCreateTimerTask+0x88>)
 800be56:	4812      	ldr	r0, [pc, #72]	; (800bea0 <xTimerCreateTimerTask+0x8c>)
 800be58:	f7fe ff6c 	bl	800ad34 <xTaskCreateStatic>
 800be5c:	4603      	mov	r3, r0
 800be5e:	4a11      	ldr	r2, [pc, #68]	; (800bea4 <xTimerCreateTimerTask+0x90>)
 800be60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be62:	4b10      	ldr	r3, [pc, #64]	; (800bea4 <xTimerCreateTimerTask+0x90>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d001      	beq.n	800be6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be6a:	2301      	movs	r3, #1
 800be6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d10c      	bne.n	800be8e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800be74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be78:	b672      	cpsid	i
 800be7a:	f383 8811 	msr	BASEPRI, r3
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	f3bf 8f4f 	dsb	sy
 800be86:	b662      	cpsie	i
 800be88:	613b      	str	r3, [r7, #16]
}
 800be8a:	bf00      	nop
 800be8c:	e7fe      	b.n	800be8c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800be8e:	697b      	ldr	r3, [r7, #20]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20047390 	.word	0x20047390
 800be9c:	0801b298 	.word	0x0801b298
 800bea0:	0800bfe5 	.word	0x0800bfe5
 800bea4:	20047394 	.word	0x20047394

0800bea8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08a      	sub	sp, #40	; 0x28
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d10c      	bne.n	800beda <xTimerGenericCommand+0x32>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	b672      	cpsid	i
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	b662      	cpsie	i
 800bed4:	623b      	str	r3, [r7, #32]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800beda:	4b1a      	ldr	r3, [pc, #104]	; (800bf44 <xTimerGenericCommand+0x9c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d02a      	beq.n	800bf38 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b05      	cmp	r3, #5
 800bef2:	dc18      	bgt.n	800bf26 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bef4:	f7ff fda8 	bl	800ba48 <xTaskGetSchedulerState>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b02      	cmp	r3, #2
 800befc:	d109      	bne.n	800bf12 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800befe:	4b11      	ldr	r3, [pc, #68]	; (800bf44 <xTimerGenericCommand+0x9c>)
 800bf00:	6818      	ldr	r0, [r3, #0]
 800bf02:	f107 0110 	add.w	r1, r7, #16
 800bf06:	2300      	movs	r3, #0
 800bf08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf0a:	f7fe f841 	bl	8009f90 <xQueueGenericSend>
 800bf0e:	6278      	str	r0, [r7, #36]	; 0x24
 800bf10:	e012      	b.n	800bf38 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf12:	4b0c      	ldr	r3, [pc, #48]	; (800bf44 <xTimerGenericCommand+0x9c>)
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	f107 0110 	add.w	r1, r7, #16
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f7fe f837 	bl	8009f90 <xQueueGenericSend>
 800bf22:	6278      	str	r0, [r7, #36]	; 0x24
 800bf24:	e008      	b.n	800bf38 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf26:	4b07      	ldr	r3, [pc, #28]	; (800bf44 <xTimerGenericCommand+0x9c>)
 800bf28:	6818      	ldr	r0, [r3, #0]
 800bf2a:	f107 0110 	add.w	r1, r7, #16
 800bf2e:	2300      	movs	r3, #0
 800bf30:	683a      	ldr	r2, [r7, #0]
 800bf32:	f7fe f933 	bl	800a19c <xQueueGenericSendFromISR>
 800bf36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3728      	adds	r7, #40	; 0x28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
 800bf42:	bf00      	nop
 800bf44:	20047390 	.word	0x20047390

0800bf48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b088      	sub	sp, #32
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf52:	4b23      	ldr	r3, [pc, #140]	; (800bfe0 <prvProcessExpiredTimer+0x98>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7fd fd6d 	bl	8009a40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf6c:	f003 0304 	and.w	r3, r3, #4
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d024      	beq.n	800bfbe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	699a      	ldr	r2, [r3, #24]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	18d1      	adds	r1, r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	6978      	ldr	r0, [r7, #20]
 800bf82:	f000 f8d3 	bl	800c12c <prvInsertTimerInActiveList>
 800bf86:	4603      	mov	r3, r0
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d021      	beq.n	800bfd0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	9300      	str	r3, [sp, #0]
 800bf90:	2300      	movs	r3, #0
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	2100      	movs	r1, #0
 800bf96:	6978      	ldr	r0, [r7, #20]
 800bf98:	f7ff ff86 	bl	800bea8 <xTimerGenericCommand>
 800bf9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d115      	bne.n	800bfd0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	b672      	cpsid	i
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	b662      	cpsie	i
 800bfb8:	60fb      	str	r3, [r7, #12]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfc4:	f023 0301 	bic.w	r3, r3, #1
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	6a1b      	ldr	r3, [r3, #32]
 800bfd4:	6978      	ldr	r0, [r7, #20]
 800bfd6:	4798      	blx	r3
}
 800bfd8:	bf00      	nop
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	20047388 	.word	0x20047388

0800bfe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b084      	sub	sp, #16
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfec:	f107 0308 	add.w	r3, r7, #8
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 f857 	bl	800c0a4 <prvGetNextExpireTime>
 800bff6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	4619      	mov	r1, r3
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f000 f803 	bl	800c008 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c002:	f000 f8d5 	bl	800c1b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c006:	e7f1      	b.n	800bfec <prvTimerTask+0x8>

0800c008 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c012:	f7ff f8f9 	bl	800b208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c016:	f107 0308 	add.w	r3, r7, #8
 800c01a:	4618      	mov	r0, r3
 800c01c:	f000 f866 	bl	800c0ec <prvSampleTimeNow>
 800c020:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d130      	bne.n	800c08a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <prvProcessTimerOrBlockTask+0x3c>
 800c02e:	687a      	ldr	r2, [r7, #4]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	429a      	cmp	r2, r3
 800c034:	d806      	bhi.n	800c044 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c036:	f7ff f8f5 	bl	800b224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c03a:	68f9      	ldr	r1, [r7, #12]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff ff83 	bl	800bf48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c042:	e024      	b.n	800c08e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d008      	beq.n	800c05c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c04a:	4b13      	ldr	r3, [pc, #76]	; (800c098 <prvProcessTimerOrBlockTask+0x90>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <prvProcessTimerOrBlockTask+0x50>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <prvProcessTimerOrBlockTask+0x52>
 800c058:	2300      	movs	r3, #0
 800c05a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c05c:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <prvProcessTimerOrBlockTask+0x94>)
 800c05e:	6818      	ldr	r0, [r3, #0]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	683a      	ldr	r2, [r7, #0]
 800c068:	4619      	mov	r1, r3
 800c06a:	f7fe fe2f 	bl	800accc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c06e:	f7ff f8d9 	bl	800b224 <xTaskResumeAll>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10a      	bne.n	800c08e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c078:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <prvProcessTimerOrBlockTask+0x98>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
}
 800c088:	e001      	b.n	800c08e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c08a:	f7ff f8cb 	bl	800b224 <xTaskResumeAll>
}
 800c08e:	bf00      	nop
 800c090:	3710      	adds	r7, #16
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	2004738c 	.word	0x2004738c
 800c09c:	20047390 	.word	0x20047390
 800c0a0:	e000ed04 	.word	0xe000ed04

0800c0a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0ac:	4b0e      	ldr	r3, [pc, #56]	; (800c0e8 <prvGetNextExpireTime+0x44>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <prvGetNextExpireTime+0x16>
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	e000      	b.n	800c0bc <prvGetNextExpireTime+0x18>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d105      	bne.n	800c0d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0c8:	4b07      	ldr	r3, [pc, #28]	; (800c0e8 <prvGetNextExpireTime+0x44>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	60fb      	str	r3, [r7, #12]
 800c0d2:	e001      	b.n	800c0d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	20047388 	.word	0x20047388

0800c0ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0f4:	f7ff f936 	bl	800b364 <xTaskGetTickCount>
 800c0f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0fa:	4b0b      	ldr	r3, [pc, #44]	; (800c128 <prvSampleTimeNow+0x3c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	429a      	cmp	r2, r3
 800c102:	d205      	bcs.n	800c110 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c104:	f000 f93c 	bl	800c380 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2201      	movs	r2, #1
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	e002      	b.n	800c116 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c116:	4a04      	ldr	r2, [pc, #16]	; (800c128 <prvSampleTimeNow+0x3c>)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c11c:	68fb      	ldr	r3, [r7, #12]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3710      	adds	r7, #16
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20047398 	.word	0x20047398

0800c12c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c13a:	2300      	movs	r3, #0
 800c13c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c14a:	68ba      	ldr	r2, [r7, #8]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d812      	bhi.n	800c178 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d302      	bcc.n	800c166 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c160:	2301      	movs	r3, #1
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	e01b      	b.n	800c19e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c166:	4b10      	ldr	r3, [pc, #64]	; (800c1a8 <prvInsertTimerInActiveList+0x7c>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7fd fc2c 	bl	80099ce <vListInsert>
 800c176:	e012      	b.n	800c19e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d206      	bcs.n	800c18e <prvInsertTimerInActiveList+0x62>
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	429a      	cmp	r2, r3
 800c186:	d302      	bcc.n	800c18e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c188:	2301      	movs	r3, #1
 800c18a:	617b      	str	r3, [r7, #20]
 800c18c:	e007      	b.n	800c19e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <prvInsertTimerInActiveList+0x80>)
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3304      	adds	r3, #4
 800c196:	4619      	mov	r1, r3
 800c198:	4610      	mov	r0, r2
 800c19a:	f7fd fc18 	bl	80099ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c19e:	697b      	ldr	r3, [r7, #20]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3718      	adds	r7, #24
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	2004738c 	.word	0x2004738c
 800c1ac:	20047388 	.word	0x20047388

0800c1b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b08e      	sub	sp, #56	; 0x38
 800c1b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1b6:	e0d0      	b.n	800c35a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	da1a      	bge.n	800c1f4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1be:	1d3b      	adds	r3, r7, #4
 800c1c0:	3304      	adds	r3, #4
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10c      	bne.n	800c1e4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	b672      	cpsid	i
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	b662      	cpsie	i
 800c1de:	61fb      	str	r3, [r7, #28]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ea:	6850      	ldr	r0, [r2, #4]
 800c1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1ee:	6892      	ldr	r2, [r2, #8]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f2c0 80ae 	blt.w	800c358 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d004      	beq.n	800c212 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	3304      	adds	r3, #4
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7fd fc17 	bl	8009a40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c212:	463b      	mov	r3, r7
 800c214:	4618      	mov	r0, r3
 800c216:	f7ff ff69 	bl	800c0ec <prvSampleTimeNow>
 800c21a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b09      	cmp	r3, #9
 800c220:	f200 809b 	bhi.w	800c35a <prvProcessReceivedCommands+0x1aa>
 800c224:	a201      	add	r2, pc, #4	; (adr r2, 800c22c <prvProcessReceivedCommands+0x7c>)
 800c226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22a:	bf00      	nop
 800c22c:	0800c255 	.word	0x0800c255
 800c230:	0800c255 	.word	0x0800c255
 800c234:	0800c255 	.word	0x0800c255
 800c238:	0800c2cd 	.word	0x0800c2cd
 800c23c:	0800c2e1 	.word	0x0800c2e1
 800c240:	0800c32f 	.word	0x0800c32f
 800c244:	0800c255 	.word	0x0800c255
 800c248:	0800c255 	.word	0x0800c255
 800c24c:	0800c2cd 	.word	0x0800c2cd
 800c250:	0800c2e1 	.word	0x0800c2e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c256:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c25a:	f043 0301 	orr.w	r3, r3, #1
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c266:	68ba      	ldr	r2, [r7, #8]
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	18d1      	adds	r1, r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c274:	f7ff ff5a 	bl	800c12c <prvInsertTimerInActiveList>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d06d      	beq.n	800c35a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c284:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d062      	beq.n	800c35a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	441a      	add	r2, r3
 800c29c:	2300      	movs	r3, #0
 800c29e:	9300      	str	r3, [sp, #0]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2a6:	f7ff fdff 	bl	800bea8 <xTimerGenericCommand>
 800c2aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2ac:	6a3b      	ldr	r3, [r7, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d153      	bne.n	800c35a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b6:	b672      	cpsid	i
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	b662      	cpsie	i
 800c2c6:	61bb      	str	r3, [r7, #24]
}
 800c2c8:	bf00      	nop
 800c2ca:	e7fe      	b.n	800c2ca <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2d2:	f023 0301 	bic.w	r3, r3, #1
 800c2d6:	b2da      	uxtb	r2, r3
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c2de:	e03c      	b.n	800c35a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e6:	f043 0301 	orr.w	r3, r3, #1
 800c2ea:	b2da      	uxtb	r2, r3
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	699b      	ldr	r3, [r3, #24]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10c      	bne.n	800c31a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	b672      	cpsid	i
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	b662      	cpsie	i
 800c314:	617b      	str	r3, [r7, #20]
}
 800c316:	bf00      	nop
 800c318:	e7fe      	b.n	800c318 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	18d1      	adds	r1, r2, r3
 800c322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c328:	f7ff ff00 	bl	800c12c <prvInsertTimerInActiveList>
					break;
 800c32c:	e015      	b.n	800c35a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c334:	f003 0302 	and.w	r3, r3, #2
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d103      	bne.n	800c344 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c33c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c33e:	f000 fbcb 	bl	800cad8 <vPortFree>
 800c342:	e00a      	b.n	800c35a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c34a:	f023 0301 	bic.w	r3, r3, #1
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c356:	e000      	b.n	800c35a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c358:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c35a:	4b08      	ldr	r3, [pc, #32]	; (800c37c <prvProcessReceivedCommands+0x1cc>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	1d39      	adds	r1, r7, #4
 800c360:	2200      	movs	r2, #0
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe f850 	bl	800a408 <xQueueReceive>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f47f af24 	bne.w	800c1b8 <prvProcessReceivedCommands+0x8>
	}
}
 800c370:	bf00      	nop
 800c372:	bf00      	nop
 800c374:	3730      	adds	r7, #48	; 0x30
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20047390 	.word	0x20047390

0800c380 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c386:	e04a      	b.n	800c41e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c388:	4b2e      	ldr	r3, [pc, #184]	; (800c444 <prvSwitchTimerLists+0xc4>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c392:	4b2c      	ldr	r3, [pc, #176]	; (800c444 <prvSwitchTimerLists+0xc4>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3304      	adds	r3, #4
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fd fb4d 	bl	8009a40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c3b4:	f003 0304 	and.w	r3, r3, #4
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d030      	beq.n	800c41e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	693a      	ldr	r2, [r7, #16]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d90e      	bls.n	800c3ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	68ba      	ldr	r2, [r7, #8]
 800c3d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	68fa      	ldr	r2, [r7, #12]
 800c3d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3da:	4b1a      	ldr	r3, [pc, #104]	; (800c444 <prvSwitchTimerLists+0xc4>)
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7fd faf2 	bl	80099ce <vListInsert>
 800c3ea:	e018      	b.n	800c41e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	2100      	movs	r1, #0
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f7ff fd56 	bl	800bea8 <xTimerGenericCommand>
 800c3fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10c      	bne.n	800c41e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	b672      	cpsid	i
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	b662      	cpsie	i
 800c418:	603b      	str	r3, [r7, #0]
}
 800c41a:	bf00      	nop
 800c41c:	e7fe      	b.n	800c41c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c41e:	4b09      	ldr	r3, [pc, #36]	; (800c444 <prvSwitchTimerLists+0xc4>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1af      	bne.n	800c388 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c428:	4b06      	ldr	r3, [pc, #24]	; (800c444 <prvSwitchTimerLists+0xc4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c42e:	4b06      	ldr	r3, [pc, #24]	; (800c448 <prvSwitchTimerLists+0xc8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a04      	ldr	r2, [pc, #16]	; (800c444 <prvSwitchTimerLists+0xc4>)
 800c434:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c436:	4a04      	ldr	r2, [pc, #16]	; (800c448 <prvSwitchTimerLists+0xc8>)
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	6013      	str	r3, [r2, #0]
}
 800c43c:	bf00      	nop
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}
 800c444:	20047388 	.word	0x20047388
 800c448:	2004738c 	.word	0x2004738c

0800c44c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c452:	f000 f94b 	bl	800c6ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c456:	4b15      	ldr	r3, [pc, #84]	; (800c4ac <prvCheckForValidListAndQueue+0x60>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d120      	bne.n	800c4a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c45e:	4814      	ldr	r0, [pc, #80]	; (800c4b0 <prvCheckForValidListAndQueue+0x64>)
 800c460:	f7fd fa64 	bl	800992c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c464:	4813      	ldr	r0, [pc, #76]	; (800c4b4 <prvCheckForValidListAndQueue+0x68>)
 800c466:	f7fd fa61 	bl	800992c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <prvCheckForValidListAndQueue+0x6c>)
 800c46c:	4a10      	ldr	r2, [pc, #64]	; (800c4b0 <prvCheckForValidListAndQueue+0x64>)
 800c46e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c470:	4b12      	ldr	r3, [pc, #72]	; (800c4bc <prvCheckForValidListAndQueue+0x70>)
 800c472:	4a10      	ldr	r2, [pc, #64]	; (800c4b4 <prvCheckForValidListAndQueue+0x68>)
 800c474:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c476:	2300      	movs	r3, #0
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	4b11      	ldr	r3, [pc, #68]	; (800c4c0 <prvCheckForValidListAndQueue+0x74>)
 800c47c:	4a11      	ldr	r2, [pc, #68]	; (800c4c4 <prvCheckForValidListAndQueue+0x78>)
 800c47e:	2110      	movs	r1, #16
 800c480:	200a      	movs	r0, #10
 800c482:	f7fd fb71 	bl	8009b68 <xQueueGenericCreateStatic>
 800c486:	4603      	mov	r3, r0
 800c488:	4a08      	ldr	r2, [pc, #32]	; (800c4ac <prvCheckForValidListAndQueue+0x60>)
 800c48a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c48c:	4b07      	ldr	r3, [pc, #28]	; (800c4ac <prvCheckForValidListAndQueue+0x60>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d005      	beq.n	800c4a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c494:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <prvCheckForValidListAndQueue+0x60>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	490b      	ldr	r1, [pc, #44]	; (800c4c8 <prvCheckForValidListAndQueue+0x7c>)
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7fe fbc2 	bl	800ac24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4a0:	f000 f958 	bl	800c754 <vPortExitCritical>
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20047390 	.word	0x20047390
 800c4b0:	20047360 	.word	0x20047360
 800c4b4:	20047374 	.word	0x20047374
 800c4b8:	20047388 	.word	0x20047388
 800c4bc:	2004738c 	.word	0x2004738c
 800c4c0:	2004743c 	.word	0x2004743c
 800c4c4:	2004739c 	.word	0x2004739c
 800c4c8:	0801b2a0 	.word	0x0801b2a0

0800c4cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3b04      	subs	r3, #4
 800c4dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c4e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	3b04      	subs	r3, #4
 800c4ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f023 0201 	bic.w	r2, r3, #1
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3b04      	subs	r3, #4
 800c4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4fc:	4a0c      	ldr	r2, [pc, #48]	; (800c530 <pxPortInitialiseStack+0x64>)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3b14      	subs	r3, #20
 800c506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	3b04      	subs	r3, #4
 800c512:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f06f 0202 	mvn.w	r2, #2
 800c51a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3b20      	subs	r3, #32
 800c520:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c522:	68fb      	ldr	r3, [r7, #12]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3714      	adds	r7, #20
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	0800c535 	.word	0x0800c535

0800c534 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c534:	b480      	push	{r7}
 800c536:	b085      	sub	sp, #20
 800c538:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c53a:	2300      	movs	r3, #0
 800c53c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c53e:	4b14      	ldr	r3, [pc, #80]	; (800c590 <prvTaskExitError+0x5c>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c546:	d00c      	beq.n	800c562 <prvTaskExitError+0x2e>
	__asm volatile
 800c548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54c:	b672      	cpsid	i
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	b662      	cpsie	i
 800c55c:	60fb      	str	r3, [r7, #12]
}
 800c55e:	bf00      	nop
 800c560:	e7fe      	b.n	800c560 <prvTaskExitError+0x2c>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c566:	b672      	cpsid	i
 800c568:	f383 8811 	msr	BASEPRI, r3
 800c56c:	f3bf 8f6f 	isb	sy
 800c570:	f3bf 8f4f 	dsb	sy
 800c574:	b662      	cpsie	i
 800c576:	60bb      	str	r3, [r7, #8]
}
 800c578:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c57a:	bf00      	nop
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0fc      	beq.n	800c57c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c582:	bf00      	nop
 800c584:	bf00      	nop
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr
 800c590:	20001a4c 	.word	0x20001a4c
	...

0800c5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5a0:	4b07      	ldr	r3, [pc, #28]	; (800c5c0 <pxCurrentTCBConst2>)
 800c5a2:	6819      	ldr	r1, [r3, #0]
 800c5a4:	6808      	ldr	r0, [r1, #0]
 800c5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5aa:	f380 8809 	msr	PSP, r0
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f04f 0000 	mov.w	r0, #0
 800c5b6:	f380 8811 	msr	BASEPRI, r0
 800c5ba:	4770      	bx	lr
 800c5bc:	f3af 8000 	nop.w

0800c5c0 <pxCurrentTCBConst2>:
 800c5c0:	20046e60 	.word	0x20046e60
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop

0800c5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5c8:	4808      	ldr	r0, [pc, #32]	; (800c5ec <prvPortStartFirstTask+0x24>)
 800c5ca:	6800      	ldr	r0, [r0, #0]
 800c5cc:	6800      	ldr	r0, [r0, #0]
 800c5ce:	f380 8808 	msr	MSP, r0
 800c5d2:	f04f 0000 	mov.w	r0, #0
 800c5d6:	f380 8814 	msr	CONTROL, r0
 800c5da:	b662      	cpsie	i
 800c5dc:	b661      	cpsie	f
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	df00      	svc	0
 800c5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ea:	bf00      	nop
 800c5ec:	e000ed08 	.word	0xe000ed08

0800c5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c5f6:	4b37      	ldr	r3, [pc, #220]	; (800c6d4 <xPortStartScheduler+0xe4>)
 800c5f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	22ff      	movs	r2, #255	; 0xff
 800c606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	b2db      	uxtb	r3, r3
 800c614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c618:	b2da      	uxtb	r2, r3
 800c61a:	4b2f      	ldr	r3, [pc, #188]	; (800c6d8 <xPortStartScheduler+0xe8>)
 800c61c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c61e:	4b2f      	ldr	r3, [pc, #188]	; (800c6dc <xPortStartScheduler+0xec>)
 800c620:	2207      	movs	r2, #7
 800c622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c624:	e009      	b.n	800c63a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c626:	4b2d      	ldr	r3, [pc, #180]	; (800c6dc <xPortStartScheduler+0xec>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	3b01      	subs	r3, #1
 800c62c:	4a2b      	ldr	r2, [pc, #172]	; (800c6dc <xPortStartScheduler+0xec>)
 800c62e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c630:	78fb      	ldrb	r3, [r7, #3]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	005b      	lsls	r3, r3, #1
 800c636:	b2db      	uxtb	r3, r3
 800c638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	b2db      	uxtb	r3, r3
 800c63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c642:	2b80      	cmp	r3, #128	; 0x80
 800c644:	d0ef      	beq.n	800c626 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c646:	4b25      	ldr	r3, [pc, #148]	; (800c6dc <xPortStartScheduler+0xec>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f1c3 0307 	rsb	r3, r3, #7
 800c64e:	2b04      	cmp	r3, #4
 800c650:	d00c      	beq.n	800c66c <xPortStartScheduler+0x7c>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	b672      	cpsid	i
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	b662      	cpsie	i
 800c666:	60bb      	str	r3, [r7, #8]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c66c:	4b1b      	ldr	r3, [pc, #108]	; (800c6dc <xPortStartScheduler+0xec>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	021b      	lsls	r3, r3, #8
 800c672:	4a1a      	ldr	r2, [pc, #104]	; (800c6dc <xPortStartScheduler+0xec>)
 800c674:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c676:	4b19      	ldr	r3, [pc, #100]	; (800c6dc <xPortStartScheduler+0xec>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c67e:	4a17      	ldr	r2, [pc, #92]	; (800c6dc <xPortStartScheduler+0xec>)
 800c680:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	b2da      	uxtb	r2, r3
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c68a:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <xPortStartScheduler+0xf0>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a14      	ldr	r2, [pc, #80]	; (800c6e0 <xPortStartScheduler+0xf0>)
 800c690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c694:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c696:	4b12      	ldr	r3, [pc, #72]	; (800c6e0 <xPortStartScheduler+0xf0>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a11      	ldr	r2, [pc, #68]	; (800c6e0 <xPortStartScheduler+0xf0>)
 800c69c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c6a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6a2:	f000 f8dd 	bl	800c860 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6a6:	4b0f      	ldr	r3, [pc, #60]	; (800c6e4 <xPortStartScheduler+0xf4>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6ac:	f000 f8fc 	bl	800c8a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6b0:	4b0d      	ldr	r3, [pc, #52]	; (800c6e8 <xPortStartScheduler+0xf8>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <xPortStartScheduler+0xf8>)
 800c6b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c6ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6bc:	f7ff ff84 	bl	800c5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6c0:	f7fe ff2e 	bl	800b520 <vTaskSwitchContext>
	prvTaskExitError();
 800c6c4:	f7ff ff36 	bl	800c534 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6c8:	2300      	movs	r3, #0
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	e000e400 	.word	0xe000e400
 800c6d8:	2004748c 	.word	0x2004748c
 800c6dc:	20047490 	.word	0x20047490
 800c6e0:	e000ed20 	.word	0xe000ed20
 800c6e4:	20001a4c 	.word	0x20001a4c
 800c6e8:	e000ef34 	.word	0xe000ef34

0800c6ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f6:	b672      	cpsid	i
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	b662      	cpsie	i
 800c706:	607b      	str	r3, [r7, #4]
}
 800c708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c70a:	4b10      	ldr	r3, [pc, #64]	; (800c74c <vPortEnterCritical+0x60>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3301      	adds	r3, #1
 800c710:	4a0e      	ldr	r2, [pc, #56]	; (800c74c <vPortEnterCritical+0x60>)
 800c712:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c714:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <vPortEnterCritical+0x60>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d111      	bne.n	800c740 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c71c:	4b0c      	ldr	r3, [pc, #48]	; (800c750 <vPortEnterCritical+0x64>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	b2db      	uxtb	r3, r3
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00c      	beq.n	800c740 <vPortEnterCritical+0x54>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	b672      	cpsid	i
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	b662      	cpsie	i
 800c73a:	603b      	str	r3, [r7, #0]
}
 800c73c:	bf00      	nop
 800c73e:	e7fe      	b.n	800c73e <vPortEnterCritical+0x52>
	}
}
 800c740:	bf00      	nop
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	20001a4c 	.word	0x20001a4c
 800c750:	e000ed04 	.word	0xe000ed04

0800c754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c75a:	4b13      	ldr	r3, [pc, #76]	; (800c7a8 <vPortExitCritical+0x54>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10c      	bne.n	800c77c <vPortExitCritical+0x28>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	b672      	cpsid	i
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	b662      	cpsie	i
 800c776:	607b      	str	r3, [r7, #4]
}
 800c778:	bf00      	nop
 800c77a:	e7fe      	b.n	800c77a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <vPortExitCritical+0x54>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	3b01      	subs	r3, #1
 800c782:	4a09      	ldr	r2, [pc, #36]	; (800c7a8 <vPortExitCritical+0x54>)
 800c784:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c786:	4b08      	ldr	r3, [pc, #32]	; (800c7a8 <vPortExitCritical+0x54>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d105      	bne.n	800c79a <vPortExitCritical+0x46>
 800c78e:	2300      	movs	r3, #0
 800c790:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	f383 8811 	msr	BASEPRI, r3
}
 800c798:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c79a:	bf00      	nop
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	20001a4c 	.word	0x20001a4c
 800c7ac:	00000000 	.word	0x00000000

0800c7b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7b0:	f3ef 8009 	mrs	r0, PSP
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	4b15      	ldr	r3, [pc, #84]	; (800c810 <pxCurrentTCBConst>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	f01e 0f10 	tst.w	lr, #16
 800c7c0:	bf08      	it	eq
 800c7c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	6010      	str	r0, [r2, #0]
 800c7cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c7d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c7d4:	b672      	cpsid	i
 800c7d6:	f380 8811 	msr	BASEPRI, r0
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	b662      	cpsie	i
 800c7e4:	f7fe fe9c 	bl	800b520 <vTaskSwitchContext>
 800c7e8:	f04f 0000 	mov.w	r0, #0
 800c7ec:	f380 8811 	msr	BASEPRI, r0
 800c7f0:	bc09      	pop	{r0, r3}
 800c7f2:	6819      	ldr	r1, [r3, #0]
 800c7f4:	6808      	ldr	r0, [r1, #0]
 800c7f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fa:	f01e 0f10 	tst.w	lr, #16
 800c7fe:	bf08      	it	eq
 800c800:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c804:	f380 8809 	msr	PSP, r0
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop

0800c810 <pxCurrentTCBConst>:
 800c810:	20046e60 	.word	0x20046e60
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c814:	bf00      	nop
 800c816:	bf00      	nop

0800c818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
	__asm volatile
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	b672      	cpsid	i
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	b662      	cpsie	i
 800c832:	607b      	str	r3, [r7, #4]
}
 800c834:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c836:	f7fe fdb7 	bl	800b3a8 <xTaskIncrementTick>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c840:	4b06      	ldr	r3, [pc, #24]	; (800c85c <SysTick_Handler+0x44>)
 800c842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c846:	601a      	str	r2, [r3, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	f383 8811 	msr	BASEPRI, r3
}
 800c852:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	e000ed04 	.word	0xe000ed04

0800c860 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c860:	b480      	push	{r7}
 800c862:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c864:	4b0b      	ldr	r3, [pc, #44]	; (800c894 <vPortSetupTimerInterrupt+0x34>)
 800c866:	2200      	movs	r2, #0
 800c868:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c86a:	4b0b      	ldr	r3, [pc, #44]	; (800c898 <vPortSetupTimerInterrupt+0x38>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c870:	4b0a      	ldr	r3, [pc, #40]	; (800c89c <vPortSetupTimerInterrupt+0x3c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a0a      	ldr	r2, [pc, #40]	; (800c8a0 <vPortSetupTimerInterrupt+0x40>)
 800c876:	fba2 2303 	umull	r2, r3, r2, r3
 800c87a:	099b      	lsrs	r3, r3, #6
 800c87c:	4a09      	ldr	r2, [pc, #36]	; (800c8a4 <vPortSetupTimerInterrupt+0x44>)
 800c87e:	3b01      	subs	r3, #1
 800c880:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c882:	4b04      	ldr	r3, [pc, #16]	; (800c894 <vPortSetupTimerInterrupt+0x34>)
 800c884:	2207      	movs	r2, #7
 800c886:	601a      	str	r2, [r3, #0]
}
 800c888:	bf00      	nop
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
 800c892:	bf00      	nop
 800c894:	e000e010 	.word	0xe000e010
 800c898:	e000e018 	.word	0xe000e018
 800c89c:	20001a2c 	.word	0x20001a2c
 800c8a0:	10624dd3 	.word	0x10624dd3
 800c8a4:	e000e014 	.word	0xe000e014

0800c8a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c8b8 <vPortEnableVFP+0x10>
 800c8ac:	6801      	ldr	r1, [r0, #0]
 800c8ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c8b2:	6001      	str	r1, [r0, #0]
 800c8b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8b6:	bf00      	nop
 800c8b8:	e000ed88 	.word	0xe000ed88

0800c8bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8c2:	f3ef 8305 	mrs	r3, IPSR
 800c8c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b0f      	cmp	r3, #15
 800c8cc:	d916      	bls.n	800c8fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8ce:	4a19      	ldr	r2, [pc, #100]	; (800c934 <vPortValidateInterruptPriority+0x78>)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c8d8:	4b17      	ldr	r3, [pc, #92]	; (800c938 <vPortValidateInterruptPriority+0x7c>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	7afa      	ldrb	r2, [r7, #11]
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d20c      	bcs.n	800c8fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	b672      	cpsid	i
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	b662      	cpsie	i
 800c8f6:	607b      	str	r3, [r7, #4]
}
 800c8f8:	bf00      	nop
 800c8fa:	e7fe      	b.n	800c8fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c8fc:	4b0f      	ldr	r3, [pc, #60]	; (800c93c <vPortValidateInterruptPriority+0x80>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c904:	4b0e      	ldr	r3, [pc, #56]	; (800c940 <vPortValidateInterruptPriority+0x84>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d90c      	bls.n	800c926 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c910:	b672      	cpsid	i
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	b662      	cpsie	i
 800c920:	603b      	str	r3, [r7, #0]
}
 800c922:	bf00      	nop
 800c924:	e7fe      	b.n	800c924 <vPortValidateInterruptPriority+0x68>
	}
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	e000e3f0 	.word	0xe000e3f0
 800c938:	2004748c 	.word	0x2004748c
 800c93c:	e000ed0c 	.word	0xe000ed0c
 800c940:	20047490 	.word	0x20047490

0800c944 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b08a      	sub	sp, #40	; 0x28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c950:	f7fe fc5a 	bl	800b208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c954:	4b5b      	ldr	r3, [pc, #364]	; (800cac4 <pvPortMalloc+0x180>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c95c:	f000 f91a 	bl	800cb94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c960:	4b59      	ldr	r3, [pc, #356]	; (800cac8 <pvPortMalloc+0x184>)
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	4013      	ands	r3, r2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f040 8092 	bne.w	800ca92 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d01f      	beq.n	800c9b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c974:	2208      	movs	r2, #8
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	4413      	add	r3, r2
 800c97a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f003 0307 	and.w	r3, r3, #7
 800c982:	2b00      	cmp	r3, #0
 800c984:	d016      	beq.n	800c9b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f023 0307 	bic.w	r3, r3, #7
 800c98c:	3308      	adds	r3, #8
 800c98e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00c      	beq.n	800c9b4 <pvPortMalloc+0x70>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	b672      	cpsid	i
 800c9a0:	f383 8811 	msr	BASEPRI, r3
 800c9a4:	f3bf 8f6f 	isb	sy
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	b662      	cpsie	i
 800c9ae:	617b      	str	r3, [r7, #20]
}
 800c9b0:	bf00      	nop
 800c9b2:	e7fe      	b.n	800c9b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d06b      	beq.n	800ca92 <pvPortMalloc+0x14e>
 800c9ba:	4b44      	ldr	r3, [pc, #272]	; (800cacc <pvPortMalloc+0x188>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d866      	bhi.n	800ca92 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9c4:	4b42      	ldr	r3, [pc, #264]	; (800cad0 <pvPortMalloc+0x18c>)
 800c9c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9c8:	4b41      	ldr	r3, [pc, #260]	; (800cad0 <pvPortMalloc+0x18c>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9ce:	e004      	b.n	800c9da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d903      	bls.n	800c9ec <pvPortMalloc+0xa8>
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d1f1      	bne.n	800c9d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c9ec:	4b35      	ldr	r3, [pc, #212]	; (800cac4 <pvPortMalloc+0x180>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d04d      	beq.n	800ca92 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2208      	movs	r2, #8
 800c9fc:	4413      	add	r3, r2
 800c9fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	6a3b      	ldr	r3, [r7, #32]
 800ca06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	1ad2      	subs	r2, r2, r3
 800ca10:	2308      	movs	r3, #8
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d921      	bls.n	800ca5c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	f003 0307 	and.w	r3, r3, #7
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00c      	beq.n	800ca44 <pvPortMalloc+0x100>
	__asm volatile
 800ca2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2e:	b672      	cpsid	i
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	b662      	cpsie	i
 800ca3e:	613b      	str	r3, [r7, #16]
}
 800ca40:	bf00      	nop
 800ca42:	e7fe      	b.n	800ca42 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca46:	685a      	ldr	r2, [r3, #4]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	1ad2      	subs	r2, r2, r3
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca56:	69b8      	ldr	r0, [r7, #24]
 800ca58:	f000 f8fe 	bl	800cc58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca5c:	4b1b      	ldr	r3, [pc, #108]	; (800cacc <pvPortMalloc+0x188>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	4a19      	ldr	r2, [pc, #100]	; (800cacc <pvPortMalloc+0x188>)
 800ca68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca6a:	4b18      	ldr	r3, [pc, #96]	; (800cacc <pvPortMalloc+0x188>)
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	4b19      	ldr	r3, [pc, #100]	; (800cad4 <pvPortMalloc+0x190>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d203      	bcs.n	800ca7e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca76:	4b15      	ldr	r3, [pc, #84]	; (800cacc <pvPortMalloc+0x188>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a16      	ldr	r2, [pc, #88]	; (800cad4 <pvPortMalloc+0x190>)
 800ca7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ca7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca80:	685a      	ldr	r2, [r3, #4]
 800ca82:	4b11      	ldr	r3, [pc, #68]	; (800cac8 <pvPortMalloc+0x184>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	431a      	orrs	r2, r3
 800ca88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca8e:	2200      	movs	r2, #0
 800ca90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca92:	f7fe fbc7 	bl	800b224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	f003 0307 	and.w	r3, r3, #7
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00c      	beq.n	800caba <pvPortMalloc+0x176>
	__asm volatile
 800caa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa4:	b672      	cpsid	i
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	b662      	cpsie	i
 800cab4:	60fb      	str	r3, [r7, #12]
}
 800cab6:	bf00      	nop
 800cab8:	e7fe      	b.n	800cab8 <pvPortMalloc+0x174>
	return pvReturn;
 800caba:	69fb      	ldr	r3, [r7, #28]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3728      	adds	r7, #40	; 0x28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	2004b09c 	.word	0x2004b09c
 800cac8:	2004b0a8 	.word	0x2004b0a8
 800cacc:	2004b0a0 	.word	0x2004b0a0
 800cad0:	2004b094 	.word	0x2004b094
 800cad4:	2004b0a4 	.word	0x2004b0a4

0800cad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d04c      	beq.n	800cb84 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800caea:	2308      	movs	r3, #8
 800caec:	425b      	negs	r3, r3
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	4413      	add	r3, r2
 800caf2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800caf8:	693b      	ldr	r3, [r7, #16]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	4b23      	ldr	r3, [pc, #140]	; (800cb8c <vPortFree+0xb4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	4013      	ands	r3, r2
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d10c      	bne.n	800cb20 <vPortFree+0x48>
	__asm volatile
 800cb06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0a:	b672      	cpsid	i
 800cb0c:	f383 8811 	msr	BASEPRI, r3
 800cb10:	f3bf 8f6f 	isb	sy
 800cb14:	f3bf 8f4f 	dsb	sy
 800cb18:	b662      	cpsie	i
 800cb1a:	60fb      	str	r3, [r7, #12]
}
 800cb1c:	bf00      	nop
 800cb1e:	e7fe      	b.n	800cb1e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00c      	beq.n	800cb42 <vPortFree+0x6a>
	__asm volatile
 800cb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2c:	b672      	cpsid	i
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	b662      	cpsie	i
 800cb3c:	60bb      	str	r3, [r7, #8]
}
 800cb3e:	bf00      	nop
 800cb40:	e7fe      	b.n	800cb40 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	685a      	ldr	r2, [r3, #4]
 800cb46:	4b11      	ldr	r3, [pc, #68]	; (800cb8c <vPortFree+0xb4>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d019      	beq.n	800cb84 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d115      	bne.n	800cb84 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	685a      	ldr	r2, [r3, #4]
 800cb5c:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <vPortFree+0xb4>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	43db      	mvns	r3, r3
 800cb62:	401a      	ands	r2, r3
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb68:	f7fe fb4e 	bl	800b208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <vPortFree+0xb8>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4413      	add	r3, r2
 800cb76:	4a06      	ldr	r2, [pc, #24]	; (800cb90 <vPortFree+0xb8>)
 800cb78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cb7a:	6938      	ldr	r0, [r7, #16]
 800cb7c:	f000 f86c 	bl	800cc58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cb80:	f7fe fb50 	bl	800b224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb84:	bf00      	nop
 800cb86:	3718      	adds	r7, #24
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	2004b0a8 	.word	0x2004b0a8
 800cb90:	2004b0a0 	.word	0x2004b0a0

0800cb94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cb9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cba0:	4b27      	ldr	r3, [pc, #156]	; (800cc40 <prvHeapInit+0xac>)
 800cba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f003 0307 	and.w	r3, r3, #7
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00c      	beq.n	800cbc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3307      	adds	r3, #7
 800cbb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f023 0307 	bic.w	r3, r3, #7
 800cbba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	1ad3      	subs	r3, r2, r3
 800cbc2:	4a1f      	ldr	r2, [pc, #124]	; (800cc40 <prvHeapInit+0xac>)
 800cbc4:	4413      	add	r3, r2
 800cbc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cbcc:	4a1d      	ldr	r2, [pc, #116]	; (800cc44 <prvHeapInit+0xb0>)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cbd2:	4b1c      	ldr	r3, [pc, #112]	; (800cc44 <prvHeapInit+0xb0>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	4413      	add	r3, r2
 800cbde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cbe0:	2208      	movs	r2, #8
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	1a9b      	subs	r3, r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 0307 	bic.w	r3, r3, #7
 800cbee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	4a15      	ldr	r2, [pc, #84]	; (800cc48 <prvHeapInit+0xb4>)
 800cbf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cbf6:	4b14      	ldr	r3, [pc, #80]	; (800cc48 <prvHeapInit+0xb4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cbfe:	4b12      	ldr	r3, [pc, #72]	; (800cc48 <prvHeapInit+0xb4>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	1ad2      	subs	r2, r2, r3
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc14:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <prvHeapInit+0xb4>)
 800cc16:	681a      	ldr	r2, [r3, #0]
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	4a0a      	ldr	r2, [pc, #40]	; (800cc4c <prvHeapInit+0xb8>)
 800cc22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	4a09      	ldr	r2, [pc, #36]	; (800cc50 <prvHeapInit+0xbc>)
 800cc2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc2c:	4b09      	ldr	r3, [pc, #36]	; (800cc54 <prvHeapInit+0xc0>)
 800cc2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cc32:	601a      	str	r2, [r3, #0]
}
 800cc34:	bf00      	nop
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	20047494 	.word	0x20047494
 800cc44:	2004b094 	.word	0x2004b094
 800cc48:	2004b09c 	.word	0x2004b09c
 800cc4c:	2004b0a4 	.word	0x2004b0a4
 800cc50:	2004b0a0 	.word	0x2004b0a0
 800cc54:	2004b0a8 	.word	0x2004b0a8

0800cc58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc60:	4b28      	ldr	r3, [pc, #160]	; (800cd04 <prvInsertBlockIntoFreeList+0xac>)
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	e002      	b.n	800cc6c <prvInsertBlockIntoFreeList+0x14>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d8f7      	bhi.n	800cc66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	4413      	add	r3, r2
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d108      	bne.n	800cc9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	685a      	ldr	r2, [r3, #4]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685b      	ldr	r3, [r3, #4]
 800cc90:	441a      	add	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	441a      	add	r2, r3
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d118      	bne.n	800cce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <prvInsertBlockIntoFreeList+0xb0>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d00d      	beq.n	800ccd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	441a      	add	r2, r3
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	601a      	str	r2, [r3, #0]
 800ccd4:	e008      	b.n	800cce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <prvInsertBlockIntoFreeList+0xb0>)
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	e003      	b.n	800cce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d002      	beq.n	800ccf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccf6:	bf00      	nop
 800ccf8:	3714      	adds	r7, #20
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop
 800cd04:	2004b094 	.word	0x2004b094
 800cd08:	2004b09c 	.word	0x2004b09c

0800cd0c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	330c      	adds	r3, #12
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f002 f929 	bl	800ef78 <tcpip_send_msg_wait_sem>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d103      	bne.n	800cd3a <netconn_apimsg+0x2e>
    return apimsg->err;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cd38:	e001      	b.n	800cd3e <netconn_apimsg+0x32>
  }
  return err;
 800cd3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b08c      	sub	sp, #48	; 0x30
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	603a      	str	r2, [r7, #0]
 800cd52:	71fb      	strb	r3, [r7, #7]
 800cd54:	460b      	mov	r3, r1
 800cd56:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cd58:	79fb      	ldrb	r3, [r7, #7]
 800cd5a:	6839      	ldr	r1, [r7, #0]
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f001 f8d7 	bl	800df10 <netconn_alloc>
 800cd62:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d054      	beq.n	800ce14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cd6a:	79bb      	ldrb	r3, [r7, #6]
 800cd6c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	4619      	mov	r1, r3
 800cd78:	4829      	ldr	r0, [pc, #164]	; (800ce20 <netconn_new_with_proto_and_callback+0xd8>)
 800cd7a:	f7ff ffc7 	bl	800cd0c <netconn_apimsg>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800cd84:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d043      	beq.n	800ce14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d005      	beq.n	800cda0 <netconn_new_with_proto_and_callback+0x58>
 800cd94:	4b23      	ldr	r3, [pc, #140]	; (800ce24 <netconn_new_with_proto_and_callback+0xdc>)
 800cd96:	22a3      	movs	r2, #163	; 0xa3
 800cd98:	4923      	ldr	r1, [pc, #140]	; (800ce28 <netconn_new_with_proto_and_callback+0xe0>)
 800cd9a:	4824      	ldr	r0, [pc, #144]	; (800ce2c <netconn_new_with_proto_and_callback+0xe4>)
 800cd9c:	f00d faea 	bl	801a374 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800cda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda2:	3310      	adds	r3, #16
 800cda4:	4618      	mov	r0, r3
 800cda6:	f00c ffe5 	bl	8019d74 <sys_mbox_valid>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d105      	bne.n	800cdbc <netconn_new_with_proto_and_callback+0x74>
 800cdb0:	4b1c      	ldr	r3, [pc, #112]	; (800ce24 <netconn_new_with_proto_and_callback+0xdc>)
 800cdb2:	22a4      	movs	r2, #164	; 0xa4
 800cdb4:	491e      	ldr	r1, [pc, #120]	; (800ce30 <netconn_new_with_proto_and_callback+0xe8>)
 800cdb6:	481d      	ldr	r0, [pc, #116]	; (800ce2c <netconn_new_with_proto_and_callback+0xe4>)
 800cdb8:	f00d fadc 	bl	801a374 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	3314      	adds	r3, #20
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f00c ffd7 	bl	8019d74 <sys_mbox_valid>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d005      	beq.n	800cdd8 <netconn_new_with_proto_and_callback+0x90>
 800cdcc:	4b15      	ldr	r3, [pc, #84]	; (800ce24 <netconn_new_with_proto_and_callback+0xdc>)
 800cdce:	22a6      	movs	r2, #166	; 0xa6
 800cdd0:	4918      	ldr	r1, [pc, #96]	; (800ce34 <netconn_new_with_proto_and_callback+0xec>)
 800cdd2:	4816      	ldr	r0, [pc, #88]	; (800ce2c <netconn_new_with_proto_and_callback+0xe4>)
 800cdd4:	f00d face 	bl	801a374 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800cdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdda:	330c      	adds	r3, #12
 800cddc:	4618      	mov	r0, r3
 800cdde:	f00d f857 	bl	8019e90 <sys_sem_valid>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d105      	bne.n	800cdf4 <netconn_new_with_proto_and_callback+0xac>
 800cde8:	4b0e      	ldr	r3, [pc, #56]	; (800ce24 <netconn_new_with_proto_and_callback+0xdc>)
 800cdea:	22a9      	movs	r2, #169	; 0xa9
 800cdec:	4912      	ldr	r1, [pc, #72]	; (800ce38 <netconn_new_with_proto_and_callback+0xf0>)
 800cdee:	480f      	ldr	r0, [pc, #60]	; (800ce2c <netconn_new_with_proto_and_callback+0xe4>)
 800cdf0:	f00d fac0 	bl	801a374 <iprintf>
      sys_sem_free(&conn->op_completed);
 800cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf6:	330c      	adds	r3, #12
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f00d f83c 	bl	8019e76 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	3310      	adds	r3, #16
 800ce02:	4618      	mov	r0, r3
 800ce04:	f00c ff42 	bl	8019c8c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ce08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce0a:	2007      	movs	r0, #7
 800ce0c:	f002 fe62 	bl	800fad4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	e000      	b.n	800ce16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3730      	adds	r7, #48	; 0x30
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	0800dee5 	.word	0x0800dee5
 800ce24:	0801b2a8 	.word	0x0801b2a8
 800ce28:	0801b2dc 	.word	0x0801b2dc
 800ce2c:	0801b300 	.word	0x0801b300
 800ce30:	0801b328 	.word	0x0801b328
 800ce34:	0801b340 	.word	0x0801b340
 800ce38:	0801b364 	.word	0x0801b364

0800ce3c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08e      	sub	sp, #56	; 0x38
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	4613      	mov	r3, r2
 800ce48:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d109      	bne.n	800ce64 <netconn_bind+0x28>
 800ce50:	4b11      	ldr	r3, [pc, #68]	; (800ce98 <netconn_bind+0x5c>)
 800ce52:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ce56:	4911      	ldr	r1, [pc, #68]	; (800ce9c <netconn_bind+0x60>)
 800ce58:	4811      	ldr	r0, [pc, #68]	; (800cea0 <netconn_bind+0x64>)
 800ce5a:	f00d fa8b 	bl	801a374 <iprintf>
 800ce5e:	f06f 030f 	mvn.w	r3, #15
 800ce62:	e015      	b.n	800ce90 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ce6a:	4b0e      	ldr	r3, [pc, #56]	; (800cea4 <netconn_bind+0x68>)
 800ce6c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ce76:	88fb      	ldrh	r3, [r7, #6]
 800ce78:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ce7a:	f107 0314 	add.w	r3, r7, #20
 800ce7e:	4619      	mov	r1, r3
 800ce80:	4809      	ldr	r0, [pc, #36]	; (800cea8 <netconn_bind+0x6c>)
 800ce82:	f7ff ff43 	bl	800cd0c <netconn_apimsg>
 800ce86:	4603      	mov	r3, r0
 800ce88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ce8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3738      	adds	r7, #56	; 0x38
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	0801b2a8 	.word	0x0801b2a8
 800ce9c:	0801b3e0 	.word	0x0801b3e0
 800cea0:	0801b300 	.word	0x0801b300
 800cea4:	0801e8d4 	.word	0x0801e8d4
 800cea8:	0800e451 	.word	0x0800e451

0800ceac <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b08c      	sub	sp, #48	; 0x30
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d109      	bne.n	800ced2 <netconn_listen_with_backlog+0x26>
 800cebe:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <netconn_listen_with_backlog+0x48>)
 800cec0:	f240 12bb 	movw	r2, #443	; 0x1bb
 800cec4:	490c      	ldr	r1, [pc, #48]	; (800cef8 <netconn_listen_with_backlog+0x4c>)
 800cec6:	480d      	ldr	r0, [pc, #52]	; (800cefc <netconn_listen_with_backlog+0x50>)
 800cec8:	f00d fa54 	bl	801a374 <iprintf>
 800cecc:	f06f 030f 	mvn.w	r3, #15
 800ced0:	e00c      	b.n	800ceec <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ced6:	f107 030c 	add.w	r3, r7, #12
 800ceda:	4619      	mov	r1, r3
 800cedc:	4808      	ldr	r0, [pc, #32]	; (800cf00 <netconn_listen_with_backlog+0x54>)
 800cede:	f7ff ff15 	bl	800cd0c <netconn_apimsg>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cee8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3730      	adds	r7, #48	; 0x30
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	0801b2a8 	.word	0x0801b2a8
 800cef8:	0801b460 	.word	0x0801b460
 800cefc:	0801b300 	.word	0x0801b300
 800cf00:	0800e4c5 	.word	0x0800e4c5

0800cf04 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d109      	bne.n	800cf28 <netconn_accept+0x24>
 800cf14:	4b3d      	ldr	r3, [pc, #244]	; (800d00c <netconn_accept+0x108>)
 800cf16:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cf1a:	493d      	ldr	r1, [pc, #244]	; (800d010 <netconn_accept+0x10c>)
 800cf1c:	483d      	ldr	r0, [pc, #244]	; (800d014 <netconn_accept+0x110>)
 800cf1e:	f00d fa29 	bl	801a374 <iprintf>
 800cf22:	f06f 030f 	mvn.w	r3, #15
 800cf26:	e06c      	b.n	800d002 <netconn_accept+0xfe>
  *new_conn = NULL;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d109      	bne.n	800cf48 <netconn_accept+0x44>
 800cf34:	4b35      	ldr	r3, [pc, #212]	; (800d00c <netconn_accept+0x108>)
 800cf36:	f240 12e3 	movw	r2, #483	; 0x1e3
 800cf3a:	4937      	ldr	r1, [pc, #220]	; (800d018 <netconn_accept+0x114>)
 800cf3c:	4835      	ldr	r0, [pc, #212]	; (800d014 <netconn_accept+0x110>)
 800cf3e:	f00d fa19 	bl	801a374 <iprintf>
 800cf42:	f06f 030f 	mvn.w	r3, #15
 800cf46:	e05c      	b.n	800d002 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fb5f 	bl	800d60c <netconn_err>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800cf52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800cf5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf5e:	e050      	b.n	800d002 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3314      	adds	r3, #20
 800cf64:	4618      	mov	r0, r3
 800cf66:	f00c ff05 	bl	8019d74 <sys_mbox_valid>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d005      	beq.n	800cf7c <netconn_accept+0x78>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7f1b      	ldrb	r3, [r3, #28]
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800cf7c:	f06f 030e 	mvn.w	r3, #14
 800cf80:	e03f      	b.n	800d002 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	7f1b      	ldrb	r3, [r3, #28]
 800cf86:	f003 0302 	and.w	r3, r3, #2
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d00e      	beq.n	800cfac <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3314      	adds	r3, #20
 800cf92:	f107 020c 	add.w	r2, r7, #12
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f00c fed4 	bl	8019d46 <sys_arch_mbox_tryfetch>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfa4:	d10a      	bne.n	800cfbc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800cfa6:	f06f 0306 	mvn.w	r3, #6
 800cfaa:	e02a      	b.n	800d002 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3314      	adds	r3, #20
 800cfb0:	f107 010c 	add.w	r1, r7, #12
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f00c fe94 	bl	8019ce4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d005      	beq.n	800cfd0 <netconn_accept+0xcc>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc8:	2200      	movs	r2, #0
 800cfca:	2101      	movs	r1, #1
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f107 0213 	add.w	r2, r7, #19
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 fb69 	bl	800d6b0 <lwip_netconn_is_err_msg>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800cfe4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cfe8:	e00b      	b.n	800d002 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d102      	bne.n	800cff6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800cff0:	f06f 030e 	mvn.w	r3, #14
 800cff4:	e005      	b.n	800d002 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d000:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	0801b2a8 	.word	0x0801b2a8
 800d010:	0801b480 	.word	0x0801b480
 800d014:	0801b300 	.word	0x0801b300
 800d018:	0801b4a0 	.word	0x0801b4a0

0800d01c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	4613      	mov	r3, r2
 800d028:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d109      	bne.n	800d048 <netconn_recv_data+0x2c>
 800d034:	4b58      	ldr	r3, [pc, #352]	; (800d198 <netconn_recv_data+0x17c>)
 800d036:	f44f 7212 	mov.w	r2, #584	; 0x248
 800d03a:	4958      	ldr	r1, [pc, #352]	; (800d19c <netconn_recv_data+0x180>)
 800d03c:	4858      	ldr	r0, [pc, #352]	; (800d1a0 <netconn_recv_data+0x184>)
 800d03e:	f00d f999 	bl	801a374 <iprintf>
 800d042:	f06f 030f 	mvn.w	r3, #15
 800d046:	e0a2      	b.n	800d18e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d109      	bne.n	800d068 <netconn_recv_data+0x4c>
 800d054:	4b50      	ldr	r3, [pc, #320]	; (800d198 <netconn_recv_data+0x17c>)
 800d056:	f240 224a 	movw	r2, #586	; 0x24a
 800d05a:	4952      	ldr	r1, [pc, #328]	; (800d1a4 <netconn_recv_data+0x188>)
 800d05c:	4850      	ldr	r0, [pc, #320]	; (800d1a0 <netconn_recv_data+0x184>)
 800d05e:	f00d f989 	bl	801a374 <iprintf>
 800d062:	f06f 030f 	mvn.w	r3, #15
 800d066:	e092      	b.n	800d18e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	3310      	adds	r3, #16
 800d06c:	4618      	mov	r0, r3
 800d06e:	f00c fe81 	bl	8019d74 <sys_mbox_valid>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10e      	bne.n	800d096 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 fac7 	bl	800d60c <netconn_err>
 800d07e:	4603      	mov	r3, r0
 800d080:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800d082:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800d08a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d08e:	e07e      	b.n	800d18e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800d090:	f06f 030a 	mvn.w	r3, #10
 800d094:	e07b      	b.n	800d18e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	7f1b      	ldrb	r3, [r3, #28]
 800d09a:	f003 0302 	and.w	r3, r3, #2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10f      	bne.n	800d0c2 <netconn_recv_data+0xa6>
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	f003 0304 	and.w	r3, r3, #4
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d10a      	bne.n	800d0c2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	7f1b      	ldrb	r3, [r3, #28]
 800d0b0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d104      	bne.n	800d0c2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d023      	beq.n	800d10a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	3310      	adds	r3, #16
 800d0c6:	f107 0218 	add.w	r2, r7, #24
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f00c fe3a 	bl	8019d46 <sys_arch_mbox_tryfetch>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0d8:	d11f      	bne.n	800d11a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f000 fa96 	bl	800d60c <netconn_err>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800d0e4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d002      	beq.n	800d0f2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800d0ec:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d0f0:	e04d      	b.n	800d18e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	7f1b      	ldrb	r3, [r3, #28]
 800d0f6:	f003 0301 	and.w	r3, r3, #1
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800d0fe:	f06f 030a 	mvn.w	r3, #10
 800d102:	e044      	b.n	800d18e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800d104:	f06f 0306 	mvn.w	r3, #6
 800d108:	e041      	b.n	800d18e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	3310      	adds	r3, #16
 800d10e:	f107 0118 	add.w	r1, r7, #24
 800d112:	2200      	movs	r2, #0
 800d114:	4618      	mov	r0, r3
 800d116:	f00c fde5 	bl	8019ce4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d122:	2b10      	cmp	r3, #16
 800d124:	d117      	bne.n	800d156 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800d126:	69bb      	ldr	r3, [r7, #24]
 800d128:	f107 0217 	add.w	r2, r7, #23
 800d12c:	4611      	mov	r1, r2
 800d12e:	4618      	mov	r0, r3
 800d130:	f000 fabe 	bl	800d6b0 <lwip_netconn_is_err_msg>
 800d134:	4603      	mov	r3, r0
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800d13a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d13e:	f113 0f0f 	cmn.w	r3, #15
 800d142:	d101      	bne.n	800d148 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800d144:	2300      	movs	r3, #0
 800d146:	e022      	b.n	800d18e <netconn_recv_data+0x172>
      }
      return err;
 800d148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d14c:	e01f      	b.n	800d18e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	891b      	ldrh	r3, [r3, #8]
 800d152:	83fb      	strh	r3, [r7, #30]
 800d154:	e00d      	b.n	800d172 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d156:	69bb      	ldr	r3, [r7, #24]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d106      	bne.n	800d16a <netconn_recv_data+0x14e>
 800d15c:	4b0e      	ldr	r3, [pc, #56]	; (800d198 <netconn_recv_data+0x17c>)
 800d15e:	f240 2291 	movw	r2, #657	; 0x291
 800d162:	4911      	ldr	r1, [pc, #68]	; (800d1a8 <netconn_recv_data+0x18c>)
 800d164:	480e      	ldr	r0, [pc, #56]	; (800d1a0 <netconn_recv_data+0x184>)
 800d166:	f00d f905 	bl	801a374 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	891b      	ldrh	r3, [r3, #8]
 800d170:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d176:	2b00      	cmp	r3, #0
 800d178:	d005      	beq.n	800d186 <netconn_recv_data+0x16a>
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	8bfa      	ldrh	r2, [r7, #30]
 800d180:	2101      	movs	r1, #1
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d186:	69ba      	ldr	r2, [r7, #24]
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3720      	adds	r7, #32
 800d192:	46bd      	mov	sp, r7
 800d194:	bd80      	pop	{r7, pc}
 800d196:	bf00      	nop
 800d198:	0801b2a8 	.word	0x0801b2a8
 800d19c:	0801b4c0 	.word	0x0801b4c0
 800d1a0:	0801b300 	.word	0x0801b300
 800d1a4:	0801b4e0 	.word	0x0801b4e0
 800d1a8:	0801b4fc 	.word	0x0801b4fc

0800d1ac <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d005      	beq.n	800d1ca <netconn_tcp_recvd_msg+0x1e>
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1c6:	2b10      	cmp	r3, #16
 800d1c8:	d009      	beq.n	800d1de <netconn_tcp_recvd_msg+0x32>
 800d1ca:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <netconn_tcp_recvd_msg+0x50>)
 800d1cc:	f240 22a7 	movw	r2, #679	; 0x2a7
 800d1d0:	490b      	ldr	r1, [pc, #44]	; (800d200 <netconn_tcp_recvd_msg+0x54>)
 800d1d2:	480c      	ldr	r0, [pc, #48]	; (800d204 <netconn_tcp_recvd_msg+0x58>)
 800d1d4:	f00d f8ce 	bl	801a374 <iprintf>
 800d1d8:	f06f 030f 	mvn.w	r3, #15
 800d1dc:	e00a      	b.n	800d1f4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	68ba      	ldr	r2, [r7, #8]
 800d1e8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	4806      	ldr	r0, [pc, #24]	; (800d208 <netconn_tcp_recvd_msg+0x5c>)
 800d1ee:	f7ff fd8d 	bl	800cd0c <netconn_apimsg>
 800d1f2:	4603      	mov	r3, r0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3710      	adds	r7, #16
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd80      	pop	{r7, pc}
 800d1fc:	0801b2a8 	.word	0x0801b2a8
 800d200:	0801b508 	.word	0x0801b508
 800d204:	0801b300 	.word	0x0801b300
 800d208:	0800e5f5 	.word	0x0800e5f5

0800d20c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b090      	sub	sp, #64	; 0x40
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4613      	mov	r3, r2
 800d218:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	3310      	adds	r3, #16
 800d21e:	4618      	mov	r0, r3
 800d220:	f00c fda8 	bl	8019d74 <sys_mbox_valid>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800d22a:	f06f 030a 	mvn.w	r3, #10
 800d22e:	e06d      	b.n	800d30c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	7f1b      	ldrb	r3, [r3, #28]
 800d234:	b25b      	sxtb	r3, r3
 800d236:	2b00      	cmp	r3, #0
 800d238:	da07      	bge.n	800d24a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	7f1b      	ldrb	r3, [r3, #28]
 800d23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d242:	b2da      	uxtb	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800d248:	e039      	b.n	800d2be <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	461a      	mov	r2, r3
 800d24e:	68b9      	ldr	r1, [r7, #8]
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f7ff fee3 	bl	800d01c <netconn_recv_data>
 800d256:	4603      	mov	r3, r0
 800d258:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800d25c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800d264:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d268:	e050      	b.n	800d30c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	f003 0308 	and.w	r3, r3, #8
 800d276:	2b00      	cmp	r3, #0
 800d278:	d10e      	bne.n	800d298 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d002      	beq.n	800d286 <netconn_recv_data_tcp+0x7a>
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	891b      	ldrh	r3, [r3, #8]
 800d284:	e000      	b.n	800d288 <netconn_recv_data_tcp+0x7c>
 800d286:	2301      	movs	r3, #1
 800d288:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800d28a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d28c:	f107 0214 	add.w	r2, r7, #20
 800d290:	4619      	mov	r1, r3
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f7ff ff8a 	bl	800d1ac <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d134      	bne.n	800d308 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800d29e:	79fb      	ldrb	r3, [r7, #7]
 800d2a0:	f003 0310 	and.w	r3, r3, #16
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d009      	beq.n	800d2bc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	7f1b      	ldrb	r3, [r3, #28]
 800d2ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2b0:	b2da      	uxtb	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800d2b6:	f06f 0306 	mvn.w	r3, #6
 800d2ba:	e027      	b.n	800d30c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800d2bc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d005      	beq.n	800d2d2 <netconn_recv_data_tcp+0xc6>
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	2101      	movs	r1, #1
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	685b      	ldr	r3, [r3, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10f      	bne.n	800d2fa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800d2da:	68f8      	ldr	r0, [r7, #12]
 800d2dc:	f000 f996 	bl	800d60c <netconn_err>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800d2e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d002      	beq.n	800d2f4 <netconn_recv_data_tcp+0xe8>
          return err;
 800d2ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d2f2:	e00b      	b.n	800d30c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d2f4:	f06f 030d 	mvn.w	r3, #13
 800d2f8:	e008      	b.n	800d30c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d2fa:	2101      	movs	r1, #1
 800d2fc:	68f8      	ldr	r0, [r7, #12]
 800d2fe:	f000 f955 	bl	800d5ac <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d302:	f06f 030e 	mvn.w	r3, #14
 800d306:	e001      	b.n	800d30c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d308:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3740      	adds	r7, #64	; 0x40
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b086      	sub	sp, #24
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d109      	bne.n	800d33c <netconn_recv+0x28>
 800d328:	4b32      	ldr	r3, [pc, #200]	; (800d3f4 <netconn_recv+0xe0>)
 800d32a:	f240 3263 	movw	r2, #867	; 0x363
 800d32e:	4932      	ldr	r1, [pc, #200]	; (800d3f8 <netconn_recv+0xe4>)
 800d330:	4832      	ldr	r0, [pc, #200]	; (800d3fc <netconn_recv+0xe8>)
 800d332:	f00d f81f 	bl	801a374 <iprintf>
 800d336:	f06f 030f 	mvn.w	r3, #15
 800d33a:	e056      	b.n	800d3ea <netconn_recv+0xd6>
  *new_buf = NULL;
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2200      	movs	r2, #0
 800d340:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d109      	bne.n	800d35c <netconn_recv+0x48>
 800d348:	4b2a      	ldr	r3, [pc, #168]	; (800d3f4 <netconn_recv+0xe0>)
 800d34a:	f240 3265 	movw	r2, #869	; 0x365
 800d34e:	492c      	ldr	r1, [pc, #176]	; (800d400 <netconn_recv+0xec>)
 800d350:	482a      	ldr	r0, [pc, #168]	; (800d3fc <netconn_recv+0xe8>)
 800d352:	f00d f80f 	bl	801a374 <iprintf>
 800d356:	f06f 030f 	mvn.w	r3, #15
 800d35a:	e046      	b.n	800d3ea <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d364:	2b10      	cmp	r3, #16
 800d366:	d13a      	bne.n	800d3de <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d368:	2300      	movs	r3, #0
 800d36a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d36c:	2006      	movs	r0, #6
 800d36e:	f002 fb3b 	bl	800f9e8 <memp_malloc>
 800d372:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d102      	bne.n	800d380 <netconn_recv+0x6c>
      return ERR_MEM;
 800d37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d37e:	e034      	b.n	800d3ea <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800d380:	f107 030c 	add.w	r3, r7, #12
 800d384:	2200      	movs	r2, #0
 800d386:	4619      	mov	r1, r3
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff ff3f 	bl	800d20c <netconn_recv_data_tcp>
 800d38e:	4603      	mov	r3, r0
 800d390:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d006      	beq.n	800d3a8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800d39a:	6979      	ldr	r1, [r7, #20]
 800d39c:	2006      	movs	r0, #6
 800d39e:	f002 fb99 	bl	800fad4 <memp_free>
      return err;
 800d3a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d3a6:	e020      	b.n	800d3ea <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <netconn_recv+0xa8>
 800d3ae:	4b11      	ldr	r3, [pc, #68]	; (800d3f4 <netconn_recv+0xe0>)
 800d3b0:	f240 3279 	movw	r2, #889	; 0x379
 800d3b4:	4913      	ldr	r1, [pc, #76]	; (800d404 <netconn_recv+0xf0>)
 800d3b6:	4811      	ldr	r0, [pc, #68]	; (800d3fc <netconn_recv+0xe8>)
 800d3b8:	f00c ffdc 	bl	801a374 <iprintf>

    buf->p = p;
 800d3bc:	68fa      	ldr	r2, [r7, #12]
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	e005      	b.n	800d3ea <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800d3de:	2200      	movs	r2, #0
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f7ff fe1a 	bl	800d01c <netconn_recv_data>
 800d3e8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3718      	adds	r7, #24
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	0801b2a8 	.word	0x0801b2a8
 800d3f8:	0801b4c0 	.word	0x0801b4c0
 800d3fc:	0801b300 	.word	0x0801b300
 800d400:	0801b4e0 	.word	0x0801b4e0
 800d404:	0801b558 	.word	0x0801b558

0800d408 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af02      	add	r7, sp, #8
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800d41e:	78fa      	ldrb	r2, [r7, #3]
 800d420:	f107 0110 	add.w	r1, r7, #16
 800d424:	6a3b      	ldr	r3, [r7, #32]
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	4613      	mov	r3, r2
 800d42a:	2201      	movs	r2, #1
 800d42c:	68f8      	ldr	r0, [r7, #12]
 800d42e:	f000 f805 	bl	800d43c <netconn_write_vectors_partly>
 800d432:	4603      	mov	r3, r0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b092      	sub	sp, #72	; 0x48
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	4611      	mov	r1, r2
 800d448:	461a      	mov	r2, r3
 800d44a:	460b      	mov	r3, r1
 800d44c:	80fb      	strh	r3, [r7, #6]
 800d44e:	4613      	mov	r3, r2
 800d450:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d109      	bne.n	800d46c <netconn_write_vectors_partly+0x30>
 800d458:	4b4e      	ldr	r3, [pc, #312]	; (800d594 <netconn_write_vectors_partly+0x158>)
 800d45a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d45e:	494e      	ldr	r1, [pc, #312]	; (800d598 <netconn_write_vectors_partly+0x15c>)
 800d460:	484e      	ldr	r0, [pc, #312]	; (800d59c <netconn_write_vectors_partly+0x160>)
 800d462:	f00c ff87 	bl	801a374 <iprintf>
 800d466:	f06f 030f 	mvn.w	r3, #15
 800d46a:	e08e      	b.n	800d58a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d474:	2b10      	cmp	r3, #16
 800d476:	d009      	beq.n	800d48c <netconn_write_vectors_partly+0x50>
 800d478:	4b46      	ldr	r3, [pc, #280]	; (800d594 <netconn_write_vectors_partly+0x158>)
 800d47a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d47e:	4948      	ldr	r1, [pc, #288]	; (800d5a0 <netconn_write_vectors_partly+0x164>)
 800d480:	4846      	ldr	r0, [pc, #280]	; (800d59c <netconn_write_vectors_partly+0x160>)
 800d482:	f00c ff77 	bl	801a374 <iprintf>
 800d486:	f06f 0305 	mvn.w	r3, #5
 800d48a:	e07e      	b.n	800d58a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	7f1b      	ldrb	r3, [r3, #28]
 800d490:	f003 0302 	and.w	r3, r3, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d104      	bne.n	800d4a2 <netconn_write_vectors_partly+0x66>
 800d498:	797b      	ldrb	r3, [r7, #5]
 800d49a:	f003 0304 	and.w	r3, r3, #4
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d001      	beq.n	800d4a6 <netconn_write_vectors_partly+0x6a>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e000      	b.n	800d4a8 <netconn_write_vectors_partly+0x6c>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d4ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d005      	beq.n	800d4c0 <netconn_write_vectors_partly+0x84>
 800d4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d102      	bne.n	800d4c0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d4ba:	f06f 0305 	mvn.w	r3, #5
 800d4be:	e064      	b.n	800d58a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	643b      	str	r3, [r7, #64]	; 0x40
 800d4c8:	e015      	b.n	800d4f6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800d4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4cc:	00db      	lsls	r3, r3, #3
 800d4ce:	68ba      	ldr	r2, [r7, #8]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4d6:	4413      	add	r3, r2
 800d4d8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800d4da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4dc:	00db      	lsls	r3, r3, #3
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	685b      	ldr	r3, [r3, #4]
 800d4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d202      	bcs.n	800d4f0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800d4ea:	f06f 0305 	mvn.w	r3, #5
 800d4ee:	e04c      	b.n	800d58a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800d4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800d4f6:	88fb      	ldrh	r3, [r7, #6]
 800d4f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	dbe5      	blt.n	800d4ca <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800d4fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d500:	2b00      	cmp	r3, #0
 800d502:	d101      	bne.n	800d508 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800d504:	2300      	movs	r3, #0
 800d506:	e040      	b.n	800d58a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800d508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	da0a      	bge.n	800d524 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800d50e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d510:	2b00      	cmp	r3, #0
 800d512:	d102      	bne.n	800d51a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800d514:	f06f 0305 	mvn.w	r3, #5
 800d518:	e037      	b.n	800d58a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800d51a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d51e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800d52c:	88fb      	ldrh	r3, [r7, #6]
 800d52e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d534:	797b      	ldrb	r3, [r7, #5]
 800d536:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d53a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d53c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d542:	f107 0314 	add.w	r3, r7, #20
 800d546:	4619      	mov	r1, r3
 800d548:	4816      	ldr	r0, [pc, #88]	; (800d5a4 <netconn_write_vectors_partly+0x168>)
 800d54a:	f7ff fbdf 	bl	800cd0c <netconn_apimsg>
 800d54e:	4603      	mov	r3, r0
 800d550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800d554:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d114      	bne.n	800d586 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800d55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800d562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d566:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800d568:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10a      	bne.n	800d586 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d574:	429a      	cmp	r2, r3
 800d576:	d006      	beq.n	800d586 <netconn_write_vectors_partly+0x14a>
 800d578:	4b06      	ldr	r3, [pc, #24]	; (800d594 <netconn_write_vectors_partly+0x158>)
 800d57a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d57e:	490a      	ldr	r1, [pc, #40]	; (800d5a8 <netconn_write_vectors_partly+0x16c>)
 800d580:	4806      	ldr	r0, [pc, #24]	; (800d59c <netconn_write_vectors_partly+0x160>)
 800d582:	f00c fef7 	bl	801a374 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d586:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3748      	adds	r7, #72	; 0x48
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	0801b2a8 	.word	0x0801b2a8
 800d598:	0801b580 	.word	0x0801b580
 800d59c:	0801b300 	.word	0x0801b300
 800d5a0:	0801b59c 	.word	0x0801b59c
 800d5a4:	0800e9f9 	.word	0x0800e9f9
 800d5a8:	0801b5c0 	.word	0x0801b5c0

0800d5ac <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08c      	sub	sp, #48	; 0x30
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d109      	bne.n	800d5d2 <netconn_close_shutdown+0x26>
 800d5be:	4b0f      	ldr	r3, [pc, #60]	; (800d5fc <netconn_close_shutdown+0x50>)
 800d5c0:	f240 4247 	movw	r2, #1095	; 0x447
 800d5c4:	490e      	ldr	r1, [pc, #56]	; (800d600 <netconn_close_shutdown+0x54>)
 800d5c6:	480f      	ldr	r0, [pc, #60]	; (800d604 <netconn_close_shutdown+0x58>)
 800d5c8:	f00c fed4 	bl	801a374 <iprintf>
 800d5cc:	f06f 030f 	mvn.w	r3, #15
 800d5d0:	e010      	b.n	800d5f4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d5d6:	78fb      	ldrb	r3, [r7, #3]
 800d5d8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d5da:	2329      	movs	r3, #41	; 0x29
 800d5dc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d5de:	f107 030c 	add.w	r3, r7, #12
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	4808      	ldr	r0, [pc, #32]	; (800d608 <netconn_close_shutdown+0x5c>)
 800d5e6:	f7ff fb91 	bl	800cd0c <netconn_apimsg>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d5f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3730      	adds	r7, #48	; 0x30
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	0801b2a8 	.word	0x0801b2a8
 800d600:	0801b5e4 	.word	0x0801b5e4
 800d604:	0801b300 	.word	0x0801b300
 800d608:	0800eb11 	.word	0x0800eb11

0800d60c <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d101      	bne.n	800d61e <netconn_err+0x12>
    return ERR_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	e00d      	b.n	800d63a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d61e:	f00c fcb3 	bl	8019f88 <sys_arch_protect>
 800d622:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	7a1b      	ldrb	r3, [r3, #8]
 800d628:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2200      	movs	r2, #0
 800d62e:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f00c fcb7 	bl	8019fa4 <sys_arch_unprotect>
  return err;
 800d636:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b082      	sub	sp, #8
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d64e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d652:	f113 0f0d 	cmn.w	r3, #13
 800d656:	d009      	beq.n	800d66c <lwip_netconn_err_to_msg+0x28>
 800d658:	f113 0f0d 	cmn.w	r3, #13
 800d65c:	dc0c      	bgt.n	800d678 <lwip_netconn_err_to_msg+0x34>
 800d65e:	f113 0f0f 	cmn.w	r3, #15
 800d662:	d007      	beq.n	800d674 <lwip_netconn_err_to_msg+0x30>
 800d664:	f113 0f0e 	cmn.w	r3, #14
 800d668:	d002      	beq.n	800d670 <lwip_netconn_err_to_msg+0x2c>
 800d66a:	e005      	b.n	800d678 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d66c:	4b0a      	ldr	r3, [pc, #40]	; (800d698 <lwip_netconn_err_to_msg+0x54>)
 800d66e:	e00e      	b.n	800d68e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d670:	4b0a      	ldr	r3, [pc, #40]	; (800d69c <lwip_netconn_err_to_msg+0x58>)
 800d672:	e00c      	b.n	800d68e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d674:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <lwip_netconn_err_to_msg+0x5c>)
 800d676:	e00a      	b.n	800d68e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d005      	beq.n	800d68c <lwip_netconn_err_to_msg+0x48>
 800d680:	4b08      	ldr	r3, [pc, #32]	; (800d6a4 <lwip_netconn_err_to_msg+0x60>)
 800d682:	227d      	movs	r2, #125	; 0x7d
 800d684:	4908      	ldr	r1, [pc, #32]	; (800d6a8 <lwip_netconn_err_to_msg+0x64>)
 800d686:	4809      	ldr	r0, [pc, #36]	; (800d6ac <lwip_netconn_err_to_msg+0x68>)
 800d688:	f00c fe74 	bl	801a374 <iprintf>
      return NULL;
 800d68c:	2300      	movs	r3, #0
  }
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	0801e7c0 	.word	0x0801e7c0
 800d69c:	0801e7c1 	.word	0x0801e7c1
 800d6a0:	0801e7c2 	.word	0x0801e7c2
 800d6a4:	0801b600 	.word	0x0801b600
 800d6a8:	0801b634 	.word	0x0801b634
 800d6ac:	0801b644 	.word	0x0801b644

0800d6b0 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b082      	sub	sp, #8
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d105      	bne.n	800d6cc <lwip_netconn_is_err_msg+0x1c>
 800d6c0:	4b12      	ldr	r3, [pc, #72]	; (800d70c <lwip_netconn_is_err_msg+0x5c>)
 800d6c2:	2285      	movs	r2, #133	; 0x85
 800d6c4:	4912      	ldr	r1, [pc, #72]	; (800d710 <lwip_netconn_is_err_msg+0x60>)
 800d6c6:	4813      	ldr	r0, [pc, #76]	; (800d714 <lwip_netconn_is_err_msg+0x64>)
 800d6c8:	f00c fe54 	bl	801a374 <iprintf>

  if (msg == &netconn_aborted) {
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	4a12      	ldr	r2, [pc, #72]	; (800d718 <lwip_netconn_is_err_msg+0x68>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d104      	bne.n	800d6de <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	22f3      	movs	r2, #243	; 0xf3
 800d6d8:	701a      	strb	r2, [r3, #0]
    return 1;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	e012      	b.n	800d704 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	4a0e      	ldr	r2, [pc, #56]	; (800d71c <lwip_netconn_is_err_msg+0x6c>)
 800d6e2:	4293      	cmp	r3, r2
 800d6e4:	d104      	bne.n	800d6f0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	22f2      	movs	r2, #242	; 0xf2
 800d6ea:	701a      	strb	r2, [r3, #0]
    return 1;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e009      	b.n	800d704 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a0b      	ldr	r2, [pc, #44]	; (800d720 <lwip_netconn_is_err_msg+0x70>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d104      	bne.n	800d702 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	22f1      	movs	r2, #241	; 0xf1
 800d6fc:	701a      	strb	r2, [r3, #0]
    return 1;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e000      	b.n	800d704 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	0801b600 	.word	0x0801b600
 800d710:	0801b66c 	.word	0x0801b66c
 800d714:	0801b644 	.word	0x0801b644
 800d718:	0801e7c0 	.word	0x0801e7c0
 800d71c:	0801e7c1 	.word	0x0801e7c1
 800d720:	0801e7c2 	.word	0x0801e7c2

0800d724 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	607a      	str	r2, [r7, #4]
 800d730:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d105      	bne.n	800d744 <recv_udp+0x20>
 800d738:	4b34      	ldr	r3, [pc, #208]	; (800d80c <recv_udp+0xe8>)
 800d73a:	22e5      	movs	r2, #229	; 0xe5
 800d73c:	4934      	ldr	r1, [pc, #208]	; (800d810 <recv_udp+0xec>)
 800d73e:	4835      	ldr	r0, [pc, #212]	; (800d814 <recv_udp+0xf0>)
 800d740:	f00c fe18 	bl	801a374 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d105      	bne.n	800d756 <recv_udp+0x32>
 800d74a:	4b30      	ldr	r3, [pc, #192]	; (800d80c <recv_udp+0xe8>)
 800d74c:	22e6      	movs	r2, #230	; 0xe6
 800d74e:	4932      	ldr	r1, [pc, #200]	; (800d818 <recv_udp+0xf4>)
 800d750:	4830      	ldr	r0, [pc, #192]	; (800d814 <recv_udp+0xf0>)
 800d752:	f00c fe0f 	bl	801a374 <iprintf>
  conn = (struct netconn *)arg;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d103      	bne.n	800d768 <recv_udp+0x44>
    pbuf_free(p);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f003 f85b 	bl	801081c <pbuf_free>
    return;
 800d766:	e04d      	b.n	800d804 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d005      	beq.n	800d77e <recv_udp+0x5a>
 800d772:	4b26      	ldr	r3, [pc, #152]	; (800d80c <recv_udp+0xe8>)
 800d774:	22ee      	movs	r2, #238	; 0xee
 800d776:	4929      	ldr	r1, [pc, #164]	; (800d81c <recv_udp+0xf8>)
 800d778:	4826      	ldr	r0, [pc, #152]	; (800d814 <recv_udp+0xf0>)
 800d77a:	f00c fdfb 	bl	801a374 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	3310      	adds	r3, #16
 800d782:	4618      	mov	r0, r3
 800d784:	f00c faf6 	bl	8019d74 <sys_mbox_valid>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d103      	bne.n	800d796 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f003 f844 	bl	801081c <pbuf_free>
    return;
 800d794:	e036      	b.n	800d804 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d796:	2006      	movs	r0, #6
 800d798:	f002 f926 	bl	800f9e8 <memp_malloc>
 800d79c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d103      	bne.n	800d7ac <recv_udp+0x88>
    pbuf_free(p);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f003 f839 	bl	801081c <pbuf_free>
    return;
 800d7aa:	e02b      	b.n	800d804 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d002      	beq.n	800d7c4 <recv_udp+0xa0>
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	e000      	b.n	800d7c6 <recv_udp+0xa2>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	69ba      	ldr	r2, [r7, #24]
 800d7c8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d7ce:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	891b      	ldrh	r3, [r3, #8]
 800d7d4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	3310      	adds	r3, #16
 800d7da:	69b9      	ldr	r1, [r7, #24]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f00c fa67 	bl	8019cb0 <sys_mbox_trypost>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d003      	beq.n	800d7f0 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d7e8:	69b8      	ldr	r0, [r7, #24]
 800d7ea:	f001 fa1d 	bl	800ec28 <netbuf_delete>
    return;
 800d7ee:	e009      	b.n	800d804 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d005      	beq.n	800d804 <recv_udp+0xe0>
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7fc:	8afa      	ldrh	r2, [r7, #22]
 800d7fe:	2100      	movs	r1, #0
 800d800:	69f8      	ldr	r0, [r7, #28]
 800d802:	4798      	blx	r3
  }
}
 800d804:	3720      	adds	r7, #32
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}
 800d80a:	bf00      	nop
 800d80c:	0801b600 	.word	0x0801b600
 800d810:	0801b678 	.word	0x0801b678
 800d814:	0801b644 	.word	0x0801b644
 800d818:	0801b69c 	.word	0x0801b69c
 800d81c:	0801b6bc 	.word	0x0801b6bc

0800d820 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b088      	sub	sp, #32
 800d824:	af00      	add	r7, sp, #0
 800d826:	60f8      	str	r0, [r7, #12]
 800d828:	60b9      	str	r1, [r7, #8]
 800d82a:	607a      	str	r2, [r7, #4]
 800d82c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d106      	bne.n	800d842 <recv_tcp+0x22>
 800d834:	4b36      	ldr	r3, [pc, #216]	; (800d910 <recv_tcp+0xf0>)
 800d836:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d83a:	4936      	ldr	r1, [pc, #216]	; (800d914 <recv_tcp+0xf4>)
 800d83c:	4836      	ldr	r0, [pc, #216]	; (800d918 <recv_tcp+0xf8>)
 800d83e:	f00c fd99 	bl	801a374 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <recv_tcp+0x36>
 800d848:	4b31      	ldr	r3, [pc, #196]	; (800d910 <recv_tcp+0xf0>)
 800d84a:	f240 122d 	movw	r2, #301	; 0x12d
 800d84e:	4933      	ldr	r1, [pc, #204]	; (800d91c <recv_tcp+0xfc>)
 800d850:	4831      	ldr	r0, [pc, #196]	; (800d918 <recv_tcp+0xf8>)
 800d852:	f00c fd8f 	bl	801a374 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d006      	beq.n	800d86c <recv_tcp+0x4c>
 800d85e:	4b2c      	ldr	r3, [pc, #176]	; (800d910 <recv_tcp+0xf0>)
 800d860:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d864:	492e      	ldr	r1, [pc, #184]	; (800d920 <recv_tcp+0x100>)
 800d866:	482c      	ldr	r0, [pc, #176]	; (800d918 <recv_tcp+0xf8>)
 800d868:	f00c fd84 	bl	801a374 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <recv_tcp+0x5c>
    return ERR_VAL;
 800d876:	f06f 0305 	mvn.w	r3, #5
 800d87a:	e045      	b.n	800d908 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	429a      	cmp	r2, r3
 800d884:	d006      	beq.n	800d894 <recv_tcp+0x74>
 800d886:	4b22      	ldr	r3, [pc, #136]	; (800d910 <recv_tcp+0xf0>)
 800d888:	f240 1235 	movw	r2, #309	; 0x135
 800d88c:	4925      	ldr	r1, [pc, #148]	; (800d924 <recv_tcp+0x104>)
 800d88e:	4822      	ldr	r0, [pc, #136]	; (800d918 <recv_tcp+0xf8>)
 800d890:	f00c fd70 	bl	801a374 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	3310      	adds	r3, #16
 800d898:	4618      	mov	r0, r3
 800d89a:	f00c fa6b 	bl	8019d74 <sys_mbox_valid>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10d      	bne.n	800d8c0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d008      	beq.n	800d8bc <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	891b      	ldrh	r3, [r3, #8]
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	68b8      	ldr	r0, [r7, #8]
 800d8b2:	f003 ff6b 	bl	801178c <tcp_recved>
      pbuf_free(p);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f002 ffb0 	bl	801081c <pbuf_free>
    }
    return ERR_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	e023      	b.n	800d908 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d005      	beq.n	800d8d2 <recv_tcp+0xb2>
    msg = p;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	891b      	ldrh	r3, [r3, #8]
 800d8ce:	83fb      	strh	r3, [r7, #30]
 800d8d0:	e003      	b.n	800d8da <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d8d2:	4b15      	ldr	r3, [pc, #84]	; (800d928 <recv_tcp+0x108>)
 800d8d4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	3310      	adds	r3, #16
 800d8de:	69b9      	ldr	r1, [r7, #24]
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f00c f9e5 	bl	8019cb0 <sys_mbox_trypost>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d002      	beq.n	800d8f2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d8ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8f0:	e00a      	b.n	800d908 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d005      	beq.n	800d906 <recv_tcp+0xe6>
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fe:	8bfa      	ldrh	r2, [r7, #30]
 800d900:	2100      	movs	r1, #0
 800d902:	6978      	ldr	r0, [r7, #20]
 800d904:	4798      	blx	r3
  }

  return ERR_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3720      	adds	r7, #32
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	0801b600 	.word	0x0801b600
 800d914:	0801b6dc 	.word	0x0801b6dc
 800d918:	0801b644 	.word	0x0801b644
 800d91c:	0801b700 	.word	0x0801b700
 800d920:	0801b720 	.word	0x0801b720
 800d924:	0801b738 	.word	0x0801b738
 800d928:	0801e7c2 	.word	0x0801e7c2

0800d92c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d106      	bne.n	800d94e <poll_tcp+0x22>
 800d940:	4b29      	ldr	r3, [pc, #164]	; (800d9e8 <poll_tcp+0xbc>)
 800d942:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d946:	4929      	ldr	r1, [pc, #164]	; (800d9ec <poll_tcp+0xc0>)
 800d948:	4829      	ldr	r0, [pc, #164]	; (800d9f0 <poll_tcp+0xc4>)
 800d94a:	f00c fd13 	bl	801a374 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	2b01      	cmp	r3, #1
 800d954:	d104      	bne.n	800d960 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d956:	2101      	movs	r1, #1
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 fe81 	bl	800e660 <lwip_netconn_do_writemore>
 800d95e:	e016      	b.n	800d98e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	785b      	ldrb	r3, [r3, #1]
 800d964:	2b04      	cmp	r3, #4
 800d966:	d112      	bne.n	800d98e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	6a1b      	ldr	r3, [r3, #32]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d00a      	beq.n	800d986 <poll_tcp+0x5a>
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6a1b      	ldr	r3, [r3, #32]
 800d974:	7a5b      	ldrb	r3, [r3, #9]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d005      	beq.n	800d986 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6a1b      	ldr	r3, [r3, #32]
 800d97e:	7a5a      	ldrb	r2, [r3, #9]
 800d980:	3a01      	subs	r2, #1
 800d982:	b2d2      	uxtb	r2, r2
 800d984:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d986:	2101      	movs	r1, #1
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 fbf7 	bl	800e17c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	7f1b      	ldrb	r3, [r3, #28]
 800d992:	f003 0310 	and.w	r3, r3, #16
 800d996:	2b00      	cmp	r3, #0
 800d998:	d021      	beq.n	800d9de <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d01d      	beq.n	800d9de <poll_tcp+0xb2>
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d9aa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d9ae:	d316      	bcc.n	800d9de <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d9b8:	2b04      	cmp	r3, #4
 800d9ba:	d810      	bhi.n	800d9de <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	7f1b      	ldrb	r3, [r3, #28]
 800d9c0:	f023 0310 	bic.w	r3, r3, #16
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d005      	beq.n	800d9de <poll_tcp+0xb2>
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2102      	movs	r1, #2
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3710      	adds	r7, #16
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	0801b600 	.word	0x0801b600
 800d9ec:	0801b758 	.word	0x0801b758
 800d9f0:	0801b644 	.word	0x0801b644

0800d9f4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b086      	sub	sp, #24
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	4613      	mov	r3, r2
 800da00:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <sent_tcp+0x26>
 800da0c:	4b20      	ldr	r3, [pc, #128]	; (800da90 <sent_tcp+0x9c>)
 800da0e:	f240 1293 	movw	r2, #403	; 0x193
 800da12:	4920      	ldr	r1, [pc, #128]	; (800da94 <sent_tcp+0xa0>)
 800da14:	4820      	ldr	r0, [pc, #128]	; (800da98 <sent_tcp+0xa4>)
 800da16:	f00c fcad 	bl	801a374 <iprintf>

  if (conn) {
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d032      	beq.n	800da86 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	785b      	ldrb	r3, [r3, #1]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d104      	bne.n	800da32 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800da28:	2101      	movs	r1, #1
 800da2a:	6978      	ldr	r0, [r7, #20]
 800da2c:	f000 fe18 	bl	800e660 <lwip_netconn_do_writemore>
 800da30:	e007      	b.n	800da42 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	785b      	ldrb	r3, [r3, #1]
 800da36:	2b04      	cmp	r3, #4
 800da38:	d103      	bne.n	800da42 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800da3a:	2101      	movs	r1, #1
 800da3c:	6978      	ldr	r0, [r7, #20]
 800da3e:	f000 fb9d 	bl	800e17c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d01d      	beq.n	800da86 <sent_tcp+0x92>
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800da52:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800da56:	d316      	bcc.n	800da86 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800da60:	2b04      	cmp	r3, #4
 800da62:	d810      	bhi.n	800da86 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	7f1b      	ldrb	r3, [r3, #28]
 800da68:	f023 0310 	bic.w	r3, r3, #16
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <sent_tcp+0x92>
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7e:	88fa      	ldrh	r2, [r7, #6]
 800da80:	2102      	movs	r1, #2
 800da82:	6978      	ldr	r0, [r7, #20]
 800da84:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	0801b600 	.word	0x0801b600
 800da94:	0801b758 	.word	0x0801b758
 800da98:	0801b644 	.word	0x0801b644

0800da9c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b088      	sub	sp, #32
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d106      	bne.n	800dac0 <err_tcp+0x24>
 800dab2:	4b5f      	ldr	r3, [pc, #380]	; (800dc30 <err_tcp+0x194>)
 800dab4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800dab8:	495e      	ldr	r1, [pc, #376]	; (800dc34 <err_tcp+0x198>)
 800daba:	485f      	ldr	r0, [pc, #380]	; (800dc38 <err_tcp+0x19c>)
 800dabc:	f00c fc5a 	bl	801a374 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800dac0:	f00c fa62 	bl	8019f88 <sys_arch_protect>
 800dac4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	2200      	movs	r2, #0
 800daca:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800dacc:	69fb      	ldr	r3, [r7, #28]
 800dace:	78fa      	ldrb	r2, [r7, #3]
 800dad0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	7f1b      	ldrb	r3, [r3, #28]
 800dad6:	f043 0301 	orr.w	r3, r3, #1
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	785b      	ldrb	r3, [r3, #1]
 800dae4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	2200      	movs	r2, #0
 800daea:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800daec:	69b8      	ldr	r0, [r7, #24]
 800daee:	f00c fa59 	bl	8019fa4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d005      	beq.n	800db06 <err_tcp+0x6a>
 800dafa:	69fb      	ldr	r3, [r7, #28]
 800dafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dafe:	2200      	movs	r2, #0
 800db00:	2104      	movs	r1, #4
 800db02:	69f8      	ldr	r0, [r7, #28]
 800db04:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <err_tcp+0x7e>
 800db0e:	69fb      	ldr	r3, [r7, #28]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	2200      	movs	r2, #0
 800db14:	2100      	movs	r1, #0
 800db16:	69f8      	ldr	r0, [r7, #28]
 800db18:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d005      	beq.n	800db2e <err_tcp+0x92>
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	2200      	movs	r2, #0
 800db28:	2102      	movs	r1, #2
 800db2a:	69f8      	ldr	r0, [r7, #28]
 800db2c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800db2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fd86 	bl	800d644 <lwip_netconn_err_to_msg>
 800db38:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	3310      	adds	r3, #16
 800db3e:	4618      	mov	r0, r3
 800db40:	f00c f918 	bl	8019d74 <sys_mbox_valid>
 800db44:	4603      	mov	r3, r0
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	3310      	adds	r3, #16
 800db4e:	6939      	ldr	r1, [r7, #16]
 800db50:	4618      	mov	r0, r3
 800db52:	f00c f8ad 	bl	8019cb0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	3314      	adds	r3, #20
 800db5a:	4618      	mov	r0, r3
 800db5c:	f00c f90a 	bl	8019d74 <sys_mbox_valid>
 800db60:	4603      	mov	r3, r0
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	3314      	adds	r3, #20
 800db6a:	6939      	ldr	r1, [r7, #16]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f00c f89f 	bl	8019cb0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800db72:	7dfb      	ldrb	r3, [r7, #23]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d005      	beq.n	800db84 <err_tcp+0xe8>
 800db78:	7dfb      	ldrb	r3, [r7, #23]
 800db7a:	2b04      	cmp	r3, #4
 800db7c:	d002      	beq.n	800db84 <err_tcp+0xe8>
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b03      	cmp	r3, #3
 800db82:	d143      	bne.n	800dc0c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800db84:	69fb      	ldr	r3, [r7, #28]
 800db86:	7f1b      	ldrb	r3, [r3, #28]
 800db88:	f003 0304 	and.w	r3, r3, #4
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	bf14      	ite	ne
 800db90:	2301      	movne	r3, #1
 800db92:	2300      	moveq	r3, #0
 800db94:	b2db      	uxtb	r3, r3
 800db96:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	7f1b      	ldrb	r3, [r3, #28]
 800db9c:	f023 0304 	bic.w	r3, r3, #4
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	69fb      	ldr	r3, [r7, #28]
 800dba4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d13b      	bne.n	800dc24 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	6a1b      	ldr	r3, [r3, #32]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d106      	bne.n	800dbc2 <err_tcp+0x126>
 800dbb4:	4b1e      	ldr	r3, [pc, #120]	; (800dc30 <err_tcp+0x194>)
 800dbb6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dbba:	4920      	ldr	r1, [pc, #128]	; (800dc3c <err_tcp+0x1a0>)
 800dbbc:	481e      	ldr	r0, [pc, #120]	; (800dc38 <err_tcp+0x19c>)
 800dbbe:	f00c fbd9 	bl	801a374 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	2b04      	cmp	r3, #4
 800dbc6:	d104      	bne.n	800dbd2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	6a1b      	ldr	r3, [r3, #32]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	711a      	strb	r2, [r3, #4]
 800dbd0:	e003      	b.n	800dbda <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	78fa      	ldrb	r2, [r7, #3]
 800dbd8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	6a1b      	ldr	r3, [r3, #32]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	330c      	adds	r3, #12
 800dbe2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800dbe4:	68b8      	ldr	r0, [r7, #8]
 800dbe6:	f00c f953 	bl	8019e90 <sys_sem_valid>
 800dbea:	4603      	mov	r3, r0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d106      	bne.n	800dbfe <err_tcp+0x162>
 800dbf0:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <err_tcp+0x194>)
 800dbf2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800dbf6:	4912      	ldr	r1, [pc, #72]	; (800dc40 <err_tcp+0x1a4>)
 800dbf8:	480f      	ldr	r0, [pc, #60]	; (800dc38 <err_tcp+0x19c>)
 800dbfa:	f00c fbbb 	bl	801a374 <iprintf>
      conn->current_msg = NULL;
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	2200      	movs	r2, #0
 800dc02:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800dc04:	68b8      	ldr	r0, [r7, #8]
 800dc06:	f00c f929 	bl	8019e5c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800dc0a:	e00b      	b.n	800dc24 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d008      	beq.n	800dc26 <err_tcp+0x18a>
 800dc14:	4b06      	ldr	r3, [pc, #24]	; (800dc30 <err_tcp+0x194>)
 800dc16:	f240 12f7 	movw	r2, #503	; 0x1f7
 800dc1a:	490a      	ldr	r1, [pc, #40]	; (800dc44 <err_tcp+0x1a8>)
 800dc1c:	4806      	ldr	r0, [pc, #24]	; (800dc38 <err_tcp+0x19c>)
 800dc1e:	f00c fba9 	bl	801a374 <iprintf>
  }
}
 800dc22:	e000      	b.n	800dc26 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800dc24:	bf00      	nop
}
 800dc26:	bf00      	nop
 800dc28:	3720      	adds	r7, #32
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	0801b600 	.word	0x0801b600
 800dc34:	0801b758 	.word	0x0801b758
 800dc38:	0801b644 	.word	0x0801b644
 800dc3c:	0801b768 	.word	0x0801b768
 800dc40:	0801b784 	.word	0x0801b784
 800dc44:	0801b7a0 	.word	0x0801b7a0

0800dc48 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f004 fc5d 	bl	8012518 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800dc5e:	490a      	ldr	r1, [pc, #40]	; (800dc88 <setup_tcp+0x40>)
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f004 fc6b 	bl	801253c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800dc66:	4909      	ldr	r1, [pc, #36]	; (800dc8c <setup_tcp+0x44>)
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f004 fc89 	bl	8012580 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800dc6e:	2202      	movs	r2, #2
 800dc70:	4907      	ldr	r1, [pc, #28]	; (800dc90 <setup_tcp+0x48>)
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f004 fce0 	bl	8012638 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800dc78:	4906      	ldr	r1, [pc, #24]	; (800dc94 <setup_tcp+0x4c>)
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f004 fca2 	bl	80125c4 <tcp_err>
}
 800dc80:	bf00      	nop
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	0800d821 	.word	0x0800d821
 800dc8c:	0800d9f5 	.word	0x0800d9f5
 800dc90:	0800d92d 	.word	0x0800d92d
 800dc94:	0800da9d 	.word	0x0800da9d

0800dc98 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800dc98:	b590      	push	{r4, r7, lr}
 800dc9a:	b089      	sub	sp, #36	; 0x24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	4613      	mov	r3, r2
 800dca4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <accept_function+0x1e>
    return ERR_VAL;
 800dcb0:	f06f 0305 	mvn.w	r3, #5
 800dcb4:	e0a1      	b.n	800ddfa <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	3314      	adds	r3, #20
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f00c f85a 	bl	8019d74 <sys_mbox_valid>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d102      	bne.n	800dccc <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800dcc6:	f06f 0305 	mvn.w	r3, #5
 800dcca:	e096      	b.n	800ddfa <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d11b      	bne.n	800dd0a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	f103 0414 	add.w	r4, r3, #20
 800dcd8:	f06f 000c 	mvn.w	r0, #12
 800dcdc:	f7ff fcb2 	bl	800d644 <lwip_netconn_err_to_msg>
 800dce0:	4603      	mov	r3, r0
 800dce2:	4619      	mov	r1, r3
 800dce4:	4620      	mov	r0, r4
 800dce6:	f00b ffe3 	bl	8019cb0 <sys_mbox_trypost>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d109      	bne.n	800dd04 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <accept_function+0x6c>
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	2100      	movs	r1, #0
 800dd00:	69f8      	ldr	r0, [r7, #28]
 800dd02:	4798      	blx	r3
    }
    return ERR_VAL;
 800dd04:	f06f 0305 	mvn.w	r3, #5
 800dd08:	e077      	b.n	800ddfa <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800dd0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d006      	beq.n	800dd20 <accept_function+0x88>
 800dd12:	4b3c      	ldr	r3, [pc, #240]	; (800de04 <accept_function+0x16c>)
 800dd14:	f240 222a 	movw	r2, #554	; 0x22a
 800dd18:	493b      	ldr	r1, [pc, #236]	; (800de08 <accept_function+0x170>)
 800dd1a:	483c      	ldr	r0, [pc, #240]	; (800de0c <accept_function+0x174>)
 800dd1c:	f00c fb2a 	bl	801a374 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	781a      	ldrb	r2, [r3, #0]
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f000 f8f0 	bl	800df10 <netconn_alloc>
 800dd30:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800dd32:	69bb      	ldr	r3, [r7, #24]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d11b      	bne.n	800dd70 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	f103 0414 	add.w	r4, r3, #20
 800dd3e:	f06f 000c 	mvn.w	r0, #12
 800dd42:	f7ff fc7f 	bl	800d644 <lwip_netconn_err_to_msg>
 800dd46:	4603      	mov	r3, r0
 800dd48:	4619      	mov	r1, r3
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	f00b ffb0 	bl	8019cb0 <sys_mbox_trypost>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d109      	bne.n	800dd6a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dd56:	69fb      	ldr	r3, [r7, #28]
 800dd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d005      	beq.n	800dd6a <accept_function+0xd2>
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd62:	2200      	movs	r2, #0
 800dd64:	2100      	movs	r1, #0
 800dd66:	69f8      	ldr	r0, [r7, #28]
 800dd68:	4798      	blx	r3
    }
    return ERR_MEM;
 800dd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd6e:	e044      	b.n	800ddfa <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	68ba      	ldr	r2, [r7, #8]
 800dd74:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800dd76:	69b8      	ldr	r0, [r7, #24]
 800dd78:	f7ff ff66 	bl	800dc48 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	3314      	adds	r3, #20
 800dd80:	69b9      	ldr	r1, [r7, #24]
 800dd82:	4618      	mov	r0, r3
 800dd84:	f00b ff94 	bl	8019cb0 <sys_mbox_trypost>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d02a      	beq.n	800dde4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800dd8e:	69bb      	ldr	r3, [r7, #24]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800dd94:	2100      	movs	r1, #0
 800dd96:	6978      	ldr	r0, [r7, #20]
 800dd98:	f004 fbbe 	bl	8012518 <tcp_arg>
    tcp_recv(pcb, NULL);
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	6978      	ldr	r0, [r7, #20]
 800dda0:	f004 fbcc 	bl	801253c <tcp_recv>
    tcp_sent(pcb, NULL);
 800dda4:	2100      	movs	r1, #0
 800dda6:	6978      	ldr	r0, [r7, #20]
 800dda8:	f004 fbea 	bl	8012580 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800ddac:	2200      	movs	r2, #0
 800ddae:	2100      	movs	r1, #0
 800ddb0:	6978      	ldr	r0, [r7, #20]
 800ddb2:	f004 fc41 	bl	8012638 <tcp_poll>
    tcp_err(pcb, NULL);
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	6978      	ldr	r0, [r7, #20]
 800ddba:	f004 fc03 	bl	80125c4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	3310      	adds	r3, #16
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f00b ff5f 	bl	8019c8c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	3310      	adds	r3, #16
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f00b ffdf 	bl	8019d96 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800ddd8:	69b8      	ldr	r0, [r7, #24]
 800ddda:	f000 f907 	bl	800dfec <netconn_free>
    return ERR_MEM;
 800ddde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde2:	e00a      	b.n	800ddfa <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dde4:	69fb      	ldr	r3, [r7, #28]
 800dde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <accept_function+0x160>
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	69f8      	ldr	r0, [r7, #28]
 800ddf6:	4798      	blx	r3
  }

  return ERR_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3724      	adds	r7, #36	; 0x24
 800ddfe:	46bd      	mov	sp, r7
 800de00:	bd90      	pop	{r4, r7, pc}
 800de02:	bf00      	nop
 800de04:	0801b600 	.word	0x0801b600
 800de08:	0801b7bc 	.word	0x0801b7bc
 800de0c:	0801b644 	.word	0x0801b644

0800de10 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800de10:	b590      	push	{r4, r7, lr}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d006      	beq.n	800de34 <pcb_new+0x24>
 800de26:	4b2b      	ldr	r3, [pc, #172]	; (800ded4 <pcb_new+0xc4>)
 800de28:	f240 2265 	movw	r2, #613	; 0x265
 800de2c:	492a      	ldr	r1, [pc, #168]	; (800ded8 <pcb_new+0xc8>)
 800de2e:	482b      	ldr	r0, [pc, #172]	; (800dedc <pcb_new+0xcc>)
 800de30:	f00c faa0 	bl	801a374 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de3e:	2b10      	cmp	r3, #16
 800de40:	d022      	beq.n	800de88 <pcb_new+0x78>
 800de42:	2b20      	cmp	r3, #32
 800de44:	d133      	bne.n	800deae <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681c      	ldr	r4, [r3, #0]
 800de4a:	7bfb      	ldrb	r3, [r7, #15]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f009 fc00 	bl	8017652 <udp_new_ip_type>
 800de52:	4603      	mov	r3, r0
 800de54:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d02a      	beq.n	800deb6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	2b22      	cmp	r3, #34	; 0x22
 800de68:	d104      	bne.n	800de74 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	2201      	movs	r2, #1
 800de72:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6858      	ldr	r0, [r3, #4]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	461a      	mov	r2, r3
 800de80:	4917      	ldr	r1, [pc, #92]	; (800dee0 <pcb_new+0xd0>)
 800de82:	f009 fbaf 	bl	80175e4 <udp_recv>
      }
      break;
 800de86:	e016      	b.n	800deb6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681c      	ldr	r4, [r3, #0]
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	4618      	mov	r0, r3
 800de90:	f004 fb34 	bl	80124fc <tcp_new_ip_type>
 800de94:	4603      	mov	r3, r0
 800de96:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00b      	beq.n	800deba <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fece 	bl	800dc48 <setup_tcp>
      }
      break;
 800deac:	e005      	b.n	800deba <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	22fa      	movs	r2, #250	; 0xfa
 800deb2:	711a      	strb	r2, [r3, #4]
      return;
 800deb4:	e00a      	b.n	800decc <pcb_new+0xbc>
      break;
 800deb6:	bf00      	nop
 800deb8:	e000      	b.n	800debc <pcb_new+0xac>
      break;
 800deba:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	22ff      	movs	r2, #255	; 0xff
 800deca:	711a      	strb	r2, [r3, #4]
  }
}
 800decc:	3714      	adds	r7, #20
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd90      	pop	{r4, r7, pc}
 800ded2:	bf00      	nop
 800ded4:	0801b600 	.word	0x0801b600
 800ded8:	0801b7e4 	.word	0x0801b7e4
 800dedc:	0801b644 	.word	0x0801b644
 800dee0:	0800d725 	.word	0x0800d725

0800dee4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d102      	bne.n	800df06 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7ff ff85 	bl	800de10 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800df06:	bf00      	nop
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
	...

0800df10 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	af00      	add	r7, sp, #0
 800df16:	4603      	mov	r3, r0
 800df18:	6039      	str	r1, [r7, #0]
 800df1a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800df1c:	2300      	movs	r3, #0
 800df1e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800df20:	2007      	movs	r0, #7
 800df22:	f001 fd61 	bl	800f9e8 <memp_malloc>
 800df26:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d101      	bne.n	800df32 <netconn_alloc+0x22>
    return NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	e052      	b.n	800dfd8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	79fa      	ldrb	r2, [r7, #7]
 800df3c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df4a:	2b10      	cmp	r3, #16
 800df4c:	d004      	beq.n	800df58 <netconn_alloc+0x48>
 800df4e:	2b20      	cmp	r3, #32
 800df50:	d105      	bne.n	800df5e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800df52:	2306      	movs	r3, #6
 800df54:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800df56:	e00a      	b.n	800df6e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800df58:	2306      	movs	r3, #6
 800df5a:	617b      	str	r3, [r7, #20]
      break;
 800df5c:	e007      	b.n	800df6e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800df5e:	4b20      	ldr	r3, [pc, #128]	; (800dfe0 <netconn_alloc+0xd0>)
 800df60:	f240 22e5 	movw	r2, #741	; 0x2e5
 800df64:	491f      	ldr	r1, [pc, #124]	; (800dfe4 <netconn_alloc+0xd4>)
 800df66:	4820      	ldr	r0, [pc, #128]	; (800dfe8 <netconn_alloc+0xd8>)
 800df68:	f00c fa04 	bl	801a374 <iprintf>
      goto free_and_return;
 800df6c:	e02f      	b.n	800dfce <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	3310      	adds	r3, #16
 800df72:	6979      	ldr	r1, [r7, #20]
 800df74:	4618      	mov	r0, r3
 800df76:	f00b fe6f 	bl	8019c58 <sys_mbox_new>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d125      	bne.n	800dfcc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	330c      	adds	r3, #12
 800df84:	2100      	movs	r1, #0
 800df86:	4618      	mov	r0, r3
 800df88:	f00b ff12 	bl	8019db0 <sys_sem_new>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d005      	beq.n	800df9e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	3310      	adds	r3, #16
 800df96:	4618      	mov	r0, r3
 800df98:	f00b fe78 	bl	8019c8c <sys_mbox_free>
    goto free_and_return;
 800df9c:	e017      	b.n	800dfce <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	3314      	adds	r3, #20
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f00b fef7 	bl	8019d96 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dfb4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	683a      	ldr	r2, [r7, #0]
 800dfba:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	7cfa      	ldrb	r2, [r7, #19]
 800dfc6:	771a      	strb	r2, [r3, #28]
  return conn;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	e005      	b.n	800dfd8 <netconn_alloc+0xc8>
    goto free_and_return;
 800dfcc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800dfce:	68f9      	ldr	r1, [r7, #12]
 800dfd0:	2007      	movs	r0, #7
 800dfd2:	f001 fd7f 	bl	800fad4 <memp_free>
  return NULL;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3718      	adds	r7, #24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	0801b600 	.word	0x0801b600
 800dfe4:	0801b804 	.word	0x0801b804
 800dfe8:	0801b644 	.word	0x0801b644

0800dfec <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d006      	beq.n	800e00a <netconn_free+0x1e>
 800dffc:	4b1b      	ldr	r3, [pc, #108]	; (800e06c <netconn_free+0x80>)
 800dffe:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e002:	491b      	ldr	r1, [pc, #108]	; (800e070 <netconn_free+0x84>)
 800e004:	481b      	ldr	r0, [pc, #108]	; (800e074 <netconn_free+0x88>)
 800e006:	f00c f9b5 	bl	801a374 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	3310      	adds	r3, #16
 800e00e:	4618      	mov	r0, r3
 800e010:	f00b feb0 	bl	8019d74 <sys_mbox_valid>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d006      	beq.n	800e028 <netconn_free+0x3c>
 800e01a:	4b14      	ldr	r3, [pc, #80]	; (800e06c <netconn_free+0x80>)
 800e01c:	f240 3223 	movw	r2, #803	; 0x323
 800e020:	4915      	ldr	r1, [pc, #84]	; (800e078 <netconn_free+0x8c>)
 800e022:	4814      	ldr	r0, [pc, #80]	; (800e074 <netconn_free+0x88>)
 800e024:	f00c f9a6 	bl	801a374 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	3314      	adds	r3, #20
 800e02c:	4618      	mov	r0, r3
 800e02e:	f00b fea1 	bl	8019d74 <sys_mbox_valid>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d006      	beq.n	800e046 <netconn_free+0x5a>
 800e038:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <netconn_free+0x80>)
 800e03a:	f240 3226 	movw	r2, #806	; 0x326
 800e03e:	490f      	ldr	r1, [pc, #60]	; (800e07c <netconn_free+0x90>)
 800e040:	480c      	ldr	r0, [pc, #48]	; (800e074 <netconn_free+0x88>)
 800e042:	f00c f997 	bl	801a374 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	330c      	adds	r3, #12
 800e04a:	4618      	mov	r0, r3
 800e04c:	f00b ff13 	bl	8019e76 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	330c      	adds	r3, #12
 800e054:	4618      	mov	r0, r3
 800e056:	f00b ff2c 	bl	8019eb2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	2007      	movs	r0, #7
 800e05e:	f001 fd39 	bl	800fad4 <memp_free>
}
 800e062:	bf00      	nop
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	0801b600 	.word	0x0801b600
 800e070:	0801b82c 	.word	0x0801b82c
 800e074:	0801b644 	.word	0x0801b644
 800e078:	0801b85c 	.word	0x0801b85c
 800e07c:	0801b898 	.word	0x0801b898

0800e080 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b086      	sub	sp, #24
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	3310      	adds	r3, #16
 800e08c:	4618      	mov	r0, r3
 800e08e:	f00b fe71 	bl	8019d74 <sys_mbox_valid>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d02f      	beq.n	800e0f8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e098:	e018      	b.n	800e0cc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0a2:	2b10      	cmp	r3, #16
 800e0a4:	d10e      	bne.n	800e0c4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f107 020f 	add.w	r2, r7, #15
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff fafe 	bl	800d6b0 <lwip_netconn_is_err_msg>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d108      	bne.n	800e0cc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f002 fbad 	bl	801081c <pbuf_free>
 800e0c2:	e003      	b.n	800e0cc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f000 fdae 	bl	800ec28 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3310      	adds	r3, #16
 800e0d0:	f107 0210 	add.w	r2, r7, #16
 800e0d4:	4611      	mov	r1, r2
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f00b fe35 	bl	8019d46 <sys_arch_mbox_tryfetch>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0e2:	d1da      	bne.n	800e09a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	3310      	adds	r3, #16
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f00b fdcf 	bl	8019c8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	3310      	adds	r3, #16
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f00b fe4f 	bl	8019d96 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3314      	adds	r3, #20
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f00b fe39 	bl	8019d74 <sys_mbox_valid>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d034      	beq.n	800e172 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e108:	e01d      	b.n	800e146 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	f107 020e 	add.w	r2, r7, #14
 800e110:	4611      	mov	r1, r2
 800e112:	4618      	mov	r0, r3
 800e114:	f7ff facc 	bl	800d6b0 <lwip_netconn_is_err_msg>
 800e118:	4603      	mov	r3, r0
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d113      	bne.n	800e146 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800e122:	6978      	ldr	r0, [r7, #20]
 800e124:	f7ff ffac 	bl	800e080 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d007      	beq.n	800e140 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	4618      	mov	r0, r3
 800e136:	f003 f961 	bl	80113fc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	2200      	movs	r2, #0
 800e13e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800e140:	6978      	ldr	r0, [r7, #20]
 800e142:	f7ff ff53 	bl	800dfec <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	3314      	adds	r3, #20
 800e14a:	f107 0210 	add.w	r2, r7, #16
 800e14e:	4611      	mov	r1, r2
 800e150:	4618      	mov	r0, r3
 800e152:	f00b fdf8 	bl	8019d46 <sys_arch_mbox_tryfetch>
 800e156:	4603      	mov	r3, r0
 800e158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e15c:	d1d5      	bne.n	800e10a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	3314      	adds	r3, #20
 800e162:	4618      	mov	r0, r3
 800e164:	f00b fd92 	bl	8019c8c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3314      	adds	r3, #20
 800e16c:	4618      	mov	r0, r3
 800e16e:	f00b fe12 	bl	8019d96 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e172:	bf00      	nop
 800e174:	3718      	adds	r7, #24
 800e176:	46bd      	mov	sp, r7
 800e178:	bd80      	pop	{r7, pc}
	...

0800e17c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
 800e184:	460b      	mov	r3, r1
 800e186:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800e188:	2300      	movs	r3, #0
 800e18a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <lwip_netconn_do_close_internal+0x24>
 800e192:	4b87      	ldr	r3, [pc, #540]	; (800e3b0 <lwip_netconn_do_close_internal+0x234>)
 800e194:	f240 32a2 	movw	r2, #930	; 0x3a2
 800e198:	4986      	ldr	r1, [pc, #536]	; (800e3b4 <lwip_netconn_do_close_internal+0x238>)
 800e19a:	4887      	ldr	r0, [pc, #540]	; (800e3b8 <lwip_netconn_do_close_internal+0x23c>)
 800e19c:	f00c f8ea 	bl	801a374 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1a8:	2b10      	cmp	r3, #16
 800e1aa:	d006      	beq.n	800e1ba <lwip_netconn_do_close_internal+0x3e>
 800e1ac:	4b80      	ldr	r3, [pc, #512]	; (800e3b0 <lwip_netconn_do_close_internal+0x234>)
 800e1ae:	f240 32a3 	movw	r2, #931	; 0x3a3
 800e1b2:	4982      	ldr	r1, [pc, #520]	; (800e3bc <lwip_netconn_do_close_internal+0x240>)
 800e1b4:	4880      	ldr	r0, [pc, #512]	; (800e3b8 <lwip_netconn_do_close_internal+0x23c>)
 800e1b6:	f00c f8dd 	bl	801a374 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	785b      	ldrb	r3, [r3, #1]
 800e1be:	2b04      	cmp	r3, #4
 800e1c0:	d006      	beq.n	800e1d0 <lwip_netconn_do_close_internal+0x54>
 800e1c2:	4b7b      	ldr	r3, [pc, #492]	; (800e3b0 <lwip_netconn_do_close_internal+0x234>)
 800e1c4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800e1c8:	497d      	ldr	r1, [pc, #500]	; (800e3c0 <lwip_netconn_do_close_internal+0x244>)
 800e1ca:	487b      	ldr	r0, [pc, #492]	; (800e3b8 <lwip_netconn_do_close_internal+0x23c>)
 800e1cc:	f00c f8d2 	bl	801a374 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d106      	bne.n	800e1e6 <lwip_netconn_do_close_internal+0x6a>
 800e1d8:	4b75      	ldr	r3, [pc, #468]	; (800e3b0 <lwip_netconn_do_close_internal+0x234>)
 800e1da:	f240 32a5 	movw	r2, #933	; 0x3a5
 800e1de:	4979      	ldr	r1, [pc, #484]	; (800e3c4 <lwip_netconn_do_close_internal+0x248>)
 800e1e0:	4875      	ldr	r0, [pc, #468]	; (800e3b8 <lwip_netconn_do_close_internal+0x23c>)
 800e1e2:	f00c f8c7 	bl	801a374 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6a1b      	ldr	r3, [r3, #32]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d106      	bne.n	800e1fc <lwip_netconn_do_close_internal+0x80>
 800e1ee:	4b70      	ldr	r3, [pc, #448]	; (800e3b0 <lwip_netconn_do_close_internal+0x234>)
 800e1f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e1f4:	4974      	ldr	r1, [pc, #464]	; (800e3c8 <lwip_netconn_do_close_internal+0x24c>)
 800e1f6:	4870      	ldr	r0, [pc, #448]	; (800e3b8 <lwip_netconn_do_close_internal+0x23c>)
 800e1f8:	f00c f8bc 	bl	801a374 <iprintf>

  tpcb = conn->pcb.tcp;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a1b      	ldr	r3, [r3, #32]
 800e206:	7a1b      	ldrb	r3, [r3, #8]
 800e208:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
 800e20c:	f003 0301 	and.w	r3, r3, #1
 800e210:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	f003 0302 	and.w	r3, r3, #2
 800e218:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
 800e21c:	2b03      	cmp	r3, #3
 800e21e:	d102      	bne.n	800e226 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800e220:	2301      	movs	r3, #1
 800e222:	75bb      	strb	r3, [r7, #22]
 800e224:	e01f      	b.n	800e266 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e226:	7bbb      	ldrb	r3, [r7, #14]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00e      	beq.n	800e24a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e230:	2b05      	cmp	r3, #5
 800e232:	d007      	beq.n	800e244 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e238:	2b06      	cmp	r3, #6
 800e23a:	d003      	beq.n	800e244 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e240:	2b08      	cmp	r3, #8
 800e242:	d102      	bne.n	800e24a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800e244:	2301      	movs	r3, #1
 800e246:	75bb      	strb	r3, [r7, #22]
 800e248:	e00d      	b.n	800e266 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e24a:	7b7b      	ldrb	r3, [r7, #13]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d008      	beq.n	800e262 <lwip_netconn_do_close_internal+0xe6>
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	8b5b      	ldrh	r3, [r3, #26]
 800e254:	f003 0310 	and.w	r3, r3, #16
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d002      	beq.n	800e262 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800e25c:	2301      	movs	r3, #1
 800e25e:	75bb      	strb	r3, [r7, #22]
 800e260:	e001      	b.n	800e266 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800e266:	7dbb      	ldrb	r3, [r7, #22]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d003      	beq.n	800e274 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e26c:	2100      	movs	r1, #0
 800e26e:	6938      	ldr	r0, [r7, #16]
 800e270:	f004 f952 	bl	8012518 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	7d1b      	ldrb	r3, [r3, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d104      	bne.n	800e286 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e27c:	2100      	movs	r1, #0
 800e27e:	6938      	ldr	r0, [r7, #16]
 800e280:	f004 f9c2 	bl	8012608 <tcp_accept>
 800e284:	e01d      	b.n	800e2c2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e286:	7bbb      	ldrb	r3, [r7, #14]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d007      	beq.n	800e29c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e28c:	2100      	movs	r1, #0
 800e28e:	6938      	ldr	r0, [r7, #16]
 800e290:	f004 f954 	bl	801253c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e294:	2100      	movs	r1, #0
 800e296:	6938      	ldr	r0, [r7, #16]
 800e298:	f004 f9b6 	bl	8012608 <tcp_accept>
    }
    if (shut_tx) {
 800e29c:	7b7b      	ldrb	r3, [r7, #13]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	6938      	ldr	r0, [r7, #16]
 800e2a6:	f004 f96b 	bl	8012580 <tcp_sent>
    }
    if (shut_close) {
 800e2aa:	7dbb      	ldrb	r3, [r7, #22]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d008      	beq.n	800e2c2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	2100      	movs	r1, #0
 800e2b4:	6938      	ldr	r0, [r7, #16]
 800e2b6:	f004 f9bf 	bl	8012638 <tcp_poll>
      tcp_err(tpcb, NULL);
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	6938      	ldr	r0, [r7, #16]
 800e2be:	f004 f981 	bl	80125c4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800e2c2:	7dbb      	ldrb	r3, [r7, #22]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d005      	beq.n	800e2d4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e2c8:	6938      	ldr	r0, [r7, #16]
 800e2ca:	f002 ff51 	bl	8011170 <tcp_close>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	75fb      	strb	r3, [r7, #23]
 800e2d2:	e007      	b.n	800e2e4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e2d4:	7bbb      	ldrb	r3, [r7, #14]
 800e2d6:	7b7a      	ldrb	r2, [r7, #13]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	6938      	ldr	r0, [r7, #16]
 800e2dc:	f002 ff74 	bl	80111c8 <tcp_shutdown>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800e2e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d102      	bne.n	800e2f2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	757b      	strb	r3, [r7, #21]
 800e2f0:	e016      	b.n	800e320 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e2f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e2f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2fa:	d10f      	bne.n	800e31c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6a1b      	ldr	r3, [r3, #32]
 800e300:	7a5b      	ldrb	r3, [r3, #9]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10c      	bne.n	800e320 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e306:	2301      	movs	r3, #1
 800e308:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800e30a:	7dbb      	ldrb	r3, [r7, #22]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d007      	beq.n	800e320 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e310:	6938      	ldr	r0, [r7, #16]
 800e312:	f003 f873 	bl	80113fc <tcp_abort>
          err = ERR_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	75fb      	strb	r3, [r7, #23]
 800e31a:	e001      	b.n	800e320 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e31c:	2301      	movs	r3, #1
 800e31e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800e320:	7d7b      	ldrb	r3, [r7, #21]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d052      	beq.n	800e3cc <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	330c      	adds	r3, #12
 800e32e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	7dfa      	ldrb	r2, [r7, #23]
 800e336:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d129      	bne.n	800e3a0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800e34c:	7dbb      	ldrb	r3, [r7, #22]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d00c      	beq.n	800e36c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d005      	beq.n	800e36c <lwip_netconn_do_close_internal+0x1f0>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e364:	2200      	movs	r2, #0
 800e366:	2104      	movs	r1, #4
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	4798      	blx	r3
      }
      if (shut_rx) {
 800e36c:	7bbb      	ldrb	r3, [r7, #14]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d009      	beq.n	800e386 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e376:	2b00      	cmp	r3, #0
 800e378:	d005      	beq.n	800e386 <lwip_netconn_do_close_internal+0x20a>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e37e:	2200      	movs	r2, #0
 800e380:	2100      	movs	r1, #0
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	4798      	blx	r3
      }
      if (shut_tx) {
 800e386:	7b7b      	ldrb	r3, [r7, #13]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d009      	beq.n	800e3a0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e390:	2b00      	cmp	r3, #0
 800e392:	d005      	beq.n	800e3a0 <lwip_netconn_do_close_internal+0x224>
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e398:	2200      	movs	r2, #0
 800e39a:	2102      	movs	r1, #2
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d002      	beq.n	800e3ac <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e3a6:	68b8      	ldr	r0, [r7, #8]
 800e3a8:	f00b fd58 	bl	8019e5c <sys_sem_signal>
    }
    return ERR_OK;
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	e03c      	b.n	800e42a <lwip_netconn_do_close_internal+0x2ae>
 800e3b0:	0801b600 	.word	0x0801b600
 800e3b4:	0801b8d4 	.word	0x0801b8d4
 800e3b8:	0801b644 	.word	0x0801b644
 800e3bc:	0801b8e4 	.word	0x0801b8e4
 800e3c0:	0801b904 	.word	0x0801b904
 800e3c4:	0801b928 	.word	0x0801b928
 800e3c8:	0801b768 	.word	0x0801b768
  }
  if (!close_finished) {
 800e3cc:	7d7b      	ldrb	r3, [r7, #21]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d11e      	bne.n	800e410 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	7d1b      	ldrb	r3, [r3, #20]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d106      	bne.n	800e3e8 <lwip_netconn_do_close_internal+0x26c>
 800e3da:	4b16      	ldr	r3, [pc, #88]	; (800e434 <lwip_netconn_do_close_internal+0x2b8>)
 800e3dc:	f240 4241 	movw	r2, #1089	; 0x441
 800e3e0:	4915      	ldr	r1, [pc, #84]	; (800e438 <lwip_netconn_do_close_internal+0x2bc>)
 800e3e2:	4816      	ldr	r0, [pc, #88]	; (800e43c <lwip_netconn_do_close_internal+0x2c0>)
 800e3e4:	f00b ffc6 	bl	801a374 <iprintf>
    if (shut_tx) {
 800e3e8:	7b7b      	ldrb	r3, [r7, #13]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800e3ee:	4914      	ldr	r1, [pc, #80]	; (800e440 <lwip_netconn_do_close_internal+0x2c4>)
 800e3f0:	6938      	ldr	r0, [r7, #16]
 800e3f2:	f004 f8c5 	bl	8012580 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	4912      	ldr	r1, [pc, #72]	; (800e444 <lwip_netconn_do_close_internal+0x2c8>)
 800e3fa:	6938      	ldr	r0, [r7, #16]
 800e3fc:	f004 f91c 	bl	8012638 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e400:	4911      	ldr	r1, [pc, #68]	; (800e448 <lwip_netconn_do_close_internal+0x2cc>)
 800e402:	6938      	ldr	r0, [r7, #16]
 800e404:	f004 f8de 	bl	80125c4 <tcp_err>
    tcp_arg(tpcb, conn);
 800e408:	6879      	ldr	r1, [r7, #4]
 800e40a:	6938      	ldr	r0, [r7, #16]
 800e40c:	f004 f884 	bl	8012518 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <lwip_netconn_do_close_internal+0x2aa>
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <lwip_netconn_do_close_internal+0x2b8>)
 800e41a:	f240 424d 	movw	r2, #1101	; 0x44d
 800e41e:	490b      	ldr	r1, [pc, #44]	; (800e44c <lwip_netconn_do_close_internal+0x2d0>)
 800e420:	4806      	ldr	r0, [pc, #24]	; (800e43c <lwip_netconn_do_close_internal+0x2c0>)
 800e422:	f00b ffa7 	bl	801a374 <iprintf>
  return err;
 800e426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	0801b600 	.word	0x0801b600
 800e438:	0801b93c 	.word	0x0801b93c
 800e43c:	0801b644 	.word	0x0801b644
 800e440:	0800d9f5 	.word	0x0800d9f5
 800e444:	0800d92d 	.word	0x0800d92d
 800e448:	0800da9d 	.word	0x0800da9d
 800e44c:	0801b960 	.word	0x0801b960

0800e450 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d025      	beq.n	800e4b2 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e470:	2b10      	cmp	r3, #16
 800e472:	d00e      	beq.n	800e492 <lwip_netconn_do_bind+0x42>
 800e474:	2b20      	cmp	r3, #32
 800e476:	d119      	bne.n	800e4ac <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	6858      	ldr	r0, [r3, #4]
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	6899      	ldr	r1, [r3, #8]
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	899b      	ldrh	r3, [r3, #12]
 800e486:	461a      	mov	r2, r3
 800e488:	f009 f824 	bl	80174d4 <udp_bind>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73fb      	strb	r3, [r7, #15]
        break;
 800e490:	e011      	b.n	800e4b6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	6858      	ldr	r0, [r3, #4]
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	6899      	ldr	r1, [r3, #8]
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	899b      	ldrh	r3, [r3, #12]
 800e4a0:	461a      	mov	r2, r3
 800e4a2:	f002 ffb7 	bl	8011414 <tcp_bind>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	73fb      	strb	r3, [r7, #15]
        break;
 800e4aa:	e004      	b.n	800e4b6 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e4ac:	23fa      	movs	r3, #250	; 0xfa
 800e4ae:	73fb      	strb	r3, [r7, #15]
        break;
 800e4b0:	e001      	b.n	800e4b6 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e4b2:	23fa      	movs	r3, #250	; 0xfa
 800e4b4:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	7bfa      	ldrb	r2, [r7, #15]
 800e4ba:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e4bc:	bf00      	nop
 800e4be:	3710      	adds	r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d07f      	beq.n	800e5da <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4e4:	2b10      	cmp	r3, #16
 800e4e6:	d175      	bne.n	800e5d4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	785b      	ldrb	r3, [r3, #1]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d165      	bne.n	800e5be <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	7d1b      	ldrb	r3, [r3, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800e4fe:	23fa      	movs	r3, #250	; 0xfa
 800e500:	72fb      	strb	r3, [r7, #11]
 800e502:	e06c      	b.n	800e5de <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800e504:	23ff      	movs	r3, #255	; 0xff
 800e506:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800e508:	697b      	ldr	r3, [r7, #20]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	f107 020b 	add.w	r2, r7, #11
 800e512:	7cf9      	ldrb	r1, [r7, #19]
 800e514:	4618      	mov	r0, r3
 800e516:	f003 f835 	bl	8011584 <tcp_listen_with_backlog_and_err>
 800e51a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d05d      	beq.n	800e5de <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3310      	adds	r3, #16
 800e528:	4618      	mov	r0, r3
 800e52a:	f00b fc23 	bl	8019d74 <sys_mbox_valid>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	3310      	adds	r3, #16
 800e53a:	4618      	mov	r0, r3
 800e53c:	f00b fba6 	bl	8019c8c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	3310      	adds	r3, #16
 800e546:	4618      	mov	r0, r3
 800e548:	f00b fc25 	bl	8019d96 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800e54c:	2300      	movs	r3, #0
 800e54e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	3314      	adds	r3, #20
 800e556:	4618      	mov	r0, r3
 800e558:	f00b fc0c 	bl	8019d74 <sys_mbox_valid>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d108      	bne.n	800e574 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	3314      	adds	r3, #20
 800e568:	2106      	movs	r1, #6
 800e56a:	4618      	mov	r0, r3
 800e56c:	f00b fb74 	bl	8019c58 <sys_mbox_new>
 800e570:	4603      	mov	r3, r0
 800e572:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800e574:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d118      	bne.n	800e5ae <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	2202      	movs	r2, #2
 800e582:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68fa      	ldr	r2, [r7, #12]
 800e58a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4619      	mov	r1, r3
 800e598:	4610      	mov	r0, r2
 800e59a:	f003 ffbd 	bl	8012518 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	4912      	ldr	r1, [pc, #72]	; (800e5f0 <lwip_netconn_do_listen+0x12c>)
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f004 f82e 	bl	8012608 <tcp_accept>
 800e5ac:	e017      	b.n	800e5de <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800e5ae:	68f8      	ldr	r0, [r7, #12]
 800e5b0:	f002 fdde 	bl	8011170 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	605a      	str	r2, [r3, #4]
 800e5bc:	e00f      	b.n	800e5de <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	785b      	ldrb	r3, [r3, #1]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d102      	bne.n	800e5ce <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	72fb      	strb	r3, [r7, #11]
 800e5cc:	e007      	b.n	800e5de <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800e5ce:	23f5      	movs	r3, #245	; 0xf5
 800e5d0:	72fb      	strb	r3, [r7, #11]
 800e5d2:	e004      	b.n	800e5de <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800e5d4:	23f0      	movs	r3, #240	; 0xf0
 800e5d6:	72fb      	strb	r3, [r7, #11]
 800e5d8:	e001      	b.n	800e5de <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800e5da:	23f5      	movs	r3, #245	; 0xf5
 800e5dc:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800e5de:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e5e6:	bf00      	nop
 800e5e8:	3718      	adds	r7, #24
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	0800dc99 	.word	0x0800dc99

0800e5f4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	2200      	movs	r2, #0
 800e604:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d022      	beq.n	800e656 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e61a:	2b10      	cmp	r3, #16
 800e61c:	d11b      	bne.n	800e656 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e61e:	693b      	ldr	r3, [r7, #16]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e62a:	d202      	bcs.n	800e632 <lwip_netconn_do_recv+0x3e>
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	e001      	b.n	800e636 <lwip_netconn_do_recv+0x42>
 800e632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e636:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	89fa      	ldrh	r2, [r7, #14]
 800e640:	4611      	mov	r1, r2
 800e642:	4618      	mov	r0, r3
 800e644:	f003 f8a2 	bl	801178c <tcp_recved>
        remaining -= recved;
 800e648:	89fb      	ldrh	r3, [r7, #14]
 800e64a:	697a      	ldr	r2, [r7, #20]
 800e64c:	1ad3      	subs	r3, r2, r3
 800e64e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d1e6      	bne.n	800e624 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e656:	bf00      	nop
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
	...

0800e660 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b088      	sub	sp, #32
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	460b      	mov	r3, r1
 800e66a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d106      	bne.n	800e684 <lwip_netconn_do_writemore+0x24>
 800e676:	4b96      	ldr	r3, [pc, #600]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e678:	f240 6273 	movw	r2, #1651	; 0x673
 800e67c:	4995      	ldr	r1, [pc, #596]	; (800e8d4 <lwip_netconn_do_writemore+0x274>)
 800e67e:	4896      	ldr	r0, [pc, #600]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e680:	f00b fe78 	bl	801a374 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	785b      	ldrb	r3, [r3, #1]
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d006      	beq.n	800e69a <lwip_netconn_do_writemore+0x3a>
 800e68c:	4b90      	ldr	r3, [pc, #576]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e68e:	f240 6274 	movw	r2, #1652	; 0x674
 800e692:	4992      	ldr	r1, [pc, #584]	; (800e8dc <lwip_netconn_do_writemore+0x27c>)
 800e694:	4890      	ldr	r0, [pc, #576]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e696:	f00b fe6d 	bl	801a374 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d106      	bne.n	800e6b0 <lwip_netconn_do_writemore+0x50>
 800e6a2:	4b8b      	ldr	r3, [pc, #556]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e6a4:	f240 6275 	movw	r2, #1653	; 0x675
 800e6a8:	498d      	ldr	r1, [pc, #564]	; (800e8e0 <lwip_netconn_do_writemore+0x280>)
 800e6aa:	488b      	ldr	r0, [pc, #556]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e6ac:	f00b fe62 	bl	801a374 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	685b      	ldr	r3, [r3, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d106      	bne.n	800e6c6 <lwip_netconn_do_writemore+0x66>
 800e6b8:	4b85      	ldr	r3, [pc, #532]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e6ba:	f240 6276 	movw	r2, #1654	; 0x676
 800e6be:	4989      	ldr	r1, [pc, #548]	; (800e8e4 <lwip_netconn_do_writemore+0x284>)
 800e6c0:	4885      	ldr	r0, [pc, #532]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e6c2:	f00b fe57 	bl	801a374 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	699a      	ldr	r2, [r3, #24]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	695b      	ldr	r3, [r3, #20]
 800e6d2:	429a      	cmp	r2, r3
 800e6d4:	d306      	bcc.n	800e6e4 <lwip_netconn_do_writemore+0x84>
 800e6d6:	4b7e      	ldr	r3, [pc, #504]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e6d8:	f240 6277 	movw	r2, #1655	; 0x677
 800e6dc:	4982      	ldr	r1, [pc, #520]	; (800e8e8 <lwip_netconn_do_writemore+0x288>)
 800e6de:	487e      	ldr	r0, [pc, #504]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e6e0:	f00b fe48 	bl	801a374 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6a1b      	ldr	r3, [r3, #32]
 800e6e8:	899b      	ldrh	r3, [r3, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d106      	bne.n	800e6fc <lwip_netconn_do_writemore+0x9c>
 800e6ee:	4b78      	ldr	r3, [pc, #480]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e6f0:	f240 6279 	movw	r2, #1657	; 0x679
 800e6f4:	497d      	ldr	r1, [pc, #500]	; (800e8ec <lwip_netconn_do_writemore+0x28c>)
 800e6f6:	4878      	ldr	r0, [pc, #480]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e6f8:	f00b fe3c 	bl	801a374 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6a1b      	ldr	r3, [r3, #32]
 800e700:	7f1b      	ldrb	r3, [r3, #28]
 800e702:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	7f1b      	ldrb	r3, [r3, #28]
 800e708:	f003 0302 	and.w	r3, r3, #2
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d104      	bne.n	800e71a <lwip_netconn_do_writemore+0xba>
 800e710:	7ebb      	ldrb	r3, [r7, #26]
 800e712:	f003 0304 	and.w	r3, r3, #4
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <lwip_netconn_do_writemore+0xbe>
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <lwip_netconn_do_writemore+0xc0>
 800e71e:	2300      	movs	r3, #0
 800e720:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a1b      	ldr	r3, [r3, #32]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	4413      	add	r3, r2
 800e732:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a1b      	ldr	r3, [r3, #32]
 800e738:	689b      	ldr	r3, [r3, #8]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a1b      	ldr	r3, [r3, #32]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e74c:	d307      	bcc.n	800e75e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e74e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e752:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e754:	7ebb      	ldrb	r3, [r7, #26]
 800e756:	f043 0302 	orr.w	r3, r3, #2
 800e75a:	76bb      	strb	r3, [r7, #26]
 800e75c:	e001      	b.n	800e762 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e76a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e76c:	89fa      	ldrh	r2, [r7, #14]
 800e76e:	8bbb      	ldrh	r3, [r7, #28]
 800e770:	429a      	cmp	r2, r3
 800e772:	d216      	bcs.n	800e7a2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e774:	89fb      	ldrh	r3, [r7, #14]
 800e776:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e778:	7e3b      	ldrb	r3, [r7, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00d      	beq.n	800e79a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e77e:	8bbb      	ldrh	r3, [r7, #28]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10e      	bne.n	800e7a2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6a1b      	ldr	r3, [r3, #32]
 800e788:	699b      	ldr	r3, [r3, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d102      	bne.n	800e794 <lwip_netconn_do_writemore+0x134>
 800e78e:	f06f 0306 	mvn.w	r3, #6
 800e792:	e000      	b.n	800e796 <lwip_netconn_do_writemore+0x136>
 800e794:	2300      	movs	r3, #0
 800e796:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e798:	e07d      	b.n	800e896 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e79a:	7ebb      	ldrb	r3, [r7, #26]
 800e79c:	f043 0302 	orr.w	r3, r3, #2
 800e7a0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a1b      	ldr	r3, [r3, #32]
 800e7a6:	691a      	ldr	r2, [r3, #16]
 800e7a8:	8bbb      	ldrh	r3, [r7, #28]
 800e7aa:	441a      	add	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6a1b      	ldr	r3, [r3, #32]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d906      	bls.n	800e7c6 <lwip_netconn_do_writemore+0x166>
 800e7b8:	4b45      	ldr	r3, [pc, #276]	; (800e8d0 <lwip_netconn_do_writemore+0x270>)
 800e7ba:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e7be:	494c      	ldr	r1, [pc, #304]	; (800e8f0 <lwip_netconn_do_writemore+0x290>)
 800e7c0:	4845      	ldr	r0, [pc, #276]	; (800e8d8 <lwip_netconn_do_writemore+0x278>)
 800e7c2:	f00b fdd7 	bl	801a374 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e7c6:	8bbb      	ldrh	r3, [r7, #28]
 800e7c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	d103      	bne.n	800e7d8 <lwip_netconn_do_writemore+0x178>
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7d6:	d209      	bcs.n	800e7ec <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e7dc:	8bba      	ldrh	r2, [r7, #28]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d10b      	bne.n	800e7fa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	6a1b      	ldr	r3, [r3, #32]
 800e7e6:	899b      	ldrh	r3, [r3, #12]
 800e7e8:	2b01      	cmp	r3, #1
 800e7ea:	d906      	bls.n	800e7fa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e7f0:	7ebb      	ldrb	r3, [r7, #26]
 800e7f2:	f043 0302 	orr.w	r3, r3, #2
 800e7f6:	76bb      	strb	r3, [r7, #26]
 800e7f8:	e001      	b.n	800e7fe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	6858      	ldr	r0, [r3, #4]
 800e802:	7ebb      	ldrb	r3, [r7, #26]
 800e804:	8bba      	ldrh	r2, [r7, #28]
 800e806:	6979      	ldr	r1, [r7, #20]
 800e808:	f006 fdc8 	bl	801539c <tcp_write>
 800e80c:	4603      	mov	r3, r0
 800e80e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e810:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d12c      	bne.n	800e872 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6a1b      	ldr	r3, [r3, #32]
 800e81c:	6999      	ldr	r1, [r3, #24]
 800e81e:	8bba      	ldrh	r2, [r7, #28]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6a1b      	ldr	r3, [r3, #32]
 800e824:	440a      	add	r2, r1
 800e826:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a1b      	ldr	r3, [r3, #32]
 800e82c:	6919      	ldr	r1, [r3, #16]
 800e82e:	8bba      	ldrh	r2, [r7, #28]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6a1b      	ldr	r3, [r3, #32]
 800e834:	440a      	add	r2, r1
 800e836:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6a1b      	ldr	r3, [r3, #32]
 800e83c:	691a      	ldr	r2, [r3, #16]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6a1b      	ldr	r3, [r3, #32]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	d113      	bne.n	800e872 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	899a      	ldrh	r2, [r3, #12]
 800e850:	3a01      	subs	r2, #1
 800e852:	b292      	uxth	r2, r2
 800e854:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a1b      	ldr	r3, [r3, #32]
 800e85a:	899b      	ldrh	r3, [r3, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d008      	beq.n	800e872 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a1b      	ldr	r3, [r3, #32]
 800e864:	689a      	ldr	r2, [r3, #8]
 800e866:	3208      	adds	r2, #8
 800e868:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6a1b      	ldr	r3, [r3, #32]
 800e86e:	2200      	movs	r2, #0
 800e870:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e872:	7e7b      	ldrb	r3, [r7, #25]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d004      	beq.n	800e882 <lwip_netconn_do_writemore+0x222>
 800e878:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f43f af50 	beq.w	800e722 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e882:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d004      	beq.n	800e894 <lwip_netconn_do_writemore+0x234>
 800e88a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e88e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e892:	d146      	bne.n	800e922 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e894:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e896:	7e3b      	ldrb	r3, [r7, #24]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d02b      	beq.n	800e8f4 <lwip_netconn_do_writemore+0x294>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a1b      	ldr	r3, [r3, #32]
 800e8a0:	699a      	ldr	r2, [r3, #24]
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d223      	bcs.n	800e8f4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d005      	beq.n	800e8c0 <lwip_netconn_do_writemore+0x260>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	2103      	movs	r1, #3
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7f1b      	ldrb	r3, [r3, #28]
 800e8c4:	f043 0310 	orr.w	r3, r3, #16
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	771a      	strb	r2, [r3, #28]
 800e8ce:	e028      	b.n	800e922 <lwip_netconn_do_writemore+0x2c2>
 800e8d0:	0801b600 	.word	0x0801b600
 800e8d4:	0801b758 	.word	0x0801b758
 800e8d8:	0801b644 	.word	0x0801b644
 800e8dc:	0801ba60 	.word	0x0801ba60
 800e8e0:	0801b768 	.word	0x0801b768
 800e8e4:	0801ba80 	.word	0x0801ba80
 800e8e8:	0801ba98 	.word	0x0801ba98
 800e8ec:	0801bad8 	.word	0x0801bad8
 800e8f0:	0801bb00 	.word	0x0801bb00
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e8fc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e900:	d305      	bcc.n	800e90e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e90a:	2b04      	cmp	r3, #4
 800e90c:	d909      	bls.n	800e922 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e912:	2b00      	cmp	r3, #0
 800e914:	d005      	beq.n	800e922 <lwip_netconn_do_writemore+0x2c2>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e91a:	2200      	movs	r2, #0
 800e91c:	2103      	movs	r1, #3
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e922:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d11d      	bne.n	800e966 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a1b      	ldr	r3, [r3, #32]
 800e92e:	699a      	ldr	r2, [r3, #24]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6a1b      	ldr	r3, [r3, #32]
 800e934:	695b      	ldr	r3, [r3, #20]
 800e936:	429a      	cmp	r2, r3
 800e938:	d002      	beq.n	800e940 <lwip_netconn_do_writemore+0x2e0>
 800e93a:	7e3b      	ldrb	r3, [r7, #24]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d001      	beq.n	800e944 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e940:	2301      	movs	r3, #1
 800e942:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	f007 fb11 	bl	8015f70 <tcp_output>
 800e94e:	4603      	mov	r3, r0
 800e950:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e952:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e956:	f113 0f04 	cmn.w	r3, #4
 800e95a:	d12c      	bne.n	800e9b6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e95c:	7b3b      	ldrb	r3, [r7, #12]
 800e95e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e960:	2301      	movs	r3, #1
 800e962:	76fb      	strb	r3, [r7, #27]
 800e964:	e027      	b.n	800e9b6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e966:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e96a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e96e:	d120      	bne.n	800e9b2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	4618      	mov	r0, r3
 800e976:	f007 fafb 	bl	8015f70 <tcp_output>
 800e97a:	4603      	mov	r3, r0
 800e97c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e97e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e982:	f113 0f04 	cmn.w	r3, #4
 800e986:	d104      	bne.n	800e992 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e988:	7b7b      	ldrb	r3, [r7, #13]
 800e98a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e98c:	2301      	movs	r3, #1
 800e98e:	76fb      	strb	r3, [r7, #27]
 800e990:	e011      	b.n	800e9b6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e992:	7e3b      	ldrb	r3, [r7, #24]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00e      	beq.n	800e9b6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6a1b      	ldr	r3, [r3, #32]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d102      	bne.n	800e9a8 <lwip_netconn_do_writemore+0x348>
 800e9a2:	f06f 0306 	mvn.w	r3, #6
 800e9a6:	e000      	b.n	800e9aa <lwip_netconn_do_writemore+0x34a>
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	76fb      	strb	r3, [r7, #27]
 800e9b0:	e001      	b.n	800e9b6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e9b6:	7efb      	ldrb	r3, [r7, #27]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d015      	beq.n	800e9e8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	330c      	adds	r3, #12
 800e9c4:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6a1b      	ldr	r3, [r3, #32]
 800e9ca:	7ffa      	ldrb	r2, [r7, #31]
 800e9cc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e9da:	78fb      	ldrb	r3, [r7, #3]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e9e0:	68b8      	ldr	r0, [r7, #8]
 800e9e2:	f00b fa3b 	bl	8019e5c <sys_sem_signal>
 800e9e6:	e002      	b.n	800e9ee <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e9e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9ec:	e000      	b.n	800e9f0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3720      	adds	r7, #32
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7fe fdff 	bl	800d60c <netconn_err>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ea12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d166      	bne.n	800eae8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea24:	2b10      	cmp	r3, #16
 800ea26:	d15d      	bne.n	800eae4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	785b      	ldrb	r3, [r3, #1]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ea32:	23fb      	movs	r3, #251	; 0xfb
 800ea34:	73fb      	strb	r3, [r7, #15]
 800ea36:	e057      	b.n	800eae8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d04d      	beq.n	800eade <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2201      	movs	r2, #1
 800ea48:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	6a1b      	ldr	r3, [r3, #32]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d006      	beq.n	800ea62 <lwip_netconn_do_write+0x6a>
 800ea54:	4b28      	ldr	r3, [pc, #160]	; (800eaf8 <lwip_netconn_do_write+0x100>)
 800ea56:	f240 7223 	movw	r2, #1827	; 0x723
 800ea5a:	4928      	ldr	r1, [pc, #160]	; (800eafc <lwip_netconn_do_write+0x104>)
 800ea5c:	4828      	ldr	r0, [pc, #160]	; (800eb00 <lwip_netconn_do_write+0x108>)
 800ea5e:	f00b fc89 	bl	801a374 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d106      	bne.n	800ea78 <lwip_netconn_do_write+0x80>
 800ea6a:	4b23      	ldr	r3, [pc, #140]	; (800eaf8 <lwip_netconn_do_write+0x100>)
 800ea6c:	f240 7224 	movw	r2, #1828	; 0x724
 800ea70:	4924      	ldr	r1, [pc, #144]	; (800eb04 <lwip_netconn_do_write+0x10c>)
 800ea72:	4823      	ldr	r0, [pc, #140]	; (800eb00 <lwip_netconn_do_write+0x108>)
 800ea74:	f00b fc7e 	bl	801a374 <iprintf>
        msg->conn->current_msg = msg;
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	68ba      	ldr	r2, [r7, #8]
 800ea7e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2100      	movs	r1, #0
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7ff fdea 	bl	800e660 <lwip_netconn_do_writemore>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d02e      	beq.n	800eaf0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	785b      	ldrb	r3, [r3, #1]
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	d006      	beq.n	800eaaa <lwip_netconn_do_write+0xb2>
 800ea9c:	4b16      	ldr	r3, [pc, #88]	; (800eaf8 <lwip_netconn_do_write+0x100>)
 800ea9e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800eaa2:	4919      	ldr	r1, [pc, #100]	; (800eb08 <lwip_netconn_do_write+0x110>)
 800eaa4:	4816      	ldr	r0, [pc, #88]	; (800eb00 <lwip_netconn_do_write+0x108>)
 800eaa6:	f00b fc65 	bl	801a374 <iprintf>
          UNLOCK_TCPIP_CORE();
 800eaaa:	4818      	ldr	r0, [pc, #96]	; (800eb0c <lwip_netconn_do_write+0x114>)
 800eaac:	f00b fa3f 	bl	8019f2e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	330c      	adds	r3, #12
 800eab6:	2100      	movs	r1, #0
 800eab8:	4618      	mov	r0, r3
 800eaba:	f00b f99e 	bl	8019dfa <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800eabe:	4813      	ldr	r0, [pc, #76]	; (800eb0c <lwip_netconn_do_write+0x114>)
 800eac0:	f00b fa26 	bl	8019f10 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800eac4:	68bb      	ldr	r3, [r7, #8]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	785b      	ldrb	r3, [r3, #1]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d110      	bne.n	800eaf0 <lwip_netconn_do_write+0xf8>
 800eace:	4b0a      	ldr	r3, [pc, #40]	; (800eaf8 <lwip_netconn_do_write+0x100>)
 800ead0:	f240 722c 	movw	r2, #1836	; 0x72c
 800ead4:	490c      	ldr	r1, [pc, #48]	; (800eb08 <lwip_netconn_do_write+0x110>)
 800ead6:	480a      	ldr	r0, [pc, #40]	; (800eb00 <lwip_netconn_do_write+0x108>)
 800ead8:	f00b fc4c 	bl	801a374 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800eadc:	e008      	b.n	800eaf0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800eade:	23f5      	movs	r3, #245	; 0xf5
 800eae0:	73fb      	strb	r3, [r7, #15]
 800eae2:	e001      	b.n	800eae8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800eae4:	23fa      	movs	r3, #250	; 0xfa
 800eae6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	7bfa      	ldrb	r2, [r7, #15]
 800eaec:	711a      	strb	r2, [r3, #4]
 800eaee:	e000      	b.n	800eaf2 <lwip_netconn_do_write+0xfa>
        return;
 800eaf0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800eaf2:	3710      	adds	r7, #16
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	0801b600 	.word	0x0801b600
 800eafc:	0801b9a4 	.word	0x0801b9a4
 800eb00:	0801b644 	.word	0x0801b644
 800eb04:	0801bb2c 	.word	0x0801bb2c
 800eb08:	0801b9c0 	.word	0x0801b9c0
 800eb0c:	2004b0b8 	.word	0x2004b0b8

0800eb10 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	785b      	ldrb	r3, [r3, #1]
 800eb22:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d069      	beq.n	800ec02 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800eb38:	2b10      	cmp	r3, #16
 800eb3a:	d162      	bne.n	800ec02 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800eb40:	2b03      	cmp	r3, #3
 800eb42:	d002      	beq.n	800eb4a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eb44:	7afb      	ldrb	r3, [r7, #11]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d05b      	beq.n	800ec02 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800eb4a:	7afb      	ldrb	r3, [r7, #11]
 800eb4c:	2b03      	cmp	r3, #3
 800eb4e:	d103      	bne.n	800eb58 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	22f5      	movs	r2, #245	; 0xf5
 800eb54:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eb56:	e059      	b.n	800ec0c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d103      	bne.n	800eb66 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	22fb      	movs	r2, #251	; 0xfb
 800eb62:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eb64:	e052      	b.n	800ec0c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	7a1b      	ldrb	r3, [r3, #8]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d004      	beq.n	800eb7c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7ff fa82 	bl	800e080 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	6a1b      	ldr	r3, [r3, #32]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d006      	beq.n	800eb94 <lwip_netconn_do_close+0x84>
 800eb86:	4b23      	ldr	r3, [pc, #140]	; (800ec14 <lwip_netconn_do_close+0x104>)
 800eb88:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800eb8c:	4922      	ldr	r1, [pc, #136]	; (800ec18 <lwip_netconn_do_close+0x108>)
 800eb8e:	4823      	ldr	r0, [pc, #140]	; (800ec1c <lwip_netconn_do_close+0x10c>)
 800eb90:	f00b fbf0 	bl	801a374 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	2204      	movs	r2, #4
 800eb9a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68fa      	ldr	r2, [r7, #12]
 800eba2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7ff fae6 	bl	800e17c <lwip_netconn_do_close_internal>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d029      	beq.n	800ec0a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	785b      	ldrb	r3, [r3, #1]
 800ebbc:	2b04      	cmp	r3, #4
 800ebbe:	d006      	beq.n	800ebce <lwip_netconn_do_close+0xbe>
 800ebc0:	4b14      	ldr	r3, [pc, #80]	; (800ec14 <lwip_netconn_do_close+0x104>)
 800ebc2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ebc6:	4916      	ldr	r1, [pc, #88]	; (800ec20 <lwip_netconn_do_close+0x110>)
 800ebc8:	4814      	ldr	r0, [pc, #80]	; (800ec1c <lwip_netconn_do_close+0x10c>)
 800ebca:	f00b fbd3 	bl	801a374 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ebce:	4815      	ldr	r0, [pc, #84]	; (800ec24 <lwip_netconn_do_close+0x114>)
 800ebd0:	f00b f9ad 	bl	8019f2e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	330c      	adds	r3, #12
 800ebda:	2100      	movs	r1, #0
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f00b f90c 	bl	8019dfa <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ebe2:	4810      	ldr	r0, [pc, #64]	; (800ec24 <lwip_netconn_do_close+0x114>)
 800ebe4:	f00b f994 	bl	8019f10 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	785b      	ldrb	r3, [r3, #1]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d00b      	beq.n	800ec0a <lwip_netconn_do_close+0xfa>
 800ebf2:	4b08      	ldr	r3, [pc, #32]	; (800ec14 <lwip_netconn_do_close+0x104>)
 800ebf4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ebf8:	4909      	ldr	r1, [pc, #36]	; (800ec20 <lwip_netconn_do_close+0x110>)
 800ebfa:	4808      	ldr	r0, [pc, #32]	; (800ec1c <lwip_netconn_do_close+0x10c>)
 800ebfc:	f00b fbba 	bl	801a374 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ec00:	e003      	b.n	800ec0a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	22f5      	movs	r2, #245	; 0xf5
 800ec06:	711a      	strb	r2, [r3, #4]
 800ec08:	e000      	b.n	800ec0c <lwip_netconn_do_close+0xfc>
      return;
 800ec0a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	0801b600 	.word	0x0801b600
 800ec18:	0801b9a4 	.word	0x0801b9a4
 800ec1c:	0801b644 	.word	0x0801b644
 800ec20:	0801b9c0 	.word	0x0801b9c0
 800ec24:	2004b0b8 	.word	0x2004b0b8

0800ec28 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d013      	beq.n	800ec5e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00b      	beq.n	800ec56 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4618      	mov	r0, r3
 800ec44:	f001 fdea 	bl	801081c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	605a      	str	r2, [r3, #4]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	685a      	ldr	r2, [r3, #4]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ec56:	6879      	ldr	r1, [r7, #4]
 800ec58:	2006      	movs	r0, #6
 800ec5a:	f000 ff3b 	bl	800fad4 <memp_free>
  }
}
 800ec5e:	bf00      	nop
 800ec60:	3708      	adds	r7, #8
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
	...

0800ec68 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d108      	bne.n	800ec88 <netbuf_next+0x20>
 800ec76:	4b11      	ldr	r3, [pc, #68]	; (800ecbc <netbuf_next+0x54>)
 800ec78:	22e0      	movs	r2, #224	; 0xe0
 800ec7a:	4911      	ldr	r1, [pc, #68]	; (800ecc0 <netbuf_next+0x58>)
 800ec7c:	4811      	ldr	r0, [pc, #68]	; (800ecc4 <netbuf_next+0x5c>)
 800ec7e:	f00b fb79 	bl	801a374 <iprintf>
 800ec82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec86:	e014      	b.n	800ecb2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d102      	bne.n	800ec98 <netbuf_next+0x30>
    return -1;
 800ec92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec96:	e00c      	b.n	800ecb2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <netbuf_next+0x48>
    return 1;
 800ecac:	2301      	movs	r3, #1
 800ecae:	e000      	b.n	800ecb2 <netbuf_next+0x4a>
  }
  return 0;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	0801bb58 	.word	0x0801bb58
 800ecc0:	0801bcb8 	.word	0x0801bcb8
 800ecc4:	0801bba8 	.word	0x0801bba8

0800ecc8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ecd2:	f008 fa05 	bl	80170e0 <sys_timeouts_sleeptime>
 800ecd6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ecde:	d10b      	bne.n	800ecf8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ece0:	4813      	ldr	r0, [pc, #76]	; (800ed30 <tcpip_timeouts_mbox_fetch+0x68>)
 800ece2:	f00b f924 	bl	8019f2e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ece6:	2200      	movs	r2, #0
 800ece8:	6839      	ldr	r1, [r7, #0]
 800ecea:	6878      	ldr	r0, [r7, #4]
 800ecec:	f00a fffa 	bl	8019ce4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ecf0:	480f      	ldr	r0, [pc, #60]	; (800ed30 <tcpip_timeouts_mbox_fetch+0x68>)
 800ecf2:	f00b f90d 	bl	8019f10 <sys_mutex_lock>
    return;
 800ecf6:	e018      	b.n	800ed2a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d102      	bne.n	800ed04 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ecfe:	f008 f9b5 	bl	801706c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ed02:	e7e6      	b.n	800ecd2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ed04:	480a      	ldr	r0, [pc, #40]	; (800ed30 <tcpip_timeouts_mbox_fetch+0x68>)
 800ed06:	f00b f912 	bl	8019f2e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	6839      	ldr	r1, [r7, #0]
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f00a ffe8 	bl	8019ce4 <sys_arch_mbox_fetch>
 800ed14:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ed16:	4806      	ldr	r0, [pc, #24]	; (800ed30 <tcpip_timeouts_mbox_fetch+0x68>)
 800ed18:	f00b f8fa 	bl	8019f10 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed22:	d102      	bne.n	800ed2a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ed24:	f008 f9a2 	bl	801706c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ed28:	e7d3      	b.n	800ecd2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}
 800ed30:	2004b0b8 	.word	0x2004b0b8

0800ed34 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ed3c:	4810      	ldr	r0, [pc, #64]	; (800ed80 <tcpip_thread+0x4c>)
 800ed3e:	f00b f8e7 	bl	8019f10 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ed42:	4b10      	ldr	r3, [pc, #64]	; (800ed84 <tcpip_thread+0x50>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d005      	beq.n	800ed56 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ed4a:	4b0e      	ldr	r3, [pc, #56]	; (800ed84 <tcpip_thread+0x50>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4a0e      	ldr	r2, [pc, #56]	; (800ed88 <tcpip_thread+0x54>)
 800ed50:	6812      	ldr	r2, [r2, #0]
 800ed52:	4610      	mov	r0, r2
 800ed54:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ed56:	f107 030c 	add.w	r3, r7, #12
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	480b      	ldr	r0, [pc, #44]	; (800ed8c <tcpip_thread+0x58>)
 800ed5e:	f7ff ffb3 	bl	800ecc8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d106      	bne.n	800ed76 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed68:	4b09      	ldr	r3, [pc, #36]	; (800ed90 <tcpip_thread+0x5c>)
 800ed6a:	2291      	movs	r2, #145	; 0x91
 800ed6c:	4909      	ldr	r1, [pc, #36]	; (800ed94 <tcpip_thread+0x60>)
 800ed6e:	480a      	ldr	r0, [pc, #40]	; (800ed98 <tcpip_thread+0x64>)
 800ed70:	f00b fb00 	bl	801a374 <iprintf>
      continue;
 800ed74:	e003      	b.n	800ed7e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f000 f80f 	bl	800ed9c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ed7e:	e7ea      	b.n	800ed56 <tcpip_thread+0x22>
 800ed80:	2004b0b8 	.word	0x2004b0b8
 800ed84:	2004b0ac 	.word	0x2004b0ac
 800ed88:	2004b0b0 	.word	0x2004b0b0
 800ed8c:	2004b0b4 	.word	0x2004b0b4
 800ed90:	0801bcf0 	.word	0x0801bcf0
 800ed94:	0801bd20 	.word	0x0801bd20
 800ed98:	0801bd40 	.word	0x0801bd40

0800ed9c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d026      	beq.n	800edfa <tcpip_thread_handle_msg+0x5e>
 800edac:	2b02      	cmp	r3, #2
 800edae:	dc2b      	bgt.n	800ee08 <tcpip_thread_handle_msg+0x6c>
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d002      	beq.n	800edba <tcpip_thread_handle_msg+0x1e>
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d015      	beq.n	800ede4 <tcpip_thread_handle_msg+0x48>
 800edb8:	e026      	b.n	800ee08 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	6850      	ldr	r0, [r2, #4]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	6892      	ldr	r2, [r2, #8]
 800edc6:	4611      	mov	r1, r2
 800edc8:	4798      	blx	r3
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d004      	beq.n	800edda <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f001 fd21 	bl	801081c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	2009      	movs	r0, #9
 800edde:	f000 fe79 	bl	800fad4 <memp_free>
      break;
 800ede2:	e018      	b.n	800ee16 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	6892      	ldr	r2, [r2, #8]
 800edec:	4610      	mov	r0, r2
 800edee:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800edf0:	6879      	ldr	r1, [r7, #4]
 800edf2:	2008      	movs	r0, #8
 800edf4:	f000 fe6e 	bl	800fad4 <memp_free>
      break;
 800edf8:	e00d      	b.n	800ee16 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	6892      	ldr	r2, [r2, #8]
 800ee02:	4610      	mov	r0, r2
 800ee04:	4798      	blx	r3
      break;
 800ee06:	e006      	b.n	800ee16 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ee08:	4b05      	ldr	r3, [pc, #20]	; (800ee20 <tcpip_thread_handle_msg+0x84>)
 800ee0a:	22cf      	movs	r2, #207	; 0xcf
 800ee0c:	4905      	ldr	r1, [pc, #20]	; (800ee24 <tcpip_thread_handle_msg+0x88>)
 800ee0e:	4806      	ldr	r0, [pc, #24]	; (800ee28 <tcpip_thread_handle_msg+0x8c>)
 800ee10:	f00b fab0 	bl	801a374 <iprintf>
      break;
 800ee14:	bf00      	nop
  }
}
 800ee16:	bf00      	nop
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	0801bcf0 	.word	0x0801bcf0
 800ee24:	0801bd20 	.word	0x0801bd20
 800ee28:	0801bd40 	.word	0x0801bd40

0800ee2c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ee38:	481a      	ldr	r0, [pc, #104]	; (800eea4 <tcpip_inpkt+0x78>)
 800ee3a:	f00a ff9b 	bl	8019d74 <sys_mbox_valid>
 800ee3e:	4603      	mov	r3, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d105      	bne.n	800ee50 <tcpip_inpkt+0x24>
 800ee44:	4b18      	ldr	r3, [pc, #96]	; (800eea8 <tcpip_inpkt+0x7c>)
 800ee46:	22fc      	movs	r2, #252	; 0xfc
 800ee48:	4918      	ldr	r1, [pc, #96]	; (800eeac <tcpip_inpkt+0x80>)
 800ee4a:	4819      	ldr	r0, [pc, #100]	; (800eeb0 <tcpip_inpkt+0x84>)
 800ee4c:	f00b fa92 	bl	801a374 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ee50:	2009      	movs	r0, #9
 800ee52:	f000 fdc9 	bl	800f9e8 <memp_malloc>
 800ee56:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d102      	bne.n	800ee64 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee62:	e01a      	b.n	800ee9a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	2200      	movs	r2, #0
 800ee68:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	68ba      	ldr	r2, [r7, #8]
 800ee74:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	687a      	ldr	r2, [r7, #4]
 800ee7a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ee7c:	6979      	ldr	r1, [r7, #20]
 800ee7e:	4809      	ldr	r0, [pc, #36]	; (800eea4 <tcpip_inpkt+0x78>)
 800ee80:	f00a ff16 	bl	8019cb0 <sys_mbox_trypost>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee8a:	6979      	ldr	r1, [r7, #20]
 800ee8c:	2009      	movs	r0, #9
 800ee8e:	f000 fe21 	bl	800fad4 <memp_free>
    return ERR_MEM;
 800ee92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee96:	e000      	b.n	800ee9a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ee98:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3718      	adds	r7, #24
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	2004b0b4 	.word	0x2004b0b4
 800eea8:	0801bcf0 	.word	0x0801bcf0
 800eeac:	0801bd68 	.word	0x0801bd68
 800eeb0:	0801bd40 	.word	0x0801bd40

0800eeb4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eec4:	f003 0318 	and.w	r3, r3, #24
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d006      	beq.n	800eeda <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800eecc:	4a08      	ldr	r2, [pc, #32]	; (800eef0 <tcpip_input+0x3c>)
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	6878      	ldr	r0, [r7, #4]
 800eed2:	f7ff ffab 	bl	800ee2c <tcpip_inpkt>
 800eed6:	4603      	mov	r3, r0
 800eed8:	e005      	b.n	800eee6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800eeda:	4a06      	ldr	r2, [pc, #24]	; (800eef4 <tcpip_input+0x40>)
 800eedc:	6839      	ldr	r1, [r7, #0]
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7ff ffa4 	bl	800ee2c <tcpip_inpkt>
 800eee4:	4603      	mov	r3, r0
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3708      	adds	r7, #8
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	08019aad 	.word	0x08019aad
 800eef4:	080189b5 	.word	0x080189b5

0800eef8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
 800ef00:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ef02:	4819      	ldr	r0, [pc, #100]	; (800ef68 <tcpip_try_callback+0x70>)
 800ef04:	f00a ff36 	bl	8019d74 <sys_mbox_valid>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d106      	bne.n	800ef1c <tcpip_try_callback+0x24>
 800ef0e:	4b17      	ldr	r3, [pc, #92]	; (800ef6c <tcpip_try_callback+0x74>)
 800ef10:	f240 125d 	movw	r2, #349	; 0x15d
 800ef14:	4916      	ldr	r1, [pc, #88]	; (800ef70 <tcpip_try_callback+0x78>)
 800ef16:	4817      	ldr	r0, [pc, #92]	; (800ef74 <tcpip_try_callback+0x7c>)
 800ef18:	f00b fa2c 	bl	801a374 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ef1c:	2008      	movs	r0, #8
 800ef1e:	f000 fd63 	bl	800f9e8 <memp_malloc>
 800ef22:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d102      	bne.n	800ef30 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ef2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef2e:	e017      	b.n	800ef60 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2201      	movs	r2, #1
 800ef34:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ef42:	68f9      	ldr	r1, [r7, #12]
 800ef44:	4808      	ldr	r0, [pc, #32]	; (800ef68 <tcpip_try_callback+0x70>)
 800ef46:	f00a feb3 	bl	8019cb0 <sys_mbox_trypost>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d006      	beq.n	800ef5e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ef50:	68f9      	ldr	r1, [r7, #12]
 800ef52:	2008      	movs	r0, #8
 800ef54:	f000 fdbe 	bl	800fad4 <memp_free>
    return ERR_MEM;
 800ef58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef5c:	e000      	b.n	800ef60 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ef5e:	2300      	movs	r3, #0
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	2004b0b4 	.word	0x2004b0b4
 800ef6c:	0801bcf0 	.word	0x0801bcf0
 800ef70:	0801bd68 	.word	0x0801bd68
 800ef74:	0801bd40 	.word	0x0801bd40

0800ef78 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b084      	sub	sp, #16
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	60f8      	str	r0, [r7, #12]
 800ef80:	60b9      	str	r1, [r7, #8]
 800ef82:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ef84:	4806      	ldr	r0, [pc, #24]	; (800efa0 <tcpip_send_msg_wait_sem+0x28>)
 800ef86:	f00a ffc3 	bl	8019f10 <sys_mutex_lock>
  fn(apimsg);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68b8      	ldr	r0, [r7, #8]
 800ef8e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ef90:	4803      	ldr	r0, [pc, #12]	; (800efa0 <tcpip_send_msg_wait_sem+0x28>)
 800ef92:	f00a ffcc 	bl	8019f2e <sys_mutex_unlock>
  return ERR_OK;
 800ef96:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3710      	adds	r7, #16
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}
 800efa0:	2004b0b8 	.word	0x2004b0b8

0800efa4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af02      	add	r7, sp, #8
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  lwip_init();
 800efae:	f000 f871 	bl	800f094 <lwip_init>

  tcpip_init_done = initfunc;
 800efb2:	4a17      	ldr	r2, [pc, #92]	; (800f010 <tcpip_init+0x6c>)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800efb8:	4a16      	ldr	r2, [pc, #88]	; (800f014 <tcpip_init+0x70>)
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800efbe:	2106      	movs	r1, #6
 800efc0:	4815      	ldr	r0, [pc, #84]	; (800f018 <tcpip_init+0x74>)
 800efc2:	f00a fe49 	bl	8019c58 <sys_mbox_new>
 800efc6:	4603      	mov	r3, r0
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d006      	beq.n	800efda <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800efcc:	4b13      	ldr	r3, [pc, #76]	; (800f01c <tcpip_init+0x78>)
 800efce:	f240 2261 	movw	r2, #609	; 0x261
 800efd2:	4913      	ldr	r1, [pc, #76]	; (800f020 <tcpip_init+0x7c>)
 800efd4:	4813      	ldr	r0, [pc, #76]	; (800f024 <tcpip_init+0x80>)
 800efd6:	f00b f9cd 	bl	801a374 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800efda:	4813      	ldr	r0, [pc, #76]	; (800f028 <tcpip_init+0x84>)
 800efdc:	f00a ff82 	bl	8019ee4 <sys_mutex_new>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d006      	beq.n	800eff4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800efe6:	4b0d      	ldr	r3, [pc, #52]	; (800f01c <tcpip_init+0x78>)
 800efe8:	f240 2265 	movw	r2, #613	; 0x265
 800efec:	490f      	ldr	r1, [pc, #60]	; (800f02c <tcpip_init+0x88>)
 800efee:	480d      	ldr	r0, [pc, #52]	; (800f024 <tcpip_init+0x80>)
 800eff0:	f00b f9c0 	bl	801a374 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eff4:	2318      	movs	r3, #24
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800effc:	2200      	movs	r2, #0
 800effe:	490c      	ldr	r1, [pc, #48]	; (800f030 <tcpip_init+0x8c>)
 800f000:	480c      	ldr	r0, [pc, #48]	; (800f034 <tcpip_init+0x90>)
 800f002:	f00a ffa1 	bl	8019f48 <sys_thread_new>
}
 800f006:	bf00      	nop
 800f008:	3708      	adds	r7, #8
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	2004b0ac 	.word	0x2004b0ac
 800f014:	2004b0b0 	.word	0x2004b0b0
 800f018:	2004b0b4 	.word	0x2004b0b4
 800f01c:	0801bcf0 	.word	0x0801bcf0
 800f020:	0801bd78 	.word	0x0801bd78
 800f024:	0801bd40 	.word	0x0801bd40
 800f028:	2004b0b8 	.word	0x2004b0b8
 800f02c:	0801bd9c 	.word	0x0801bd9c
 800f030:	0800ed35 	.word	0x0800ed35
 800f034:	0801bdc0 	.word	0x0801bdc0

0800f038 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f042:	88fb      	ldrh	r3, [r7, #6]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	b21a      	sxth	r2, r3
 800f048:	88fb      	ldrh	r3, [r7, #6]
 800f04a:	0a1b      	lsrs	r3, r3, #8
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	b21b      	sxth	r3, r3
 800f050:	4313      	orrs	r3, r2
 800f052:	b21b      	sxth	r3, r3
 800f054:	b29b      	uxth	r3, r3
}
 800f056:	4618      	mov	r0, r3
 800f058:	370c      	adds	r7, #12
 800f05a:	46bd      	mov	sp, r7
 800f05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f060:	4770      	bx	lr

0800f062 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f062:	b480      	push	{r7}
 800f064:	b083      	sub	sp, #12
 800f066:	af00      	add	r7, sp, #0
 800f068:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	061a      	lsls	r2, r3, #24
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	021b      	lsls	r3, r3, #8
 800f072:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f076:	431a      	orrs	r2, r3
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	0a1b      	lsrs	r3, r3, #8
 800f07c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f080:	431a      	orrs	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	0e1b      	lsrs	r3, r3, #24
 800f086:	4313      	orrs	r3, r2
}
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b082      	sub	sp, #8
 800f098:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f09a:	2300      	movs	r3, #0
 800f09c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f09e:	f00a ff15 	bl	8019ecc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f0a2:	f000 f8d5 	bl	800f250 <mem_init>
  memp_init();
 800f0a6:	f000 fc31 	bl	800f90c <memp_init>
  pbuf_init();
  netif_init();
 800f0aa:	f000 fd3d 	bl	800fb28 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f0ae:	f008 f84f 	bl	8017150 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f0b2:	f001 fe4d 	bl	8010d50 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f0b6:	f007 ff91 	bl	8016fdc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f0ba:	bf00      	nop
 800f0bc:	3708      	adds	r7, #8
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
	...

0800f0c4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f0ce:	4b05      	ldr	r3, [pc, #20]	; (800f0e4 <ptr_to_mem+0x20>)
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	88fb      	ldrh	r3, [r7, #6]
 800f0d4:	4413      	add	r3, r2
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	370c      	adds	r7, #12
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop
 800f0e4:	2004c4e8 	.word	0x2004c4e8

0800f0e8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b083      	sub	sp, #12
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f0f0:	4b05      	ldr	r3, [pc, #20]	; (800f108 <mem_to_ptr+0x20>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	b29b      	uxth	r3, r3
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	370c      	adds	r7, #12
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr
 800f106:	bf00      	nop
 800f108:	2004c4e8 	.word	0x2004c4e8

0800f10c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b085      	sub	sp, #20
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f114:	4b45      	ldr	r3, [pc, #276]	; (800f22c <plug_holes+0x120>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d206      	bcs.n	800f12c <plug_holes+0x20>
 800f11e:	4b44      	ldr	r3, [pc, #272]	; (800f230 <plug_holes+0x124>)
 800f120:	f240 12df 	movw	r2, #479	; 0x1df
 800f124:	4943      	ldr	r1, [pc, #268]	; (800f234 <plug_holes+0x128>)
 800f126:	4844      	ldr	r0, [pc, #272]	; (800f238 <plug_holes+0x12c>)
 800f128:	f00b f924 	bl	801a374 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f12c:	4b43      	ldr	r3, [pc, #268]	; (800f23c <plug_holes+0x130>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	429a      	cmp	r2, r3
 800f134:	d306      	bcc.n	800f144 <plug_holes+0x38>
 800f136:	4b3e      	ldr	r3, [pc, #248]	; (800f230 <plug_holes+0x124>)
 800f138:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f13c:	4940      	ldr	r1, [pc, #256]	; (800f240 <plug_holes+0x134>)
 800f13e:	483e      	ldr	r0, [pc, #248]	; (800f238 <plug_holes+0x12c>)
 800f140:	f00b f918 	bl	801a374 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	791b      	ldrb	r3, [r3, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d006      	beq.n	800f15a <plug_holes+0x4e>
 800f14c:	4b38      	ldr	r3, [pc, #224]	; (800f230 <plug_holes+0x124>)
 800f14e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f152:	493c      	ldr	r1, [pc, #240]	; (800f244 <plug_holes+0x138>)
 800f154:	4838      	ldr	r0, [pc, #224]	; (800f238 <plug_holes+0x12c>)
 800f156:	f00b f90d 	bl	801a374 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f162:	d906      	bls.n	800f172 <plug_holes+0x66>
 800f164:	4b32      	ldr	r3, [pc, #200]	; (800f230 <plug_holes+0x124>)
 800f166:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f16a:	4937      	ldr	r1, [pc, #220]	; (800f248 <plug_holes+0x13c>)
 800f16c:	4832      	ldr	r0, [pc, #200]	; (800f238 <plug_holes+0x12c>)
 800f16e:	f00b f901 	bl	801a374 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	4618      	mov	r0, r3
 800f178:	f7ff ffa4 	bl	800f0c4 <ptr_to_mem>
 800f17c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	429a      	cmp	r2, r3
 800f184:	d024      	beq.n	800f1d0 <plug_holes+0xc4>
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	791b      	ldrb	r3, [r3, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d120      	bne.n	800f1d0 <plug_holes+0xc4>
 800f18e:	4b2b      	ldr	r3, [pc, #172]	; (800f23c <plug_holes+0x130>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	429a      	cmp	r2, r3
 800f196:	d01b      	beq.n	800f1d0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f198:	4b2c      	ldr	r3, [pc, #176]	; (800f24c <plug_holes+0x140>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d102      	bne.n	800f1a8 <plug_holes+0x9c>
      lfree = mem;
 800f1a2:	4a2a      	ldr	r2, [pc, #168]	; (800f24c <plug_holes+0x140>)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	881a      	ldrh	r2, [r3, #0]
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f1b8:	d00a      	beq.n	800f1d0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	881b      	ldrh	r3, [r3, #0]
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff ff80 	bl	800f0c4 <ptr_to_mem>
 800f1c4:	4604      	mov	r4, r0
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f7ff ff8e 	bl	800f0e8 <mem_to_ptr>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	885b      	ldrh	r3, [r3, #2]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f7ff ff75 	bl	800f0c4 <ptr_to_mem>
 800f1da:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d01f      	beq.n	800f224 <plug_holes+0x118>
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	791b      	ldrb	r3, [r3, #4]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d11b      	bne.n	800f224 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f1ec:	4b17      	ldr	r3, [pc, #92]	; (800f24c <plug_holes+0x140>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d102      	bne.n	800f1fc <plug_holes+0xf0>
      lfree = pmem;
 800f1f6:	4a15      	ldr	r2, [pc, #84]	; (800f24c <plug_holes+0x140>)
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	881a      	ldrh	r2, [r3, #0]
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f20c:	d00a      	beq.n	800f224 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	881b      	ldrh	r3, [r3, #0]
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff ff56 	bl	800f0c4 <ptr_to_mem>
 800f218:	4604      	mov	r4, r0
 800f21a:	68b8      	ldr	r0, [r7, #8]
 800f21c:	f7ff ff64 	bl	800f0e8 <mem_to_ptr>
 800f220:	4603      	mov	r3, r0
 800f222:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f224:	bf00      	nop
 800f226:	3714      	adds	r7, #20
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd90      	pop	{r4, r7, pc}
 800f22c:	2004c4e8 	.word	0x2004c4e8
 800f230:	0801bdd0 	.word	0x0801bdd0
 800f234:	0801be00 	.word	0x0801be00
 800f238:	0801be18 	.word	0x0801be18
 800f23c:	2004c4ec 	.word	0x2004c4ec
 800f240:	0801be40 	.word	0x0801be40
 800f244:	0801be5c 	.word	0x0801be5c
 800f248:	0801be78 	.word	0x0801be78
 800f24c:	2004c4f4 	.word	0x2004c4f4

0800f250 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f256:	4b1f      	ldr	r3, [pc, #124]	; (800f2d4 <mem_init+0x84>)
 800f258:	3303      	adds	r3, #3
 800f25a:	f023 0303 	bic.w	r3, r3, #3
 800f25e:	461a      	mov	r2, r3
 800f260:	4b1d      	ldr	r3, [pc, #116]	; (800f2d8 <mem_init+0x88>)
 800f262:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f264:	4b1c      	ldr	r3, [pc, #112]	; (800f2d8 <mem_init+0x88>)
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800f270:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2200      	movs	r2, #0
 800f276:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f27e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800f282:	f7ff ff1f 	bl	800f0c4 <ptr_to_mem>
 800f286:	4603      	mov	r3, r0
 800f288:	4a14      	ldr	r2, [pc, #80]	; (800f2dc <mem_init+0x8c>)
 800f28a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f28c:	4b13      	ldr	r3, [pc, #76]	; (800f2dc <mem_init+0x8c>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2201      	movs	r2, #1
 800f292:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f294:	4b11      	ldr	r3, [pc, #68]	; (800f2dc <mem_init+0x8c>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800f29c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f29e:	4b0f      	ldr	r3, [pc, #60]	; (800f2dc <mem_init+0x8c>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800f2a6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f2a8:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <mem_init+0x88>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a0c      	ldr	r2, [pc, #48]	; (800f2e0 <mem_init+0x90>)
 800f2ae:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f2b0:	480c      	ldr	r0, [pc, #48]	; (800f2e4 <mem_init+0x94>)
 800f2b2:	f00a fe17 	bl	8019ee4 <sys_mutex_new>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d006      	beq.n	800f2ca <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f2bc:	4b0a      	ldr	r3, [pc, #40]	; (800f2e8 <mem_init+0x98>)
 800f2be:	f240 221f 	movw	r2, #543	; 0x21f
 800f2c2:	490a      	ldr	r1, [pc, #40]	; (800f2ec <mem_init+0x9c>)
 800f2c4:	480a      	ldr	r0, [pc, #40]	; (800f2f0 <mem_init+0xa0>)
 800f2c6:	f00b f855 	bl	801a374 <iprintf>
  }
}
 800f2ca:	bf00      	nop
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	2004b0d4 	.word	0x2004b0d4
 800f2d8:	2004c4e8 	.word	0x2004c4e8
 800f2dc:	2004c4ec 	.word	0x2004c4ec
 800f2e0:	2004c4f4 	.word	0x2004c4f4
 800f2e4:	2004c4f0 	.word	0x2004c4f0
 800f2e8:	0801bdd0 	.word	0x0801bdd0
 800f2ec:	0801bea4 	.word	0x0801bea4
 800f2f0:	0801be18 	.word	0x0801be18

0800f2f4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b086      	sub	sp, #24
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff fef3 	bl	800f0e8 <mem_to_ptr>
 800f302:	4603      	mov	r3, r0
 800f304:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	881b      	ldrh	r3, [r3, #0]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff feda 	bl	800f0c4 <ptr_to_mem>
 800f310:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	885b      	ldrh	r3, [r3, #2]
 800f316:	4618      	mov	r0, r3
 800f318:	f7ff fed4 	bl	800f0c4 <ptr_to_mem>
 800f31c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	881b      	ldrh	r3, [r3, #0]
 800f322:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f326:	d818      	bhi.n	800f35a <mem_link_valid+0x66>
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	885b      	ldrh	r3, [r3, #2]
 800f32c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f330:	d813      	bhi.n	800f35a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f336:	8afa      	ldrh	r2, [r7, #22]
 800f338:	429a      	cmp	r2, r3
 800f33a:	d004      	beq.n	800f346 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	881b      	ldrh	r3, [r3, #0]
 800f340:	8afa      	ldrh	r2, [r7, #22]
 800f342:	429a      	cmp	r2, r3
 800f344:	d109      	bne.n	800f35a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f346:	4b08      	ldr	r3, [pc, #32]	; (800f368 <mem_link_valid+0x74>)
 800f348:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f34a:	693a      	ldr	r2, [r7, #16]
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d006      	beq.n	800f35e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	885b      	ldrh	r3, [r3, #2]
 800f354:	8afa      	ldrh	r2, [r7, #22]
 800f356:	429a      	cmp	r2, r3
 800f358:	d001      	beq.n	800f35e <mem_link_valid+0x6a>
    return 0;
 800f35a:	2300      	movs	r3, #0
 800f35c:	e000      	b.n	800f360 <mem_link_valid+0x6c>
  }
  return 1;
 800f35e:	2301      	movs	r3, #1
}
 800f360:	4618      	mov	r0, r3
 800f362:	3718      	adds	r7, #24
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	2004c4ec 	.word	0x2004c4ec

0800f36c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d070      	beq.n	800f45c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f003 0303 	and.w	r3, r3, #3
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00d      	beq.n	800f3a0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f384:	4b37      	ldr	r3, [pc, #220]	; (800f464 <mem_free+0xf8>)
 800f386:	f240 2273 	movw	r2, #627	; 0x273
 800f38a:	4937      	ldr	r1, [pc, #220]	; (800f468 <mem_free+0xfc>)
 800f38c:	4837      	ldr	r0, [pc, #220]	; (800f46c <mem_free+0x100>)
 800f38e:	f00a fff1 	bl	801a374 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f392:	f00a fdf9 	bl	8019f88 <sys_arch_protect>
 800f396:	60f8      	str	r0, [r7, #12]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f00a fe03 	bl	8019fa4 <sys_arch_unprotect>
    return;
 800f39e:	e05e      	b.n	800f45e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	3b08      	subs	r3, #8
 800f3a4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f3a6:	4b32      	ldr	r3, [pc, #200]	; (800f470 <mem_free+0x104>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	69fa      	ldr	r2, [r7, #28]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d306      	bcc.n	800f3be <mem_free+0x52>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f103 020c 	add.w	r2, r3, #12
 800f3b6:	4b2f      	ldr	r3, [pc, #188]	; (800f474 <mem_free+0x108>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d90d      	bls.n	800f3da <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f3be:	4b29      	ldr	r3, [pc, #164]	; (800f464 <mem_free+0xf8>)
 800f3c0:	f240 227f 	movw	r2, #639	; 0x27f
 800f3c4:	492c      	ldr	r1, [pc, #176]	; (800f478 <mem_free+0x10c>)
 800f3c6:	4829      	ldr	r0, [pc, #164]	; (800f46c <mem_free+0x100>)
 800f3c8:	f00a ffd4 	bl	801a374 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3cc:	f00a fddc 	bl	8019f88 <sys_arch_protect>
 800f3d0:	6138      	str	r0, [r7, #16]
 800f3d2:	6938      	ldr	r0, [r7, #16]
 800f3d4:	f00a fde6 	bl	8019fa4 <sys_arch_unprotect>
    return;
 800f3d8:	e041      	b.n	800f45e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3da:	4828      	ldr	r0, [pc, #160]	; (800f47c <mem_free+0x110>)
 800f3dc:	f00a fd98 	bl	8019f10 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	791b      	ldrb	r3, [r3, #4]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d110      	bne.n	800f40a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f3e8:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <mem_free+0xf8>)
 800f3ea:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f3ee:	4924      	ldr	r1, [pc, #144]	; (800f480 <mem_free+0x114>)
 800f3f0:	481e      	ldr	r0, [pc, #120]	; (800f46c <mem_free+0x100>)
 800f3f2:	f00a ffbf 	bl	801a374 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f3f6:	4821      	ldr	r0, [pc, #132]	; (800f47c <mem_free+0x110>)
 800f3f8:	f00a fd99 	bl	8019f2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f3fc:	f00a fdc4 	bl	8019f88 <sys_arch_protect>
 800f400:	6178      	str	r0, [r7, #20]
 800f402:	6978      	ldr	r0, [r7, #20]
 800f404:	f00a fdce 	bl	8019fa4 <sys_arch_unprotect>
    return;
 800f408:	e029      	b.n	800f45e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f40a:	69f8      	ldr	r0, [r7, #28]
 800f40c:	f7ff ff72 	bl	800f2f4 <mem_link_valid>
 800f410:	4603      	mov	r3, r0
 800f412:	2b00      	cmp	r3, #0
 800f414:	d110      	bne.n	800f438 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f416:	4b13      	ldr	r3, [pc, #76]	; (800f464 <mem_free+0xf8>)
 800f418:	f240 2295 	movw	r2, #661	; 0x295
 800f41c:	4919      	ldr	r1, [pc, #100]	; (800f484 <mem_free+0x118>)
 800f41e:	4813      	ldr	r0, [pc, #76]	; (800f46c <mem_free+0x100>)
 800f420:	f00a ffa8 	bl	801a374 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f424:	4815      	ldr	r0, [pc, #84]	; (800f47c <mem_free+0x110>)
 800f426:	f00a fd82 	bl	8019f2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f42a:	f00a fdad 	bl	8019f88 <sys_arch_protect>
 800f42e:	61b8      	str	r0, [r7, #24]
 800f430:	69b8      	ldr	r0, [r7, #24]
 800f432:	f00a fdb7 	bl	8019fa4 <sys_arch_unprotect>
    return;
 800f436:	e012      	b.n	800f45e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	2200      	movs	r2, #0
 800f43c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f43e:	4b12      	ldr	r3, [pc, #72]	; (800f488 <mem_free+0x11c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	69fa      	ldr	r2, [r7, #28]
 800f444:	429a      	cmp	r2, r3
 800f446:	d202      	bcs.n	800f44e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f448:	4a0f      	ldr	r2, [pc, #60]	; (800f488 <mem_free+0x11c>)
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f44e:	69f8      	ldr	r0, [r7, #28]
 800f450:	f7ff fe5c 	bl	800f10c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f454:	4809      	ldr	r0, [pc, #36]	; (800f47c <mem_free+0x110>)
 800f456:	f00a fd6a 	bl	8019f2e <sys_mutex_unlock>
 800f45a:	e000      	b.n	800f45e <mem_free+0xf2>
    return;
 800f45c:	bf00      	nop
}
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	0801bdd0 	.word	0x0801bdd0
 800f468:	0801bec0 	.word	0x0801bec0
 800f46c:	0801be18 	.word	0x0801be18
 800f470:	2004c4e8 	.word	0x2004c4e8
 800f474:	2004c4ec 	.word	0x2004c4ec
 800f478:	0801bee4 	.word	0x0801bee4
 800f47c:	2004c4f0 	.word	0x2004c4f0
 800f480:	0801bf00 	.word	0x0801bf00
 800f484:	0801bf28 	.word	0x0801bf28
 800f488:	2004c4f4 	.word	0x2004c4f4

0800f48c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b088      	sub	sp, #32
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	460b      	mov	r3, r1
 800f496:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f498:	887b      	ldrh	r3, [r7, #2]
 800f49a:	3303      	adds	r3, #3
 800f49c:	b29b      	uxth	r3, r3
 800f49e:	f023 0303 	bic.w	r3, r3, #3
 800f4a2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f4a4:	8bfb      	ldrh	r3, [r7, #30]
 800f4a6:	2b0b      	cmp	r3, #11
 800f4a8:	d801      	bhi.n	800f4ae <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f4aa:	230c      	movs	r3, #12
 800f4ac:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f4ae:	8bfb      	ldrh	r3, [r7, #30]
 800f4b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f4b4:	d803      	bhi.n	800f4be <mem_trim+0x32>
 800f4b6:	8bfa      	ldrh	r2, [r7, #30]
 800f4b8:	887b      	ldrh	r3, [r7, #2]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d201      	bcs.n	800f4c2 <mem_trim+0x36>
    return NULL;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e0d8      	b.n	800f674 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f4c2:	4b6e      	ldr	r3, [pc, #440]	; (800f67c <mem_trim+0x1f0>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d304      	bcc.n	800f4d6 <mem_trim+0x4a>
 800f4cc:	4b6c      	ldr	r3, [pc, #432]	; (800f680 <mem_trim+0x1f4>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d306      	bcc.n	800f4e4 <mem_trim+0x58>
 800f4d6:	4b6b      	ldr	r3, [pc, #428]	; (800f684 <mem_trim+0x1f8>)
 800f4d8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f4dc:	496a      	ldr	r1, [pc, #424]	; (800f688 <mem_trim+0x1fc>)
 800f4de:	486b      	ldr	r0, [pc, #428]	; (800f68c <mem_trim+0x200>)
 800f4e0:	f00a ff48 	bl	801a374 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f4e4:	4b65      	ldr	r3, [pc, #404]	; (800f67c <mem_trim+0x1f0>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	429a      	cmp	r2, r3
 800f4ec:	d304      	bcc.n	800f4f8 <mem_trim+0x6c>
 800f4ee:	4b64      	ldr	r3, [pc, #400]	; (800f680 <mem_trim+0x1f4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d307      	bcc.n	800f508 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4f8:	f00a fd46 	bl	8019f88 <sys_arch_protect>
 800f4fc:	60b8      	str	r0, [r7, #8]
 800f4fe:	68b8      	ldr	r0, [r7, #8]
 800f500:	f00a fd50 	bl	8019fa4 <sys_arch_unprotect>
    return rmem;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	e0b5      	b.n	800f674 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	3b08      	subs	r3, #8
 800f50c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f50e:	69b8      	ldr	r0, [r7, #24]
 800f510:	f7ff fdea 	bl	800f0e8 <mem_to_ptr>
 800f514:	4603      	mov	r3, r0
 800f516:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f518:	69bb      	ldr	r3, [r7, #24]
 800f51a:	881a      	ldrh	r2, [r3, #0]
 800f51c:	8afb      	ldrh	r3, [r7, #22]
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	b29b      	uxth	r3, r3
 800f522:	3b08      	subs	r3, #8
 800f524:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f526:	8bfa      	ldrh	r2, [r7, #30]
 800f528:	8abb      	ldrh	r3, [r7, #20]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d906      	bls.n	800f53c <mem_trim+0xb0>
 800f52e:	4b55      	ldr	r3, [pc, #340]	; (800f684 <mem_trim+0x1f8>)
 800f530:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f534:	4956      	ldr	r1, [pc, #344]	; (800f690 <mem_trim+0x204>)
 800f536:	4855      	ldr	r0, [pc, #340]	; (800f68c <mem_trim+0x200>)
 800f538:	f00a ff1c 	bl	801a374 <iprintf>
  if (newsize > size) {
 800f53c:	8bfa      	ldrh	r2, [r7, #30]
 800f53e:	8abb      	ldrh	r3, [r7, #20]
 800f540:	429a      	cmp	r2, r3
 800f542:	d901      	bls.n	800f548 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f544:	2300      	movs	r3, #0
 800f546:	e095      	b.n	800f674 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f548:	8bfa      	ldrh	r2, [r7, #30]
 800f54a:	8abb      	ldrh	r3, [r7, #20]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d101      	bne.n	800f554 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	e08f      	b.n	800f674 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f554:	484f      	ldr	r0, [pc, #316]	; (800f694 <mem_trim+0x208>)
 800f556:	f00a fcdb 	bl	8019f10 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	4618      	mov	r0, r3
 800f560:	f7ff fdb0 	bl	800f0c4 <ptr_to_mem>
 800f564:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	791b      	ldrb	r3, [r3, #4]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d13f      	bne.n	800f5ee <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f576:	d106      	bne.n	800f586 <mem_trim+0xfa>
 800f578:	4b42      	ldr	r3, [pc, #264]	; (800f684 <mem_trim+0x1f8>)
 800f57a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f57e:	4946      	ldr	r1, [pc, #280]	; (800f698 <mem_trim+0x20c>)
 800f580:	4842      	ldr	r0, [pc, #264]	; (800f68c <mem_trim+0x200>)
 800f582:	f00a fef7 	bl	801a374 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f58c:	8afa      	ldrh	r2, [r7, #22]
 800f58e:	8bfb      	ldrh	r3, [r7, #30]
 800f590:	4413      	add	r3, r2
 800f592:	b29b      	uxth	r3, r3
 800f594:	3308      	adds	r3, #8
 800f596:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f598:	4b40      	ldr	r3, [pc, #256]	; (800f69c <mem_trim+0x210>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	693a      	ldr	r2, [r7, #16]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d106      	bne.n	800f5b0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f5a2:	89fb      	ldrh	r3, [r7, #14]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff fd8d 	bl	800f0c4 <ptr_to_mem>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	4a3b      	ldr	r2, [pc, #236]	; (800f69c <mem_trim+0x210>)
 800f5ae:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f5b0:	89fb      	ldrh	r3, [r7, #14]
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7ff fd86 	bl	800f0c4 <ptr_to_mem>
 800f5b8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f5c0:	693b      	ldr	r3, [r7, #16]
 800f5c2:	89ba      	ldrh	r2, [r7, #12]
 800f5c4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	8afa      	ldrh	r2, [r7, #22]
 800f5ca:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f5cc:	69bb      	ldr	r3, [r7, #24]
 800f5ce:	89fa      	ldrh	r2, [r7, #14]
 800f5d0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	881b      	ldrh	r3, [r3, #0]
 800f5d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f5da:	d047      	beq.n	800f66c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7ff fd6f 	bl	800f0c4 <ptr_to_mem>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	89fb      	ldrh	r3, [r7, #14]
 800f5ea:	8053      	strh	r3, [r2, #2]
 800f5ec:	e03e      	b.n	800f66c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f5ee:	8bfb      	ldrh	r3, [r7, #30]
 800f5f0:	f103 0214 	add.w	r2, r3, #20
 800f5f4:	8abb      	ldrh	r3, [r7, #20]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d838      	bhi.n	800f66c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f5fa:	8afa      	ldrh	r2, [r7, #22]
 800f5fc:	8bfb      	ldrh	r3, [r7, #30]
 800f5fe:	4413      	add	r3, r2
 800f600:	b29b      	uxth	r3, r3
 800f602:	3308      	adds	r3, #8
 800f604:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f606:	69bb      	ldr	r3, [r7, #24]
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f60e:	d106      	bne.n	800f61e <mem_trim+0x192>
 800f610:	4b1c      	ldr	r3, [pc, #112]	; (800f684 <mem_trim+0x1f8>)
 800f612:	f240 3216 	movw	r2, #790	; 0x316
 800f616:	4920      	ldr	r1, [pc, #128]	; (800f698 <mem_trim+0x20c>)
 800f618:	481c      	ldr	r0, [pc, #112]	; (800f68c <mem_trim+0x200>)
 800f61a:	f00a feab 	bl	801a374 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f61e:	89fb      	ldrh	r3, [r7, #14]
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff fd4f 	bl	800f0c4 <ptr_to_mem>
 800f626:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f628:	4b1c      	ldr	r3, [pc, #112]	; (800f69c <mem_trim+0x210>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d202      	bcs.n	800f638 <mem_trim+0x1ac>
      lfree = mem2;
 800f632:	4a1a      	ldr	r2, [pc, #104]	; (800f69c <mem_trim+0x210>)
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	2200      	movs	r2, #0
 800f63c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f63e:	69bb      	ldr	r3, [r7, #24]
 800f640:	881a      	ldrh	r2, [r3, #0]
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	8afa      	ldrh	r2, [r7, #22]
 800f64a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f64c:	69bb      	ldr	r3, [r7, #24]
 800f64e:	89fa      	ldrh	r2, [r7, #14]
 800f650:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f65a:	d007      	beq.n	800f66c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	4618      	mov	r0, r3
 800f662:	f7ff fd2f 	bl	800f0c4 <ptr_to_mem>
 800f666:	4602      	mov	r2, r0
 800f668:	89fb      	ldrh	r3, [r7, #14]
 800f66a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f66c:	4809      	ldr	r0, [pc, #36]	; (800f694 <mem_trim+0x208>)
 800f66e:	f00a fc5e 	bl	8019f2e <sys_mutex_unlock>
  return rmem;
 800f672:	687b      	ldr	r3, [r7, #4]
}
 800f674:	4618      	mov	r0, r3
 800f676:	3720      	adds	r7, #32
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	2004c4e8 	.word	0x2004c4e8
 800f680:	2004c4ec 	.word	0x2004c4ec
 800f684:	0801bdd0 	.word	0x0801bdd0
 800f688:	0801bf5c 	.word	0x0801bf5c
 800f68c:	0801be18 	.word	0x0801be18
 800f690:	0801bf74 	.word	0x0801bf74
 800f694:	2004c4f0 	.word	0x2004c4f0
 800f698:	0801bf94 	.word	0x0801bf94
 800f69c:	2004c4f4 	.word	0x2004c4f4

0800f6a0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f6aa:	88fb      	ldrh	r3, [r7, #6]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d101      	bne.n	800f6b4 <mem_malloc+0x14>
    return NULL;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	e0e2      	b.n	800f87a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f6b4:	88fb      	ldrh	r3, [r7, #6]
 800f6b6:	3303      	adds	r3, #3
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	f023 0303 	bic.w	r3, r3, #3
 800f6be:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f6c0:	8bbb      	ldrh	r3, [r7, #28]
 800f6c2:	2b0b      	cmp	r3, #11
 800f6c4:	d801      	bhi.n	800f6ca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f6ca:	8bbb      	ldrh	r3, [r7, #28]
 800f6cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f6d0:	d803      	bhi.n	800f6da <mem_malloc+0x3a>
 800f6d2:	8bba      	ldrh	r2, [r7, #28]
 800f6d4:	88fb      	ldrh	r3, [r7, #6]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d201      	bcs.n	800f6de <mem_malloc+0x3e>
    return NULL;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	e0cd      	b.n	800f87a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f6de:	4869      	ldr	r0, [pc, #420]	; (800f884 <mem_malloc+0x1e4>)
 800f6e0:	f00a fc16 	bl	8019f10 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f6e4:	4b68      	ldr	r3, [pc, #416]	; (800f888 <mem_malloc+0x1e8>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fcfd 	bl	800f0e8 <mem_to_ptr>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	83fb      	strh	r3, [r7, #30]
 800f6f2:	e0b7      	b.n	800f864 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f6f4:	8bfb      	ldrh	r3, [r7, #30]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7ff fce4 	bl	800f0c4 <ptr_to_mem>
 800f6fc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	791b      	ldrb	r3, [r3, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	f040 80a7 	bne.w	800f856 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	881b      	ldrh	r3, [r3, #0]
 800f70c:	461a      	mov	r2, r3
 800f70e:	8bfb      	ldrh	r3, [r7, #30]
 800f710:	1ad3      	subs	r3, r2, r3
 800f712:	f1a3 0208 	sub.w	r2, r3, #8
 800f716:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f718:	429a      	cmp	r2, r3
 800f71a:	f0c0 809c 	bcc.w	800f856 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	461a      	mov	r2, r3
 800f724:	8bfb      	ldrh	r3, [r7, #30]
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	f1a3 0208 	sub.w	r2, r3, #8
 800f72c:	8bbb      	ldrh	r3, [r7, #28]
 800f72e:	3314      	adds	r3, #20
 800f730:	429a      	cmp	r2, r3
 800f732:	d333      	bcc.n	800f79c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f734:	8bfa      	ldrh	r2, [r7, #30]
 800f736:	8bbb      	ldrh	r3, [r7, #28]
 800f738:	4413      	add	r3, r2
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	3308      	adds	r3, #8
 800f73e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f740:	8a7b      	ldrh	r3, [r7, #18]
 800f742:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f746:	d106      	bne.n	800f756 <mem_malloc+0xb6>
 800f748:	4b50      	ldr	r3, [pc, #320]	; (800f88c <mem_malloc+0x1ec>)
 800f74a:	f240 3287 	movw	r2, #903	; 0x387
 800f74e:	4950      	ldr	r1, [pc, #320]	; (800f890 <mem_malloc+0x1f0>)
 800f750:	4850      	ldr	r0, [pc, #320]	; (800f894 <mem_malloc+0x1f4>)
 800f752:	f00a fe0f 	bl	801a374 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f756:	8a7b      	ldrh	r3, [r7, #18]
 800f758:	4618      	mov	r0, r3
 800f75a:	f7ff fcb3 	bl	800f0c4 <ptr_to_mem>
 800f75e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2200      	movs	r2, #0
 800f764:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	881a      	ldrh	r2, [r3, #0]
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	8bfa      	ldrh	r2, [r7, #30]
 800f772:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	8a7a      	ldrh	r2, [r7, #18]
 800f778:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2201      	movs	r2, #1
 800f77e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f788:	d00b      	beq.n	800f7a2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	4618      	mov	r0, r3
 800f790:	f7ff fc98 	bl	800f0c4 <ptr_to_mem>
 800f794:	4602      	mov	r2, r0
 800f796:	8a7b      	ldrh	r3, [r7, #18]
 800f798:	8053      	strh	r3, [r2, #2]
 800f79a:	e002      	b.n	800f7a2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	2201      	movs	r2, #1
 800f7a0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f7a2:	4b39      	ldr	r3, [pc, #228]	; (800f888 <mem_malloc+0x1e8>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	697a      	ldr	r2, [r7, #20]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	d127      	bne.n	800f7fc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f7ac:	4b36      	ldr	r3, [pc, #216]	; (800f888 <mem_malloc+0x1e8>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f7b2:	e005      	b.n	800f7c0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	881b      	ldrh	r3, [r3, #0]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7ff fc83 	bl	800f0c4 <ptr_to_mem>
 800f7be:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f7c0:	69bb      	ldr	r3, [r7, #24]
 800f7c2:	791b      	ldrb	r3, [r3, #4]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d004      	beq.n	800f7d2 <mem_malloc+0x132>
 800f7c8:	4b33      	ldr	r3, [pc, #204]	; (800f898 <mem_malloc+0x1f8>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	69ba      	ldr	r2, [r7, #24]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d1f0      	bne.n	800f7b4 <mem_malloc+0x114>
          }
          lfree = cur;
 800f7d2:	4a2d      	ldr	r2, [pc, #180]	; (800f888 <mem_malloc+0x1e8>)
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f7d8:	4b2b      	ldr	r3, [pc, #172]	; (800f888 <mem_malloc+0x1e8>)
 800f7da:	681a      	ldr	r2, [r3, #0]
 800f7dc:	4b2e      	ldr	r3, [pc, #184]	; (800f898 <mem_malloc+0x1f8>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d00b      	beq.n	800f7fc <mem_malloc+0x15c>
 800f7e4:	4b28      	ldr	r3, [pc, #160]	; (800f888 <mem_malloc+0x1e8>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	791b      	ldrb	r3, [r3, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d006      	beq.n	800f7fc <mem_malloc+0x15c>
 800f7ee:	4b27      	ldr	r3, [pc, #156]	; (800f88c <mem_malloc+0x1ec>)
 800f7f0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f7f4:	4929      	ldr	r1, [pc, #164]	; (800f89c <mem_malloc+0x1fc>)
 800f7f6:	4827      	ldr	r0, [pc, #156]	; (800f894 <mem_malloc+0x1f4>)
 800f7f8:	f00a fdbc 	bl	801a374 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f7fc:	4821      	ldr	r0, [pc, #132]	; (800f884 <mem_malloc+0x1e4>)
 800f7fe:	f00a fb96 	bl	8019f2e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f802:	8bba      	ldrh	r2, [r7, #28]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	4413      	add	r3, r2
 800f808:	3308      	adds	r3, #8
 800f80a:	4a23      	ldr	r2, [pc, #140]	; (800f898 <mem_malloc+0x1f8>)
 800f80c:	6812      	ldr	r2, [r2, #0]
 800f80e:	4293      	cmp	r3, r2
 800f810:	d906      	bls.n	800f820 <mem_malloc+0x180>
 800f812:	4b1e      	ldr	r3, [pc, #120]	; (800f88c <mem_malloc+0x1ec>)
 800f814:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f818:	4921      	ldr	r1, [pc, #132]	; (800f8a0 <mem_malloc+0x200>)
 800f81a:	481e      	ldr	r0, [pc, #120]	; (800f894 <mem_malloc+0x1f4>)
 800f81c:	f00a fdaa 	bl	801a374 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	f003 0303 	and.w	r3, r3, #3
 800f826:	2b00      	cmp	r3, #0
 800f828:	d006      	beq.n	800f838 <mem_malloc+0x198>
 800f82a:	4b18      	ldr	r3, [pc, #96]	; (800f88c <mem_malloc+0x1ec>)
 800f82c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f830:	491c      	ldr	r1, [pc, #112]	; (800f8a4 <mem_malloc+0x204>)
 800f832:	4818      	ldr	r0, [pc, #96]	; (800f894 <mem_malloc+0x1f4>)
 800f834:	f00a fd9e 	bl	801a374 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f838:	697b      	ldr	r3, [r7, #20]
 800f83a:	f003 0303 	and.w	r3, r3, #3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d006      	beq.n	800f850 <mem_malloc+0x1b0>
 800f842:	4b12      	ldr	r3, [pc, #72]	; (800f88c <mem_malloc+0x1ec>)
 800f844:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f848:	4917      	ldr	r1, [pc, #92]	; (800f8a8 <mem_malloc+0x208>)
 800f84a:	4812      	ldr	r0, [pc, #72]	; (800f894 <mem_malloc+0x1f4>)
 800f84c:	f00a fd92 	bl	801a374 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	3308      	adds	r3, #8
 800f854:	e011      	b.n	800f87a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f856:	8bfb      	ldrh	r3, [r7, #30]
 800f858:	4618      	mov	r0, r3
 800f85a:	f7ff fc33 	bl	800f0c4 <ptr_to_mem>
 800f85e:	4603      	mov	r3, r0
 800f860:	881b      	ldrh	r3, [r3, #0]
 800f862:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f864:	8bfa      	ldrh	r2, [r7, #30]
 800f866:	8bbb      	ldrh	r3, [r7, #28]
 800f868:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 800f86c:	429a      	cmp	r2, r3
 800f86e:	f4ff af41 	bcc.w	800f6f4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f872:	4804      	ldr	r0, [pc, #16]	; (800f884 <mem_malloc+0x1e4>)
 800f874:	f00a fb5b 	bl	8019f2e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f878:	2300      	movs	r3, #0
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3720      	adds	r7, #32
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	2004c4f0 	.word	0x2004c4f0
 800f888:	2004c4f4 	.word	0x2004c4f4
 800f88c:	0801bdd0 	.word	0x0801bdd0
 800f890:	0801bf94 	.word	0x0801bf94
 800f894:	0801be18 	.word	0x0801be18
 800f898:	2004c4ec 	.word	0x2004c4ec
 800f89c:	0801bfa8 	.word	0x0801bfa8
 800f8a0:	0801bfc4 	.word	0x0801bfc4
 800f8a4:	0801bff4 	.word	0x0801bff4
 800f8a8:	0801c024 	.word	0x0801c024

0800f8ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b085      	sub	sp, #20
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	3303      	adds	r3, #3
 800f8c2:	f023 0303 	bic.w	r3, r3, #3
 800f8c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	60fb      	str	r3, [r7, #12]
 800f8cc:	e011      	b.n	800f8f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	689b      	ldr	r3, [r3, #8]
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	60fb      	str	r3, [r7, #12]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	885b      	ldrh	r3, [r3, #2]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	dbe7      	blt.n	800f8ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f8fe:	bf00      	nop
 800f900:	bf00      	nop
 800f902:	3714      	adds	r7, #20
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f912:	2300      	movs	r3, #0
 800f914:	80fb      	strh	r3, [r7, #6]
 800f916:	e009      	b.n	800f92c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f918:	88fb      	ldrh	r3, [r7, #6]
 800f91a:	4a08      	ldr	r2, [pc, #32]	; (800f93c <memp_init+0x30>)
 800f91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f920:	4618      	mov	r0, r3
 800f922:	f7ff ffc3 	bl	800f8ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f926:	88fb      	ldrh	r3, [r7, #6]
 800f928:	3301      	adds	r3, #1
 800f92a:	80fb      	strh	r3, [r7, #6]
 800f92c:	88fb      	ldrh	r3, [r7, #6]
 800f92e:	2b0c      	cmp	r3, #12
 800f930:	d9f2      	bls.n	800f918 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f932:	bf00      	nop
 800f934:	bf00      	nop
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	0801e860 	.word	0x0801e860

0800f940 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b084      	sub	sp, #16
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f948:	f00a fb1e 	bl	8019f88 <sys_arch_protect>
 800f94c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	689b      	ldr	r3, [r3, #8]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d015      	beq.n	800f988 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	68ba      	ldr	r2, [r7, #8]
 800f962:	6812      	ldr	r2, [r2, #0]
 800f964:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	f003 0303 	and.w	r3, r3, #3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d006      	beq.n	800f97e <do_memp_malloc_pool+0x3e>
 800f970:	4b09      	ldr	r3, [pc, #36]	; (800f998 <do_memp_malloc_pool+0x58>)
 800f972:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f976:	4909      	ldr	r1, [pc, #36]	; (800f99c <do_memp_malloc_pool+0x5c>)
 800f978:	4809      	ldr	r0, [pc, #36]	; (800f9a0 <do_memp_malloc_pool+0x60>)
 800f97a:	f00a fcfb 	bl	801a374 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f97e:	68f8      	ldr	r0, [r7, #12]
 800f980:	f00a fb10 	bl	8019fa4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	e003      	b.n	800f990 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f988:	68f8      	ldr	r0, [r7, #12]
 800f98a:	f00a fb0b 	bl	8019fa4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3710      	adds	r7, #16
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	0801c048 	.word	0x0801c048
 800f99c:	0801c078 	.word	0x0801c078
 800f9a0:	0801c09c 	.word	0x0801c09c

0800f9a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d106      	bne.n	800f9c0 <memp_malloc_pool+0x1c>
 800f9b2:	4b0a      	ldr	r3, [pc, #40]	; (800f9dc <memp_malloc_pool+0x38>)
 800f9b4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f9b8:	4909      	ldr	r1, [pc, #36]	; (800f9e0 <memp_malloc_pool+0x3c>)
 800f9ba:	480a      	ldr	r0, [pc, #40]	; (800f9e4 <memp_malloc_pool+0x40>)
 800f9bc:	f00a fcda 	bl	801a374 <iprintf>
  if (desc == NULL) {
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <memp_malloc_pool+0x26>
    return NULL;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	e003      	b.n	800f9d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7ff ffb8 	bl	800f940 <do_memp_malloc_pool>
 800f9d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	0801c048 	.word	0x0801c048
 800f9e0:	0801c0c4 	.word	0x0801c0c4
 800f9e4:	0801c09c 	.word	0x0801c09c

0800f9e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f9f2:	79fb      	ldrb	r3, [r7, #7]
 800f9f4:	2b0c      	cmp	r3, #12
 800f9f6:	d908      	bls.n	800fa0a <memp_malloc+0x22>
 800f9f8:	4b0a      	ldr	r3, [pc, #40]	; (800fa24 <memp_malloc+0x3c>)
 800f9fa:	f240 1257 	movw	r2, #343	; 0x157
 800f9fe:	490a      	ldr	r1, [pc, #40]	; (800fa28 <memp_malloc+0x40>)
 800fa00:	480a      	ldr	r0, [pc, #40]	; (800fa2c <memp_malloc+0x44>)
 800fa02:	f00a fcb7 	bl	801a374 <iprintf>
 800fa06:	2300      	movs	r3, #0
 800fa08:	e008      	b.n	800fa1c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fa0a:	79fb      	ldrb	r3, [r7, #7]
 800fa0c:	4a08      	ldr	r2, [pc, #32]	; (800fa30 <memp_malloc+0x48>)
 800fa0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff ff94 	bl	800f940 <do_memp_malloc_pool>
 800fa18:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}
 800fa24:	0801c048 	.word	0x0801c048
 800fa28:	0801c0d8 	.word	0x0801c0d8
 800fa2c:	0801c09c 	.word	0x0801c09c
 800fa30:	0801e860 	.word	0x0801e860

0800fa34 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b084      	sub	sp, #16
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	f003 0303 	and.w	r3, r3, #3
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d006      	beq.n	800fa56 <do_memp_free_pool+0x22>
 800fa48:	4b0d      	ldr	r3, [pc, #52]	; (800fa80 <do_memp_free_pool+0x4c>)
 800fa4a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fa4e:	490d      	ldr	r1, [pc, #52]	; (800fa84 <do_memp_free_pool+0x50>)
 800fa50:	480d      	ldr	r0, [pc, #52]	; (800fa88 <do_memp_free_pool+0x54>)
 800fa52:	f00a fc8f 	bl	801a374 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fa5a:	f00a fa95 	bl	8019f88 <sys_arch_protect>
 800fa5e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	689b      	ldr	r3, [r3, #8]
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fa72:	68b8      	ldr	r0, [r7, #8]
 800fa74:	f00a fa96 	bl	8019fa4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fa78:	bf00      	nop
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	0801c048 	.word	0x0801c048
 800fa84:	0801c0f8 	.word	0x0801c0f8
 800fa88:	0801c09c 	.word	0x0801c09c

0800fa8c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d106      	bne.n	800faaa <memp_free_pool+0x1e>
 800fa9c:	4b0a      	ldr	r3, [pc, #40]	; (800fac8 <memp_free_pool+0x3c>)
 800fa9e:	f240 1295 	movw	r2, #405	; 0x195
 800faa2:	490a      	ldr	r1, [pc, #40]	; (800facc <memp_free_pool+0x40>)
 800faa4:	480a      	ldr	r0, [pc, #40]	; (800fad0 <memp_free_pool+0x44>)
 800faa6:	f00a fc65 	bl	801a374 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d007      	beq.n	800fac0 <memp_free_pool+0x34>
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d004      	beq.n	800fac0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f7ff ffbb 	bl	800fa34 <do_memp_free_pool>
 800fabe:	e000      	b.n	800fac2 <memp_free_pool+0x36>
    return;
 800fac0:	bf00      	nop
}
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	0801c048 	.word	0x0801c048
 800facc:	0801c0c4 	.word	0x0801c0c4
 800fad0:	0801c09c 	.word	0x0801c09c

0800fad4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b082      	sub	sp, #8
 800fad8:	af00      	add	r7, sp, #0
 800fada:	4603      	mov	r3, r0
 800fadc:	6039      	str	r1, [r7, #0]
 800fade:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fae0:	79fb      	ldrb	r3, [r7, #7]
 800fae2:	2b0c      	cmp	r3, #12
 800fae4:	d907      	bls.n	800faf6 <memp_free+0x22>
 800fae6:	4b0c      	ldr	r3, [pc, #48]	; (800fb18 <memp_free+0x44>)
 800fae8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800faec:	490b      	ldr	r1, [pc, #44]	; (800fb1c <memp_free+0x48>)
 800faee:	480c      	ldr	r0, [pc, #48]	; (800fb20 <memp_free+0x4c>)
 800faf0:	f00a fc40 	bl	801a374 <iprintf>
 800faf4:	e00c      	b.n	800fb10 <memp_free+0x3c>

  if (mem == NULL) {
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d008      	beq.n	800fb0e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	4a09      	ldr	r2, [pc, #36]	; (800fb24 <memp_free+0x50>)
 800fb00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7ff ff94 	bl	800fa34 <do_memp_free_pool>
 800fb0c:	e000      	b.n	800fb10 <memp_free+0x3c>
    return;
 800fb0e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fb10:	3708      	adds	r7, #8
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd80      	pop	{r7, pc}
 800fb16:	bf00      	nop
 800fb18:	0801c048 	.word	0x0801c048
 800fb1c:	0801c118 	.word	0x0801c118
 800fb20:	0801c09c 	.word	0x0801c09c
 800fb24:	0801e860 	.word	0x0801e860

0800fb28 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fb2c:	bf00      	nop
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr
	...

0800fb38 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b086      	sub	sp, #24
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d108      	bne.n	800fb5e <netif_add+0x26>
 800fb4c:	4b57      	ldr	r3, [pc, #348]	; (800fcac <netif_add+0x174>)
 800fb4e:	f240 1227 	movw	r2, #295	; 0x127
 800fb52:	4957      	ldr	r1, [pc, #348]	; (800fcb0 <netif_add+0x178>)
 800fb54:	4857      	ldr	r0, [pc, #348]	; (800fcb4 <netif_add+0x17c>)
 800fb56:	f00a fc0d 	bl	801a374 <iprintf>
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	e0a2      	b.n	800fca4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d108      	bne.n	800fb76 <netif_add+0x3e>
 800fb64:	4b51      	ldr	r3, [pc, #324]	; (800fcac <netif_add+0x174>)
 800fb66:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fb6a:	4953      	ldr	r1, [pc, #332]	; (800fcb8 <netif_add+0x180>)
 800fb6c:	4851      	ldr	r0, [pc, #324]	; (800fcb4 <netif_add+0x17c>)
 800fb6e:	f00a fc01 	bl	801a374 <iprintf>
 800fb72:	2300      	movs	r3, #0
 800fb74:	e096      	b.n	800fca4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d101      	bne.n	800fb80 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fb7c:	4b4f      	ldr	r3, [pc, #316]	; (800fcbc <netif_add+0x184>)
 800fb7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fb86:	4b4d      	ldr	r3, [pc, #308]	; (800fcbc <netif_add+0x184>)
 800fb88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d101      	bne.n	800fb94 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fb90:	4b4a      	ldr	r3, [pc, #296]	; (800fcbc <netif_add+0x184>)
 800fb92:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	2200      	movs	r2, #0
 800fb98:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	4a45      	ldr	r2, [pc, #276]	; (800fcc0 <netif_add+0x188>)
 800fbaa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	2200      	movs	r2, #0
 800fbb0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6a3a      	ldr	r2, [r7, #32]
 800fbc4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fbc6:	4b3f      	ldr	r3, [pc, #252]	; (800fcc4 <netif_add+0x18c>)
 800fbc8:	781a      	ldrb	r2, [r3, #0]
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbd4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	68b9      	ldr	r1, [r7, #8]
 800fbdc:	68f8      	ldr	r0, [r7, #12]
 800fbde:	f000 f913 	bl	800fe08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	4798      	blx	r3
 800fbe8:	4603      	mov	r3, r0
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d001      	beq.n	800fbf2 <netif_add+0xba>
    return NULL;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	e058      	b.n	800fca4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbf8:	2bff      	cmp	r3, #255	; 0xff
 800fbfa:	d103      	bne.n	800fc04 <netif_add+0xcc>
        netif->num = 0;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2200      	movs	r2, #0
 800fc00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc08:	4b2f      	ldr	r3, [pc, #188]	; (800fcc8 <netif_add+0x190>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	617b      	str	r3, [r7, #20]
 800fc0e:	e02b      	b.n	800fc68 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fc10:	697a      	ldr	r2, [r7, #20]
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d106      	bne.n	800fc26 <netif_add+0xee>
 800fc18:	4b24      	ldr	r3, [pc, #144]	; (800fcac <netif_add+0x174>)
 800fc1a:	f240 128b 	movw	r2, #395	; 0x18b
 800fc1e:	492b      	ldr	r1, [pc, #172]	; (800fccc <netif_add+0x194>)
 800fc20:	4824      	ldr	r0, [pc, #144]	; (800fcb4 <netif_add+0x17c>)
 800fc22:	f00a fba7 	bl	801a374 <iprintf>
        num_netifs++;
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	2bff      	cmp	r3, #255	; 0xff
 800fc30:	dd06      	ble.n	800fc40 <netif_add+0x108>
 800fc32:	4b1e      	ldr	r3, [pc, #120]	; (800fcac <netif_add+0x174>)
 800fc34:	f240 128d 	movw	r2, #397	; 0x18d
 800fc38:	4925      	ldr	r1, [pc, #148]	; (800fcd0 <netif_add+0x198>)
 800fc3a:	481e      	ldr	r0, [pc, #120]	; (800fcb4 <netif_add+0x17c>)
 800fc3c:	f00a fb9a 	bl	801a374 <iprintf>
        if (netif2->num == netif->num) {
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d108      	bne.n	800fc62 <netif_add+0x12a>
          netif->num++;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc56:	3301      	adds	r3, #1
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fc60:	e005      	b.n	800fc6e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	617b      	str	r3, [r7, #20]
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1d0      	bne.n	800fc10 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d1be      	bne.n	800fbf2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc7a:	2bfe      	cmp	r3, #254	; 0xfe
 800fc7c:	d103      	bne.n	800fc86 <netif_add+0x14e>
    netif_num = 0;
 800fc7e:	4b11      	ldr	r3, [pc, #68]	; (800fcc4 <netif_add+0x18c>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	701a      	strb	r2, [r3, #0]
 800fc84:	e006      	b.n	800fc94 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	b2da      	uxtb	r2, r3
 800fc90:	4b0c      	ldr	r3, [pc, #48]	; (800fcc4 <netif_add+0x18c>)
 800fc92:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fc94:	4b0c      	ldr	r3, [pc, #48]	; (800fcc8 <netif_add+0x190>)
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fc9c:	4a0a      	ldr	r2, [pc, #40]	; (800fcc8 <netif_add+0x190>)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fca2:	68fb      	ldr	r3, [r7, #12]
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	3718      	adds	r7, #24
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	0801c134 	.word	0x0801c134
 800fcb0:	0801c1c8 	.word	0x0801c1c8
 800fcb4:	0801c184 	.word	0x0801c184
 800fcb8:	0801c1e4 	.word	0x0801c1e4
 800fcbc:	0801e8d4 	.word	0x0801e8d4
 800fcc0:	080100e3 	.word	0x080100e3
 800fcc4:	2004f5cc 	.word	0x2004f5cc
 800fcc8:	2004f5c4 	.word	0x2004f5c4
 800fccc:	0801c208 	.word	0x0801c208
 800fcd0:	0801c21c 	.word	0x0801c21c

0800fcd4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f002 fe4f 	bl	8012984 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fce6:	6839      	ldr	r1, [r7, #0]
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f007 fcbf 	bl	801766c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fcee:	bf00      	nop
 800fcf0:	3708      	adds	r7, #8
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	bd80      	pop	{r7, pc}
	...

0800fcf8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b086      	sub	sp, #24
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d106      	bne.n	800fd18 <netif_do_set_ipaddr+0x20>
 800fd0a:	4b1d      	ldr	r3, [pc, #116]	; (800fd80 <netif_do_set_ipaddr+0x88>)
 800fd0c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fd10:	491c      	ldr	r1, [pc, #112]	; (800fd84 <netif_do_set_ipaddr+0x8c>)
 800fd12:	481d      	ldr	r0, [pc, #116]	; (800fd88 <netif_do_set_ipaddr+0x90>)
 800fd14:	f00a fb2e 	bl	801a374 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d106      	bne.n	800fd2c <netif_do_set_ipaddr+0x34>
 800fd1e:	4b18      	ldr	r3, [pc, #96]	; (800fd80 <netif_do_set_ipaddr+0x88>)
 800fd20:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fd24:	4917      	ldr	r1, [pc, #92]	; (800fd84 <netif_do_set_ipaddr+0x8c>)
 800fd26:	4818      	ldr	r0, [pc, #96]	; (800fd88 <netif_do_set_ipaddr+0x90>)
 800fd28:	f00a fb24 	bl	801a374 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	681a      	ldr	r2, [r3, #0]
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	3304      	adds	r3, #4
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d01c      	beq.n	800fd74 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	3304      	adds	r3, #4
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fd4a:	f107 0314 	add.w	r3, r7, #20
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f7ff ffbf 	bl	800fcd4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <netif_do_set_ipaddr+0x6a>
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	e000      	b.n	800fd64 <netif_do_set_ipaddr+0x6c>
 800fd62:	2300      	movs	r3, #0
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fd68:	2101      	movs	r1, #1
 800fd6a:	68f8      	ldr	r0, [r7, #12]
 800fd6c:	f000 f8d2 	bl	800ff14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fd70:	2301      	movs	r3, #1
 800fd72:	e000      	b.n	800fd76 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3718      	adds	r7, #24
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	0801c134 	.word	0x0801c134
 800fd84:	0801c24c 	.word	0x0801c24c
 800fd88:	0801c184 	.word	0x0801c184

0800fd8c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	60f8      	str	r0, [r7, #12]
 800fd94:	60b9      	str	r1, [r7, #8]
 800fd96:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	681a      	ldr	r2, [r3, #0]
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	3308      	adds	r3, #8
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d00a      	beq.n	800fdbc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d002      	beq.n	800fdb2 <netif_do_set_netmask+0x26>
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	e000      	b.n	800fdb4 <netif_do_set_netmask+0x28>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e000      	b.n	800fdbe <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3714      	adds	r7, #20
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fdca:	b480      	push	{r7}
 800fdcc:	b085      	sub	sp, #20
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	60f8      	str	r0, [r7, #12]
 800fdd2:	60b9      	str	r1, [r7, #8]
 800fdd4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	681a      	ldr	r2, [r3, #0]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	330c      	adds	r3, #12
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d00a      	beq.n	800fdfa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d002      	beq.n	800fdf0 <netif_do_set_gw+0x26>
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	e000      	b.n	800fdf2 <netif_do_set_gw+0x28>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e000      	b.n	800fdfc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fdfa:	2300      	movs	r3, #0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b088      	sub	sp, #32
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	60f8      	str	r0, [r7, #12]
 800fe10:	60b9      	str	r1, [r7, #8]
 800fe12:	607a      	str	r2, [r7, #4]
 800fe14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fe16:	2300      	movs	r3, #0
 800fe18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d101      	bne.n	800fe28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fe24:	4b1c      	ldr	r3, [pc, #112]	; (800fe98 <netif_set_addr+0x90>)
 800fe26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d101      	bne.n	800fe32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fe2e:	4b1a      	ldr	r3, [pc, #104]	; (800fe98 <netif_set_addr+0x90>)
 800fe30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d101      	bne.n	800fe3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fe38:	4b17      	ldr	r3, [pc, #92]	; (800fe98 <netif_set_addr+0x90>)
 800fe3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <netif_set_addr+0x42>
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d101      	bne.n	800fe4e <netif_set_addr+0x46>
 800fe4a:	2301      	movs	r3, #1
 800fe4c:	e000      	b.n	800fe50 <netif_set_addr+0x48>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe58:	f107 0310 	add.w	r3, r7, #16
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	68b9      	ldr	r1, [r7, #8]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f7ff ff49 	bl	800fcf8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fe66:	69fa      	ldr	r2, [r7, #28]
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	f7ff ff8e 	bl	800fd8c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fe70:	69ba      	ldr	r2, [r7, #24]
 800fe72:	6839      	ldr	r1, [r7, #0]
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f7ff ffa8 	bl	800fdca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d106      	bne.n	800fe8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fe80:	f107 0310 	add.w	r3, r7, #16
 800fe84:	461a      	mov	r2, r3
 800fe86:	68b9      	ldr	r1, [r7, #8]
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f7ff ff35 	bl	800fcf8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fe8e:	bf00      	nop
 800fe90:	3720      	adds	r7, #32
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	0801e8d4 	.word	0x0801e8d4

0800fe9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fea4:	4a04      	ldr	r2, [pc, #16]	; (800feb8 <netif_set_default+0x1c>)
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800feaa:	bf00      	nop
 800feac:	370c      	adds	r7, #12
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop
 800feb8:	2004f5c8 	.word	0x2004f5c8

0800febc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d107      	bne.n	800feda <netif_set_up+0x1e>
 800feca:	4b0f      	ldr	r3, [pc, #60]	; (800ff08 <netif_set_up+0x4c>)
 800fecc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fed0:	490e      	ldr	r1, [pc, #56]	; (800ff0c <netif_set_up+0x50>)
 800fed2:	480f      	ldr	r0, [pc, #60]	; (800ff10 <netif_set_up+0x54>)
 800fed4:	f00a fa4e 	bl	801a374 <iprintf>
 800fed8:	e013      	b.n	800ff02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fee0:	f003 0301 	and.w	r3, r3, #1
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10c      	bne.n	800ff02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feee:	f043 0301 	orr.w	r3, r3, #1
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fefa:	2103      	movs	r1, #3
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f809 	bl	800ff14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ff02:	3708      	adds	r7, #8
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	0801c134 	.word	0x0801c134
 800ff0c:	0801c2bc 	.word	0x0801c2bc
 800ff10:	0801c184 	.word	0x0801c184

0800ff14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
 800ff1c:	460b      	mov	r3, r1
 800ff1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d106      	bne.n	800ff34 <netif_issue_reports+0x20>
 800ff26:	4b18      	ldr	r3, [pc, #96]	; (800ff88 <netif_issue_reports+0x74>)
 800ff28:	f240 326d 	movw	r2, #877	; 0x36d
 800ff2c:	4917      	ldr	r1, [pc, #92]	; (800ff8c <netif_issue_reports+0x78>)
 800ff2e:	4818      	ldr	r0, [pc, #96]	; (800ff90 <netif_issue_reports+0x7c>)
 800ff30:	f00a fa20 	bl	801a374 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff3a:	f003 0304 	and.w	r3, r3, #4
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d01e      	beq.n	800ff80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d017      	beq.n	800ff80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff50:	78fb      	ldrb	r3, [r7, #3]
 800ff52:	f003 0301 	and.w	r3, r3, #1
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d013      	beq.n	800ff82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	3304      	adds	r3, #4
 800ff5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d00e      	beq.n	800ff82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff6a:	f003 0308 	and.w	r3, r3, #8
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d007      	beq.n	800ff82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	3304      	adds	r3, #4
 800ff76:	4619      	mov	r1, r3
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f008 fae1 	bl	8018540 <etharp_request>
 800ff7e:	e000      	b.n	800ff82 <netif_issue_reports+0x6e>
    return;
 800ff80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ff82:	3708      	adds	r7, #8
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	0801c134 	.word	0x0801c134
 800ff8c:	0801c2d8 	.word	0x0801c2d8
 800ff90:	0801c184 	.word	0x0801c184

0800ff94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b082      	sub	sp, #8
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d107      	bne.n	800ffb2 <netif_set_down+0x1e>
 800ffa2:	4b12      	ldr	r3, [pc, #72]	; (800ffec <netif_set_down+0x58>)
 800ffa4:	f240 329b 	movw	r2, #923	; 0x39b
 800ffa8:	4911      	ldr	r1, [pc, #68]	; (800fff0 <netif_set_down+0x5c>)
 800ffaa:	4812      	ldr	r0, [pc, #72]	; (800fff4 <netif_set_down+0x60>)
 800ffac:	f00a f9e2 	bl	801a374 <iprintf>
 800ffb0:	e019      	b.n	800ffe6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffb8:	f003 0301 	and.w	r3, r3, #1
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d012      	beq.n	800ffe6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffc6:	f023 0301 	bic.w	r3, r3, #1
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffd8:	f003 0308 	and.w	r3, r3, #8
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d002      	beq.n	800ffe6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f007 fe6b 	bl	8017cbc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	0801c134 	.word	0x0801c134
 800fff0:	0801c2fc 	.word	0x0801c2fc
 800fff4:	0801c184 	.word	0x0801c184

0800fff8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d107      	bne.n	8010016 <netif_set_link_up+0x1e>
 8010006:	4b13      	ldr	r3, [pc, #76]	; (8010054 <netif_set_link_up+0x5c>)
 8010008:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801000c:	4912      	ldr	r1, [pc, #72]	; (8010058 <netif_set_link_up+0x60>)
 801000e:	4813      	ldr	r0, [pc, #76]	; (801005c <netif_set_link_up+0x64>)
 8010010:	f00a f9b0 	bl	801a374 <iprintf>
 8010014:	e01b      	b.n	801004e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801001c:	f003 0304 	and.w	r3, r3, #4
 8010020:	2b00      	cmp	r3, #0
 8010022:	d114      	bne.n	801004e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801002a:	f043 0304 	orr.w	r3, r3, #4
 801002e:	b2da      	uxtb	r2, r3
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010036:	2103      	movs	r1, #3
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff ff6b 	bl	800ff14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	69db      	ldr	r3, [r3, #28]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <netif_set_link_up+0x56>
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	69db      	ldr	r3, [r3, #28]
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}
 8010054:	0801c134 	.word	0x0801c134
 8010058:	0801c31c 	.word	0x0801c31c
 801005c:	0801c184 	.word	0x0801c184

08010060 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d107      	bne.n	801007e <netif_set_link_down+0x1e>
 801006e:	4b11      	ldr	r3, [pc, #68]	; (80100b4 <netif_set_link_down+0x54>)
 8010070:	f240 4206 	movw	r2, #1030	; 0x406
 8010074:	4910      	ldr	r1, [pc, #64]	; (80100b8 <netif_set_link_down+0x58>)
 8010076:	4811      	ldr	r0, [pc, #68]	; (80100bc <netif_set_link_down+0x5c>)
 8010078:	f00a f97c 	bl	801a374 <iprintf>
 801007c:	e017      	b.n	80100ae <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010084:	f003 0304 	and.w	r3, r3, #4
 8010088:	2b00      	cmp	r3, #0
 801008a:	d010      	beq.n	80100ae <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010092:	f023 0304 	bic.w	r3, r3, #4
 8010096:	b2da      	uxtb	r2, r3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	69db      	ldr	r3, [r3, #28]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d003      	beq.n	80100ae <netif_set_link_down+0x4e>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	69db      	ldr	r3, [r3, #28]
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80100ae:	3708      	adds	r7, #8
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	0801c134 	.word	0x0801c134
 80100b8:	0801c340 	.word	0x0801c340
 80100bc:	0801c184 	.word	0x0801c184

080100c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	683a      	ldr	r2, [r7, #0]
 80100d4:	61da      	str	r2, [r3, #28]
  }
}
 80100d6:	bf00      	nop
 80100d8:	370c      	adds	r7, #12
 80100da:	46bd      	mov	sp, r7
 80100dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e0:	4770      	bx	lr

080100e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80100e2:	b480      	push	{r7}
 80100e4:	b085      	sub	sp, #20
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	60f8      	str	r0, [r7, #12]
 80100ea:	60b9      	str	r1, [r7, #8]
 80100ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80100ee:	f06f 030b 	mvn.w	r3, #11
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3714      	adds	r7, #20
 80100f6:	46bd      	mov	sp, r7
 80100f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fc:	4770      	bx	lr
	...

08010100 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010100:	b480      	push	{r7}
 8010102:	b085      	sub	sp, #20
 8010104:	af00      	add	r7, sp, #0
 8010106:	4603      	mov	r3, r0
 8010108:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d013      	beq.n	8010138 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010110:	4b0d      	ldr	r3, [pc, #52]	; (8010148 <netif_get_by_index+0x48>)
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	60fb      	str	r3, [r7, #12]
 8010116:	e00c      	b.n	8010132 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801011e:	3301      	adds	r3, #1
 8010120:	b2db      	uxtb	r3, r3
 8010122:	79fa      	ldrb	r2, [r7, #7]
 8010124:	429a      	cmp	r2, r3
 8010126:	d101      	bne.n	801012c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	e006      	b.n	801013a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	60fb      	str	r3, [r7, #12]
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d1ef      	bne.n	8010118 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3714      	adds	r7, #20
 801013e:	46bd      	mov	sp, r7
 8010140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010144:	4770      	bx	lr
 8010146:	bf00      	nop
 8010148:	2004f5c4 	.word	0x2004f5c4

0801014c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010152:	f009 ff19 	bl	8019f88 <sys_arch_protect>
 8010156:	6038      	str	r0, [r7, #0]
 8010158:	4b0d      	ldr	r3, [pc, #52]	; (8010190 <pbuf_free_ooseq+0x44>)
 801015a:	2200      	movs	r2, #0
 801015c:	701a      	strb	r2, [r3, #0]
 801015e:	6838      	ldr	r0, [r7, #0]
 8010160:	f009 ff20 	bl	8019fa4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010164:	4b0b      	ldr	r3, [pc, #44]	; (8010194 <pbuf_free_ooseq+0x48>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	607b      	str	r3, [r7, #4]
 801016a:	e00a      	b.n	8010182 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010170:	2b00      	cmp	r3, #0
 8010172:	d003      	beq.n	801017c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f002 fc43 	bl	8012a00 <tcp_free_ooseq>
      return;
 801017a:	e005      	b.n	8010188 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	607b      	str	r3, [r7, #4]
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d1f1      	bne.n	801016c <pbuf_free_ooseq+0x20>
    }
  }
}
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	2004f5cd 	.word	0x2004f5cd
 8010194:	2004f5dc 	.word	0x2004f5dc

08010198 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80101a0:	f7ff ffd4 	bl	801014c <pbuf_free_ooseq>
}
 80101a4:	bf00      	nop
 80101a6:	3708      	adds	r7, #8
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b082      	sub	sp, #8
 80101b0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80101b2:	f009 fee9 	bl	8019f88 <sys_arch_protect>
 80101b6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80101b8:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <pbuf_pool_is_empty+0x4c>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80101be:	4b0e      	ldr	r3, [pc, #56]	; (80101f8 <pbuf_pool_is_empty+0x4c>)
 80101c0:	2201      	movs	r2, #1
 80101c2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80101c4:	6878      	ldr	r0, [r7, #4]
 80101c6:	f009 feed 	bl	8019fa4 <sys_arch_unprotect>

  if (!queued) {
 80101ca:	78fb      	ldrb	r3, [r7, #3]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10f      	bne.n	80101f0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80101d0:	2100      	movs	r1, #0
 80101d2:	480a      	ldr	r0, [pc, #40]	; (80101fc <pbuf_pool_is_empty+0x50>)
 80101d4:	f7fe fe90 	bl	800eef8 <tcpip_try_callback>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d008      	beq.n	80101f0 <pbuf_pool_is_empty+0x44>
 80101de:	f009 fed3 	bl	8019f88 <sys_arch_protect>
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	4b04      	ldr	r3, [pc, #16]	; (80101f8 <pbuf_pool_is_empty+0x4c>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	701a      	strb	r2, [r3, #0]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f009 feda 	bl	8019fa4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80101f0:	bf00      	nop
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	2004f5cd 	.word	0x2004f5cd
 80101fc:	08010199 	.word	0x08010199

08010200 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	4611      	mov	r1, r2
 801020c:	461a      	mov	r2, r3
 801020e:	460b      	mov	r3, r1
 8010210:	80fb      	strh	r3, [r7, #6]
 8010212:	4613      	mov	r3, r2
 8010214:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	68ba      	ldr	r2, [r7, #8]
 8010220:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	88fa      	ldrh	r2, [r7, #6]
 8010226:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	88ba      	ldrh	r2, [r7, #4]
 801022c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801022e:	8b3b      	ldrh	r3, [r7, #24]
 8010230:	b2da      	uxtb	r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	7f3a      	ldrb	r2, [r7, #28]
 801023a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2201      	movs	r2, #1
 8010240:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	73da      	strb	r2, [r3, #15]
}
 8010248:	bf00      	nop
 801024a:	3714      	adds	r7, #20
 801024c:	46bd      	mov	sp, r7
 801024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010252:	4770      	bx	lr

08010254 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08c      	sub	sp, #48	; 0x30
 8010258:	af02      	add	r7, sp, #8
 801025a:	4603      	mov	r3, r0
 801025c:	71fb      	strb	r3, [r7, #7]
 801025e:	460b      	mov	r3, r1
 8010260:	80bb      	strh	r3, [r7, #4]
 8010262:	4613      	mov	r3, r2
 8010264:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010266:	79fb      	ldrb	r3, [r7, #7]
 8010268:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801026a:	887b      	ldrh	r3, [r7, #2]
 801026c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010270:	d07f      	beq.n	8010372 <pbuf_alloc+0x11e>
 8010272:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010276:	f300 80c8 	bgt.w	801040a <pbuf_alloc+0x1b6>
 801027a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801027e:	d010      	beq.n	80102a2 <pbuf_alloc+0x4e>
 8010280:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010284:	f300 80c1 	bgt.w	801040a <pbuf_alloc+0x1b6>
 8010288:	2b01      	cmp	r3, #1
 801028a:	d002      	beq.n	8010292 <pbuf_alloc+0x3e>
 801028c:	2b41      	cmp	r3, #65	; 0x41
 801028e:	f040 80bc 	bne.w	801040a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010292:	887a      	ldrh	r2, [r7, #2]
 8010294:	88bb      	ldrh	r3, [r7, #4]
 8010296:	4619      	mov	r1, r3
 8010298:	2000      	movs	r0, #0
 801029a:	f000 f8d1 	bl	8010440 <pbuf_alloc_reference>
 801029e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80102a0:	e0bd      	b.n	801041e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80102a2:	2300      	movs	r3, #0
 80102a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80102a6:	2300      	movs	r3, #0
 80102a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80102aa:	88bb      	ldrh	r3, [r7, #4]
 80102ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80102ae:	200c      	movs	r0, #12
 80102b0:	f7ff fb9a 	bl	800f9e8 <memp_malloc>
 80102b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d109      	bne.n	80102d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80102bc:	f7ff ff76 	bl	80101ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80102c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d002      	beq.n	80102cc <pbuf_alloc+0x78>
            pbuf_free(p);
 80102c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80102c8:	f000 faa8 	bl	801081c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80102cc:	2300      	movs	r3, #0
 80102ce:	e0a7      	b.n	8010420 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80102d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102d2:	3303      	adds	r3, #3
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	f023 0303 	bic.w	r3, r3, #3
 80102da:	b29b      	uxth	r3, r3
 80102dc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80102e0:	b29b      	uxth	r3, r3
 80102e2:	8b7a      	ldrh	r2, [r7, #26]
 80102e4:	4293      	cmp	r3, r2
 80102e6:	bf28      	it	cs
 80102e8:	4613      	movcs	r3, r2
 80102ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80102ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102ee:	3310      	adds	r3, #16
 80102f0:	693a      	ldr	r2, [r7, #16]
 80102f2:	4413      	add	r3, r2
 80102f4:	3303      	adds	r3, #3
 80102f6:	f023 0303 	bic.w	r3, r3, #3
 80102fa:	4618      	mov	r0, r3
 80102fc:	89f9      	ldrh	r1, [r7, #14]
 80102fe:	8b7a      	ldrh	r2, [r7, #26]
 8010300:	2300      	movs	r3, #0
 8010302:	9301      	str	r3, [sp, #4]
 8010304:	887b      	ldrh	r3, [r7, #2]
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	460b      	mov	r3, r1
 801030a:	4601      	mov	r1, r0
 801030c:	6938      	ldr	r0, [r7, #16]
 801030e:	f7ff ff77 	bl	8010200 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	685b      	ldr	r3, [r3, #4]
 8010316:	f003 0303 	and.w	r3, r3, #3
 801031a:	2b00      	cmp	r3, #0
 801031c:	d006      	beq.n	801032c <pbuf_alloc+0xd8>
 801031e:	4b42      	ldr	r3, [pc, #264]	; (8010428 <pbuf_alloc+0x1d4>)
 8010320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010324:	4941      	ldr	r1, [pc, #260]	; (801042c <pbuf_alloc+0x1d8>)
 8010326:	4842      	ldr	r0, [pc, #264]	; (8010430 <pbuf_alloc+0x1dc>)
 8010328:	f00a f824 	bl	801a374 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801032c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801032e:	3303      	adds	r3, #3
 8010330:	f023 0303 	bic.w	r3, r3, #3
 8010334:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010338:	d106      	bne.n	8010348 <pbuf_alloc+0xf4>
 801033a:	4b3b      	ldr	r3, [pc, #236]	; (8010428 <pbuf_alloc+0x1d4>)
 801033c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010340:	493c      	ldr	r1, [pc, #240]	; (8010434 <pbuf_alloc+0x1e0>)
 8010342:	483b      	ldr	r0, [pc, #236]	; (8010430 <pbuf_alloc+0x1dc>)
 8010344:	f00a f816 	bl	801a374 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801034a:	2b00      	cmp	r3, #0
 801034c:	d102      	bne.n	8010354 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	627b      	str	r3, [r7, #36]	; 0x24
 8010352:	e002      	b.n	801035a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	693a      	ldr	r2, [r7, #16]
 8010358:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801035e:	8b7a      	ldrh	r2, [r7, #26]
 8010360:	89fb      	ldrh	r3, [r7, #14]
 8010362:	1ad3      	subs	r3, r2, r3
 8010364:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010366:	2300      	movs	r3, #0
 8010368:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801036a:	8b7b      	ldrh	r3, [r7, #26]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d19e      	bne.n	80102ae <pbuf_alloc+0x5a>
      break;
 8010370:	e055      	b.n	801041e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010372:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010374:	3303      	adds	r3, #3
 8010376:	b29b      	uxth	r3, r3
 8010378:	f023 0303 	bic.w	r3, r3, #3
 801037c:	b29a      	uxth	r2, r3
 801037e:	88bb      	ldrh	r3, [r7, #4]
 8010380:	3303      	adds	r3, #3
 8010382:	b29b      	uxth	r3, r3
 8010384:	f023 0303 	bic.w	r3, r3, #3
 8010388:	b29b      	uxth	r3, r3
 801038a:	4413      	add	r3, r2
 801038c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801038e:	8b3b      	ldrh	r3, [r7, #24]
 8010390:	3310      	adds	r3, #16
 8010392:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010394:	8b3a      	ldrh	r2, [r7, #24]
 8010396:	88bb      	ldrh	r3, [r7, #4]
 8010398:	3303      	adds	r3, #3
 801039a:	f023 0303 	bic.w	r3, r3, #3
 801039e:	429a      	cmp	r2, r3
 80103a0:	d306      	bcc.n	80103b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80103a2:	8afa      	ldrh	r2, [r7, #22]
 80103a4:	88bb      	ldrh	r3, [r7, #4]
 80103a6:	3303      	adds	r3, #3
 80103a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d201      	bcs.n	80103b4 <pbuf_alloc+0x160>
        return NULL;
 80103b0:	2300      	movs	r3, #0
 80103b2:	e035      	b.n	8010420 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80103b4:	8afb      	ldrh	r3, [r7, #22]
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff f972 	bl	800f6a0 <mem_malloc>
 80103bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80103be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d101      	bne.n	80103c8 <pbuf_alloc+0x174>
        return NULL;
 80103c4:	2300      	movs	r3, #0
 80103c6:	e02b      	b.n	8010420 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80103c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80103ca:	3310      	adds	r3, #16
 80103cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103ce:	4413      	add	r3, r2
 80103d0:	3303      	adds	r3, #3
 80103d2:	f023 0303 	bic.w	r3, r3, #3
 80103d6:	4618      	mov	r0, r3
 80103d8:	88b9      	ldrh	r1, [r7, #4]
 80103da:	88ba      	ldrh	r2, [r7, #4]
 80103dc:	2300      	movs	r3, #0
 80103de:	9301      	str	r3, [sp, #4]
 80103e0:	887b      	ldrh	r3, [r7, #2]
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	460b      	mov	r3, r1
 80103e6:	4601      	mov	r1, r0
 80103e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103ea:	f7ff ff09 	bl	8010200 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80103ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	f003 0303 	and.w	r3, r3, #3
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d010      	beq.n	801041c <pbuf_alloc+0x1c8>
 80103fa:	4b0b      	ldr	r3, [pc, #44]	; (8010428 <pbuf_alloc+0x1d4>)
 80103fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010400:	490d      	ldr	r1, [pc, #52]	; (8010438 <pbuf_alloc+0x1e4>)
 8010402:	480b      	ldr	r0, [pc, #44]	; (8010430 <pbuf_alloc+0x1dc>)
 8010404:	f009 ffb6 	bl	801a374 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010408:	e008      	b.n	801041c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801040a:	4b07      	ldr	r3, [pc, #28]	; (8010428 <pbuf_alloc+0x1d4>)
 801040c:	f240 1227 	movw	r2, #295	; 0x127
 8010410:	490a      	ldr	r1, [pc, #40]	; (801043c <pbuf_alloc+0x1e8>)
 8010412:	4807      	ldr	r0, [pc, #28]	; (8010430 <pbuf_alloc+0x1dc>)
 8010414:	f009 ffae 	bl	801a374 <iprintf>
      return NULL;
 8010418:	2300      	movs	r3, #0
 801041a:	e001      	b.n	8010420 <pbuf_alloc+0x1cc>
      break;
 801041c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010420:	4618      	mov	r0, r3
 8010422:	3728      	adds	r7, #40	; 0x28
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}
 8010428:	0801c364 	.word	0x0801c364
 801042c:	0801c394 	.word	0x0801c394
 8010430:	0801c3c4 	.word	0x0801c3c4
 8010434:	0801c3ec 	.word	0x0801c3ec
 8010438:	0801c420 	.word	0x0801c420
 801043c:	0801c44c 	.word	0x0801c44c

08010440 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af02      	add	r7, sp, #8
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	460b      	mov	r3, r1
 801044a:	807b      	strh	r3, [r7, #2]
 801044c:	4613      	mov	r3, r2
 801044e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010450:	883b      	ldrh	r3, [r7, #0]
 8010452:	2b41      	cmp	r3, #65	; 0x41
 8010454:	d009      	beq.n	801046a <pbuf_alloc_reference+0x2a>
 8010456:	883b      	ldrh	r3, [r7, #0]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d006      	beq.n	801046a <pbuf_alloc_reference+0x2a>
 801045c:	4b0f      	ldr	r3, [pc, #60]	; (801049c <pbuf_alloc_reference+0x5c>)
 801045e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010462:	490f      	ldr	r1, [pc, #60]	; (80104a0 <pbuf_alloc_reference+0x60>)
 8010464:	480f      	ldr	r0, [pc, #60]	; (80104a4 <pbuf_alloc_reference+0x64>)
 8010466:	f009 ff85 	bl	801a374 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801046a:	200b      	movs	r0, #11
 801046c:	f7ff fabc 	bl	800f9e8 <memp_malloc>
 8010470:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d101      	bne.n	801047c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010478:	2300      	movs	r3, #0
 801047a:	e00b      	b.n	8010494 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801047c:	8879      	ldrh	r1, [r7, #2]
 801047e:	887a      	ldrh	r2, [r7, #2]
 8010480:	2300      	movs	r3, #0
 8010482:	9301      	str	r3, [sp, #4]
 8010484:	883b      	ldrh	r3, [r7, #0]
 8010486:	9300      	str	r3, [sp, #0]
 8010488:	460b      	mov	r3, r1
 801048a:	6879      	ldr	r1, [r7, #4]
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	f7ff feb7 	bl	8010200 <pbuf_init_alloced_pbuf>
  return p;
 8010492:	68fb      	ldr	r3, [r7, #12]
}
 8010494:	4618      	mov	r0, r3
 8010496:	3710      	adds	r7, #16
 8010498:	46bd      	mov	sp, r7
 801049a:	bd80      	pop	{r7, pc}
 801049c:	0801c364 	.word	0x0801c364
 80104a0:	0801c468 	.word	0x0801c468
 80104a4:	0801c3c4 	.word	0x0801c3c4

080104a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b088      	sub	sp, #32
 80104ac:	af02      	add	r7, sp, #8
 80104ae:	607b      	str	r3, [r7, #4]
 80104b0:	4603      	mov	r3, r0
 80104b2:	73fb      	strb	r3, [r7, #15]
 80104b4:	460b      	mov	r3, r1
 80104b6:	81bb      	strh	r3, [r7, #12]
 80104b8:	4613      	mov	r3, r2
 80104ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80104bc:	7bfb      	ldrb	r3, [r7, #15]
 80104be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80104c0:	8a7b      	ldrh	r3, [r7, #18]
 80104c2:	3303      	adds	r3, #3
 80104c4:	f023 0203 	bic.w	r2, r3, #3
 80104c8:	89bb      	ldrh	r3, [r7, #12]
 80104ca:	441a      	add	r2, r3
 80104cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d901      	bls.n	80104d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	e018      	b.n	8010508 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80104d6:	6a3b      	ldr	r3, [r7, #32]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d007      	beq.n	80104ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80104dc:	8a7b      	ldrh	r3, [r7, #18]
 80104de:	3303      	adds	r3, #3
 80104e0:	f023 0303 	bic.w	r3, r3, #3
 80104e4:	6a3a      	ldr	r2, [r7, #32]
 80104e6:	4413      	add	r3, r2
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	e001      	b.n	80104f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80104ec:	2300      	movs	r3, #0
 80104ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80104f0:	6878      	ldr	r0, [r7, #4]
 80104f2:	89b9      	ldrh	r1, [r7, #12]
 80104f4:	89ba      	ldrh	r2, [r7, #12]
 80104f6:	2302      	movs	r3, #2
 80104f8:	9301      	str	r3, [sp, #4]
 80104fa:	897b      	ldrh	r3, [r7, #10]
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	460b      	mov	r3, r1
 8010500:	6979      	ldr	r1, [r7, #20]
 8010502:	f7ff fe7d 	bl	8010200 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010506:	687b      	ldr	r3, [r7, #4]
}
 8010508:	4618      	mov	r0, r3
 801050a:	3718      	adds	r7, #24
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	460b      	mov	r3, r1
 801051a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d106      	bne.n	8010530 <pbuf_realloc+0x20>
 8010522:	4b3a      	ldr	r3, [pc, #232]	; (801060c <pbuf_realloc+0xfc>)
 8010524:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010528:	4939      	ldr	r1, [pc, #228]	; (8010610 <pbuf_realloc+0x100>)
 801052a:	483a      	ldr	r0, [pc, #232]	; (8010614 <pbuf_realloc+0x104>)
 801052c:	f009 ff22 	bl	801a374 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	891b      	ldrh	r3, [r3, #8]
 8010534:	887a      	ldrh	r2, [r7, #2]
 8010536:	429a      	cmp	r2, r3
 8010538:	d263      	bcs.n	8010602 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	891a      	ldrh	r2, [r3, #8]
 801053e:	887b      	ldrh	r3, [r7, #2]
 8010540:	1ad3      	subs	r3, r2, r3
 8010542:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010544:	887b      	ldrh	r3, [r7, #2]
 8010546:	817b      	strh	r3, [r7, #10]
  q = p;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801054c:	e018      	b.n	8010580 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	895b      	ldrh	r3, [r3, #10]
 8010552:	897a      	ldrh	r2, [r7, #10]
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	891a      	ldrh	r2, [r3, #8]
 801055c:	893b      	ldrh	r3, [r7, #8]
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	b29a      	uxth	r2, r3
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d106      	bne.n	8010580 <pbuf_realloc+0x70>
 8010572:	4b26      	ldr	r3, [pc, #152]	; (801060c <pbuf_realloc+0xfc>)
 8010574:	f240 12af 	movw	r2, #431	; 0x1af
 8010578:	4927      	ldr	r1, [pc, #156]	; (8010618 <pbuf_realloc+0x108>)
 801057a:	4826      	ldr	r0, [pc, #152]	; (8010614 <pbuf_realloc+0x104>)
 801057c:	f009 fefa 	bl	801a374 <iprintf>
  while (rem_len > q->len) {
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	895b      	ldrh	r3, [r3, #10]
 8010584:	897a      	ldrh	r2, [r7, #10]
 8010586:	429a      	cmp	r2, r3
 8010588:	d8e1      	bhi.n	801054e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	7b1b      	ldrb	r3, [r3, #12]
 801058e:	f003 030f 	and.w	r3, r3, #15
 8010592:	2b00      	cmp	r3, #0
 8010594:	d121      	bne.n	80105da <pbuf_realloc+0xca>
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	895b      	ldrh	r3, [r3, #10]
 801059a:	897a      	ldrh	r2, [r7, #10]
 801059c:	429a      	cmp	r2, r3
 801059e:	d01c      	beq.n	80105da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	7b5b      	ldrb	r3, [r3, #13]
 80105a4:	f003 0302 	and.w	r3, r3, #2
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d116      	bne.n	80105da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	685a      	ldr	r2, [r3, #4]
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	1ad3      	subs	r3, r2, r3
 80105b4:	b29a      	uxth	r2, r3
 80105b6:	897b      	ldrh	r3, [r7, #10]
 80105b8:	4413      	add	r3, r2
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	4619      	mov	r1, r3
 80105be:	68f8      	ldr	r0, [r7, #12]
 80105c0:	f7fe ff64 	bl	800f48c <mem_trim>
 80105c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d106      	bne.n	80105da <pbuf_realloc+0xca>
 80105cc:	4b0f      	ldr	r3, [pc, #60]	; (801060c <pbuf_realloc+0xfc>)
 80105ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 80105d2:	4912      	ldr	r1, [pc, #72]	; (801061c <pbuf_realloc+0x10c>)
 80105d4:	480f      	ldr	r0, [pc, #60]	; (8010614 <pbuf_realloc+0x104>)
 80105d6:	f009 fecd 	bl	801a374 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	897a      	ldrh	r2, [r7, #10]
 80105de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	895a      	ldrh	r2, [r3, #10]
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d004      	beq.n	80105fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 f911 	bl	801081c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	601a      	str	r2, [r3, #0]
 8010600:	e000      	b.n	8010604 <pbuf_realloc+0xf4>
    return;
 8010602:	bf00      	nop

}
 8010604:	3710      	adds	r7, #16
 8010606:	46bd      	mov	sp, r7
 8010608:	bd80      	pop	{r7, pc}
 801060a:	bf00      	nop
 801060c:	0801c364 	.word	0x0801c364
 8010610:	0801c47c 	.word	0x0801c47c
 8010614:	0801c3c4 	.word	0x0801c3c4
 8010618:	0801c494 	.word	0x0801c494
 801061c:	0801c4ac 	.word	0x0801c4ac

08010620 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b086      	sub	sp, #24
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	4613      	mov	r3, r2
 801062c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d106      	bne.n	8010642 <pbuf_add_header_impl+0x22>
 8010634:	4b2b      	ldr	r3, [pc, #172]	; (80106e4 <pbuf_add_header_impl+0xc4>)
 8010636:	f240 12df 	movw	r2, #479	; 0x1df
 801063a:	492b      	ldr	r1, [pc, #172]	; (80106e8 <pbuf_add_header_impl+0xc8>)
 801063c:	482b      	ldr	r0, [pc, #172]	; (80106ec <pbuf_add_header_impl+0xcc>)
 801063e:	f009 fe99 	bl	801a374 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d003      	beq.n	8010650 <pbuf_add_header_impl+0x30>
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801064e:	d301      	bcc.n	8010654 <pbuf_add_header_impl+0x34>
    return 1;
 8010650:	2301      	movs	r3, #1
 8010652:	e043      	b.n	80106dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d101      	bne.n	801065e <pbuf_add_header_impl+0x3e>
    return 0;
 801065a:	2300      	movs	r3, #0
 801065c:	e03e      	b.n	80106dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	891a      	ldrh	r2, [r3, #8]
 8010666:	8a7b      	ldrh	r3, [r7, #18]
 8010668:	4413      	add	r3, r2
 801066a:	b29b      	uxth	r3, r3
 801066c:	8a7a      	ldrh	r2, [r7, #18]
 801066e:	429a      	cmp	r2, r3
 8010670:	d901      	bls.n	8010676 <pbuf_add_header_impl+0x56>
    return 1;
 8010672:	2301      	movs	r3, #1
 8010674:	e032      	b.n	80106dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	7b1b      	ldrb	r3, [r3, #12]
 801067a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801067c:	8a3b      	ldrh	r3, [r7, #16]
 801067e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00c      	beq.n	80106a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	685a      	ldr	r2, [r3, #4]
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	425b      	negs	r3, r3
 801068e:	4413      	add	r3, r2
 8010690:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	3310      	adds	r3, #16
 8010696:	697a      	ldr	r2, [r7, #20]
 8010698:	429a      	cmp	r2, r3
 801069a:	d20d      	bcs.n	80106b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801069c:	2301      	movs	r3, #1
 801069e:	e01d      	b.n	80106dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80106a0:	79fb      	ldrb	r3, [r7, #7]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d006      	beq.n	80106b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	685a      	ldr	r2, [r3, #4]
 80106aa:	68bb      	ldr	r3, [r7, #8]
 80106ac:	425b      	negs	r3, r3
 80106ae:	4413      	add	r3, r2
 80106b0:	617b      	str	r3, [r7, #20]
 80106b2:	e001      	b.n	80106b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80106b4:	2301      	movs	r3, #1
 80106b6:	e011      	b.n	80106dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	697a      	ldr	r2, [r7, #20]
 80106bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	895a      	ldrh	r2, [r3, #10]
 80106c2:	8a7b      	ldrh	r3, [r7, #18]
 80106c4:	4413      	add	r3, r2
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	891a      	ldrh	r2, [r3, #8]
 80106d0:	8a7b      	ldrh	r3, [r7, #18]
 80106d2:	4413      	add	r3, r2
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	811a      	strh	r2, [r3, #8]


  return 0;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3718      	adds	r7, #24
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	0801c364 	.word	0x0801c364
 80106e8:	0801c4c8 	.word	0x0801c4c8
 80106ec:	0801c3c4 	.word	0x0801c3c4

080106f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80106fa:	2200      	movs	r2, #0
 80106fc:	6839      	ldr	r1, [r7, #0]
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7ff ff8e 	bl	8010620 <pbuf_add_header_impl>
 8010704:	4603      	mov	r3, r0
}
 8010706:	4618      	mov	r0, r3
 8010708:	3708      	adds	r7, #8
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
	...

08010710 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d106      	bne.n	801072e <pbuf_remove_header+0x1e>
 8010720:	4b20      	ldr	r3, [pc, #128]	; (80107a4 <pbuf_remove_header+0x94>)
 8010722:	f240 224b 	movw	r2, #587	; 0x24b
 8010726:	4920      	ldr	r1, [pc, #128]	; (80107a8 <pbuf_remove_header+0x98>)
 8010728:	4820      	ldr	r0, [pc, #128]	; (80107ac <pbuf_remove_header+0x9c>)
 801072a:	f009 fe23 	bl	801a374 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <pbuf_remove_header+0x2c>
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801073a:	d301      	bcc.n	8010740 <pbuf_remove_header+0x30>
    return 1;
 801073c:	2301      	movs	r3, #1
 801073e:	e02c      	b.n	801079a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <pbuf_remove_header+0x3a>
    return 0;
 8010746:	2300      	movs	r3, #0
 8010748:	e027      	b.n	801079a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	895b      	ldrh	r3, [r3, #10]
 8010752:	89fa      	ldrh	r2, [r7, #14]
 8010754:	429a      	cmp	r2, r3
 8010756:	d908      	bls.n	801076a <pbuf_remove_header+0x5a>
 8010758:	4b12      	ldr	r3, [pc, #72]	; (80107a4 <pbuf_remove_header+0x94>)
 801075a:	f240 2255 	movw	r2, #597	; 0x255
 801075e:	4914      	ldr	r1, [pc, #80]	; (80107b0 <pbuf_remove_header+0xa0>)
 8010760:	4812      	ldr	r0, [pc, #72]	; (80107ac <pbuf_remove_header+0x9c>)
 8010762:	f009 fe07 	bl	801a374 <iprintf>
 8010766:	2301      	movs	r3, #1
 8010768:	e017      	b.n	801079a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	685a      	ldr	r2, [r3, #4]
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	441a      	add	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	895a      	ldrh	r2, [r3, #10]
 8010780:	89fb      	ldrh	r3, [r7, #14]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	b29a      	uxth	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	891a      	ldrh	r2, [r3, #8]
 801078e:	89fb      	ldrh	r3, [r7, #14]
 8010790:	1ad3      	subs	r3, r2, r3
 8010792:	b29a      	uxth	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3710      	adds	r7, #16
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	0801c364 	.word	0x0801c364
 80107a8:	0801c4c8 	.word	0x0801c4c8
 80107ac:	0801c3c4 	.word	0x0801c3c4
 80107b0:	0801c4d4 	.word	0x0801c4d4

080107b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
 80107bc:	460b      	mov	r3, r1
 80107be:	807b      	strh	r3, [r7, #2]
 80107c0:	4613      	mov	r3, r2
 80107c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80107c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	da08      	bge.n	80107de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80107cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107d0:	425b      	negs	r3, r3
 80107d2:	4619      	mov	r1, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f7ff ff9b 	bl	8010710 <pbuf_remove_header>
 80107da:	4603      	mov	r3, r0
 80107dc:	e007      	b.n	80107ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80107de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107e2:	787a      	ldrb	r2, [r7, #1]
 80107e4:	4619      	mov	r1, r3
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f7ff ff1a 	bl	8010620 <pbuf_add_header_impl>
 80107ec:	4603      	mov	r3, r0
  }
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3708      	adds	r7, #8
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b082      	sub	sp, #8
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010802:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010806:	2201      	movs	r2, #1
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f7ff ffd2 	bl	80107b4 <pbuf_header_impl>
 8010810:	4603      	mov	r3, r0
}
 8010812:	4618      	mov	r0, r3
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
	...

0801081c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b088      	sub	sp, #32
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d10b      	bne.n	8010842 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d106      	bne.n	801083e <pbuf_free+0x22>
 8010830:	4b3b      	ldr	r3, [pc, #236]	; (8010920 <pbuf_free+0x104>)
 8010832:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010836:	493b      	ldr	r1, [pc, #236]	; (8010924 <pbuf_free+0x108>)
 8010838:	483b      	ldr	r0, [pc, #236]	; (8010928 <pbuf_free+0x10c>)
 801083a:	f009 fd9b 	bl	801a374 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801083e:	2300      	movs	r3, #0
 8010840:	e069      	b.n	8010916 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010842:	2300      	movs	r3, #0
 8010844:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010846:	e062      	b.n	801090e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010848:	f009 fb9e 	bl	8019f88 <sys_arch_protect>
 801084c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	7b9b      	ldrb	r3, [r3, #14]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d106      	bne.n	8010864 <pbuf_free+0x48>
 8010856:	4b32      	ldr	r3, [pc, #200]	; (8010920 <pbuf_free+0x104>)
 8010858:	f240 22f1 	movw	r2, #753	; 0x2f1
 801085c:	4933      	ldr	r1, [pc, #204]	; (801092c <pbuf_free+0x110>)
 801085e:	4832      	ldr	r0, [pc, #200]	; (8010928 <pbuf_free+0x10c>)
 8010860:	f009 fd88 	bl	801a374 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7b9b      	ldrb	r3, [r3, #14]
 8010868:	3b01      	subs	r3, #1
 801086a:	b2da      	uxtb	r2, r3
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	739a      	strb	r2, [r3, #14]
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	7b9b      	ldrb	r3, [r3, #14]
 8010874:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010876:	69b8      	ldr	r0, [r7, #24]
 8010878:	f009 fb94 	bl	8019fa4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801087c:	7dfb      	ldrb	r3, [r7, #23]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d143      	bne.n	801090a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	7b1b      	ldrb	r3, [r3, #12]
 801088c:	f003 030f 	and.w	r3, r3, #15
 8010890:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	7b5b      	ldrb	r3, [r3, #13]
 8010896:	f003 0302 	and.w	r3, r3, #2
 801089a:	2b00      	cmp	r3, #0
 801089c:	d011      	beq.n	80108c2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d106      	bne.n	80108b8 <pbuf_free+0x9c>
 80108aa:	4b1d      	ldr	r3, [pc, #116]	; (8010920 <pbuf_free+0x104>)
 80108ac:	f240 22ff 	movw	r2, #767	; 0x2ff
 80108b0:	491f      	ldr	r1, [pc, #124]	; (8010930 <pbuf_free+0x114>)
 80108b2:	481d      	ldr	r0, [pc, #116]	; (8010928 <pbuf_free+0x10c>)
 80108b4:	f009 fd5e 	bl	801a374 <iprintf>
        pc->custom_free_function(p);
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	691b      	ldr	r3, [r3, #16]
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	4798      	blx	r3
 80108c0:	e01d      	b.n	80108fe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80108c2:	7bfb      	ldrb	r3, [r7, #15]
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d104      	bne.n	80108d2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80108c8:	6879      	ldr	r1, [r7, #4]
 80108ca:	200c      	movs	r0, #12
 80108cc:	f7ff f902 	bl	800fad4 <memp_free>
 80108d0:	e015      	b.n	80108fe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80108d2:	7bfb      	ldrb	r3, [r7, #15]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d104      	bne.n	80108e2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80108d8:	6879      	ldr	r1, [r7, #4]
 80108da:	200b      	movs	r0, #11
 80108dc:	f7ff f8fa 	bl	800fad4 <memp_free>
 80108e0:	e00d      	b.n	80108fe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80108e2:	7bfb      	ldrb	r3, [r7, #15]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d103      	bne.n	80108f0 <pbuf_free+0xd4>
          mem_free(p);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7fe fd3f 	bl	800f36c <mem_free>
 80108ee:	e006      	b.n	80108fe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80108f0:	4b0b      	ldr	r3, [pc, #44]	; (8010920 <pbuf_free+0x104>)
 80108f2:	f240 320f 	movw	r2, #783	; 0x30f
 80108f6:	490f      	ldr	r1, [pc, #60]	; (8010934 <pbuf_free+0x118>)
 80108f8:	480b      	ldr	r0, [pc, #44]	; (8010928 <pbuf_free+0x10c>)
 80108fa:	f009 fd3b 	bl	801a374 <iprintf>
        }
      }
      count++;
 80108fe:	7ffb      	ldrb	r3, [r7, #31]
 8010900:	3301      	adds	r3, #1
 8010902:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	607b      	str	r3, [r7, #4]
 8010908:	e001      	b.n	801090e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801090a:	2300      	movs	r3, #0
 801090c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d199      	bne.n	8010848 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010914:	7ffb      	ldrb	r3, [r7, #31]
}
 8010916:	4618      	mov	r0, r3
 8010918:	3720      	adds	r7, #32
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	0801c364 	.word	0x0801c364
 8010924:	0801c4c8 	.word	0x0801c4c8
 8010928:	0801c3c4 	.word	0x0801c3c4
 801092c:	0801c4f4 	.word	0x0801c4f4
 8010930:	0801c50c 	.word	0x0801c50c
 8010934:	0801c530 	.word	0x0801c530

08010938 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010938:	b480      	push	{r7}
 801093a:	b085      	sub	sp, #20
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010940:	2300      	movs	r3, #0
 8010942:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010944:	e005      	b.n	8010952 <pbuf_clen+0x1a>
    ++len;
 8010946:	89fb      	ldrh	r3, [r7, #14]
 8010948:	3301      	adds	r3, #1
 801094a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1f6      	bne.n	8010946 <pbuf_clen+0xe>
  }
  return len;
 8010958:	89fb      	ldrh	r3, [r7, #14]
}
 801095a:	4618      	mov	r0, r3
 801095c:	3714      	adds	r7, #20
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
	...

08010968 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b084      	sub	sp, #16
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d016      	beq.n	80109a4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010976:	f009 fb07 	bl	8019f88 <sys_arch_protect>
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	7b9b      	ldrb	r3, [r3, #14]
 8010980:	3301      	adds	r3, #1
 8010982:	b2da      	uxtb	r2, r3
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	739a      	strb	r2, [r3, #14]
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f009 fb0b 	bl	8019fa4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	7b9b      	ldrb	r3, [r3, #14]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d106      	bne.n	80109a4 <pbuf_ref+0x3c>
 8010996:	4b05      	ldr	r3, [pc, #20]	; (80109ac <pbuf_ref+0x44>)
 8010998:	f240 3242 	movw	r2, #834	; 0x342
 801099c:	4904      	ldr	r1, [pc, #16]	; (80109b0 <pbuf_ref+0x48>)
 801099e:	4805      	ldr	r0, [pc, #20]	; (80109b4 <pbuf_ref+0x4c>)
 80109a0:	f009 fce8 	bl	801a374 <iprintf>
  }
}
 80109a4:	bf00      	nop
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	0801c364 	.word	0x0801c364
 80109b0:	0801c544 	.word	0x0801c544
 80109b4:	0801c3c4 	.word	0x0801c3c4

080109b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <pbuf_cat+0x16>
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d107      	bne.n	80109de <pbuf_cat+0x26>
 80109ce:	4b20      	ldr	r3, [pc, #128]	; (8010a50 <pbuf_cat+0x98>)
 80109d0:	f240 3259 	movw	r2, #857	; 0x359
 80109d4:	491f      	ldr	r1, [pc, #124]	; (8010a54 <pbuf_cat+0x9c>)
 80109d6:	4820      	ldr	r0, [pc, #128]	; (8010a58 <pbuf_cat+0xa0>)
 80109d8:	f009 fccc 	bl	801a374 <iprintf>
 80109dc:	e034      	b.n	8010a48 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	60fb      	str	r3, [r7, #12]
 80109e2:	e00a      	b.n	80109fa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	891a      	ldrh	r2, [r3, #8]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	891b      	ldrh	r3, [r3, #8]
 80109ec:	4413      	add	r3, r2
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	60fb      	str	r3, [r7, #12]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1f0      	bne.n	80109e4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	891a      	ldrh	r2, [r3, #8]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	895b      	ldrh	r3, [r3, #10]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d006      	beq.n	8010a1c <pbuf_cat+0x64>
 8010a0e:	4b10      	ldr	r3, [pc, #64]	; (8010a50 <pbuf_cat+0x98>)
 8010a10:	f240 3262 	movw	r2, #866	; 0x362
 8010a14:	4911      	ldr	r1, [pc, #68]	; (8010a5c <pbuf_cat+0xa4>)
 8010a16:	4810      	ldr	r0, [pc, #64]	; (8010a58 <pbuf_cat+0xa0>)
 8010a18:	f009 fcac 	bl	801a374 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d006      	beq.n	8010a32 <pbuf_cat+0x7a>
 8010a24:	4b0a      	ldr	r3, [pc, #40]	; (8010a50 <pbuf_cat+0x98>)
 8010a26:	f240 3263 	movw	r2, #867	; 0x363
 8010a2a:	490d      	ldr	r1, [pc, #52]	; (8010a60 <pbuf_cat+0xa8>)
 8010a2c:	480a      	ldr	r0, [pc, #40]	; (8010a58 <pbuf_cat+0xa0>)
 8010a2e:	f009 fca1 	bl	801a374 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	891a      	ldrh	r2, [r3, #8]
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	891b      	ldrh	r3, [r3, #8]
 8010a3a:	4413      	add	r3, r2
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	0801c364 	.word	0x0801c364
 8010a54:	0801c558 	.word	0x0801c558
 8010a58:	0801c3c4 	.word	0x0801c3c4
 8010a5c:	0801c590 	.word	0x0801c590
 8010a60:	0801c5c0 	.word	0x0801c5c0

08010a64 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b086      	sub	sp, #24
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	617b      	str	r3, [r7, #20]
 8010a72:	2300      	movs	r3, #0
 8010a74:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d008      	beq.n	8010a8e <pbuf_copy+0x2a>
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d005      	beq.n	8010a8e <pbuf_copy+0x2a>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	891a      	ldrh	r2, [r3, #8]
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	891b      	ldrh	r3, [r3, #8]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d209      	bcs.n	8010aa2 <pbuf_copy+0x3e>
 8010a8e:	4b57      	ldr	r3, [pc, #348]	; (8010bec <pbuf_copy+0x188>)
 8010a90:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010a94:	4956      	ldr	r1, [pc, #344]	; (8010bf0 <pbuf_copy+0x18c>)
 8010a96:	4857      	ldr	r0, [pc, #348]	; (8010bf4 <pbuf_copy+0x190>)
 8010a98:	f009 fc6c 	bl	801a374 <iprintf>
 8010a9c:	f06f 030f 	mvn.w	r3, #15
 8010aa0:	e09f      	b.n	8010be2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	895b      	ldrh	r3, [r3, #10]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	1ad2      	subs	r2, r2, r3
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	895b      	ldrh	r3, [r3, #10]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	1acb      	subs	r3, r1, r3
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d306      	bcc.n	8010ac8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	895b      	ldrh	r3, [r3, #10]
 8010abe:	461a      	mov	r2, r3
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	1ad3      	subs	r3, r2, r3
 8010ac4:	60fb      	str	r3, [r7, #12]
 8010ac6:	e005      	b.n	8010ad4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	895b      	ldrh	r3, [r3, #10]
 8010acc:	461a      	mov	r2, r3
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685a      	ldr	r2, [r3, #4]
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	18d0      	adds	r0, r2, r3
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	4413      	add	r3, r2
 8010ae4:	68fa      	ldr	r2, [r7, #12]
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	f009 fb99 	bl	801a21e <memcpy>
    offset_to += len;
 8010aec:	697a      	ldr	r2, [r7, #20]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	4413      	add	r3, r2
 8010af2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	4413      	add	r3, r2
 8010afa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	895b      	ldrh	r3, [r3, #10]
 8010b00:	461a      	mov	r2, r3
 8010b02:	697b      	ldr	r3, [r7, #20]
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d906      	bls.n	8010b16 <pbuf_copy+0xb2>
 8010b08:	4b38      	ldr	r3, [pc, #224]	; (8010bec <pbuf_copy+0x188>)
 8010b0a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010b0e:	493a      	ldr	r1, [pc, #232]	; (8010bf8 <pbuf_copy+0x194>)
 8010b10:	4838      	ldr	r0, [pc, #224]	; (8010bf4 <pbuf_copy+0x190>)
 8010b12:	f009 fc2f 	bl	801a374 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	895b      	ldrh	r3, [r3, #10]
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	693b      	ldr	r3, [r7, #16]
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d906      	bls.n	8010b30 <pbuf_copy+0xcc>
 8010b22:	4b32      	ldr	r3, [pc, #200]	; (8010bec <pbuf_copy+0x188>)
 8010b24:	f240 32da 	movw	r2, #986	; 0x3da
 8010b28:	4934      	ldr	r1, [pc, #208]	; (8010bfc <pbuf_copy+0x198>)
 8010b2a:	4832      	ldr	r0, [pc, #200]	; (8010bf4 <pbuf_copy+0x190>)
 8010b2c:	f009 fc22 	bl	801a374 <iprintf>
    if (offset_from >= p_from->len) {
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	895b      	ldrh	r3, [r3, #10]
 8010b34:	461a      	mov	r2, r3
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	4293      	cmp	r3, r2
 8010b3a:	d304      	bcc.n	8010b46 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	895b      	ldrh	r3, [r3, #10]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d114      	bne.n	8010b7c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d10c      	bne.n	8010b7c <pbuf_copy+0x118>
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d009      	beq.n	8010b7c <pbuf_copy+0x118>
 8010b68:	4b20      	ldr	r3, [pc, #128]	; (8010bec <pbuf_copy+0x188>)
 8010b6a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010b6e:	4924      	ldr	r1, [pc, #144]	; (8010c00 <pbuf_copy+0x19c>)
 8010b70:	4820      	ldr	r0, [pc, #128]	; (8010bf4 <pbuf_copy+0x190>)
 8010b72:	f009 fbff 	bl	801a374 <iprintf>
 8010b76:	f06f 030f 	mvn.w	r3, #15
 8010b7a:	e032      	b.n	8010be2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d013      	beq.n	8010baa <pbuf_copy+0x146>
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	895a      	ldrh	r2, [r3, #10]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	891b      	ldrh	r3, [r3, #8]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	d10d      	bne.n	8010baa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d009      	beq.n	8010baa <pbuf_copy+0x146>
 8010b96:	4b15      	ldr	r3, [pc, #84]	; (8010bec <pbuf_copy+0x188>)
 8010b98:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010b9c:	4919      	ldr	r1, [pc, #100]	; (8010c04 <pbuf_copy+0x1a0>)
 8010b9e:	4815      	ldr	r0, [pc, #84]	; (8010bf4 <pbuf_copy+0x190>)
 8010ba0:	f009 fbe8 	bl	801a374 <iprintf>
 8010ba4:	f06f 0305 	mvn.w	r3, #5
 8010ba8:	e01b      	b.n	8010be2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d013      	beq.n	8010bd8 <pbuf_copy+0x174>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	895a      	ldrh	r2, [r3, #10]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	891b      	ldrh	r3, [r3, #8]
 8010bb8:	429a      	cmp	r2, r3
 8010bba:	d10d      	bne.n	8010bd8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d009      	beq.n	8010bd8 <pbuf_copy+0x174>
 8010bc4:	4b09      	ldr	r3, [pc, #36]	; (8010bec <pbuf_copy+0x188>)
 8010bc6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010bca:	490e      	ldr	r1, [pc, #56]	; (8010c04 <pbuf_copy+0x1a0>)
 8010bcc:	4809      	ldr	r0, [pc, #36]	; (8010bf4 <pbuf_copy+0x190>)
 8010bce:	f009 fbd1 	bl	801a374 <iprintf>
 8010bd2:	f06f 0305 	mvn.w	r3, #5
 8010bd6:	e004      	b.n	8010be2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f47f af61 	bne.w	8010aa2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3718      	adds	r7, #24
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	bf00      	nop
 8010bec:	0801c364 	.word	0x0801c364
 8010bf0:	0801c60c 	.word	0x0801c60c
 8010bf4:	0801c3c4 	.word	0x0801c3c4
 8010bf8:	0801c63c 	.word	0x0801c63c
 8010bfc:	0801c654 	.word	0x0801c654
 8010c00:	0801c670 	.word	0x0801c670
 8010c04:	0801c680 	.word	0x0801c680

08010c08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b088      	sub	sp, #32
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	4611      	mov	r1, r2
 8010c14:	461a      	mov	r2, r3
 8010c16:	460b      	mov	r3, r1
 8010c18:	80fb      	strh	r3, [r7, #6]
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010c22:	2300      	movs	r3, #0
 8010c24:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d108      	bne.n	8010c3e <pbuf_copy_partial+0x36>
 8010c2c:	4b2b      	ldr	r3, [pc, #172]	; (8010cdc <pbuf_copy_partial+0xd4>)
 8010c2e:	f240 420a 	movw	r2, #1034	; 0x40a
 8010c32:	492b      	ldr	r1, [pc, #172]	; (8010ce0 <pbuf_copy_partial+0xd8>)
 8010c34:	482b      	ldr	r0, [pc, #172]	; (8010ce4 <pbuf_copy_partial+0xdc>)
 8010c36:	f009 fb9d 	bl	801a374 <iprintf>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e04a      	b.n	8010cd4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d108      	bne.n	8010c56 <pbuf_copy_partial+0x4e>
 8010c44:	4b25      	ldr	r3, [pc, #148]	; (8010cdc <pbuf_copy_partial+0xd4>)
 8010c46:	f240 420b 	movw	r2, #1035	; 0x40b
 8010c4a:	4927      	ldr	r1, [pc, #156]	; (8010ce8 <pbuf_copy_partial+0xe0>)
 8010c4c:	4825      	ldr	r0, [pc, #148]	; (8010ce4 <pbuf_copy_partial+0xdc>)
 8010c4e:	f009 fb91 	bl	801a374 <iprintf>
 8010c52:	2300      	movs	r3, #0
 8010c54:	e03e      	b.n	8010cd4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	61fb      	str	r3, [r7, #28]
 8010c5a:	e034      	b.n	8010cc6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010c5c:	88bb      	ldrh	r3, [r7, #4]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d00a      	beq.n	8010c78 <pbuf_copy_partial+0x70>
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	895b      	ldrh	r3, [r3, #10]
 8010c66:	88ba      	ldrh	r2, [r7, #4]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d305      	bcc.n	8010c78 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	895b      	ldrh	r3, [r3, #10]
 8010c70:	88ba      	ldrh	r2, [r7, #4]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	80bb      	strh	r3, [r7, #4]
 8010c76:	e023      	b.n	8010cc0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	895a      	ldrh	r2, [r3, #10]
 8010c7c:	88bb      	ldrh	r3, [r7, #4]
 8010c7e:	1ad3      	subs	r3, r2, r3
 8010c80:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010c82:	8b3a      	ldrh	r2, [r7, #24]
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d901      	bls.n	8010c8e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010c8a:	88fb      	ldrh	r3, [r7, #6]
 8010c8c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010c8e:	8b7b      	ldrh	r3, [r7, #26]
 8010c90:	68ba      	ldr	r2, [r7, #8]
 8010c92:	18d0      	adds	r0, r2, r3
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	685a      	ldr	r2, [r3, #4]
 8010c98:	88bb      	ldrh	r3, [r7, #4]
 8010c9a:	4413      	add	r3, r2
 8010c9c:	8b3a      	ldrh	r2, [r7, #24]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	f009 fabd 	bl	801a21e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010ca4:	8afa      	ldrh	r2, [r7, #22]
 8010ca6:	8b3b      	ldrh	r3, [r7, #24]
 8010ca8:	4413      	add	r3, r2
 8010caa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010cac:	8b7a      	ldrh	r2, [r7, #26]
 8010cae:	8b3b      	ldrh	r3, [r7, #24]
 8010cb0:	4413      	add	r3, r2
 8010cb2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010cb4:	88fa      	ldrh	r2, [r7, #6]
 8010cb6:	8b3b      	ldrh	r3, [r7, #24]
 8010cb8:	1ad3      	subs	r3, r2, r3
 8010cba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	61fb      	str	r3, [r7, #28]
 8010cc6:	88fb      	ldrh	r3, [r7, #6]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d002      	beq.n	8010cd2 <pbuf_copy_partial+0xca>
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d1c4      	bne.n	8010c5c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010cd2:	8afb      	ldrh	r3, [r7, #22]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3720      	adds	r7, #32
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	0801c364 	.word	0x0801c364
 8010ce0:	0801c6ac 	.word	0x0801c6ac
 8010ce4:	0801c3c4 	.word	0x0801c3c4
 8010ce8:	0801c6cc 	.word	0x0801c6cc

08010cec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	603a      	str	r2, [r7, #0]
 8010cf6:	71fb      	strb	r3, [r7, #7]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	8919      	ldrh	r1, [r3, #8]
 8010d00:	88ba      	ldrh	r2, [r7, #4]
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7ff faa5 	bl	8010254 <pbuf_alloc>
 8010d0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d101      	bne.n	8010d16 <pbuf_clone+0x2a>
    return NULL;
 8010d12:	2300      	movs	r3, #0
 8010d14:	e011      	b.n	8010d3a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010d16:	6839      	ldr	r1, [r7, #0]
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7ff fea3 	bl	8010a64 <pbuf_copy>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010d22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d006      	beq.n	8010d38 <pbuf_clone+0x4c>
 8010d2a:	4b06      	ldr	r3, [pc, #24]	; (8010d44 <pbuf_clone+0x58>)
 8010d2c:	f240 5224 	movw	r2, #1316	; 0x524
 8010d30:	4905      	ldr	r1, [pc, #20]	; (8010d48 <pbuf_clone+0x5c>)
 8010d32:	4806      	ldr	r0, [pc, #24]	; (8010d4c <pbuf_clone+0x60>)
 8010d34:	f009 fb1e 	bl	801a374 <iprintf>
  return q;
 8010d38:	68fb      	ldr	r3, [r7, #12]
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	0801c364 	.word	0x0801c364
 8010d48:	0801c7d8 	.word	0x0801c7d8
 8010d4c:	0801c3c4 	.word	0x0801c3c4

08010d50 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d54:	f009 fb26 	bl	801a3a4 <rand>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	b29b      	uxth	r3, r3
 8010d5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	4b01      	ldr	r3, [pc, #4]	; (8010d70 <tcp_init+0x20>)
 8010d6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010d6c:	bf00      	nop
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	20001a50 	.word	0x20001a50

08010d74 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b082      	sub	sp, #8
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	7d1b      	ldrb	r3, [r3, #20]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d105      	bne.n	8010d90 <tcp_free+0x1c>
 8010d84:	4b06      	ldr	r3, [pc, #24]	; (8010da0 <tcp_free+0x2c>)
 8010d86:	22d4      	movs	r2, #212	; 0xd4
 8010d88:	4906      	ldr	r1, [pc, #24]	; (8010da4 <tcp_free+0x30>)
 8010d8a:	4807      	ldr	r0, [pc, #28]	; (8010da8 <tcp_free+0x34>)
 8010d8c:	f009 faf2 	bl	801a374 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010d90:	6879      	ldr	r1, [r7, #4]
 8010d92:	2001      	movs	r0, #1
 8010d94:	f7fe fe9e 	bl	800fad4 <memp_free>
}
 8010d98:	bf00      	nop
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	0801c864 	.word	0x0801c864
 8010da4:	0801c894 	.word	0x0801c894
 8010da8:	0801c8a8 	.word	0x0801c8a8

08010dac <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	7d1b      	ldrb	r3, [r3, #20]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d105      	bne.n	8010dc8 <tcp_free_listen+0x1c>
 8010dbc:	4b06      	ldr	r3, [pc, #24]	; (8010dd8 <tcp_free_listen+0x2c>)
 8010dbe:	22df      	movs	r2, #223	; 0xdf
 8010dc0:	4906      	ldr	r1, [pc, #24]	; (8010ddc <tcp_free_listen+0x30>)
 8010dc2:	4807      	ldr	r0, [pc, #28]	; (8010de0 <tcp_free_listen+0x34>)
 8010dc4:	f009 fad6 	bl	801a374 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010dc8:	6879      	ldr	r1, [r7, #4]
 8010dca:	2002      	movs	r0, #2
 8010dcc:	f7fe fe82 	bl	800fad4 <memp_free>
}
 8010dd0:	bf00      	nop
 8010dd2:	3708      	adds	r7, #8
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	bd80      	pop	{r7, pc}
 8010dd8:	0801c864 	.word	0x0801c864
 8010ddc:	0801c8d0 	.word	0x0801c8d0
 8010de0:	0801c8a8 	.word	0x0801c8a8

08010de4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010de8:	f001 f8a6 	bl	8011f38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010dec:	4b07      	ldr	r3, [pc, #28]	; (8010e0c <tcp_tmr+0x28>)
 8010dee:	781b      	ldrb	r3, [r3, #0]
 8010df0:	3301      	adds	r3, #1
 8010df2:	b2da      	uxtb	r2, r3
 8010df4:	4b05      	ldr	r3, [pc, #20]	; (8010e0c <tcp_tmr+0x28>)
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	4b04      	ldr	r3, [pc, #16]	; (8010e0c <tcp_tmr+0x28>)
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	f003 0301 	and.w	r3, r3, #1
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d001      	beq.n	8010e08 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010e04:	f000 fd58 	bl	80118b8 <tcp_slowtmr>
  }
}
 8010e08:	bf00      	nop
 8010e0a:	bd80      	pop	{r7, pc}
 8010e0c:	2004f5e5 	.word	0x2004f5e5

08010e10 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d105      	bne.n	8010e2c <tcp_remove_listener+0x1c>
 8010e20:	4b0d      	ldr	r3, [pc, #52]	; (8010e58 <tcp_remove_listener+0x48>)
 8010e22:	22ff      	movs	r2, #255	; 0xff
 8010e24:	490d      	ldr	r1, [pc, #52]	; (8010e5c <tcp_remove_listener+0x4c>)
 8010e26:	480e      	ldr	r0, [pc, #56]	; (8010e60 <tcp_remove_listener+0x50>)
 8010e28:	f009 faa4 	bl	801a374 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	e00a      	b.n	8010e48 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d102      	bne.n	8010e42 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2200      	movs	r2, #0
 8010e40:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	68db      	ldr	r3, [r3, #12]
 8010e46:	60fb      	str	r3, [r7, #12]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d1f1      	bne.n	8010e32 <tcp_remove_listener+0x22>
    }
  }
}
 8010e4e:	bf00      	nop
 8010e50:	bf00      	nop
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	0801c864 	.word	0x0801c864
 8010e5c:	0801c8ec 	.word	0x0801c8ec
 8010e60:	0801c8a8 	.word	0x0801c8a8

08010e64 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b084      	sub	sp, #16
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d106      	bne.n	8010e80 <tcp_listen_closed+0x1c>
 8010e72:	4b14      	ldr	r3, [pc, #80]	; (8010ec4 <tcp_listen_closed+0x60>)
 8010e74:	f240 1211 	movw	r2, #273	; 0x111
 8010e78:	4913      	ldr	r1, [pc, #76]	; (8010ec8 <tcp_listen_closed+0x64>)
 8010e7a:	4814      	ldr	r0, [pc, #80]	; (8010ecc <tcp_listen_closed+0x68>)
 8010e7c:	f009 fa7a 	bl	801a374 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	7d1b      	ldrb	r3, [r3, #20]
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d006      	beq.n	8010e96 <tcp_listen_closed+0x32>
 8010e88:	4b0e      	ldr	r3, [pc, #56]	; (8010ec4 <tcp_listen_closed+0x60>)
 8010e8a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010e8e:	4910      	ldr	r1, [pc, #64]	; (8010ed0 <tcp_listen_closed+0x6c>)
 8010e90:	480e      	ldr	r0, [pc, #56]	; (8010ecc <tcp_listen_closed+0x68>)
 8010e92:	f009 fa6f 	bl	801a374 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e96:	2301      	movs	r3, #1
 8010e98:	60fb      	str	r3, [r7, #12]
 8010e9a:	e00b      	b.n	8010eb4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010e9c:	4a0d      	ldr	r2, [pc, #52]	; (8010ed4 <tcp_listen_closed+0x70>)
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	6879      	ldr	r1, [r7, #4]
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7ff ffb1 	bl	8010e10 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	60fb      	str	r3, [r7, #12]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2b03      	cmp	r3, #3
 8010eb8:	d9f0      	bls.n	8010e9c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010eba:	bf00      	nop
 8010ebc:	bf00      	nop
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	0801c864 	.word	0x0801c864
 8010ec8:	0801c914 	.word	0x0801c914
 8010ecc:	0801c8a8 	.word	0x0801c8a8
 8010ed0:	0801c920 	.word	0x0801c920
 8010ed4:	0801e8ac 	.word	0x0801e8ac

08010ed8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010ed8:	b5b0      	push	{r4, r5, r7, lr}
 8010eda:	b088      	sub	sp, #32
 8010edc:	af04      	add	r7, sp, #16
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d106      	bne.n	8010ef8 <tcp_close_shutdown+0x20>
 8010eea:	4b63      	ldr	r3, [pc, #396]	; (8011078 <tcp_close_shutdown+0x1a0>)
 8010eec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010ef0:	4962      	ldr	r1, [pc, #392]	; (801107c <tcp_close_shutdown+0x1a4>)
 8010ef2:	4863      	ldr	r0, [pc, #396]	; (8011080 <tcp_close_shutdown+0x1a8>)
 8010ef4:	f009 fa3e 	bl	801a374 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010ef8:	78fb      	ldrb	r3, [r7, #3]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d066      	beq.n	8010fcc <tcp_close_shutdown+0xf4>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	7d1b      	ldrb	r3, [r3, #20]
 8010f02:	2b04      	cmp	r3, #4
 8010f04:	d003      	beq.n	8010f0e <tcp_close_shutdown+0x36>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	7d1b      	ldrb	r3, [r3, #20]
 8010f0a:	2b07      	cmp	r3, #7
 8010f0c:	d15e      	bne.n	8010fcc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d104      	bne.n	8010f20 <tcp_close_shutdown+0x48>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f1e:	d055      	beq.n	8010fcc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	8b5b      	ldrh	r3, [r3, #26]
 8010f24:	f003 0310 	and.w	r3, r3, #16
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d106      	bne.n	8010f3a <tcp_close_shutdown+0x62>
 8010f2c:	4b52      	ldr	r3, [pc, #328]	; (8011078 <tcp_close_shutdown+0x1a0>)
 8010f2e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010f32:	4954      	ldr	r1, [pc, #336]	; (8011084 <tcp_close_shutdown+0x1ac>)
 8010f34:	4852      	ldr	r0, [pc, #328]	; (8011080 <tcp_close_shutdown+0x1a8>)
 8010f36:	f009 fa1d 	bl	801a374 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010f42:	687d      	ldr	r5, [r7, #4]
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	3304      	adds	r3, #4
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	8ad2      	ldrh	r2, [r2, #22]
 8010f4c:	6879      	ldr	r1, [r7, #4]
 8010f4e:	8b09      	ldrh	r1, [r1, #24]
 8010f50:	9102      	str	r1, [sp, #8]
 8010f52:	9201      	str	r2, [sp, #4]
 8010f54:	9300      	str	r3, [sp, #0]
 8010f56:	462b      	mov	r3, r5
 8010f58:	4622      	mov	r2, r4
 8010f5a:	4601      	mov	r1, r0
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f005 fdbb 	bl	8016ad8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f001 fb98 	bl	8012698 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010f68:	4b47      	ldr	r3, [pc, #284]	; (8011088 <tcp_close_shutdown+0x1b0>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d105      	bne.n	8010f7e <tcp_close_shutdown+0xa6>
 8010f72:	4b45      	ldr	r3, [pc, #276]	; (8011088 <tcp_close_shutdown+0x1b0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	68db      	ldr	r3, [r3, #12]
 8010f78:	4a43      	ldr	r2, [pc, #268]	; (8011088 <tcp_close_shutdown+0x1b0>)
 8010f7a:	6013      	str	r3, [r2, #0]
 8010f7c:	e013      	b.n	8010fa6 <tcp_close_shutdown+0xce>
 8010f7e:	4b42      	ldr	r3, [pc, #264]	; (8011088 <tcp_close_shutdown+0x1b0>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	60fb      	str	r3, [r7, #12]
 8010f84:	e00c      	b.n	8010fa0 <tcp_close_shutdown+0xc8>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	68db      	ldr	r3, [r3, #12]
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	d104      	bne.n	8010f9a <tcp_close_shutdown+0xc2>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	68da      	ldr	r2, [r3, #12]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	60da      	str	r2, [r3, #12]
 8010f98:	e005      	b.n	8010fa6 <tcp_close_shutdown+0xce>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	68db      	ldr	r3, [r3, #12]
 8010f9e:	60fb      	str	r3, [r7, #12]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1ef      	bne.n	8010f86 <tcp_close_shutdown+0xae>
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	60da      	str	r2, [r3, #12]
 8010fac:	4b37      	ldr	r3, [pc, #220]	; (801108c <tcp_close_shutdown+0x1b4>)
 8010fae:	2201      	movs	r2, #1
 8010fb0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010fb2:	4b37      	ldr	r3, [pc, #220]	; (8011090 <tcp_close_shutdown+0x1b8>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d102      	bne.n	8010fc2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010fbc:	f004 f830 	bl	8015020 <tcp_trigger_input_pcb_close>
 8010fc0:	e002      	b.n	8010fc8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f7ff fed6 	bl	8010d74 <tcp_free>
      }
      return ERR_OK;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	e050      	b.n	801106e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7d1b      	ldrb	r3, [r3, #20]
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	d03b      	beq.n	801104c <tcp_close_shutdown+0x174>
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	dc44      	bgt.n	8011062 <tcp_close_shutdown+0x18a>
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <tcp_close_shutdown+0x10a>
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d02a      	beq.n	8011036 <tcp_close_shutdown+0x15e>
 8010fe0:	e03f      	b.n	8011062 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	8adb      	ldrh	r3, [r3, #22]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d021      	beq.n	801102e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010fea:	4b2a      	ldr	r3, [pc, #168]	; (8011094 <tcp_close_shutdown+0x1bc>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d105      	bne.n	8011000 <tcp_close_shutdown+0x128>
 8010ff4:	4b27      	ldr	r3, [pc, #156]	; (8011094 <tcp_close_shutdown+0x1bc>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	4a26      	ldr	r2, [pc, #152]	; (8011094 <tcp_close_shutdown+0x1bc>)
 8010ffc:	6013      	str	r3, [r2, #0]
 8010ffe:	e013      	b.n	8011028 <tcp_close_shutdown+0x150>
 8011000:	4b24      	ldr	r3, [pc, #144]	; (8011094 <tcp_close_shutdown+0x1bc>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	60bb      	str	r3, [r7, #8]
 8011006:	e00c      	b.n	8011022 <tcp_close_shutdown+0x14a>
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d104      	bne.n	801101c <tcp_close_shutdown+0x144>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	60da      	str	r2, [r3, #12]
 801101a:	e005      	b.n	8011028 <tcp_close_shutdown+0x150>
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	60bb      	str	r3, [r7, #8]
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d1ef      	bne.n	8011008 <tcp_close_shutdown+0x130>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2200      	movs	r2, #0
 801102c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff fea0 	bl	8010d74 <tcp_free>
      break;
 8011034:	e01a      	b.n	801106c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f7ff ff14 	bl	8010e64 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801103c:	6879      	ldr	r1, [r7, #4]
 801103e:	4816      	ldr	r0, [pc, #88]	; (8011098 <tcp_close_shutdown+0x1c0>)
 8011040:	f001 fb7a 	bl	8012738 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f7ff feb1 	bl	8010dac <tcp_free_listen>
      break;
 801104a:	e00f      	b.n	801106c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801104c:	6879      	ldr	r1, [r7, #4]
 801104e:	480e      	ldr	r0, [pc, #56]	; (8011088 <tcp_close_shutdown+0x1b0>)
 8011050:	f001 fb72 	bl	8012738 <tcp_pcb_remove>
 8011054:	4b0d      	ldr	r3, [pc, #52]	; (801108c <tcp_close_shutdown+0x1b4>)
 8011056:	2201      	movs	r2, #1
 8011058:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801105a:	6878      	ldr	r0, [r7, #4]
 801105c:	f7ff fe8a 	bl	8010d74 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011060:	e004      	b.n	801106c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011062:	6878      	ldr	r0, [r7, #4]
 8011064:	f000 f81a 	bl	801109c <tcp_close_shutdown_fin>
 8011068:	4603      	mov	r3, r0
 801106a:	e000      	b.n	801106e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801106c:	2300      	movs	r3, #0
}
 801106e:	4618      	mov	r0, r3
 8011070:	3710      	adds	r7, #16
 8011072:	46bd      	mov	sp, r7
 8011074:	bdb0      	pop	{r4, r5, r7, pc}
 8011076:	bf00      	nop
 8011078:	0801c864 	.word	0x0801c864
 801107c:	0801c938 	.word	0x0801c938
 8011080:	0801c8a8 	.word	0x0801c8a8
 8011084:	0801c958 	.word	0x0801c958
 8011088:	2004f5dc 	.word	0x2004f5dc
 801108c:	2004f5e4 	.word	0x2004f5e4
 8011090:	2004f61c 	.word	0x2004f61c
 8011094:	2004f5d4 	.word	0x2004f5d4
 8011098:	2004f5d8 	.word	0x2004f5d8

0801109c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d106      	bne.n	80110b8 <tcp_close_shutdown_fin+0x1c>
 80110aa:	4b2e      	ldr	r3, [pc, #184]	; (8011164 <tcp_close_shutdown_fin+0xc8>)
 80110ac:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80110b0:	492d      	ldr	r1, [pc, #180]	; (8011168 <tcp_close_shutdown_fin+0xcc>)
 80110b2:	482e      	ldr	r0, [pc, #184]	; (801116c <tcp_close_shutdown_fin+0xd0>)
 80110b4:	f009 f95e 	bl	801a374 <iprintf>

  switch (pcb->state) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	7d1b      	ldrb	r3, [r3, #20]
 80110bc:	2b07      	cmp	r3, #7
 80110be:	d020      	beq.n	8011102 <tcp_close_shutdown_fin+0x66>
 80110c0:	2b07      	cmp	r3, #7
 80110c2:	dc2b      	bgt.n	801111c <tcp_close_shutdown_fin+0x80>
 80110c4:	2b03      	cmp	r3, #3
 80110c6:	d002      	beq.n	80110ce <tcp_close_shutdown_fin+0x32>
 80110c8:	2b04      	cmp	r3, #4
 80110ca:	d00d      	beq.n	80110e8 <tcp_close_shutdown_fin+0x4c>
 80110cc:	e026      	b.n	801111c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f004 fe10 	bl	8015cf4 <tcp_send_fin>
 80110d4:	4603      	mov	r3, r0
 80110d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d11f      	bne.n	8011120 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	2205      	movs	r2, #5
 80110e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110e6:	e01b      	b.n	8011120 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f004 fe03 	bl	8015cf4 <tcp_send_fin>
 80110ee:	4603      	mov	r3, r0
 80110f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d114      	bne.n	8011124 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2205      	movs	r2, #5
 80110fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011100:	e010      	b.n	8011124 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f004 fdf6 	bl	8015cf4 <tcp_send_fin>
 8011108:	4603      	mov	r3, r0
 801110a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801110c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d109      	bne.n	8011128 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2209      	movs	r2, #9
 8011118:	751a      	strb	r2, [r3, #20]
      }
      break;
 801111a:	e005      	b.n	8011128 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	e01c      	b.n	801115a <tcp_close_shutdown_fin+0xbe>
      break;
 8011120:	bf00      	nop
 8011122:	e002      	b.n	801112a <tcp_close_shutdown_fin+0x8e>
      break;
 8011124:	bf00      	nop
 8011126:	e000      	b.n	801112a <tcp_close_shutdown_fin+0x8e>
      break;
 8011128:	bf00      	nop
  }

  if (err == ERR_OK) {
 801112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d103      	bne.n	801113a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f004 ff1c 	bl	8015f70 <tcp_output>
 8011138:	e00d      	b.n	8011156 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801113e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011142:	d108      	bne.n	8011156 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	8b5b      	ldrh	r3, [r3, #26]
 8011148:	f043 0308 	orr.w	r3, r3, #8
 801114c:	b29a      	uxth	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011152:	2300      	movs	r3, #0
 8011154:	e001      	b.n	801115a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011156:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801115a:	4618      	mov	r0, r3
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	0801c864 	.word	0x0801c864
 8011168:	0801c914 	.word	0x0801c914
 801116c:	0801c8a8 	.word	0x0801c8a8

08011170 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d109      	bne.n	8011192 <tcp_close+0x22>
 801117e:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <tcp_close+0x4c>)
 8011180:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011184:	490e      	ldr	r1, [pc, #56]	; (80111c0 <tcp_close+0x50>)
 8011186:	480f      	ldr	r0, [pc, #60]	; (80111c4 <tcp_close+0x54>)
 8011188:	f009 f8f4 	bl	801a374 <iprintf>
 801118c:	f06f 030f 	mvn.w	r3, #15
 8011190:	e00f      	b.n	80111b2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	7d1b      	ldrb	r3, [r3, #20]
 8011196:	2b01      	cmp	r3, #1
 8011198:	d006      	beq.n	80111a8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	8b5b      	ldrh	r3, [r3, #26]
 801119e:	f043 0310 	orr.w	r3, r3, #16
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80111a8:	2101      	movs	r1, #1
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7ff fe94 	bl	8010ed8 <tcp_close_shutdown>
 80111b0:	4603      	mov	r3, r0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
 80111ba:	bf00      	nop
 80111bc:	0801c864 	.word	0x0801c864
 80111c0:	0801c974 	.word	0x0801c974
 80111c4:	0801c8a8 	.word	0x0801c8a8

080111c8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b084      	sub	sp, #16
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	60f8      	str	r0, [r7, #12]
 80111d0:	60b9      	str	r1, [r7, #8]
 80111d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d109      	bne.n	80111ee <tcp_shutdown+0x26>
 80111da:	4b26      	ldr	r3, [pc, #152]	; (8011274 <tcp_shutdown+0xac>)
 80111dc:	f240 2207 	movw	r2, #519	; 0x207
 80111e0:	4925      	ldr	r1, [pc, #148]	; (8011278 <tcp_shutdown+0xb0>)
 80111e2:	4826      	ldr	r0, [pc, #152]	; (801127c <tcp_shutdown+0xb4>)
 80111e4:	f009 f8c6 	bl	801a374 <iprintf>
 80111e8:	f06f 030f 	mvn.w	r3, #15
 80111ec:	e03d      	b.n	801126a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	7d1b      	ldrb	r3, [r3, #20]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d102      	bne.n	80111fc <tcp_shutdown+0x34>
    return ERR_CONN;
 80111f6:	f06f 030a 	mvn.w	r3, #10
 80111fa:	e036      	b.n	801126a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d01b      	beq.n	801123a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	8b5b      	ldrh	r3, [r3, #26]
 8011206:	f043 0310 	orr.w	r3, r3, #16
 801120a:	b29a      	uxth	r2, r3
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d005      	beq.n	8011222 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011216:	2101      	movs	r1, #1
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f7ff fe5d 	bl	8010ed8 <tcp_close_shutdown>
 801121e:	4603      	mov	r3, r0
 8011220:	e023      	b.n	801126a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011226:	2b00      	cmp	r3, #0
 8011228:	d007      	beq.n	801123a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801122e:	4618      	mov	r0, r3
 8011230:	f7ff faf4 	bl	801081c <pbuf_free>
      pcb->refused_data = NULL;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2200      	movs	r2, #0
 8011238:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d013      	beq.n	8011268 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	7d1b      	ldrb	r3, [r3, #20]
 8011244:	2b04      	cmp	r3, #4
 8011246:	dc02      	bgt.n	801124e <tcp_shutdown+0x86>
 8011248:	2b03      	cmp	r3, #3
 801124a:	da02      	bge.n	8011252 <tcp_shutdown+0x8a>
 801124c:	e009      	b.n	8011262 <tcp_shutdown+0x9a>
 801124e:	2b07      	cmp	r3, #7
 8011250:	d107      	bne.n	8011262 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	4619      	mov	r1, r3
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f7ff fe3d 	bl	8010ed8 <tcp_close_shutdown>
 801125e:	4603      	mov	r3, r0
 8011260:	e003      	b.n	801126a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011262:	f06f 030a 	mvn.w	r3, #10
 8011266:	e000      	b.n	801126a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	0801c864 	.word	0x0801c864
 8011278:	0801c98c 	.word	0x0801c98c
 801127c:	0801c8a8 	.word	0x0801c8a8

08011280 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b08e      	sub	sp, #56	; 0x38
 8011284:	af04      	add	r7, sp, #16
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d107      	bne.n	80112a0 <tcp_abandon+0x20>
 8011290:	4b52      	ldr	r3, [pc, #328]	; (80113dc <tcp_abandon+0x15c>)
 8011292:	f240 223d 	movw	r2, #573	; 0x23d
 8011296:	4952      	ldr	r1, [pc, #328]	; (80113e0 <tcp_abandon+0x160>)
 8011298:	4852      	ldr	r0, [pc, #328]	; (80113e4 <tcp_abandon+0x164>)
 801129a:	f009 f86b 	bl	801a374 <iprintf>
 801129e:	e099      	b.n	80113d4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	7d1b      	ldrb	r3, [r3, #20]
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d106      	bne.n	80112b6 <tcp_abandon+0x36>
 80112a8:	4b4c      	ldr	r3, [pc, #304]	; (80113dc <tcp_abandon+0x15c>)
 80112aa:	f44f 7210 	mov.w	r2, #576	; 0x240
 80112ae:	494e      	ldr	r1, [pc, #312]	; (80113e8 <tcp_abandon+0x168>)
 80112b0:	484c      	ldr	r0, [pc, #304]	; (80113e4 <tcp_abandon+0x164>)
 80112b2:	f009 f85f 	bl	801a374 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	2b0a      	cmp	r3, #10
 80112bc:	d107      	bne.n	80112ce <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80112be:	6879      	ldr	r1, [r7, #4]
 80112c0:	484a      	ldr	r0, [pc, #296]	; (80113ec <tcp_abandon+0x16c>)
 80112c2:	f001 fa39 	bl	8012738 <tcp_pcb_remove>
    tcp_free(pcb);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7ff fd54 	bl	8010d74 <tcp_free>
 80112cc:	e082      	b.n	80113d4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80112ce:	2300      	movs	r3, #0
 80112d0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80112d2:	2300      	movs	r3, #0
 80112d4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112da:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112e8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	691b      	ldr	r3, [r3, #16]
 80112ee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	7d1b      	ldrb	r3, [r3, #20]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d126      	bne.n	8011346 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	8adb      	ldrh	r3, [r3, #22]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d02e      	beq.n	801135e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011300:	4b3b      	ldr	r3, [pc, #236]	; (80113f0 <tcp_abandon+0x170>)
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	429a      	cmp	r2, r3
 8011308:	d105      	bne.n	8011316 <tcp_abandon+0x96>
 801130a:	4b39      	ldr	r3, [pc, #228]	; (80113f0 <tcp_abandon+0x170>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	68db      	ldr	r3, [r3, #12]
 8011310:	4a37      	ldr	r2, [pc, #220]	; (80113f0 <tcp_abandon+0x170>)
 8011312:	6013      	str	r3, [r2, #0]
 8011314:	e013      	b.n	801133e <tcp_abandon+0xbe>
 8011316:	4b36      	ldr	r3, [pc, #216]	; (80113f0 <tcp_abandon+0x170>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	61fb      	str	r3, [r7, #28]
 801131c:	e00c      	b.n	8011338 <tcp_abandon+0xb8>
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	429a      	cmp	r2, r3
 8011326:	d104      	bne.n	8011332 <tcp_abandon+0xb2>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68da      	ldr	r2, [r3, #12]
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	60da      	str	r2, [r3, #12]
 8011330:	e005      	b.n	801133e <tcp_abandon+0xbe>
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	61fb      	str	r3, [r7, #28]
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d1ef      	bne.n	801131e <tcp_abandon+0x9e>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2200      	movs	r2, #0
 8011342:	60da      	str	r2, [r3, #12]
 8011344:	e00b      	b.n	801135e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	8adb      	ldrh	r3, [r3, #22]
 801134e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011350:	6879      	ldr	r1, [r7, #4]
 8011352:	4828      	ldr	r0, [pc, #160]	; (80113f4 <tcp_abandon+0x174>)
 8011354:	f001 f9f0 	bl	8012738 <tcp_pcb_remove>
 8011358:	4b27      	ldr	r3, [pc, #156]	; (80113f8 <tcp_abandon+0x178>)
 801135a:	2201      	movs	r2, #1
 801135c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011362:	2b00      	cmp	r3, #0
 8011364:	d004      	beq.n	8011370 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801136a:	4618      	mov	r0, r3
 801136c:	f000 fec4 	bl	80120f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011374:	2b00      	cmp	r3, #0
 8011376:	d004      	beq.n	8011382 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801137c:	4618      	mov	r0, r3
 801137e:	f000 febb 	bl	80120f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011386:	2b00      	cmp	r3, #0
 8011388:	d004      	beq.n	8011394 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801138e:	4618      	mov	r0, r3
 8011390:	f000 feb2 	bl	80120f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00e      	beq.n	80113b8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801139a:	6879      	ldr	r1, [r7, #4]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	3304      	adds	r3, #4
 80113a0:	687a      	ldr	r2, [r7, #4]
 80113a2:	8b12      	ldrh	r2, [r2, #24]
 80113a4:	9202      	str	r2, [sp, #8]
 80113a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80113a8:	9201      	str	r2, [sp, #4]
 80113aa:	9300      	str	r3, [sp, #0]
 80113ac:	460b      	mov	r3, r1
 80113ae:	697a      	ldr	r2, [r7, #20]
 80113b0:	69b9      	ldr	r1, [r7, #24]
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f005 fb90 	bl	8016ad8 <tcp_rst>
    }
    last_state = pcb->state;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	7d1b      	ldrb	r3, [r3, #20]
 80113bc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f7ff fcd8 	bl	8010d74 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80113c4:	693b      	ldr	r3, [r7, #16]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d004      	beq.n	80113d4 <tcp_abandon+0x154>
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	f06f 010c 	mvn.w	r1, #12
 80113d0:	68f8      	ldr	r0, [r7, #12]
 80113d2:	4798      	blx	r3
  }
}
 80113d4:	3728      	adds	r7, #40	; 0x28
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	0801c864 	.word	0x0801c864
 80113e0:	0801c9a8 	.word	0x0801c9a8
 80113e4:	0801c8a8 	.word	0x0801c8a8
 80113e8:	0801c9c4 	.word	0x0801c9c4
 80113ec:	2004f5e0 	.word	0x2004f5e0
 80113f0:	2004f5d4 	.word	0x2004f5d4
 80113f4:	2004f5dc 	.word	0x2004f5dc
 80113f8:	2004f5e4 	.word	0x2004f5e4

080113fc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011404:	2101      	movs	r1, #1
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7ff ff3a 	bl	8011280 <tcp_abandon>
}
 801140c:	bf00      	nop
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b088      	sub	sp, #32
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	4613      	mov	r3, r2
 8011420:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011422:	2304      	movs	r3, #4
 8011424:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d101      	bne.n	8011430 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801142c:	4b3e      	ldr	r3, [pc, #248]	; (8011528 <tcp_bind+0x114>)
 801142e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d109      	bne.n	801144a <tcp_bind+0x36>
 8011436:	4b3d      	ldr	r3, [pc, #244]	; (801152c <tcp_bind+0x118>)
 8011438:	f240 22a9 	movw	r2, #681	; 0x2a9
 801143c:	493c      	ldr	r1, [pc, #240]	; (8011530 <tcp_bind+0x11c>)
 801143e:	483d      	ldr	r0, [pc, #244]	; (8011534 <tcp_bind+0x120>)
 8011440:	f008 ff98 	bl	801a374 <iprintf>
 8011444:	f06f 030f 	mvn.w	r3, #15
 8011448:	e06a      	b.n	8011520 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	7d1b      	ldrb	r3, [r3, #20]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d009      	beq.n	8011466 <tcp_bind+0x52>
 8011452:	4b36      	ldr	r3, [pc, #216]	; (801152c <tcp_bind+0x118>)
 8011454:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011458:	4937      	ldr	r1, [pc, #220]	; (8011538 <tcp_bind+0x124>)
 801145a:	4836      	ldr	r0, [pc, #216]	; (8011534 <tcp_bind+0x120>)
 801145c:	f008 ff8a 	bl	801a374 <iprintf>
 8011460:	f06f 0305 	mvn.w	r3, #5
 8011464:	e05c      	b.n	8011520 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011466:	88fb      	ldrh	r3, [r7, #6]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d109      	bne.n	8011480 <tcp_bind+0x6c>
    port = tcp_new_port();
 801146c:	f000 f9de 	bl	801182c <tcp_new_port>
 8011470:	4603      	mov	r3, r0
 8011472:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011474:	88fb      	ldrh	r3, [r7, #6]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d135      	bne.n	80114e6 <tcp_bind+0xd2>
      return ERR_BUF;
 801147a:	f06f 0301 	mvn.w	r3, #1
 801147e:	e04f      	b.n	8011520 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011480:	2300      	movs	r3, #0
 8011482:	61fb      	str	r3, [r7, #28]
 8011484:	e02b      	b.n	80114de <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011486:	4a2d      	ldr	r2, [pc, #180]	; (801153c <tcp_bind+0x128>)
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	61bb      	str	r3, [r7, #24]
 8011492:	e01e      	b.n	80114d2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	8adb      	ldrh	r3, [r3, #22]
 8011498:	88fa      	ldrh	r2, [r7, #6]
 801149a:	429a      	cmp	r2, r3
 801149c:	d116      	bne.n	80114cc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801149e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d010      	beq.n	80114c6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80114a4:	69bb      	ldr	r3, [r7, #24]
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00c      	beq.n	80114c6 <tcp_bind+0xb2>
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d009      	beq.n	80114c6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d005      	beq.n	80114c6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	68bb      	ldr	r3, [r7, #8]
 80114c0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d102      	bne.n	80114cc <tcp_bind+0xb8>
              return ERR_USE;
 80114c6:	f06f 0307 	mvn.w	r3, #7
 80114ca:	e029      	b.n	8011520 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	68db      	ldr	r3, [r3, #12]
 80114d0:	61bb      	str	r3, [r7, #24]
 80114d2:	69bb      	ldr	r3, [r7, #24]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1dd      	bne.n	8011494 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80114d8:	69fb      	ldr	r3, [r7, #28]
 80114da:	3301      	adds	r3, #1
 80114dc:	61fb      	str	r3, [r7, #28]
 80114de:	69fa      	ldr	r2, [r7, #28]
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	dbcf      	blt.n	8011486 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d00c      	beq.n	8011506 <tcp_bind+0xf2>
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d008      	beq.n	8011506 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d002      	beq.n	8011500 <tcp_bind+0xec>
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	e000      	b.n	8011502 <tcp_bind+0xee>
 8011500:	2300      	movs	r3, #0
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	88fa      	ldrh	r2, [r7, #6]
 801150a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801150c:	4b0c      	ldr	r3, [pc, #48]	; (8011540 <tcp_bind+0x12c>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	60da      	str	r2, [r3, #12]
 8011514:	4a0a      	ldr	r2, [pc, #40]	; (8011540 <tcp_bind+0x12c>)
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	6013      	str	r3, [r2, #0]
 801151a:	f005 fc9f 	bl	8016e5c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801151e:	2300      	movs	r3, #0
}
 8011520:	4618      	mov	r0, r3
 8011522:	3720      	adds	r7, #32
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	0801e8d4 	.word	0x0801e8d4
 801152c:	0801c864 	.word	0x0801c864
 8011530:	0801c9f8 	.word	0x0801c9f8
 8011534:	0801c8a8 	.word	0x0801c8a8
 8011538:	0801ca10 	.word	0x0801ca10
 801153c:	0801e8ac 	.word	0x0801e8ac
 8011540:	2004f5d4 	.word	0x2004f5d4

08011544 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b084      	sub	sp, #16
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	4613      	mov	r3, r2
 8011550:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d106      	bne.n	8011566 <tcp_accept_null+0x22>
 8011558:	4b07      	ldr	r3, [pc, #28]	; (8011578 <tcp_accept_null+0x34>)
 801155a:	f240 320f 	movw	r2, #783	; 0x30f
 801155e:	4907      	ldr	r1, [pc, #28]	; (801157c <tcp_accept_null+0x38>)
 8011560:	4807      	ldr	r0, [pc, #28]	; (8011580 <tcp_accept_null+0x3c>)
 8011562:	f008 ff07 	bl	801a374 <iprintf>

  tcp_abort(pcb);
 8011566:	68b8      	ldr	r0, [r7, #8]
 8011568:	f7ff ff48 	bl	80113fc <tcp_abort>

  return ERR_ABRT;
 801156c:	f06f 030c 	mvn.w	r3, #12
}
 8011570:	4618      	mov	r0, r3
 8011572:	3710      	adds	r7, #16
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}
 8011578:	0801c864 	.word	0x0801c864
 801157c:	0801ca38 	.word	0x0801ca38
 8011580:	0801c8a8 	.word	0x0801c8a8

08011584 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af00      	add	r7, sp, #0
 801158a:	60f8      	str	r0, [r7, #12]
 801158c:	460b      	mov	r3, r1
 801158e:	607a      	str	r2, [r7, #4]
 8011590:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011592:	2300      	movs	r3, #0
 8011594:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d109      	bne.n	80115b0 <tcp_listen_with_backlog_and_err+0x2c>
 801159c:	4b47      	ldr	r3, [pc, #284]	; (80116bc <tcp_listen_with_backlog_and_err+0x138>)
 801159e:	f240 3259 	movw	r2, #857	; 0x359
 80115a2:	4947      	ldr	r1, [pc, #284]	; (80116c0 <tcp_listen_with_backlog_and_err+0x13c>)
 80115a4:	4847      	ldr	r0, [pc, #284]	; (80116c4 <tcp_listen_with_backlog_and_err+0x140>)
 80115a6:	f008 fee5 	bl	801a374 <iprintf>
 80115aa:	23f0      	movs	r3, #240	; 0xf0
 80115ac:	76fb      	strb	r3, [r7, #27]
 80115ae:	e079      	b.n	80116a4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	7d1b      	ldrb	r3, [r3, #20]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d009      	beq.n	80115cc <tcp_listen_with_backlog_and_err+0x48>
 80115b8:	4b40      	ldr	r3, [pc, #256]	; (80116bc <tcp_listen_with_backlog_and_err+0x138>)
 80115ba:	f240 325a 	movw	r2, #858	; 0x35a
 80115be:	4942      	ldr	r1, [pc, #264]	; (80116c8 <tcp_listen_with_backlog_and_err+0x144>)
 80115c0:	4840      	ldr	r0, [pc, #256]	; (80116c4 <tcp_listen_with_backlog_and_err+0x140>)
 80115c2:	f008 fed7 	bl	801a374 <iprintf>
 80115c6:	23f1      	movs	r3, #241	; 0xf1
 80115c8:	76fb      	strb	r3, [r7, #27]
 80115ca:	e06b      	b.n	80116a4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	7d1b      	ldrb	r3, [r3, #20]
 80115d0:	2b01      	cmp	r3, #1
 80115d2:	d104      	bne.n	80115de <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80115d8:	23f7      	movs	r3, #247	; 0xf7
 80115da:	76fb      	strb	r3, [r7, #27]
    goto done;
 80115dc:	e062      	b.n	80116a4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80115de:	2002      	movs	r0, #2
 80115e0:	f7fe fa02 	bl	800f9e8 <memp_malloc>
 80115e4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80115e6:	69fb      	ldr	r3, [r7, #28]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d102      	bne.n	80115f2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80115ec:	23ff      	movs	r3, #255	; 0xff
 80115ee:	76fb      	strb	r3, [r7, #27]
    goto done;
 80115f0:	e058      	b.n	80116a4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	691a      	ldr	r2, [r3, #16]
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	8ada      	ldrh	r2, [r3, #22]
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	2201      	movs	r2, #1
 8011606:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	7d5a      	ldrb	r2, [r3, #21]
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	7a5a      	ldrb	r2, [r3, #9]
 8011614:	69fb      	ldr	r3, [r7, #28]
 8011616:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	2200      	movs	r2, #0
 801161c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	7ada      	ldrb	r2, [r3, #11]
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	7a9a      	ldrb	r2, [r3, #10]
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681a      	ldr	r2, [r3, #0]
 8011632:	69fb      	ldr	r3, [r7, #28]
 8011634:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	8adb      	ldrh	r3, [r3, #22]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d021      	beq.n	8011682 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801163e:	4b23      	ldr	r3, [pc, #140]	; (80116cc <tcp_listen_with_backlog_and_err+0x148>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	68fa      	ldr	r2, [r7, #12]
 8011644:	429a      	cmp	r2, r3
 8011646:	d105      	bne.n	8011654 <tcp_listen_with_backlog_and_err+0xd0>
 8011648:	4b20      	ldr	r3, [pc, #128]	; (80116cc <tcp_listen_with_backlog_and_err+0x148>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	68db      	ldr	r3, [r3, #12]
 801164e:	4a1f      	ldr	r2, [pc, #124]	; (80116cc <tcp_listen_with_backlog_and_err+0x148>)
 8011650:	6013      	str	r3, [r2, #0]
 8011652:	e013      	b.n	801167c <tcp_listen_with_backlog_and_err+0xf8>
 8011654:	4b1d      	ldr	r3, [pc, #116]	; (80116cc <tcp_listen_with_backlog_and_err+0x148>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	617b      	str	r3, [r7, #20]
 801165a:	e00c      	b.n	8011676 <tcp_listen_with_backlog_and_err+0xf2>
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	429a      	cmp	r2, r3
 8011664:	d104      	bne.n	8011670 <tcp_listen_with_backlog_and_err+0xec>
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	68da      	ldr	r2, [r3, #12]
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	60da      	str	r2, [r3, #12]
 801166e:	e005      	b.n	801167c <tcp_listen_with_backlog_and_err+0xf8>
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	617b      	str	r3, [r7, #20]
 8011676:	697b      	ldr	r3, [r7, #20]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1ef      	bne.n	801165c <tcp_listen_with_backlog_and_err+0xd8>
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2200      	movs	r2, #0
 8011680:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff fb76 	bl	8010d74 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011688:	69fb      	ldr	r3, [r7, #28]
 801168a:	4a11      	ldr	r2, [pc, #68]	; (80116d0 <tcp_listen_with_backlog_and_err+0x14c>)
 801168c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801168e:	4b11      	ldr	r3, [pc, #68]	; (80116d4 <tcp_listen_with_backlog_and_err+0x150>)
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	60da      	str	r2, [r3, #12]
 8011696:	4a0f      	ldr	r2, [pc, #60]	; (80116d4 <tcp_listen_with_backlog_and_err+0x150>)
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	6013      	str	r3, [r2, #0]
 801169c:	f005 fbde 	bl	8016e5c <tcp_timer_needed>
  res = ERR_OK;
 80116a0:	2300      	movs	r3, #0
 80116a2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d002      	beq.n	80116b0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	7efa      	ldrb	r2, [r7, #27]
 80116ae:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80116b0:	69fb      	ldr	r3, [r7, #28]
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3720      	adds	r7, #32
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	0801c864 	.word	0x0801c864
 80116c0:	0801ca58 	.word	0x0801ca58
 80116c4:	0801c8a8 	.word	0x0801c8a8
 80116c8:	0801ca88 	.word	0x0801ca88
 80116cc:	2004f5d4 	.word	0x2004f5d4
 80116d0:	08011545 	.word	0x08011545
 80116d4:	2004f5d8 	.word	0x2004f5d8

080116d8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d106      	bne.n	80116f4 <tcp_update_rcv_ann_wnd+0x1c>
 80116e6:	4b25      	ldr	r3, [pc, #148]	; (801177c <tcp_update_rcv_ann_wnd+0xa4>)
 80116e8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80116ec:	4924      	ldr	r1, [pc, #144]	; (8011780 <tcp_update_rcv_ann_wnd+0xa8>)
 80116ee:	4825      	ldr	r0, [pc, #148]	; (8011784 <tcp_update_rcv_ann_wnd+0xac>)
 80116f0:	f008 fe40 	bl	801a374 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f8:	687a      	ldr	r2, [r7, #4]
 80116fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80116fc:	4413      	add	r3, r2
 80116fe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011704:	687a      	ldr	r2, [r7, #4]
 8011706:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011708:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801170c:	bf28      	it	cs
 801170e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011712:	b292      	uxth	r2, r2
 8011714:	4413      	add	r3, r2
 8011716:	68fa      	ldr	r2, [r7, #12]
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	2b00      	cmp	r3, #0
 801171c:	db08      	blt.n	8011730 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801172a:	68fa      	ldr	r2, [r7, #12]
 801172c:	1ad3      	subs	r3, r2, r3
 801172e:	e020      	b.n	8011772 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	dd03      	ble.n	8011746 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2200      	movs	r2, #0
 8011742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011744:	e014      	b.n	8011770 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011758:	d306      	bcc.n	8011768 <tcp_update_rcv_ann_wnd+0x90>
 801175a:	4b08      	ldr	r3, [pc, #32]	; (801177c <tcp_update_rcv_ann_wnd+0xa4>)
 801175c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011760:	4909      	ldr	r1, [pc, #36]	; (8011788 <tcp_update_rcv_ann_wnd+0xb0>)
 8011762:	4808      	ldr	r0, [pc, #32]	; (8011784 <tcp_update_rcv_ann_wnd+0xac>)
 8011764:	f008 fe06 	bl	801a374 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	b29a      	uxth	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011770:	2300      	movs	r3, #0
  }
}
 8011772:	4618      	mov	r0, r3
 8011774:	3710      	adds	r7, #16
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	0801c864 	.word	0x0801c864
 8011780:	0801cac0 	.word	0x0801cac0
 8011784:	0801c8a8 	.word	0x0801c8a8
 8011788:	0801cae4 	.word	0x0801cae4

0801178c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d107      	bne.n	80117ae <tcp_recved+0x22>
 801179e:	4b1f      	ldr	r3, [pc, #124]	; (801181c <tcp_recved+0x90>)
 80117a0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80117a4:	491e      	ldr	r1, [pc, #120]	; (8011820 <tcp_recved+0x94>)
 80117a6:	481f      	ldr	r0, [pc, #124]	; (8011824 <tcp_recved+0x98>)
 80117a8:	f008 fde4 	bl	801a374 <iprintf>
 80117ac:	e032      	b.n	8011814 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	7d1b      	ldrb	r3, [r3, #20]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d106      	bne.n	80117c4 <tcp_recved+0x38>
 80117b6:	4b19      	ldr	r3, [pc, #100]	; (801181c <tcp_recved+0x90>)
 80117b8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80117bc:	491a      	ldr	r1, [pc, #104]	; (8011828 <tcp_recved+0x9c>)
 80117be:	4819      	ldr	r0, [pc, #100]	; (8011824 <tcp_recved+0x98>)
 80117c0:	f008 fdd8 	bl	801a374 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80117c8:	887b      	ldrh	r3, [r7, #2]
 80117ca:	4413      	add	r3, r2
 80117cc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80117ce:	89fb      	ldrh	r3, [r7, #14]
 80117d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80117d4:	d804      	bhi.n	80117e0 <tcp_recved+0x54>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117da:	89fa      	ldrh	r2, [r7, #14]
 80117dc:	429a      	cmp	r2, r3
 80117de:	d204      	bcs.n	80117ea <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80117e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80117e8:	e002      	b.n	80117f0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	89fa      	ldrh	r2, [r7, #14]
 80117ee:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80117f0:	6878      	ldr	r0, [r7, #4]
 80117f2:	f7ff ff71 	bl	80116d8 <tcp_update_rcv_ann_wnd>
 80117f6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80117f8:	68bb      	ldr	r3, [r7, #8]
 80117fa:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80117fe:	d309      	bcc.n	8011814 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	8b5b      	ldrh	r3, [r3, #26]
 8011804:	f043 0302 	orr.w	r3, r3, #2
 8011808:	b29a      	uxth	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f004 fbae 	bl	8015f70 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011814:	3710      	adds	r7, #16
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	0801c864 	.word	0x0801c864
 8011820:	0801cb00 	.word	0x0801cb00
 8011824:	0801c8a8 	.word	0x0801c8a8
 8011828:	0801cb18 	.word	0x0801cb18

0801182c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011832:	2300      	movs	r3, #0
 8011834:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8011836:	4b1e      	ldr	r3, [pc, #120]	; (80118b0 <tcp_new_port+0x84>)
 8011838:	881b      	ldrh	r3, [r3, #0]
 801183a:	3301      	adds	r3, #1
 801183c:	b29a      	uxth	r2, r3
 801183e:	4b1c      	ldr	r3, [pc, #112]	; (80118b0 <tcp_new_port+0x84>)
 8011840:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011842:	4b1b      	ldr	r3, [pc, #108]	; (80118b0 <tcp_new_port+0x84>)
 8011844:	881b      	ldrh	r3, [r3, #0]
 8011846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801184a:	4293      	cmp	r3, r2
 801184c:	d103      	bne.n	8011856 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801184e:	4b18      	ldr	r3, [pc, #96]	; (80118b0 <tcp_new_port+0x84>)
 8011850:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011854:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011856:	2300      	movs	r3, #0
 8011858:	71fb      	strb	r3, [r7, #7]
 801185a:	e01e      	b.n	801189a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801185c:	79fb      	ldrb	r3, [r7, #7]
 801185e:	4a15      	ldr	r2, [pc, #84]	; (80118b4 <tcp_new_port+0x88>)
 8011860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	603b      	str	r3, [r7, #0]
 8011868:	e011      	b.n	801188e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	8ada      	ldrh	r2, [r3, #22]
 801186e:	4b10      	ldr	r3, [pc, #64]	; (80118b0 <tcp_new_port+0x84>)
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	429a      	cmp	r2, r3
 8011874:	d108      	bne.n	8011888 <tcp_new_port+0x5c>
        n++;
 8011876:	88bb      	ldrh	r3, [r7, #4]
 8011878:	3301      	adds	r3, #1
 801187a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801187c:	88bb      	ldrh	r3, [r7, #4]
 801187e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011882:	d3d8      	bcc.n	8011836 <tcp_new_port+0xa>
          return 0;
 8011884:	2300      	movs	r3, #0
 8011886:	e00d      	b.n	80118a4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	603b      	str	r3, [r7, #0]
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1ea      	bne.n	801186a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011894:	79fb      	ldrb	r3, [r7, #7]
 8011896:	3301      	adds	r3, #1
 8011898:	71fb      	strb	r3, [r7, #7]
 801189a:	79fb      	ldrb	r3, [r7, #7]
 801189c:	2b03      	cmp	r3, #3
 801189e:	d9dd      	bls.n	801185c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80118a0:	4b03      	ldr	r3, [pc, #12]	; (80118b0 <tcp_new_port+0x84>)
 80118a2:	881b      	ldrh	r3, [r3, #0]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	370c      	adds	r7, #12
 80118a8:	46bd      	mov	sp, r7
 80118aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ae:	4770      	bx	lr
 80118b0:	20001a50 	.word	0x20001a50
 80118b4:	0801e8ac 	.word	0x0801e8ac

080118b8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80118b8:	b5b0      	push	{r4, r5, r7, lr}
 80118ba:	b090      	sub	sp, #64	; 0x40
 80118bc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80118be:	2300      	movs	r3, #0
 80118c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80118c4:	4b94      	ldr	r3, [pc, #592]	; (8011b18 <tcp_slowtmr+0x260>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	3301      	adds	r3, #1
 80118ca:	4a93      	ldr	r2, [pc, #588]	; (8011b18 <tcp_slowtmr+0x260>)
 80118cc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80118ce:	4b93      	ldr	r3, [pc, #588]	; (8011b1c <tcp_slowtmr+0x264>)
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	3301      	adds	r3, #1
 80118d4:	b2da      	uxtb	r2, r3
 80118d6:	4b91      	ldr	r3, [pc, #580]	; (8011b1c <tcp_slowtmr+0x264>)
 80118d8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80118da:	2300      	movs	r3, #0
 80118dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80118de:	4b90      	ldr	r3, [pc, #576]	; (8011b20 <tcp_slowtmr+0x268>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80118e4:	e29d      	b.n	8011e22 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80118e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e8:	7d1b      	ldrb	r3, [r3, #20]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d106      	bne.n	80118fc <tcp_slowtmr+0x44>
 80118ee:	4b8d      	ldr	r3, [pc, #564]	; (8011b24 <tcp_slowtmr+0x26c>)
 80118f0:	f240 42be 	movw	r2, #1214	; 0x4be
 80118f4:	498c      	ldr	r1, [pc, #560]	; (8011b28 <tcp_slowtmr+0x270>)
 80118f6:	488d      	ldr	r0, [pc, #564]	; (8011b2c <tcp_slowtmr+0x274>)
 80118f8:	f008 fd3c 	bl	801a374 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80118fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fe:	7d1b      	ldrb	r3, [r3, #20]
 8011900:	2b01      	cmp	r3, #1
 8011902:	d106      	bne.n	8011912 <tcp_slowtmr+0x5a>
 8011904:	4b87      	ldr	r3, [pc, #540]	; (8011b24 <tcp_slowtmr+0x26c>)
 8011906:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801190a:	4989      	ldr	r1, [pc, #548]	; (8011b30 <tcp_slowtmr+0x278>)
 801190c:	4887      	ldr	r0, [pc, #540]	; (8011b2c <tcp_slowtmr+0x274>)
 801190e:	f008 fd31 	bl	801a374 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011914:	7d1b      	ldrb	r3, [r3, #20]
 8011916:	2b0a      	cmp	r3, #10
 8011918:	d106      	bne.n	8011928 <tcp_slowtmr+0x70>
 801191a:	4b82      	ldr	r3, [pc, #520]	; (8011b24 <tcp_slowtmr+0x26c>)
 801191c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011920:	4984      	ldr	r1, [pc, #528]	; (8011b34 <tcp_slowtmr+0x27c>)
 8011922:	4882      	ldr	r0, [pc, #520]	; (8011b2c <tcp_slowtmr+0x274>)
 8011924:	f008 fd26 	bl	801a374 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192a:	7f9a      	ldrb	r2, [r3, #30]
 801192c:	4b7b      	ldr	r3, [pc, #492]	; (8011b1c <tcp_slowtmr+0x264>)
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	429a      	cmp	r2, r3
 8011932:	d105      	bne.n	8011940 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193a:	68db      	ldr	r3, [r3, #12]
 801193c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801193e:	e270      	b.n	8011e22 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011940:	4b76      	ldr	r3, [pc, #472]	; (8011b1c <tcp_slowtmr+0x264>)
 8011942:	781a      	ldrb	r2, [r3, #0]
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011948:	2300      	movs	r3, #0
 801194a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801194e:	2300      	movs	r3, #0
 8011950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	7d1b      	ldrb	r3, [r3, #20]
 8011958:	2b02      	cmp	r3, #2
 801195a:	d10a      	bne.n	8011972 <tcp_slowtmr+0xba>
 801195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011962:	2b05      	cmp	r3, #5
 8011964:	d905      	bls.n	8011972 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801196a:	3301      	adds	r3, #1
 801196c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011970:	e11e      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011978:	2b0b      	cmp	r3, #11
 801197a:	d905      	bls.n	8011988 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801197c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011980:	3301      	adds	r3, #1
 8011982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011986:	e113      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801198e:	2b00      	cmp	r3, #0
 8011990:	d075      	beq.n	8011a7e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011996:	2b00      	cmp	r3, #0
 8011998:	d006      	beq.n	80119a8 <tcp_slowtmr+0xf0>
 801199a:	4b62      	ldr	r3, [pc, #392]	; (8011b24 <tcp_slowtmr+0x26c>)
 801199c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80119a0:	4965      	ldr	r1, [pc, #404]	; (8011b38 <tcp_slowtmr+0x280>)
 80119a2:	4862      	ldr	r0, [pc, #392]	; (8011b2c <tcp_slowtmr+0x274>)
 80119a4:	f008 fce6 	bl	801a374 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80119a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d106      	bne.n	80119be <tcp_slowtmr+0x106>
 80119b0:	4b5c      	ldr	r3, [pc, #368]	; (8011b24 <tcp_slowtmr+0x26c>)
 80119b2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80119b6:	4961      	ldr	r1, [pc, #388]	; (8011b3c <tcp_slowtmr+0x284>)
 80119b8:	485c      	ldr	r0, [pc, #368]	; (8011b2c <tcp_slowtmr+0x274>)
 80119ba:	f008 fcdb 	bl	801a374 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80119c4:	2b0b      	cmp	r3, #11
 80119c6:	d905      	bls.n	80119d4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80119c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119cc:	3301      	adds	r3, #1
 80119ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80119d2:	e0ed      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80119d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80119da:	3b01      	subs	r3, #1
 80119dc:	4a58      	ldr	r2, [pc, #352]	; (8011b40 <tcp_slowtmr+0x288>)
 80119de:	5cd3      	ldrb	r3, [r2, r3]
 80119e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80119e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119e8:	7c7a      	ldrb	r2, [r7, #17]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d907      	bls.n	80119fe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80119ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80119f4:	3301      	adds	r3, #1
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80119fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a00:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011a04:	7c7a      	ldrb	r2, [r7, #17]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	f200 80d2 	bhi.w	8011bb0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d108      	bne.n	8011a2c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a1c:	f005 f950 	bl	8016cc0 <tcp_zero_window_probe>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d014      	beq.n	8011a50 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011a26:	2300      	movs	r3, #0
 8011a28:	623b      	str	r3, [r7, #32]
 8011a2a:	e011      	b.n	8011a50 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a32:	4619      	mov	r1, r3
 8011a34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a36:	f004 f815 	bl	8015a64 <tcp_split_unsent_seg>
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d107      	bne.n	8011a50 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a42:	f004 fa95 	bl	8015f70 <tcp_output>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d101      	bne.n	8011a50 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011a50:	6a3b      	ldr	r3, [r7, #32]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f000 80ac 	beq.w	8011bb0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a66:	2b06      	cmp	r3, #6
 8011a68:	f200 80a2 	bhi.w	8011bb0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a72:	3301      	adds	r3, #1
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011a7c:	e098      	b.n	8011bb0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	db0f      	blt.n	8011aa8 <tcp_slowtmr+0x1f0>
 8011a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a8e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011a92:	4293      	cmp	r3, r2
 8011a94:	d008      	beq.n	8011aa8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	3301      	adds	r3, #1
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	b21a      	sxth	r2, r3
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	db7b      	blt.n	8011bb0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aba:	f004 fd4b 	bl	8016554 <tcp_rexmit_rto_prepare>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d007      	beq.n	8011ad4 <tcp_slowtmr+0x21c>
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d171      	bne.n	8011bb0 <tcp_slowtmr+0x2f8>
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d06d      	beq.n	8011bb0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad6:	7d1b      	ldrb	r3, [r3, #20]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d03a      	beq.n	8011b52 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ae2:	2b0c      	cmp	r3, #12
 8011ae4:	bf28      	it	cs
 8011ae6:	230c      	movcs	r3, #12
 8011ae8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011af0:	10db      	asrs	r3, r3, #3
 8011af2:	b21b      	sxth	r3, r3
 8011af4:	461a      	mov	r2, r3
 8011af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011afc:	4413      	add	r3, r2
 8011afe:	7efa      	ldrb	r2, [r7, #27]
 8011b00:	4910      	ldr	r1, [pc, #64]	; (8011b44 <tcp_slowtmr+0x28c>)
 8011b02:	5c8a      	ldrb	r2, [r1, r2]
 8011b04:	4093      	lsls	r3, r2
 8011b06:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	dc1a      	bgt.n	8011b48 <tcp_slowtmr+0x290>
 8011b12:	697b      	ldr	r3, [r7, #20]
 8011b14:	b21a      	sxth	r2, r3
 8011b16:	e019      	b.n	8011b4c <tcp_slowtmr+0x294>
 8011b18:	2004f5d0 	.word	0x2004f5d0
 8011b1c:	2004f5e6 	.word	0x2004f5e6
 8011b20:	2004f5dc 	.word	0x2004f5dc
 8011b24:	0801c864 	.word	0x0801c864
 8011b28:	0801cba8 	.word	0x0801cba8
 8011b2c:	0801c8a8 	.word	0x0801c8a8
 8011b30:	0801cbd4 	.word	0x0801cbd4
 8011b34:	0801cc00 	.word	0x0801cc00
 8011b38:	0801cc30 	.word	0x0801cc30
 8011b3c:	0801cc64 	.word	0x0801cc64
 8011b40:	0801e8a4 	.word	0x0801e8a4
 8011b44:	0801e894 	.word	0x0801e894
 8011b48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b54:	2200      	movs	r2, #0
 8011b56:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011b64:	4293      	cmp	r3, r2
 8011b66:	bf28      	it	cs
 8011b68:	4613      	movcs	r3, r2
 8011b6a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011b6c:	8a7b      	ldrh	r3, [r7, #18]
 8011b6e:	085b      	lsrs	r3, r3, #1
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b7a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b82:	005b      	lsls	r3, r3, #1
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d206      	bcs.n	8011b98 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8011b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b8e:	005b      	lsls	r3, r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bac:	f004 fd42 	bl	8016634 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	2b06      	cmp	r3, #6
 8011bb6:	d111      	bne.n	8011bdc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	f003 0310 	and.w	r3, r3, #16
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d00b      	beq.n	8011bdc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bc4:	4b9c      	ldr	r3, [pc, #624]	; (8011e38 <tcp_slowtmr+0x580>)
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	6a1b      	ldr	r3, [r3, #32]
 8011bcc:	1ad3      	subs	r3, r2, r3
 8011bce:	2b28      	cmp	r3, #40	; 0x28
 8011bd0:	d904      	bls.n	8011bdc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bd6:	3301      	adds	r3, #1
 8011bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bde:	7a5b      	ldrb	r3, [r3, #9]
 8011be0:	f003 0308 	and.w	r3, r3, #8
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d04a      	beq.n	8011c7e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011bec:	2b04      	cmp	r3, #4
 8011bee:	d003      	beq.n	8011bf8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011bf4:	2b07      	cmp	r3, #7
 8011bf6:	d142      	bne.n	8011c7e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011bf8:	4b8f      	ldr	r3, [pc, #572]	; (8011e38 <tcp_slowtmr+0x580>)
 8011bfa:	681a      	ldr	r2, [r3, #0]
 8011bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bfe:	6a1b      	ldr	r3, [r3, #32]
 8011c00:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c04:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011c08:	4b8c      	ldr	r3, [pc, #560]	; (8011e3c <tcp_slowtmr+0x584>)
 8011c0a:	440b      	add	r3, r1
 8011c0c:	498c      	ldr	r1, [pc, #560]	; (8011e40 <tcp_slowtmr+0x588>)
 8011c0e:	fba1 1303 	umull	r1, r3, r1, r3
 8011c12:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d90a      	bls.n	8011c2e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c1c:	3301      	adds	r3, #1
 8011c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011c22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011c26:	3301      	adds	r3, #1
 8011c28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011c2c:	e027      	b.n	8011c7e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c2e:	4b82      	ldr	r3, [pc, #520]	; (8011e38 <tcp_slowtmr+0x580>)
 8011c30:	681a      	ldr	r2, [r3, #0]
 8011c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c34:	6a1b      	ldr	r3, [r3, #32]
 8011c36:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c40:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011c44:	4618      	mov	r0, r3
 8011c46:	4b7f      	ldr	r3, [pc, #508]	; (8011e44 <tcp_slowtmr+0x58c>)
 8011c48:	fb00 f303 	mul.w	r3, r0, r3
 8011c4c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011c4e:	497c      	ldr	r1, [pc, #496]	; (8011e40 <tcp_slowtmr+0x588>)
 8011c50:	fba1 1303 	umull	r1, r3, r1, r3
 8011c54:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d911      	bls.n	8011c7e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c5c:	f004 fff0 	bl	8016c40 <tcp_keepalive>
 8011c60:	4603      	mov	r3, r0
 8011c62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011c66:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d107      	bne.n	8011c7e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c70:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011c74:	3301      	adds	r3, #1
 8011c76:	b2da      	uxtb	r2, r3
 8011c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d011      	beq.n	8011caa <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011c86:	4b6c      	ldr	r3, [pc, #432]	; (8011e38 <tcp_slowtmr+0x580>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	6a1b      	ldr	r3, [r3, #32]
 8011c8e:	1ad2      	subs	r2, r2, r3
 8011c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c92:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011c96:	4619      	mov	r1, r3
 8011c98:	460b      	mov	r3, r1
 8011c9a:	005b      	lsls	r3, r3, #1
 8011c9c:	440b      	add	r3, r1
 8011c9e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d302      	bcc.n	8011caa <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011ca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ca6:	f000 feab 	bl	8012a00 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cac:	7d1b      	ldrb	r3, [r3, #20]
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d10b      	bne.n	8011cca <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011cb2:	4b61      	ldr	r3, [pc, #388]	; (8011e38 <tcp_slowtmr+0x580>)
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cb8:	6a1b      	ldr	r3, [r3, #32]
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	2b28      	cmp	r3, #40	; 0x28
 8011cbe:	d904      	bls.n	8011cca <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ccc:	7d1b      	ldrb	r3, [r3, #20]
 8011cce:	2b09      	cmp	r3, #9
 8011cd0:	d10b      	bne.n	8011cea <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011cd2:	4b59      	ldr	r3, [pc, #356]	; (8011e38 <tcp_slowtmr+0x580>)
 8011cd4:	681a      	ldr	r2, [r3, #0]
 8011cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd8:	6a1b      	ldr	r3, [r3, #32]
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	2bf0      	cmp	r3, #240	; 0xf0
 8011cde:	d904      	bls.n	8011cea <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d060      	beq.n	8011db4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cf8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cfc:	f000 fccc 	bl	8012698 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d010      	beq.n	8011d28 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011d06:	4b50      	ldr	r3, [pc, #320]	; (8011e48 <tcp_slowtmr+0x590>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d106      	bne.n	8011d1e <tcp_slowtmr+0x466>
 8011d10:	4b4e      	ldr	r3, [pc, #312]	; (8011e4c <tcp_slowtmr+0x594>)
 8011d12:	f240 526d 	movw	r2, #1389	; 0x56d
 8011d16:	494e      	ldr	r1, [pc, #312]	; (8011e50 <tcp_slowtmr+0x598>)
 8011d18:	484e      	ldr	r0, [pc, #312]	; (8011e54 <tcp_slowtmr+0x59c>)
 8011d1a:	f008 fb2b 	bl	801a374 <iprintf>
        prev->next = pcb->next;
 8011d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d20:	68da      	ldr	r2, [r3, #12]
 8011d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d24:	60da      	str	r2, [r3, #12]
 8011d26:	e00f      	b.n	8011d48 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011d28:	4b47      	ldr	r3, [pc, #284]	; (8011e48 <tcp_slowtmr+0x590>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d006      	beq.n	8011d40 <tcp_slowtmr+0x488>
 8011d32:	4b46      	ldr	r3, [pc, #280]	; (8011e4c <tcp_slowtmr+0x594>)
 8011d34:	f240 5271 	movw	r2, #1393	; 0x571
 8011d38:	4947      	ldr	r1, [pc, #284]	; (8011e58 <tcp_slowtmr+0x5a0>)
 8011d3a:	4846      	ldr	r0, [pc, #280]	; (8011e54 <tcp_slowtmr+0x59c>)
 8011d3c:	f008 fb1a 	bl	801a374 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	4a40      	ldr	r2, [pc, #256]	; (8011e48 <tcp_slowtmr+0x590>)
 8011d46:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011d48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d013      	beq.n	8011d78 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d52:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d56:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011d58:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d60:	8ad2      	ldrh	r2, [r2, #22]
 8011d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011d64:	8b09      	ldrh	r1, [r1, #24]
 8011d66:	9102      	str	r1, [sp, #8]
 8011d68:	9201      	str	r2, [sp, #4]
 8011d6a:	9300      	str	r3, [sp, #0]
 8011d6c:	462b      	mov	r3, r5
 8011d6e:	4622      	mov	r2, r4
 8011d70:	4601      	mov	r1, r0
 8011d72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d74:	f004 feb0 	bl	8016ad8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d80:	7d1b      	ldrb	r3, [r3, #20]
 8011d82:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d8a:	68db      	ldr	r3, [r3, #12]
 8011d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d8e:	6838      	ldr	r0, [r7, #0]
 8011d90:	f7fe fff0 	bl	8010d74 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011d94:	4b31      	ldr	r3, [pc, #196]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011d96:	2200      	movs	r2, #0
 8011d98:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d004      	beq.n	8011daa <tcp_slowtmr+0x4f2>
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f06f 010c 	mvn.w	r1, #12
 8011da6:	68b8      	ldr	r0, [r7, #8]
 8011da8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011daa:	4b2c      	ldr	r3, [pc, #176]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d037      	beq.n	8011e22 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011db2:	e592      	b.n	80118da <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011db6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	68db      	ldr	r3, [r3, #12]
 8011dbc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc0:	7f1b      	ldrb	r3, [r3, #28]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	b2da      	uxtb	r2, r3
 8011dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dcc:	7f1a      	ldrb	r2, [r3, #28]
 8011dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd0:	7f5b      	ldrb	r3, [r3, #29]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d325      	bcc.n	8011e22 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd8:	2200      	movs	r2, #0
 8011dda:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011ddc:	4b1f      	ldr	r3, [pc, #124]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00b      	beq.n	8011e04 <tcp_slowtmr+0x54c>
 8011dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011df4:	6912      	ldr	r2, [r2, #16]
 8011df6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011df8:	4610      	mov	r0, r2
 8011dfa:	4798      	blx	r3
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011e02:	e002      	b.n	8011e0a <tcp_slowtmr+0x552>
 8011e04:	2300      	movs	r3, #0
 8011e06:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011e0a:	4b14      	ldr	r3, [pc, #80]	; (8011e5c <tcp_slowtmr+0x5a4>)
 8011e0c:	781b      	ldrb	r3, [r3, #0]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d000      	beq.n	8011e14 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011e12:	e562      	b.n	80118da <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011e14:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d102      	bne.n	8011e22 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e1e:	f004 f8a7 	bl	8015f70 <tcp_output>
  while (pcb != NULL) {
 8011e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	f47f ad5e 	bne.w	80118e6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011e2e:	4b0c      	ldr	r3, [pc, #48]	; (8011e60 <tcp_slowtmr+0x5a8>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011e34:	e069      	b.n	8011f0a <tcp_slowtmr+0x652>
 8011e36:	bf00      	nop
 8011e38:	2004f5d0 	.word	0x2004f5d0
 8011e3c:	000a4cb8 	.word	0x000a4cb8
 8011e40:	10624dd3 	.word	0x10624dd3
 8011e44:	000124f8 	.word	0x000124f8
 8011e48:	2004f5dc 	.word	0x2004f5dc
 8011e4c:	0801c864 	.word	0x0801c864
 8011e50:	0801cc9c 	.word	0x0801cc9c
 8011e54:	0801c8a8 	.word	0x0801c8a8
 8011e58:	0801ccc8 	.word	0x0801ccc8
 8011e5c:	2004f5e4 	.word	0x2004f5e4
 8011e60:	2004f5e0 	.word	0x2004f5e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e66:	7d1b      	ldrb	r3, [r3, #20]
 8011e68:	2b0a      	cmp	r3, #10
 8011e6a:	d006      	beq.n	8011e7a <tcp_slowtmr+0x5c2>
 8011e6c:	4b2b      	ldr	r3, [pc, #172]	; (8011f1c <tcp_slowtmr+0x664>)
 8011e6e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011e72:	492b      	ldr	r1, [pc, #172]	; (8011f20 <tcp_slowtmr+0x668>)
 8011e74:	482b      	ldr	r0, [pc, #172]	; (8011f24 <tcp_slowtmr+0x66c>)
 8011e76:	f008 fa7d 	bl	801a374 <iprintf>
    pcb_remove = 0;
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011e80:	4b29      	ldr	r3, [pc, #164]	; (8011f28 <tcp_slowtmr+0x670>)
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	6a1b      	ldr	r3, [r3, #32]
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	2bf0      	cmp	r3, #240	; 0xf0
 8011e8c:	d904      	bls.n	8011e98 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e92:	3301      	adds	r3, #1
 8011e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d02f      	beq.n	8011f00 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ea2:	f000 fbf9 	bl	8012698 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d010      	beq.n	8011ece <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011eac:	4b1f      	ldr	r3, [pc, #124]	; (8011f2c <tcp_slowtmr+0x674>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d106      	bne.n	8011ec4 <tcp_slowtmr+0x60c>
 8011eb6:	4b19      	ldr	r3, [pc, #100]	; (8011f1c <tcp_slowtmr+0x664>)
 8011eb8:	f240 52af 	movw	r2, #1455	; 0x5af
 8011ebc:	491c      	ldr	r1, [pc, #112]	; (8011f30 <tcp_slowtmr+0x678>)
 8011ebe:	4819      	ldr	r0, [pc, #100]	; (8011f24 <tcp_slowtmr+0x66c>)
 8011ec0:	f008 fa58 	bl	801a374 <iprintf>
        prev->next = pcb->next;
 8011ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec6:	68da      	ldr	r2, [r3, #12]
 8011ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eca:	60da      	str	r2, [r3, #12]
 8011ecc:	e00f      	b.n	8011eee <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011ece:	4b17      	ldr	r3, [pc, #92]	; (8011f2c <tcp_slowtmr+0x674>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed4:	429a      	cmp	r2, r3
 8011ed6:	d006      	beq.n	8011ee6 <tcp_slowtmr+0x62e>
 8011ed8:	4b10      	ldr	r3, [pc, #64]	; (8011f1c <tcp_slowtmr+0x664>)
 8011eda:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011ede:	4915      	ldr	r1, [pc, #84]	; (8011f34 <tcp_slowtmr+0x67c>)
 8011ee0:	4810      	ldr	r0, [pc, #64]	; (8011f24 <tcp_slowtmr+0x66c>)
 8011ee2:	f008 fa47 	bl	801a374 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	4a10      	ldr	r2, [pc, #64]	; (8011f2c <tcp_slowtmr+0x674>)
 8011eec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011ef8:	69f8      	ldr	r0, [r7, #28]
 8011efa:	f7fe ff3b 	bl	8010d74 <tcp_free>
 8011efe:	e004      	b.n	8011f0a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f02:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	68db      	ldr	r3, [r3, #12]
 8011f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d1a9      	bne.n	8011e64 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011f10:	bf00      	nop
 8011f12:	bf00      	nop
 8011f14:	3730      	adds	r7, #48	; 0x30
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bdb0      	pop	{r4, r5, r7, pc}
 8011f1a:	bf00      	nop
 8011f1c:	0801c864 	.word	0x0801c864
 8011f20:	0801ccf4 	.word	0x0801ccf4
 8011f24:	0801c8a8 	.word	0x0801c8a8
 8011f28:	2004f5d0 	.word	0x2004f5d0
 8011f2c:	2004f5e0 	.word	0x2004f5e0
 8011f30:	0801cd24 	.word	0x0801cd24
 8011f34:	0801cd4c 	.word	0x0801cd4c

08011f38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011f3e:	4b2d      	ldr	r3, [pc, #180]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	3301      	adds	r3, #1
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	4b2b      	ldr	r3, [pc, #172]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011f4a:	4b2b      	ldr	r3, [pc, #172]	; (8011ff8 <tcp_fasttmr+0xc0>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f50:	e048      	b.n	8011fe4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	7f9a      	ldrb	r2, [r3, #30]
 8011f56:	4b27      	ldr	r3, [pc, #156]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	429a      	cmp	r2, r3
 8011f5c:	d03f      	beq.n	8011fde <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011f5e:	4b25      	ldr	r3, [pc, #148]	; (8011ff4 <tcp_fasttmr+0xbc>)
 8011f60:	781a      	ldrb	r2, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	8b5b      	ldrh	r3, [r3, #26]
 8011f6a:	f003 0301 	and.w	r3, r3, #1
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d010      	beq.n	8011f94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	8b5b      	ldrh	r3, [r3, #26]
 8011f76:	f043 0302 	orr.w	r3, r3, #2
 8011f7a:	b29a      	uxth	r2, r3
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f003 fff5 	bl	8015f70 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	8b5b      	ldrh	r3, [r3, #26]
 8011f8a:	f023 0303 	bic.w	r3, r3, #3
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	8b5b      	ldrh	r3, [r3, #26]
 8011f98:	f003 0308 	and.w	r3, r3, #8
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d009      	beq.n	8011fb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	8b5b      	ldrh	r3, [r3, #26]
 8011fa4:	f023 0308 	bic.w	r3, r3, #8
 8011fa8:	b29a      	uxth	r2, r3
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011fae:	6878      	ldr	r0, [r7, #4]
 8011fb0:	f7ff f874 	bl	801109c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	68db      	ldr	r3, [r3, #12]
 8011fb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d00a      	beq.n	8011fd8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011fc2:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <tcp_fasttmr+0xc4>)
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f819 	bl	8012000 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011fce:	4b0b      	ldr	r3, [pc, #44]	; (8011ffc <tcp_fasttmr+0xc4>)
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d000      	beq.n	8011fd8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011fd6:	e7b8      	b.n	8011f4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	607b      	str	r3, [r7, #4]
 8011fdc:	e002      	b.n	8011fe4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1b3      	bne.n	8011f52 <tcp_fasttmr+0x1a>
    }
  }
}
 8011fea:	bf00      	nop
 8011fec:	bf00      	nop
 8011fee:	3708      	adds	r7, #8
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	2004f5e6 	.word	0x2004f5e6
 8011ff8:	2004f5dc 	.word	0x2004f5dc
 8011ffc:	2004f5e4 	.word	0x2004f5e4

08012000 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012000:	b590      	push	{r4, r7, lr}
 8012002:	b085      	sub	sp, #20
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d109      	bne.n	8012022 <tcp_process_refused_data+0x22>
 801200e:	4b37      	ldr	r3, [pc, #220]	; (80120ec <tcp_process_refused_data+0xec>)
 8012010:	f240 6209 	movw	r2, #1545	; 0x609
 8012014:	4936      	ldr	r1, [pc, #216]	; (80120f0 <tcp_process_refused_data+0xf0>)
 8012016:	4837      	ldr	r0, [pc, #220]	; (80120f4 <tcp_process_refused_data+0xf4>)
 8012018:	f008 f9ac 	bl	801a374 <iprintf>
 801201c:	f06f 030f 	mvn.w	r3, #15
 8012020:	e060      	b.n	80120e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012026:	7b5b      	ldrb	r3, [r3, #13]
 8012028:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801202e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2200      	movs	r2, #0
 8012034:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801203c:	2b00      	cmp	r3, #0
 801203e:	d00b      	beq.n	8012058 <tcp_process_refused_data+0x58>
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6918      	ldr	r0, [r3, #16]
 801204a:	2300      	movs	r3, #0
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	6879      	ldr	r1, [r7, #4]
 8012050:	47a0      	blx	r4
 8012052:	4603      	mov	r3, r0
 8012054:	73fb      	strb	r3, [r7, #15]
 8012056:	e007      	b.n	8012068 <tcp_process_refused_data+0x68>
 8012058:	2300      	movs	r3, #0
 801205a:	68ba      	ldr	r2, [r7, #8]
 801205c:	6879      	ldr	r1, [r7, #4]
 801205e:	2000      	movs	r0, #0
 8012060:	f000 f8a4 	bl	80121ac <tcp_recv_null>
 8012064:	4603      	mov	r3, r0
 8012066:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d12a      	bne.n	80120c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012070:	7bbb      	ldrb	r3, [r7, #14]
 8012072:	f003 0320 	and.w	r3, r3, #32
 8012076:	2b00      	cmp	r3, #0
 8012078:	d033      	beq.n	80120e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801207e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012082:	d005      	beq.n	8012090 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012088:	3301      	adds	r3, #1
 801208a:	b29a      	uxth	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012096:	2b00      	cmp	r3, #0
 8012098:	d00b      	beq.n	80120b2 <tcp_process_refused_data+0xb2>
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6918      	ldr	r0, [r3, #16]
 80120a4:	2300      	movs	r3, #0
 80120a6:	2200      	movs	r2, #0
 80120a8:	6879      	ldr	r1, [r7, #4]
 80120aa:	47a0      	blx	r4
 80120ac:	4603      	mov	r3, r0
 80120ae:	73fb      	strb	r3, [r7, #15]
 80120b0:	e001      	b.n	80120b6 <tcp_process_refused_data+0xb6>
 80120b2:	2300      	movs	r3, #0
 80120b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80120b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ba:	f113 0f0d 	cmn.w	r3, #13
 80120be:	d110      	bne.n	80120e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80120c0:	f06f 030c 	mvn.w	r3, #12
 80120c4:	e00e      	b.n	80120e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80120c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ca:	f113 0f0d 	cmn.w	r3, #13
 80120ce:	d102      	bne.n	80120d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80120d0:	f06f 030c 	mvn.w	r3, #12
 80120d4:	e006      	b.n	80120e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	68ba      	ldr	r2, [r7, #8]
 80120da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80120dc:	f06f 0304 	mvn.w	r3, #4
 80120e0:	e000      	b.n	80120e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3714      	adds	r7, #20
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd90      	pop	{r4, r7, pc}
 80120ec:	0801c864 	.word	0x0801c864
 80120f0:	0801cd74 	.word	0x0801cd74
 80120f4:	0801c8a8 	.word	0x0801c8a8

080120f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b084      	sub	sp, #16
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012100:	e007      	b.n	8012112 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 f80a 	bl	8012122 <tcp_seg_free>
    seg = next;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1f4      	bne.n	8012102 <tcp_segs_free+0xa>
  }
}
 8012118:	bf00      	nop
 801211a:	bf00      	nop
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b082      	sub	sp, #8
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d00c      	beq.n	801214a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d004      	beq.n	8012142 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	685b      	ldr	r3, [r3, #4]
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe fb6d 	bl	801081c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012142:	6879      	ldr	r1, [r7, #4]
 8012144:	2003      	movs	r0, #3
 8012146:	f7fd fcc5 	bl	800fad4 <memp_free>
  }
}
 801214a:	bf00      	nop
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
	...

08012154 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b084      	sub	sp, #16
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d106      	bne.n	8012170 <tcp_seg_copy+0x1c>
 8012162:	4b0f      	ldr	r3, [pc, #60]	; (80121a0 <tcp_seg_copy+0x4c>)
 8012164:	f240 6282 	movw	r2, #1666	; 0x682
 8012168:	490e      	ldr	r1, [pc, #56]	; (80121a4 <tcp_seg_copy+0x50>)
 801216a:	480f      	ldr	r0, [pc, #60]	; (80121a8 <tcp_seg_copy+0x54>)
 801216c:	f008 f902 	bl	801a374 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012170:	2003      	movs	r0, #3
 8012172:	f7fd fc39 	bl	800f9e8 <memp_malloc>
 8012176:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d101      	bne.n	8012182 <tcp_seg_copy+0x2e>
    return NULL;
 801217e:	2300      	movs	r3, #0
 8012180:	e00a      	b.n	8012198 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012182:	2210      	movs	r2, #16
 8012184:	6879      	ldr	r1, [r7, #4]
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f008 f849 	bl	801a21e <memcpy>
  pbuf_ref(cseg->p);
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	4618      	mov	r0, r3
 8012192:	f7fe fbe9 	bl	8010968 <pbuf_ref>
  return cseg;
 8012196:	68fb      	ldr	r3, [r7, #12]
}
 8012198:	4618      	mov	r0, r3
 801219a:	3710      	adds	r7, #16
 801219c:	46bd      	mov	sp, r7
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	0801c864 	.word	0x0801c864
 80121a4:	0801cdb8 	.word	0x0801cdb8
 80121a8:	0801c8a8 	.word	0x0801c8a8

080121ac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	60f8      	str	r0, [r7, #12]
 80121b4:	60b9      	str	r1, [r7, #8]
 80121b6:	607a      	str	r2, [r7, #4]
 80121b8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d109      	bne.n	80121d4 <tcp_recv_null+0x28>
 80121c0:	4b12      	ldr	r3, [pc, #72]	; (801220c <tcp_recv_null+0x60>)
 80121c2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80121c6:	4912      	ldr	r1, [pc, #72]	; (8012210 <tcp_recv_null+0x64>)
 80121c8:	4812      	ldr	r0, [pc, #72]	; (8012214 <tcp_recv_null+0x68>)
 80121ca:	f008 f8d3 	bl	801a374 <iprintf>
 80121ce:	f06f 030f 	mvn.w	r3, #15
 80121d2:	e016      	b.n	8012202 <tcp_recv_null+0x56>

  if (p != NULL) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d009      	beq.n	80121ee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	891b      	ldrh	r3, [r3, #8]
 80121de:	4619      	mov	r1, r3
 80121e0:	68b8      	ldr	r0, [r7, #8]
 80121e2:	f7ff fad3 	bl	801178c <tcp_recved>
    pbuf_free(p);
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f7fe fb18 	bl	801081c <pbuf_free>
 80121ec:	e008      	b.n	8012200 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80121ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d104      	bne.n	8012200 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80121f6:	68b8      	ldr	r0, [r7, #8]
 80121f8:	f7fe ffba 	bl	8011170 <tcp_close>
 80121fc:	4603      	mov	r3, r0
 80121fe:	e000      	b.n	8012202 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012200:	2300      	movs	r3, #0
}
 8012202:	4618      	mov	r0, r3
 8012204:	3710      	adds	r7, #16
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	0801c864 	.word	0x0801c864
 8012210:	0801cdd4 	.word	0x0801cdd4
 8012214:	0801c8a8 	.word	0x0801c8a8

08012218 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	4603      	mov	r3, r0
 8012220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012226:	2b00      	cmp	r3, #0
 8012228:	db01      	blt.n	801222e <tcp_kill_prio+0x16>
 801222a:	79fb      	ldrb	r3, [r7, #7]
 801222c:	e000      	b.n	8012230 <tcp_kill_prio+0x18>
 801222e:	237f      	movs	r3, #127	; 0x7f
 8012230:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012232:	7afb      	ldrb	r3, [r7, #11]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d034      	beq.n	80122a2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012238:	7afb      	ldrb	r3, [r7, #11]
 801223a:	3b01      	subs	r3, #1
 801223c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801223e:	2300      	movs	r3, #0
 8012240:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012242:	2300      	movs	r3, #0
 8012244:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012246:	4b19      	ldr	r3, [pc, #100]	; (80122ac <tcp_kill_prio+0x94>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	617b      	str	r3, [r7, #20]
 801224c:	e01f      	b.n	801228e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	7d5b      	ldrb	r3, [r3, #21]
 8012252:	7afa      	ldrb	r2, [r7, #11]
 8012254:	429a      	cmp	r2, r3
 8012256:	d80c      	bhi.n	8012272 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801225c:	7afa      	ldrb	r2, [r7, #11]
 801225e:	429a      	cmp	r2, r3
 8012260:	d112      	bne.n	8012288 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012262:	4b13      	ldr	r3, [pc, #76]	; (80122b0 <tcp_kill_prio+0x98>)
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	697b      	ldr	r3, [r7, #20]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	1ad3      	subs	r3, r2, r3
 801226c:	68fa      	ldr	r2, [r7, #12]
 801226e:	429a      	cmp	r2, r3
 8012270:	d80a      	bhi.n	8012288 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012272:	4b0f      	ldr	r3, [pc, #60]	; (80122b0 <tcp_kill_prio+0x98>)
 8012274:	681a      	ldr	r2, [r3, #0]
 8012276:	697b      	ldr	r3, [r7, #20]
 8012278:	6a1b      	ldr	r3, [r3, #32]
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	7d5b      	ldrb	r3, [r3, #21]
 8012286:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	617b      	str	r3, [r7, #20]
 801228e:	697b      	ldr	r3, [r7, #20]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d1dc      	bne.n	801224e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d004      	beq.n	80122a4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801229a:	6938      	ldr	r0, [r7, #16]
 801229c:	f7ff f8ae 	bl	80113fc <tcp_abort>
 80122a0:	e000      	b.n	80122a4 <tcp_kill_prio+0x8c>
    return;
 80122a2:	bf00      	nop
  }
}
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	2004f5dc 	.word	0x2004f5dc
 80122b0:	2004f5d0 	.word	0x2004f5d0

080122b4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80122be:	79fb      	ldrb	r3, [r7, #7]
 80122c0:	2b08      	cmp	r3, #8
 80122c2:	d009      	beq.n	80122d8 <tcp_kill_state+0x24>
 80122c4:	79fb      	ldrb	r3, [r7, #7]
 80122c6:	2b09      	cmp	r3, #9
 80122c8:	d006      	beq.n	80122d8 <tcp_kill_state+0x24>
 80122ca:	4b1a      	ldr	r3, [pc, #104]	; (8012334 <tcp_kill_state+0x80>)
 80122cc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80122d0:	4919      	ldr	r1, [pc, #100]	; (8012338 <tcp_kill_state+0x84>)
 80122d2:	481a      	ldr	r0, [pc, #104]	; (801233c <tcp_kill_state+0x88>)
 80122d4:	f008 f84e 	bl	801a374 <iprintf>

  inactivity = 0;
 80122d8:	2300      	movs	r3, #0
 80122da:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80122dc:	2300      	movs	r3, #0
 80122de:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80122e0:	4b17      	ldr	r3, [pc, #92]	; (8012340 <tcp_kill_state+0x8c>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	617b      	str	r3, [r7, #20]
 80122e6:	e017      	b.n	8012318 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	7d1b      	ldrb	r3, [r3, #20]
 80122ec:	79fa      	ldrb	r2, [r7, #7]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d10f      	bne.n	8012312 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80122f2:	4b14      	ldr	r3, [pc, #80]	; (8012344 <tcp_kill_state+0x90>)
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	6a1b      	ldr	r3, [r3, #32]
 80122fa:	1ad3      	subs	r3, r2, r3
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d807      	bhi.n	8012312 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012302:	4b10      	ldr	r3, [pc, #64]	; (8012344 <tcp_kill_state+0x90>)
 8012304:	681a      	ldr	r2, [r3, #0]
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	6a1b      	ldr	r3, [r3, #32]
 801230a:	1ad3      	subs	r3, r2, r3
 801230c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	617b      	str	r3, [r7, #20]
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1e4      	bne.n	80122e8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d003      	beq.n	801232c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012324:	2100      	movs	r1, #0
 8012326:	6938      	ldr	r0, [r7, #16]
 8012328:	f7fe ffaa 	bl	8011280 <tcp_abandon>
  }
}
 801232c:	bf00      	nop
 801232e:	3718      	adds	r7, #24
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	0801c864 	.word	0x0801c864
 8012338:	0801cdf0 	.word	0x0801cdf0
 801233c:	0801c8a8 	.word	0x0801c8a8
 8012340:	2004f5dc 	.word	0x2004f5dc
 8012344:	2004f5d0 	.word	0x2004f5d0

08012348 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801234e:	2300      	movs	r3, #0
 8012350:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012352:	2300      	movs	r3, #0
 8012354:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012356:	4b12      	ldr	r3, [pc, #72]	; (80123a0 <tcp_kill_timewait+0x58>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	60fb      	str	r3, [r7, #12]
 801235c:	e012      	b.n	8012384 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801235e:	4b11      	ldr	r3, [pc, #68]	; (80123a4 <tcp_kill_timewait+0x5c>)
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	6a1b      	ldr	r3, [r3, #32]
 8012366:	1ad3      	subs	r3, r2, r3
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	429a      	cmp	r2, r3
 801236c:	d807      	bhi.n	801237e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801236e:	4b0d      	ldr	r3, [pc, #52]	; (80123a4 <tcp_kill_timewait+0x5c>)
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	6a1b      	ldr	r3, [r3, #32]
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	68db      	ldr	r3, [r3, #12]
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d1e9      	bne.n	801235e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d002      	beq.n	8012396 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012390:	68b8      	ldr	r0, [r7, #8]
 8012392:	f7ff f833 	bl	80113fc <tcp_abort>
  }
}
 8012396:	bf00      	nop
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	2004f5e0 	.word	0x2004f5e0
 80123a4:	2004f5d0 	.word	0x2004f5d0

080123a8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80123ae:	4b10      	ldr	r3, [pc, #64]	; (80123f0 <tcp_handle_closepend+0x48>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80123b4:	e014      	b.n	80123e0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	8b5b      	ldrh	r3, [r3, #26]
 80123c0:	f003 0308 	and.w	r3, r3, #8
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d009      	beq.n	80123dc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	8b5b      	ldrh	r3, [r3, #26]
 80123cc:	f023 0308 	bic.w	r3, r3, #8
 80123d0:	b29a      	uxth	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80123d6:	6878      	ldr	r0, [r7, #4]
 80123d8:	f7fe fe60 	bl	801109c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d1e7      	bne.n	80123b6 <tcp_handle_closepend+0xe>
  }
}
 80123e6:	bf00      	nop
 80123e8:	bf00      	nop
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	2004f5dc 	.word	0x2004f5dc

080123f4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	4603      	mov	r3, r0
 80123fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80123fe:	2001      	movs	r0, #1
 8012400:	f7fd faf2 	bl	800f9e8 <memp_malloc>
 8012404:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d126      	bne.n	801245a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801240c:	f7ff ffcc 	bl	80123a8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012410:	f7ff ff9a 	bl	8012348 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012414:	2001      	movs	r0, #1
 8012416:	f7fd fae7 	bl	800f9e8 <memp_malloc>
 801241a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d11b      	bne.n	801245a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012422:	2009      	movs	r0, #9
 8012424:	f7ff ff46 	bl	80122b4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012428:	2001      	movs	r0, #1
 801242a:	f7fd fadd 	bl	800f9e8 <memp_malloc>
 801242e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d111      	bne.n	801245a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012436:	2008      	movs	r0, #8
 8012438:	f7ff ff3c 	bl	80122b4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801243c:	2001      	movs	r0, #1
 801243e:	f7fd fad3 	bl	800f9e8 <memp_malloc>
 8012442:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d107      	bne.n	801245a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801244a:	79fb      	ldrb	r3, [r7, #7]
 801244c:	4618      	mov	r0, r3
 801244e:	f7ff fee3 	bl	8012218 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012452:	2001      	movs	r0, #1
 8012454:	f7fd fac8 	bl	800f9e8 <memp_malloc>
 8012458:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d03f      	beq.n	80124e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012460:	229c      	movs	r2, #156	; 0x9c
 8012462:	2100      	movs	r1, #0
 8012464:	68f8      	ldr	r0, [r7, #12]
 8012466:	f007 fee8 	bl	801a23a <memset>
    pcb->prio = prio;
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	79fa      	ldrb	r2, [r7, #7]
 801246e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012476:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012480:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	22ff      	movs	r2, #255	; 0xff
 801248e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012496:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2206      	movs	r2, #6
 801249c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2206      	movs	r2, #6
 80124a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124ac:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	2201      	movs	r2, #1
 80124b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80124b6:	4b0d      	ldr	r3, [pc, #52]	; (80124ec <tcp_alloc+0xf8>)
 80124b8:	681a      	ldr	r2, [r3, #0]
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80124be:	4b0c      	ldr	r3, [pc, #48]	; (80124f0 <tcp_alloc+0xfc>)
 80124c0:	781a      	ldrb	r2, [r3, #0]
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80124cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4a08      	ldr	r2, [pc, #32]	; (80124f4 <tcp_alloc+0x100>)
 80124d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	4a07      	ldr	r2, [pc, #28]	; (80124f8 <tcp_alloc+0x104>)
 80124dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80124e0:	68fb      	ldr	r3, [r7, #12]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3710      	adds	r7, #16
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	2004f5d0 	.word	0x2004f5d0
 80124f0:	2004f5e6 	.word	0x2004f5e6
 80124f4:	080121ad 	.word	0x080121ad
 80124f8:	006ddd00 	.word	0x006ddd00

080124fc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	4603      	mov	r3, r0
 8012504:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012506:	2040      	movs	r0, #64	; 0x40
 8012508:	f7ff ff74 	bl	80123f4 <tcp_alloc>
 801250c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801250e:	68fb      	ldr	r3, [r7, #12]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3710      	adds	r7, #16
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012518:	b480      	push	{r7}
 801251a:	b083      	sub	sp, #12
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	683a      	ldr	r2, [r7, #0]
 801252c:	611a      	str	r2, [r3, #16]
  }
}
 801252e:	bf00      	nop
 8012530:	370c      	adds	r7, #12
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr
	...

0801253c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b082      	sub	sp, #8
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d00e      	beq.n	801256a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	7d1b      	ldrb	r3, [r3, #20]
 8012550:	2b01      	cmp	r3, #1
 8012552:	d106      	bne.n	8012562 <tcp_recv+0x26>
 8012554:	4b07      	ldr	r3, [pc, #28]	; (8012574 <tcp_recv+0x38>)
 8012556:	f240 72df 	movw	r2, #2015	; 0x7df
 801255a:	4907      	ldr	r1, [pc, #28]	; (8012578 <tcp_recv+0x3c>)
 801255c:	4807      	ldr	r0, [pc, #28]	; (801257c <tcp_recv+0x40>)
 801255e:	f007 ff09 	bl	801a374 <iprintf>
    pcb->recv = recv;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	683a      	ldr	r2, [r7, #0]
 8012566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801256a:	bf00      	nop
 801256c:	3708      	adds	r7, #8
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	0801c864 	.word	0x0801c864
 8012578:	0801ce00 	.word	0x0801ce00
 801257c:	0801c8a8 	.word	0x0801c8a8

08012580 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b082      	sub	sp, #8
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
 8012588:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d00e      	beq.n	80125ae <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	7d1b      	ldrb	r3, [r3, #20]
 8012594:	2b01      	cmp	r3, #1
 8012596:	d106      	bne.n	80125a6 <tcp_sent+0x26>
 8012598:	4b07      	ldr	r3, [pc, #28]	; (80125b8 <tcp_sent+0x38>)
 801259a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801259e:	4907      	ldr	r1, [pc, #28]	; (80125bc <tcp_sent+0x3c>)
 80125a0:	4807      	ldr	r0, [pc, #28]	; (80125c0 <tcp_sent+0x40>)
 80125a2:	f007 fee7 	bl	801a374 <iprintf>
    pcb->sent = sent;
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	683a      	ldr	r2, [r7, #0]
 80125aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80125ae:	bf00      	nop
 80125b0:	3708      	adds	r7, #8
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	0801c864 	.word	0x0801c864
 80125bc:	0801ce28 	.word	0x0801ce28
 80125c0:	0801c8a8 	.word	0x0801c8a8

080125c4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b082      	sub	sp, #8
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d00e      	beq.n	80125f2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d106      	bne.n	80125ea <tcp_err+0x26>
 80125dc:	4b07      	ldr	r3, [pc, #28]	; (80125fc <tcp_err+0x38>)
 80125de:	f640 020d 	movw	r2, #2061	; 0x80d
 80125e2:	4907      	ldr	r1, [pc, #28]	; (8012600 <tcp_err+0x3c>)
 80125e4:	4807      	ldr	r0, [pc, #28]	; (8012604 <tcp_err+0x40>)
 80125e6:	f007 fec5 	bl	801a374 <iprintf>
    pcb->errf = err;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	683a      	ldr	r2, [r7, #0]
 80125ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80125f2:	bf00      	nop
 80125f4:	3708      	adds	r7, #8
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	0801c864 	.word	0x0801c864
 8012600:	0801ce50 	.word	0x0801ce50
 8012604:	0801c8a8 	.word	0x0801c8a8

08012608 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012608:	b480      	push	{r7}
 801260a:	b085      	sub	sp, #20
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
 8012610:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d008      	beq.n	801262a <tcp_accept+0x22>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	7d1b      	ldrb	r3, [r3, #20]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d104      	bne.n	801262a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	683a      	ldr	r2, [r7, #0]
 8012628:	619a      	str	r2, [r3, #24]
  }
}
 801262a:	bf00      	nop
 801262c:	3714      	adds	r7, #20
 801262e:	46bd      	mov	sp, r7
 8012630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012634:	4770      	bx	lr
	...

08012638 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b084      	sub	sp, #16
 801263c:	af00      	add	r7, sp, #0
 801263e:	60f8      	str	r0, [r7, #12]
 8012640:	60b9      	str	r1, [r7, #8]
 8012642:	4613      	mov	r3, r2
 8012644:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d107      	bne.n	801265c <tcp_poll+0x24>
 801264c:	4b0e      	ldr	r3, [pc, #56]	; (8012688 <tcp_poll+0x50>)
 801264e:	f640 023d 	movw	r2, #2109	; 0x83d
 8012652:	490e      	ldr	r1, [pc, #56]	; (801268c <tcp_poll+0x54>)
 8012654:	480e      	ldr	r0, [pc, #56]	; (8012690 <tcp_poll+0x58>)
 8012656:	f007 fe8d 	bl	801a374 <iprintf>
 801265a:	e011      	b.n	8012680 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	7d1b      	ldrb	r3, [r3, #20]
 8012660:	2b01      	cmp	r3, #1
 8012662:	d106      	bne.n	8012672 <tcp_poll+0x3a>
 8012664:	4b08      	ldr	r3, [pc, #32]	; (8012688 <tcp_poll+0x50>)
 8012666:	f640 023e 	movw	r2, #2110	; 0x83e
 801266a:	490a      	ldr	r1, [pc, #40]	; (8012694 <tcp_poll+0x5c>)
 801266c:	4808      	ldr	r0, [pc, #32]	; (8012690 <tcp_poll+0x58>)
 801266e:	f007 fe81 	bl	801a374 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	68ba      	ldr	r2, [r7, #8]
 8012676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	79fa      	ldrb	r2, [r7, #7]
 801267e:	775a      	strb	r2, [r3, #29]
}
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	0801c864 	.word	0x0801c864
 801268c:	0801ce78 	.word	0x0801ce78
 8012690:	0801c8a8 	.word	0x0801c8a8
 8012694:	0801ce90 	.word	0x0801ce90

08012698 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d107      	bne.n	80126b6 <tcp_pcb_purge+0x1e>
 80126a6:	4b21      	ldr	r3, [pc, #132]	; (801272c <tcp_pcb_purge+0x94>)
 80126a8:	f640 0251 	movw	r2, #2129	; 0x851
 80126ac:	4920      	ldr	r1, [pc, #128]	; (8012730 <tcp_pcb_purge+0x98>)
 80126ae:	4821      	ldr	r0, [pc, #132]	; (8012734 <tcp_pcb_purge+0x9c>)
 80126b0:	f007 fe60 	bl	801a374 <iprintf>
 80126b4:	e037      	b.n	8012726 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	7d1b      	ldrb	r3, [r3, #20]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d033      	beq.n	8012726 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80126c2:	2b0a      	cmp	r3, #10
 80126c4:	d02f      	beq.n	8012726 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d02b      	beq.n	8012726 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d007      	beq.n	80126e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126da:	4618      	mov	r0, r3
 80126dc:	f7fe f89e 	bl	801081c <pbuf_free>
      pcb->refused_data = NULL;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d002      	beq.n	80126f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f000 f986 	bl	8012a00 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126fa:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012700:	4618      	mov	r0, r3
 8012702:	f7ff fcf9 	bl	80120f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801270a:	4618      	mov	r0, r3
 801270c:	f7ff fcf4 	bl	80120f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2200      	movs	r2, #0
 8012714:	66da      	str	r2, [r3, #108]	; 0x6c
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012726:	3708      	adds	r7, #8
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	0801c864 	.word	0x0801c864
 8012730:	0801ceb0 	.word	0x0801ceb0
 8012734:	0801c8a8 	.word	0x0801c8a8

08012738 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d106      	bne.n	8012756 <tcp_pcb_remove+0x1e>
 8012748:	4b3e      	ldr	r3, [pc, #248]	; (8012844 <tcp_pcb_remove+0x10c>)
 801274a:	f640 0283 	movw	r2, #2179	; 0x883
 801274e:	493e      	ldr	r1, [pc, #248]	; (8012848 <tcp_pcb_remove+0x110>)
 8012750:	483e      	ldr	r0, [pc, #248]	; (801284c <tcp_pcb_remove+0x114>)
 8012752:	f007 fe0f 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d106      	bne.n	801276a <tcp_pcb_remove+0x32>
 801275c:	4b39      	ldr	r3, [pc, #228]	; (8012844 <tcp_pcb_remove+0x10c>)
 801275e:	f640 0284 	movw	r2, #2180	; 0x884
 8012762:	493b      	ldr	r1, [pc, #236]	; (8012850 <tcp_pcb_remove+0x118>)
 8012764:	4839      	ldr	r0, [pc, #228]	; (801284c <tcp_pcb_remove+0x114>)
 8012766:	f007 fe05 	bl	801a374 <iprintf>

  TCP_RMV(pcblist, pcb);
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	683a      	ldr	r2, [r7, #0]
 8012770:	429a      	cmp	r2, r3
 8012772:	d105      	bne.n	8012780 <tcp_pcb_remove+0x48>
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	68da      	ldr	r2, [r3, #12]
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	601a      	str	r2, [r3, #0]
 801277e:	e013      	b.n	80127a8 <tcp_pcb_remove+0x70>
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	60fb      	str	r3, [r7, #12]
 8012786:	e00c      	b.n	80127a2 <tcp_pcb_remove+0x6a>
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	68db      	ldr	r3, [r3, #12]
 801278c:	683a      	ldr	r2, [r7, #0]
 801278e:	429a      	cmp	r2, r3
 8012790:	d104      	bne.n	801279c <tcp_pcb_remove+0x64>
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	68da      	ldr	r2, [r3, #12]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	60da      	str	r2, [r3, #12]
 801279a:	e005      	b.n	80127a8 <tcp_pcb_remove+0x70>
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	68db      	ldr	r3, [r3, #12]
 80127a0:	60fb      	str	r3, [r7, #12]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d1ef      	bne.n	8012788 <tcp_pcb_remove+0x50>
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2200      	movs	r2, #0
 80127ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80127ae:	6838      	ldr	r0, [r7, #0]
 80127b0:	f7ff ff72 	bl	8012698 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	7d1b      	ldrb	r3, [r3, #20]
 80127b8:	2b0a      	cmp	r3, #10
 80127ba:	d013      	beq.n	80127e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d00f      	beq.n	80127e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	8b5b      	ldrh	r3, [r3, #26]
 80127c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d009      	beq.n	80127e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	8b5b      	ldrh	r3, [r3, #26]
 80127d4:	f043 0302 	orr.w	r3, r3, #2
 80127d8:	b29a      	uxth	r2, r3
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80127de:	6838      	ldr	r0, [r7, #0]
 80127e0:	f003 fbc6 	bl	8015f70 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	7d1b      	ldrb	r3, [r3, #20]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d020      	beq.n	801282e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d006      	beq.n	8012802 <tcp_pcb_remove+0xca>
 80127f4:	4b13      	ldr	r3, [pc, #76]	; (8012844 <tcp_pcb_remove+0x10c>)
 80127f6:	f640 0293 	movw	r2, #2195	; 0x893
 80127fa:	4916      	ldr	r1, [pc, #88]	; (8012854 <tcp_pcb_remove+0x11c>)
 80127fc:	4813      	ldr	r0, [pc, #76]	; (801284c <tcp_pcb_remove+0x114>)
 80127fe:	f007 fdb9 	bl	801a374 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012806:	2b00      	cmp	r3, #0
 8012808:	d006      	beq.n	8012818 <tcp_pcb_remove+0xe0>
 801280a:	4b0e      	ldr	r3, [pc, #56]	; (8012844 <tcp_pcb_remove+0x10c>)
 801280c:	f640 0294 	movw	r2, #2196	; 0x894
 8012810:	4911      	ldr	r1, [pc, #68]	; (8012858 <tcp_pcb_remove+0x120>)
 8012812:	480e      	ldr	r0, [pc, #56]	; (801284c <tcp_pcb_remove+0x114>)
 8012814:	f007 fdae 	bl	801a374 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801281c:	2b00      	cmp	r3, #0
 801281e:	d006      	beq.n	801282e <tcp_pcb_remove+0xf6>
 8012820:	4b08      	ldr	r3, [pc, #32]	; (8012844 <tcp_pcb_remove+0x10c>)
 8012822:	f640 0296 	movw	r2, #2198	; 0x896
 8012826:	490d      	ldr	r1, [pc, #52]	; (801285c <tcp_pcb_remove+0x124>)
 8012828:	4808      	ldr	r0, [pc, #32]	; (801284c <tcp_pcb_remove+0x114>)
 801282a:	f007 fda3 	bl	801a374 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	2200      	movs	r2, #0
 8012832:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	2200      	movs	r2, #0
 8012838:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801283a:	bf00      	nop
 801283c:	3710      	adds	r7, #16
 801283e:	46bd      	mov	sp, r7
 8012840:	bd80      	pop	{r7, pc}
 8012842:	bf00      	nop
 8012844:	0801c864 	.word	0x0801c864
 8012848:	0801cecc 	.word	0x0801cecc
 801284c:	0801c8a8 	.word	0x0801c8a8
 8012850:	0801cee8 	.word	0x0801cee8
 8012854:	0801cf08 	.word	0x0801cf08
 8012858:	0801cf20 	.word	0x0801cf20
 801285c:	0801cf3c 	.word	0x0801cf3c

08012860 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b082      	sub	sp, #8
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <tcp_next_iss+0x1c>
 801286e:	4b0a      	ldr	r3, [pc, #40]	; (8012898 <tcp_next_iss+0x38>)
 8012870:	f640 02af 	movw	r2, #2223	; 0x8af
 8012874:	4909      	ldr	r1, [pc, #36]	; (801289c <tcp_next_iss+0x3c>)
 8012876:	480a      	ldr	r0, [pc, #40]	; (80128a0 <tcp_next_iss+0x40>)
 8012878:	f007 fd7c 	bl	801a374 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801287c:	4b09      	ldr	r3, [pc, #36]	; (80128a4 <tcp_next_iss+0x44>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	4b09      	ldr	r3, [pc, #36]	; (80128a8 <tcp_next_iss+0x48>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	4413      	add	r3, r2
 8012886:	4a07      	ldr	r2, [pc, #28]	; (80128a4 <tcp_next_iss+0x44>)
 8012888:	6013      	str	r3, [r2, #0]
  return iss;
 801288a:	4b06      	ldr	r3, [pc, #24]	; (80128a4 <tcp_next_iss+0x44>)
 801288c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801288e:	4618      	mov	r0, r3
 8012890:	3708      	adds	r7, #8
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	0801c864 	.word	0x0801c864
 801289c:	0801cf54 	.word	0x0801cf54
 80128a0:	0801c8a8 	.word	0x0801c8a8
 80128a4:	20001a54 	.word	0x20001a54
 80128a8:	2004f5d0 	.word	0x2004f5d0

080128ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b086      	sub	sp, #24
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	4603      	mov	r3, r0
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
 80128b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d106      	bne.n	80128ce <tcp_eff_send_mss_netif+0x22>
 80128c0:	4b14      	ldr	r3, [pc, #80]	; (8012914 <tcp_eff_send_mss_netif+0x68>)
 80128c2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80128c6:	4914      	ldr	r1, [pc, #80]	; (8012918 <tcp_eff_send_mss_netif+0x6c>)
 80128c8:	4814      	ldr	r0, [pc, #80]	; (801291c <tcp_eff_send_mss_netif+0x70>)
 80128ca:	f007 fd53 	bl	801a374 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d101      	bne.n	80128d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80128d4:	89fb      	ldrh	r3, [r7, #14]
 80128d6:	e019      	b.n	801290c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80128dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80128de:	8afb      	ldrh	r3, [r7, #22]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d012      	beq.n	801290a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80128e4:	2328      	movs	r3, #40	; 0x28
 80128e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80128e8:	8afa      	ldrh	r2, [r7, #22]
 80128ea:	8abb      	ldrh	r3, [r7, #20]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d904      	bls.n	80128fa <tcp_eff_send_mss_netif+0x4e>
 80128f0:	8afa      	ldrh	r2, [r7, #22]
 80128f2:	8abb      	ldrh	r3, [r7, #20]
 80128f4:	1ad3      	subs	r3, r2, r3
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	e000      	b.n	80128fc <tcp_eff_send_mss_netif+0x50>
 80128fa:	2300      	movs	r3, #0
 80128fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80128fe:	8a7a      	ldrh	r2, [r7, #18]
 8012900:	89fb      	ldrh	r3, [r7, #14]
 8012902:	4293      	cmp	r3, r2
 8012904:	bf28      	it	cs
 8012906:	4613      	movcs	r3, r2
 8012908:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801290a:	89fb      	ldrh	r3, [r7, #14]
}
 801290c:	4618      	mov	r0, r3
 801290e:	3718      	adds	r7, #24
 8012910:	46bd      	mov	sp, r7
 8012912:	bd80      	pop	{r7, pc}
 8012914:	0801c864 	.word	0x0801c864
 8012918:	0801cf70 	.word	0x0801cf70
 801291c:	0801c8a8 	.word	0x0801c8a8

08012920 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d119      	bne.n	8012968 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012934:	4b10      	ldr	r3, [pc, #64]	; (8012978 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012936:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801293a:	4910      	ldr	r1, [pc, #64]	; (801297c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801293c:	4810      	ldr	r0, [pc, #64]	; (8012980 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801293e:	f007 fd19 	bl	801a374 <iprintf>

  while (pcb != NULL) {
 8012942:	e011      	b.n	8012968 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	429a      	cmp	r2, r3
 801294e:	d108      	bne.n	8012962 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012956:	68f8      	ldr	r0, [r7, #12]
 8012958:	f7fe fd50 	bl	80113fc <tcp_abort>
      pcb = next;
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	60fb      	str	r3, [r7, #12]
 8012960:	e002      	b.n	8012968 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	68db      	ldr	r3, [r3, #12]
 8012966:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d1ea      	bne.n	8012944 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801296e:	bf00      	nop
 8012970:	bf00      	nop
 8012972:	3710      	adds	r7, #16
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	0801c864 	.word	0x0801c864
 801297c:	0801cf98 	.word	0x0801cf98
 8012980:	0801c8a8 	.word	0x0801c8a8

08012984 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d02a      	beq.n	80129ea <tcp_netif_ip_addr_changed+0x66>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d026      	beq.n	80129ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801299c:	4b15      	ldr	r3, [pc, #84]	; (80129f4 <tcp_netif_ip_addr_changed+0x70>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4619      	mov	r1, r3
 80129a2:	6878      	ldr	r0, [r7, #4]
 80129a4:	f7ff ffbc 	bl	8012920 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80129a8:	4b13      	ldr	r3, [pc, #76]	; (80129f8 <tcp_netif_ip_addr_changed+0x74>)
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	4619      	mov	r1, r3
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f7ff ffb6 	bl	8012920 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80129b4:	683b      	ldr	r3, [r7, #0]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d017      	beq.n	80129ea <tcp_netif_ip_addr_changed+0x66>
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d013      	beq.n	80129ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129c2:	4b0e      	ldr	r3, [pc, #56]	; (80129fc <tcp_netif_ip_addr_changed+0x78>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	60fb      	str	r3, [r7, #12]
 80129c8:	e00c      	b.n	80129e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d103      	bne.n	80129de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	681a      	ldr	r2, [r3, #0]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	68db      	ldr	r3, [r3, #12]
 80129e2:	60fb      	str	r3, [r7, #12]
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d1ef      	bne.n	80129ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80129ea:	bf00      	nop
 80129ec:	3710      	adds	r7, #16
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
 80129f2:	bf00      	nop
 80129f4:	2004f5dc 	.word	0x2004f5dc
 80129f8:	2004f5d4 	.word	0x2004f5d4
 80129fc:	2004f5d8 	.word	0x2004f5d8

08012a00 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d007      	beq.n	8012a20 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7ff fb6f 	bl	80120f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}

08012a28 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012a28:	b590      	push	{r4, r7, lr}
 8012a2a:	b08d      	sub	sp, #52	; 0x34
 8012a2c:	af04      	add	r7, sp, #16
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d105      	bne.n	8012a44 <tcp_input+0x1c>
 8012a38:	4b9b      	ldr	r3, [pc, #620]	; (8012ca8 <tcp_input+0x280>)
 8012a3a:	2283      	movs	r2, #131	; 0x83
 8012a3c:	499b      	ldr	r1, [pc, #620]	; (8012cac <tcp_input+0x284>)
 8012a3e:	489c      	ldr	r0, [pc, #624]	; (8012cb0 <tcp_input+0x288>)
 8012a40:	f007 fc98 	bl	801a374 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	685b      	ldr	r3, [r3, #4]
 8012a48:	4a9a      	ldr	r2, [pc, #616]	; (8012cb4 <tcp_input+0x28c>)
 8012a4a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	895b      	ldrh	r3, [r3, #10]
 8012a50:	2b13      	cmp	r3, #19
 8012a52:	f240 83d1 	bls.w	80131f8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a56:	4b98      	ldr	r3, [pc, #608]	; (8012cb8 <tcp_input+0x290>)
 8012a58:	695b      	ldr	r3, [r3, #20]
 8012a5a:	4a97      	ldr	r2, [pc, #604]	; (8012cb8 <tcp_input+0x290>)
 8012a5c:	6812      	ldr	r2, [r2, #0]
 8012a5e:	4611      	mov	r1, r2
 8012a60:	4618      	mov	r0, r3
 8012a62:	f006 f9a3 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	f040 83c7 	bne.w	80131fc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012a6e:	4b92      	ldr	r3, [pc, #584]	; (8012cb8 <tcp_input+0x290>)
 8012a70:	695b      	ldr	r3, [r3, #20]
 8012a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012a76:	2be0      	cmp	r3, #224	; 0xe0
 8012a78:	f000 83c0 	beq.w	80131fc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012a7c:	4b8d      	ldr	r3, [pc, #564]	; (8012cb4 <tcp_input+0x28c>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	899b      	ldrh	r3, [r3, #12]
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7fc fad7 	bl	800f038 <lwip_htons>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	0b1b      	lsrs	r3, r3, #12
 8012a8e:	b29b      	uxth	r3, r3
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	009b      	lsls	r3, r3, #2
 8012a94:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012a96:	7cbb      	ldrb	r3, [r7, #18]
 8012a98:	2b13      	cmp	r3, #19
 8012a9a:	f240 83b1 	bls.w	8013200 <tcp_input+0x7d8>
 8012a9e:	7cbb      	ldrb	r3, [r7, #18]
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	891b      	ldrh	r3, [r3, #8]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	f200 83aa 	bhi.w	8013200 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012aac:	7cbb      	ldrb	r3, [r7, #18]
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	3b14      	subs	r3, #20
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	4b81      	ldr	r3, [pc, #516]	; (8012cbc <tcp_input+0x294>)
 8012ab6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012ab8:	4b81      	ldr	r3, [pc, #516]	; (8012cc0 <tcp_input+0x298>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	895a      	ldrh	r2, [r3, #10]
 8012ac2:	7cbb      	ldrb	r3, [r7, #18]
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d309      	bcc.n	8012ade <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012aca:	4b7c      	ldr	r3, [pc, #496]	; (8012cbc <tcp_input+0x294>)
 8012acc:	881a      	ldrh	r2, [r3, #0]
 8012ace:	4b7d      	ldr	r3, [pc, #500]	; (8012cc4 <tcp_input+0x29c>)
 8012ad0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012ad2:	7cbb      	ldrb	r3, [r7, #18]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7fd fe1a 	bl	8010710 <pbuf_remove_header>
 8012adc:	e04e      	b.n	8012b7c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d105      	bne.n	8012af2 <tcp_input+0xca>
 8012ae6:	4b70      	ldr	r3, [pc, #448]	; (8012ca8 <tcp_input+0x280>)
 8012ae8:	22c2      	movs	r2, #194	; 0xc2
 8012aea:	4977      	ldr	r1, [pc, #476]	; (8012cc8 <tcp_input+0x2a0>)
 8012aec:	4870      	ldr	r0, [pc, #448]	; (8012cb0 <tcp_input+0x288>)
 8012aee:	f007 fc41 	bl	801a374 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012af2:	2114      	movs	r1, #20
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f7fd fe0b 	bl	8010710 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	895a      	ldrh	r2, [r3, #10]
 8012afe:	4b71      	ldr	r3, [pc, #452]	; (8012cc4 <tcp_input+0x29c>)
 8012b00:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012b02:	4b6e      	ldr	r3, [pc, #440]	; (8012cbc <tcp_input+0x294>)
 8012b04:	881a      	ldrh	r2, [r3, #0]
 8012b06:	4b6f      	ldr	r3, [pc, #444]	; (8012cc4 <tcp_input+0x29c>)
 8012b08:	881b      	ldrh	r3, [r3, #0]
 8012b0a:	1ad3      	subs	r3, r2, r3
 8012b0c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012b0e:	4b6d      	ldr	r3, [pc, #436]	; (8012cc4 <tcp_input+0x29c>)
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	4619      	mov	r1, r3
 8012b14:	6878      	ldr	r0, [r7, #4]
 8012b16:	f7fd fdfb 	bl	8010710 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	895b      	ldrh	r3, [r3, #10]
 8012b20:	8a3a      	ldrh	r2, [r7, #16]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	f200 836e 	bhi.w	8013204 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	4a64      	ldr	r2, [pc, #400]	; (8012cc0 <tcp_input+0x298>)
 8012b30:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	8a3a      	ldrh	r2, [r7, #16]
 8012b38:	4611      	mov	r1, r2
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fd fde8 	bl	8010710 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	891a      	ldrh	r2, [r3, #8]
 8012b44:	8a3b      	ldrh	r3, [r7, #16]
 8012b46:	1ad3      	subs	r3, r2, r3
 8012b48:	b29a      	uxth	r2, r3
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	895b      	ldrh	r3, [r3, #10]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d005      	beq.n	8012b62 <tcp_input+0x13a>
 8012b56:	4b54      	ldr	r3, [pc, #336]	; (8012ca8 <tcp_input+0x280>)
 8012b58:	22df      	movs	r2, #223	; 0xdf
 8012b5a:	495c      	ldr	r1, [pc, #368]	; (8012ccc <tcp_input+0x2a4>)
 8012b5c:	4854      	ldr	r0, [pc, #336]	; (8012cb0 <tcp_input+0x288>)
 8012b5e:	f007 fc09 	bl	801a374 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	891a      	ldrh	r2, [r3, #8]
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	891b      	ldrh	r3, [r3, #8]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d005      	beq.n	8012b7c <tcp_input+0x154>
 8012b70:	4b4d      	ldr	r3, [pc, #308]	; (8012ca8 <tcp_input+0x280>)
 8012b72:	22e0      	movs	r2, #224	; 0xe0
 8012b74:	4956      	ldr	r1, [pc, #344]	; (8012cd0 <tcp_input+0x2a8>)
 8012b76:	484e      	ldr	r0, [pc, #312]	; (8012cb0 <tcp_input+0x288>)
 8012b78:	f007 fbfc 	bl	801a374 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012b7c:	4b4d      	ldr	r3, [pc, #308]	; (8012cb4 <tcp_input+0x28c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	881b      	ldrh	r3, [r3, #0]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	4a4b      	ldr	r2, [pc, #300]	; (8012cb4 <tcp_input+0x28c>)
 8012b86:	6814      	ldr	r4, [r2, #0]
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fc fa55 	bl	800f038 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012b92:	4b48      	ldr	r3, [pc, #288]	; (8012cb4 <tcp_input+0x28c>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	885b      	ldrh	r3, [r3, #2]
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	4a46      	ldr	r2, [pc, #280]	; (8012cb4 <tcp_input+0x28c>)
 8012b9c:	6814      	ldr	r4, [r2, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fc fa4a 	bl	800f038 <lwip_htons>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012ba8:	4b42      	ldr	r3, [pc, #264]	; (8012cb4 <tcp_input+0x28c>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	4a41      	ldr	r2, [pc, #260]	; (8012cb4 <tcp_input+0x28c>)
 8012bb0:	6814      	ldr	r4, [r2, #0]
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	f7fc fa55 	bl	800f062 <lwip_htonl>
 8012bb8:	4603      	mov	r3, r0
 8012bba:	6063      	str	r3, [r4, #4]
 8012bbc:	6863      	ldr	r3, [r4, #4]
 8012bbe:	4a45      	ldr	r2, [pc, #276]	; (8012cd4 <tcp_input+0x2ac>)
 8012bc0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012bc2:	4b3c      	ldr	r3, [pc, #240]	; (8012cb4 <tcp_input+0x28c>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	689b      	ldr	r3, [r3, #8]
 8012bc8:	4a3a      	ldr	r2, [pc, #232]	; (8012cb4 <tcp_input+0x28c>)
 8012bca:	6814      	ldr	r4, [r2, #0]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7fc fa48 	bl	800f062 <lwip_htonl>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	60a3      	str	r3, [r4, #8]
 8012bd6:	68a3      	ldr	r3, [r4, #8]
 8012bd8:	4a3f      	ldr	r2, [pc, #252]	; (8012cd8 <tcp_input+0x2b0>)
 8012bda:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012bdc:	4b35      	ldr	r3, [pc, #212]	; (8012cb4 <tcp_input+0x28c>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	89db      	ldrh	r3, [r3, #14]
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	4a33      	ldr	r2, [pc, #204]	; (8012cb4 <tcp_input+0x28c>)
 8012be6:	6814      	ldr	r4, [r2, #0]
 8012be8:	4618      	mov	r0, r3
 8012bea:	f7fc fa25 	bl	800f038 <lwip_htons>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012bf2:	4b30      	ldr	r3, [pc, #192]	; (8012cb4 <tcp_input+0x28c>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	899b      	ldrh	r3, [r3, #12]
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fc fa1c 	bl	800f038 <lwip_htons>
 8012c00:	4603      	mov	r3, r0
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c08:	b2da      	uxtb	r2, r3
 8012c0a:	4b34      	ldr	r3, [pc, #208]	; (8012cdc <tcp_input+0x2b4>)
 8012c0c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	891a      	ldrh	r2, [r3, #8]
 8012c12:	4b33      	ldr	r3, [pc, #204]	; (8012ce0 <tcp_input+0x2b8>)
 8012c14:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012c16:	4b31      	ldr	r3, [pc, #196]	; (8012cdc <tcp_input+0x2b4>)
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	f003 0303 	and.w	r3, r3, #3
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d00c      	beq.n	8012c3c <tcp_input+0x214>
    tcplen++;
 8012c22:	4b2f      	ldr	r3, [pc, #188]	; (8012ce0 <tcp_input+0x2b8>)
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	3301      	adds	r3, #1
 8012c28:	b29a      	uxth	r2, r3
 8012c2a:	4b2d      	ldr	r3, [pc, #180]	; (8012ce0 <tcp_input+0x2b8>)
 8012c2c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	891a      	ldrh	r2, [r3, #8]
 8012c32:	4b2b      	ldr	r3, [pc, #172]	; (8012ce0 <tcp_input+0x2b8>)
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	f200 82e6 	bhi.w	8013208 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c40:	4b28      	ldr	r3, [pc, #160]	; (8012ce4 <tcp_input+0x2bc>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	61fb      	str	r3, [r7, #28]
 8012c46:	e09d      	b.n	8012d84 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	7d1b      	ldrb	r3, [r3, #20]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d105      	bne.n	8012c5c <tcp_input+0x234>
 8012c50:	4b15      	ldr	r3, [pc, #84]	; (8012ca8 <tcp_input+0x280>)
 8012c52:	22fb      	movs	r2, #251	; 0xfb
 8012c54:	4924      	ldr	r1, [pc, #144]	; (8012ce8 <tcp_input+0x2c0>)
 8012c56:	4816      	ldr	r0, [pc, #88]	; (8012cb0 <tcp_input+0x288>)
 8012c58:	f007 fb8c 	bl	801a374 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	7d1b      	ldrb	r3, [r3, #20]
 8012c60:	2b0a      	cmp	r3, #10
 8012c62:	d105      	bne.n	8012c70 <tcp_input+0x248>
 8012c64:	4b10      	ldr	r3, [pc, #64]	; (8012ca8 <tcp_input+0x280>)
 8012c66:	22fc      	movs	r2, #252	; 0xfc
 8012c68:	4920      	ldr	r1, [pc, #128]	; (8012cec <tcp_input+0x2c4>)
 8012c6a:	4811      	ldr	r0, [pc, #68]	; (8012cb0 <tcp_input+0x288>)
 8012c6c:	f007 fb82 	bl	801a374 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	7d1b      	ldrb	r3, [r3, #20]
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d105      	bne.n	8012c84 <tcp_input+0x25c>
 8012c78:	4b0b      	ldr	r3, [pc, #44]	; (8012ca8 <tcp_input+0x280>)
 8012c7a:	22fd      	movs	r2, #253	; 0xfd
 8012c7c:	491c      	ldr	r1, [pc, #112]	; (8012cf0 <tcp_input+0x2c8>)
 8012c7e:	480c      	ldr	r0, [pc, #48]	; (8012cb0 <tcp_input+0x288>)
 8012c80:	f007 fb78 	bl	801a374 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	7a1b      	ldrb	r3, [r3, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d033      	beq.n	8012cf4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c8c:	69fb      	ldr	r3, [r7, #28]
 8012c8e:	7a1a      	ldrb	r2, [r3, #8]
 8012c90:	4b09      	ldr	r3, [pc, #36]	; (8012cb8 <tcp_input+0x290>)
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c98:	3301      	adds	r3, #1
 8012c9a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d029      	beq.n	8012cf4 <tcp_input+0x2cc>
      prev = pcb;
 8012ca0:	69fb      	ldr	r3, [r7, #28]
 8012ca2:	61bb      	str	r3, [r7, #24]
      continue;
 8012ca4:	e06b      	b.n	8012d7e <tcp_input+0x356>
 8012ca6:	bf00      	nop
 8012ca8:	0801cfcc 	.word	0x0801cfcc
 8012cac:	0801d000 	.word	0x0801d000
 8012cb0:	0801d018 	.word	0x0801d018
 8012cb4:	2004f5f8 	.word	0x2004f5f8
 8012cb8:	2004b0bc 	.word	0x2004b0bc
 8012cbc:	2004f5fc 	.word	0x2004f5fc
 8012cc0:	2004f600 	.word	0x2004f600
 8012cc4:	2004f5fe 	.word	0x2004f5fe
 8012cc8:	0801d040 	.word	0x0801d040
 8012ccc:	0801d050 	.word	0x0801d050
 8012cd0:	0801d05c 	.word	0x0801d05c
 8012cd4:	2004f608 	.word	0x2004f608
 8012cd8:	2004f60c 	.word	0x2004f60c
 8012cdc:	2004f614 	.word	0x2004f614
 8012ce0:	2004f612 	.word	0x2004f612
 8012ce4:	2004f5dc 	.word	0x2004f5dc
 8012ce8:	0801d07c 	.word	0x0801d07c
 8012cec:	0801d0a4 	.word	0x0801d0a4
 8012cf0:	0801d0d0 	.word	0x0801d0d0
    }

    if (pcb->remote_port == tcphdr->src &&
 8012cf4:	69fb      	ldr	r3, [r7, #28]
 8012cf6:	8b1a      	ldrh	r2, [r3, #24]
 8012cf8:	4b72      	ldr	r3, [pc, #456]	; (8012ec4 <tcp_input+0x49c>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	881b      	ldrh	r3, [r3, #0]
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	429a      	cmp	r2, r3
 8012d02:	d13a      	bne.n	8012d7a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	8ada      	ldrh	r2, [r3, #22]
 8012d08:	4b6e      	ldr	r3, [pc, #440]	; (8012ec4 <tcp_input+0x49c>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	885b      	ldrh	r3, [r3, #2]
 8012d0e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d132      	bne.n	8012d7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	685a      	ldr	r2, [r3, #4]
 8012d18:	4b6b      	ldr	r3, [pc, #428]	; (8012ec8 <tcp_input+0x4a0>)
 8012d1a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d12c      	bne.n	8012d7a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	681a      	ldr	r2, [r3, #0]
 8012d24:	4b68      	ldr	r3, [pc, #416]	; (8012ec8 <tcp_input+0x4a0>)
 8012d26:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d126      	bne.n	8012d7a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	69fa      	ldr	r2, [r7, #28]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d106      	bne.n	8012d44 <tcp_input+0x31c>
 8012d36:	4b65      	ldr	r3, [pc, #404]	; (8012ecc <tcp_input+0x4a4>)
 8012d38:	f240 120d 	movw	r2, #269	; 0x10d
 8012d3c:	4964      	ldr	r1, [pc, #400]	; (8012ed0 <tcp_input+0x4a8>)
 8012d3e:	4865      	ldr	r0, [pc, #404]	; (8012ed4 <tcp_input+0x4ac>)
 8012d40:	f007 fb18 	bl	801a374 <iprintf>
      if (prev != NULL) {
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d00a      	beq.n	8012d60 <tcp_input+0x338>
        prev->next = pcb->next;
 8012d4a:	69fb      	ldr	r3, [r7, #28]
 8012d4c:	68da      	ldr	r2, [r3, #12]
 8012d4e:	69bb      	ldr	r3, [r7, #24]
 8012d50:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012d52:	4b61      	ldr	r3, [pc, #388]	; (8012ed8 <tcp_input+0x4b0>)
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012d5a:	4a5f      	ldr	r2, [pc, #380]	; (8012ed8 <tcp_input+0x4b0>)
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012d60:	69fb      	ldr	r3, [r7, #28]
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	69fa      	ldr	r2, [r7, #28]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d111      	bne.n	8012d8e <tcp_input+0x366>
 8012d6a:	4b58      	ldr	r3, [pc, #352]	; (8012ecc <tcp_input+0x4a4>)
 8012d6c:	f240 1215 	movw	r2, #277	; 0x115
 8012d70:	495a      	ldr	r1, [pc, #360]	; (8012edc <tcp_input+0x4b4>)
 8012d72:	4858      	ldr	r0, [pc, #352]	; (8012ed4 <tcp_input+0x4ac>)
 8012d74:	f007 fafe 	bl	801a374 <iprintf>
      break;
 8012d78:	e009      	b.n	8012d8e <tcp_input+0x366>
    }
    prev = pcb;
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	68db      	ldr	r3, [r3, #12]
 8012d82:	61fb      	str	r3, [r7, #28]
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	f47f af5e 	bne.w	8012c48 <tcp_input+0x220>
 8012d8c:	e000      	b.n	8012d90 <tcp_input+0x368>
      break;
 8012d8e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	f040 80aa 	bne.w	8012eec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d98:	4b51      	ldr	r3, [pc, #324]	; (8012ee0 <tcp_input+0x4b8>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	61fb      	str	r3, [r7, #28]
 8012d9e:	e03f      	b.n	8012e20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	7d1b      	ldrb	r3, [r3, #20]
 8012da4:	2b0a      	cmp	r3, #10
 8012da6:	d006      	beq.n	8012db6 <tcp_input+0x38e>
 8012da8:	4b48      	ldr	r3, [pc, #288]	; (8012ecc <tcp_input+0x4a4>)
 8012daa:	f240 121f 	movw	r2, #287	; 0x11f
 8012dae:	494d      	ldr	r1, [pc, #308]	; (8012ee4 <tcp_input+0x4bc>)
 8012db0:	4848      	ldr	r0, [pc, #288]	; (8012ed4 <tcp_input+0x4ac>)
 8012db2:	f007 fadf 	bl	801a374 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	7a1b      	ldrb	r3, [r3, #8]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d009      	beq.n	8012dd2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	7a1a      	ldrb	r2, [r3, #8]
 8012dc2:	4b41      	ldr	r3, [pc, #260]	; (8012ec8 <tcp_input+0x4a0>)
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012dca:	3301      	adds	r3, #1
 8012dcc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d122      	bne.n	8012e18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	8b1a      	ldrh	r2, [r3, #24]
 8012dd6:	4b3b      	ldr	r3, [pc, #236]	; (8012ec4 <tcp_input+0x49c>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	881b      	ldrh	r3, [r3, #0]
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d11b      	bne.n	8012e1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012de2:	69fb      	ldr	r3, [r7, #28]
 8012de4:	8ada      	ldrh	r2, [r3, #22]
 8012de6:	4b37      	ldr	r3, [pc, #220]	; (8012ec4 <tcp_input+0x49c>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	885b      	ldrh	r3, [r3, #2]
 8012dec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d113      	bne.n	8012e1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012df2:	69fb      	ldr	r3, [r7, #28]
 8012df4:	685a      	ldr	r2, [r3, #4]
 8012df6:	4b34      	ldr	r3, [pc, #208]	; (8012ec8 <tcp_input+0x4a0>)
 8012df8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d10d      	bne.n	8012e1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	681a      	ldr	r2, [r3, #0]
 8012e02:	4b31      	ldr	r3, [pc, #196]	; (8012ec8 <tcp_input+0x4a0>)
 8012e04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d107      	bne.n	8012e1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012e0a:	69f8      	ldr	r0, [r7, #28]
 8012e0c:	f000 fb56 	bl	80134bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8012e10:	6878      	ldr	r0, [r7, #4]
 8012e12:	f7fd fd03 	bl	801081c <pbuf_free>
        return;
 8012e16:	e1fd      	b.n	8013214 <tcp_input+0x7ec>
        continue;
 8012e18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e1a:	69fb      	ldr	r3, [r7, #28]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	61fb      	str	r3, [r7, #28]
 8012e20:	69fb      	ldr	r3, [r7, #28]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d1bc      	bne.n	8012da0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012e26:	2300      	movs	r3, #0
 8012e28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e2a:	4b2f      	ldr	r3, [pc, #188]	; (8012ee8 <tcp_input+0x4c0>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	617b      	str	r3, [r7, #20]
 8012e30:	e02a      	b.n	8012e88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012e32:	697b      	ldr	r3, [r7, #20]
 8012e34:	7a1b      	ldrb	r3, [r3, #8]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d00c      	beq.n	8012e54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	7a1a      	ldrb	r2, [r3, #8]
 8012e3e:	4b22      	ldr	r3, [pc, #136]	; (8012ec8 <tcp_input+0x4a0>)
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e46:	3301      	adds	r3, #1
 8012e48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d002      	beq.n	8012e54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	61bb      	str	r3, [r7, #24]
        continue;
 8012e52:	e016      	b.n	8012e82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	8ada      	ldrh	r2, [r3, #22]
 8012e58:	4b1a      	ldr	r3, [pc, #104]	; (8012ec4 <tcp_input+0x49c>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	885b      	ldrh	r3, [r3, #2]
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d10c      	bne.n	8012e7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	4b17      	ldr	r3, [pc, #92]	; (8012ec8 <tcp_input+0x4a0>)
 8012e6a:	695b      	ldr	r3, [r3, #20]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d00f      	beq.n	8012e90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00d      	beq.n	8012e92 <tcp_input+0x46a>
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d009      	beq.n	8012e92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	68db      	ldr	r3, [r3, #12]
 8012e86:	617b      	str	r3, [r7, #20]
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1d1      	bne.n	8012e32 <tcp_input+0x40a>
 8012e8e:	e000      	b.n	8012e92 <tcp_input+0x46a>
            break;
 8012e90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012e92:	697b      	ldr	r3, [r7, #20]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d029      	beq.n	8012eec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012e98:	69bb      	ldr	r3, [r7, #24]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d00a      	beq.n	8012eb4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012e9e:	697b      	ldr	r3, [r7, #20]
 8012ea0:	68da      	ldr	r2, [r3, #12]
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012ea6:	4b10      	ldr	r3, [pc, #64]	; (8012ee8 <tcp_input+0x4c0>)
 8012ea8:	681a      	ldr	r2, [r3, #0]
 8012eaa:	697b      	ldr	r3, [r7, #20]
 8012eac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012eae:	4a0e      	ldr	r2, [pc, #56]	; (8012ee8 <tcp_input+0x4c0>)
 8012eb0:	697b      	ldr	r3, [r7, #20]
 8012eb2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012eb4:	6978      	ldr	r0, [r7, #20]
 8012eb6:	f000 fa03 	bl	80132c0 <tcp_listen_input>
      }
      pbuf_free(p);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7fd fcae 	bl	801081c <pbuf_free>
      return;
 8012ec0:	e1a8      	b.n	8013214 <tcp_input+0x7ec>
 8012ec2:	bf00      	nop
 8012ec4:	2004f5f8 	.word	0x2004f5f8
 8012ec8:	2004b0bc 	.word	0x2004b0bc
 8012ecc:	0801cfcc 	.word	0x0801cfcc
 8012ed0:	0801d0f8 	.word	0x0801d0f8
 8012ed4:	0801d018 	.word	0x0801d018
 8012ed8:	2004f5dc 	.word	0x2004f5dc
 8012edc:	0801d124 	.word	0x0801d124
 8012ee0:	2004f5e0 	.word	0x2004f5e0
 8012ee4:	0801d150 	.word	0x0801d150
 8012ee8:	2004f5d8 	.word	0x2004f5d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	f000 8158 	beq.w	80131a4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012ef4:	4b95      	ldr	r3, [pc, #596]	; (801314c <tcp_input+0x724>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	891a      	ldrh	r2, [r3, #8]
 8012efe:	4b93      	ldr	r3, [pc, #588]	; (801314c <tcp_input+0x724>)
 8012f00:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012f02:	4a92      	ldr	r2, [pc, #584]	; (801314c <tcp_input+0x724>)
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012f08:	4b91      	ldr	r3, [pc, #580]	; (8013150 <tcp_input+0x728>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	4a8f      	ldr	r2, [pc, #572]	; (801314c <tcp_input+0x724>)
 8012f0e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012f10:	4b90      	ldr	r3, [pc, #576]	; (8013154 <tcp_input+0x72c>)
 8012f12:	2200      	movs	r2, #0
 8012f14:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012f16:	4b90      	ldr	r3, [pc, #576]	; (8013158 <tcp_input+0x730>)
 8012f18:	2200      	movs	r2, #0
 8012f1a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012f1c:	4b8f      	ldr	r3, [pc, #572]	; (801315c <tcp_input+0x734>)
 8012f1e:	2200      	movs	r2, #0
 8012f20:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012f22:	4b8f      	ldr	r3, [pc, #572]	; (8013160 <tcp_input+0x738>)
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	f003 0308 	and.w	r3, r3, #8
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	7b5b      	ldrb	r3, [r3, #13]
 8012f32:	f043 0301 	orr.w	r3, r3, #1
 8012f36:	b2da      	uxtb	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012f3c:	69fb      	ldr	r3, [r7, #28]
 8012f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d017      	beq.n	8012f74 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012f44:	69f8      	ldr	r0, [r7, #28]
 8012f46:	f7ff f85b 	bl	8012000 <tcp_process_refused_data>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	f113 0f0d 	cmn.w	r3, #13
 8012f50:	d007      	beq.n	8012f62 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d00c      	beq.n	8012f74 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012f5a:	4b82      	ldr	r3, [pc, #520]	; (8013164 <tcp_input+0x73c>)
 8012f5c:	881b      	ldrh	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d008      	beq.n	8012f74 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012f62:	69fb      	ldr	r3, [r7, #28]
 8012f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	f040 80e3 	bne.w	8013132 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012f6c:	69f8      	ldr	r0, [r7, #28]
 8012f6e:	f003 fe05 	bl	8016b7c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012f72:	e0de      	b.n	8013132 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012f74:	4a7c      	ldr	r2, [pc, #496]	; (8013168 <tcp_input+0x740>)
 8012f76:	69fb      	ldr	r3, [r7, #28]
 8012f78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012f7a:	69f8      	ldr	r0, [r7, #28]
 8012f7c:	f000 fb18 	bl	80135b0 <tcp_process>
 8012f80:	4603      	mov	r3, r0
 8012f82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012f84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f88:	f113 0f0d 	cmn.w	r3, #13
 8012f8c:	f000 80d3 	beq.w	8013136 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012f90:	4b71      	ldr	r3, [pc, #452]	; (8013158 <tcp_input+0x730>)
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f003 0308 	and.w	r3, r3, #8
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d015      	beq.n	8012fc8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d008      	beq.n	8012fb8 <tcp_input+0x590>
 8012fa6:	69fb      	ldr	r3, [r7, #28]
 8012fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012fac:	69fa      	ldr	r2, [r7, #28]
 8012fae:	6912      	ldr	r2, [r2, #16]
 8012fb0:	f06f 010d 	mvn.w	r1, #13
 8012fb4:	4610      	mov	r0, r2
 8012fb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012fb8:	69f9      	ldr	r1, [r7, #28]
 8012fba:	486c      	ldr	r0, [pc, #432]	; (801316c <tcp_input+0x744>)
 8012fbc:	f7ff fbbc 	bl	8012738 <tcp_pcb_remove>
        tcp_free(pcb);
 8012fc0:	69f8      	ldr	r0, [r7, #28]
 8012fc2:	f7fd fed7 	bl	8010d74 <tcp_free>
 8012fc6:	e0da      	b.n	801317e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012fcc:	4b63      	ldr	r3, [pc, #396]	; (801315c <tcp_input+0x734>)
 8012fce:	881b      	ldrh	r3, [r3, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d01d      	beq.n	8013010 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012fd4:	4b61      	ldr	r3, [pc, #388]	; (801315c <tcp_input+0x734>)
 8012fd6:	881b      	ldrh	r3, [r3, #0]
 8012fd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d00a      	beq.n	8012ffa <tcp_input+0x5d2>
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012fea:	69fa      	ldr	r2, [r7, #28]
 8012fec:	6910      	ldr	r0, [r2, #16]
 8012fee:	89fa      	ldrh	r2, [r7, #14]
 8012ff0:	69f9      	ldr	r1, [r7, #28]
 8012ff2:	4798      	blx	r3
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	74fb      	strb	r3, [r7, #19]
 8012ff8:	e001      	b.n	8012ffe <tcp_input+0x5d6>
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012ffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013002:	f113 0f0d 	cmn.w	r3, #13
 8013006:	f000 8098 	beq.w	801313a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801300a:	4b54      	ldr	r3, [pc, #336]	; (801315c <tcp_input+0x734>)
 801300c:	2200      	movs	r2, #0
 801300e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013010:	69f8      	ldr	r0, [r7, #28]
 8013012:	f000 f915 	bl	8013240 <tcp_input_delayed_close>
 8013016:	4603      	mov	r3, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	f040 8090 	bne.w	801313e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801301e:	4b4d      	ldr	r3, [pc, #308]	; (8013154 <tcp_input+0x72c>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d041      	beq.n	80130aa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801302a:	2b00      	cmp	r3, #0
 801302c:	d006      	beq.n	801303c <tcp_input+0x614>
 801302e:	4b50      	ldr	r3, [pc, #320]	; (8013170 <tcp_input+0x748>)
 8013030:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013034:	494f      	ldr	r1, [pc, #316]	; (8013174 <tcp_input+0x74c>)
 8013036:	4850      	ldr	r0, [pc, #320]	; (8013178 <tcp_input+0x750>)
 8013038:	f007 f99c 	bl	801a374 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	8b5b      	ldrh	r3, [r3, #26]
 8013040:	f003 0310 	and.w	r3, r3, #16
 8013044:	2b00      	cmp	r3, #0
 8013046:	d008      	beq.n	801305a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013048:	4b42      	ldr	r3, [pc, #264]	; (8013154 <tcp_input+0x72c>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4618      	mov	r0, r3
 801304e:	f7fd fbe5 	bl	801081c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013052:	69f8      	ldr	r0, [r7, #28]
 8013054:	f7fe f9d2 	bl	80113fc <tcp_abort>
            goto aborted;
 8013058:	e091      	b.n	801317e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801305a:	69fb      	ldr	r3, [r7, #28]
 801305c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00c      	beq.n	801307e <tcp_input+0x656>
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801306a:	69fb      	ldr	r3, [r7, #28]
 801306c:	6918      	ldr	r0, [r3, #16]
 801306e:	4b39      	ldr	r3, [pc, #228]	; (8013154 <tcp_input+0x72c>)
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	2300      	movs	r3, #0
 8013074:	69f9      	ldr	r1, [r7, #28]
 8013076:	47a0      	blx	r4
 8013078:	4603      	mov	r3, r0
 801307a:	74fb      	strb	r3, [r7, #19]
 801307c:	e008      	b.n	8013090 <tcp_input+0x668>
 801307e:	4b35      	ldr	r3, [pc, #212]	; (8013154 <tcp_input+0x72c>)
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	2300      	movs	r3, #0
 8013084:	69f9      	ldr	r1, [r7, #28]
 8013086:	2000      	movs	r0, #0
 8013088:	f7ff f890 	bl	80121ac <tcp_recv_null>
 801308c:	4603      	mov	r3, r0
 801308e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013090:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013094:	f113 0f0d 	cmn.w	r3, #13
 8013098:	d053      	beq.n	8013142 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801309a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d003      	beq.n	80130aa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80130a2:	4b2c      	ldr	r3, [pc, #176]	; (8013154 <tcp_input+0x72c>)
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80130aa:	4b2b      	ldr	r3, [pc, #172]	; (8013158 <tcp_input+0x730>)
 80130ac:	781b      	ldrb	r3, [r3, #0]
 80130ae:	f003 0320 	and.w	r3, r3, #32
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d030      	beq.n	8013118 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d009      	beq.n	80130d2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130c2:	7b5a      	ldrb	r2, [r3, #13]
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80130c8:	f042 0220 	orr.w	r2, r2, #32
 80130cc:	b2d2      	uxtb	r2, r2
 80130ce:	735a      	strb	r2, [r3, #13]
 80130d0:	e022      	b.n	8013118 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80130da:	d005      	beq.n	80130e8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130e0:	3301      	adds	r3, #1
 80130e2:	b29a      	uxth	r2, r3
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00b      	beq.n	801310a <tcp_input+0x6e2>
 80130f2:	69fb      	ldr	r3, [r7, #28]
 80130f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	6918      	ldr	r0, [r3, #16]
 80130fc:	2300      	movs	r3, #0
 80130fe:	2200      	movs	r2, #0
 8013100:	69f9      	ldr	r1, [r7, #28]
 8013102:	47a0      	blx	r4
 8013104:	4603      	mov	r3, r0
 8013106:	74fb      	strb	r3, [r7, #19]
 8013108:	e001      	b.n	801310e <tcp_input+0x6e6>
 801310a:	2300      	movs	r3, #0
 801310c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801310e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013112:	f113 0f0d 	cmn.w	r3, #13
 8013116:	d016      	beq.n	8013146 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013118:	4b13      	ldr	r3, [pc, #76]	; (8013168 <tcp_input+0x740>)
 801311a:	2200      	movs	r2, #0
 801311c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801311e:	69f8      	ldr	r0, [r7, #28]
 8013120:	f000 f88e 	bl	8013240 <tcp_input_delayed_close>
 8013124:	4603      	mov	r3, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d128      	bne.n	801317c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801312a:	69f8      	ldr	r0, [r7, #28]
 801312c:	f002 ff20 	bl	8015f70 <tcp_output>
 8013130:	e025      	b.n	801317e <tcp_input+0x756>
        goto aborted;
 8013132:	bf00      	nop
 8013134:	e023      	b.n	801317e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013136:	bf00      	nop
 8013138:	e021      	b.n	801317e <tcp_input+0x756>
              goto aborted;
 801313a:	bf00      	nop
 801313c:	e01f      	b.n	801317e <tcp_input+0x756>
          goto aborted;
 801313e:	bf00      	nop
 8013140:	e01d      	b.n	801317e <tcp_input+0x756>
            goto aborted;
 8013142:	bf00      	nop
 8013144:	e01b      	b.n	801317e <tcp_input+0x756>
              goto aborted;
 8013146:	bf00      	nop
 8013148:	e019      	b.n	801317e <tcp_input+0x756>
 801314a:	bf00      	nop
 801314c:	2004f5e8 	.word	0x2004f5e8
 8013150:	2004f5f8 	.word	0x2004f5f8
 8013154:	2004f618 	.word	0x2004f618
 8013158:	2004f615 	.word	0x2004f615
 801315c:	2004f610 	.word	0x2004f610
 8013160:	2004f614 	.word	0x2004f614
 8013164:	2004f612 	.word	0x2004f612
 8013168:	2004f61c 	.word	0x2004f61c
 801316c:	2004f5dc 	.word	0x2004f5dc
 8013170:	0801cfcc 	.word	0x0801cfcc
 8013174:	0801d180 	.word	0x0801d180
 8013178:	0801d018 	.word	0x0801d018
          goto aborted;
 801317c:	bf00      	nop
    tcp_input_pcb = NULL;
 801317e:	4b27      	ldr	r3, [pc, #156]	; (801321c <tcp_input+0x7f4>)
 8013180:	2200      	movs	r2, #0
 8013182:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013184:	4b26      	ldr	r3, [pc, #152]	; (8013220 <tcp_input+0x7f8>)
 8013186:	2200      	movs	r2, #0
 8013188:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801318a:	4b26      	ldr	r3, [pc, #152]	; (8013224 <tcp_input+0x7fc>)
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d03f      	beq.n	8013212 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013192:	4b24      	ldr	r3, [pc, #144]	; (8013224 <tcp_input+0x7fc>)
 8013194:	685b      	ldr	r3, [r3, #4]
 8013196:	4618      	mov	r0, r3
 8013198:	f7fd fb40 	bl	801081c <pbuf_free>
      inseg.p = NULL;
 801319c:	4b21      	ldr	r3, [pc, #132]	; (8013224 <tcp_input+0x7fc>)
 801319e:	2200      	movs	r2, #0
 80131a0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80131a2:	e036      	b.n	8013212 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80131a4:	4b20      	ldr	r3, [pc, #128]	; (8013228 <tcp_input+0x800>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	899b      	ldrh	r3, [r3, #12]
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7fb ff43 	bl	800f038 <lwip_htons>
 80131b2:	4603      	mov	r3, r0
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	f003 0304 	and.w	r3, r3, #4
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d118      	bne.n	80131f0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131be:	4b1b      	ldr	r3, [pc, #108]	; (801322c <tcp_input+0x804>)
 80131c0:	6819      	ldr	r1, [r3, #0]
 80131c2:	4b1b      	ldr	r3, [pc, #108]	; (8013230 <tcp_input+0x808>)
 80131c4:	881b      	ldrh	r3, [r3, #0]
 80131c6:	461a      	mov	r2, r3
 80131c8:	4b1a      	ldr	r3, [pc, #104]	; (8013234 <tcp_input+0x80c>)
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131ce:	4b16      	ldr	r3, [pc, #88]	; (8013228 <tcp_input+0x800>)
 80131d0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131d2:	885b      	ldrh	r3, [r3, #2]
 80131d4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80131d6:	4a14      	ldr	r2, [pc, #80]	; (8013228 <tcp_input+0x800>)
 80131d8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80131da:	8812      	ldrh	r2, [r2, #0]
 80131dc:	b292      	uxth	r2, r2
 80131de:	9202      	str	r2, [sp, #8]
 80131e0:	9301      	str	r3, [sp, #4]
 80131e2:	4b15      	ldr	r3, [pc, #84]	; (8013238 <tcp_input+0x810>)
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	4b15      	ldr	r3, [pc, #84]	; (801323c <tcp_input+0x814>)
 80131e8:	4602      	mov	r2, r0
 80131ea:	2000      	movs	r0, #0
 80131ec:	f003 fc74 	bl	8016ad8 <tcp_rst>
    pbuf_free(p);
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7fd fb13 	bl	801081c <pbuf_free>
  return;
 80131f6:	e00c      	b.n	8013212 <tcp_input+0x7ea>
    goto dropped;
 80131f8:	bf00      	nop
 80131fa:	e006      	b.n	801320a <tcp_input+0x7e2>
    goto dropped;
 80131fc:	bf00      	nop
 80131fe:	e004      	b.n	801320a <tcp_input+0x7e2>
    goto dropped;
 8013200:	bf00      	nop
 8013202:	e002      	b.n	801320a <tcp_input+0x7e2>
      goto dropped;
 8013204:	bf00      	nop
 8013206:	e000      	b.n	801320a <tcp_input+0x7e2>
      goto dropped;
 8013208:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801320a:	6878      	ldr	r0, [r7, #4]
 801320c:	f7fd fb06 	bl	801081c <pbuf_free>
 8013210:	e000      	b.n	8013214 <tcp_input+0x7ec>
  return;
 8013212:	bf00      	nop
}
 8013214:	3724      	adds	r7, #36	; 0x24
 8013216:	46bd      	mov	sp, r7
 8013218:	bd90      	pop	{r4, r7, pc}
 801321a:	bf00      	nop
 801321c:	2004f61c 	.word	0x2004f61c
 8013220:	2004f618 	.word	0x2004f618
 8013224:	2004f5e8 	.word	0x2004f5e8
 8013228:	2004f5f8 	.word	0x2004f5f8
 801322c:	2004f60c 	.word	0x2004f60c
 8013230:	2004f612 	.word	0x2004f612
 8013234:	2004f608 	.word	0x2004f608
 8013238:	2004b0cc 	.word	0x2004b0cc
 801323c:	2004b0d0 	.word	0x2004b0d0

08013240 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d106      	bne.n	801325c <tcp_input_delayed_close+0x1c>
 801324e:	4b17      	ldr	r3, [pc, #92]	; (80132ac <tcp_input_delayed_close+0x6c>)
 8013250:	f240 225a 	movw	r2, #602	; 0x25a
 8013254:	4916      	ldr	r1, [pc, #88]	; (80132b0 <tcp_input_delayed_close+0x70>)
 8013256:	4817      	ldr	r0, [pc, #92]	; (80132b4 <tcp_input_delayed_close+0x74>)
 8013258:	f007 f88c 	bl	801a374 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801325c:	4b16      	ldr	r3, [pc, #88]	; (80132b8 <tcp_input_delayed_close+0x78>)
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	f003 0310 	and.w	r3, r3, #16
 8013264:	2b00      	cmp	r3, #0
 8013266:	d01c      	beq.n	80132a2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	8b5b      	ldrh	r3, [r3, #26]
 801326c:	f003 0310 	and.w	r3, r3, #16
 8013270:	2b00      	cmp	r3, #0
 8013272:	d10d      	bne.n	8013290 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801327a:	2b00      	cmp	r3, #0
 801327c:	d008      	beq.n	8013290 <tcp_input_delayed_close+0x50>
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	6912      	ldr	r2, [r2, #16]
 8013288:	f06f 010e 	mvn.w	r1, #14
 801328c:	4610      	mov	r0, r2
 801328e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013290:	6879      	ldr	r1, [r7, #4]
 8013292:	480a      	ldr	r0, [pc, #40]	; (80132bc <tcp_input_delayed_close+0x7c>)
 8013294:	f7ff fa50 	bl	8012738 <tcp_pcb_remove>
    tcp_free(pcb);
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7fd fd6b 	bl	8010d74 <tcp_free>
    return 1;
 801329e:	2301      	movs	r3, #1
 80132a0:	e000      	b.n	80132a4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3708      	adds	r7, #8
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}
 80132ac:	0801cfcc 	.word	0x0801cfcc
 80132b0:	0801d19c 	.word	0x0801d19c
 80132b4:	0801d018 	.word	0x0801d018
 80132b8:	2004f615 	.word	0x2004f615
 80132bc:	2004f5dc 	.word	0x2004f5dc

080132c0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80132c0:	b590      	push	{r4, r7, lr}
 80132c2:	b08b      	sub	sp, #44	; 0x2c
 80132c4:	af04      	add	r7, sp, #16
 80132c6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80132c8:	4b6f      	ldr	r3, [pc, #444]	; (8013488 <tcp_listen_input+0x1c8>)
 80132ca:	781b      	ldrb	r3, [r3, #0]
 80132cc:	f003 0304 	and.w	r3, r3, #4
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	f040 80d2 	bne.w	801347a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d106      	bne.n	80132ea <tcp_listen_input+0x2a>
 80132dc:	4b6b      	ldr	r3, [pc, #428]	; (801348c <tcp_listen_input+0x1cc>)
 80132de:	f240 2281 	movw	r2, #641	; 0x281
 80132e2:	496b      	ldr	r1, [pc, #428]	; (8013490 <tcp_listen_input+0x1d0>)
 80132e4:	486b      	ldr	r0, [pc, #428]	; (8013494 <tcp_listen_input+0x1d4>)
 80132e6:	f007 f845 	bl	801a374 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80132ea:	4b67      	ldr	r3, [pc, #412]	; (8013488 <tcp_listen_input+0x1c8>)
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	f003 0310 	and.w	r3, r3, #16
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d019      	beq.n	801332a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132f6:	4b68      	ldr	r3, [pc, #416]	; (8013498 <tcp_listen_input+0x1d8>)
 80132f8:	6819      	ldr	r1, [r3, #0]
 80132fa:	4b68      	ldr	r3, [pc, #416]	; (801349c <tcp_listen_input+0x1dc>)
 80132fc:	881b      	ldrh	r3, [r3, #0]
 80132fe:	461a      	mov	r2, r3
 8013300:	4b67      	ldr	r3, [pc, #412]	; (80134a0 <tcp_listen_input+0x1e0>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013306:	4b67      	ldr	r3, [pc, #412]	; (80134a4 <tcp_listen_input+0x1e4>)
 8013308:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801330a:	885b      	ldrh	r3, [r3, #2]
 801330c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801330e:	4a65      	ldr	r2, [pc, #404]	; (80134a4 <tcp_listen_input+0x1e4>)
 8013310:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013312:	8812      	ldrh	r2, [r2, #0]
 8013314:	b292      	uxth	r2, r2
 8013316:	9202      	str	r2, [sp, #8]
 8013318:	9301      	str	r3, [sp, #4]
 801331a:	4b63      	ldr	r3, [pc, #396]	; (80134a8 <tcp_listen_input+0x1e8>)
 801331c:	9300      	str	r3, [sp, #0]
 801331e:	4b63      	ldr	r3, [pc, #396]	; (80134ac <tcp_listen_input+0x1ec>)
 8013320:	4602      	mov	r2, r0
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f003 fbd8 	bl	8016ad8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013328:	e0a9      	b.n	801347e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801332a:	4b57      	ldr	r3, [pc, #348]	; (8013488 <tcp_listen_input+0x1c8>)
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	f003 0302 	and.w	r3, r3, #2
 8013332:	2b00      	cmp	r3, #0
 8013334:	f000 80a3 	beq.w	801347e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	7d5b      	ldrb	r3, [r3, #21]
 801333c:	4618      	mov	r0, r3
 801333e:	f7ff f859 	bl	80123f4 <tcp_alloc>
 8013342:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d111      	bne.n	801336e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	699b      	ldr	r3, [r3, #24]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00a      	beq.n	8013368 <tcp_listen_input+0xa8>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	699b      	ldr	r3, [r3, #24]
 8013356:	687a      	ldr	r2, [r7, #4]
 8013358:	6910      	ldr	r0, [r2, #16]
 801335a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801335e:	2100      	movs	r1, #0
 8013360:	4798      	blx	r3
 8013362:	4603      	mov	r3, r0
 8013364:	73bb      	strb	r3, [r7, #14]
      return;
 8013366:	e08b      	b.n	8013480 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013368:	23f0      	movs	r3, #240	; 0xf0
 801336a:	73bb      	strb	r3, [r7, #14]
      return;
 801336c:	e088      	b.n	8013480 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801336e:	4b50      	ldr	r3, [pc, #320]	; (80134b0 <tcp_listen_input+0x1f0>)
 8013370:	695a      	ldr	r2, [r3, #20]
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013376:	4b4e      	ldr	r3, [pc, #312]	; (80134b0 <tcp_listen_input+0x1f0>)
 8013378:	691a      	ldr	r2, [r3, #16]
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	8ada      	ldrh	r2, [r3, #22]
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013386:	4b47      	ldr	r3, [pc, #284]	; (80134a4 <tcp_listen_input+0x1e4>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	b29a      	uxth	r2, r3
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	2203      	movs	r2, #3
 8013396:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013398:	4b41      	ldr	r3, [pc, #260]	; (80134a0 <tcp_listen_input+0x1e0>)
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	1c5a      	adds	r2, r3, #1
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80133aa:	6978      	ldr	r0, [r7, #20]
 80133ac:	f7ff fa58 	bl	8012860 <tcp_next_iss>
 80133b0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80133b2:	697b      	ldr	r3, [r7, #20]
 80133b4:	693a      	ldr	r2, [r7, #16]
 80133b6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	693a      	ldr	r2, [r7, #16]
 80133bc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	693a      	ldr	r2, [r7, #16]
 80133c2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80133c4:	697b      	ldr	r3, [r7, #20]
 80133c6:	693a      	ldr	r2, [r7, #16]
 80133c8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80133ca:	4b35      	ldr	r3, [pc, #212]	; (80134a0 <tcp_listen_input+0x1e0>)
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	1e5a      	subs	r2, r3, #1
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	691a      	ldr	r2, [r3, #16]
 80133d8:	697b      	ldr	r3, [r7, #20]
 80133da:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	7a5b      	ldrb	r3, [r3, #9]
 80133e6:	f003 030c 	and.w	r3, r3, #12
 80133ea:	b2da      	uxtb	r2, r3
 80133ec:	697b      	ldr	r3, [r7, #20]
 80133ee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	7a1a      	ldrb	r2, [r3, #8]
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80133f8:	4b2e      	ldr	r3, [pc, #184]	; (80134b4 <tcp_listen_input+0x1f4>)
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	60da      	str	r2, [r3, #12]
 8013400:	4a2c      	ldr	r2, [pc, #176]	; (80134b4 <tcp_listen_input+0x1f4>)
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	6013      	str	r3, [r2, #0]
 8013406:	f003 fd29 	bl	8016e5c <tcp_timer_needed>
 801340a:	4b2b      	ldr	r3, [pc, #172]	; (80134b8 <tcp_listen_input+0x1f8>)
 801340c:	2201      	movs	r2, #1
 801340e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013410:	6978      	ldr	r0, [r7, #20]
 8013412:	f001 fd8f 	bl	8014f34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013416:	4b23      	ldr	r3, [pc, #140]	; (80134a4 <tcp_listen_input+0x1e4>)
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	89db      	ldrh	r3, [r3, #14]
 801341c:	b29a      	uxth	r2, r3
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013424:	697b      	ldr	r3, [r7, #20]
 8013426:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	3304      	adds	r3, #4
 8013438:	4618      	mov	r0, r3
 801343a:	f005 fa21 	bl	8018880 <ip4_route>
 801343e:	4601      	mov	r1, r0
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	3304      	adds	r3, #4
 8013444:	461a      	mov	r2, r3
 8013446:	4620      	mov	r0, r4
 8013448:	f7ff fa30 	bl	80128ac <tcp_eff_send_mss_netif>
 801344c:	4603      	mov	r3, r0
 801344e:	461a      	mov	r2, r3
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013454:	2112      	movs	r1, #18
 8013456:	6978      	ldr	r0, [r7, #20]
 8013458:	f002 fc9c 	bl	8015d94 <tcp_enqueue_flags>
 801345c:	4603      	mov	r3, r0
 801345e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d004      	beq.n	8013472 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013468:	2100      	movs	r1, #0
 801346a:	6978      	ldr	r0, [r7, #20]
 801346c:	f7fd ff08 	bl	8011280 <tcp_abandon>
      return;
 8013470:	e006      	b.n	8013480 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013472:	6978      	ldr	r0, [r7, #20]
 8013474:	f002 fd7c 	bl	8015f70 <tcp_output>
  return;
 8013478:	e001      	b.n	801347e <tcp_listen_input+0x1be>
    return;
 801347a:	bf00      	nop
 801347c:	e000      	b.n	8013480 <tcp_listen_input+0x1c0>
  return;
 801347e:	bf00      	nop
}
 8013480:	371c      	adds	r7, #28
 8013482:	46bd      	mov	sp, r7
 8013484:	bd90      	pop	{r4, r7, pc}
 8013486:	bf00      	nop
 8013488:	2004f614 	.word	0x2004f614
 801348c:	0801cfcc 	.word	0x0801cfcc
 8013490:	0801d1c4 	.word	0x0801d1c4
 8013494:	0801d018 	.word	0x0801d018
 8013498:	2004f60c 	.word	0x2004f60c
 801349c:	2004f612 	.word	0x2004f612
 80134a0:	2004f608 	.word	0x2004f608
 80134a4:	2004f5f8 	.word	0x2004f5f8
 80134a8:	2004b0cc 	.word	0x2004b0cc
 80134ac:	2004b0d0 	.word	0x2004b0d0
 80134b0:	2004b0bc 	.word	0x2004b0bc
 80134b4:	2004f5dc 	.word	0x2004f5dc
 80134b8:	2004f5e4 	.word	0x2004f5e4

080134bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af04      	add	r7, sp, #16
 80134c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80134c4:	4b2f      	ldr	r3, [pc, #188]	; (8013584 <tcp_timewait_input+0xc8>)
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	f003 0304 	and.w	r3, r3, #4
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d153      	bne.n	8013578 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d106      	bne.n	80134e4 <tcp_timewait_input+0x28>
 80134d6:	4b2c      	ldr	r3, [pc, #176]	; (8013588 <tcp_timewait_input+0xcc>)
 80134d8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80134dc:	492b      	ldr	r1, [pc, #172]	; (801358c <tcp_timewait_input+0xd0>)
 80134de:	482c      	ldr	r0, [pc, #176]	; (8013590 <tcp_timewait_input+0xd4>)
 80134e0:	f006 ff48 	bl	801a374 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80134e4:	4b27      	ldr	r3, [pc, #156]	; (8013584 <tcp_timewait_input+0xc8>)
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	f003 0302 	and.w	r3, r3, #2
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d02a      	beq.n	8013546 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80134f0:	4b28      	ldr	r3, [pc, #160]	; (8013594 <tcp_timewait_input+0xd8>)
 80134f2:	681a      	ldr	r2, [r3, #0]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134f8:	1ad3      	subs	r3, r2, r3
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	db2d      	blt.n	801355a <tcp_timewait_input+0x9e>
 80134fe:	4b25      	ldr	r3, [pc, #148]	; (8013594 <tcp_timewait_input+0xd8>)
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013506:	6879      	ldr	r1, [r7, #4]
 8013508:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801350a:	440b      	add	r3, r1
 801350c:	1ad3      	subs	r3, r2, r3
 801350e:	2b00      	cmp	r3, #0
 8013510:	dc23      	bgt.n	801355a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013512:	4b21      	ldr	r3, [pc, #132]	; (8013598 <tcp_timewait_input+0xdc>)
 8013514:	6819      	ldr	r1, [r3, #0]
 8013516:	4b21      	ldr	r3, [pc, #132]	; (801359c <tcp_timewait_input+0xe0>)
 8013518:	881b      	ldrh	r3, [r3, #0]
 801351a:	461a      	mov	r2, r3
 801351c:	4b1d      	ldr	r3, [pc, #116]	; (8013594 <tcp_timewait_input+0xd8>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013522:	4b1f      	ldr	r3, [pc, #124]	; (80135a0 <tcp_timewait_input+0xe4>)
 8013524:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013526:	885b      	ldrh	r3, [r3, #2]
 8013528:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801352a:	4a1d      	ldr	r2, [pc, #116]	; (80135a0 <tcp_timewait_input+0xe4>)
 801352c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801352e:	8812      	ldrh	r2, [r2, #0]
 8013530:	b292      	uxth	r2, r2
 8013532:	9202      	str	r2, [sp, #8]
 8013534:	9301      	str	r3, [sp, #4]
 8013536:	4b1b      	ldr	r3, [pc, #108]	; (80135a4 <tcp_timewait_input+0xe8>)
 8013538:	9300      	str	r3, [sp, #0]
 801353a:	4b1b      	ldr	r3, [pc, #108]	; (80135a8 <tcp_timewait_input+0xec>)
 801353c:	4602      	mov	r2, r0
 801353e:	6878      	ldr	r0, [r7, #4]
 8013540:	f003 faca 	bl	8016ad8 <tcp_rst>
      return;
 8013544:	e01b      	b.n	801357e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013546:	4b0f      	ldr	r3, [pc, #60]	; (8013584 <tcp_timewait_input+0xc8>)
 8013548:	781b      	ldrb	r3, [r3, #0]
 801354a:	f003 0301 	and.w	r3, r3, #1
 801354e:	2b00      	cmp	r3, #0
 8013550:	d003      	beq.n	801355a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013552:	4b16      	ldr	r3, [pc, #88]	; (80135ac <tcp_timewait_input+0xf0>)
 8013554:	681a      	ldr	r2, [r3, #0]
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801355a:	4b10      	ldr	r3, [pc, #64]	; (801359c <tcp_timewait_input+0xe0>)
 801355c:	881b      	ldrh	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d00c      	beq.n	801357c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	8b5b      	ldrh	r3, [r3, #26]
 8013566:	f043 0302 	orr.w	r3, r3, #2
 801356a:	b29a      	uxth	r2, r3
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f002 fcfd 	bl	8015f70 <tcp_output>
  }
  return;
 8013576:	e001      	b.n	801357c <tcp_timewait_input+0xc0>
    return;
 8013578:	bf00      	nop
 801357a:	e000      	b.n	801357e <tcp_timewait_input+0xc2>
  return;
 801357c:	bf00      	nop
}
 801357e:	3708      	adds	r7, #8
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	2004f614 	.word	0x2004f614
 8013588:	0801cfcc 	.word	0x0801cfcc
 801358c:	0801d1e4 	.word	0x0801d1e4
 8013590:	0801d018 	.word	0x0801d018
 8013594:	2004f608 	.word	0x2004f608
 8013598:	2004f60c 	.word	0x2004f60c
 801359c:	2004f612 	.word	0x2004f612
 80135a0:	2004f5f8 	.word	0x2004f5f8
 80135a4:	2004b0cc 	.word	0x2004b0cc
 80135a8:	2004b0d0 	.word	0x2004b0d0
 80135ac:	2004f5d0 	.word	0x2004f5d0

080135b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80135b0:	b590      	push	{r4, r7, lr}
 80135b2:	b08d      	sub	sp, #52	; 0x34
 80135b4:	af04      	add	r7, sp, #16
 80135b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80135b8:	2300      	movs	r3, #0
 80135ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80135bc:	2300      	movs	r3, #0
 80135be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d106      	bne.n	80135d4 <tcp_process+0x24>
 80135c6:	4b9d      	ldr	r3, [pc, #628]	; (801383c <tcp_process+0x28c>)
 80135c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80135cc:	499c      	ldr	r1, [pc, #624]	; (8013840 <tcp_process+0x290>)
 80135ce:	489d      	ldr	r0, [pc, #628]	; (8013844 <tcp_process+0x294>)
 80135d0:	f006 fed0 	bl	801a374 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80135d4:	4b9c      	ldr	r3, [pc, #624]	; (8013848 <tcp_process+0x298>)
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	f003 0304 	and.w	r3, r3, #4
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d04e      	beq.n	801367e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	7d1b      	ldrb	r3, [r3, #20]
 80135e4:	2b02      	cmp	r3, #2
 80135e6:	d108      	bne.n	80135fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135ec:	4b97      	ldr	r3, [pc, #604]	; (801384c <tcp_process+0x29c>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d123      	bne.n	801363c <tcp_process+0x8c>
        acceptable = 1;
 80135f4:	2301      	movs	r3, #1
 80135f6:	76fb      	strb	r3, [r7, #27]
 80135f8:	e020      	b.n	801363c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135fe:	4b94      	ldr	r3, [pc, #592]	; (8013850 <tcp_process+0x2a0>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	429a      	cmp	r2, r3
 8013604:	d102      	bne.n	801360c <tcp_process+0x5c>
        acceptable = 1;
 8013606:	2301      	movs	r3, #1
 8013608:	76fb      	strb	r3, [r7, #27]
 801360a:	e017      	b.n	801363c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801360c:	4b90      	ldr	r3, [pc, #576]	; (8013850 <tcp_process+0x2a0>)
 801360e:	681a      	ldr	r2, [r3, #0]
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	2b00      	cmp	r3, #0
 8013618:	db10      	blt.n	801363c <tcp_process+0x8c>
 801361a:	4b8d      	ldr	r3, [pc, #564]	; (8013850 <tcp_process+0x2a0>)
 801361c:	681a      	ldr	r2, [r3, #0]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013622:	6879      	ldr	r1, [r7, #4]
 8013624:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013626:	440b      	add	r3, r1
 8013628:	1ad3      	subs	r3, r2, r3
 801362a:	2b00      	cmp	r3, #0
 801362c:	dc06      	bgt.n	801363c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	8b5b      	ldrh	r3, [r3, #26]
 8013632:	f043 0302 	orr.w	r3, r3, #2
 8013636:	b29a      	uxth	r2, r3
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801363c:	7efb      	ldrb	r3, [r7, #27]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d01b      	beq.n	801367a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	7d1b      	ldrb	r3, [r3, #20]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <tcp_process+0xa8>
 801364a:	4b7c      	ldr	r3, [pc, #496]	; (801383c <tcp_process+0x28c>)
 801364c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013650:	4980      	ldr	r1, [pc, #512]	; (8013854 <tcp_process+0x2a4>)
 8013652:	487c      	ldr	r0, [pc, #496]	; (8013844 <tcp_process+0x294>)
 8013654:	f006 fe8e 	bl	801a374 <iprintf>
      recv_flags |= TF_RESET;
 8013658:	4b7f      	ldr	r3, [pc, #508]	; (8013858 <tcp_process+0x2a8>)
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	f043 0308 	orr.w	r3, r3, #8
 8013660:	b2da      	uxtb	r2, r3
 8013662:	4b7d      	ldr	r3, [pc, #500]	; (8013858 <tcp_process+0x2a8>)
 8013664:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	8b5b      	ldrh	r3, [r3, #26]
 801366a:	f023 0301 	bic.w	r3, r3, #1
 801366e:	b29a      	uxth	r2, r3
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013674:	f06f 030d 	mvn.w	r3, #13
 8013678:	e37a      	b.n	8013d70 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801367a:	2300      	movs	r3, #0
 801367c:	e378      	b.n	8013d70 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801367e:	4b72      	ldr	r3, [pc, #456]	; (8013848 <tcp_process+0x298>)
 8013680:	781b      	ldrb	r3, [r3, #0]
 8013682:	f003 0302 	and.w	r3, r3, #2
 8013686:	2b00      	cmp	r3, #0
 8013688:	d010      	beq.n	80136ac <tcp_process+0xfc>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	7d1b      	ldrb	r3, [r3, #20]
 801368e:	2b02      	cmp	r3, #2
 8013690:	d00c      	beq.n	80136ac <tcp_process+0xfc>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	7d1b      	ldrb	r3, [r3, #20]
 8013696:	2b03      	cmp	r3, #3
 8013698:	d008      	beq.n	80136ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	8b5b      	ldrh	r3, [r3, #26]
 801369e:	f043 0302 	orr.w	r3, r3, #2
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80136a8:	2300      	movs	r3, #0
 80136aa:	e361      	b.n	8013d70 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	8b5b      	ldrh	r3, [r3, #26]
 80136b0:	f003 0310 	and.w	r3, r3, #16
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d103      	bne.n	80136c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80136b8:	4b68      	ldr	r3, [pc, #416]	; (801385c <tcp_process+0x2ac>)
 80136ba:	681a      	ldr	r2, [r3, #0]
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2200      	movs	r2, #0
 80136c4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2200      	movs	r2, #0
 80136cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f001 fc2f 	bl	8014f34 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	7d1b      	ldrb	r3, [r3, #20]
 80136da:	3b02      	subs	r3, #2
 80136dc:	2b07      	cmp	r3, #7
 80136de:	f200 8337 	bhi.w	8013d50 <tcp_process+0x7a0>
 80136e2:	a201      	add	r2, pc, #4	; (adr r2, 80136e8 <tcp_process+0x138>)
 80136e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136e8:	08013709 	.word	0x08013709
 80136ec:	08013939 	.word	0x08013939
 80136f0:	08013ab1 	.word	0x08013ab1
 80136f4:	08013adb 	.word	0x08013adb
 80136f8:	08013bff 	.word	0x08013bff
 80136fc:	08013ab1 	.word	0x08013ab1
 8013700:	08013c8b 	.word	0x08013c8b
 8013704:	08013d1b 	.word	0x08013d1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013708:	4b4f      	ldr	r3, [pc, #316]	; (8013848 <tcp_process+0x298>)
 801370a:	781b      	ldrb	r3, [r3, #0]
 801370c:	f003 0310 	and.w	r3, r3, #16
 8013710:	2b00      	cmp	r3, #0
 8013712:	f000 80e4 	beq.w	80138de <tcp_process+0x32e>
 8013716:	4b4c      	ldr	r3, [pc, #304]	; (8013848 <tcp_process+0x298>)
 8013718:	781b      	ldrb	r3, [r3, #0]
 801371a:	f003 0302 	and.w	r3, r3, #2
 801371e:	2b00      	cmp	r3, #0
 8013720:	f000 80dd 	beq.w	80138de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013728:	1c5a      	adds	r2, r3, #1
 801372a:	4b48      	ldr	r3, [pc, #288]	; (801384c <tcp_process+0x29c>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	429a      	cmp	r2, r3
 8013730:	f040 80d5 	bne.w	80138de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013734:	4b46      	ldr	r3, [pc, #280]	; (8013850 <tcp_process+0x2a0>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013746:	4b41      	ldr	r3, [pc, #260]	; (801384c <tcp_process+0x29c>)
 8013748:	681a      	ldr	r2, [r3, #0]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801374e:	4b44      	ldr	r3, [pc, #272]	; (8013860 <tcp_process+0x2b0>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	89db      	ldrh	r3, [r3, #14]
 8013754:	b29a      	uxth	r2, r3
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013768:	4b39      	ldr	r3, [pc, #228]	; (8013850 <tcp_process+0x2a0>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	1e5a      	subs	r2, r3, #1
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2204      	movs	r2, #4
 8013776:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	3304      	adds	r3, #4
 8013780:	4618      	mov	r0, r3
 8013782:	f005 f87d 	bl	8018880 <ip4_route>
 8013786:	4601      	mov	r1, r0
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	3304      	adds	r3, #4
 801378c:	461a      	mov	r2, r3
 801378e:	4620      	mov	r0, r4
 8013790:	f7ff f88c 	bl	80128ac <tcp_eff_send_mss_netif>
 8013794:	4603      	mov	r3, r0
 8013796:	461a      	mov	r2, r3
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137a0:	009a      	lsls	r2, r3, #2
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137a6:	005b      	lsls	r3, r3, #1
 80137a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80137ac:	428b      	cmp	r3, r1
 80137ae:	bf38      	it	cc
 80137b0:	460b      	movcc	r3, r1
 80137b2:	429a      	cmp	r2, r3
 80137b4:	d204      	bcs.n	80137c0 <tcp_process+0x210>
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	b29b      	uxth	r3, r3
 80137be:	e00d      	b.n	80137dc <tcp_process+0x22c>
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137c4:	005b      	lsls	r3, r3, #1
 80137c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80137ca:	4293      	cmp	r3, r2
 80137cc:	d904      	bls.n	80137d8 <tcp_process+0x228>
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137d2:	005b      	lsls	r3, r3, #1
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	e001      	b.n	80137dc <tcp_process+0x22c>
 80137d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80137dc:	687a      	ldr	r2, [r7, #4]
 80137de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d106      	bne.n	80137fa <tcp_process+0x24a>
 80137ec:	4b13      	ldr	r3, [pc, #76]	; (801383c <tcp_process+0x28c>)
 80137ee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80137f2:	491c      	ldr	r1, [pc, #112]	; (8013864 <tcp_process+0x2b4>)
 80137f4:	4813      	ldr	r0, [pc, #76]	; (8013844 <tcp_process+0x294>)
 80137f6:	f006 fdbd 	bl	801a374 <iprintf>
        --pcb->snd_queuelen;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013800:	3b01      	subs	r3, #1
 8013802:	b29a      	uxth	r2, r3
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801380e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d12a      	bne.n	801386c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d106      	bne.n	8013830 <tcp_process+0x280>
 8013822:	4b06      	ldr	r3, [pc, #24]	; (801383c <tcp_process+0x28c>)
 8013824:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013828:	490f      	ldr	r1, [pc, #60]	; (8013868 <tcp_process+0x2b8>)
 801382a:	4806      	ldr	r0, [pc, #24]	; (8013844 <tcp_process+0x294>)
 801382c:	f006 fda2 	bl	801a374 <iprintf>
          pcb->unsent = rseg->next;
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	66da      	str	r2, [r3, #108]	; 0x6c
 8013838:	e01c      	b.n	8013874 <tcp_process+0x2c4>
 801383a:	bf00      	nop
 801383c:	0801cfcc 	.word	0x0801cfcc
 8013840:	0801d204 	.word	0x0801d204
 8013844:	0801d018 	.word	0x0801d018
 8013848:	2004f614 	.word	0x2004f614
 801384c:	2004f60c 	.word	0x2004f60c
 8013850:	2004f608 	.word	0x2004f608
 8013854:	0801d220 	.word	0x0801d220
 8013858:	2004f615 	.word	0x2004f615
 801385c:	2004f5d0 	.word	0x2004f5d0
 8013860:	2004f5f8 	.word	0x2004f5f8
 8013864:	0801d240 	.word	0x0801d240
 8013868:	0801d258 	.word	0x0801d258
        } else {
          pcb->unacked = rseg->next;
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013874:	69f8      	ldr	r0, [r7, #28]
 8013876:	f7fe fc54 	bl	8012122 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801387e:	2b00      	cmp	r3, #0
 8013880:	d104      	bne.n	801388c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013888:	861a      	strh	r2, [r3, #48]	; 0x30
 801388a:	e006      	b.n	801389a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2200      	movs	r2, #0
 8013890:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2200      	movs	r2, #0
 8013896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d00a      	beq.n	80138ba <tcp_process+0x30a>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138aa:	687a      	ldr	r2, [r7, #4]
 80138ac:	6910      	ldr	r0, [r2, #16]
 80138ae:	2200      	movs	r2, #0
 80138b0:	6879      	ldr	r1, [r7, #4]
 80138b2:	4798      	blx	r3
 80138b4:	4603      	mov	r3, r0
 80138b6:	76bb      	strb	r3, [r7, #26]
 80138b8:	e001      	b.n	80138be <tcp_process+0x30e>
 80138ba:	2300      	movs	r3, #0
 80138bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80138be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80138c2:	f113 0f0d 	cmn.w	r3, #13
 80138c6:	d102      	bne.n	80138ce <tcp_process+0x31e>
          return ERR_ABRT;
 80138c8:	f06f 030c 	mvn.w	r3, #12
 80138cc:	e250      	b.n	8013d70 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	8b5b      	ldrh	r3, [r3, #26]
 80138d2:	f043 0302 	orr.w	r3, r3, #2
 80138d6:	b29a      	uxth	r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80138dc:	e23a      	b.n	8013d54 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80138de:	4b98      	ldr	r3, [pc, #608]	; (8013b40 <tcp_process+0x590>)
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	f003 0310 	and.w	r3, r3, #16
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f000 8234 	beq.w	8013d54 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138ec:	4b95      	ldr	r3, [pc, #596]	; (8013b44 <tcp_process+0x594>)
 80138ee:	6819      	ldr	r1, [r3, #0]
 80138f0:	4b95      	ldr	r3, [pc, #596]	; (8013b48 <tcp_process+0x598>)
 80138f2:	881b      	ldrh	r3, [r3, #0]
 80138f4:	461a      	mov	r2, r3
 80138f6:	4b95      	ldr	r3, [pc, #596]	; (8013b4c <tcp_process+0x59c>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138fc:	4b94      	ldr	r3, [pc, #592]	; (8013b50 <tcp_process+0x5a0>)
 80138fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013900:	885b      	ldrh	r3, [r3, #2]
 8013902:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013904:	4a92      	ldr	r2, [pc, #584]	; (8013b50 <tcp_process+0x5a0>)
 8013906:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013908:	8812      	ldrh	r2, [r2, #0]
 801390a:	b292      	uxth	r2, r2
 801390c:	9202      	str	r2, [sp, #8]
 801390e:	9301      	str	r3, [sp, #4]
 8013910:	4b90      	ldr	r3, [pc, #576]	; (8013b54 <tcp_process+0x5a4>)
 8013912:	9300      	str	r3, [sp, #0]
 8013914:	4b90      	ldr	r3, [pc, #576]	; (8013b58 <tcp_process+0x5a8>)
 8013916:	4602      	mov	r2, r0
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f003 f8dd 	bl	8016ad8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013924:	2b05      	cmp	r3, #5
 8013926:	f200 8215 	bhi.w	8013d54 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2200      	movs	r2, #0
 801392e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f002 fea7 	bl	8016684 <tcp_rexmit_rto>
      break;
 8013936:	e20d      	b.n	8013d54 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013938:	4b81      	ldr	r3, [pc, #516]	; (8013b40 <tcp_process+0x590>)
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	f003 0310 	and.w	r3, r3, #16
 8013940:	2b00      	cmp	r3, #0
 8013942:	f000 80a1 	beq.w	8013a88 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013946:	4b7f      	ldr	r3, [pc, #508]	; (8013b44 <tcp_process+0x594>)
 8013948:	681a      	ldr	r2, [r3, #0]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801394e:	1ad3      	subs	r3, r2, r3
 8013950:	3b01      	subs	r3, #1
 8013952:	2b00      	cmp	r3, #0
 8013954:	db7e      	blt.n	8013a54 <tcp_process+0x4a4>
 8013956:	4b7b      	ldr	r3, [pc, #492]	; (8013b44 <tcp_process+0x594>)
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801395e:	1ad3      	subs	r3, r2, r3
 8013960:	2b00      	cmp	r3, #0
 8013962:	dc77      	bgt.n	8013a54 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2204      	movs	r2, #4
 8013968:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801396e:	2b00      	cmp	r3, #0
 8013970:	d102      	bne.n	8013978 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013972:	23fa      	movs	r3, #250	; 0xfa
 8013974:	76bb      	strb	r3, [r7, #26]
 8013976:	e01d      	b.n	80139b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801397c:	699b      	ldr	r3, [r3, #24]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <tcp_process+0x3e0>
 8013982:	4b76      	ldr	r3, [pc, #472]	; (8013b5c <tcp_process+0x5ac>)
 8013984:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013988:	4975      	ldr	r1, [pc, #468]	; (8013b60 <tcp_process+0x5b0>)
 801398a:	4876      	ldr	r0, [pc, #472]	; (8013b64 <tcp_process+0x5b4>)
 801398c:	f006 fcf2 	bl	801a374 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013994:	699b      	ldr	r3, [r3, #24]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d00a      	beq.n	80139b0 <tcp_process+0x400>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801399e:	699b      	ldr	r3, [r3, #24]
 80139a0:	687a      	ldr	r2, [r7, #4]
 80139a2:	6910      	ldr	r0, [r2, #16]
 80139a4:	2200      	movs	r2, #0
 80139a6:	6879      	ldr	r1, [r7, #4]
 80139a8:	4798      	blx	r3
 80139aa:	4603      	mov	r3, r0
 80139ac:	76bb      	strb	r3, [r7, #26]
 80139ae:	e001      	b.n	80139b4 <tcp_process+0x404>
 80139b0:	23f0      	movs	r3, #240	; 0xf0
 80139b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80139b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80139bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80139c0:	f113 0f0d 	cmn.w	r3, #13
 80139c4:	d002      	beq.n	80139cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f7fd fd18 	bl	80113fc <tcp_abort>
            }
            return ERR_ABRT;
 80139cc:	f06f 030c 	mvn.w	r3, #12
 80139d0:	e1ce      	b.n	8013d70 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f000 fae0 	bl	8013f98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80139d8:	4b63      	ldr	r3, [pc, #396]	; (8013b68 <tcp_process+0x5b8>)
 80139da:	881b      	ldrh	r3, [r3, #0]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d005      	beq.n	80139ec <tcp_process+0x43c>
            recv_acked--;
 80139e0:	4b61      	ldr	r3, [pc, #388]	; (8013b68 <tcp_process+0x5b8>)
 80139e2:	881b      	ldrh	r3, [r3, #0]
 80139e4:	3b01      	subs	r3, #1
 80139e6:	b29a      	uxth	r2, r3
 80139e8:	4b5f      	ldr	r3, [pc, #380]	; (8013b68 <tcp_process+0x5b8>)
 80139ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139f0:	009a      	lsls	r2, r3, #2
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80139fc:	428b      	cmp	r3, r1
 80139fe:	bf38      	it	cc
 8013a00:	460b      	movcc	r3, r1
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d204      	bcs.n	8013a10 <tcp_process+0x460>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a0a:	009b      	lsls	r3, r3, #2
 8013a0c:	b29b      	uxth	r3, r3
 8013a0e:	e00d      	b.n	8013a2c <tcp_process+0x47c>
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a14:	005b      	lsls	r3, r3, #1
 8013a16:	f241 121c 	movw	r2, #4380	; 0x111c
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d904      	bls.n	8013a28 <tcp_process+0x478>
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a22:	005b      	lsls	r3, r3, #1
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	e001      	b.n	8013a2c <tcp_process+0x47c>
 8013a28:	f241 131c 	movw	r3, #4380	; 0x111c
 8013a2c:	687a      	ldr	r2, [r7, #4]
 8013a2e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013a32:	4b4e      	ldr	r3, [pc, #312]	; (8013b6c <tcp_process+0x5bc>)
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	f003 0320 	and.w	r3, r3, #32
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d037      	beq.n	8013aae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	8b5b      	ldrh	r3, [r3, #26]
 8013a42:	f043 0302 	orr.w	r3, r3, #2
 8013a46:	b29a      	uxth	r2, r3
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	2207      	movs	r2, #7
 8013a50:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013a52:	e02c      	b.n	8013aae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a54:	4b3b      	ldr	r3, [pc, #236]	; (8013b44 <tcp_process+0x594>)
 8013a56:	6819      	ldr	r1, [r3, #0]
 8013a58:	4b3b      	ldr	r3, [pc, #236]	; (8013b48 <tcp_process+0x598>)
 8013a5a:	881b      	ldrh	r3, [r3, #0]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	4b3b      	ldr	r3, [pc, #236]	; (8013b4c <tcp_process+0x59c>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a64:	4b3a      	ldr	r3, [pc, #232]	; (8013b50 <tcp_process+0x5a0>)
 8013a66:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a68:	885b      	ldrh	r3, [r3, #2]
 8013a6a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a6c:	4a38      	ldr	r2, [pc, #224]	; (8013b50 <tcp_process+0x5a0>)
 8013a6e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a70:	8812      	ldrh	r2, [r2, #0]
 8013a72:	b292      	uxth	r2, r2
 8013a74:	9202      	str	r2, [sp, #8]
 8013a76:	9301      	str	r3, [sp, #4]
 8013a78:	4b36      	ldr	r3, [pc, #216]	; (8013b54 <tcp_process+0x5a4>)
 8013a7a:	9300      	str	r3, [sp, #0]
 8013a7c:	4b36      	ldr	r3, [pc, #216]	; (8013b58 <tcp_process+0x5a8>)
 8013a7e:	4602      	mov	r2, r0
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f003 f829 	bl	8016ad8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013a86:	e167      	b.n	8013d58 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013a88:	4b2d      	ldr	r3, [pc, #180]	; (8013b40 <tcp_process+0x590>)
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	f003 0302 	and.w	r3, r3, #2
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	f000 8161 	beq.w	8013d58 <tcp_process+0x7a8>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a9a:	1e5a      	subs	r2, r3, #1
 8013a9c:	4b2b      	ldr	r3, [pc, #172]	; (8013b4c <tcp_process+0x59c>)
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	f040 8159 	bne.w	8013d58 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f002 fe0e 	bl	80166c8 <tcp_rexmit>
      break;
 8013aac:	e154      	b.n	8013d58 <tcp_process+0x7a8>
 8013aae:	e153      	b.n	8013d58 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 fa71 	bl	8013f98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013ab6:	4b2d      	ldr	r3, [pc, #180]	; (8013b6c <tcp_process+0x5bc>)
 8013ab8:	781b      	ldrb	r3, [r3, #0]
 8013aba:	f003 0320 	and.w	r3, r3, #32
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f000 814c 	beq.w	8013d5c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	8b5b      	ldrh	r3, [r3, #26]
 8013ac8:	f043 0302 	orr.w	r3, r3, #2
 8013acc:	b29a      	uxth	r2, r3
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2207      	movs	r2, #7
 8013ad6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013ad8:	e140      	b.n	8013d5c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 fa5c 	bl	8013f98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013ae0:	4b22      	ldr	r3, [pc, #136]	; (8013b6c <tcp_process+0x5bc>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	f003 0320 	and.w	r3, r3, #32
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d071      	beq.n	8013bd0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013aec:	4b14      	ldr	r3, [pc, #80]	; (8013b40 <tcp_process+0x590>)
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	f003 0310 	and.w	r3, r3, #16
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d060      	beq.n	8013bba <tcp_process+0x60a>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013afc:	4b11      	ldr	r3, [pc, #68]	; (8013b44 <tcp_process+0x594>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d15a      	bne.n	8013bba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d156      	bne.n	8013bba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	8b5b      	ldrh	r3, [r3, #26]
 8013b10:	f043 0302 	orr.w	r3, r3, #2
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7fe fdbc 	bl	8012698 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013b20:	4b13      	ldr	r3, [pc, #76]	; (8013b70 <tcp_process+0x5c0>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d105      	bne.n	8013b36 <tcp_process+0x586>
 8013b2a:	4b11      	ldr	r3, [pc, #68]	; (8013b70 <tcp_process+0x5c0>)
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	4a0f      	ldr	r2, [pc, #60]	; (8013b70 <tcp_process+0x5c0>)
 8013b32:	6013      	str	r3, [r2, #0]
 8013b34:	e02e      	b.n	8013b94 <tcp_process+0x5e4>
 8013b36:	4b0e      	ldr	r3, [pc, #56]	; (8013b70 <tcp_process+0x5c0>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	e027      	b.n	8013b8e <tcp_process+0x5de>
 8013b3e:	bf00      	nop
 8013b40:	2004f614 	.word	0x2004f614
 8013b44:	2004f60c 	.word	0x2004f60c
 8013b48:	2004f612 	.word	0x2004f612
 8013b4c:	2004f608 	.word	0x2004f608
 8013b50:	2004f5f8 	.word	0x2004f5f8
 8013b54:	2004b0cc 	.word	0x2004b0cc
 8013b58:	2004b0d0 	.word	0x2004b0d0
 8013b5c:	0801cfcc 	.word	0x0801cfcc
 8013b60:	0801d26c 	.word	0x0801d26c
 8013b64:	0801d018 	.word	0x0801d018
 8013b68:	2004f610 	.word	0x2004f610
 8013b6c:	2004f615 	.word	0x2004f615
 8013b70:	2004f5dc 	.word	0x2004f5dc
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	687a      	ldr	r2, [r7, #4]
 8013b7a:	429a      	cmp	r2, r3
 8013b7c:	d104      	bne.n	8013b88 <tcp_process+0x5d8>
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	68da      	ldr	r2, [r3, #12]
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	60da      	str	r2, [r3, #12]
 8013b86:	e005      	b.n	8013b94 <tcp_process+0x5e4>
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d1ef      	bne.n	8013b74 <tcp_process+0x5c4>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2200      	movs	r2, #0
 8013b98:	60da      	str	r2, [r3, #12]
 8013b9a:	4b77      	ldr	r3, [pc, #476]	; (8013d78 <tcp_process+0x7c8>)
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	220a      	movs	r2, #10
 8013ba4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013ba6:	4b75      	ldr	r3, [pc, #468]	; (8013d7c <tcp_process+0x7cc>)
 8013ba8:	681a      	ldr	r2, [r3, #0]
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	60da      	str	r2, [r3, #12]
 8013bae:	4a73      	ldr	r2, [pc, #460]	; (8013d7c <tcp_process+0x7cc>)
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6013      	str	r3, [r2, #0]
 8013bb4:	f003 f952 	bl	8016e5c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013bb8:	e0d2      	b.n	8013d60 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	8b5b      	ldrh	r3, [r3, #26]
 8013bbe:	f043 0302 	orr.w	r3, r3, #2
 8013bc2:	b29a      	uxth	r2, r3
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2208      	movs	r2, #8
 8013bcc:	751a      	strb	r2, [r3, #20]
      break;
 8013bce:	e0c7      	b.n	8013d60 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bd0:	4b6b      	ldr	r3, [pc, #428]	; (8013d80 <tcp_process+0x7d0>)
 8013bd2:	781b      	ldrb	r3, [r3, #0]
 8013bd4:	f003 0310 	and.w	r3, r3, #16
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f000 80c1 	beq.w	8013d60 <tcp_process+0x7b0>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013be2:	4b68      	ldr	r3, [pc, #416]	; (8013d84 <tcp_process+0x7d4>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	f040 80ba 	bne.w	8013d60 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f040 80b5 	bne.w	8013d60 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2206      	movs	r2, #6
 8013bfa:	751a      	strb	r2, [r3, #20]
      break;
 8013bfc:	e0b0      	b.n	8013d60 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f000 f9ca 	bl	8013f98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013c04:	4b60      	ldr	r3, [pc, #384]	; (8013d88 <tcp_process+0x7d8>)
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	f003 0320 	and.w	r3, r3, #32
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	f000 80a9 	beq.w	8013d64 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	8b5b      	ldrh	r3, [r3, #26]
 8013c16:	f043 0302 	orr.w	r3, r3, #2
 8013c1a:	b29a      	uxth	r2, r3
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7fe fd39 	bl	8012698 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013c26:	4b59      	ldr	r3, [pc, #356]	; (8013d8c <tcp_process+0x7dc>)
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	687a      	ldr	r2, [r7, #4]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d105      	bne.n	8013c3c <tcp_process+0x68c>
 8013c30:	4b56      	ldr	r3, [pc, #344]	; (8013d8c <tcp_process+0x7dc>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	68db      	ldr	r3, [r3, #12]
 8013c36:	4a55      	ldr	r2, [pc, #340]	; (8013d8c <tcp_process+0x7dc>)
 8013c38:	6013      	str	r3, [r2, #0]
 8013c3a:	e013      	b.n	8013c64 <tcp_process+0x6b4>
 8013c3c:	4b53      	ldr	r3, [pc, #332]	; (8013d8c <tcp_process+0x7dc>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	613b      	str	r3, [r7, #16]
 8013c42:	e00c      	b.n	8013c5e <tcp_process+0x6ae>
 8013c44:	693b      	ldr	r3, [r7, #16]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	687a      	ldr	r2, [r7, #4]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d104      	bne.n	8013c58 <tcp_process+0x6a8>
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	68da      	ldr	r2, [r3, #12]
 8013c52:	693b      	ldr	r3, [r7, #16]
 8013c54:	60da      	str	r2, [r3, #12]
 8013c56:	e005      	b.n	8013c64 <tcp_process+0x6b4>
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	68db      	ldr	r3, [r3, #12]
 8013c5c:	613b      	str	r3, [r7, #16]
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d1ef      	bne.n	8013c44 <tcp_process+0x694>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2200      	movs	r2, #0
 8013c68:	60da      	str	r2, [r3, #12]
 8013c6a:	4b43      	ldr	r3, [pc, #268]	; (8013d78 <tcp_process+0x7c8>)
 8013c6c:	2201      	movs	r2, #1
 8013c6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	220a      	movs	r2, #10
 8013c74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013c76:	4b41      	ldr	r3, [pc, #260]	; (8013d7c <tcp_process+0x7cc>)
 8013c78:	681a      	ldr	r2, [r3, #0]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	60da      	str	r2, [r3, #12]
 8013c7e:	4a3f      	ldr	r2, [pc, #252]	; (8013d7c <tcp_process+0x7cc>)
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6013      	str	r3, [r2, #0]
 8013c84:	f003 f8ea 	bl	8016e5c <tcp_timer_needed>
      }
      break;
 8013c88:	e06c      	b.n	8013d64 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f000 f984 	bl	8013f98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013c90:	4b3b      	ldr	r3, [pc, #236]	; (8013d80 <tcp_process+0x7d0>)
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	f003 0310 	and.w	r3, r3, #16
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d065      	beq.n	8013d68 <tcp_process+0x7b8>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ca0:	4b38      	ldr	r3, [pc, #224]	; (8013d84 <tcp_process+0x7d4>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d15f      	bne.n	8013d68 <tcp_process+0x7b8>
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d15b      	bne.n	8013d68 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7fe fcf1 	bl	8012698 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013cb6:	4b35      	ldr	r3, [pc, #212]	; (8013d8c <tcp_process+0x7dc>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d105      	bne.n	8013ccc <tcp_process+0x71c>
 8013cc0:	4b32      	ldr	r3, [pc, #200]	; (8013d8c <tcp_process+0x7dc>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	4a31      	ldr	r2, [pc, #196]	; (8013d8c <tcp_process+0x7dc>)
 8013cc8:	6013      	str	r3, [r2, #0]
 8013cca:	e013      	b.n	8013cf4 <tcp_process+0x744>
 8013ccc:	4b2f      	ldr	r3, [pc, #188]	; (8013d8c <tcp_process+0x7dc>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	60fb      	str	r3, [r7, #12]
 8013cd2:	e00c      	b.n	8013cee <tcp_process+0x73e>
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d104      	bne.n	8013ce8 <tcp_process+0x738>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	68da      	ldr	r2, [r3, #12]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	60da      	str	r2, [r3, #12]
 8013ce6:	e005      	b.n	8013cf4 <tcp_process+0x744>
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	60fb      	str	r3, [r7, #12]
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d1ef      	bne.n	8013cd4 <tcp_process+0x724>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	60da      	str	r2, [r3, #12]
 8013cfa:	4b1f      	ldr	r3, [pc, #124]	; (8013d78 <tcp_process+0x7c8>)
 8013cfc:	2201      	movs	r2, #1
 8013cfe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	220a      	movs	r2, #10
 8013d04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013d06:	4b1d      	ldr	r3, [pc, #116]	; (8013d7c <tcp_process+0x7cc>)
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	60da      	str	r2, [r3, #12]
 8013d0e:	4a1b      	ldr	r2, [pc, #108]	; (8013d7c <tcp_process+0x7cc>)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6013      	str	r3, [r2, #0]
 8013d14:	f003 f8a2 	bl	8016e5c <tcp_timer_needed>
      }
      break;
 8013d18:	e026      	b.n	8013d68 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f93c 	bl	8013f98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013d20:	4b17      	ldr	r3, [pc, #92]	; (8013d80 <tcp_process+0x7d0>)
 8013d22:	781b      	ldrb	r3, [r3, #0]
 8013d24:	f003 0310 	and.w	r3, r3, #16
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d01f      	beq.n	8013d6c <tcp_process+0x7bc>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013d30:	4b14      	ldr	r3, [pc, #80]	; (8013d84 <tcp_process+0x7d4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d119      	bne.n	8013d6c <tcp_process+0x7bc>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d115      	bne.n	8013d6c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013d40:	4b11      	ldr	r3, [pc, #68]	; (8013d88 <tcp_process+0x7d8>)
 8013d42:	781b      	ldrb	r3, [r3, #0]
 8013d44:	f043 0310 	orr.w	r3, r3, #16
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	4b0f      	ldr	r3, [pc, #60]	; (8013d88 <tcp_process+0x7d8>)
 8013d4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013d4e:	e00d      	b.n	8013d6c <tcp_process+0x7bc>
    default:
      break;
 8013d50:	bf00      	nop
 8013d52:	e00c      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d54:	bf00      	nop
 8013d56:	e00a      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d58:	bf00      	nop
 8013d5a:	e008      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d5c:	bf00      	nop
 8013d5e:	e006      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d60:	bf00      	nop
 8013d62:	e004      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d64:	bf00      	nop
 8013d66:	e002      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d68:	bf00      	nop
 8013d6a:	e000      	b.n	8013d6e <tcp_process+0x7be>
      break;
 8013d6c:	bf00      	nop
  }
  return ERR_OK;
 8013d6e:	2300      	movs	r3, #0
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3724      	adds	r7, #36	; 0x24
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd90      	pop	{r4, r7, pc}
 8013d78:	2004f5e4 	.word	0x2004f5e4
 8013d7c:	2004f5e0 	.word	0x2004f5e0
 8013d80:	2004f614 	.word	0x2004f614
 8013d84:	2004f60c 	.word	0x2004f60c
 8013d88:	2004f615 	.word	0x2004f615
 8013d8c:	2004f5dc 	.word	0x2004f5dc

08013d90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013d90:	b590      	push	{r4, r7, lr}
 8013d92:	b085      	sub	sp, #20
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
 8013d98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d106      	bne.n	8013dae <tcp_oos_insert_segment+0x1e>
 8013da0:	4b3b      	ldr	r3, [pc, #236]	; (8013e90 <tcp_oos_insert_segment+0x100>)
 8013da2:	f240 421f 	movw	r2, #1055	; 0x41f
 8013da6:	493b      	ldr	r1, [pc, #236]	; (8013e94 <tcp_oos_insert_segment+0x104>)
 8013da8:	483b      	ldr	r0, [pc, #236]	; (8013e98 <tcp_oos_insert_segment+0x108>)
 8013daa:	f006 fae3 	bl	801a374 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	68db      	ldr	r3, [r3, #12]
 8013db2:	899b      	ldrh	r3, [r3, #12]
 8013db4:	b29b      	uxth	r3, r3
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fb f93e 	bl	800f038 <lwip_htons>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	b2db      	uxtb	r3, r3
 8013dc0:	f003 0301 	and.w	r3, r3, #1
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d028      	beq.n	8013e1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013dc8:	6838      	ldr	r0, [r7, #0]
 8013dca:	f7fe f995 	bl	80120f8 <tcp_segs_free>
    next = NULL;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	603b      	str	r3, [r7, #0]
 8013dd2:	e056      	b.n	8013e82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	68db      	ldr	r3, [r3, #12]
 8013dd8:	899b      	ldrh	r3, [r3, #12]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fb f92b 	bl	800f038 <lwip_htons>
 8013de2:	4603      	mov	r3, r0
 8013de4:	b2db      	uxtb	r3, r3
 8013de6:	f003 0301 	and.w	r3, r3, #1
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d00d      	beq.n	8013e0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	68db      	ldr	r3, [r3, #12]
 8013df2:	899b      	ldrh	r3, [r3, #12]
 8013df4:	b29c      	uxth	r4, r3
 8013df6:	2001      	movs	r0, #1
 8013df8:	f7fb f91e 	bl	800f038 <lwip_htons>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	461a      	mov	r2, r3
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	68db      	ldr	r3, [r3, #12]
 8013e04:	4322      	orrs	r2, r4
 8013e06:	b292      	uxth	r2, r2
 8013e08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013e14:	68f8      	ldr	r0, [r7, #12]
 8013e16:	f7fe f984 	bl	8012122 <tcp_seg_free>
    while (next &&
 8013e1a:	683b      	ldr	r3, [r7, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d00e      	beq.n	8013e3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	891b      	ldrh	r3, [r3, #8]
 8013e24:	461a      	mov	r2, r3
 8013e26:	4b1d      	ldr	r3, [pc, #116]	; (8013e9c <tcp_oos_insert_segment+0x10c>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	441a      	add	r2, r3
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	68db      	ldr	r3, [r3, #12]
 8013e30:	685b      	ldr	r3, [r3, #4]
 8013e32:	6839      	ldr	r1, [r7, #0]
 8013e34:	8909      	ldrh	r1, [r1, #8]
 8013e36:	440b      	add	r3, r1
 8013e38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	daca      	bge.n	8013dd4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d01e      	beq.n	8013e82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	891b      	ldrh	r3, [r3, #8]
 8013e48:	461a      	mov	r2, r3
 8013e4a:	4b14      	ldr	r3, [pc, #80]	; (8013e9c <tcp_oos_insert_segment+0x10c>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	441a      	add	r2, r3
 8013e50:	683b      	ldr	r3, [r7, #0]
 8013e52:	68db      	ldr	r3, [r3, #12]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	dd12      	ble.n	8013e82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	b29a      	uxth	r2, r3
 8013e64:	4b0d      	ldr	r3, [pc, #52]	; (8013e9c <tcp_oos_insert_segment+0x10c>)
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	b29b      	uxth	r3, r3
 8013e6a:	1ad3      	subs	r3, r2, r3
 8013e6c:	b29a      	uxth	r2, r3
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	685a      	ldr	r2, [r3, #4]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	891b      	ldrh	r3, [r3, #8]
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	4610      	mov	r0, r2
 8013e7e:	f7fc fb47 	bl	8010510 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	683a      	ldr	r2, [r7, #0]
 8013e86:	601a      	str	r2, [r3, #0]
}
 8013e88:	bf00      	nop
 8013e8a:	3714      	adds	r7, #20
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd90      	pop	{r4, r7, pc}
 8013e90:	0801cfcc 	.word	0x0801cfcc
 8013e94:	0801d28c 	.word	0x0801d28c
 8013e98:	0801d018 	.word	0x0801d018
 8013e9c:	2004f608 	.word	0x2004f608

08013ea0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013ea0:	b5b0      	push	{r4, r5, r7, lr}
 8013ea2:	b086      	sub	sp, #24
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	607a      	str	r2, [r7, #4]
 8013eac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013eae:	e03e      	b.n	8013f2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013eb4:	68bb      	ldr	r3, [r7, #8]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013eba:	697b      	ldr	r3, [r7, #20]
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7fc fd3a 	bl	8010938 <pbuf_clen>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ece:	8a7a      	ldrh	r2, [r7, #18]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d906      	bls.n	8013ee2 <tcp_free_acked_segments+0x42>
 8013ed4:	4b2a      	ldr	r3, [pc, #168]	; (8013f80 <tcp_free_acked_segments+0xe0>)
 8013ed6:	f240 4257 	movw	r2, #1111	; 0x457
 8013eda:	492a      	ldr	r1, [pc, #168]	; (8013f84 <tcp_free_acked_segments+0xe4>)
 8013edc:	482a      	ldr	r0, [pc, #168]	; (8013f88 <tcp_free_acked_segments+0xe8>)
 8013ede:	f006 fa49 	bl	801a374 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013ee8:	8a7b      	ldrh	r3, [r7, #18]
 8013eea:	1ad3      	subs	r3, r2, r3
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013ef4:	697b      	ldr	r3, [r7, #20]
 8013ef6:	891a      	ldrh	r2, [r3, #8]
 8013ef8:	4b24      	ldr	r3, [pc, #144]	; (8013f8c <tcp_free_acked_segments+0xec>)
 8013efa:	881b      	ldrh	r3, [r3, #0]
 8013efc:	4413      	add	r3, r2
 8013efe:	b29a      	uxth	r2, r3
 8013f00:	4b22      	ldr	r3, [pc, #136]	; (8013f8c <tcp_free_acked_segments+0xec>)
 8013f02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013f04:	6978      	ldr	r0, [r7, #20]
 8013f06:	f7fe f90c 	bl	8012122 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d00c      	beq.n	8013f2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d109      	bne.n	8013f2e <tcp_free_acked_segments+0x8e>
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d106      	bne.n	8013f2e <tcp_free_acked_segments+0x8e>
 8013f20:	4b17      	ldr	r3, [pc, #92]	; (8013f80 <tcp_free_acked_segments+0xe0>)
 8013f22:	f240 4261 	movw	r2, #1121	; 0x461
 8013f26:	491a      	ldr	r1, [pc, #104]	; (8013f90 <tcp_free_acked_segments+0xf0>)
 8013f28:	4817      	ldr	r0, [pc, #92]	; (8013f88 <tcp_free_acked_segments+0xe8>)
 8013f2a:	f006 fa23 	bl	801a374 <iprintf>
  while (seg_list != NULL &&
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d020      	beq.n	8013f76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013f34:	68bb      	ldr	r3, [r7, #8]
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	f7fb f891 	bl	800f062 <lwip_htonl>
 8013f40:	4604      	mov	r4, r0
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	891b      	ldrh	r3, [r3, #8]
 8013f46:	461d      	mov	r5, r3
 8013f48:	68bb      	ldr	r3, [r7, #8]
 8013f4a:	68db      	ldr	r3, [r3, #12]
 8013f4c:	899b      	ldrh	r3, [r3, #12]
 8013f4e:	b29b      	uxth	r3, r3
 8013f50:	4618      	mov	r0, r3
 8013f52:	f7fb f871 	bl	800f038 <lwip_htons>
 8013f56:	4603      	mov	r3, r0
 8013f58:	b2db      	uxtb	r3, r3
 8013f5a:	f003 0303 	and.w	r3, r3, #3
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <tcp_free_acked_segments+0xc6>
 8013f62:	2301      	movs	r3, #1
 8013f64:	e000      	b.n	8013f68 <tcp_free_acked_segments+0xc8>
 8013f66:	2300      	movs	r3, #0
 8013f68:	442b      	add	r3, r5
 8013f6a:	18e2      	adds	r2, r4, r3
 8013f6c:	4b09      	ldr	r3, [pc, #36]	; (8013f94 <tcp_free_acked_segments+0xf4>)
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	dd9c      	ble.n	8013eb0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013f76:	68bb      	ldr	r3, [r7, #8]
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3718      	adds	r7, #24
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8013f80:	0801cfcc 	.word	0x0801cfcc
 8013f84:	0801d2b4 	.word	0x0801d2b4
 8013f88:	0801d018 	.word	0x0801d018
 8013f8c:	2004f610 	.word	0x2004f610
 8013f90:	0801d2dc 	.word	0x0801d2dc
 8013f94:	2004f60c 	.word	0x2004f60c

08013f98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013f98:	b5b0      	push	{r4, r5, r7, lr}
 8013f9a:	b094      	sub	sp, #80	; 0x50
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d106      	bne.n	8013fb8 <tcp_receive+0x20>
 8013faa:	4b91      	ldr	r3, [pc, #580]	; (80141f0 <tcp_receive+0x258>)
 8013fac:	f240 427b 	movw	r2, #1147	; 0x47b
 8013fb0:	4990      	ldr	r1, [pc, #576]	; (80141f4 <tcp_receive+0x25c>)
 8013fb2:	4891      	ldr	r0, [pc, #580]	; (80141f8 <tcp_receive+0x260>)
 8013fb4:	f006 f9de 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	7d1b      	ldrb	r3, [r3, #20]
 8013fbc:	2b03      	cmp	r3, #3
 8013fbe:	d806      	bhi.n	8013fce <tcp_receive+0x36>
 8013fc0:	4b8b      	ldr	r3, [pc, #556]	; (80141f0 <tcp_receive+0x258>)
 8013fc2:	f240 427c 	movw	r2, #1148	; 0x47c
 8013fc6:	498d      	ldr	r1, [pc, #564]	; (80141fc <tcp_receive+0x264>)
 8013fc8:	488b      	ldr	r0, [pc, #556]	; (80141f8 <tcp_receive+0x260>)
 8013fca:	f006 f9d3 	bl	801a374 <iprintf>

  if (flags & TCP_ACK) {
 8013fce:	4b8c      	ldr	r3, [pc, #560]	; (8014200 <tcp_receive+0x268>)
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	f003 0310 	and.w	r3, r3, #16
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	f000 8264 	beq.w	80144a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fe8:	4413      	add	r3, r2
 8013fea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ff0:	4b84      	ldr	r3, [pc, #528]	; (8014204 <tcp_receive+0x26c>)
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	1ad3      	subs	r3, r2, r3
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	db1b      	blt.n	8014032 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ffe:	4b81      	ldr	r3, [pc, #516]	; (8014204 <tcp_receive+0x26c>)
 8014000:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014002:	429a      	cmp	r2, r3
 8014004:	d106      	bne.n	8014014 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801400a:	4b7f      	ldr	r3, [pc, #508]	; (8014208 <tcp_receive+0x270>)
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	1ad3      	subs	r3, r2, r3
 8014010:	2b00      	cmp	r3, #0
 8014012:	db0e      	blt.n	8014032 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014018:	4b7b      	ldr	r3, [pc, #492]	; (8014208 <tcp_receive+0x270>)
 801401a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801401c:	429a      	cmp	r2, r3
 801401e:	d125      	bne.n	801406c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014020:	4b7a      	ldr	r3, [pc, #488]	; (801420c <tcp_receive+0x274>)
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	89db      	ldrh	r3, [r3, #14]
 8014026:	b29a      	uxth	r2, r3
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801402e:	429a      	cmp	r2, r3
 8014030:	d91c      	bls.n	801406c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014032:	4b76      	ldr	r3, [pc, #472]	; (801420c <tcp_receive+0x274>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	89db      	ldrh	r3, [r3, #14]
 8014038:	b29a      	uxth	r2, r3
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801404c:	429a      	cmp	r2, r3
 801404e:	d205      	bcs.n	801405c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801405c:	4b69      	ldr	r3, [pc, #420]	; (8014204 <tcp_receive+0x26c>)
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014064:	4b68      	ldr	r3, [pc, #416]	; (8014208 <tcp_receive+0x270>)
 8014066:	681a      	ldr	r2, [r3, #0]
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801406c:	4b66      	ldr	r3, [pc, #408]	; (8014208 <tcp_receive+0x270>)
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014074:	1ad3      	subs	r3, r2, r3
 8014076:	2b00      	cmp	r3, #0
 8014078:	dc58      	bgt.n	801412c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801407a:	4b65      	ldr	r3, [pc, #404]	; (8014210 <tcp_receive+0x278>)
 801407c:	881b      	ldrh	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d14b      	bne.n	801411a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014086:	687a      	ldr	r2, [r7, #4]
 8014088:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801408c:	4413      	add	r3, r2
 801408e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014090:	429a      	cmp	r2, r3
 8014092:	d142      	bne.n	801411a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801409a:	2b00      	cmp	r3, #0
 801409c:	db3d      	blt.n	801411a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80140a2:	4b59      	ldr	r3, [pc, #356]	; (8014208 <tcp_receive+0x270>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	429a      	cmp	r2, r3
 80140a8:	d137      	bne.n	801411a <tcp_receive+0x182>
              found_dupack = 1;
 80140aa:	2301      	movs	r3, #1
 80140ac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140b4:	2bff      	cmp	r3, #255	; 0xff
 80140b6:	d007      	beq.n	80140c8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140be:	3301      	adds	r3, #1
 80140c0:	b2da      	uxtb	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80140ce:	2b03      	cmp	r3, #3
 80140d0:	d91b      	bls.n	801410a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140dc:	4413      	add	r3, r2
 80140de:	b29a      	uxth	r2, r3
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d30a      	bcc.n	8014100 <tcp_receive+0x168>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140f4:	4413      	add	r3, r2
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140fe:	e004      	b.n	801410a <tcp_receive+0x172>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014106:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014110:	2b02      	cmp	r3, #2
 8014112:	d902      	bls.n	801411a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f002 fb43 	bl	80167a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801411c:	2b00      	cmp	r3, #0
 801411e:	f040 8161 	bne.w	80143e4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2200      	movs	r2, #0
 8014126:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801412a:	e15b      	b.n	80143e4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801412c:	4b36      	ldr	r3, [pc, #216]	; (8014208 <tcp_receive+0x270>)
 801412e:	681a      	ldr	r2, [r3, #0]
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014134:	1ad3      	subs	r3, r2, r3
 8014136:	3b01      	subs	r3, #1
 8014138:	2b00      	cmp	r3, #0
 801413a:	f2c0 814e 	blt.w	80143da <tcp_receive+0x442>
 801413e:	4b32      	ldr	r3, [pc, #200]	; (8014208 <tcp_receive+0x270>)
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014146:	1ad3      	subs	r3, r2, r3
 8014148:	2b00      	cmp	r3, #0
 801414a:	f300 8146 	bgt.w	80143da <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	8b5b      	ldrh	r3, [r3, #26]
 8014152:	f003 0304 	and.w	r3, r3, #4
 8014156:	2b00      	cmp	r3, #0
 8014158:	d010      	beq.n	801417c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	8b5b      	ldrh	r3, [r3, #26]
 801415e:	f023 0304 	bic.w	r3, r3, #4
 8014162:	b29a      	uxth	r2, r3
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2200      	movs	r2, #0
 8014178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2200      	movs	r2, #0
 8014180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801418a:	10db      	asrs	r3, r3, #3
 801418c:	b21b      	sxth	r3, r3
 801418e:	b29a      	uxth	r2, r3
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014196:	b29b      	uxth	r3, r3
 8014198:	4413      	add	r3, r2
 801419a:	b29b      	uxth	r3, r3
 801419c:	b21a      	sxth	r2, r3
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80141a4:	4b18      	ldr	r3, [pc, #96]	; (8014208 <tcp_receive+0x270>)
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	b29a      	uxth	r2, r3
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141ae:	b29b      	uxth	r3, r3
 80141b0:	1ad3      	subs	r3, r2, r3
 80141b2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2200      	movs	r2, #0
 80141b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80141bc:	4b12      	ldr	r3, [pc, #72]	; (8014208 <tcp_receive+0x270>)
 80141be:	681a      	ldr	r2, [r3, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	7d1b      	ldrb	r3, [r3, #20]
 80141c8:	2b03      	cmp	r3, #3
 80141ca:	f240 8097 	bls.w	80142fc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80141da:	429a      	cmp	r2, r3
 80141dc:	d245      	bcs.n	801426a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	8b5b      	ldrh	r3, [r3, #26]
 80141e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d014      	beq.n	8014214 <tcp_receive+0x27c>
 80141ea:	2301      	movs	r3, #1
 80141ec:	e013      	b.n	8014216 <tcp_receive+0x27e>
 80141ee:	bf00      	nop
 80141f0:	0801cfcc 	.word	0x0801cfcc
 80141f4:	0801d2fc 	.word	0x0801d2fc
 80141f8:	0801d018 	.word	0x0801d018
 80141fc:	0801d318 	.word	0x0801d318
 8014200:	2004f614 	.word	0x2004f614
 8014204:	2004f608 	.word	0x2004f608
 8014208:	2004f60c 	.word	0x2004f60c
 801420c:	2004f5f8 	.word	0x2004f5f8
 8014210:	2004f612 	.word	0x2004f612
 8014214:	2302      	movs	r3, #2
 8014216:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801421a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801421e:	b29a      	uxth	r2, r3
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014224:	fb12 f303 	smulbb	r3, r2, r3
 8014228:	b29b      	uxth	r3, r3
 801422a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801422c:	4293      	cmp	r3, r2
 801422e:	bf28      	it	cs
 8014230:	4613      	movcs	r3, r2
 8014232:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801423a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801423c:	4413      	add	r3, r2
 801423e:	b29a      	uxth	r2, r3
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014246:	429a      	cmp	r2, r3
 8014248:	d309      	bcc.n	801425e <tcp_receive+0x2c6>
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014250:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014252:	4413      	add	r3, r2
 8014254:	b29a      	uxth	r2, r3
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801425c:	e04e      	b.n	80142fc <tcp_receive+0x364>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014264:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014268:	e048      	b.n	80142fc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014272:	4413      	add	r3, r2
 8014274:	b29a      	uxth	r2, r3
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801427c:	429a      	cmp	r2, r3
 801427e:	d309      	bcc.n	8014294 <tcp_receive+0x2fc>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014288:	4413      	add	r3, r2
 801428a:	b29a      	uxth	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014292:	e004      	b.n	801429e <tcp_receive+0x306>
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801429a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d326      	bcc.n	80142fc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	b29a      	uxth	r2, r3
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142ce:	4413      	add	r3, r2
 80142d0:	b29a      	uxth	r2, r3
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80142d8:	429a      	cmp	r2, r3
 80142da:	d30a      	bcc.n	80142f2 <tcp_receive+0x35a>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142e6:	4413      	add	r3, r2
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80142f0:	e004      	b.n	80142fc <tcp_receive+0x364>
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014304:	4a98      	ldr	r2, [pc, #608]	; (8014568 <tcp_receive+0x5d0>)
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f7ff fdca 	bl	8013ea0 <tcp_free_acked_segments>
 801430c:	4602      	mov	r2, r0
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801431a:	4a94      	ldr	r2, [pc, #592]	; (801456c <tcp_receive+0x5d4>)
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7ff fdbf 	bl	8013ea0 <tcp_free_acked_segments>
 8014322:	4602      	mov	r2, r0
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801432c:	2b00      	cmp	r3, #0
 801432e:	d104      	bne.n	801433a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014336:	861a      	strh	r2, [r3, #48]	; 0x30
 8014338:	e002      	b.n	8014340 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	2200      	movs	r2, #0
 801433e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2200      	movs	r2, #0
 8014344:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801434a:	2b00      	cmp	r3, #0
 801434c:	d103      	bne.n	8014356 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	2200      	movs	r2, #0
 8014352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801435c:	4b84      	ldr	r3, [pc, #528]	; (8014570 <tcp_receive+0x5d8>)
 801435e:	881b      	ldrh	r3, [r3, #0]
 8014360:	4413      	add	r3, r2
 8014362:	b29a      	uxth	r2, r3
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8b5b      	ldrh	r3, [r3, #26]
 801436e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014372:	2b00      	cmp	r3, #0
 8014374:	d035      	beq.n	80143e2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801437a:	2b00      	cmp	r3, #0
 801437c:	d118      	bne.n	80143b0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00c      	beq.n	80143a0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	4618      	mov	r0, r3
 8014394:	f7fa fe65 	bl	800f062 <lwip_htonl>
 8014398:	4603      	mov	r3, r0
 801439a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801439c:	2b00      	cmp	r3, #0
 801439e:	dc20      	bgt.n	80143e2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	8b5b      	ldrh	r3, [r3, #26]
 80143a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80143a8:	b29a      	uxth	r2, r3
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143ae:	e018      	b.n	80143e2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143b8:	68db      	ldr	r3, [r3, #12]
 80143ba:	685b      	ldr	r3, [r3, #4]
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fa fe50 	bl	800f062 <lwip_htonl>
 80143c2:	4603      	mov	r3, r0
 80143c4:	1ae3      	subs	r3, r4, r3
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	dc0b      	bgt.n	80143e2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	8b5b      	ldrh	r3, [r3, #26]
 80143ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80143d2:	b29a      	uxth	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143d8:	e003      	b.n	80143e2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80143da:	6878      	ldr	r0, [r7, #4]
 80143dc:	f002 fbce 	bl	8016b7c <tcp_send_empty_ack>
 80143e0:	e000      	b.n	80143e4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80143e2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d05b      	beq.n	80144a4 <tcp_receive+0x50c>
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80143f0:	4b60      	ldr	r3, [pc, #384]	; (8014574 <tcp_receive+0x5dc>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	1ad3      	subs	r3, r2, r3
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	da54      	bge.n	80144a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80143fa:	4b5f      	ldr	r3, [pc, #380]	; (8014578 <tcp_receive+0x5e0>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	b29a      	uxth	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014404:	b29b      	uxth	r3, r3
 8014406:	1ad3      	subs	r3, r2, r3
 8014408:	b29b      	uxth	r3, r3
 801440a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801440e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014418:	10db      	asrs	r3, r3, #3
 801441a:	b21b      	sxth	r3, r3
 801441c:	b29b      	uxth	r3, r3
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	b29b      	uxth	r3, r3
 8014422:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801442c:	b29a      	uxth	r2, r3
 801442e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014432:	4413      	add	r3, r2
 8014434:	b29b      	uxth	r3, r3
 8014436:	b21a      	sxth	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801443c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014440:	2b00      	cmp	r3, #0
 8014442:	da05      	bge.n	8014450 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014444:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014448:	425b      	negs	r3, r3
 801444a:	b29b      	uxth	r3, r3
 801444c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014450:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801445a:	109b      	asrs	r3, r3, #2
 801445c:	b21b      	sxth	r3, r3
 801445e:	b29b      	uxth	r3, r3
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	b29b      	uxth	r3, r3
 8014464:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801446e:	b29a      	uxth	r2, r3
 8014470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014474:	4413      	add	r3, r2
 8014476:	b29b      	uxth	r3, r3
 8014478:	b21a      	sxth	r2, r3
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014484:	10db      	asrs	r3, r3, #3
 8014486:	b21b      	sxth	r3, r3
 8014488:	b29a      	uxth	r2, r3
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014490:	b29b      	uxth	r3, r3
 8014492:	4413      	add	r3, r2
 8014494:	b29b      	uxth	r3, r3
 8014496:	b21a      	sxth	r2, r3
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80144a4:	4b35      	ldr	r3, [pc, #212]	; (801457c <tcp_receive+0x5e4>)
 80144a6:	881b      	ldrh	r3, [r3, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	f000 84e2 	beq.w	8014e72 <tcp_receive+0xeda>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	7d1b      	ldrb	r3, [r3, #20]
 80144b2:	2b06      	cmp	r3, #6
 80144b4:	f200 84dd 	bhi.w	8014e72 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144bc:	4b30      	ldr	r3, [pc, #192]	; (8014580 <tcp_receive+0x5e8>)
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	1ad3      	subs	r3, r2, r3
 80144c2:	3b01      	subs	r3, #1
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f2c0 808f 	blt.w	80145e8 <tcp_receive+0x650>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144ce:	4b2b      	ldr	r3, [pc, #172]	; (801457c <tcp_receive+0x5e4>)
 80144d0:	881b      	ldrh	r3, [r3, #0]
 80144d2:	4619      	mov	r1, r3
 80144d4:	4b2a      	ldr	r3, [pc, #168]	; (8014580 <tcp_receive+0x5e8>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	440b      	add	r3, r1
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	3301      	adds	r3, #1
 80144de:	2b00      	cmp	r3, #0
 80144e0:	f300 8082 	bgt.w	80145e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80144e4:	4b27      	ldr	r3, [pc, #156]	; (8014584 <tcp_receive+0x5ec>)
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144ee:	4b24      	ldr	r3, [pc, #144]	; (8014580 <tcp_receive+0x5e8>)
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80144f6:	4b23      	ldr	r3, [pc, #140]	; (8014584 <tcp_receive+0x5ec>)
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d106      	bne.n	801450c <tcp_receive+0x574>
 80144fe:	4b22      	ldr	r3, [pc, #136]	; (8014588 <tcp_receive+0x5f0>)
 8014500:	f240 5294 	movw	r2, #1428	; 0x594
 8014504:	4921      	ldr	r1, [pc, #132]	; (801458c <tcp_receive+0x5f4>)
 8014506:	4822      	ldr	r0, [pc, #136]	; (8014590 <tcp_receive+0x5f8>)
 8014508:	f005 ff34 	bl	801a374 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014512:	4293      	cmp	r3, r2
 8014514:	d906      	bls.n	8014524 <tcp_receive+0x58c>
 8014516:	4b1c      	ldr	r3, [pc, #112]	; (8014588 <tcp_receive+0x5f0>)
 8014518:	f240 5295 	movw	r2, #1429	; 0x595
 801451c:	491d      	ldr	r1, [pc, #116]	; (8014594 <tcp_receive+0x5fc>)
 801451e:	481c      	ldr	r0, [pc, #112]	; (8014590 <tcp_receive+0x5f8>)
 8014520:	f005 ff28 	bl	801a374 <iprintf>
      off = (u16_t)off32;
 8014524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014526:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801452a:	4b16      	ldr	r3, [pc, #88]	; (8014584 <tcp_receive+0x5ec>)
 801452c:	685b      	ldr	r3, [r3, #4]
 801452e:	891b      	ldrh	r3, [r3, #8]
 8014530:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014534:	429a      	cmp	r2, r3
 8014536:	d906      	bls.n	8014546 <tcp_receive+0x5ae>
 8014538:	4b13      	ldr	r3, [pc, #76]	; (8014588 <tcp_receive+0x5f0>)
 801453a:	f240 5297 	movw	r2, #1431	; 0x597
 801453e:	4916      	ldr	r1, [pc, #88]	; (8014598 <tcp_receive+0x600>)
 8014540:	4813      	ldr	r0, [pc, #76]	; (8014590 <tcp_receive+0x5f8>)
 8014542:	f005 ff17 	bl	801a374 <iprintf>
      inseg.len -= off;
 8014546:	4b0f      	ldr	r3, [pc, #60]	; (8014584 <tcp_receive+0x5ec>)
 8014548:	891a      	ldrh	r2, [r3, #8]
 801454a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	b29a      	uxth	r2, r3
 8014552:	4b0c      	ldr	r3, [pc, #48]	; (8014584 <tcp_receive+0x5ec>)
 8014554:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014556:	4b0b      	ldr	r3, [pc, #44]	; (8014584 <tcp_receive+0x5ec>)
 8014558:	685b      	ldr	r3, [r3, #4]
 801455a:	891a      	ldrh	r2, [r3, #8]
 801455c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014564:	e02a      	b.n	80145bc <tcp_receive+0x624>
 8014566:	bf00      	nop
 8014568:	0801d334 	.word	0x0801d334
 801456c:	0801d33c 	.word	0x0801d33c
 8014570:	2004f610 	.word	0x2004f610
 8014574:	2004f60c 	.word	0x2004f60c
 8014578:	2004f5d0 	.word	0x2004f5d0
 801457c:	2004f612 	.word	0x2004f612
 8014580:	2004f608 	.word	0x2004f608
 8014584:	2004f5e8 	.word	0x2004f5e8
 8014588:	0801cfcc 	.word	0x0801cfcc
 801458c:	0801d344 	.word	0x0801d344
 8014590:	0801d018 	.word	0x0801d018
 8014594:	0801d354 	.word	0x0801d354
 8014598:	0801d364 	.word	0x0801d364
        off -= p->len;
 801459c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801459e:	895b      	ldrh	r3, [r3, #10]
 80145a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145a4:	1ad3      	subs	r3, r2, r3
 80145a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80145aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145ac:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80145ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80145b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145b2:	2200      	movs	r2, #0
 80145b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80145b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80145bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80145be:	895b      	ldrh	r3, [r3, #10]
 80145c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d8e9      	bhi.n	801459c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80145c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80145cc:	4619      	mov	r1, r3
 80145ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80145d0:	f7fc f89e 	bl	8010710 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d8:	4a91      	ldr	r2, [pc, #580]	; (8014820 <tcp_receive+0x888>)
 80145da:	6013      	str	r3, [r2, #0]
 80145dc:	4b91      	ldr	r3, [pc, #580]	; (8014824 <tcp_receive+0x88c>)
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	4a8f      	ldr	r2, [pc, #572]	; (8014820 <tcp_receive+0x888>)
 80145e2:	6812      	ldr	r2, [r2, #0]
 80145e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80145e6:	e00d      	b.n	8014604 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80145e8:	4b8d      	ldr	r3, [pc, #564]	; (8014820 <tcp_receive+0x888>)
 80145ea:	681a      	ldr	r2, [r3, #0]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145f0:	1ad3      	subs	r3, r2, r3
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	da06      	bge.n	8014604 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	8b5b      	ldrh	r3, [r3, #26]
 80145fa:	f043 0302 	orr.w	r3, r3, #2
 80145fe:	b29a      	uxth	r2, r3
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014604:	4b86      	ldr	r3, [pc, #536]	; (8014820 <tcp_receive+0x888>)
 8014606:	681a      	ldr	r2, [r3, #0]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801460c:	1ad3      	subs	r3, r2, r3
 801460e:	2b00      	cmp	r3, #0
 8014610:	f2c0 842a 	blt.w	8014e68 <tcp_receive+0xed0>
 8014614:	4b82      	ldr	r3, [pc, #520]	; (8014820 <tcp_receive+0x888>)
 8014616:	681a      	ldr	r2, [r3, #0]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801461c:	6879      	ldr	r1, [r7, #4]
 801461e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014620:	440b      	add	r3, r1
 8014622:	1ad3      	subs	r3, r2, r3
 8014624:	3301      	adds	r3, #1
 8014626:	2b00      	cmp	r3, #0
 8014628:	f300 841e 	bgt.w	8014e68 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014630:	4b7b      	ldr	r3, [pc, #492]	; (8014820 <tcp_receive+0x888>)
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	429a      	cmp	r2, r3
 8014636:	f040 829a 	bne.w	8014b6e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801463a:	4b7a      	ldr	r3, [pc, #488]	; (8014824 <tcp_receive+0x88c>)
 801463c:	891c      	ldrh	r4, [r3, #8]
 801463e:	4b79      	ldr	r3, [pc, #484]	; (8014824 <tcp_receive+0x88c>)
 8014640:	68db      	ldr	r3, [r3, #12]
 8014642:	899b      	ldrh	r3, [r3, #12]
 8014644:	b29b      	uxth	r3, r3
 8014646:	4618      	mov	r0, r3
 8014648:	f7fa fcf6 	bl	800f038 <lwip_htons>
 801464c:	4603      	mov	r3, r0
 801464e:	b2db      	uxtb	r3, r3
 8014650:	f003 0303 	and.w	r3, r3, #3
 8014654:	2b00      	cmp	r3, #0
 8014656:	d001      	beq.n	801465c <tcp_receive+0x6c4>
 8014658:	2301      	movs	r3, #1
 801465a:	e000      	b.n	801465e <tcp_receive+0x6c6>
 801465c:	2300      	movs	r3, #0
 801465e:	4423      	add	r3, r4
 8014660:	b29a      	uxth	r2, r3
 8014662:	4b71      	ldr	r3, [pc, #452]	; (8014828 <tcp_receive+0x890>)
 8014664:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801466a:	4b6f      	ldr	r3, [pc, #444]	; (8014828 <tcp_receive+0x890>)
 801466c:	881b      	ldrh	r3, [r3, #0]
 801466e:	429a      	cmp	r2, r3
 8014670:	d275      	bcs.n	801475e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014672:	4b6c      	ldr	r3, [pc, #432]	; (8014824 <tcp_receive+0x88c>)
 8014674:	68db      	ldr	r3, [r3, #12]
 8014676:	899b      	ldrh	r3, [r3, #12]
 8014678:	b29b      	uxth	r3, r3
 801467a:	4618      	mov	r0, r3
 801467c:	f7fa fcdc 	bl	800f038 <lwip_htons>
 8014680:	4603      	mov	r3, r0
 8014682:	b2db      	uxtb	r3, r3
 8014684:	f003 0301 	and.w	r3, r3, #1
 8014688:	2b00      	cmp	r3, #0
 801468a:	d01f      	beq.n	80146cc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801468c:	4b65      	ldr	r3, [pc, #404]	; (8014824 <tcp_receive+0x88c>)
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	899b      	ldrh	r3, [r3, #12]
 8014692:	b29b      	uxth	r3, r3
 8014694:	b21b      	sxth	r3, r3
 8014696:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801469a:	b21c      	sxth	r4, r3
 801469c:	4b61      	ldr	r3, [pc, #388]	; (8014824 <tcp_receive+0x88c>)
 801469e:	68db      	ldr	r3, [r3, #12]
 80146a0:	899b      	ldrh	r3, [r3, #12]
 80146a2:	b29b      	uxth	r3, r3
 80146a4:	4618      	mov	r0, r3
 80146a6:	f7fa fcc7 	bl	800f038 <lwip_htons>
 80146aa:	4603      	mov	r3, r0
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	b29b      	uxth	r3, r3
 80146b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7fa fcbe 	bl	800f038 <lwip_htons>
 80146bc:	4603      	mov	r3, r0
 80146be:	b21b      	sxth	r3, r3
 80146c0:	4323      	orrs	r3, r4
 80146c2:	b21a      	sxth	r2, r3
 80146c4:	4b57      	ldr	r3, [pc, #348]	; (8014824 <tcp_receive+0x88c>)
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	b292      	uxth	r2, r2
 80146ca:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80146d0:	4b54      	ldr	r3, [pc, #336]	; (8014824 <tcp_receive+0x88c>)
 80146d2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80146d4:	4b53      	ldr	r3, [pc, #332]	; (8014824 <tcp_receive+0x88c>)
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	899b      	ldrh	r3, [r3, #12]
 80146da:	b29b      	uxth	r3, r3
 80146dc:	4618      	mov	r0, r3
 80146de:	f7fa fcab 	bl	800f038 <lwip_htons>
 80146e2:	4603      	mov	r3, r0
 80146e4:	b2db      	uxtb	r3, r3
 80146e6:	f003 0302 	and.w	r3, r3, #2
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d005      	beq.n	80146fa <tcp_receive+0x762>
            inseg.len -= 1;
 80146ee:	4b4d      	ldr	r3, [pc, #308]	; (8014824 <tcp_receive+0x88c>)
 80146f0:	891b      	ldrh	r3, [r3, #8]
 80146f2:	3b01      	subs	r3, #1
 80146f4:	b29a      	uxth	r2, r3
 80146f6:	4b4b      	ldr	r3, [pc, #300]	; (8014824 <tcp_receive+0x88c>)
 80146f8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80146fa:	4b4a      	ldr	r3, [pc, #296]	; (8014824 <tcp_receive+0x88c>)
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	4a49      	ldr	r2, [pc, #292]	; (8014824 <tcp_receive+0x88c>)
 8014700:	8912      	ldrh	r2, [r2, #8]
 8014702:	4611      	mov	r1, r2
 8014704:	4618      	mov	r0, r3
 8014706:	f7fb ff03 	bl	8010510 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801470a:	4b46      	ldr	r3, [pc, #280]	; (8014824 <tcp_receive+0x88c>)
 801470c:	891c      	ldrh	r4, [r3, #8]
 801470e:	4b45      	ldr	r3, [pc, #276]	; (8014824 <tcp_receive+0x88c>)
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	899b      	ldrh	r3, [r3, #12]
 8014714:	b29b      	uxth	r3, r3
 8014716:	4618      	mov	r0, r3
 8014718:	f7fa fc8e 	bl	800f038 <lwip_htons>
 801471c:	4603      	mov	r3, r0
 801471e:	b2db      	uxtb	r3, r3
 8014720:	f003 0303 	and.w	r3, r3, #3
 8014724:	2b00      	cmp	r3, #0
 8014726:	d001      	beq.n	801472c <tcp_receive+0x794>
 8014728:	2301      	movs	r3, #1
 801472a:	e000      	b.n	801472e <tcp_receive+0x796>
 801472c:	2300      	movs	r3, #0
 801472e:	4423      	add	r3, r4
 8014730:	b29a      	uxth	r2, r3
 8014732:	4b3d      	ldr	r3, [pc, #244]	; (8014828 <tcp_receive+0x890>)
 8014734:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014736:	4b3c      	ldr	r3, [pc, #240]	; (8014828 <tcp_receive+0x890>)
 8014738:	881b      	ldrh	r3, [r3, #0]
 801473a:	461a      	mov	r2, r3
 801473c:	4b38      	ldr	r3, [pc, #224]	; (8014820 <tcp_receive+0x888>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	441a      	add	r2, r3
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014746:	6879      	ldr	r1, [r7, #4]
 8014748:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801474a:	440b      	add	r3, r1
 801474c:	429a      	cmp	r2, r3
 801474e:	d006      	beq.n	801475e <tcp_receive+0x7c6>
 8014750:	4b36      	ldr	r3, [pc, #216]	; (801482c <tcp_receive+0x894>)
 8014752:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014756:	4936      	ldr	r1, [pc, #216]	; (8014830 <tcp_receive+0x898>)
 8014758:	4836      	ldr	r0, [pc, #216]	; (8014834 <tcp_receive+0x89c>)
 801475a:	f005 fe0b 	bl	801a374 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014762:	2b00      	cmp	r3, #0
 8014764:	f000 80e7 	beq.w	8014936 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014768:	4b2e      	ldr	r3, [pc, #184]	; (8014824 <tcp_receive+0x88c>)
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	899b      	ldrh	r3, [r3, #12]
 801476e:	b29b      	uxth	r3, r3
 8014770:	4618      	mov	r0, r3
 8014772:	f7fa fc61 	bl	800f038 <lwip_htons>
 8014776:	4603      	mov	r3, r0
 8014778:	b2db      	uxtb	r3, r3
 801477a:	f003 0301 	and.w	r3, r3, #1
 801477e:	2b00      	cmp	r3, #0
 8014780:	d010      	beq.n	80147a4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014782:	e00a      	b.n	801479a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014788:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801478e:	681a      	ldr	r2, [r3, #0]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f7fd fcc4 	bl	8012122 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d1f0      	bne.n	8014784 <tcp_receive+0x7ec>
 80147a2:	e0c8      	b.n	8014936 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147a8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80147aa:	e052      	b.n	8014852 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80147ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147ae:	68db      	ldr	r3, [r3, #12]
 80147b0:	899b      	ldrh	r3, [r3, #12]
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fa fc3f 	bl	800f038 <lwip_htons>
 80147ba:	4603      	mov	r3, r0
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	f003 0301 	and.w	r3, r3, #1
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d03d      	beq.n	8014842 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80147c6:	4b17      	ldr	r3, [pc, #92]	; (8014824 <tcp_receive+0x88c>)
 80147c8:	68db      	ldr	r3, [r3, #12]
 80147ca:	899b      	ldrh	r3, [r3, #12]
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fa fc32 	bl	800f038 <lwip_htons>
 80147d4:	4603      	mov	r3, r0
 80147d6:	b2db      	uxtb	r3, r3
 80147d8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d130      	bne.n	8014842 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80147e0:	4b10      	ldr	r3, [pc, #64]	; (8014824 <tcp_receive+0x88c>)
 80147e2:	68db      	ldr	r3, [r3, #12]
 80147e4:	899b      	ldrh	r3, [r3, #12]
 80147e6:	b29c      	uxth	r4, r3
 80147e8:	2001      	movs	r0, #1
 80147ea:	f7fa fc25 	bl	800f038 <lwip_htons>
 80147ee:	4603      	mov	r3, r0
 80147f0:	461a      	mov	r2, r3
 80147f2:	4b0c      	ldr	r3, [pc, #48]	; (8014824 <tcp_receive+0x88c>)
 80147f4:	68db      	ldr	r3, [r3, #12]
 80147f6:	4322      	orrs	r2, r4
 80147f8:	b292      	uxth	r2, r2
 80147fa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80147fc:	4b09      	ldr	r3, [pc, #36]	; (8014824 <tcp_receive+0x88c>)
 80147fe:	891c      	ldrh	r4, [r3, #8]
 8014800:	4b08      	ldr	r3, [pc, #32]	; (8014824 <tcp_receive+0x88c>)
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	899b      	ldrh	r3, [r3, #12]
 8014806:	b29b      	uxth	r3, r3
 8014808:	4618      	mov	r0, r3
 801480a:	f7fa fc15 	bl	800f038 <lwip_htons>
 801480e:	4603      	mov	r3, r0
 8014810:	b2db      	uxtb	r3, r3
 8014812:	f003 0303 	and.w	r3, r3, #3
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00e      	beq.n	8014838 <tcp_receive+0x8a0>
 801481a:	2301      	movs	r3, #1
 801481c:	e00d      	b.n	801483a <tcp_receive+0x8a2>
 801481e:	bf00      	nop
 8014820:	2004f608 	.word	0x2004f608
 8014824:	2004f5e8 	.word	0x2004f5e8
 8014828:	2004f612 	.word	0x2004f612
 801482c:	0801cfcc 	.word	0x0801cfcc
 8014830:	0801d374 	.word	0x0801d374
 8014834:	0801d018 	.word	0x0801d018
 8014838:	2300      	movs	r3, #0
 801483a:	4423      	add	r3, r4
 801483c:	b29a      	uxth	r2, r3
 801483e:	4b98      	ldr	r3, [pc, #608]	; (8014aa0 <tcp_receive+0xb08>)
 8014840:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014844:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801484c:	6938      	ldr	r0, [r7, #16]
 801484e:	f7fd fc68 	bl	8012122 <tcp_seg_free>
            while (next &&
 8014852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014854:	2b00      	cmp	r3, #0
 8014856:	d00e      	beq.n	8014876 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014858:	4b91      	ldr	r3, [pc, #580]	; (8014aa0 <tcp_receive+0xb08>)
 801485a:	881b      	ldrh	r3, [r3, #0]
 801485c:	461a      	mov	r2, r3
 801485e:	4b91      	ldr	r3, [pc, #580]	; (8014aa4 <tcp_receive+0xb0c>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	441a      	add	r2, r3
 8014864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014866:	68db      	ldr	r3, [r3, #12]
 8014868:	685b      	ldr	r3, [r3, #4]
 801486a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801486c:	8909      	ldrh	r1, [r1, #8]
 801486e:	440b      	add	r3, r1
 8014870:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014872:	2b00      	cmp	r3, #0
 8014874:	da9a      	bge.n	80147ac <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014878:	2b00      	cmp	r3, #0
 801487a:	d059      	beq.n	8014930 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801487c:	4b88      	ldr	r3, [pc, #544]	; (8014aa0 <tcp_receive+0xb08>)
 801487e:	881b      	ldrh	r3, [r3, #0]
 8014880:	461a      	mov	r2, r3
 8014882:	4b88      	ldr	r3, [pc, #544]	; (8014aa4 <tcp_receive+0xb0c>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	441a      	add	r2, r3
 8014888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014890:	2b00      	cmp	r3, #0
 8014892:	dd4d      	ble.n	8014930 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	685b      	ldr	r3, [r3, #4]
 801489a:	b29a      	uxth	r2, r3
 801489c:	4b81      	ldr	r3, [pc, #516]	; (8014aa4 <tcp_receive+0xb0c>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	1ad3      	subs	r3, r2, r3
 80148a4:	b29a      	uxth	r2, r3
 80148a6:	4b80      	ldr	r3, [pc, #512]	; (8014aa8 <tcp_receive+0xb10>)
 80148a8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80148aa:	4b7f      	ldr	r3, [pc, #508]	; (8014aa8 <tcp_receive+0xb10>)
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	899b      	ldrh	r3, [r3, #12]
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fa fbc0 	bl	800f038 <lwip_htons>
 80148b8:	4603      	mov	r3, r0
 80148ba:	b2db      	uxtb	r3, r3
 80148bc:	f003 0302 	and.w	r3, r3, #2
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d005      	beq.n	80148d0 <tcp_receive+0x938>
                inseg.len -= 1;
 80148c4:	4b78      	ldr	r3, [pc, #480]	; (8014aa8 <tcp_receive+0xb10>)
 80148c6:	891b      	ldrh	r3, [r3, #8]
 80148c8:	3b01      	subs	r3, #1
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	4b76      	ldr	r3, [pc, #472]	; (8014aa8 <tcp_receive+0xb10>)
 80148ce:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80148d0:	4b75      	ldr	r3, [pc, #468]	; (8014aa8 <tcp_receive+0xb10>)
 80148d2:	685b      	ldr	r3, [r3, #4]
 80148d4:	4a74      	ldr	r2, [pc, #464]	; (8014aa8 <tcp_receive+0xb10>)
 80148d6:	8912      	ldrh	r2, [r2, #8]
 80148d8:	4611      	mov	r1, r2
 80148da:	4618      	mov	r0, r3
 80148dc:	f7fb fe18 	bl	8010510 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80148e0:	4b71      	ldr	r3, [pc, #452]	; (8014aa8 <tcp_receive+0xb10>)
 80148e2:	891c      	ldrh	r4, [r3, #8]
 80148e4:	4b70      	ldr	r3, [pc, #448]	; (8014aa8 <tcp_receive+0xb10>)
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	899b      	ldrh	r3, [r3, #12]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7fa fba3 	bl	800f038 <lwip_htons>
 80148f2:	4603      	mov	r3, r0
 80148f4:	b2db      	uxtb	r3, r3
 80148f6:	f003 0303 	and.w	r3, r3, #3
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d001      	beq.n	8014902 <tcp_receive+0x96a>
 80148fe:	2301      	movs	r3, #1
 8014900:	e000      	b.n	8014904 <tcp_receive+0x96c>
 8014902:	2300      	movs	r3, #0
 8014904:	4423      	add	r3, r4
 8014906:	b29a      	uxth	r2, r3
 8014908:	4b65      	ldr	r3, [pc, #404]	; (8014aa0 <tcp_receive+0xb08>)
 801490a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801490c:	4b64      	ldr	r3, [pc, #400]	; (8014aa0 <tcp_receive+0xb08>)
 801490e:	881b      	ldrh	r3, [r3, #0]
 8014910:	461a      	mov	r2, r3
 8014912:	4b64      	ldr	r3, [pc, #400]	; (8014aa4 <tcp_receive+0xb0c>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	441a      	add	r2, r3
 8014918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	429a      	cmp	r2, r3
 8014920:	d006      	beq.n	8014930 <tcp_receive+0x998>
 8014922:	4b62      	ldr	r3, [pc, #392]	; (8014aac <tcp_receive+0xb14>)
 8014924:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014928:	4961      	ldr	r1, [pc, #388]	; (8014ab0 <tcp_receive+0xb18>)
 801492a:	4862      	ldr	r0, [pc, #392]	; (8014ab4 <tcp_receive+0xb1c>)
 801492c:	f005 fd22 	bl	801a374 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014934:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014936:	4b5a      	ldr	r3, [pc, #360]	; (8014aa0 <tcp_receive+0xb08>)
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	461a      	mov	r2, r3
 801493c:	4b59      	ldr	r3, [pc, #356]	; (8014aa4 <tcp_receive+0xb0c>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	441a      	add	r2, r3
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801494a:	4b55      	ldr	r3, [pc, #340]	; (8014aa0 <tcp_receive+0xb08>)
 801494c:	881b      	ldrh	r3, [r3, #0]
 801494e:	429a      	cmp	r2, r3
 8014950:	d206      	bcs.n	8014960 <tcp_receive+0x9c8>
 8014952:	4b56      	ldr	r3, [pc, #344]	; (8014aac <tcp_receive+0xb14>)
 8014954:	f240 6207 	movw	r2, #1543	; 0x607
 8014958:	4957      	ldr	r1, [pc, #348]	; (8014ab8 <tcp_receive+0xb20>)
 801495a:	4856      	ldr	r0, [pc, #344]	; (8014ab4 <tcp_receive+0xb1c>)
 801495c:	f005 fd0a 	bl	801a374 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014964:	4b4e      	ldr	r3, [pc, #312]	; (8014aa0 <tcp_receive+0xb08>)
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	1ad3      	subs	r3, r2, r3
 801496a:	b29a      	uxth	r2, r3
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014970:	6878      	ldr	r0, [r7, #4]
 8014972:	f7fc feb1 	bl	80116d8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014976:	4b4c      	ldr	r3, [pc, #304]	; (8014aa8 <tcp_receive+0xb10>)
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	891b      	ldrh	r3, [r3, #8]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d006      	beq.n	801498e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014980:	4b49      	ldr	r3, [pc, #292]	; (8014aa8 <tcp_receive+0xb10>)
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	4a4d      	ldr	r2, [pc, #308]	; (8014abc <tcp_receive+0xb24>)
 8014986:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014988:	4b47      	ldr	r3, [pc, #284]	; (8014aa8 <tcp_receive+0xb10>)
 801498a:	2200      	movs	r2, #0
 801498c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801498e:	4b46      	ldr	r3, [pc, #280]	; (8014aa8 <tcp_receive+0xb10>)
 8014990:	68db      	ldr	r3, [r3, #12]
 8014992:	899b      	ldrh	r3, [r3, #12]
 8014994:	b29b      	uxth	r3, r3
 8014996:	4618      	mov	r0, r3
 8014998:	f7fa fb4e 	bl	800f038 <lwip_htons>
 801499c:	4603      	mov	r3, r0
 801499e:	b2db      	uxtb	r3, r3
 80149a0:	f003 0301 	and.w	r3, r3, #1
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	f000 80b8 	beq.w	8014b1a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80149aa:	4b45      	ldr	r3, [pc, #276]	; (8014ac0 <tcp_receive+0xb28>)
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	f043 0320 	orr.w	r3, r3, #32
 80149b2:	b2da      	uxtb	r2, r3
 80149b4:	4b42      	ldr	r3, [pc, #264]	; (8014ac0 <tcp_receive+0xb28>)
 80149b6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80149b8:	e0af      	b.n	8014b1a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149be:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149c4:	68db      	ldr	r3, [r3, #12]
 80149c6:	685b      	ldr	r3, [r3, #4]
 80149c8:	4a36      	ldr	r2, [pc, #216]	; (8014aa4 <tcp_receive+0xb0c>)
 80149ca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	891b      	ldrh	r3, [r3, #8]
 80149d0:	461c      	mov	r4, r3
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	68db      	ldr	r3, [r3, #12]
 80149d6:	899b      	ldrh	r3, [r3, #12]
 80149d8:	b29b      	uxth	r3, r3
 80149da:	4618      	mov	r0, r3
 80149dc:	f7fa fb2c 	bl	800f038 <lwip_htons>
 80149e0:	4603      	mov	r3, r0
 80149e2:	b2db      	uxtb	r3, r3
 80149e4:	f003 0303 	and.w	r3, r3, #3
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d001      	beq.n	80149f0 <tcp_receive+0xa58>
 80149ec:	2301      	movs	r3, #1
 80149ee:	e000      	b.n	80149f2 <tcp_receive+0xa5a>
 80149f0:	2300      	movs	r3, #0
 80149f2:	191a      	adds	r2, r3, r4
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149f8:	441a      	add	r2, r3
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a02:	461c      	mov	r4, r3
 8014a04:	68bb      	ldr	r3, [r7, #8]
 8014a06:	891b      	ldrh	r3, [r3, #8]
 8014a08:	461d      	mov	r5, r3
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	68db      	ldr	r3, [r3, #12]
 8014a0e:	899b      	ldrh	r3, [r3, #12]
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7fa fb10 	bl	800f038 <lwip_htons>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	b2db      	uxtb	r3, r3
 8014a1c:	f003 0303 	and.w	r3, r3, #3
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d001      	beq.n	8014a28 <tcp_receive+0xa90>
 8014a24:	2301      	movs	r3, #1
 8014a26:	e000      	b.n	8014a2a <tcp_receive+0xa92>
 8014a28:	2300      	movs	r3, #0
 8014a2a:	442b      	add	r3, r5
 8014a2c:	429c      	cmp	r4, r3
 8014a2e:	d206      	bcs.n	8014a3e <tcp_receive+0xaa6>
 8014a30:	4b1e      	ldr	r3, [pc, #120]	; (8014aac <tcp_receive+0xb14>)
 8014a32:	f240 622b 	movw	r2, #1579	; 0x62b
 8014a36:	4923      	ldr	r1, [pc, #140]	; (8014ac4 <tcp_receive+0xb2c>)
 8014a38:	481e      	ldr	r0, [pc, #120]	; (8014ab4 <tcp_receive+0xb1c>)
 8014a3a:	f005 fc9b 	bl	801a374 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	891b      	ldrh	r3, [r3, #8]
 8014a42:	461c      	mov	r4, r3
 8014a44:	68bb      	ldr	r3, [r7, #8]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	899b      	ldrh	r3, [r3, #12]
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7fa faf3 	bl	800f038 <lwip_htons>
 8014a52:	4603      	mov	r3, r0
 8014a54:	b2db      	uxtb	r3, r3
 8014a56:	f003 0303 	and.w	r3, r3, #3
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d001      	beq.n	8014a62 <tcp_receive+0xaca>
 8014a5e:	2301      	movs	r3, #1
 8014a60:	e000      	b.n	8014a64 <tcp_receive+0xacc>
 8014a62:	2300      	movs	r3, #0
 8014a64:	1919      	adds	r1, r3, r4
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a6a:	b28b      	uxth	r3, r1
 8014a6c:	1ad3      	subs	r3, r2, r3
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f7fc fe2f 	bl	80116d8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	891b      	ldrh	r3, [r3, #8]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d028      	beq.n	8014ad6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014a84:	4b0d      	ldr	r3, [pc, #52]	; (8014abc <tcp_receive+0xb24>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d01d      	beq.n	8014ac8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014a8c:	4b0b      	ldr	r3, [pc, #44]	; (8014abc <tcp_receive+0xb24>)
 8014a8e:	681a      	ldr	r2, [r3, #0]
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	685b      	ldr	r3, [r3, #4]
 8014a94:	4619      	mov	r1, r3
 8014a96:	4610      	mov	r0, r2
 8014a98:	f7fb ff8e 	bl	80109b8 <pbuf_cat>
 8014a9c:	e018      	b.n	8014ad0 <tcp_receive+0xb38>
 8014a9e:	bf00      	nop
 8014aa0:	2004f612 	.word	0x2004f612
 8014aa4:	2004f608 	.word	0x2004f608
 8014aa8:	2004f5e8 	.word	0x2004f5e8
 8014aac:	0801cfcc 	.word	0x0801cfcc
 8014ab0:	0801d3ac 	.word	0x0801d3ac
 8014ab4:	0801d018 	.word	0x0801d018
 8014ab8:	0801d3e8 	.word	0x0801d3e8
 8014abc:	2004f618 	.word	0x2004f618
 8014ac0:	2004f615 	.word	0x2004f615
 8014ac4:	0801d408 	.word	0x0801d408
            } else {
              recv_data = cseg->p;
 8014ac8:	68bb      	ldr	r3, [r7, #8]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	4a70      	ldr	r2, [pc, #448]	; (8014c90 <tcp_receive+0xcf8>)
 8014ace:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014ad0:	68bb      	ldr	r3, [r7, #8]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	899b      	ldrh	r3, [r3, #12]
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7fa faaa 	bl	800f038 <lwip_htons>
 8014ae4:	4603      	mov	r3, r0
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	f003 0301 	and.w	r3, r3, #1
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d00d      	beq.n	8014b0c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014af0:	4b68      	ldr	r3, [pc, #416]	; (8014c94 <tcp_receive+0xcfc>)
 8014af2:	781b      	ldrb	r3, [r3, #0]
 8014af4:	f043 0320 	orr.w	r3, r3, #32
 8014af8:	b2da      	uxtb	r2, r3
 8014afa:	4b66      	ldr	r3, [pc, #408]	; (8014c94 <tcp_receive+0xcfc>)
 8014afc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	7d1b      	ldrb	r3, [r3, #20]
 8014b02:	2b04      	cmp	r3, #4
 8014b04:	d102      	bne.n	8014b0c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	2207      	movs	r2, #7
 8014b0a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014b14:	68b8      	ldr	r0, [r7, #8]
 8014b16:	f7fd fb04 	bl	8012122 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d008      	beq.n	8014b34 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b26:	68db      	ldr	r3, [r3, #12]
 8014b28:	685a      	ldr	r2, [r3, #4]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014b2e:	429a      	cmp	r2, r3
 8014b30:	f43f af43 	beq.w	80149ba <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	8b5b      	ldrh	r3, [r3, #26]
 8014b38:	f003 0301 	and.w	r3, r3, #1
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d00e      	beq.n	8014b5e <tcp_receive+0xbc6>
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	8b5b      	ldrh	r3, [r3, #26]
 8014b44:	f023 0301 	bic.w	r3, r3, #1
 8014b48:	b29a      	uxth	r2, r3
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	835a      	strh	r2, [r3, #26]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	8b5b      	ldrh	r3, [r3, #26]
 8014b52:	f043 0302 	orr.w	r3, r3, #2
 8014b56:	b29a      	uxth	r2, r3
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b5c:	e188      	b.n	8014e70 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	8b5b      	ldrh	r3, [r3, #26]
 8014b62:	f043 0301 	orr.w	r3, r3, #1
 8014b66:	b29a      	uxth	r2, r3
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014b6c:	e180      	b.n	8014e70 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d106      	bne.n	8014b84 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014b76:	4848      	ldr	r0, [pc, #288]	; (8014c98 <tcp_receive+0xd00>)
 8014b78:	f7fd faec 	bl	8012154 <tcp_seg_copy>
 8014b7c:	4602      	mov	r2, r0
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	675a      	str	r2, [r3, #116]	; 0x74
 8014b82:	e16d      	b.n	8014e60 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014b84:	2300      	movs	r3, #0
 8014b86:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8014b8e:	e157      	b.n	8014e40 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b92:	68db      	ldr	r3, [r3, #12]
 8014b94:	685a      	ldr	r2, [r3, #4]
 8014b96:	4b41      	ldr	r3, [pc, #260]	; (8014c9c <tcp_receive+0xd04>)
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d11d      	bne.n	8014bda <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014b9e:	4b3e      	ldr	r3, [pc, #248]	; (8014c98 <tcp_receive+0xd00>)
 8014ba0:	891a      	ldrh	r2, [r3, #8]
 8014ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba4:	891b      	ldrh	r3, [r3, #8]
 8014ba6:	429a      	cmp	r2, r3
 8014ba8:	f240 814f 	bls.w	8014e4a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014bac:	483a      	ldr	r0, [pc, #232]	; (8014c98 <tcp_receive+0xd00>)
 8014bae:	f7fd fad1 	bl	8012154 <tcp_seg_copy>
 8014bb2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014bb4:	697b      	ldr	r3, [r7, #20]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f000 8149 	beq.w	8014e4e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d003      	beq.n	8014bca <tcp_receive+0xc32>
                    prev->next = cseg;
 8014bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc4:	697a      	ldr	r2, [r7, #20]
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	e002      	b.n	8014bd0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	697a      	ldr	r2, [r7, #20]
 8014bce:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014bd0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014bd2:	6978      	ldr	r0, [r7, #20]
 8014bd4:	f7ff f8dc 	bl	8013d90 <tcp_oos_insert_segment>
                }
                break;
 8014bd8:	e139      	b.n	8014e4e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d117      	bne.n	8014c10 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014be0:	4b2e      	ldr	r3, [pc, #184]	; (8014c9c <tcp_receive+0xd04>)
 8014be2:	681a      	ldr	r2, [r3, #0]
 8014be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	1ad3      	subs	r3, r2, r3
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	da57      	bge.n	8014ca0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014bf0:	4829      	ldr	r0, [pc, #164]	; (8014c98 <tcp_receive+0xd00>)
 8014bf2:	f7fd faaf 	bl	8012154 <tcp_seg_copy>
 8014bf6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014bf8:	69bb      	ldr	r3, [r7, #24]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	f000 8129 	beq.w	8014e52 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	69ba      	ldr	r2, [r7, #24]
 8014c04:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014c06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c08:	69b8      	ldr	r0, [r7, #24]
 8014c0a:	f7ff f8c1 	bl	8013d90 <tcp_oos_insert_segment>
                  }
                  break;
 8014c0e:	e120      	b.n	8014e52 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014c10:	4b22      	ldr	r3, [pc, #136]	; (8014c9c <tcp_receive+0xd04>)
 8014c12:	681a      	ldr	r2, [r3, #0]
 8014c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c16:	68db      	ldr	r3, [r3, #12]
 8014c18:	685b      	ldr	r3, [r3, #4]
 8014c1a:	1ad3      	subs	r3, r2, r3
 8014c1c:	3b01      	subs	r3, #1
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	db3e      	blt.n	8014ca0 <tcp_receive+0xd08>
 8014c22:	4b1e      	ldr	r3, [pc, #120]	; (8014c9c <tcp_receive+0xd04>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c28:	68db      	ldr	r3, [r3, #12]
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	1ad3      	subs	r3, r2, r3
 8014c2e:	3301      	adds	r3, #1
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	dc35      	bgt.n	8014ca0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014c34:	4818      	ldr	r0, [pc, #96]	; (8014c98 <tcp_receive+0xd00>)
 8014c36:	f7fd fa8d 	bl	8012154 <tcp_seg_copy>
 8014c3a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	f000 8109 	beq.w	8014e56 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c46:	68db      	ldr	r3, [r3, #12]
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c4c:	8912      	ldrh	r2, [r2, #8]
 8014c4e:	441a      	add	r2, r3
 8014c50:	4b12      	ldr	r3, [pc, #72]	; (8014c9c <tcp_receive+0xd04>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	1ad3      	subs	r3, r2, r3
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	dd12      	ble.n	8014c80 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014c5a:	4b10      	ldr	r3, [pc, #64]	; (8014c9c <tcp_receive+0xd04>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	1ad3      	subs	r3, r2, r3
 8014c6a:	b29a      	uxth	r2, r3
 8014c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c6e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c72:	685a      	ldr	r2, [r3, #4]
 8014c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c76:	891b      	ldrh	r3, [r3, #8]
 8014c78:	4619      	mov	r1, r3
 8014c7a:	4610      	mov	r0, r2
 8014c7c:	f7fb fc48 	bl	8010510 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c82:	69fa      	ldr	r2, [r7, #28]
 8014c84:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014c86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c88:	69f8      	ldr	r0, [r7, #28]
 8014c8a:	f7ff f881 	bl	8013d90 <tcp_oos_insert_segment>
                  }
                  break;
 8014c8e:	e0e2      	b.n	8014e56 <tcp_receive+0xebe>
 8014c90:	2004f618 	.word	0x2004f618
 8014c94:	2004f615 	.word	0x2004f615
 8014c98:	2004f5e8 	.word	0x2004f5e8
 8014c9c:	2004f608 	.word	0x2004f608
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f040 80c6 	bne.w	8014e3a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014cae:	4b80      	ldr	r3, [pc, #512]	; (8014eb0 <tcp_receive+0xf18>)
 8014cb0:	681a      	ldr	r2, [r3, #0]
 8014cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb4:	68db      	ldr	r3, [r3, #12]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f340 80bd 	ble.w	8014e3a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cc2:	68db      	ldr	r3, [r3, #12]
 8014cc4:	899b      	ldrh	r3, [r3, #12]
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f7fa f9b5 	bl	800f038 <lwip_htons>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	b2db      	uxtb	r3, r3
 8014cd2:	f003 0301 	and.w	r3, r3, #1
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	f040 80bf 	bne.w	8014e5a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014cdc:	4875      	ldr	r0, [pc, #468]	; (8014eb4 <tcp_receive+0xf1c>)
 8014cde:	f7fd fa39 	bl	8012154 <tcp_seg_copy>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ce6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	f000 80b6 	beq.w	8014e5e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf4:	68db      	ldr	r3, [r3, #12]
 8014cf6:	685b      	ldr	r3, [r3, #4]
 8014cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cfa:	8912      	ldrh	r2, [r2, #8]
 8014cfc:	441a      	add	r2, r3
 8014cfe:	4b6c      	ldr	r3, [pc, #432]	; (8014eb0 <tcp_receive+0xf18>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	1ad3      	subs	r3, r2, r3
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	dd12      	ble.n	8014d2e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014d08:	4b69      	ldr	r3, [pc, #420]	; (8014eb0 <tcp_receive+0xf18>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	b29a      	uxth	r2, r3
 8014d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	1ad3      	subs	r3, r2, r3
 8014d18:	b29a      	uxth	r2, r3
 8014d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d1c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d20:	685a      	ldr	r2, [r3, #4]
 8014d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d24:	891b      	ldrh	r3, [r3, #8]
 8014d26:	4619      	mov	r1, r3
 8014d28:	4610      	mov	r0, r2
 8014d2a:	f7fb fbf1 	bl	8010510 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014d2e:	4b62      	ldr	r3, [pc, #392]	; (8014eb8 <tcp_receive+0xf20>)
 8014d30:	881b      	ldrh	r3, [r3, #0]
 8014d32:	461a      	mov	r2, r3
 8014d34:	4b5e      	ldr	r3, [pc, #376]	; (8014eb0 <tcp_receive+0xf18>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	441a      	add	r2, r3
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d3e:	6879      	ldr	r1, [r7, #4]
 8014d40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014d42:	440b      	add	r3, r1
 8014d44:	1ad3      	subs	r3, r2, r3
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	f340 8089 	ble.w	8014e5e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	899b      	ldrh	r3, [r3, #12]
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fa f96e 	bl	800f038 <lwip_htons>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	f003 0301 	and.w	r3, r3, #1
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d022      	beq.n	8014dae <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	68db      	ldr	r3, [r3, #12]
 8014d6e:	899b      	ldrh	r3, [r3, #12]
 8014d70:	b29b      	uxth	r3, r3
 8014d72:	b21b      	sxth	r3, r3
 8014d74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014d78:	b21c      	sxth	r4, r3
 8014d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	68db      	ldr	r3, [r3, #12]
 8014d80:	899b      	ldrh	r3, [r3, #12]
 8014d82:	b29b      	uxth	r3, r3
 8014d84:	4618      	mov	r0, r3
 8014d86:	f7fa f957 	bl	800f038 <lwip_htons>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014d94:	b29b      	uxth	r3, r3
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fa f94e 	bl	800f038 <lwip_htons>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	b21b      	sxth	r3, r3
 8014da0:	4323      	orrs	r3, r4
 8014da2:	b21a      	sxth	r2, r3
 8014da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	68db      	ldr	r3, [r3, #12]
 8014daa:	b292      	uxth	r2, r2
 8014dac:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014db8:	4413      	add	r3, r2
 8014dba:	b299      	uxth	r1, r3
 8014dbc:	4b3c      	ldr	r3, [pc, #240]	; (8014eb0 <tcp_receive+0xf18>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	b29a      	uxth	r2, r3
 8014dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	1a8a      	subs	r2, r1, r2
 8014dc8:	b292      	uxth	r2, r2
 8014dca:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	685a      	ldr	r2, [r3, #4]
 8014dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	891b      	ldrh	r3, [r3, #8]
 8014dd8:	4619      	mov	r1, r3
 8014dda:	4610      	mov	r0, r2
 8014ddc:	f7fb fb98 	bl	8010510 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	891c      	ldrh	r4, [r3, #8]
 8014de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	68db      	ldr	r3, [r3, #12]
 8014dec:	899b      	ldrh	r3, [r3, #12]
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7fa f921 	bl	800f038 <lwip_htons>
 8014df6:	4603      	mov	r3, r0
 8014df8:	b2db      	uxtb	r3, r3
 8014dfa:	f003 0303 	and.w	r3, r3, #3
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d001      	beq.n	8014e06 <tcp_receive+0xe6e>
 8014e02:	2301      	movs	r3, #1
 8014e04:	e000      	b.n	8014e08 <tcp_receive+0xe70>
 8014e06:	2300      	movs	r3, #0
 8014e08:	4423      	add	r3, r4
 8014e0a:	b29a      	uxth	r2, r3
 8014e0c:	4b2a      	ldr	r3, [pc, #168]	; (8014eb8 <tcp_receive+0xf20>)
 8014e0e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014e10:	4b29      	ldr	r3, [pc, #164]	; (8014eb8 <tcp_receive+0xf20>)
 8014e12:	881b      	ldrh	r3, [r3, #0]
 8014e14:	461a      	mov	r2, r3
 8014e16:	4b26      	ldr	r3, [pc, #152]	; (8014eb0 <tcp_receive+0xf18>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	441a      	add	r2, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e24:	440b      	add	r3, r1
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d019      	beq.n	8014e5e <tcp_receive+0xec6>
 8014e2a:	4b24      	ldr	r3, [pc, #144]	; (8014ebc <tcp_receive+0xf24>)
 8014e2c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014e30:	4923      	ldr	r1, [pc, #140]	; (8014ec0 <tcp_receive+0xf28>)
 8014e32:	4824      	ldr	r0, [pc, #144]	; (8014ec4 <tcp_receive+0xf2c>)
 8014e34:	f005 fa9e 	bl	801a374 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014e38:	e011      	b.n	8014e5e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	f47f aea4 	bne.w	8014b90 <tcp_receive+0xbf8>
 8014e48:	e00a      	b.n	8014e60 <tcp_receive+0xec8>
                break;
 8014e4a:	bf00      	nop
 8014e4c:	e008      	b.n	8014e60 <tcp_receive+0xec8>
                break;
 8014e4e:	bf00      	nop
 8014e50:	e006      	b.n	8014e60 <tcp_receive+0xec8>
                  break;
 8014e52:	bf00      	nop
 8014e54:	e004      	b.n	8014e60 <tcp_receive+0xec8>
                  break;
 8014e56:	bf00      	nop
 8014e58:	e002      	b.n	8014e60 <tcp_receive+0xec8>
                  break;
 8014e5a:	bf00      	nop
 8014e5c:	e000      	b.n	8014e60 <tcp_receive+0xec8>
                break;
 8014e5e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f001 fe8b 	bl	8016b7c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014e66:	e003      	b.n	8014e70 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014e68:	6878      	ldr	r0, [r7, #4]
 8014e6a:	f001 fe87 	bl	8016b7c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014e6e:	e01a      	b.n	8014ea6 <tcp_receive+0xf0e>
 8014e70:	e019      	b.n	8014ea6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014e72:	4b0f      	ldr	r3, [pc, #60]	; (8014eb0 <tcp_receive+0xf18>)
 8014e74:	681a      	ldr	r2, [r3, #0]
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e7a:	1ad3      	subs	r3, r2, r3
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	db0a      	blt.n	8014e96 <tcp_receive+0xefe>
 8014e80:	4b0b      	ldr	r3, [pc, #44]	; (8014eb0 <tcp_receive+0xf18>)
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e88:	6879      	ldr	r1, [r7, #4]
 8014e8a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014e8c:	440b      	add	r3, r1
 8014e8e:	1ad3      	subs	r3, r2, r3
 8014e90:	3301      	adds	r3, #1
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	dd07      	ble.n	8014ea6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	8b5b      	ldrh	r3, [r3, #26]
 8014e9a:	f043 0302 	orr.w	r3, r3, #2
 8014e9e:	b29a      	uxth	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014ea4:	e7ff      	b.n	8014ea6 <tcp_receive+0xf0e>
 8014ea6:	bf00      	nop
 8014ea8:	3750      	adds	r7, #80	; 0x50
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bdb0      	pop	{r4, r5, r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	2004f608 	.word	0x2004f608
 8014eb4:	2004f5e8 	.word	0x2004f5e8
 8014eb8:	2004f612 	.word	0x2004f612
 8014ebc:	0801cfcc 	.word	0x0801cfcc
 8014ec0:	0801d374 	.word	0x0801d374
 8014ec4:	0801d018 	.word	0x0801d018

08014ec8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b083      	sub	sp, #12
 8014ecc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014ece:	4b15      	ldr	r3, [pc, #84]	; (8014f24 <tcp_get_next_optbyte+0x5c>)
 8014ed0:	881b      	ldrh	r3, [r3, #0]
 8014ed2:	1c5a      	adds	r2, r3, #1
 8014ed4:	b291      	uxth	r1, r2
 8014ed6:	4a13      	ldr	r2, [pc, #76]	; (8014f24 <tcp_get_next_optbyte+0x5c>)
 8014ed8:	8011      	strh	r1, [r2, #0]
 8014eda:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014edc:	4b12      	ldr	r3, [pc, #72]	; (8014f28 <tcp_get_next_optbyte+0x60>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d004      	beq.n	8014eee <tcp_get_next_optbyte+0x26>
 8014ee4:	4b11      	ldr	r3, [pc, #68]	; (8014f2c <tcp_get_next_optbyte+0x64>)
 8014ee6:	881b      	ldrh	r3, [r3, #0]
 8014ee8:	88fa      	ldrh	r2, [r7, #6]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d208      	bcs.n	8014f00 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014eee:	4b10      	ldr	r3, [pc, #64]	; (8014f30 <tcp_get_next_optbyte+0x68>)
 8014ef0:	681b      	ldr	r3, [r3, #0]
 8014ef2:	3314      	adds	r3, #20
 8014ef4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014ef6:	88fb      	ldrh	r3, [r7, #6]
 8014ef8:	683a      	ldr	r2, [r7, #0]
 8014efa:	4413      	add	r3, r2
 8014efc:	781b      	ldrb	r3, [r3, #0]
 8014efe:	e00b      	b.n	8014f18 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014f00:	88fb      	ldrh	r3, [r7, #6]
 8014f02:	b2da      	uxtb	r2, r3
 8014f04:	4b09      	ldr	r3, [pc, #36]	; (8014f2c <tcp_get_next_optbyte+0x64>)
 8014f06:	881b      	ldrh	r3, [r3, #0]
 8014f08:	b2db      	uxtb	r3, r3
 8014f0a:	1ad3      	subs	r3, r2, r3
 8014f0c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014f0e:	4b06      	ldr	r3, [pc, #24]	; (8014f28 <tcp_get_next_optbyte+0x60>)
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	797b      	ldrb	r3, [r7, #5]
 8014f14:	4413      	add	r3, r2
 8014f16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014f18:	4618      	mov	r0, r3
 8014f1a:	370c      	adds	r7, #12
 8014f1c:	46bd      	mov	sp, r7
 8014f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f22:	4770      	bx	lr
 8014f24:	2004f604 	.word	0x2004f604
 8014f28:	2004f600 	.word	0x2004f600
 8014f2c:	2004f5fe 	.word	0x2004f5fe
 8014f30:	2004f5f8 	.word	0x2004f5f8

08014f34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b084      	sub	sp, #16
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d106      	bne.n	8014f50 <tcp_parseopt+0x1c>
 8014f42:	4b32      	ldr	r3, [pc, #200]	; (801500c <tcp_parseopt+0xd8>)
 8014f44:	f240 727d 	movw	r2, #1917	; 0x77d
 8014f48:	4931      	ldr	r1, [pc, #196]	; (8015010 <tcp_parseopt+0xdc>)
 8014f4a:	4832      	ldr	r0, [pc, #200]	; (8015014 <tcp_parseopt+0xe0>)
 8014f4c:	f005 fa12 	bl	801a374 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014f50:	4b31      	ldr	r3, [pc, #196]	; (8015018 <tcp_parseopt+0xe4>)
 8014f52:	881b      	ldrh	r3, [r3, #0]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d055      	beq.n	8015004 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014f58:	4b30      	ldr	r3, [pc, #192]	; (801501c <tcp_parseopt+0xe8>)
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	801a      	strh	r2, [r3, #0]
 8014f5e:	e045      	b.n	8014fec <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014f60:	f7ff ffb2 	bl	8014ec8 <tcp_get_next_optbyte>
 8014f64:	4603      	mov	r3, r0
 8014f66:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014f68:	7bfb      	ldrb	r3, [r7, #15]
 8014f6a:	2b02      	cmp	r3, #2
 8014f6c:	d006      	beq.n	8014f7c <tcp_parseopt+0x48>
 8014f6e:	2b02      	cmp	r3, #2
 8014f70:	dc2b      	bgt.n	8014fca <tcp_parseopt+0x96>
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d041      	beq.n	8014ffa <tcp_parseopt+0xc6>
 8014f76:	2b01      	cmp	r3, #1
 8014f78:	d127      	bne.n	8014fca <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014f7a:	e037      	b.n	8014fec <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014f7c:	f7ff ffa4 	bl	8014ec8 <tcp_get_next_optbyte>
 8014f80:	4603      	mov	r3, r0
 8014f82:	2b04      	cmp	r3, #4
 8014f84:	d13b      	bne.n	8014ffe <tcp_parseopt+0xca>
 8014f86:	4b25      	ldr	r3, [pc, #148]	; (801501c <tcp_parseopt+0xe8>)
 8014f88:	881b      	ldrh	r3, [r3, #0]
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	4a22      	ldr	r2, [pc, #136]	; (8015018 <tcp_parseopt+0xe4>)
 8014f8e:	8812      	ldrh	r2, [r2, #0]
 8014f90:	4293      	cmp	r3, r2
 8014f92:	da34      	bge.n	8014ffe <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014f94:	f7ff ff98 	bl	8014ec8 <tcp_get_next_optbyte>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	b29b      	uxth	r3, r3
 8014f9c:	021b      	lsls	r3, r3, #8
 8014f9e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014fa0:	f7ff ff92 	bl	8014ec8 <tcp_get_next_optbyte>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	b29a      	uxth	r2, r3
 8014fa8:	89bb      	ldrh	r3, [r7, #12]
 8014faa:	4313      	orrs	r3, r2
 8014fac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014fae:	89bb      	ldrh	r3, [r7, #12]
 8014fb0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014fb4:	d804      	bhi.n	8014fc0 <tcp_parseopt+0x8c>
 8014fb6:	89bb      	ldrh	r3, [r7, #12]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d001      	beq.n	8014fc0 <tcp_parseopt+0x8c>
 8014fbc:	89ba      	ldrh	r2, [r7, #12]
 8014fbe:	e001      	b.n	8014fc4 <tcp_parseopt+0x90>
 8014fc0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014fc8:	e010      	b.n	8014fec <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014fca:	f7ff ff7d 	bl	8014ec8 <tcp_get_next_optbyte>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014fd2:	7afb      	ldrb	r3, [r7, #11]
 8014fd4:	2b01      	cmp	r3, #1
 8014fd6:	d914      	bls.n	8015002 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014fd8:	7afb      	ldrb	r3, [r7, #11]
 8014fda:	b29a      	uxth	r2, r3
 8014fdc:	4b0f      	ldr	r3, [pc, #60]	; (801501c <tcp_parseopt+0xe8>)
 8014fde:	881b      	ldrh	r3, [r3, #0]
 8014fe0:	4413      	add	r3, r2
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	3b02      	subs	r3, #2
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	4b0c      	ldr	r3, [pc, #48]	; (801501c <tcp_parseopt+0xe8>)
 8014fea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014fec:	4b0b      	ldr	r3, [pc, #44]	; (801501c <tcp_parseopt+0xe8>)
 8014fee:	881a      	ldrh	r2, [r3, #0]
 8014ff0:	4b09      	ldr	r3, [pc, #36]	; (8015018 <tcp_parseopt+0xe4>)
 8014ff2:	881b      	ldrh	r3, [r3, #0]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d3b3      	bcc.n	8014f60 <tcp_parseopt+0x2c>
 8014ff8:	e004      	b.n	8015004 <tcp_parseopt+0xd0>
          return;
 8014ffa:	bf00      	nop
 8014ffc:	e002      	b.n	8015004 <tcp_parseopt+0xd0>
            return;
 8014ffe:	bf00      	nop
 8015000:	e000      	b.n	8015004 <tcp_parseopt+0xd0>
            return;
 8015002:	bf00      	nop
      }
    }
  }
}
 8015004:	3710      	adds	r7, #16
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop
 801500c:	0801cfcc 	.word	0x0801cfcc
 8015010:	0801d430 	.word	0x0801d430
 8015014:	0801d018 	.word	0x0801d018
 8015018:	2004f5fc 	.word	0x2004f5fc
 801501c:	2004f604 	.word	0x2004f604

08015020 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015020:	b480      	push	{r7}
 8015022:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015024:	4b05      	ldr	r3, [pc, #20]	; (801503c <tcp_trigger_input_pcb_close+0x1c>)
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	f043 0310 	orr.w	r3, r3, #16
 801502c:	b2da      	uxtb	r2, r3
 801502e:	4b03      	ldr	r3, [pc, #12]	; (801503c <tcp_trigger_input_pcb_close+0x1c>)
 8015030:	701a      	strb	r2, [r3, #0]
}
 8015032:	bf00      	nop
 8015034:	46bd      	mov	sp, r7
 8015036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503a:	4770      	bx	lr
 801503c:	2004f615 	.word	0x2004f615

08015040 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b084      	sub	sp, #16
 8015044:	af00      	add	r7, sp, #0
 8015046:	60f8      	str	r0, [r7, #12]
 8015048:	60b9      	str	r1, [r7, #8]
 801504a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00a      	beq.n	8015068 <tcp_route+0x28>
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	7a1b      	ldrb	r3, [r3, #8]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d006      	beq.n	8015068 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	7a1b      	ldrb	r3, [r3, #8]
 801505e:	4618      	mov	r0, r3
 8015060:	f7fb f84e 	bl	8010100 <netif_get_by_index>
 8015064:	4603      	mov	r3, r0
 8015066:	e003      	b.n	8015070 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f003 fc09 	bl	8018880 <ip4_route>
 801506e:	4603      	mov	r3, r0
  }
}
 8015070:	4618      	mov	r0, r3
 8015072:	3710      	adds	r7, #16
 8015074:	46bd      	mov	sp, r7
 8015076:	bd80      	pop	{r7, pc}

08015078 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015078:	b590      	push	{r4, r7, lr}
 801507a:	b087      	sub	sp, #28
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	603b      	str	r3, [r7, #0]
 8015084:	4613      	mov	r3, r2
 8015086:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d105      	bne.n	801509a <tcp_create_segment+0x22>
 801508e:	4b44      	ldr	r3, [pc, #272]	; (80151a0 <tcp_create_segment+0x128>)
 8015090:	22a3      	movs	r2, #163	; 0xa3
 8015092:	4944      	ldr	r1, [pc, #272]	; (80151a4 <tcp_create_segment+0x12c>)
 8015094:	4844      	ldr	r0, [pc, #272]	; (80151a8 <tcp_create_segment+0x130>)
 8015096:	f005 f96d 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d105      	bne.n	80150ac <tcp_create_segment+0x34>
 80150a0:	4b3f      	ldr	r3, [pc, #252]	; (80151a0 <tcp_create_segment+0x128>)
 80150a2:	22a4      	movs	r2, #164	; 0xa4
 80150a4:	4941      	ldr	r1, [pc, #260]	; (80151ac <tcp_create_segment+0x134>)
 80150a6:	4840      	ldr	r0, [pc, #256]	; (80151a8 <tcp_create_segment+0x130>)
 80150a8:	f005 f964 	bl	801a374 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80150ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80150b0:	009b      	lsls	r3, r3, #2
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	f003 0304 	and.w	r3, r3, #4
 80150b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80150ba:	2003      	movs	r0, #3
 80150bc:	f7fa fc94 	bl	800f9e8 <memp_malloc>
 80150c0:	6138      	str	r0, [r7, #16]
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d104      	bne.n	80150d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80150c8:	68b8      	ldr	r0, [r7, #8]
 80150ca:	f7fb fba7 	bl	801081c <pbuf_free>
    return NULL;
 80150ce:	2300      	movs	r3, #0
 80150d0:	e061      	b.n	8015196 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80150d2:	693b      	ldr	r3, [r7, #16]
 80150d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80150d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	2200      	movs	r2, #0
 80150de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	891a      	ldrh	r2, [r3, #8]
 80150ea:	7dfb      	ldrb	r3, [r7, #23]
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d205      	bcs.n	80150fe <tcp_create_segment+0x86>
 80150f2:	4b2b      	ldr	r3, [pc, #172]	; (80151a0 <tcp_create_segment+0x128>)
 80150f4:	22b0      	movs	r2, #176	; 0xb0
 80150f6:	492e      	ldr	r1, [pc, #184]	; (80151b0 <tcp_create_segment+0x138>)
 80150f8:	482b      	ldr	r0, [pc, #172]	; (80151a8 <tcp_create_segment+0x130>)
 80150fa:	f005 f93b 	bl	801a374 <iprintf>
  seg->len = p->tot_len - optlen;
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	891a      	ldrh	r2, [r3, #8]
 8015102:	7dfb      	ldrb	r3, [r7, #23]
 8015104:	b29b      	uxth	r3, r3
 8015106:	1ad3      	subs	r3, r2, r3
 8015108:	b29a      	uxth	r2, r3
 801510a:	693b      	ldr	r3, [r7, #16]
 801510c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801510e:	2114      	movs	r1, #20
 8015110:	68b8      	ldr	r0, [r7, #8]
 8015112:	f7fb faed 	bl	80106f0 <pbuf_add_header>
 8015116:	4603      	mov	r3, r0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d004      	beq.n	8015126 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801511c:	6938      	ldr	r0, [r7, #16]
 801511e:	f7fd f800 	bl	8012122 <tcp_seg_free>
    return NULL;
 8015122:	2300      	movs	r3, #0
 8015124:	e037      	b.n	8015196 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	685a      	ldr	r2, [r3, #4]
 801512c:	693b      	ldr	r3, [r7, #16]
 801512e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	8ada      	ldrh	r2, [r3, #22]
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	68dc      	ldr	r4, [r3, #12]
 8015138:	4610      	mov	r0, r2
 801513a:	f7f9 ff7d 	bl	800f038 <lwip_htons>
 801513e:	4603      	mov	r3, r0
 8015140:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	8b1a      	ldrh	r2, [r3, #24]
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	68dc      	ldr	r4, [r3, #12]
 801514a:	4610      	mov	r0, r2
 801514c:	f7f9 ff74 	bl	800f038 <lwip_htons>
 8015150:	4603      	mov	r3, r0
 8015152:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015154:	693b      	ldr	r3, [r7, #16]
 8015156:	68dc      	ldr	r4, [r3, #12]
 8015158:	6838      	ldr	r0, [r7, #0]
 801515a:	f7f9 ff82 	bl	800f062 <lwip_htonl>
 801515e:	4603      	mov	r3, r0
 8015160:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015162:	7dfb      	ldrb	r3, [r7, #23]
 8015164:	089b      	lsrs	r3, r3, #2
 8015166:	b2db      	uxtb	r3, r3
 8015168:	b29b      	uxth	r3, r3
 801516a:	3305      	adds	r3, #5
 801516c:	b29b      	uxth	r3, r3
 801516e:	031b      	lsls	r3, r3, #12
 8015170:	b29a      	uxth	r2, r3
 8015172:	79fb      	ldrb	r3, [r7, #7]
 8015174:	b29b      	uxth	r3, r3
 8015176:	4313      	orrs	r3, r2
 8015178:	b29a      	uxth	r2, r3
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	68dc      	ldr	r4, [r3, #12]
 801517e:	4610      	mov	r0, r2
 8015180:	f7f9 ff5a 	bl	800f038 <lwip_htons>
 8015184:	4603      	mov	r3, r0
 8015186:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015188:	693b      	ldr	r3, [r7, #16]
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	2200      	movs	r2, #0
 801518e:	749a      	strb	r2, [r3, #18]
 8015190:	2200      	movs	r2, #0
 8015192:	74da      	strb	r2, [r3, #19]
  return seg;
 8015194:	693b      	ldr	r3, [r7, #16]
}
 8015196:	4618      	mov	r0, r3
 8015198:	371c      	adds	r7, #28
 801519a:	46bd      	mov	sp, r7
 801519c:	bd90      	pop	{r4, r7, pc}
 801519e:	bf00      	nop
 80151a0:	0801d44c 	.word	0x0801d44c
 80151a4:	0801d480 	.word	0x0801d480
 80151a8:	0801d4a0 	.word	0x0801d4a0
 80151ac:	0801d4c8 	.word	0x0801d4c8
 80151b0:	0801d4ec 	.word	0x0801d4ec

080151b4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b086      	sub	sp, #24
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	607b      	str	r3, [r7, #4]
 80151bc:	4603      	mov	r3, r0
 80151be:	73fb      	strb	r3, [r7, #15]
 80151c0:	460b      	mov	r3, r1
 80151c2:	81bb      	strh	r3, [r7, #12]
 80151c4:	4613      	mov	r3, r2
 80151c6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80151c8:	89bb      	ldrh	r3, [r7, #12]
 80151ca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d105      	bne.n	80151de <tcp_pbuf_prealloc+0x2a>
 80151d2:	4b30      	ldr	r3, [pc, #192]	; (8015294 <tcp_pbuf_prealloc+0xe0>)
 80151d4:	22e8      	movs	r2, #232	; 0xe8
 80151d6:	4930      	ldr	r1, [pc, #192]	; (8015298 <tcp_pbuf_prealloc+0xe4>)
 80151d8:	4830      	ldr	r0, [pc, #192]	; (801529c <tcp_pbuf_prealloc+0xe8>)
 80151da:	f005 f8cb 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80151de:	6a3b      	ldr	r3, [r7, #32]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d105      	bne.n	80151f0 <tcp_pbuf_prealloc+0x3c>
 80151e4:	4b2b      	ldr	r3, [pc, #172]	; (8015294 <tcp_pbuf_prealloc+0xe0>)
 80151e6:	22e9      	movs	r2, #233	; 0xe9
 80151e8:	492d      	ldr	r1, [pc, #180]	; (80152a0 <tcp_pbuf_prealloc+0xec>)
 80151ea:	482c      	ldr	r0, [pc, #176]	; (801529c <tcp_pbuf_prealloc+0xe8>)
 80151ec:	f005 f8c2 	bl	801a374 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80151f0:	89ba      	ldrh	r2, [r7, #12]
 80151f2:	897b      	ldrh	r3, [r7, #10]
 80151f4:	429a      	cmp	r2, r3
 80151f6:	d221      	bcs.n	801523c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80151f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80151fc:	f003 0302 	and.w	r3, r3, #2
 8015200:	2b00      	cmp	r3, #0
 8015202:	d111      	bne.n	8015228 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015204:	6a3b      	ldr	r3, [r7, #32]
 8015206:	8b5b      	ldrh	r3, [r3, #26]
 8015208:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801520c:	2b00      	cmp	r3, #0
 801520e:	d115      	bne.n	801523c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015210:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015214:	2b00      	cmp	r3, #0
 8015216:	d007      	beq.n	8015228 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015218:	6a3b      	ldr	r3, [r7, #32]
 801521a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801521c:	2b00      	cmp	r3, #0
 801521e:	d103      	bne.n	8015228 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015220:	6a3b      	ldr	r3, [r7, #32]
 8015222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015224:	2b00      	cmp	r3, #0
 8015226:	d009      	beq.n	801523c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015228:	89bb      	ldrh	r3, [r7, #12]
 801522a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801522e:	f023 0203 	bic.w	r2, r3, #3
 8015232:	897b      	ldrh	r3, [r7, #10]
 8015234:	4293      	cmp	r3, r2
 8015236:	bf28      	it	cs
 8015238:	4613      	movcs	r3, r2
 801523a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801523c:	8af9      	ldrh	r1, [r7, #22]
 801523e:	7bfb      	ldrb	r3, [r7, #15]
 8015240:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015244:	4618      	mov	r0, r3
 8015246:	f7fb f805 	bl	8010254 <pbuf_alloc>
 801524a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801524c:	693b      	ldr	r3, [r7, #16]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d101      	bne.n	8015256 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015252:	2300      	movs	r3, #0
 8015254:	e019      	b.n	801528a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d006      	beq.n	801526c <tcp_pbuf_prealloc+0xb8>
 801525e:	4b0d      	ldr	r3, [pc, #52]	; (8015294 <tcp_pbuf_prealloc+0xe0>)
 8015260:	f240 120b 	movw	r2, #267	; 0x10b
 8015264:	490f      	ldr	r1, [pc, #60]	; (80152a4 <tcp_pbuf_prealloc+0xf0>)
 8015266:	480d      	ldr	r0, [pc, #52]	; (801529c <tcp_pbuf_prealloc+0xe8>)
 8015268:	f005 f884 	bl	801a374 <iprintf>
  *oversize = p->len - length;
 801526c:	693b      	ldr	r3, [r7, #16]
 801526e:	895a      	ldrh	r2, [r3, #10]
 8015270:	89bb      	ldrh	r3, [r7, #12]
 8015272:	1ad3      	subs	r3, r2, r3
 8015274:	b29a      	uxth	r2, r3
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	89ba      	ldrh	r2, [r7, #12]
 801527e:	811a      	strh	r2, [r3, #8]
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	891a      	ldrh	r2, [r3, #8]
 8015284:	693b      	ldr	r3, [r7, #16]
 8015286:	815a      	strh	r2, [r3, #10]
  return p;
 8015288:	693b      	ldr	r3, [r7, #16]
}
 801528a:	4618      	mov	r0, r3
 801528c:	3718      	adds	r7, #24
 801528e:	46bd      	mov	sp, r7
 8015290:	bd80      	pop	{r7, pc}
 8015292:	bf00      	nop
 8015294:	0801d44c 	.word	0x0801d44c
 8015298:	0801d504 	.word	0x0801d504
 801529c:	0801d4a0 	.word	0x0801d4a0
 80152a0:	0801d528 	.word	0x0801d528
 80152a4:	0801d548 	.word	0x0801d548

080152a8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
 80152b0:	460b      	mov	r3, r1
 80152b2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d106      	bne.n	80152c8 <tcp_write_checks+0x20>
 80152ba:	4b33      	ldr	r3, [pc, #204]	; (8015388 <tcp_write_checks+0xe0>)
 80152bc:	f240 1233 	movw	r2, #307	; 0x133
 80152c0:	4932      	ldr	r1, [pc, #200]	; (801538c <tcp_write_checks+0xe4>)
 80152c2:	4833      	ldr	r0, [pc, #204]	; (8015390 <tcp_write_checks+0xe8>)
 80152c4:	f005 f856 	bl	801a374 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	7d1b      	ldrb	r3, [r3, #20]
 80152cc:	2b04      	cmp	r3, #4
 80152ce:	d00e      	beq.n	80152ee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80152d4:	2b07      	cmp	r3, #7
 80152d6:	d00a      	beq.n	80152ee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80152dc:	2b02      	cmp	r3, #2
 80152de:	d006      	beq.n	80152ee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80152e4:	2b03      	cmp	r3, #3
 80152e6:	d002      	beq.n	80152ee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80152e8:	f06f 030a 	mvn.w	r3, #10
 80152ec:	e048      	b.n	8015380 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80152ee:	887b      	ldrh	r3, [r7, #2]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d101      	bne.n	80152f8 <tcp_write_checks+0x50>
    return ERR_OK;
 80152f4:	2300      	movs	r3, #0
 80152f6:	e043      	b.n	8015380 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80152fe:	887a      	ldrh	r2, [r7, #2]
 8015300:	429a      	cmp	r2, r3
 8015302:	d909      	bls.n	8015318 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	8b5b      	ldrh	r3, [r3, #26]
 8015308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801530c:	b29a      	uxth	r2, r3
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015316:	e033      	b.n	8015380 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801531e:	2b08      	cmp	r3, #8
 8015320:	d909      	bls.n	8015336 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	8b5b      	ldrh	r3, [r3, #26]
 8015326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801532a:	b29a      	uxth	r2, r3
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015334:	e024      	b.n	8015380 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801533c:	2b00      	cmp	r3, #0
 801533e:	d00f      	beq.n	8015360 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015344:	2b00      	cmp	r3, #0
 8015346:	d11a      	bne.n	801537e <tcp_write_checks+0xd6>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801534c:	2b00      	cmp	r3, #0
 801534e:	d116      	bne.n	801537e <tcp_write_checks+0xd6>
 8015350:	4b0d      	ldr	r3, [pc, #52]	; (8015388 <tcp_write_checks+0xe0>)
 8015352:	f240 1255 	movw	r2, #341	; 0x155
 8015356:	490f      	ldr	r1, [pc, #60]	; (8015394 <tcp_write_checks+0xec>)
 8015358:	480d      	ldr	r0, [pc, #52]	; (8015390 <tcp_write_checks+0xe8>)
 801535a:	f005 f80b 	bl	801a374 <iprintf>
 801535e:	e00e      	b.n	801537e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015364:	2b00      	cmp	r3, #0
 8015366:	d103      	bne.n	8015370 <tcp_write_checks+0xc8>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801536c:	2b00      	cmp	r3, #0
 801536e:	d006      	beq.n	801537e <tcp_write_checks+0xd6>
 8015370:	4b05      	ldr	r3, [pc, #20]	; (8015388 <tcp_write_checks+0xe0>)
 8015372:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015376:	4908      	ldr	r1, [pc, #32]	; (8015398 <tcp_write_checks+0xf0>)
 8015378:	4805      	ldr	r0, [pc, #20]	; (8015390 <tcp_write_checks+0xe8>)
 801537a:	f004 fffb 	bl	801a374 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3708      	adds	r7, #8
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	0801d44c 	.word	0x0801d44c
 801538c:	0801d55c 	.word	0x0801d55c
 8015390:	0801d4a0 	.word	0x0801d4a0
 8015394:	0801d57c 	.word	0x0801d57c
 8015398:	0801d5b8 	.word	0x0801d5b8

0801539c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801539c:	b590      	push	{r4, r7, lr}
 801539e:	b09b      	sub	sp, #108	; 0x6c
 80153a0:	af04      	add	r7, sp, #16
 80153a2:	60f8      	str	r0, [r7, #12]
 80153a4:	60b9      	str	r1, [r7, #8]
 80153a6:	4611      	mov	r1, r2
 80153a8:	461a      	mov	r2, r3
 80153aa:	460b      	mov	r3, r1
 80153ac:	80fb      	strh	r3, [r7, #6]
 80153ae:	4613      	mov	r3, r2
 80153b0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80153b2:	2300      	movs	r3, #0
 80153b4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80153b6:	2300      	movs	r3, #0
 80153b8:	653b      	str	r3, [r7, #80]	; 0x50
 80153ba:	2300      	movs	r3, #0
 80153bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80153be:	2300      	movs	r3, #0
 80153c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80153c2:	2300      	movs	r3, #0
 80153c4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80153c6:	2300      	movs	r3, #0
 80153c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80153cc:	2300      	movs	r3, #0
 80153ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80153d2:	2300      	movs	r3, #0
 80153d4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80153d6:	2300      	movs	r3, #0
 80153d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80153da:	2300      	movs	r3, #0
 80153dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d109      	bne.n	80153f8 <tcp_write+0x5c>
 80153e4:	4ba4      	ldr	r3, [pc, #656]	; (8015678 <tcp_write+0x2dc>)
 80153e6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80153ea:	49a4      	ldr	r1, [pc, #656]	; (801567c <tcp_write+0x2e0>)
 80153ec:	48a4      	ldr	r0, [pc, #656]	; (8015680 <tcp_write+0x2e4>)
 80153ee:	f004 ffc1 	bl	801a374 <iprintf>
 80153f2:	f06f 030f 	mvn.w	r3, #15
 80153f6:	e32a      	b.n	8015a4e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80153fe:	085b      	lsrs	r3, r3, #1
 8015400:	b29a      	uxth	r2, r3
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015406:	4293      	cmp	r3, r2
 8015408:	bf28      	it	cs
 801540a:	4613      	movcs	r3, r2
 801540c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801540e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015410:	2b00      	cmp	r3, #0
 8015412:	d102      	bne.n	801541a <tcp_write+0x7e>
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015418:	e000      	b.n	801541c <tcp_write+0x80>
 801541a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801541c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d109      	bne.n	8015438 <tcp_write+0x9c>
 8015424:	4b94      	ldr	r3, [pc, #592]	; (8015678 <tcp_write+0x2dc>)
 8015426:	f240 12ad 	movw	r2, #429	; 0x1ad
 801542a:	4996      	ldr	r1, [pc, #600]	; (8015684 <tcp_write+0x2e8>)
 801542c:	4894      	ldr	r0, [pc, #592]	; (8015680 <tcp_write+0x2e4>)
 801542e:	f004 ffa1 	bl	801a374 <iprintf>
 8015432:	f06f 030f 	mvn.w	r3, #15
 8015436:	e30a      	b.n	8015a4e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015438:	88fb      	ldrh	r3, [r7, #6]
 801543a:	4619      	mov	r1, r3
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f7ff ff33 	bl	80152a8 <tcp_write_checks>
 8015442:	4603      	mov	r3, r0
 8015444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015448:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801544c:	2b00      	cmp	r3, #0
 801544e:	d002      	beq.n	8015456 <tcp_write+0xba>
    return err;
 8015450:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015454:	e2fb      	b.n	8015a4e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801545c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015460:	2300      	movs	r3, #0
 8015462:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801546a:	2b00      	cmp	r3, #0
 801546c:	f000 80f6 	beq.w	801565c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015474:	653b      	str	r3, [r7, #80]	; 0x50
 8015476:	e002      	b.n	801547e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801547a:	681b      	ldr	r3, [r3, #0]
 801547c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801547e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d1f8      	bne.n	8015478 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015488:	7a9b      	ldrb	r3, [r3, #10]
 801548a:	009b      	lsls	r3, r3, #2
 801548c:	b29b      	uxth	r3, r3
 801548e:	f003 0304 	and.w	r3, r3, #4
 8015492:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015494:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015498:	891b      	ldrh	r3, [r3, #8]
 801549a:	4619      	mov	r1, r3
 801549c:	8c3b      	ldrh	r3, [r7, #32]
 801549e:	440b      	add	r3, r1
 80154a0:	429a      	cmp	r2, r3
 80154a2:	da06      	bge.n	80154b2 <tcp_write+0x116>
 80154a4:	4b74      	ldr	r3, [pc, #464]	; (8015678 <tcp_write+0x2dc>)
 80154a6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80154aa:	4977      	ldr	r1, [pc, #476]	; (8015688 <tcp_write+0x2ec>)
 80154ac:	4874      	ldr	r0, [pc, #464]	; (8015680 <tcp_write+0x2e4>)
 80154ae:	f004 ff61 	bl	801a374 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80154b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154b4:	891a      	ldrh	r2, [r3, #8]
 80154b6:	8c3b      	ldrh	r3, [r7, #32]
 80154b8:	4413      	add	r3, r2
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154c8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80154ca:	8a7b      	ldrh	r3, [r7, #18]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d026      	beq.n	801551e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80154d0:	8a7b      	ldrh	r3, [r7, #18]
 80154d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80154d4:	429a      	cmp	r2, r3
 80154d6:	d206      	bcs.n	80154e6 <tcp_write+0x14a>
 80154d8:	4b67      	ldr	r3, [pc, #412]	; (8015678 <tcp_write+0x2dc>)
 80154da:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80154de:	496b      	ldr	r1, [pc, #428]	; (801568c <tcp_write+0x2f0>)
 80154e0:	4867      	ldr	r0, [pc, #412]	; (8015680 <tcp_write+0x2e4>)
 80154e2:	f004 ff47 	bl	801a374 <iprintf>
      seg = last_unsent;
 80154e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80154ea:	8a7b      	ldrh	r3, [r7, #18]
 80154ec:	88fa      	ldrh	r2, [r7, #6]
 80154ee:	4293      	cmp	r3, r2
 80154f0:	bf28      	it	cs
 80154f2:	4613      	movcs	r3, r2
 80154f4:	b29b      	uxth	r3, r3
 80154f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80154f8:	4293      	cmp	r3, r2
 80154fa:	bf28      	it	cs
 80154fc:	4613      	movcs	r3, r2
 80154fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015500:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015504:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015506:	4413      	add	r3, r2
 8015508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801550c:	8a7a      	ldrh	r2, [r7, #18]
 801550e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015510:	1ad3      	subs	r3, r2, r3
 8015512:	b29b      	uxth	r3, r3
 8015514:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015516:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015518:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801551a:	1ad3      	subs	r3, r2, r3
 801551c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801551e:	8a7b      	ldrh	r3, [r7, #18]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00b      	beq.n	801553c <tcp_write+0x1a0>
 8015524:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015528:	88fb      	ldrh	r3, [r7, #6]
 801552a:	429a      	cmp	r2, r3
 801552c:	d006      	beq.n	801553c <tcp_write+0x1a0>
 801552e:	4b52      	ldr	r3, [pc, #328]	; (8015678 <tcp_write+0x2dc>)
 8015530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015534:	4956      	ldr	r1, [pc, #344]	; (8015690 <tcp_write+0x2f4>)
 8015536:	4852      	ldr	r0, [pc, #328]	; (8015680 <tcp_write+0x2e4>)
 8015538:	f004 ff1c 	bl	801a374 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801553c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015540:	88fb      	ldrh	r3, [r7, #6]
 8015542:	429a      	cmp	r2, r3
 8015544:	f080 8167 	bcs.w	8015816 <tcp_write+0x47a>
 8015548:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801554a:	2b00      	cmp	r3, #0
 801554c:	f000 8163 	beq.w	8015816 <tcp_write+0x47a>
 8015550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015552:	891b      	ldrh	r3, [r3, #8]
 8015554:	2b00      	cmp	r3, #0
 8015556:	f000 815e 	beq.w	8015816 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801555a:	88fa      	ldrh	r2, [r7, #6]
 801555c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015560:	1ad2      	subs	r2, r2, r3
 8015562:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015564:	4293      	cmp	r3, r2
 8015566:	bfa8      	it	ge
 8015568:	4613      	movge	r3, r2
 801556a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801556c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801556e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015570:	797b      	ldrb	r3, [r7, #5]
 8015572:	f003 0301 	and.w	r3, r3, #1
 8015576:	2b00      	cmp	r3, #0
 8015578:	d027      	beq.n	80155ca <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801557a:	f107 0012 	add.w	r0, r7, #18
 801557e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015580:	8bf9      	ldrh	r1, [r7, #30]
 8015582:	2301      	movs	r3, #1
 8015584:	9302      	str	r3, [sp, #8]
 8015586:	797b      	ldrb	r3, [r7, #5]
 8015588:	9301      	str	r3, [sp, #4]
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	4603      	mov	r3, r0
 8015590:	2000      	movs	r0, #0
 8015592:	f7ff fe0f 	bl	80151b4 <tcp_pbuf_prealloc>
 8015596:	6578      	str	r0, [r7, #84]	; 0x54
 8015598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801559a:	2b00      	cmp	r3, #0
 801559c:	f000 8225 	beq.w	80159ea <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80155a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155a2:	6858      	ldr	r0, [r3, #4]
 80155a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155a8:	68ba      	ldr	r2, [r7, #8]
 80155aa:	4413      	add	r3, r2
 80155ac:	8bfa      	ldrh	r2, [r7, #30]
 80155ae:	4619      	mov	r1, r3
 80155b0:	f004 fe35 	bl	801a21e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80155b4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80155b6:	f7fb f9bf 	bl	8010938 <pbuf_clen>
 80155ba:	4603      	mov	r3, r0
 80155bc:	461a      	mov	r2, r3
 80155be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155c2:	4413      	add	r3, r2
 80155c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80155c8:	e041      	b.n	801564e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80155ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155cc:	685b      	ldr	r3, [r3, #4]
 80155ce:	637b      	str	r3, [r7, #52]	; 0x34
 80155d0:	e002      	b.n	80155d8 <tcp_write+0x23c>
 80155d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	637b      	str	r3, [r7, #52]	; 0x34
 80155d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1f8      	bne.n	80155d2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80155e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155e2:	7b1b      	ldrb	r3, [r3, #12]
 80155e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d115      	bne.n	8015618 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80155ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155ee:	685b      	ldr	r3, [r3, #4]
 80155f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155f2:	8952      	ldrh	r2, [r2, #10]
 80155f4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80155f6:	68ba      	ldr	r2, [r7, #8]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d10d      	bne.n	8015618 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80155fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015600:	2b00      	cmp	r3, #0
 8015602:	d006      	beq.n	8015612 <tcp_write+0x276>
 8015604:	4b1c      	ldr	r3, [pc, #112]	; (8015678 <tcp_write+0x2dc>)
 8015606:	f240 2231 	movw	r2, #561	; 0x231
 801560a:	4922      	ldr	r1, [pc, #136]	; (8015694 <tcp_write+0x2f8>)
 801560c:	481c      	ldr	r0, [pc, #112]	; (8015680 <tcp_write+0x2e4>)
 801560e:	f004 feb1 	bl	801a374 <iprintf>
          extendlen = seglen;
 8015612:	8bfb      	ldrh	r3, [r7, #30]
 8015614:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015616:	e01a      	b.n	801564e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015618:	8bfb      	ldrh	r3, [r7, #30]
 801561a:	2201      	movs	r2, #1
 801561c:	4619      	mov	r1, r3
 801561e:	2000      	movs	r0, #0
 8015620:	f7fa fe18 	bl	8010254 <pbuf_alloc>
 8015624:	6578      	str	r0, [r7, #84]	; 0x54
 8015626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015628:	2b00      	cmp	r3, #0
 801562a:	f000 81e0 	beq.w	80159ee <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801562e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015632:	68ba      	ldr	r2, [r7, #8]
 8015634:	441a      	add	r2, r3
 8015636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015638:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801563a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801563c:	f7fb f97c 	bl	8010938 <pbuf_clen>
 8015640:	4603      	mov	r3, r0
 8015642:	461a      	mov	r2, r3
 8015644:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015648:	4413      	add	r3, r2
 801564a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801564e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015652:	8bfb      	ldrh	r3, [r7, #30]
 8015654:	4413      	add	r3, r2
 8015656:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801565a:	e0dc      	b.n	8015816 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015662:	2b00      	cmp	r3, #0
 8015664:	f000 80d7 	beq.w	8015816 <tcp_write+0x47a>
 8015668:	4b03      	ldr	r3, [pc, #12]	; (8015678 <tcp_write+0x2dc>)
 801566a:	f240 224a 	movw	r2, #586	; 0x24a
 801566e:	490a      	ldr	r1, [pc, #40]	; (8015698 <tcp_write+0x2fc>)
 8015670:	4803      	ldr	r0, [pc, #12]	; (8015680 <tcp_write+0x2e4>)
 8015672:	f004 fe7f 	bl	801a374 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015676:	e0ce      	b.n	8015816 <tcp_write+0x47a>
 8015678:	0801d44c 	.word	0x0801d44c
 801567c:	0801d5ec 	.word	0x0801d5ec
 8015680:	0801d4a0 	.word	0x0801d4a0
 8015684:	0801d604 	.word	0x0801d604
 8015688:	0801d638 	.word	0x0801d638
 801568c:	0801d650 	.word	0x0801d650
 8015690:	0801d670 	.word	0x0801d670
 8015694:	0801d690 	.word	0x0801d690
 8015698:	0801d6bc 	.word	0x0801d6bc
    struct pbuf *p;
    u16_t left = len - pos;
 801569c:	88fa      	ldrh	r2, [r7, #6]
 801569e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80156a2:	1ad3      	subs	r3, r2, r3
 80156a4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80156a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156ae:	1ad3      	subs	r3, r2, r3
 80156b0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80156b2:	8b7a      	ldrh	r2, [r7, #26]
 80156b4:	8bbb      	ldrh	r3, [r7, #28]
 80156b6:	4293      	cmp	r3, r2
 80156b8:	bf28      	it	cs
 80156ba:	4613      	movcs	r3, r2
 80156bc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80156be:	797b      	ldrb	r3, [r7, #5]
 80156c0:	f003 0301 	and.w	r3, r3, #1
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d036      	beq.n	8015736 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80156c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	8b3b      	ldrh	r3, [r7, #24]
 80156d0:	4413      	add	r3, r2
 80156d2:	b299      	uxth	r1, r3
 80156d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	bf0c      	ite	eq
 80156da:	2301      	moveq	r3, #1
 80156dc:	2300      	movne	r3, #0
 80156de:	b2db      	uxtb	r3, r3
 80156e0:	f107 0012 	add.w	r0, r7, #18
 80156e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156e6:	9302      	str	r3, [sp, #8]
 80156e8:	797b      	ldrb	r3, [r7, #5]
 80156ea:	9301      	str	r3, [sp, #4]
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	9300      	str	r3, [sp, #0]
 80156f0:	4603      	mov	r3, r0
 80156f2:	2036      	movs	r0, #54	; 0x36
 80156f4:	f7ff fd5e 	bl	80151b4 <tcp_pbuf_prealloc>
 80156f8:	6338      	str	r0, [r7, #48]	; 0x30
 80156fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	f000 8178 	beq.w	80159f2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	895b      	ldrh	r3, [r3, #10]
 8015706:	8b3a      	ldrh	r2, [r7, #24]
 8015708:	429a      	cmp	r2, r3
 801570a:	d906      	bls.n	801571a <tcp_write+0x37e>
 801570c:	4b8c      	ldr	r3, [pc, #560]	; (8015940 <tcp_write+0x5a4>)
 801570e:	f240 2266 	movw	r2, #614	; 0x266
 8015712:	498c      	ldr	r1, [pc, #560]	; (8015944 <tcp_write+0x5a8>)
 8015714:	488c      	ldr	r0, [pc, #560]	; (8015948 <tcp_write+0x5ac>)
 8015716:	f004 fe2d 	bl	801a374 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801571c:	685a      	ldr	r2, [r3, #4]
 801571e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015722:	18d0      	adds	r0, r2, r3
 8015724:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015728:	68ba      	ldr	r2, [r7, #8]
 801572a:	4413      	add	r3, r2
 801572c:	8b3a      	ldrh	r2, [r7, #24]
 801572e:	4619      	mov	r1, r3
 8015730:	f004 fd75 	bl	801a21e <memcpy>
 8015734:	e02f      	b.n	8015796 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015736:	8a7b      	ldrh	r3, [r7, #18]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d006      	beq.n	801574a <tcp_write+0x3ae>
 801573c:	4b80      	ldr	r3, [pc, #512]	; (8015940 <tcp_write+0x5a4>)
 801573e:	f240 2271 	movw	r2, #625	; 0x271
 8015742:	4982      	ldr	r1, [pc, #520]	; (801594c <tcp_write+0x5b0>)
 8015744:	4880      	ldr	r0, [pc, #512]	; (8015948 <tcp_write+0x5ac>)
 8015746:	f004 fe15 	bl	801a374 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801574a:	8b3b      	ldrh	r3, [r7, #24]
 801574c:	2201      	movs	r2, #1
 801574e:	4619      	mov	r1, r3
 8015750:	2036      	movs	r0, #54	; 0x36
 8015752:	f7fa fd7f 	bl	8010254 <pbuf_alloc>
 8015756:	6178      	str	r0, [r7, #20]
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	2b00      	cmp	r3, #0
 801575c:	f000 814b 	beq.w	80159f6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015760:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015764:	68ba      	ldr	r2, [r7, #8]
 8015766:	441a      	add	r2, r3
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801576c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015770:	b29b      	uxth	r3, r3
 8015772:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015776:	4619      	mov	r1, r3
 8015778:	2036      	movs	r0, #54	; 0x36
 801577a:	f7fa fd6b 	bl	8010254 <pbuf_alloc>
 801577e:	6338      	str	r0, [r7, #48]	; 0x30
 8015780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015782:	2b00      	cmp	r3, #0
 8015784:	d103      	bne.n	801578e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015786:	6978      	ldr	r0, [r7, #20]
 8015788:	f7fb f848 	bl	801081c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801578c:	e136      	b.n	80159fc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801578e:	6979      	ldr	r1, [r7, #20]
 8015790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015792:	f7fb f911 	bl	80109b8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015798:	f7fb f8ce 	bl	8010938 <pbuf_clen>
 801579c:	4603      	mov	r3, r0
 801579e:	461a      	mov	r2, r3
 80157a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157a4:	4413      	add	r3, r2
 80157a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80157aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157ae:	2b09      	cmp	r3, #9
 80157b0:	d903      	bls.n	80157ba <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80157b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80157b4:	f7fb f832 	bl	801081c <pbuf_free>
      goto memerr;
 80157b8:	e120      	b.n	80159fc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80157be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157c2:	441a      	add	r2, r3
 80157c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157c8:	9300      	str	r3, [sp, #0]
 80157ca:	4613      	mov	r3, r2
 80157cc:	2200      	movs	r2, #0
 80157ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80157d0:	68f8      	ldr	r0, [r7, #12]
 80157d2:	f7ff fc51 	bl	8015078 <tcp_create_segment>
 80157d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80157d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157da:	2b00      	cmp	r3, #0
 80157dc:	f000 810d 	beq.w	80159fa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80157e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d102      	bne.n	80157ec <tcp_write+0x450>
      queue = seg;
 80157e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157e8:	647b      	str	r3, [r7, #68]	; 0x44
 80157ea:	e00c      	b.n	8015806 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80157ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d106      	bne.n	8015800 <tcp_write+0x464>
 80157f2:	4b53      	ldr	r3, [pc, #332]	; (8015940 <tcp_write+0x5a4>)
 80157f4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80157f8:	4955      	ldr	r1, [pc, #340]	; (8015950 <tcp_write+0x5b4>)
 80157fa:	4853      	ldr	r0, [pc, #332]	; (8015948 <tcp_write+0x5ac>)
 80157fc:	f004 fdba 	bl	801a374 <iprintf>
      prev_seg->next = seg;
 8015800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015804:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015808:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801580a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801580e:	8b3b      	ldrh	r3, [r7, #24]
 8015810:	4413      	add	r3, r2
 8015812:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015816:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801581a:	88fb      	ldrh	r3, [r7, #6]
 801581c:	429a      	cmp	r2, r3
 801581e:	f4ff af3d 	bcc.w	801569c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015822:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015824:	2b00      	cmp	r3, #0
 8015826:	d02c      	beq.n	8015882 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801582a:	685b      	ldr	r3, [r3, #4]
 801582c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801582e:	e01e      	b.n	801586e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015832:	891a      	ldrh	r2, [r3, #8]
 8015834:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015836:	4413      	add	r3, r2
 8015838:	b29a      	uxth	r2, r3
 801583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015840:	681b      	ldr	r3, [r3, #0]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d110      	bne.n	8015868 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015848:	685b      	ldr	r3, [r3, #4]
 801584a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801584c:	8952      	ldrh	r2, [r2, #10]
 801584e:	4413      	add	r3, r2
 8015850:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015852:	68b9      	ldr	r1, [r7, #8]
 8015854:	4618      	mov	r0, r3
 8015856:	f004 fce2 	bl	801a21e <memcpy>
        p->len += oversize_used;
 801585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585c:	895a      	ldrh	r2, [r3, #10]
 801585e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015860:	4413      	add	r3, r2
 8015862:	b29a      	uxth	r2, r3
 8015864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015866:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015870:	2b00      	cmp	r3, #0
 8015872:	d1dd      	bne.n	8015830 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015876:	891a      	ldrh	r2, [r3, #8]
 8015878:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801587a:	4413      	add	r3, r2
 801587c:	b29a      	uxth	r2, r3
 801587e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015880:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015882:	8a7a      	ldrh	r2, [r7, #18]
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801588a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801588c:	2b00      	cmp	r3, #0
 801588e:	d018      	beq.n	80158c2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015892:	2b00      	cmp	r3, #0
 8015894:	d106      	bne.n	80158a4 <tcp_write+0x508>
 8015896:	4b2a      	ldr	r3, [pc, #168]	; (8015940 <tcp_write+0x5a4>)
 8015898:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801589c:	492d      	ldr	r1, [pc, #180]	; (8015954 <tcp_write+0x5b8>)
 801589e:	482a      	ldr	r0, [pc, #168]	; (8015948 <tcp_write+0x5ac>)
 80158a0:	f004 fd68 	bl	801a374 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80158a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80158aa:	4618      	mov	r0, r3
 80158ac:	f7fb f884 	bl	80109b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80158b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158b2:	891a      	ldrh	r2, [r3, #8]
 80158b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158b6:	891b      	ldrh	r3, [r3, #8]
 80158b8:	4413      	add	r3, r2
 80158ba:	b29a      	uxth	r2, r3
 80158bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158be:	811a      	strh	r2, [r3, #8]
 80158c0:	e037      	b.n	8015932 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80158c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d034      	beq.n	8015932 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80158c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d003      	beq.n	80158d6 <tcp_write+0x53a>
 80158ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d106      	bne.n	80158e4 <tcp_write+0x548>
 80158d6:	4b1a      	ldr	r3, [pc, #104]	; (8015940 <tcp_write+0x5a4>)
 80158d8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80158dc:	491e      	ldr	r1, [pc, #120]	; (8015958 <tcp_write+0x5bc>)
 80158de:	481a      	ldr	r0, [pc, #104]	; (8015948 <tcp_write+0x5ac>)
 80158e0:	f004 fd48 	bl	801a374 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80158e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158e6:	685b      	ldr	r3, [r3, #4]
 80158e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80158ea:	e009      	b.n	8015900 <tcp_write+0x564>
      p->tot_len += extendlen;
 80158ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ee:	891a      	ldrh	r2, [r3, #8]
 80158f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158f2:	4413      	add	r3, r2
 80158f4:	b29a      	uxth	r2, r3
 80158f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80158fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8015900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d1f1      	bne.n	80158ec <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590a:	891a      	ldrh	r2, [r3, #8]
 801590c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801590e:	4413      	add	r3, r2
 8015910:	b29a      	uxth	r2, r3
 8015912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015914:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015918:	895a      	ldrh	r2, [r3, #10]
 801591a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801591c:	4413      	add	r3, r2
 801591e:	b29a      	uxth	r2, r3
 8015920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015922:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015926:	891a      	ldrh	r2, [r3, #8]
 8015928:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801592a:	4413      	add	r3, r2
 801592c:	b29a      	uxth	r2, r3
 801592e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015930:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015934:	2b00      	cmp	r3, #0
 8015936:	d111      	bne.n	801595c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801593c:	66da      	str	r2, [r3, #108]	; 0x6c
 801593e:	e010      	b.n	8015962 <tcp_write+0x5c6>
 8015940:	0801d44c 	.word	0x0801d44c
 8015944:	0801d6ec 	.word	0x0801d6ec
 8015948:	0801d4a0 	.word	0x0801d4a0
 801594c:	0801d72c 	.word	0x0801d72c
 8015950:	0801d73c 	.word	0x0801d73c
 8015954:	0801d750 	.word	0x0801d750
 8015958:	0801d788 	.word	0x0801d788
  } else {
    last_unsent->next = queue;
 801595c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801595e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015960:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015966:	88fb      	ldrh	r3, [r7, #6]
 8015968:	441a      	add	r2, r3
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015974:	88fb      	ldrh	r3, [r7, #6]
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	b29a      	uxth	r2, r3
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015986:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015990:	2b00      	cmp	r3, #0
 8015992:	d00e      	beq.n	80159b2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015998:	2b00      	cmp	r3, #0
 801599a:	d10a      	bne.n	80159b2 <tcp_write+0x616>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d106      	bne.n	80159b2 <tcp_write+0x616>
 80159a4:	4b2c      	ldr	r3, [pc, #176]	; (8015a58 <tcp_write+0x6bc>)
 80159a6:	f240 3212 	movw	r2, #786	; 0x312
 80159aa:	492c      	ldr	r1, [pc, #176]	; (8015a5c <tcp_write+0x6c0>)
 80159ac:	482c      	ldr	r0, [pc, #176]	; (8015a60 <tcp_write+0x6c4>)
 80159ae:	f004 fce1 	bl	801a374 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80159b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d016      	beq.n	80159e6 <tcp_write+0x64a>
 80159b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d012      	beq.n	80159e6 <tcp_write+0x64a>
 80159c0:	797b      	ldrb	r3, [r7, #5]
 80159c2:	f003 0302 	and.w	r3, r3, #2
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d10d      	bne.n	80159e6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80159ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	899b      	ldrh	r3, [r3, #12]
 80159d0:	b29c      	uxth	r4, r3
 80159d2:	2008      	movs	r0, #8
 80159d4:	f7f9 fb30 	bl	800f038 <lwip_htons>
 80159d8:	4603      	mov	r3, r0
 80159da:	461a      	mov	r2, r3
 80159dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	4322      	orrs	r2, r4
 80159e2:	b292      	uxth	r2, r2
 80159e4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80159e6:	2300      	movs	r3, #0
 80159e8:	e031      	b.n	8015a4e <tcp_write+0x6b2>
          goto memerr;
 80159ea:	bf00      	nop
 80159ec:	e006      	b.n	80159fc <tcp_write+0x660>
            goto memerr;
 80159ee:	bf00      	nop
 80159f0:	e004      	b.n	80159fc <tcp_write+0x660>
        goto memerr;
 80159f2:	bf00      	nop
 80159f4:	e002      	b.n	80159fc <tcp_write+0x660>
        goto memerr;
 80159f6:	bf00      	nop
 80159f8:	e000      	b.n	80159fc <tcp_write+0x660>
      goto memerr;
 80159fa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	8b5b      	ldrh	r3, [r3, #26]
 8015a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d002      	beq.n	8015a16 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015a10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015a12:	f7fa ff03 	bl	801081c <pbuf_free>
  }
  if (queue != NULL) {
 8015a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d002      	beq.n	8015a22 <tcp_write+0x686>
    tcp_segs_free(queue);
 8015a1c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015a1e:	f7fc fb6b 	bl	80120f8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d00e      	beq.n	8015a4a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d10a      	bne.n	8015a4a <tcp_write+0x6ae>
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d106      	bne.n	8015a4a <tcp_write+0x6ae>
 8015a3c:	4b06      	ldr	r3, [pc, #24]	; (8015a58 <tcp_write+0x6bc>)
 8015a3e:	f240 3227 	movw	r2, #807	; 0x327
 8015a42:	4906      	ldr	r1, [pc, #24]	; (8015a5c <tcp_write+0x6c0>)
 8015a44:	4806      	ldr	r0, [pc, #24]	; (8015a60 <tcp_write+0x6c4>)
 8015a46:	f004 fc95 	bl	801a374 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	375c      	adds	r7, #92	; 0x5c
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd90      	pop	{r4, r7, pc}
 8015a56:	bf00      	nop
 8015a58:	0801d44c 	.word	0x0801d44c
 8015a5c:	0801d7c0 	.word	0x0801d7c0
 8015a60:	0801d4a0 	.word	0x0801d4a0

08015a64 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015a64:	b590      	push	{r4, r7, lr}
 8015a66:	b08b      	sub	sp, #44	; 0x2c
 8015a68:	af02      	add	r7, sp, #8
 8015a6a:	6078      	str	r0, [r7, #4]
 8015a6c:	460b      	mov	r3, r1
 8015a6e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015a70:	2300      	movs	r3, #0
 8015a72:	61fb      	str	r3, [r7, #28]
 8015a74:	2300      	movs	r3, #0
 8015a76:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d106      	bne.n	8015a90 <tcp_split_unsent_seg+0x2c>
 8015a82:	4b95      	ldr	r3, [pc, #596]	; (8015cd8 <tcp_split_unsent_seg+0x274>)
 8015a84:	f240 324b 	movw	r2, #843	; 0x34b
 8015a88:	4994      	ldr	r1, [pc, #592]	; (8015cdc <tcp_split_unsent_seg+0x278>)
 8015a8a:	4895      	ldr	r0, [pc, #596]	; (8015ce0 <tcp_split_unsent_seg+0x27c>)
 8015a8c:	f004 fc72 	bl	801a374 <iprintf>

  useg = pcb->unsent;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a94:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d102      	bne.n	8015aa2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015aa0:	e116      	b.n	8015cd0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015aa2:	887b      	ldrh	r3, [r7, #2]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d109      	bne.n	8015abc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015aa8:	4b8b      	ldr	r3, [pc, #556]	; (8015cd8 <tcp_split_unsent_seg+0x274>)
 8015aaa:	f240 3253 	movw	r2, #851	; 0x353
 8015aae:	498d      	ldr	r1, [pc, #564]	; (8015ce4 <tcp_split_unsent_seg+0x280>)
 8015ab0:	488b      	ldr	r0, [pc, #556]	; (8015ce0 <tcp_split_unsent_seg+0x27c>)
 8015ab2:	f004 fc5f 	bl	801a374 <iprintf>
    return ERR_VAL;
 8015ab6:	f06f 0305 	mvn.w	r3, #5
 8015aba:	e109      	b.n	8015cd0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	891b      	ldrh	r3, [r3, #8]
 8015ac0:	887a      	ldrh	r2, [r7, #2]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d301      	bcc.n	8015aca <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015ac6:	2300      	movs	r3, #0
 8015ac8:	e102      	b.n	8015cd0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ace:	887a      	ldrh	r2, [r7, #2]
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	d906      	bls.n	8015ae2 <tcp_split_unsent_seg+0x7e>
 8015ad4:	4b80      	ldr	r3, [pc, #512]	; (8015cd8 <tcp_split_unsent_seg+0x274>)
 8015ad6:	f240 325b 	movw	r2, #859	; 0x35b
 8015ada:	4983      	ldr	r1, [pc, #524]	; (8015ce8 <tcp_split_unsent_seg+0x284>)
 8015adc:	4880      	ldr	r0, [pc, #512]	; (8015ce0 <tcp_split_unsent_seg+0x27c>)
 8015ade:	f004 fc49 	bl	801a374 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	891b      	ldrh	r3, [r3, #8]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d106      	bne.n	8015af8 <tcp_split_unsent_seg+0x94>
 8015aea:	4b7b      	ldr	r3, [pc, #492]	; (8015cd8 <tcp_split_unsent_seg+0x274>)
 8015aec:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015af0:	497e      	ldr	r1, [pc, #504]	; (8015cec <tcp_split_unsent_seg+0x288>)
 8015af2:	487b      	ldr	r0, [pc, #492]	; (8015ce0 <tcp_split_unsent_seg+0x27c>)
 8015af4:	f004 fc3e 	bl	801a374 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	7a9b      	ldrb	r3, [r3, #10]
 8015afc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015afe:	7bfb      	ldrb	r3, [r7, #15]
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	f003 0304 	and.w	r3, r3, #4
 8015b08:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	891a      	ldrh	r2, [r3, #8]
 8015b0e:	887b      	ldrh	r3, [r7, #2]
 8015b10:	1ad3      	subs	r3, r2, r3
 8015b12:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015b14:	7bbb      	ldrb	r3, [r7, #14]
 8015b16:	b29a      	uxth	r2, r3
 8015b18:	89bb      	ldrh	r3, [r7, #12]
 8015b1a:	4413      	add	r3, r2
 8015b1c:	b29b      	uxth	r3, r3
 8015b1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015b22:	4619      	mov	r1, r3
 8015b24:	2036      	movs	r0, #54	; 0x36
 8015b26:	f7fa fb95 	bl	8010254 <pbuf_alloc>
 8015b2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	f000 80b7 	beq.w	8015ca2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	685b      	ldr	r3, [r3, #4]
 8015b38:	891a      	ldrh	r2, [r3, #8]
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	891b      	ldrh	r3, [r3, #8]
 8015b3e:	1ad3      	subs	r3, r2, r3
 8015b40:	b29a      	uxth	r2, r3
 8015b42:	887b      	ldrh	r3, [r7, #2]
 8015b44:	4413      	add	r3, r2
 8015b46:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015b48:	697b      	ldr	r3, [r7, #20]
 8015b4a:	6858      	ldr	r0, [r3, #4]
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	685a      	ldr	r2, [r3, #4]
 8015b50:	7bbb      	ldrb	r3, [r7, #14]
 8015b52:	18d1      	adds	r1, r2, r3
 8015b54:	897b      	ldrh	r3, [r7, #10]
 8015b56:	89ba      	ldrh	r2, [r7, #12]
 8015b58:	f7fb f856 	bl	8010c08 <pbuf_copy_partial>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	461a      	mov	r2, r3
 8015b60:	89bb      	ldrh	r3, [r7, #12]
 8015b62:	4293      	cmp	r3, r2
 8015b64:	f040 809f 	bne.w	8015ca6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	68db      	ldr	r3, [r3, #12]
 8015b6c:	899b      	ldrh	r3, [r3, #12]
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7f9 fa61 	bl	800f038 <lwip_htons>
 8015b76:	4603      	mov	r3, r0
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b7e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015b80:	2300      	movs	r3, #0
 8015b82:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015b84:	7efb      	ldrb	r3, [r7, #27]
 8015b86:	f003 0308 	and.w	r3, r3, #8
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d007      	beq.n	8015b9e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8015b8e:	7efb      	ldrb	r3, [r7, #27]
 8015b90:	f023 0308 	bic.w	r3, r3, #8
 8015b94:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015b96:	7ebb      	ldrb	r3, [r7, #26]
 8015b98:	f043 0308 	orr.w	r3, r3, #8
 8015b9c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015b9e:	7efb      	ldrb	r3, [r7, #27]
 8015ba0:	f003 0301 	and.w	r3, r3, #1
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d007      	beq.n	8015bb8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015ba8:	7efb      	ldrb	r3, [r7, #27]
 8015baa:	f023 0301 	bic.w	r3, r3, #1
 8015bae:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015bb0:	7ebb      	ldrb	r3, [r7, #26]
 8015bb2:	f043 0301 	orr.w	r3, r3, #1
 8015bb6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	68db      	ldr	r3, [r3, #12]
 8015bbc:	685b      	ldr	r3, [r3, #4]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7f9 fa4f 	bl	800f062 <lwip_htonl>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	887b      	ldrh	r3, [r7, #2]
 8015bc8:	18d1      	adds	r1, r2, r3
 8015bca:	7eba      	ldrb	r2, [r7, #26]
 8015bcc:	7bfb      	ldrb	r3, [r7, #15]
 8015bce:	9300      	str	r3, [sp, #0]
 8015bd0:	460b      	mov	r3, r1
 8015bd2:	6939      	ldr	r1, [r7, #16]
 8015bd4:	6878      	ldr	r0, [r7, #4]
 8015bd6:	f7ff fa4f 	bl	8015078 <tcp_create_segment>
 8015bda:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015bdc:	69fb      	ldr	r3, [r7, #28]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d063      	beq.n	8015caa <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	685b      	ldr	r3, [r3, #4]
 8015be6:	4618      	mov	r0, r3
 8015be8:	f7fa fea6 	bl	8010938 <pbuf_clen>
 8015bec:	4603      	mov	r3, r0
 8015bee:	461a      	mov	r2, r3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015bf6:	1a9b      	subs	r3, r3, r2
 8015bf8:	b29a      	uxth	r2, r3
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	6858      	ldr	r0, [r3, #4]
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	685b      	ldr	r3, [r3, #4]
 8015c08:	891a      	ldrh	r2, [r3, #8]
 8015c0a:	89bb      	ldrh	r3, [r7, #12]
 8015c0c:	1ad3      	subs	r3, r2, r3
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	4619      	mov	r1, r3
 8015c12:	f7fa fc7d 	bl	8010510 <pbuf_realloc>
  useg->len -= remainder;
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	891a      	ldrh	r2, [r3, #8]
 8015c1a:	89bb      	ldrh	r3, [r7, #12]
 8015c1c:	1ad3      	subs	r3, r2, r3
 8015c1e:	b29a      	uxth	r2, r3
 8015c20:	697b      	ldr	r3, [r7, #20]
 8015c22:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015c24:	697b      	ldr	r3, [r7, #20]
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	899b      	ldrh	r3, [r3, #12]
 8015c2a:	b29c      	uxth	r4, r3
 8015c2c:	7efb      	ldrb	r3, [r7, #27]
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7f9 fa01 	bl	800f038 <lwip_htons>
 8015c36:	4603      	mov	r3, r0
 8015c38:	461a      	mov	r2, r3
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	68db      	ldr	r3, [r3, #12]
 8015c3e:	4322      	orrs	r2, r4
 8015c40:	b292      	uxth	r2, r2
 8015c42:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015c44:	697b      	ldr	r3, [r7, #20]
 8015c46:	685b      	ldr	r3, [r3, #4]
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f7fa fe75 	bl	8010938 <pbuf_clen>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	461a      	mov	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c58:	4413      	add	r3, r2
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7fa fe66 	bl	8010938 <pbuf_clen>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	461a      	mov	r2, r3
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c76:	4413      	add	r3, r2
 8015c78:	b29a      	uxth	r2, r3
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	681a      	ldr	r2, [r3, #0]
 8015c84:	69fb      	ldr	r3, [r7, #28]
 8015c86:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	69fa      	ldr	r2, [r7, #28]
 8015c8c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d103      	bne.n	8015c9e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	e016      	b.n	8015cd0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015ca2:	bf00      	nop
 8015ca4:	e002      	b.n	8015cac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015ca6:	bf00      	nop
 8015ca8:	e000      	b.n	8015cac <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015caa:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d006      	beq.n	8015cc0 <tcp_split_unsent_seg+0x25c>
 8015cb2:	4b09      	ldr	r3, [pc, #36]	; (8015cd8 <tcp_split_unsent_seg+0x274>)
 8015cb4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015cb8:	490d      	ldr	r1, [pc, #52]	; (8015cf0 <tcp_split_unsent_seg+0x28c>)
 8015cba:	4809      	ldr	r0, [pc, #36]	; (8015ce0 <tcp_split_unsent_seg+0x27c>)
 8015cbc:	f004 fb5a 	bl	801a374 <iprintf>
  if (p != NULL) {
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d002      	beq.n	8015ccc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015cc6:	6938      	ldr	r0, [r7, #16]
 8015cc8:	f7fa fda8 	bl	801081c <pbuf_free>
  }

  return ERR_MEM;
 8015ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015cd0:	4618      	mov	r0, r3
 8015cd2:	3724      	adds	r7, #36	; 0x24
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd90      	pop	{r4, r7, pc}
 8015cd8:	0801d44c 	.word	0x0801d44c
 8015cdc:	0801d7e0 	.word	0x0801d7e0
 8015ce0:	0801d4a0 	.word	0x0801d4a0
 8015ce4:	0801d804 	.word	0x0801d804
 8015ce8:	0801d828 	.word	0x0801d828
 8015cec:	0801d838 	.word	0x0801d838
 8015cf0:	0801d848 	.word	0x0801d848

08015cf4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015cf4:	b590      	push	{r4, r7, lr}
 8015cf6:	b085      	sub	sp, #20
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d106      	bne.n	8015d10 <tcp_send_fin+0x1c>
 8015d02:	4b21      	ldr	r3, [pc, #132]	; (8015d88 <tcp_send_fin+0x94>)
 8015d04:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015d08:	4920      	ldr	r1, [pc, #128]	; (8015d8c <tcp_send_fin+0x98>)
 8015d0a:	4821      	ldr	r0, [pc, #132]	; (8015d90 <tcp_send_fin+0x9c>)
 8015d0c:	f004 fb32 	bl	801a374 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d02e      	beq.n	8015d76 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d1c:	60fb      	str	r3, [r7, #12]
 8015d1e:	e002      	b.n	8015d26 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d1f8      	bne.n	8015d20 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	68db      	ldr	r3, [r3, #12]
 8015d32:	899b      	ldrh	r3, [r3, #12]
 8015d34:	b29b      	uxth	r3, r3
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f9 f97e 	bl	800f038 <lwip_htons>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	b2db      	uxtb	r3, r3
 8015d40:	f003 0307 	and.w	r3, r3, #7
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d116      	bne.n	8015d76 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	68db      	ldr	r3, [r3, #12]
 8015d4c:	899b      	ldrh	r3, [r3, #12]
 8015d4e:	b29c      	uxth	r4, r3
 8015d50:	2001      	movs	r0, #1
 8015d52:	f7f9 f971 	bl	800f038 <lwip_htons>
 8015d56:	4603      	mov	r3, r0
 8015d58:	461a      	mov	r2, r3
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	68db      	ldr	r3, [r3, #12]
 8015d5e:	4322      	orrs	r2, r4
 8015d60:	b292      	uxth	r2, r2
 8015d62:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	8b5b      	ldrh	r3, [r3, #26]
 8015d68:	f043 0320 	orr.w	r3, r3, #32
 8015d6c:	b29a      	uxth	r2, r3
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015d72:	2300      	movs	r3, #0
 8015d74:	e004      	b.n	8015d80 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015d76:	2101      	movs	r1, #1
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f000 f80b 	bl	8015d94 <tcp_enqueue_flags>
 8015d7e:	4603      	mov	r3, r0
}
 8015d80:	4618      	mov	r0, r3
 8015d82:	3714      	adds	r7, #20
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd90      	pop	{r4, r7, pc}
 8015d88:	0801d44c 	.word	0x0801d44c
 8015d8c:	0801d854 	.word	0x0801d854
 8015d90:	0801d4a0 	.word	0x0801d4a0

08015d94 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b08a      	sub	sp, #40	; 0x28
 8015d98:	af02      	add	r7, sp, #8
 8015d9a:	6078      	str	r0, [r7, #4]
 8015d9c:	460b      	mov	r3, r1
 8015d9e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015da0:	2300      	movs	r3, #0
 8015da2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015da4:	2300      	movs	r3, #0
 8015da6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015da8:	78fb      	ldrb	r3, [r7, #3]
 8015daa:	f003 0303 	and.w	r3, r3, #3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d106      	bne.n	8015dc0 <tcp_enqueue_flags+0x2c>
 8015db2:	4b67      	ldr	r3, [pc, #412]	; (8015f50 <tcp_enqueue_flags+0x1bc>)
 8015db4:	f240 4211 	movw	r2, #1041	; 0x411
 8015db8:	4966      	ldr	r1, [pc, #408]	; (8015f54 <tcp_enqueue_flags+0x1c0>)
 8015dba:	4867      	ldr	r0, [pc, #412]	; (8015f58 <tcp_enqueue_flags+0x1c4>)
 8015dbc:	f004 fada 	bl	801a374 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d106      	bne.n	8015dd4 <tcp_enqueue_flags+0x40>
 8015dc6:	4b62      	ldr	r3, [pc, #392]	; (8015f50 <tcp_enqueue_flags+0x1bc>)
 8015dc8:	f240 4213 	movw	r2, #1043	; 0x413
 8015dcc:	4963      	ldr	r1, [pc, #396]	; (8015f5c <tcp_enqueue_flags+0x1c8>)
 8015dce:	4862      	ldr	r0, [pc, #392]	; (8015f58 <tcp_enqueue_flags+0x1c4>)
 8015dd0:	f004 fad0 	bl	801a374 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015dd4:	78fb      	ldrb	r3, [r7, #3]
 8015dd6:	f003 0302 	and.w	r3, r3, #2
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d001      	beq.n	8015de2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015dde:	2301      	movs	r3, #1
 8015de0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015de2:	7ffb      	ldrb	r3, [r7, #31]
 8015de4:	009b      	lsls	r3, r3, #2
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	f003 0304 	and.w	r3, r3, #4
 8015dec:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015dee:	7dfb      	ldrb	r3, [r7, #23]
 8015df0:	b29b      	uxth	r3, r3
 8015df2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015df6:	4619      	mov	r1, r3
 8015df8:	2036      	movs	r0, #54	; 0x36
 8015dfa:	f7fa fa2b 	bl	8010254 <pbuf_alloc>
 8015dfe:	6138      	str	r0, [r7, #16]
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d109      	bne.n	8015e1a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	8b5b      	ldrh	r3, [r3, #26]
 8015e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e0e:	b29a      	uxth	r2, r3
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e18:	e095      	b.n	8015f46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	895a      	ldrh	r2, [r3, #10]
 8015e1e:	7dfb      	ldrb	r3, [r7, #23]
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d206      	bcs.n	8015e34 <tcp_enqueue_flags+0xa0>
 8015e26:	4b4a      	ldr	r3, [pc, #296]	; (8015f50 <tcp_enqueue_flags+0x1bc>)
 8015e28:	f240 4239 	movw	r2, #1081	; 0x439
 8015e2c:	494c      	ldr	r1, [pc, #304]	; (8015f60 <tcp_enqueue_flags+0x1cc>)
 8015e2e:	484a      	ldr	r0, [pc, #296]	; (8015f58 <tcp_enqueue_flags+0x1c4>)
 8015e30:	f004 faa0 	bl	801a374 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015e38:	78fa      	ldrb	r2, [r7, #3]
 8015e3a:	7ffb      	ldrb	r3, [r7, #31]
 8015e3c:	9300      	str	r3, [sp, #0]
 8015e3e:	460b      	mov	r3, r1
 8015e40:	6939      	ldr	r1, [r7, #16]
 8015e42:	6878      	ldr	r0, [r7, #4]
 8015e44:	f7ff f918 	bl	8015078 <tcp_create_segment>
 8015e48:	60f8      	str	r0, [r7, #12]
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d109      	bne.n	8015e64 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	8b5b      	ldrh	r3, [r3, #26]
 8015e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e58:	b29a      	uxth	r2, r3
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e62:	e070      	b.n	8015f46 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	68db      	ldr	r3, [r3, #12]
 8015e68:	f003 0303 	and.w	r3, r3, #3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d006      	beq.n	8015e7e <tcp_enqueue_flags+0xea>
 8015e70:	4b37      	ldr	r3, [pc, #220]	; (8015f50 <tcp_enqueue_flags+0x1bc>)
 8015e72:	f240 4242 	movw	r2, #1090	; 0x442
 8015e76:	493b      	ldr	r1, [pc, #236]	; (8015f64 <tcp_enqueue_flags+0x1d0>)
 8015e78:	4837      	ldr	r0, [pc, #220]	; (8015f58 <tcp_enqueue_flags+0x1c4>)
 8015e7a:	f004 fa7b 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	891b      	ldrh	r3, [r3, #8]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d006      	beq.n	8015e94 <tcp_enqueue_flags+0x100>
 8015e86:	4b32      	ldr	r3, [pc, #200]	; (8015f50 <tcp_enqueue_flags+0x1bc>)
 8015e88:	f240 4243 	movw	r2, #1091	; 0x443
 8015e8c:	4936      	ldr	r1, [pc, #216]	; (8015f68 <tcp_enqueue_flags+0x1d4>)
 8015e8e:	4832      	ldr	r0, [pc, #200]	; (8015f58 <tcp_enqueue_flags+0x1c4>)
 8015e90:	f004 fa70 	bl	801a374 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d103      	bne.n	8015ea4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	68fa      	ldr	r2, [r7, #12]
 8015ea0:	66da      	str	r2, [r3, #108]	; 0x6c
 8015ea2:	e00d      	b.n	8015ec0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ea8:	61bb      	str	r3, [r7, #24]
 8015eaa:	e002      	b.n	8015eb2 <tcp_enqueue_flags+0x11e>
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	61bb      	str	r3, [r7, #24]
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1f8      	bne.n	8015eac <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	68fa      	ldr	r2, [r7, #12]
 8015ebe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015ec8:	78fb      	ldrb	r3, [r7, #3]
 8015eca:	f003 0302 	and.w	r3, r3, #2
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d104      	bne.n	8015edc <tcp_enqueue_flags+0x148>
 8015ed2:	78fb      	ldrb	r3, [r7, #3]
 8015ed4:	f003 0301 	and.w	r3, r3, #1
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d004      	beq.n	8015ee6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ee0:	1c5a      	adds	r2, r3, #1
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015ee6:	78fb      	ldrb	r3, [r7, #3]
 8015ee8:	f003 0301 	and.w	r3, r3, #1
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d006      	beq.n	8015efe <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	8b5b      	ldrh	r3, [r3, #26]
 8015ef4:	f043 0320 	orr.w	r3, r3, #32
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7fa fd18 	bl	8010938 <pbuf_clen>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f12:	4413      	add	r3, r2
 8015f14:	b29a      	uxth	r2, r3
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d00e      	beq.n	8015f44 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d10a      	bne.n	8015f44 <tcp_enqueue_flags+0x1b0>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d106      	bne.n	8015f44 <tcp_enqueue_flags+0x1b0>
 8015f36:	4b06      	ldr	r3, [pc, #24]	; (8015f50 <tcp_enqueue_flags+0x1bc>)
 8015f38:	f240 4265 	movw	r2, #1125	; 0x465
 8015f3c:	490b      	ldr	r1, [pc, #44]	; (8015f6c <tcp_enqueue_flags+0x1d8>)
 8015f3e:	4806      	ldr	r0, [pc, #24]	; (8015f58 <tcp_enqueue_flags+0x1c4>)
 8015f40:	f004 fa18 	bl	801a374 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3720      	adds	r7, #32
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	0801d44c 	.word	0x0801d44c
 8015f54:	0801d870 	.word	0x0801d870
 8015f58:	0801d4a0 	.word	0x0801d4a0
 8015f5c:	0801d8c8 	.word	0x0801d8c8
 8015f60:	0801d8e8 	.word	0x0801d8e8
 8015f64:	0801d924 	.word	0x0801d924
 8015f68:	0801d93c 	.word	0x0801d93c
 8015f6c:	0801d968 	.word	0x0801d968

08015f70 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015f70:	b5b0      	push	{r4, r5, r7, lr}
 8015f72:	b08a      	sub	sp, #40	; 0x28
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d106      	bne.n	8015f8c <tcp_output+0x1c>
 8015f7e:	4b8a      	ldr	r3, [pc, #552]	; (80161a8 <tcp_output+0x238>)
 8015f80:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015f84:	4989      	ldr	r1, [pc, #548]	; (80161ac <tcp_output+0x23c>)
 8015f86:	488a      	ldr	r0, [pc, #552]	; (80161b0 <tcp_output+0x240>)
 8015f88:	f004 f9f4 	bl	801a374 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	7d1b      	ldrb	r3, [r3, #20]
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d106      	bne.n	8015fa2 <tcp_output+0x32>
 8015f94:	4b84      	ldr	r3, [pc, #528]	; (80161a8 <tcp_output+0x238>)
 8015f96:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015f9a:	4986      	ldr	r1, [pc, #536]	; (80161b4 <tcp_output+0x244>)
 8015f9c:	4884      	ldr	r0, [pc, #528]	; (80161b0 <tcp_output+0x240>)
 8015f9e:	f004 f9e9 	bl	801a374 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015fa2:	4b85      	ldr	r3, [pc, #532]	; (80161b8 <tcp_output+0x248>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d101      	bne.n	8015fb0 <tcp_output+0x40>
    return ERR_OK;
 8015fac:	2300      	movs	r3, #0
 8015fae:	e1ce      	b.n	801634e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	bf28      	it	cs
 8015fc0:	4613      	movcs	r3, r2
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d10b      	bne.n	8015fea <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	8b5b      	ldrh	r3, [r3, #26]
 8015fd6:	f003 0302 	and.w	r3, r3, #2
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f000 81aa 	beq.w	8016334 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f000 fdcb 	bl	8016b7c <tcp_send_empty_ack>
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	e1b1      	b.n	801634e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015fea:	6879      	ldr	r1, [r7, #4]
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	3304      	adds	r3, #4
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f7ff f824 	bl	8015040 <tcp_route>
 8015ff8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015ffa:	697b      	ldr	r3, [r7, #20]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d102      	bne.n	8016006 <tcp_output+0x96>
    return ERR_RTE;
 8016000:	f06f 0303 	mvn.w	r3, #3
 8016004:	e1a3      	b.n	801634e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d003      	beq.n	8016014 <tcp_output+0xa4>
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d111      	bne.n	8016038 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016014:	697b      	ldr	r3, [r7, #20]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d002      	beq.n	8016020 <tcp_output+0xb0>
 801601a:	697b      	ldr	r3, [r7, #20]
 801601c:	3304      	adds	r3, #4
 801601e:	e000      	b.n	8016022 <tcp_output+0xb2>
 8016020:	2300      	movs	r3, #0
 8016022:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016024:	693b      	ldr	r3, [r7, #16]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d102      	bne.n	8016030 <tcp_output+0xc0>
      return ERR_RTE;
 801602a:	f06f 0303 	mvn.w	r3, #3
 801602e:	e18e      	b.n	801634e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016030:	693b      	ldr	r3, [r7, #16]
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603a:	68db      	ldr	r3, [r3, #12]
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	4618      	mov	r0, r3
 8016040:	f7f9 f80f 	bl	800f062 <lwip_htonl>
 8016044:	4602      	mov	r2, r0
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801604a:	1ad3      	subs	r3, r2, r3
 801604c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801604e:	8912      	ldrh	r2, [r2, #8]
 8016050:	4413      	add	r3, r2
 8016052:	69ba      	ldr	r2, [r7, #24]
 8016054:	429a      	cmp	r2, r3
 8016056:	d227      	bcs.n	80160a8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801605e:	461a      	mov	r2, r3
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	4293      	cmp	r3, r2
 8016064:	d114      	bne.n	8016090 <tcp_output+0x120>
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801606a:	2b00      	cmp	r3, #0
 801606c:	d110      	bne.n	8016090 <tcp_output+0x120>
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016074:	2b00      	cmp	r3, #0
 8016076:	d10b      	bne.n	8016090 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	2200      	movs	r2, #0
 801607c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	2201      	movs	r2, #1
 8016084:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	2200      	movs	r2, #0
 801608c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	8b5b      	ldrh	r3, [r3, #26]
 8016094:	f003 0302 	and.w	r3, r3, #2
 8016098:	2b00      	cmp	r3, #0
 801609a:	f000 814d 	beq.w	8016338 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f000 fd6c 	bl	8016b7c <tcp_send_empty_ack>
 80160a4:	4603      	mov	r3, r0
 80160a6:	e152      	b.n	801634e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	2200      	movs	r2, #0
 80160ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160b4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80160b6:	6a3b      	ldr	r3, [r7, #32]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	f000 811c 	beq.w	80162f6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80160be:	e002      	b.n	80160c6 <tcp_output+0x156>
 80160c0:	6a3b      	ldr	r3, [r7, #32]
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	623b      	str	r3, [r7, #32]
 80160c6:	6a3b      	ldr	r3, [r7, #32]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d1f8      	bne.n	80160c0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80160ce:	e112      	b.n	80162f6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80160d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160d2:	68db      	ldr	r3, [r3, #12]
 80160d4:	899b      	ldrh	r3, [r3, #12]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	4618      	mov	r0, r3
 80160da:	f7f8 ffad 	bl	800f038 <lwip_htons>
 80160de:	4603      	mov	r3, r0
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	f003 0304 	and.w	r3, r3, #4
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d006      	beq.n	80160f8 <tcp_output+0x188>
 80160ea:	4b2f      	ldr	r3, [pc, #188]	; (80161a8 <tcp_output+0x238>)
 80160ec:	f240 5236 	movw	r2, #1334	; 0x536
 80160f0:	4932      	ldr	r1, [pc, #200]	; (80161bc <tcp_output+0x24c>)
 80160f2:	482f      	ldr	r0, [pc, #188]	; (80161b0 <tcp_output+0x240>)
 80160f4:	f004 f93e 	bl	801a374 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d01f      	beq.n	8016140 <tcp_output+0x1d0>
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	8b5b      	ldrh	r3, [r3, #26]
 8016104:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016108:	2b00      	cmp	r3, #0
 801610a:	d119      	bne.n	8016140 <tcp_output+0x1d0>
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016110:	2b00      	cmp	r3, #0
 8016112:	d00b      	beq.n	801612c <tcp_output+0x1bc>
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d110      	bne.n	8016140 <tcp_output+0x1d0>
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016122:	891a      	ldrh	r2, [r3, #8]
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016128:	429a      	cmp	r2, r3
 801612a:	d209      	bcs.n	8016140 <tcp_output+0x1d0>
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016132:	2b00      	cmp	r3, #0
 8016134:	d004      	beq.n	8016140 <tcp_output+0x1d0>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801613c:	2b08      	cmp	r3, #8
 801613e:	d901      	bls.n	8016144 <tcp_output+0x1d4>
 8016140:	2301      	movs	r3, #1
 8016142:	e000      	b.n	8016146 <tcp_output+0x1d6>
 8016144:	2300      	movs	r3, #0
 8016146:	2b00      	cmp	r3, #0
 8016148:	d106      	bne.n	8016158 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	8b5b      	ldrh	r3, [r3, #26]
 801614e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016152:	2b00      	cmp	r3, #0
 8016154:	f000 80e4 	beq.w	8016320 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	7d1b      	ldrb	r3, [r3, #20]
 801615c:	2b02      	cmp	r3, #2
 801615e:	d00d      	beq.n	801617c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	899b      	ldrh	r3, [r3, #12]
 8016166:	b29c      	uxth	r4, r3
 8016168:	2010      	movs	r0, #16
 801616a:	f7f8 ff65 	bl	800f038 <lwip_htons>
 801616e:	4603      	mov	r3, r0
 8016170:	461a      	mov	r2, r3
 8016172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016174:	68db      	ldr	r3, [r3, #12]
 8016176:	4322      	orrs	r2, r4
 8016178:	b292      	uxth	r2, r2
 801617a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801617c:	697a      	ldr	r2, [r7, #20]
 801617e:	6879      	ldr	r1, [r7, #4]
 8016180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016182:	f000 f909 	bl	8016398 <tcp_output_segment>
 8016186:	4603      	mov	r3, r0
 8016188:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d016      	beq.n	80161c0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	8b5b      	ldrh	r3, [r3, #26]
 8016196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801619a:	b29a      	uxth	r2, r3
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	835a      	strh	r2, [r3, #26]
      return err;
 80161a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161a4:	e0d3      	b.n	801634e <tcp_output+0x3de>
 80161a6:	bf00      	nop
 80161a8:	0801d44c 	.word	0x0801d44c
 80161ac:	0801d990 	.word	0x0801d990
 80161b0:	0801d4a0 	.word	0x0801d4a0
 80161b4:	0801d9a8 	.word	0x0801d9a8
 80161b8:	2004f61c 	.word	0x2004f61c
 80161bc:	0801d9d0 	.word	0x0801d9d0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80161c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c2:	681a      	ldr	r2, [r3, #0]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	7d1b      	ldrb	r3, [r3, #20]
 80161cc:	2b02      	cmp	r3, #2
 80161ce:	d006      	beq.n	80161de <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	8b5b      	ldrh	r3, [r3, #26]
 80161d4:	f023 0303 	bic.w	r3, r3, #3
 80161d8:	b29a      	uxth	r2, r3
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80161de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e0:	68db      	ldr	r3, [r3, #12]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	4618      	mov	r0, r3
 80161e6:	f7f8 ff3c 	bl	800f062 <lwip_htonl>
 80161ea:	4604      	mov	r4, r0
 80161ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ee:	891b      	ldrh	r3, [r3, #8]
 80161f0:	461d      	mov	r5, r3
 80161f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161f4:	68db      	ldr	r3, [r3, #12]
 80161f6:	899b      	ldrh	r3, [r3, #12]
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	4618      	mov	r0, r3
 80161fc:	f7f8 ff1c 	bl	800f038 <lwip_htons>
 8016200:	4603      	mov	r3, r0
 8016202:	b2db      	uxtb	r3, r3
 8016204:	f003 0303 	and.w	r3, r3, #3
 8016208:	2b00      	cmp	r3, #0
 801620a:	d001      	beq.n	8016210 <tcp_output+0x2a0>
 801620c:	2301      	movs	r3, #1
 801620e:	e000      	b.n	8016212 <tcp_output+0x2a2>
 8016210:	2300      	movs	r3, #0
 8016212:	442b      	add	r3, r5
 8016214:	4423      	add	r3, r4
 8016216:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801621c:	68bb      	ldr	r3, [r7, #8]
 801621e:	1ad3      	subs	r3, r2, r3
 8016220:	2b00      	cmp	r3, #0
 8016222:	da02      	bge.n	801622a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	891b      	ldrh	r3, [r3, #8]
 801622e:	461c      	mov	r4, r3
 8016230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016232:	68db      	ldr	r3, [r3, #12]
 8016234:	899b      	ldrh	r3, [r3, #12]
 8016236:	b29b      	uxth	r3, r3
 8016238:	4618      	mov	r0, r3
 801623a:	f7f8 fefd 	bl	800f038 <lwip_htons>
 801623e:	4603      	mov	r3, r0
 8016240:	b2db      	uxtb	r3, r3
 8016242:	f003 0303 	and.w	r3, r3, #3
 8016246:	2b00      	cmp	r3, #0
 8016248:	d001      	beq.n	801624e <tcp_output+0x2de>
 801624a:	2301      	movs	r3, #1
 801624c:	e000      	b.n	8016250 <tcp_output+0x2e0>
 801624e:	2300      	movs	r3, #0
 8016250:	4423      	add	r3, r4
 8016252:	2b00      	cmp	r3, #0
 8016254:	d049      	beq.n	80162ea <tcp_output+0x37a>
      seg->next = NULL;
 8016256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016258:	2200      	movs	r2, #0
 801625a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016260:	2b00      	cmp	r3, #0
 8016262:	d105      	bne.n	8016270 <tcp_output+0x300>
        pcb->unacked = seg;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016268:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801626c:	623b      	str	r3, [r7, #32]
 801626e:	e03f      	b.n	80162f0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016272:	68db      	ldr	r3, [r3, #12]
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	4618      	mov	r0, r3
 8016278:	f7f8 fef3 	bl	800f062 <lwip_htonl>
 801627c:	4604      	mov	r4, r0
 801627e:	6a3b      	ldr	r3, [r7, #32]
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	4618      	mov	r0, r3
 8016286:	f7f8 feec 	bl	800f062 <lwip_htonl>
 801628a:	4603      	mov	r3, r0
 801628c:	1ae3      	subs	r3, r4, r3
 801628e:	2b00      	cmp	r3, #0
 8016290:	da24      	bge.n	80162dc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	3370      	adds	r3, #112	; 0x70
 8016296:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016298:	e002      	b.n	80162a0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801629a:	69fb      	ldr	r3, [r7, #28]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80162a0:	69fb      	ldr	r3, [r7, #28]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d011      	beq.n	80162cc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	68db      	ldr	r3, [r3, #12]
 80162ae:	685b      	ldr	r3, [r3, #4]
 80162b0:	4618      	mov	r0, r3
 80162b2:	f7f8 fed6 	bl	800f062 <lwip_htonl>
 80162b6:	4604      	mov	r4, r0
 80162b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ba:	68db      	ldr	r3, [r3, #12]
 80162bc:	685b      	ldr	r3, [r3, #4]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7f8 fecf 	bl	800f062 <lwip_htonl>
 80162c4:	4603      	mov	r3, r0
 80162c6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	dbe6      	blt.n	801629a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	681a      	ldr	r2, [r3, #0]
 80162d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80162d4:	69fb      	ldr	r3, [r7, #28]
 80162d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162d8:	601a      	str	r2, [r3, #0]
 80162da:	e009      	b.n	80162f0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80162dc:	6a3b      	ldr	r3, [r7, #32]
 80162de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80162e0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80162e2:	6a3b      	ldr	r3, [r7, #32]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	623b      	str	r3, [r7, #32]
 80162e8:	e002      	b.n	80162f0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80162ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162ec:	f7fb ff19 	bl	8012122 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80162f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d012      	beq.n	8016322 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80162fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162fe:	68db      	ldr	r3, [r3, #12]
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	4618      	mov	r0, r3
 8016304:	f7f8 fead 	bl	800f062 <lwip_htonl>
 8016308:	4602      	mov	r2, r0
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801630e:	1ad3      	subs	r3, r2, r3
 8016310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016312:	8912      	ldrh	r2, [r2, #8]
 8016314:	4413      	add	r3, r2
  while (seg != NULL &&
 8016316:	69ba      	ldr	r2, [r7, #24]
 8016318:	429a      	cmp	r2, r3
 801631a:	f4bf aed9 	bcs.w	80160d0 <tcp_output+0x160>
 801631e:	e000      	b.n	8016322 <tcp_output+0x3b2>
      break;
 8016320:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016326:	2b00      	cmp	r3, #0
 8016328:	d108      	bne.n	801633c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2200      	movs	r2, #0
 801632e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016332:	e004      	b.n	801633e <tcp_output+0x3ce>
    goto output_done;
 8016334:	bf00      	nop
 8016336:	e002      	b.n	801633e <tcp_output+0x3ce>
    goto output_done;
 8016338:	bf00      	nop
 801633a:	e000      	b.n	801633e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801633c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	8b5b      	ldrh	r3, [r3, #26]
 8016342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016346:	b29a      	uxth	r2, r3
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3728      	adds	r7, #40	; 0x28
 8016352:	46bd      	mov	sp, r7
 8016354:	bdb0      	pop	{r4, r5, r7, pc}
 8016356:	bf00      	nop

08016358 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d106      	bne.n	8016374 <tcp_output_segment_busy+0x1c>
 8016366:	4b09      	ldr	r3, [pc, #36]	; (801638c <tcp_output_segment_busy+0x34>)
 8016368:	f240 529a 	movw	r2, #1434	; 0x59a
 801636c:	4908      	ldr	r1, [pc, #32]	; (8016390 <tcp_output_segment_busy+0x38>)
 801636e:	4809      	ldr	r0, [pc, #36]	; (8016394 <tcp_output_segment_busy+0x3c>)
 8016370:	f004 f800 	bl	801a374 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	685b      	ldr	r3, [r3, #4]
 8016378:	7b9b      	ldrb	r3, [r3, #14]
 801637a:	2b01      	cmp	r3, #1
 801637c:	d001      	beq.n	8016382 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801637e:	2301      	movs	r3, #1
 8016380:	e000      	b.n	8016384 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016382:	2300      	movs	r3, #0
}
 8016384:	4618      	mov	r0, r3
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	0801d44c 	.word	0x0801d44c
 8016390:	0801d9e8 	.word	0x0801d9e8
 8016394:	0801d4a0 	.word	0x0801d4a0

08016398 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016398:	b5b0      	push	{r4, r5, r7, lr}
 801639a:	b08c      	sub	sp, #48	; 0x30
 801639c:	af04      	add	r7, sp, #16
 801639e:	60f8      	str	r0, [r7, #12]
 80163a0:	60b9      	str	r1, [r7, #8]
 80163a2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d106      	bne.n	80163b8 <tcp_output_segment+0x20>
 80163aa:	4b63      	ldr	r3, [pc, #396]	; (8016538 <tcp_output_segment+0x1a0>)
 80163ac:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80163b0:	4962      	ldr	r1, [pc, #392]	; (801653c <tcp_output_segment+0x1a4>)
 80163b2:	4863      	ldr	r0, [pc, #396]	; (8016540 <tcp_output_segment+0x1a8>)
 80163b4:	f003 ffde 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d106      	bne.n	80163cc <tcp_output_segment+0x34>
 80163be:	4b5e      	ldr	r3, [pc, #376]	; (8016538 <tcp_output_segment+0x1a0>)
 80163c0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80163c4:	495f      	ldr	r1, [pc, #380]	; (8016544 <tcp_output_segment+0x1ac>)
 80163c6:	485e      	ldr	r0, [pc, #376]	; (8016540 <tcp_output_segment+0x1a8>)
 80163c8:	f003 ffd4 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d106      	bne.n	80163e0 <tcp_output_segment+0x48>
 80163d2:	4b59      	ldr	r3, [pc, #356]	; (8016538 <tcp_output_segment+0x1a0>)
 80163d4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80163d8:	495b      	ldr	r1, [pc, #364]	; (8016548 <tcp_output_segment+0x1b0>)
 80163da:	4859      	ldr	r0, [pc, #356]	; (8016540 <tcp_output_segment+0x1a8>)
 80163dc:	f003 ffca 	bl	801a374 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f7ff ffb9 	bl	8016358 <tcp_output_segment_busy>
 80163e6:	4603      	mov	r3, r0
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80163ec:	2300      	movs	r3, #0
 80163ee:	e09f      	b.n	8016530 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	68dc      	ldr	r4, [r3, #12]
 80163f8:	4610      	mov	r0, r2
 80163fa:	f7f8 fe32 	bl	800f062 <lwip_htonl>
 80163fe:	4603      	mov	r3, r0
 8016400:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	68dc      	ldr	r4, [r3, #12]
 801640a:	4610      	mov	r0, r2
 801640c:	f7f8 fe14 	bl	800f038 <lwip_htons>
 8016410:	4603      	mov	r3, r0
 8016412:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016414:	68bb      	ldr	r3, [r7, #8]
 8016416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016418:	68ba      	ldr	r2, [r7, #8]
 801641a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801641c:	441a      	add	r2, r3
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	68db      	ldr	r3, [r3, #12]
 8016426:	3314      	adds	r3, #20
 8016428:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	7a9b      	ldrb	r3, [r3, #10]
 801642e:	f003 0301 	and.w	r3, r3, #1
 8016432:	2b00      	cmp	r3, #0
 8016434:	d015      	beq.n	8016462 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	3304      	adds	r3, #4
 801643a:	461a      	mov	r2, r3
 801643c:	6879      	ldr	r1, [r7, #4]
 801643e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016442:	f7fc fa33 	bl	80128ac <tcp_eff_send_mss_netif>
 8016446:	4603      	mov	r3, r0
 8016448:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801644a:	8b7b      	ldrh	r3, [r7, #26]
 801644c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016450:	4618      	mov	r0, r3
 8016452:	f7f8 fe06 	bl	800f062 <lwip_htonl>
 8016456:	4602      	mov	r2, r0
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801645c:	69fb      	ldr	r3, [r7, #28]
 801645e:	3304      	adds	r3, #4
 8016460:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016468:	2b00      	cmp	r3, #0
 801646a:	da02      	bge.n	8016472 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	2200      	movs	r2, #0
 8016470:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016472:	68bb      	ldr	r3, [r7, #8]
 8016474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016476:	2b00      	cmp	r3, #0
 8016478:	d10c      	bne.n	8016494 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801647a:	4b34      	ldr	r3, [pc, #208]	; (801654c <tcp_output_segment+0x1b4>)
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	68bb      	ldr	r3, [r7, #8]
 8016480:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	685b      	ldr	r3, [r3, #4]
 8016488:	4618      	mov	r0, r3
 801648a:	f7f8 fdea 	bl	800f062 <lwip_htonl>
 801648e:	4602      	mov	r2, r0
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	68da      	ldr	r2, [r3, #12]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	685b      	ldr	r3, [r3, #4]
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	8959      	ldrh	r1, [r3, #10]
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	8b3a      	ldrh	r2, [r7, #24]
 80164ae:	1a8a      	subs	r2, r1, r2
 80164b0:	b292      	uxth	r2, r2
 80164b2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	8919      	ldrh	r1, [r3, #8]
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	685b      	ldr	r3, [r3, #4]
 80164be:	8b3a      	ldrh	r2, [r7, #24]
 80164c0:	1a8a      	subs	r2, r1, r2
 80164c2:	b292      	uxth	r2, r2
 80164c4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	68fa      	ldr	r2, [r7, #12]
 80164cc:	68d2      	ldr	r2, [r2, #12]
 80164ce:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	68db      	ldr	r3, [r3, #12]
 80164d4:	2200      	movs	r2, #0
 80164d6:	741a      	strb	r2, [r3, #16]
 80164d8:	2200      	movs	r2, #0
 80164da:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	68db      	ldr	r3, [r3, #12]
 80164e0:	f103 0214 	add.w	r2, r3, #20
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	7a9b      	ldrb	r3, [r3, #10]
 80164e8:	009b      	lsls	r3, r3, #2
 80164ea:	f003 0304 	and.w	r3, r3, #4
 80164ee:	4413      	add	r3, r2
 80164f0:	69fa      	ldr	r2, [r7, #28]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	d006      	beq.n	8016504 <tcp_output_segment+0x16c>
 80164f6:	4b10      	ldr	r3, [pc, #64]	; (8016538 <tcp_output_segment+0x1a0>)
 80164f8:	f240 621c 	movw	r2, #1564	; 0x61c
 80164fc:	4914      	ldr	r1, [pc, #80]	; (8016550 <tcp_output_segment+0x1b8>)
 80164fe:	4810      	ldr	r0, [pc, #64]	; (8016540 <tcp_output_segment+0x1a8>)
 8016500:	f003 ff38 	bl	801a374 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	6858      	ldr	r0, [r3, #4]
 8016508:	68b9      	ldr	r1, [r7, #8]
 801650a:	68bb      	ldr	r3, [r7, #8]
 801650c:	1d1c      	adds	r4, r3, #4
 801650e:	68bb      	ldr	r3, [r7, #8]
 8016510:	7add      	ldrb	r5, [r3, #11]
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	7a9b      	ldrb	r3, [r3, #10]
 8016516:	687a      	ldr	r2, [r7, #4]
 8016518:	9202      	str	r2, [sp, #8]
 801651a:	2206      	movs	r2, #6
 801651c:	9201      	str	r2, [sp, #4]
 801651e:	9300      	str	r3, [sp, #0]
 8016520:	462b      	mov	r3, r5
 8016522:	4622      	mov	r2, r4
 8016524:	f002 fb6a 	bl	8018bfc <ip4_output_if>
 8016528:	4603      	mov	r3, r0
 801652a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801652c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016530:	4618      	mov	r0, r3
 8016532:	3720      	adds	r7, #32
 8016534:	46bd      	mov	sp, r7
 8016536:	bdb0      	pop	{r4, r5, r7, pc}
 8016538:	0801d44c 	.word	0x0801d44c
 801653c:	0801da10 	.word	0x0801da10
 8016540:	0801d4a0 	.word	0x0801d4a0
 8016544:	0801da30 	.word	0x0801da30
 8016548:	0801da50 	.word	0x0801da50
 801654c:	2004f5d0 	.word	0x2004f5d0
 8016550:	0801da74 	.word	0x0801da74

08016554 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016554:	b5b0      	push	{r4, r5, r7, lr}
 8016556:	b084      	sub	sp, #16
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d106      	bne.n	8016570 <tcp_rexmit_rto_prepare+0x1c>
 8016562:	4b31      	ldr	r3, [pc, #196]	; (8016628 <tcp_rexmit_rto_prepare+0xd4>)
 8016564:	f240 6263 	movw	r2, #1635	; 0x663
 8016568:	4930      	ldr	r1, [pc, #192]	; (801662c <tcp_rexmit_rto_prepare+0xd8>)
 801656a:	4831      	ldr	r0, [pc, #196]	; (8016630 <tcp_rexmit_rto_prepare+0xdc>)
 801656c:	f003 ff02 	bl	801a374 <iprintf>

  if (pcb->unacked == NULL) {
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016574:	2b00      	cmp	r3, #0
 8016576:	d102      	bne.n	801657e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016578:	f06f 0305 	mvn.w	r3, #5
 801657c:	e050      	b.n	8016620 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016582:	60fb      	str	r3, [r7, #12]
 8016584:	e00b      	b.n	801659e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016586:	68f8      	ldr	r0, [r7, #12]
 8016588:	f7ff fee6 	bl	8016358 <tcp_output_segment_busy>
 801658c:	4603      	mov	r3, r0
 801658e:	2b00      	cmp	r3, #0
 8016590:	d002      	beq.n	8016598 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016592:	f06f 0305 	mvn.w	r3, #5
 8016596:	e043      	b.n	8016620 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	60fb      	str	r3, [r7, #12]
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d1ef      	bne.n	8016586 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80165a6:	68f8      	ldr	r0, [r7, #12]
 80165a8:	f7ff fed6 	bl	8016358 <tcp_output_segment_busy>
 80165ac:	4603      	mov	r3, r0
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d002      	beq.n	80165b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80165b2:	f06f 0305 	mvn.w	r3, #5
 80165b6:	e033      	b.n	8016620 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	8b5b      	ldrh	r3, [r3, #26]
 80165d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80165d6:	b29a      	uxth	r2, r3
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80165dc:	68fb      	ldr	r3, [r7, #12]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7f8 fd3d 	bl	800f062 <lwip_htonl>
 80165e8:	4604      	mov	r4, r0
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	891b      	ldrh	r3, [r3, #8]
 80165ee:	461d      	mov	r5, r3
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	68db      	ldr	r3, [r3, #12]
 80165f4:	899b      	ldrh	r3, [r3, #12]
 80165f6:	b29b      	uxth	r3, r3
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7f8 fd1d 	bl	800f038 <lwip_htons>
 80165fe:	4603      	mov	r3, r0
 8016600:	b2db      	uxtb	r3, r3
 8016602:	f003 0303 	and.w	r3, r3, #3
 8016606:	2b00      	cmp	r3, #0
 8016608:	d001      	beq.n	801660e <tcp_rexmit_rto_prepare+0xba>
 801660a:	2301      	movs	r3, #1
 801660c:	e000      	b.n	8016610 <tcp_rexmit_rto_prepare+0xbc>
 801660e:	2300      	movs	r3, #0
 8016610:	442b      	add	r3, r5
 8016612:	18e2      	adds	r2, r4, r3
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2200      	movs	r2, #0
 801661c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801661e:	2300      	movs	r3, #0
}
 8016620:	4618      	mov	r0, r3
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bdb0      	pop	{r4, r5, r7, pc}
 8016628:	0801d44c 	.word	0x0801d44c
 801662c:	0801da88 	.word	0x0801da88
 8016630:	0801d4a0 	.word	0x0801d4a0

08016634 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b082      	sub	sp, #8
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d106      	bne.n	8016650 <tcp_rexmit_rto_commit+0x1c>
 8016642:	4b0d      	ldr	r3, [pc, #52]	; (8016678 <tcp_rexmit_rto_commit+0x44>)
 8016644:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016648:	490c      	ldr	r1, [pc, #48]	; (801667c <tcp_rexmit_rto_commit+0x48>)
 801664a:	480d      	ldr	r0, [pc, #52]	; (8016680 <tcp_rexmit_rto_commit+0x4c>)
 801664c:	f003 fe92 	bl	801a374 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016656:	2bff      	cmp	r3, #255	; 0xff
 8016658:	d007      	beq.n	801666a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016660:	3301      	adds	r3, #1
 8016662:	b2da      	uxtb	r2, r3
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f7ff fc80 	bl	8015f70 <tcp_output>
}
 8016670:	bf00      	nop
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}
 8016678:	0801d44c 	.word	0x0801d44c
 801667c:	0801daac 	.word	0x0801daac
 8016680:	0801d4a0 	.word	0x0801d4a0

08016684 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d106      	bne.n	80166a0 <tcp_rexmit_rto+0x1c>
 8016692:	4b0a      	ldr	r3, [pc, #40]	; (80166bc <tcp_rexmit_rto+0x38>)
 8016694:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016698:	4909      	ldr	r1, [pc, #36]	; (80166c0 <tcp_rexmit_rto+0x3c>)
 801669a:	480a      	ldr	r0, [pc, #40]	; (80166c4 <tcp_rexmit_rto+0x40>)
 801669c:	f003 fe6a 	bl	801a374 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80166a0:	6878      	ldr	r0, [r7, #4]
 80166a2:	f7ff ff57 	bl	8016554 <tcp_rexmit_rto_prepare>
 80166a6:	4603      	mov	r3, r0
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d102      	bne.n	80166b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f7ff ffc1 	bl	8016634 <tcp_rexmit_rto_commit>
  }
}
 80166b2:	bf00      	nop
 80166b4:	3708      	adds	r7, #8
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	0801d44c 	.word	0x0801d44c
 80166c0:	0801dad0 	.word	0x0801dad0
 80166c4:	0801d4a0 	.word	0x0801d4a0

080166c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80166c8:	b590      	push	{r4, r7, lr}
 80166ca:	b085      	sub	sp, #20
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d106      	bne.n	80166e4 <tcp_rexmit+0x1c>
 80166d6:	4b2f      	ldr	r3, [pc, #188]	; (8016794 <tcp_rexmit+0xcc>)
 80166d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80166dc:	492e      	ldr	r1, [pc, #184]	; (8016798 <tcp_rexmit+0xd0>)
 80166de:	482f      	ldr	r0, [pc, #188]	; (801679c <tcp_rexmit+0xd4>)
 80166e0:	f003 fe48 	bl	801a374 <iprintf>

  if (pcb->unacked == NULL) {
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d102      	bne.n	80166f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80166ec:	f06f 0305 	mvn.w	r3, #5
 80166f0:	e04c      	b.n	801678c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80166f8:	68b8      	ldr	r0, [r7, #8]
 80166fa:	f7ff fe2d 	bl	8016358 <tcp_output_segment_busy>
 80166fe:	4603      	mov	r3, r0
 8016700:	2b00      	cmp	r3, #0
 8016702:	d002      	beq.n	801670a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016704:	f06f 0305 	mvn.w	r3, #5
 8016708:	e040      	b.n	801678c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	336c      	adds	r3, #108	; 0x6c
 8016716:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016718:	e002      	b.n	8016720 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d011      	beq.n	801674c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	68db      	ldr	r3, [r3, #12]
 801672e:	685b      	ldr	r3, [r3, #4]
 8016730:	4618      	mov	r0, r3
 8016732:	f7f8 fc96 	bl	800f062 <lwip_htonl>
 8016736:	4604      	mov	r4, r0
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	68db      	ldr	r3, [r3, #12]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	4618      	mov	r0, r3
 8016740:	f7f8 fc8f 	bl	800f062 <lwip_htonl>
 8016744:	4603      	mov	r3, r0
 8016746:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016748:	2b00      	cmp	r3, #0
 801674a:	dbe6      	blt.n	801671a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	681a      	ldr	r2, [r3, #0]
 8016750:	68bb      	ldr	r3, [r7, #8]
 8016752:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016754:	68fb      	ldr	r3, [r7, #12]
 8016756:	68ba      	ldr	r2, [r7, #8]
 8016758:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d103      	bne.n	801676a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	2200      	movs	r2, #0
 8016766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016770:	2bff      	cmp	r3, #255	; 0xff
 8016772:	d007      	beq.n	8016784 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801677a:	3301      	adds	r3, #1
 801677c:	b2da      	uxtb	r2, r3
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2200      	movs	r2, #0
 8016788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801678a:	2300      	movs	r3, #0
}
 801678c:	4618      	mov	r0, r3
 801678e:	3714      	adds	r7, #20
 8016790:	46bd      	mov	sp, r7
 8016792:	bd90      	pop	{r4, r7, pc}
 8016794:	0801d44c 	.word	0x0801d44c
 8016798:	0801daec 	.word	0x0801daec
 801679c:	0801d4a0 	.word	0x0801d4a0

080167a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b082      	sub	sp, #8
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d106      	bne.n	80167bc <tcp_rexmit_fast+0x1c>
 80167ae:	4b2a      	ldr	r3, [pc, #168]	; (8016858 <tcp_rexmit_fast+0xb8>)
 80167b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80167b4:	4929      	ldr	r1, [pc, #164]	; (801685c <tcp_rexmit_fast+0xbc>)
 80167b6:	482a      	ldr	r0, [pc, #168]	; (8016860 <tcp_rexmit_fast+0xc0>)
 80167b8:	f003 fddc 	bl	801a374 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d045      	beq.n	8016850 <tcp_rexmit_fast+0xb0>
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	8b5b      	ldrh	r3, [r3, #26]
 80167c8:	f003 0304 	and.w	r3, r3, #4
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d13f      	bne.n	8016850 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f7ff ff79 	bl	80166c8 <tcp_rexmit>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d139      	bne.n	8016850 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80167e8:	4293      	cmp	r3, r2
 80167ea:	bf28      	it	cs
 80167ec:	4613      	movcs	r3, r2
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	da00      	bge.n	80167f6 <tcp_rexmit_fast+0x56>
 80167f4:	3301      	adds	r3, #1
 80167f6:	105b      	asrs	r3, r3, #1
 80167f8:	b29a      	uxth	r2, r3
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016806:	461a      	mov	r2, r3
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801680c:	005b      	lsls	r3, r3, #1
 801680e:	429a      	cmp	r2, r3
 8016810:	d206      	bcs.n	8016820 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016816:	005b      	lsls	r3, r3, #1
 8016818:	b29a      	uxth	r2, r3
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801682a:	4619      	mov	r1, r3
 801682c:	0049      	lsls	r1, r1, #1
 801682e:	440b      	add	r3, r1
 8016830:	b29b      	uxth	r3, r3
 8016832:	4413      	add	r3, r2
 8016834:	b29a      	uxth	r2, r3
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	8b5b      	ldrh	r3, [r3, #26]
 8016840:	f043 0304 	orr.w	r3, r3, #4
 8016844:	b29a      	uxth	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2200      	movs	r2, #0
 801684e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016850:	bf00      	nop
 8016852:	3708      	adds	r7, #8
 8016854:	46bd      	mov	sp, r7
 8016856:	bd80      	pop	{r7, pc}
 8016858:	0801d44c 	.word	0x0801d44c
 801685c:	0801db04 	.word	0x0801db04
 8016860:	0801d4a0 	.word	0x0801d4a0

08016864 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016864:	b580      	push	{r7, lr}
 8016866:	b086      	sub	sp, #24
 8016868:	af00      	add	r7, sp, #0
 801686a:	60f8      	str	r0, [r7, #12]
 801686c:	607b      	str	r3, [r7, #4]
 801686e:	460b      	mov	r3, r1
 8016870:	817b      	strh	r3, [r7, #10]
 8016872:	4613      	mov	r3, r2
 8016874:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016876:	897a      	ldrh	r2, [r7, #10]
 8016878:	893b      	ldrh	r3, [r7, #8]
 801687a:	4413      	add	r3, r2
 801687c:	b29b      	uxth	r3, r3
 801687e:	3314      	adds	r3, #20
 8016880:	b29b      	uxth	r3, r3
 8016882:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016886:	4619      	mov	r1, r3
 8016888:	2022      	movs	r0, #34	; 0x22
 801688a:	f7f9 fce3 	bl	8010254 <pbuf_alloc>
 801688e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016890:	697b      	ldr	r3, [r7, #20]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d04d      	beq.n	8016932 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016896:	897b      	ldrh	r3, [r7, #10]
 8016898:	3313      	adds	r3, #19
 801689a:	697a      	ldr	r2, [r7, #20]
 801689c:	8952      	ldrh	r2, [r2, #10]
 801689e:	4293      	cmp	r3, r2
 80168a0:	db06      	blt.n	80168b0 <tcp_output_alloc_header_common+0x4c>
 80168a2:	4b26      	ldr	r3, [pc, #152]	; (801693c <tcp_output_alloc_header_common+0xd8>)
 80168a4:	f240 7223 	movw	r2, #1827	; 0x723
 80168a8:	4925      	ldr	r1, [pc, #148]	; (8016940 <tcp_output_alloc_header_common+0xdc>)
 80168aa:	4826      	ldr	r0, [pc, #152]	; (8016944 <tcp_output_alloc_header_common+0xe0>)
 80168ac:	f003 fd62 	bl	801a374 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80168b6:	8c3b      	ldrh	r3, [r7, #32]
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7f8 fbbd 	bl	800f038 <lwip_htons>
 80168be:	4603      	mov	r3, r0
 80168c0:	461a      	mov	r2, r3
 80168c2:	693b      	ldr	r3, [r7, #16]
 80168c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80168c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168c8:	4618      	mov	r0, r3
 80168ca:	f7f8 fbb5 	bl	800f038 <lwip_htons>
 80168ce:	4603      	mov	r3, r0
 80168d0:	461a      	mov	r2, r3
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80168d6:	693b      	ldr	r3, [r7, #16]
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80168dc:	68f8      	ldr	r0, [r7, #12]
 80168de:	f7f8 fbc0 	bl	800f062 <lwip_htonl>
 80168e2:	4602      	mov	r2, r0
 80168e4:	693b      	ldr	r3, [r7, #16]
 80168e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80168e8:	897b      	ldrh	r3, [r7, #10]
 80168ea:	089b      	lsrs	r3, r3, #2
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	3305      	adds	r3, #5
 80168f0:	b29b      	uxth	r3, r3
 80168f2:	031b      	lsls	r3, r3, #12
 80168f4:	b29a      	uxth	r2, r3
 80168f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	4313      	orrs	r3, r2
 80168fe:	b29b      	uxth	r3, r3
 8016900:	4618      	mov	r0, r3
 8016902:	f7f8 fb99 	bl	800f038 <lwip_htons>
 8016906:	4603      	mov	r3, r0
 8016908:	461a      	mov	r2, r3
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801690e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016910:	4618      	mov	r0, r3
 8016912:	f7f8 fb91 	bl	800f038 <lwip_htons>
 8016916:	4603      	mov	r3, r0
 8016918:	461a      	mov	r2, r3
 801691a:	693b      	ldr	r3, [r7, #16]
 801691c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801691e:	693b      	ldr	r3, [r7, #16]
 8016920:	2200      	movs	r2, #0
 8016922:	741a      	strb	r2, [r3, #16]
 8016924:	2200      	movs	r2, #0
 8016926:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016928:	693b      	ldr	r3, [r7, #16]
 801692a:	2200      	movs	r2, #0
 801692c:	749a      	strb	r2, [r3, #18]
 801692e:	2200      	movs	r2, #0
 8016930:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016932:	697b      	ldr	r3, [r7, #20]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3718      	adds	r7, #24
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	0801d44c 	.word	0x0801d44c
 8016940:	0801db24 	.word	0x0801db24
 8016944:	0801d4a0 	.word	0x0801d4a0

08016948 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016948:	b5b0      	push	{r4, r5, r7, lr}
 801694a:	b08a      	sub	sp, #40	; 0x28
 801694c:	af04      	add	r7, sp, #16
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	607b      	str	r3, [r7, #4]
 8016952:	460b      	mov	r3, r1
 8016954:	817b      	strh	r3, [r7, #10]
 8016956:	4613      	mov	r3, r2
 8016958:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d106      	bne.n	801696e <tcp_output_alloc_header+0x26>
 8016960:	4b15      	ldr	r3, [pc, #84]	; (80169b8 <tcp_output_alloc_header+0x70>)
 8016962:	f240 7242 	movw	r2, #1858	; 0x742
 8016966:	4915      	ldr	r1, [pc, #84]	; (80169bc <tcp_output_alloc_header+0x74>)
 8016968:	4815      	ldr	r0, [pc, #84]	; (80169c0 <tcp_output_alloc_header+0x78>)
 801696a:	f003 fd03 	bl	801a374 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801696e:	68fb      	ldr	r3, [r7, #12]
 8016970:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	8adb      	ldrh	r3, [r3, #22]
 8016976:	68fa      	ldr	r2, [r7, #12]
 8016978:	8b12      	ldrh	r2, [r2, #24]
 801697a:	68f9      	ldr	r1, [r7, #12]
 801697c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801697e:	893d      	ldrh	r5, [r7, #8]
 8016980:	897c      	ldrh	r4, [r7, #10]
 8016982:	9103      	str	r1, [sp, #12]
 8016984:	2110      	movs	r1, #16
 8016986:	9102      	str	r1, [sp, #8]
 8016988:	9201      	str	r2, [sp, #4]
 801698a:	9300      	str	r3, [sp, #0]
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	462a      	mov	r2, r5
 8016990:	4621      	mov	r1, r4
 8016992:	f7ff ff67 	bl	8016864 <tcp_output_alloc_header_common>
 8016996:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016998:	697b      	ldr	r3, [r7, #20]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d006      	beq.n	80169ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169a2:	68fa      	ldr	r2, [r7, #12]
 80169a4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80169a6:	441a      	add	r2, r3
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80169ac:	697b      	ldr	r3, [r7, #20]
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3718      	adds	r7, #24
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bdb0      	pop	{r4, r5, r7, pc}
 80169b6:	bf00      	nop
 80169b8:	0801d44c 	.word	0x0801d44c
 80169bc:	0801db54 	.word	0x0801db54
 80169c0:	0801d4a0 	.word	0x0801d4a0

080169c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b088      	sub	sp, #32
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	4611      	mov	r1, r2
 80169d0:	461a      	mov	r2, r3
 80169d2:	460b      	mov	r3, r1
 80169d4:	71fb      	strb	r3, [r7, #7]
 80169d6:	4613      	mov	r3, r2
 80169d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80169da:	2300      	movs	r3, #0
 80169dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d106      	bne.n	80169f2 <tcp_output_fill_options+0x2e>
 80169e4:	4b13      	ldr	r3, [pc, #76]	; (8016a34 <tcp_output_fill_options+0x70>)
 80169e6:	f240 7256 	movw	r2, #1878	; 0x756
 80169ea:	4913      	ldr	r1, [pc, #76]	; (8016a38 <tcp_output_fill_options+0x74>)
 80169ec:	4813      	ldr	r0, [pc, #76]	; (8016a3c <tcp_output_fill_options+0x78>)
 80169ee:	f003 fcc1 	bl	801a374 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	685b      	ldr	r3, [r3, #4]
 80169f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	3314      	adds	r3, #20
 80169fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80169fe:	69bb      	ldr	r3, [r7, #24]
 8016a00:	f103 0214 	add.w	r2, r3, #20
 8016a04:	8bfb      	ldrh	r3, [r7, #30]
 8016a06:	009b      	lsls	r3, r3, #2
 8016a08:	4619      	mov	r1, r3
 8016a0a:	79fb      	ldrb	r3, [r7, #7]
 8016a0c:	009b      	lsls	r3, r3, #2
 8016a0e:	f003 0304 	and.w	r3, r3, #4
 8016a12:	440b      	add	r3, r1
 8016a14:	4413      	add	r3, r2
 8016a16:	697a      	ldr	r2, [r7, #20]
 8016a18:	429a      	cmp	r2, r3
 8016a1a:	d006      	beq.n	8016a2a <tcp_output_fill_options+0x66>
 8016a1c:	4b05      	ldr	r3, [pc, #20]	; (8016a34 <tcp_output_fill_options+0x70>)
 8016a1e:	f240 7275 	movw	r2, #1909	; 0x775
 8016a22:	4907      	ldr	r1, [pc, #28]	; (8016a40 <tcp_output_fill_options+0x7c>)
 8016a24:	4805      	ldr	r0, [pc, #20]	; (8016a3c <tcp_output_fill_options+0x78>)
 8016a26:	f003 fca5 	bl	801a374 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016a2a:	bf00      	nop
 8016a2c:	3720      	adds	r7, #32
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	0801d44c 	.word	0x0801d44c
 8016a38:	0801db7c 	.word	0x0801db7c
 8016a3c:	0801d4a0 	.word	0x0801d4a0
 8016a40:	0801da74 	.word	0x0801da74

08016a44 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08a      	sub	sp, #40	; 0x28
 8016a48:	af04      	add	r7, sp, #16
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
 8016a50:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016a52:	68bb      	ldr	r3, [r7, #8]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d106      	bne.n	8016a66 <tcp_output_control_segment+0x22>
 8016a58:	4b1c      	ldr	r3, [pc, #112]	; (8016acc <tcp_output_control_segment+0x88>)
 8016a5a:	f240 7287 	movw	r2, #1927	; 0x787
 8016a5e:	491c      	ldr	r1, [pc, #112]	; (8016ad0 <tcp_output_control_segment+0x8c>)
 8016a60:	481c      	ldr	r0, [pc, #112]	; (8016ad4 <tcp_output_control_segment+0x90>)
 8016a62:	f003 fc87 	bl	801a374 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016a66:	683a      	ldr	r2, [r7, #0]
 8016a68:	6879      	ldr	r1, [r7, #4]
 8016a6a:	68f8      	ldr	r0, [r7, #12]
 8016a6c:	f7fe fae8 	bl	8015040 <tcp_route>
 8016a70:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016a72:	693b      	ldr	r3, [r7, #16]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d102      	bne.n	8016a7e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016a78:	23fc      	movs	r3, #252	; 0xfc
 8016a7a:	75fb      	strb	r3, [r7, #23]
 8016a7c:	e01c      	b.n	8016ab8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d006      	beq.n	8016a92 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	7adb      	ldrb	r3, [r3, #11]
 8016a88:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	7a9b      	ldrb	r3, [r3, #10]
 8016a8e:	757b      	strb	r3, [r7, #21]
 8016a90:	e003      	b.n	8016a9a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016a92:	23ff      	movs	r3, #255	; 0xff
 8016a94:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016a96:	2300      	movs	r3, #0
 8016a98:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016a9a:	7dba      	ldrb	r2, [r7, #22]
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	9302      	str	r3, [sp, #8]
 8016aa0:	2306      	movs	r3, #6
 8016aa2:	9301      	str	r3, [sp, #4]
 8016aa4:	7d7b      	ldrb	r3, [r7, #21]
 8016aa6:	9300      	str	r3, [sp, #0]
 8016aa8:	4613      	mov	r3, r2
 8016aaa:	683a      	ldr	r2, [r7, #0]
 8016aac:	6879      	ldr	r1, [r7, #4]
 8016aae:	68b8      	ldr	r0, [r7, #8]
 8016ab0:	f002 f8a4 	bl	8018bfc <ip4_output_if>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016ab8:	68b8      	ldr	r0, [r7, #8]
 8016aba:	f7f9 feaf 	bl	801081c <pbuf_free>
  return err;
 8016abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3718      	adds	r7, #24
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}
 8016aca:	bf00      	nop
 8016acc:	0801d44c 	.word	0x0801d44c
 8016ad0:	0801dba4 	.word	0x0801dba4
 8016ad4:	0801d4a0 	.word	0x0801d4a0

08016ad8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016ad8:	b590      	push	{r4, r7, lr}
 8016ada:	b08b      	sub	sp, #44	; 0x2c
 8016adc:	af04      	add	r7, sp, #16
 8016ade:	60f8      	str	r0, [r7, #12]
 8016ae0:	60b9      	str	r1, [r7, #8]
 8016ae2:	607a      	str	r2, [r7, #4]
 8016ae4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016ae6:	683b      	ldr	r3, [r7, #0]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d106      	bne.n	8016afa <tcp_rst+0x22>
 8016aec:	4b1f      	ldr	r3, [pc, #124]	; (8016b6c <tcp_rst+0x94>)
 8016aee:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016af2:	491f      	ldr	r1, [pc, #124]	; (8016b70 <tcp_rst+0x98>)
 8016af4:	481f      	ldr	r0, [pc, #124]	; (8016b74 <tcp_rst+0x9c>)
 8016af6:	f003 fc3d 	bl	801a374 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d106      	bne.n	8016b0e <tcp_rst+0x36>
 8016b00:	4b1a      	ldr	r3, [pc, #104]	; (8016b6c <tcp_rst+0x94>)
 8016b02:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016b06:	491c      	ldr	r1, [pc, #112]	; (8016b78 <tcp_rst+0xa0>)
 8016b08:	481a      	ldr	r0, [pc, #104]	; (8016b74 <tcp_rst+0x9c>)
 8016b0a:	f003 fc33 	bl	801a374 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b0e:	2300      	movs	r3, #0
 8016b10:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016b12:	f246 0308 	movw	r3, #24584	; 0x6008
 8016b16:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016b18:	7dfb      	ldrb	r3, [r7, #23]
 8016b1a:	b29c      	uxth	r4, r3
 8016b1c:	68b8      	ldr	r0, [r7, #8]
 8016b1e:	f7f8 faa0 	bl	800f062 <lwip_htonl>
 8016b22:	4602      	mov	r2, r0
 8016b24:	8abb      	ldrh	r3, [r7, #20]
 8016b26:	9303      	str	r3, [sp, #12]
 8016b28:	2314      	movs	r3, #20
 8016b2a:	9302      	str	r3, [sp, #8]
 8016b2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8016b2e:	9301      	str	r3, [sp, #4]
 8016b30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016b32:	9300      	str	r3, [sp, #0]
 8016b34:	4613      	mov	r3, r2
 8016b36:	2200      	movs	r2, #0
 8016b38:	4621      	mov	r1, r4
 8016b3a:	6878      	ldr	r0, [r7, #4]
 8016b3c:	f7ff fe92 	bl	8016864 <tcp_output_alloc_header_common>
 8016b40:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016b42:	693b      	ldr	r3, [r7, #16]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d00c      	beq.n	8016b62 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016b48:	7dfb      	ldrb	r3, [r7, #23]
 8016b4a:	2200      	movs	r2, #0
 8016b4c:	6939      	ldr	r1, [r7, #16]
 8016b4e:	68f8      	ldr	r0, [r7, #12]
 8016b50:	f7ff ff38 	bl	80169c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b56:	683a      	ldr	r2, [r7, #0]
 8016b58:	6939      	ldr	r1, [r7, #16]
 8016b5a:	68f8      	ldr	r0, [r7, #12]
 8016b5c:	f7ff ff72 	bl	8016a44 <tcp_output_control_segment>
 8016b60:	e000      	b.n	8016b64 <tcp_rst+0x8c>
    return;
 8016b62:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016b64:	371c      	adds	r7, #28
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd90      	pop	{r4, r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	0801d44c 	.word	0x0801d44c
 8016b70:	0801dbd0 	.word	0x0801dbd0
 8016b74:	0801d4a0 	.word	0x0801d4a0
 8016b78:	0801dbec 	.word	0x0801dbec

08016b7c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016b7c:	b590      	push	{r4, r7, lr}
 8016b7e:	b087      	sub	sp, #28
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016b84:	2300      	movs	r3, #0
 8016b86:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d106      	bne.n	8016ba0 <tcp_send_empty_ack+0x24>
 8016b92:	4b28      	ldr	r3, [pc, #160]	; (8016c34 <tcp_send_empty_ack+0xb8>)
 8016b94:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016b98:	4927      	ldr	r1, [pc, #156]	; (8016c38 <tcp_send_empty_ack+0xbc>)
 8016b9a:	4828      	ldr	r0, [pc, #160]	; (8016c3c <tcp_send_empty_ack+0xc0>)
 8016b9c:	f003 fbea 	bl	801a374 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ba0:	7dfb      	ldrb	r3, [r7, #23]
 8016ba2:	009b      	lsls	r3, r3, #2
 8016ba4:	b2db      	uxtb	r3, r3
 8016ba6:	f003 0304 	and.w	r3, r3, #4
 8016baa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016bac:	7d7b      	ldrb	r3, [r7, #21]
 8016bae:	b29c      	uxth	r4, r3
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f8 fa54 	bl	800f062 <lwip_htonl>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	4621      	mov	r1, r4
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f7ff fec1 	bl	8016948 <tcp_output_alloc_header>
 8016bc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d109      	bne.n	8016be2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	8b5b      	ldrh	r3, [r3, #26]
 8016bd2:	f043 0303 	orr.w	r3, r3, #3
 8016bd6:	b29a      	uxth	r2, r3
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016bdc:	f06f 0301 	mvn.w	r3, #1
 8016be0:	e023      	b.n	8016c2a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016be2:	7dbb      	ldrb	r3, [r7, #22]
 8016be4:	7dfa      	ldrb	r2, [r7, #23]
 8016be6:	6939      	ldr	r1, [r7, #16]
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f7ff feeb 	bl	80169c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	3304      	adds	r3, #4
 8016bf4:	6939      	ldr	r1, [r7, #16]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7ff ff24 	bl	8016a44 <tcp_output_control_segment>
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d007      	beq.n	8016c18 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	8b5b      	ldrh	r3, [r3, #26]
 8016c0c:	f043 0303 	orr.w	r3, r3, #3
 8016c10:	b29a      	uxth	r2, r3
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	835a      	strh	r2, [r3, #26]
 8016c16:	e006      	b.n	8016c26 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	8b5b      	ldrh	r3, [r3, #26]
 8016c1c:	f023 0303 	bic.w	r3, r3, #3
 8016c20:	b29a      	uxth	r2, r3
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	371c      	adds	r7, #28
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd90      	pop	{r4, r7, pc}
 8016c32:	bf00      	nop
 8016c34:	0801d44c 	.word	0x0801d44c
 8016c38:	0801dc08 	.word	0x0801dc08
 8016c3c:	0801d4a0 	.word	0x0801d4a0

08016c40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016c40:	b590      	push	{r4, r7, lr}
 8016c42:	b087      	sub	sp, #28
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016c48:	2300      	movs	r3, #0
 8016c4a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d106      	bne.n	8016c60 <tcp_keepalive+0x20>
 8016c52:	4b18      	ldr	r3, [pc, #96]	; (8016cb4 <tcp_keepalive+0x74>)
 8016c54:	f640 0224 	movw	r2, #2084	; 0x824
 8016c58:	4917      	ldr	r1, [pc, #92]	; (8016cb8 <tcp_keepalive+0x78>)
 8016c5a:	4818      	ldr	r0, [pc, #96]	; (8016cbc <tcp_keepalive+0x7c>)
 8016c5c:	f003 fb8a 	bl	801a374 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016c60:	7dfb      	ldrb	r3, [r7, #23]
 8016c62:	b29c      	uxth	r4, r3
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7f8 f9f9 	bl	800f062 <lwip_htonl>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2200      	movs	r2, #0
 8016c74:	4621      	mov	r1, r4
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f7ff fe66 	bl	8016948 <tcp_output_alloc_header>
 8016c7c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016c7e:	693b      	ldr	r3, [r7, #16]
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d102      	bne.n	8016c8a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c88:	e010      	b.n	8016cac <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016c8a:	7dfb      	ldrb	r3, [r7, #23]
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	6939      	ldr	r1, [r7, #16]
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7ff fe97 	bl	80169c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016c96:	687a      	ldr	r2, [r7, #4]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	3304      	adds	r3, #4
 8016c9c:	6939      	ldr	r1, [r7, #16]
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f7ff fed0 	bl	8016a44 <tcp_output_control_segment>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	371c      	adds	r7, #28
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd90      	pop	{r4, r7, pc}
 8016cb4:	0801d44c 	.word	0x0801d44c
 8016cb8:	0801dc28 	.word	0x0801dc28
 8016cbc:	0801d4a0 	.word	0x0801d4a0

08016cc0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016cc0:	b590      	push	{r4, r7, lr}
 8016cc2:	b08b      	sub	sp, #44	; 0x2c
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016cc8:	2300      	movs	r3, #0
 8016cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d106      	bne.n	8016ce2 <tcp_zero_window_probe+0x22>
 8016cd4:	4b4c      	ldr	r3, [pc, #304]	; (8016e08 <tcp_zero_window_probe+0x148>)
 8016cd6:	f640 024f 	movw	r2, #2127	; 0x84f
 8016cda:	494c      	ldr	r1, [pc, #304]	; (8016e0c <tcp_zero_window_probe+0x14c>)
 8016cdc:	484c      	ldr	r0, [pc, #304]	; (8016e10 <tcp_zero_window_probe+0x150>)
 8016cde:	f003 fb49 	bl	801a374 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ce6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016ce8:	6a3b      	ldr	r3, [r7, #32]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d101      	bne.n	8016cf2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016cee:	2300      	movs	r3, #0
 8016cf0:	e086      	b.n	8016e00 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016cf8:	2bff      	cmp	r3, #255	; 0xff
 8016cfa:	d007      	beq.n	8016d0c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016d02:	3301      	adds	r3, #1
 8016d04:	b2da      	uxtb	r2, r3
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016d0c:	6a3b      	ldr	r3, [r7, #32]
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	899b      	ldrh	r3, [r3, #12]
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7f8 f98f 	bl	800f038 <lwip_htons>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	f003 0301 	and.w	r3, r3, #1
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d005      	beq.n	8016d32 <tcp_zero_window_probe+0x72>
 8016d26:	6a3b      	ldr	r3, [r7, #32]
 8016d28:	891b      	ldrh	r3, [r3, #8]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d101      	bne.n	8016d32 <tcp_zero_window_probe+0x72>
 8016d2e:	2301      	movs	r3, #1
 8016d30:	e000      	b.n	8016d34 <tcp_zero_window_probe+0x74>
 8016d32:	2300      	movs	r3, #0
 8016d34:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016d36:	7ffb      	ldrb	r3, [r7, #31]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	bf0c      	ite	eq
 8016d3c:	2301      	moveq	r3, #1
 8016d3e:	2300      	movne	r3, #0
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d48:	b299      	uxth	r1, r3
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	68db      	ldr	r3, [r3, #12]
 8016d4e:	685b      	ldr	r3, [r3, #4]
 8016d50:	8bba      	ldrh	r2, [r7, #28]
 8016d52:	6878      	ldr	r0, [r7, #4]
 8016d54:	f7ff fdf8 	bl	8016948 <tcp_output_alloc_header>
 8016d58:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016d5a:	69bb      	ldr	r3, [r7, #24]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d102      	bne.n	8016d66 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d64:	e04c      	b.n	8016e00 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016d66:	69bb      	ldr	r3, [r7, #24]
 8016d68:	685b      	ldr	r3, [r3, #4]
 8016d6a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016d6c:	7ffb      	ldrb	r3, [r7, #31]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d011      	beq.n	8016d96 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	899b      	ldrh	r3, [r3, #12]
 8016d76:	b29b      	uxth	r3, r3
 8016d78:	b21b      	sxth	r3, r3
 8016d7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016d7e:	b21c      	sxth	r4, r3
 8016d80:	2011      	movs	r0, #17
 8016d82:	f7f8 f959 	bl	800f038 <lwip_htons>
 8016d86:	4603      	mov	r3, r0
 8016d88:	b21b      	sxth	r3, r3
 8016d8a:	4323      	orrs	r3, r4
 8016d8c:	b21b      	sxth	r3, r3
 8016d8e:	b29a      	uxth	r2, r3
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	819a      	strh	r2, [r3, #12]
 8016d94:	e010      	b.n	8016db8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	3314      	adds	r3, #20
 8016d9c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016d9e:	6a3b      	ldr	r3, [r7, #32]
 8016da0:	6858      	ldr	r0, [r3, #4]
 8016da2:	6a3b      	ldr	r3, [r7, #32]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	891a      	ldrh	r2, [r3, #8]
 8016da8:	6a3b      	ldr	r3, [r7, #32]
 8016daa:	891b      	ldrh	r3, [r3, #8]
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	2201      	movs	r2, #1
 8016db2:	6939      	ldr	r1, [r7, #16]
 8016db4:	f7f9 ff28 	bl	8010c08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016db8:	6a3b      	ldr	r3, [r7, #32]
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	685b      	ldr	r3, [r3, #4]
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	f7f8 f94f 	bl	800f062 <lwip_htonl>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	1ad3      	subs	r3, r2, r3
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	da02      	bge.n	8016ddc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	68fa      	ldr	r2, [r7, #12]
 8016dda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016de0:	2200      	movs	r2, #0
 8016de2:	69b9      	ldr	r1, [r7, #24]
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	f7ff fded 	bl	80169c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016dea:	687a      	ldr	r2, [r7, #4]
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	3304      	adds	r3, #4
 8016df0:	69b9      	ldr	r1, [r7, #24]
 8016df2:	6878      	ldr	r0, [r7, #4]
 8016df4:	f7ff fe26 	bl	8016a44 <tcp_output_control_segment>
 8016df8:	4603      	mov	r3, r0
 8016dfa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016dfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	372c      	adds	r7, #44	; 0x2c
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd90      	pop	{r4, r7, pc}
 8016e08:	0801d44c 	.word	0x0801d44c
 8016e0c:	0801dc44 	.word	0x0801dc44
 8016e10:	0801d4a0 	.word	0x0801d4a0

08016e14 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b082      	sub	sp, #8
 8016e18:	af00      	add	r7, sp, #0
 8016e1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016e1c:	f7f9 ffe2 	bl	8010de4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016e20:	4b0a      	ldr	r3, [pc, #40]	; (8016e4c <tcpip_tcp_timer+0x38>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d103      	bne.n	8016e30 <tcpip_tcp_timer+0x1c>
 8016e28:	4b09      	ldr	r3, [pc, #36]	; (8016e50 <tcpip_tcp_timer+0x3c>)
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d005      	beq.n	8016e3c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016e30:	2200      	movs	r2, #0
 8016e32:	4908      	ldr	r1, [pc, #32]	; (8016e54 <tcpip_tcp_timer+0x40>)
 8016e34:	20fa      	movs	r0, #250	; 0xfa
 8016e36:	f000 f8f3 	bl	8017020 <sys_timeout>
 8016e3a:	e003      	b.n	8016e44 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016e3c:	4b06      	ldr	r3, [pc, #24]	; (8016e58 <tcpip_tcp_timer+0x44>)
 8016e3e:	2200      	movs	r2, #0
 8016e40:	601a      	str	r2, [r3, #0]
  }
}
 8016e42:	bf00      	nop
 8016e44:	bf00      	nop
 8016e46:	3708      	adds	r7, #8
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}
 8016e4c:	2004f5dc 	.word	0x2004f5dc
 8016e50:	2004f5e0 	.word	0x2004f5e0
 8016e54:	08016e15 	.word	0x08016e15
 8016e58:	2004f628 	.word	0x2004f628

08016e5c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016e60:	4b0a      	ldr	r3, [pc, #40]	; (8016e8c <tcp_timer_needed+0x30>)
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d10f      	bne.n	8016e88 <tcp_timer_needed+0x2c>
 8016e68:	4b09      	ldr	r3, [pc, #36]	; (8016e90 <tcp_timer_needed+0x34>)
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d103      	bne.n	8016e78 <tcp_timer_needed+0x1c>
 8016e70:	4b08      	ldr	r3, [pc, #32]	; (8016e94 <tcp_timer_needed+0x38>)
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d007      	beq.n	8016e88 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016e78:	4b04      	ldr	r3, [pc, #16]	; (8016e8c <tcp_timer_needed+0x30>)
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016e7e:	2200      	movs	r2, #0
 8016e80:	4905      	ldr	r1, [pc, #20]	; (8016e98 <tcp_timer_needed+0x3c>)
 8016e82:	20fa      	movs	r0, #250	; 0xfa
 8016e84:	f000 f8cc 	bl	8017020 <sys_timeout>
  }
}
 8016e88:	bf00      	nop
 8016e8a:	bd80      	pop	{r7, pc}
 8016e8c:	2004f628 	.word	0x2004f628
 8016e90:	2004f5dc 	.word	0x2004f5dc
 8016e94:	2004f5e0 	.word	0x2004f5e0
 8016e98:	08016e15 	.word	0x08016e15

08016e9c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b086      	sub	sp, #24
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	60f8      	str	r0, [r7, #12]
 8016ea4:	60b9      	str	r1, [r7, #8]
 8016ea6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016ea8:	200a      	movs	r0, #10
 8016eaa:	f7f8 fd9d 	bl	800f9e8 <memp_malloc>
 8016eae:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016eb0:	693b      	ldr	r3, [r7, #16]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d109      	bne.n	8016eca <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016eb6:	693b      	ldr	r3, [r7, #16]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d151      	bne.n	8016f60 <sys_timeout_abs+0xc4>
 8016ebc:	4b2a      	ldr	r3, [pc, #168]	; (8016f68 <sys_timeout_abs+0xcc>)
 8016ebe:	22be      	movs	r2, #190	; 0xbe
 8016ec0:	492a      	ldr	r1, [pc, #168]	; (8016f6c <sys_timeout_abs+0xd0>)
 8016ec2:	482b      	ldr	r0, [pc, #172]	; (8016f70 <sys_timeout_abs+0xd4>)
 8016ec4:	f003 fa56 	bl	801a374 <iprintf>
    return;
 8016ec8:	e04a      	b.n	8016f60 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	2200      	movs	r2, #0
 8016ece:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	68ba      	ldr	r2, [r7, #8]
 8016ed4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	687a      	ldr	r2, [r7, #4]
 8016eda:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016edc:	693b      	ldr	r3, [r7, #16]
 8016ede:	68fa      	ldr	r2, [r7, #12]
 8016ee0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016ee2:	4b24      	ldr	r3, [pc, #144]	; (8016f74 <sys_timeout_abs+0xd8>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d103      	bne.n	8016ef2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016eea:	4a22      	ldr	r2, [pc, #136]	; (8016f74 <sys_timeout_abs+0xd8>)
 8016eec:	693b      	ldr	r3, [r7, #16]
 8016eee:	6013      	str	r3, [r2, #0]
    return;
 8016ef0:	e037      	b.n	8016f62 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016ef2:	693b      	ldr	r3, [r7, #16]
 8016ef4:	685a      	ldr	r2, [r3, #4]
 8016ef6:	4b1f      	ldr	r3, [pc, #124]	; (8016f74 <sys_timeout_abs+0xd8>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	1ad3      	subs	r3, r2, r3
 8016efe:	0fdb      	lsrs	r3, r3, #31
 8016f00:	f003 0301 	and.w	r3, r3, #1
 8016f04:	b2db      	uxtb	r3, r3
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d007      	beq.n	8016f1a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016f0a:	4b1a      	ldr	r3, [pc, #104]	; (8016f74 <sys_timeout_abs+0xd8>)
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016f12:	4a18      	ldr	r2, [pc, #96]	; (8016f74 <sys_timeout_abs+0xd8>)
 8016f14:	693b      	ldr	r3, [r7, #16]
 8016f16:	6013      	str	r3, [r2, #0]
 8016f18:	e023      	b.n	8016f62 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016f1a:	4b16      	ldr	r3, [pc, #88]	; (8016f74 <sys_timeout_abs+0xd8>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	617b      	str	r3, [r7, #20]
 8016f20:	e01a      	b.n	8016f58 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016f22:	697b      	ldr	r3, [r7, #20]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d00b      	beq.n	8016f42 <sys_timeout_abs+0xa6>
 8016f2a:	693b      	ldr	r3, [r7, #16]
 8016f2c:	685a      	ldr	r2, [r3, #4]
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	0fdb      	lsrs	r3, r3, #31
 8016f38:	f003 0301 	and.w	r3, r3, #1
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d007      	beq.n	8016f52 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	681a      	ldr	r2, [r3, #0]
 8016f46:	693b      	ldr	r3, [r7, #16]
 8016f48:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016f4a:	697b      	ldr	r3, [r7, #20]
 8016f4c:	693a      	ldr	r2, [r7, #16]
 8016f4e:	601a      	str	r2, [r3, #0]
        break;
 8016f50:	e007      	b.n	8016f62 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016f52:	697b      	ldr	r3, [r7, #20]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	617b      	str	r3, [r7, #20]
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d1e1      	bne.n	8016f22 <sys_timeout_abs+0x86>
 8016f5e:	e000      	b.n	8016f62 <sys_timeout_abs+0xc6>
    return;
 8016f60:	bf00      	nop
      }
    }
  }
}
 8016f62:	3718      	adds	r7, #24
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}
 8016f68:	0801dc68 	.word	0x0801dc68
 8016f6c:	0801dc9c 	.word	0x0801dc9c
 8016f70:	0801dcdc 	.word	0x0801dcdc
 8016f74:	2004f620 	.word	0x2004f620

08016f78 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b086      	sub	sp, #24
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	685b      	ldr	r3, [r3, #4]
 8016f88:	4798      	blx	r3

  now = sys_now();
 8016f8a:	f7f1 fc7f 	bl	800888c <sys_now>
 8016f8e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	681a      	ldr	r2, [r3, #0]
 8016f94:	4b0f      	ldr	r3, [pc, #60]	; (8016fd4 <lwip_cyclic_timer+0x5c>)
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	4413      	add	r3, r2
 8016f9a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016f9c:	68fa      	ldr	r2, [r7, #12]
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	1ad3      	subs	r3, r2, r3
 8016fa2:	0fdb      	lsrs	r3, r3, #31
 8016fa4:	f003 0301 	and.w	r3, r3, #1
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d009      	beq.n	8016fc2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016fae:	697b      	ldr	r3, [r7, #20]
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	693b      	ldr	r3, [r7, #16]
 8016fb4:	4413      	add	r3, r2
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	4907      	ldr	r1, [pc, #28]	; (8016fd8 <lwip_cyclic_timer+0x60>)
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7ff ff6e 	bl	8016e9c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016fc0:	e004      	b.n	8016fcc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016fc2:	687a      	ldr	r2, [r7, #4]
 8016fc4:	4904      	ldr	r1, [pc, #16]	; (8016fd8 <lwip_cyclic_timer+0x60>)
 8016fc6:	68f8      	ldr	r0, [r7, #12]
 8016fc8:	f7ff ff68 	bl	8016e9c <sys_timeout_abs>
}
 8016fcc:	bf00      	nop
 8016fce:	3718      	adds	r7, #24
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}
 8016fd4:	2004f624 	.word	0x2004f624
 8016fd8:	08016f79 	.word	0x08016f79

08016fdc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b082      	sub	sp, #8
 8016fe0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	607b      	str	r3, [r7, #4]
 8016fe6:	e00e      	b.n	8017006 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016fe8:	4a0b      	ldr	r2, [pc, #44]	; (8017018 <sys_timeouts_init+0x3c>)
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	00db      	lsls	r3, r3, #3
 8016ff4:	4a08      	ldr	r2, [pc, #32]	; (8017018 <sys_timeouts_init+0x3c>)
 8016ff6:	4413      	add	r3, r2
 8016ff8:	461a      	mov	r2, r3
 8016ffa:	4908      	ldr	r1, [pc, #32]	; (801701c <sys_timeouts_init+0x40>)
 8016ffc:	f000 f810 	bl	8017020 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	3301      	adds	r3, #1
 8017004:	607b      	str	r3, [r7, #4]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	2b02      	cmp	r3, #2
 801700a:	d9ed      	bls.n	8016fe8 <sys_timeouts_init+0xc>
  }
}
 801700c:	bf00      	nop
 801700e:	bf00      	nop
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	0801e8bc 	.word	0x0801e8bc
 801701c:	08016f79 	.word	0x08016f79

08017020 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017020:	b580      	push	{r7, lr}
 8017022:	b086      	sub	sp, #24
 8017024:	af00      	add	r7, sp, #0
 8017026:	60f8      	str	r0, [r7, #12]
 8017028:	60b9      	str	r1, [r7, #8]
 801702a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017032:	d306      	bcc.n	8017042 <sys_timeout+0x22>
 8017034:	4b0a      	ldr	r3, [pc, #40]	; (8017060 <sys_timeout+0x40>)
 8017036:	f240 1229 	movw	r2, #297	; 0x129
 801703a:	490a      	ldr	r1, [pc, #40]	; (8017064 <sys_timeout+0x44>)
 801703c:	480a      	ldr	r0, [pc, #40]	; (8017068 <sys_timeout+0x48>)
 801703e:	f003 f999 	bl	801a374 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017042:	f7f1 fc23 	bl	800888c <sys_now>
 8017046:	4602      	mov	r2, r0
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	4413      	add	r3, r2
 801704c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	68b9      	ldr	r1, [r7, #8]
 8017052:	6978      	ldr	r0, [r7, #20]
 8017054:	f7ff ff22 	bl	8016e9c <sys_timeout_abs>
#endif
}
 8017058:	bf00      	nop
 801705a:	3718      	adds	r7, #24
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}
 8017060:	0801dc68 	.word	0x0801dc68
 8017064:	0801dd04 	.word	0x0801dd04
 8017068:	0801dcdc 	.word	0x0801dcdc

0801706c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017072:	f7f1 fc0b 	bl	800888c <sys_now>
 8017076:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017078:	4b17      	ldr	r3, [pc, #92]	; (80170d8 <sys_check_timeouts+0x6c>)
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801707e:	68bb      	ldr	r3, [r7, #8]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d022      	beq.n	80170ca <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	685b      	ldr	r3, [r3, #4]
 8017088:	68fa      	ldr	r2, [r7, #12]
 801708a:	1ad3      	subs	r3, r2, r3
 801708c:	0fdb      	lsrs	r3, r3, #31
 801708e:	f003 0301 	and.w	r3, r3, #1
 8017092:	b2db      	uxtb	r3, r3
 8017094:	2b00      	cmp	r3, #0
 8017096:	d11a      	bne.n	80170ce <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	4a0e      	ldr	r2, [pc, #56]	; (80170d8 <sys_check_timeouts+0x6c>)
 801709e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80170a0:	68bb      	ldr	r3, [r7, #8]
 80170a2:	689b      	ldr	r3, [r3, #8]
 80170a4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	68db      	ldr	r3, [r3, #12]
 80170aa:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80170ac:	68bb      	ldr	r3, [r7, #8]
 80170ae:	685b      	ldr	r3, [r3, #4]
 80170b0:	4a0a      	ldr	r2, [pc, #40]	; (80170dc <sys_check_timeouts+0x70>)
 80170b2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80170b4:	68b9      	ldr	r1, [r7, #8]
 80170b6:	200a      	movs	r0, #10
 80170b8:	f7f8 fd0c 	bl	800fad4 <memp_free>
    if (handler != NULL) {
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d0da      	beq.n	8017078 <sys_check_timeouts+0xc>
      handler(arg);
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	6838      	ldr	r0, [r7, #0]
 80170c6:	4798      	blx	r3
  do {
 80170c8:	e7d6      	b.n	8017078 <sys_check_timeouts+0xc>
      return;
 80170ca:	bf00      	nop
 80170cc:	e000      	b.n	80170d0 <sys_check_timeouts+0x64>
      return;
 80170ce:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80170d0:	3710      	adds	r7, #16
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}
 80170d6:	bf00      	nop
 80170d8:	2004f620 	.word	0x2004f620
 80170dc:	2004f624 	.word	0x2004f624

080170e0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80170e6:	4b16      	ldr	r3, [pc, #88]	; (8017140 <sys_timeouts_sleeptime+0x60>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d102      	bne.n	80170f4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80170ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170f2:	e020      	b.n	8017136 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80170f4:	f7f1 fbca 	bl	800888c <sys_now>
 80170f8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80170fa:	4b11      	ldr	r3, [pc, #68]	; (8017140 <sys_timeouts_sleeptime+0x60>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	685a      	ldr	r2, [r3, #4]
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	1ad3      	subs	r3, r2, r3
 8017104:	0fdb      	lsrs	r3, r3, #31
 8017106:	f003 0301 	and.w	r3, r3, #1
 801710a:	b2db      	uxtb	r3, r3
 801710c:	2b00      	cmp	r3, #0
 801710e:	d001      	beq.n	8017114 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017110:	2300      	movs	r3, #0
 8017112:	e010      	b.n	8017136 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017114:	4b0a      	ldr	r3, [pc, #40]	; (8017140 <sys_timeouts_sleeptime+0x60>)
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	685a      	ldr	r2, [r3, #4]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	1ad3      	subs	r3, r2, r3
 801711e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	2b00      	cmp	r3, #0
 8017124:	da06      	bge.n	8017134 <sys_timeouts_sleeptime+0x54>
 8017126:	4b07      	ldr	r3, [pc, #28]	; (8017144 <sys_timeouts_sleeptime+0x64>)
 8017128:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801712c:	4906      	ldr	r1, [pc, #24]	; (8017148 <sys_timeouts_sleeptime+0x68>)
 801712e:	4807      	ldr	r0, [pc, #28]	; (801714c <sys_timeouts_sleeptime+0x6c>)
 8017130:	f003 f920 	bl	801a374 <iprintf>
    return ret;
 8017134:	683b      	ldr	r3, [r7, #0]
  }
}
 8017136:	4618      	mov	r0, r3
 8017138:	3708      	adds	r7, #8
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	2004f620 	.word	0x2004f620
 8017144:	0801dc68 	.word	0x0801dc68
 8017148:	0801dd3c 	.word	0x0801dd3c
 801714c:	0801dcdc 	.word	0x0801dcdc

08017150 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017154:	f003 f926 	bl	801a3a4 <rand>
 8017158:	4603      	mov	r3, r0
 801715a:	b29b      	uxth	r3, r3
 801715c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017160:	b29b      	uxth	r3, r3
 8017162:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017166:	b29a      	uxth	r2, r3
 8017168:	4b01      	ldr	r3, [pc, #4]	; (8017170 <udp_init+0x20>)
 801716a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801716c:	bf00      	nop
 801716e:	bd80      	pop	{r7, pc}
 8017170:	20001a58 	.word	0x20001a58

08017174 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017174:	b480      	push	{r7}
 8017176:	b083      	sub	sp, #12
 8017178:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801717a:	2300      	movs	r3, #0
 801717c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801717e:	4b17      	ldr	r3, [pc, #92]	; (80171dc <udp_new_port+0x68>)
 8017180:	881b      	ldrh	r3, [r3, #0]
 8017182:	1c5a      	adds	r2, r3, #1
 8017184:	b291      	uxth	r1, r2
 8017186:	4a15      	ldr	r2, [pc, #84]	; (80171dc <udp_new_port+0x68>)
 8017188:	8011      	strh	r1, [r2, #0]
 801718a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801718e:	4293      	cmp	r3, r2
 8017190:	d103      	bne.n	801719a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017192:	4b12      	ldr	r3, [pc, #72]	; (80171dc <udp_new_port+0x68>)
 8017194:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017198:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801719a:	4b11      	ldr	r3, [pc, #68]	; (80171e0 <udp_new_port+0x6c>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	603b      	str	r3, [r7, #0]
 80171a0:	e011      	b.n	80171c6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	8a5a      	ldrh	r2, [r3, #18]
 80171a6:	4b0d      	ldr	r3, [pc, #52]	; (80171dc <udp_new_port+0x68>)
 80171a8:	881b      	ldrh	r3, [r3, #0]
 80171aa:	429a      	cmp	r2, r3
 80171ac:	d108      	bne.n	80171c0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80171ae:	88fb      	ldrh	r3, [r7, #6]
 80171b0:	3301      	adds	r3, #1
 80171b2:	80fb      	strh	r3, [r7, #6]
 80171b4:	88fb      	ldrh	r3, [r7, #6]
 80171b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80171ba:	d3e0      	bcc.n	801717e <udp_new_port+0xa>
        return 0;
 80171bc:	2300      	movs	r3, #0
 80171be:	e007      	b.n	80171d0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80171c0:	683b      	ldr	r3, [r7, #0]
 80171c2:	68db      	ldr	r3, [r3, #12]
 80171c4:	603b      	str	r3, [r7, #0]
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d1ea      	bne.n	80171a2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80171cc:	4b03      	ldr	r3, [pc, #12]	; (80171dc <udp_new_port+0x68>)
 80171ce:	881b      	ldrh	r3, [r3, #0]
}
 80171d0:	4618      	mov	r0, r3
 80171d2:	370c      	adds	r7, #12
 80171d4:	46bd      	mov	sp, r7
 80171d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171da:	4770      	bx	lr
 80171dc:	20001a58 	.word	0x20001a58
 80171e0:	2004f62c 	.word	0x2004f62c

080171e4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b084      	sub	sp, #16
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	4613      	mov	r3, r2
 80171f0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d105      	bne.n	8017204 <udp_input_local_match+0x20>
 80171f8:	4b27      	ldr	r3, [pc, #156]	; (8017298 <udp_input_local_match+0xb4>)
 80171fa:	2287      	movs	r2, #135	; 0x87
 80171fc:	4927      	ldr	r1, [pc, #156]	; (801729c <udp_input_local_match+0xb8>)
 80171fe:	4828      	ldr	r0, [pc, #160]	; (80172a0 <udp_input_local_match+0xbc>)
 8017200:	f003 f8b8 	bl	801a374 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d105      	bne.n	8017216 <udp_input_local_match+0x32>
 801720a:	4b23      	ldr	r3, [pc, #140]	; (8017298 <udp_input_local_match+0xb4>)
 801720c:	2288      	movs	r2, #136	; 0x88
 801720e:	4925      	ldr	r1, [pc, #148]	; (80172a4 <udp_input_local_match+0xc0>)
 8017210:	4823      	ldr	r0, [pc, #140]	; (80172a0 <udp_input_local_match+0xbc>)
 8017212:	f003 f8af 	bl	801a374 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017216:	68fb      	ldr	r3, [r7, #12]
 8017218:	7a1b      	ldrb	r3, [r3, #8]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d00b      	beq.n	8017236 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	7a1a      	ldrb	r2, [r3, #8]
 8017222:	4b21      	ldr	r3, [pc, #132]	; (80172a8 <udp_input_local_match+0xc4>)
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801722a:	3301      	adds	r3, #1
 801722c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801722e:	429a      	cmp	r2, r3
 8017230:	d001      	beq.n	8017236 <udp_input_local_match+0x52>
    return 0;
 8017232:	2300      	movs	r3, #0
 8017234:	e02b      	b.n	801728e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017236:	79fb      	ldrb	r3, [r7, #7]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d018      	beq.n	801726e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d013      	beq.n	801726a <udp_input_local_match+0x86>
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d00f      	beq.n	801726a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801724a:	4b17      	ldr	r3, [pc, #92]	; (80172a8 <udp_input_local_match+0xc4>)
 801724c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801724e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017252:	d00a      	beq.n	801726a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	681a      	ldr	r2, [r3, #0]
 8017258:	4b13      	ldr	r3, [pc, #76]	; (80172a8 <udp_input_local_match+0xc4>)
 801725a:	695b      	ldr	r3, [r3, #20]
 801725c:	405a      	eors	r2, r3
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	3308      	adds	r3, #8
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017266:	2b00      	cmp	r3, #0
 8017268:	d110      	bne.n	801728c <udp_input_local_match+0xa8>
          return 1;
 801726a:	2301      	movs	r3, #1
 801726c:	e00f      	b.n	801728e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d009      	beq.n	8017288 <udp_input_local_match+0xa4>
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d005      	beq.n	8017288 <udp_input_local_match+0xa4>
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	4b09      	ldr	r3, [pc, #36]	; (80172a8 <udp_input_local_match+0xc4>)
 8017282:	695b      	ldr	r3, [r3, #20]
 8017284:	429a      	cmp	r2, r3
 8017286:	d101      	bne.n	801728c <udp_input_local_match+0xa8>
        return 1;
 8017288:	2301      	movs	r3, #1
 801728a:	e000      	b.n	801728e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801728c:	2300      	movs	r3, #0
}
 801728e:	4618      	mov	r0, r3
 8017290:	3710      	adds	r7, #16
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}
 8017296:	bf00      	nop
 8017298:	0801dd50 	.word	0x0801dd50
 801729c:	0801dd80 	.word	0x0801dd80
 80172a0:	0801dda4 	.word	0x0801dda4
 80172a4:	0801ddcc 	.word	0x0801ddcc
 80172a8:	2004b0bc 	.word	0x2004b0bc

080172ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80172ac:	b590      	push	{r4, r7, lr}
 80172ae:	b08d      	sub	sp, #52	; 0x34
 80172b0:	af02      	add	r7, sp, #8
 80172b2:	6078      	str	r0, [r7, #4]
 80172b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80172b6:	2300      	movs	r3, #0
 80172b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d105      	bne.n	80172cc <udp_input+0x20>
 80172c0:	4b7c      	ldr	r3, [pc, #496]	; (80174b4 <udp_input+0x208>)
 80172c2:	22cf      	movs	r2, #207	; 0xcf
 80172c4:	497c      	ldr	r1, [pc, #496]	; (80174b8 <udp_input+0x20c>)
 80172c6:	487d      	ldr	r0, [pc, #500]	; (80174bc <udp_input+0x210>)
 80172c8:	f003 f854 	bl	801a374 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d105      	bne.n	80172de <udp_input+0x32>
 80172d2:	4b78      	ldr	r3, [pc, #480]	; (80174b4 <udp_input+0x208>)
 80172d4:	22d0      	movs	r2, #208	; 0xd0
 80172d6:	497a      	ldr	r1, [pc, #488]	; (80174c0 <udp_input+0x214>)
 80172d8:	4878      	ldr	r0, [pc, #480]	; (80174bc <udp_input+0x210>)
 80172da:	f003 f84b 	bl	801a374 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	895b      	ldrh	r3, [r3, #10]
 80172e2:	2b07      	cmp	r3, #7
 80172e4:	d803      	bhi.n	80172ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f7f9 fa98 	bl	801081c <pbuf_free>
    goto end;
 80172ec:	e0de      	b.n	80174ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	685b      	ldr	r3, [r3, #4]
 80172f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80172f4:	4b73      	ldr	r3, [pc, #460]	; (80174c4 <udp_input+0x218>)
 80172f6:	695b      	ldr	r3, [r3, #20]
 80172f8:	4a72      	ldr	r2, [pc, #456]	; (80174c4 <udp_input+0x218>)
 80172fa:	6812      	ldr	r2, [r2, #0]
 80172fc:	4611      	mov	r1, r2
 80172fe:	4618      	mov	r0, r3
 8017300:	f001 fd54 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8017304:	4603      	mov	r3, r0
 8017306:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	881b      	ldrh	r3, [r3, #0]
 801730c:	b29b      	uxth	r3, r3
 801730e:	4618      	mov	r0, r3
 8017310:	f7f7 fe92 	bl	800f038 <lwip_htons>
 8017314:	4603      	mov	r3, r0
 8017316:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017318:	697b      	ldr	r3, [r7, #20]
 801731a:	885b      	ldrh	r3, [r3, #2]
 801731c:	b29b      	uxth	r3, r3
 801731e:	4618      	mov	r0, r3
 8017320:	f7f7 fe8a 	bl	800f038 <lwip_htons>
 8017324:	4603      	mov	r3, r0
 8017326:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017328:	2300      	movs	r3, #0
 801732a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801732c:	2300      	movs	r3, #0
 801732e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017330:	2300      	movs	r3, #0
 8017332:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017334:	4b64      	ldr	r3, [pc, #400]	; (80174c8 <udp_input+0x21c>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	627b      	str	r3, [r7, #36]	; 0x24
 801733a:	e054      	b.n	80173e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801733e:	8a5b      	ldrh	r3, [r3, #18]
 8017340:	89fa      	ldrh	r2, [r7, #14]
 8017342:	429a      	cmp	r2, r3
 8017344:	d14a      	bne.n	80173dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017346:	7cfb      	ldrb	r3, [r7, #19]
 8017348:	461a      	mov	r2, r3
 801734a:	6839      	ldr	r1, [r7, #0]
 801734c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801734e:	f7ff ff49 	bl	80171e4 <udp_input_local_match>
 8017352:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017354:	2b00      	cmp	r3, #0
 8017356:	d041      	beq.n	80173dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801735a:	7c1b      	ldrb	r3, [r3, #16]
 801735c:	f003 0304 	and.w	r3, r3, #4
 8017360:	2b00      	cmp	r3, #0
 8017362:	d11d      	bne.n	80173a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017364:	69fb      	ldr	r3, [r7, #28]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d102      	bne.n	8017370 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801736c:	61fb      	str	r3, [r7, #28]
 801736e:	e017      	b.n	80173a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017370:	7cfb      	ldrb	r3, [r7, #19]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d014      	beq.n	80173a0 <udp_input+0xf4>
 8017376:	4b53      	ldr	r3, [pc, #332]	; (80174c4 <udp_input+0x218>)
 8017378:	695b      	ldr	r3, [r3, #20]
 801737a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801737e:	d10f      	bne.n	80173a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017380:	69fb      	ldr	r3, [r7, #28]
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	3304      	adds	r3, #4
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d008      	beq.n	80173a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017390:	681a      	ldr	r2, [r3, #0]
 8017392:	683b      	ldr	r3, [r7, #0]
 8017394:	3304      	adds	r3, #4
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	429a      	cmp	r2, r3
 801739a:	d101      	bne.n	80173a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801739e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80173a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a2:	8a9b      	ldrh	r3, [r3, #20]
 80173a4:	8a3a      	ldrh	r2, [r7, #16]
 80173a6:	429a      	cmp	r2, r3
 80173a8:	d118      	bne.n	80173dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80173aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d005      	beq.n	80173be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80173b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b4:	685a      	ldr	r2, [r3, #4]
 80173b6:	4b43      	ldr	r3, [pc, #268]	; (80174c4 <udp_input+0x218>)
 80173b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80173ba:	429a      	cmp	r2, r3
 80173bc:	d10e      	bne.n	80173dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80173be:	6a3b      	ldr	r3, [r7, #32]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d014      	beq.n	80173ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80173c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c6:	68da      	ldr	r2, [r3, #12]
 80173c8:	6a3b      	ldr	r3, [r7, #32]
 80173ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80173cc:	4b3e      	ldr	r3, [pc, #248]	; (80174c8 <udp_input+0x21c>)
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80173d4:	4a3c      	ldr	r2, [pc, #240]	; (80174c8 <udp_input+0x21c>)
 80173d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80173da:	e008      	b.n	80173ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80173dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80173e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e2:	68db      	ldr	r3, [r3, #12]
 80173e4:	627b      	str	r3, [r7, #36]	; 0x24
 80173e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d1a7      	bne.n	801733c <udp_input+0x90>
 80173ec:	e000      	b.n	80173f0 <udp_input+0x144>
        break;
 80173ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80173f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d101      	bne.n	80173fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80173f6:	69fb      	ldr	r3, [r7, #28]
 80173f8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80173fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d002      	beq.n	8017406 <udp_input+0x15a>
    for_us = 1;
 8017400:	2301      	movs	r3, #1
 8017402:	76fb      	strb	r3, [r7, #27]
 8017404:	e00a      	b.n	801741c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	3304      	adds	r3, #4
 801740a:	681a      	ldr	r2, [r3, #0]
 801740c:	4b2d      	ldr	r3, [pc, #180]	; (80174c4 <udp_input+0x218>)
 801740e:	695b      	ldr	r3, [r3, #20]
 8017410:	429a      	cmp	r2, r3
 8017412:	bf0c      	ite	eq
 8017414:	2301      	moveq	r3, #1
 8017416:	2300      	movne	r3, #0
 8017418:	b2db      	uxtb	r3, r3
 801741a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801741c:	7efb      	ldrb	r3, [r7, #27]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d041      	beq.n	80174a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017422:	2108      	movs	r1, #8
 8017424:	6878      	ldr	r0, [r7, #4]
 8017426:	f7f9 f973 	bl	8010710 <pbuf_remove_header>
 801742a:	4603      	mov	r3, r0
 801742c:	2b00      	cmp	r3, #0
 801742e:	d00a      	beq.n	8017446 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017430:	4b20      	ldr	r3, [pc, #128]	; (80174b4 <udp_input+0x208>)
 8017432:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017436:	4925      	ldr	r1, [pc, #148]	; (80174cc <udp_input+0x220>)
 8017438:	4820      	ldr	r0, [pc, #128]	; (80174bc <udp_input+0x210>)
 801743a:	f002 ff9b 	bl	801a374 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f7f9 f9ec 	bl	801081c <pbuf_free>
      goto end;
 8017444:	e032      	b.n	80174ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017448:	2b00      	cmp	r3, #0
 801744a:	d012      	beq.n	8017472 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801744e:	699b      	ldr	r3, [r3, #24]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d00a      	beq.n	801746a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017456:	699c      	ldr	r4, [r3, #24]
 8017458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745a:	69d8      	ldr	r0, [r3, #28]
 801745c:	8a3b      	ldrh	r3, [r7, #16]
 801745e:	9300      	str	r3, [sp, #0]
 8017460:	4b1b      	ldr	r3, [pc, #108]	; (80174d0 <udp_input+0x224>)
 8017462:	687a      	ldr	r2, [r7, #4]
 8017464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017466:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017468:	e021      	b.n	80174ae <udp_input+0x202>
        pbuf_free(p);
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f7f9 f9d6 	bl	801081c <pbuf_free>
        goto end;
 8017470:	e01c      	b.n	80174ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017472:	7cfb      	ldrb	r3, [r7, #19]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d112      	bne.n	801749e <udp_input+0x1f2>
 8017478:	4b12      	ldr	r3, [pc, #72]	; (80174c4 <udp_input+0x218>)
 801747a:	695b      	ldr	r3, [r3, #20]
 801747c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017480:	2be0      	cmp	r3, #224	; 0xe0
 8017482:	d00c      	beq.n	801749e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017484:	4b0f      	ldr	r3, [pc, #60]	; (80174c4 <udp_input+0x218>)
 8017486:	899b      	ldrh	r3, [r3, #12]
 8017488:	3308      	adds	r3, #8
 801748a:	b29b      	uxth	r3, r3
 801748c:	b21b      	sxth	r3, r3
 801748e:	4619      	mov	r1, r3
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f7f9 f9b0 	bl	80107f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017496:	2103      	movs	r1, #3
 8017498:	6878      	ldr	r0, [r7, #4]
 801749a:	f001 f967 	bl	801876c <icmp_dest_unreach>
      pbuf_free(p);
 801749e:	6878      	ldr	r0, [r7, #4]
 80174a0:	f7f9 f9bc 	bl	801081c <pbuf_free>
  return;
 80174a4:	e003      	b.n	80174ae <udp_input+0x202>
    pbuf_free(p);
 80174a6:	6878      	ldr	r0, [r7, #4]
 80174a8:	f7f9 f9b8 	bl	801081c <pbuf_free>
  return;
 80174ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80174ae:	372c      	adds	r7, #44	; 0x2c
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd90      	pop	{r4, r7, pc}
 80174b4:	0801dd50 	.word	0x0801dd50
 80174b8:	0801ddf4 	.word	0x0801ddf4
 80174bc:	0801dda4 	.word	0x0801dda4
 80174c0:	0801de0c 	.word	0x0801de0c
 80174c4:	2004b0bc 	.word	0x2004b0bc
 80174c8:	2004f62c 	.word	0x2004f62c
 80174cc:	0801de28 	.word	0x0801de28
 80174d0:	2004b0cc 	.word	0x2004b0cc

080174d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b086      	sub	sp, #24
 80174d8:	af00      	add	r7, sp, #0
 80174da:	60f8      	str	r0, [r7, #12]
 80174dc:	60b9      	str	r1, [r7, #8]
 80174de:	4613      	mov	r3, r2
 80174e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d101      	bne.n	80174ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80174e8:	4b39      	ldr	r3, [pc, #228]	; (80175d0 <udp_bind+0xfc>)
 80174ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d109      	bne.n	8017506 <udp_bind+0x32>
 80174f2:	4b38      	ldr	r3, [pc, #224]	; (80175d4 <udp_bind+0x100>)
 80174f4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80174f8:	4937      	ldr	r1, [pc, #220]	; (80175d8 <udp_bind+0x104>)
 80174fa:	4838      	ldr	r0, [pc, #224]	; (80175dc <udp_bind+0x108>)
 80174fc:	f002 ff3a 	bl	801a374 <iprintf>
 8017500:	f06f 030f 	mvn.w	r3, #15
 8017504:	e060      	b.n	80175c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017506:	2300      	movs	r3, #0
 8017508:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801750a:	4b35      	ldr	r3, [pc, #212]	; (80175e0 <udp_bind+0x10c>)
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	617b      	str	r3, [r7, #20]
 8017510:	e009      	b.n	8017526 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017512:	68fa      	ldr	r2, [r7, #12]
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	429a      	cmp	r2, r3
 8017518:	d102      	bne.n	8017520 <udp_bind+0x4c>
      rebind = 1;
 801751a:	2301      	movs	r3, #1
 801751c:	74fb      	strb	r3, [r7, #19]
      break;
 801751e:	e005      	b.n	801752c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017520:	697b      	ldr	r3, [r7, #20]
 8017522:	68db      	ldr	r3, [r3, #12]
 8017524:	617b      	str	r3, [r7, #20]
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	2b00      	cmp	r3, #0
 801752a:	d1f2      	bne.n	8017512 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801752c:	88fb      	ldrh	r3, [r7, #6]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d109      	bne.n	8017546 <udp_bind+0x72>
    port = udp_new_port();
 8017532:	f7ff fe1f 	bl	8017174 <udp_new_port>
 8017536:	4603      	mov	r3, r0
 8017538:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801753a:	88fb      	ldrh	r3, [r7, #6]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d12c      	bne.n	801759a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017540:	f06f 0307 	mvn.w	r3, #7
 8017544:	e040      	b.n	80175c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017546:	4b26      	ldr	r3, [pc, #152]	; (80175e0 <udp_bind+0x10c>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	617b      	str	r3, [r7, #20]
 801754c:	e022      	b.n	8017594 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801754e:	68fa      	ldr	r2, [r7, #12]
 8017550:	697b      	ldr	r3, [r7, #20]
 8017552:	429a      	cmp	r2, r3
 8017554:	d01b      	beq.n	801758e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017556:	697b      	ldr	r3, [r7, #20]
 8017558:	8a5b      	ldrh	r3, [r3, #18]
 801755a:	88fa      	ldrh	r2, [r7, #6]
 801755c:	429a      	cmp	r2, r3
 801755e:	d116      	bne.n	801758e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017560:	697b      	ldr	r3, [r7, #20]
 8017562:	681a      	ldr	r2, [r3, #0]
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017568:	429a      	cmp	r2, r3
 801756a:	d00d      	beq.n	8017588 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801756c:	68bb      	ldr	r3, [r7, #8]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d00a      	beq.n	8017588 <udp_bind+0xb4>
 8017572:	68bb      	ldr	r3, [r7, #8]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d006      	beq.n	8017588 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801757a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801757c:	2b00      	cmp	r3, #0
 801757e:	d003      	beq.n	8017588 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017580:	697b      	ldr	r3, [r7, #20]
 8017582:	681b      	ldr	r3, [r3, #0]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d102      	bne.n	801758e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017588:	f06f 0307 	mvn.w	r3, #7
 801758c:	e01c      	b.n	80175c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	68db      	ldr	r3, [r3, #12]
 8017592:	617b      	str	r3, [r7, #20]
 8017594:	697b      	ldr	r3, [r7, #20]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d1d9      	bne.n	801754e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d002      	beq.n	80175a6 <udp_bind+0xd2>
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	e000      	b.n	80175a8 <udp_bind+0xd4>
 80175a6:	2300      	movs	r3, #0
 80175a8:	68fa      	ldr	r2, [r7, #12]
 80175aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	88fa      	ldrh	r2, [r7, #6]
 80175b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80175b2:	7cfb      	ldrb	r3, [r7, #19]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d106      	bne.n	80175c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80175b8:	4b09      	ldr	r3, [pc, #36]	; (80175e0 <udp_bind+0x10c>)
 80175ba:	681a      	ldr	r2, [r3, #0]
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80175c0:	4a07      	ldr	r2, [pc, #28]	; (80175e0 <udp_bind+0x10c>)
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80175c6:	2300      	movs	r3, #0
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3718      	adds	r7, #24
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	0801e8d4 	.word	0x0801e8d4
 80175d4:	0801dd50 	.word	0x0801dd50
 80175d8:	0801e018 	.word	0x0801e018
 80175dc:	0801dda4 	.word	0x0801dda4
 80175e0:	2004f62c 	.word	0x2004f62c

080175e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b084      	sub	sp, #16
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	60f8      	str	r0, [r7, #12]
 80175ec:	60b9      	str	r1, [r7, #8]
 80175ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80175f0:	68fb      	ldr	r3, [r7, #12]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d107      	bne.n	8017606 <udp_recv+0x22>
 80175f6:	4b08      	ldr	r3, [pc, #32]	; (8017618 <udp_recv+0x34>)
 80175f8:	f240 428a 	movw	r2, #1162	; 0x48a
 80175fc:	4907      	ldr	r1, [pc, #28]	; (801761c <udp_recv+0x38>)
 80175fe:	4808      	ldr	r0, [pc, #32]	; (8017620 <udp_recv+0x3c>)
 8017600:	f002 feb8 	bl	801a374 <iprintf>
 8017604:	e005      	b.n	8017612 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	68ba      	ldr	r2, [r7, #8]
 801760a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	61da      	str	r2, [r3, #28]
}
 8017612:	3710      	adds	r7, #16
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}
 8017618:	0801dd50 	.word	0x0801dd50
 801761c:	0801e084 	.word	0x0801e084
 8017620:	0801dda4 	.word	0x0801dda4

08017624 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801762a:	2000      	movs	r0, #0
 801762c:	f7f8 f9dc 	bl	800f9e8 <memp_malloc>
 8017630:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d007      	beq.n	8017648 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017638:	2220      	movs	r2, #32
 801763a:	2100      	movs	r1, #0
 801763c:	6878      	ldr	r0, [r7, #4]
 801763e:	f002 fdfc 	bl	801a23a <memset>
    pcb->ttl = UDP_TTL;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	22ff      	movs	r2, #255	; 0xff
 8017646:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017648:	687b      	ldr	r3, [r7, #4]
}
 801764a:	4618      	mov	r0, r3
 801764c:	3708      	adds	r7, #8
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}

08017652 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8017652:	b580      	push	{r7, lr}
 8017654:	b084      	sub	sp, #16
 8017656:	af00      	add	r7, sp, #0
 8017658:	4603      	mov	r3, r0
 801765a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801765c:	f7ff ffe2 	bl	8017624 <udp_new>
 8017660:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017662:	68fb      	ldr	r3, [r7, #12]
}
 8017664:	4618      	mov	r0, r3
 8017666:	3710      	adds	r7, #16
 8017668:	46bd      	mov	sp, r7
 801766a:	bd80      	pop	{r7, pc}

0801766c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801766c:	b480      	push	{r7}
 801766e:	b085      	sub	sp, #20
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d01e      	beq.n	80176ba <udp_netif_ip_addr_changed+0x4e>
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	2b00      	cmp	r3, #0
 8017682:	d01a      	beq.n	80176ba <udp_netif_ip_addr_changed+0x4e>
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	2b00      	cmp	r3, #0
 8017688:	d017      	beq.n	80176ba <udp_netif_ip_addr_changed+0x4e>
 801768a:	683b      	ldr	r3, [r7, #0]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d013      	beq.n	80176ba <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017692:	4b0d      	ldr	r3, [pc, #52]	; (80176c8 <udp_netif_ip_addr_changed+0x5c>)
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	60fb      	str	r3, [r7, #12]
 8017698:	e00c      	b.n	80176b4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	429a      	cmp	r2, r3
 80176a4:	d103      	bne.n	80176ae <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	681a      	ldr	r2, [r3, #0]
 80176aa:	68fb      	ldr	r3, [r7, #12]
 80176ac:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80176ae:	68fb      	ldr	r3, [r7, #12]
 80176b0:	68db      	ldr	r3, [r3, #12]
 80176b2:	60fb      	str	r3, [r7, #12]
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d1ef      	bne.n	801769a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80176ba:	bf00      	nop
 80176bc:	3714      	adds	r7, #20
 80176be:	46bd      	mov	sp, r7
 80176c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c4:	4770      	bx	lr
 80176c6:	bf00      	nop
 80176c8:	2004f62c 	.word	0x2004f62c

080176cc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80176d4:	4915      	ldr	r1, [pc, #84]	; (801772c <etharp_free_entry+0x60>)
 80176d6:	687a      	ldr	r2, [r7, #4]
 80176d8:	4613      	mov	r3, r2
 80176da:	005b      	lsls	r3, r3, #1
 80176dc:	4413      	add	r3, r2
 80176de:	00db      	lsls	r3, r3, #3
 80176e0:	440b      	add	r3, r1
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d013      	beq.n	8017710 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80176e8:	4910      	ldr	r1, [pc, #64]	; (801772c <etharp_free_entry+0x60>)
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	4613      	mov	r3, r2
 80176ee:	005b      	lsls	r3, r3, #1
 80176f0:	4413      	add	r3, r2
 80176f2:	00db      	lsls	r3, r3, #3
 80176f4:	440b      	add	r3, r1
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	4618      	mov	r0, r3
 80176fa:	f7f9 f88f 	bl	801081c <pbuf_free>
    arp_table[i].q = NULL;
 80176fe:	490b      	ldr	r1, [pc, #44]	; (801772c <etharp_free_entry+0x60>)
 8017700:	687a      	ldr	r2, [r7, #4]
 8017702:	4613      	mov	r3, r2
 8017704:	005b      	lsls	r3, r3, #1
 8017706:	4413      	add	r3, r2
 8017708:	00db      	lsls	r3, r3, #3
 801770a:	440b      	add	r3, r1
 801770c:	2200      	movs	r2, #0
 801770e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017710:	4906      	ldr	r1, [pc, #24]	; (801772c <etharp_free_entry+0x60>)
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	4613      	mov	r3, r2
 8017716:	005b      	lsls	r3, r3, #1
 8017718:	4413      	add	r3, r2
 801771a:	00db      	lsls	r3, r3, #3
 801771c:	440b      	add	r3, r1
 801771e:	3314      	adds	r3, #20
 8017720:	2200      	movs	r2, #0
 8017722:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017724:	bf00      	nop
 8017726:	3708      	adds	r7, #8
 8017728:	46bd      	mov	sp, r7
 801772a:	bd80      	pop	{r7, pc}
 801772c:	2004f630 	.word	0x2004f630

08017730 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017736:	2300      	movs	r3, #0
 8017738:	607b      	str	r3, [r7, #4]
 801773a:	e096      	b.n	801786a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801773c:	494f      	ldr	r1, [pc, #316]	; (801787c <etharp_tmr+0x14c>)
 801773e:	687a      	ldr	r2, [r7, #4]
 8017740:	4613      	mov	r3, r2
 8017742:	005b      	lsls	r3, r3, #1
 8017744:	4413      	add	r3, r2
 8017746:	00db      	lsls	r3, r3, #3
 8017748:	440b      	add	r3, r1
 801774a:	3314      	adds	r3, #20
 801774c:	781b      	ldrb	r3, [r3, #0]
 801774e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017750:	78fb      	ldrb	r3, [r7, #3]
 8017752:	2b00      	cmp	r3, #0
 8017754:	f000 8086 	beq.w	8017864 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017758:	4948      	ldr	r1, [pc, #288]	; (801787c <etharp_tmr+0x14c>)
 801775a:	687a      	ldr	r2, [r7, #4]
 801775c:	4613      	mov	r3, r2
 801775e:	005b      	lsls	r3, r3, #1
 8017760:	4413      	add	r3, r2
 8017762:	00db      	lsls	r3, r3, #3
 8017764:	440b      	add	r3, r1
 8017766:	3312      	adds	r3, #18
 8017768:	881b      	ldrh	r3, [r3, #0]
 801776a:	3301      	adds	r3, #1
 801776c:	b298      	uxth	r0, r3
 801776e:	4943      	ldr	r1, [pc, #268]	; (801787c <etharp_tmr+0x14c>)
 8017770:	687a      	ldr	r2, [r7, #4]
 8017772:	4613      	mov	r3, r2
 8017774:	005b      	lsls	r3, r3, #1
 8017776:	4413      	add	r3, r2
 8017778:	00db      	lsls	r3, r3, #3
 801777a:	440b      	add	r3, r1
 801777c:	3312      	adds	r3, #18
 801777e:	4602      	mov	r2, r0
 8017780:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017782:	493e      	ldr	r1, [pc, #248]	; (801787c <etharp_tmr+0x14c>)
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	4613      	mov	r3, r2
 8017788:	005b      	lsls	r3, r3, #1
 801778a:	4413      	add	r3, r2
 801778c:	00db      	lsls	r3, r3, #3
 801778e:	440b      	add	r3, r1
 8017790:	3312      	adds	r3, #18
 8017792:	881b      	ldrh	r3, [r3, #0]
 8017794:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017798:	d215      	bcs.n	80177c6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801779a:	4938      	ldr	r1, [pc, #224]	; (801787c <etharp_tmr+0x14c>)
 801779c:	687a      	ldr	r2, [r7, #4]
 801779e:	4613      	mov	r3, r2
 80177a0:	005b      	lsls	r3, r3, #1
 80177a2:	4413      	add	r3, r2
 80177a4:	00db      	lsls	r3, r3, #3
 80177a6:	440b      	add	r3, r1
 80177a8:	3314      	adds	r3, #20
 80177aa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80177ac:	2b01      	cmp	r3, #1
 80177ae:	d10e      	bne.n	80177ce <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80177b0:	4932      	ldr	r1, [pc, #200]	; (801787c <etharp_tmr+0x14c>)
 80177b2:	687a      	ldr	r2, [r7, #4]
 80177b4:	4613      	mov	r3, r2
 80177b6:	005b      	lsls	r3, r3, #1
 80177b8:	4413      	add	r3, r2
 80177ba:	00db      	lsls	r3, r3, #3
 80177bc:	440b      	add	r3, r1
 80177be:	3312      	adds	r3, #18
 80177c0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80177c2:	2b04      	cmp	r3, #4
 80177c4:	d903      	bls.n	80177ce <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f7ff ff80 	bl	80176cc <etharp_free_entry>
 80177cc:	e04a      	b.n	8017864 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80177ce:	492b      	ldr	r1, [pc, #172]	; (801787c <etharp_tmr+0x14c>)
 80177d0:	687a      	ldr	r2, [r7, #4]
 80177d2:	4613      	mov	r3, r2
 80177d4:	005b      	lsls	r3, r3, #1
 80177d6:	4413      	add	r3, r2
 80177d8:	00db      	lsls	r3, r3, #3
 80177da:	440b      	add	r3, r1
 80177dc:	3314      	adds	r3, #20
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	2b03      	cmp	r3, #3
 80177e2:	d10a      	bne.n	80177fa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80177e4:	4925      	ldr	r1, [pc, #148]	; (801787c <etharp_tmr+0x14c>)
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	4613      	mov	r3, r2
 80177ea:	005b      	lsls	r3, r3, #1
 80177ec:	4413      	add	r3, r2
 80177ee:	00db      	lsls	r3, r3, #3
 80177f0:	440b      	add	r3, r1
 80177f2:	3314      	adds	r3, #20
 80177f4:	2204      	movs	r2, #4
 80177f6:	701a      	strb	r2, [r3, #0]
 80177f8:	e034      	b.n	8017864 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80177fa:	4920      	ldr	r1, [pc, #128]	; (801787c <etharp_tmr+0x14c>)
 80177fc:	687a      	ldr	r2, [r7, #4]
 80177fe:	4613      	mov	r3, r2
 8017800:	005b      	lsls	r3, r3, #1
 8017802:	4413      	add	r3, r2
 8017804:	00db      	lsls	r3, r3, #3
 8017806:	440b      	add	r3, r1
 8017808:	3314      	adds	r3, #20
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	2b04      	cmp	r3, #4
 801780e:	d10a      	bne.n	8017826 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017810:	491a      	ldr	r1, [pc, #104]	; (801787c <etharp_tmr+0x14c>)
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	4613      	mov	r3, r2
 8017816:	005b      	lsls	r3, r3, #1
 8017818:	4413      	add	r3, r2
 801781a:	00db      	lsls	r3, r3, #3
 801781c:	440b      	add	r3, r1
 801781e:	3314      	adds	r3, #20
 8017820:	2202      	movs	r2, #2
 8017822:	701a      	strb	r2, [r3, #0]
 8017824:	e01e      	b.n	8017864 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017826:	4915      	ldr	r1, [pc, #84]	; (801787c <etharp_tmr+0x14c>)
 8017828:	687a      	ldr	r2, [r7, #4]
 801782a:	4613      	mov	r3, r2
 801782c:	005b      	lsls	r3, r3, #1
 801782e:	4413      	add	r3, r2
 8017830:	00db      	lsls	r3, r3, #3
 8017832:	440b      	add	r3, r1
 8017834:	3314      	adds	r3, #20
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	2b01      	cmp	r3, #1
 801783a:	d113      	bne.n	8017864 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801783c:	490f      	ldr	r1, [pc, #60]	; (801787c <etharp_tmr+0x14c>)
 801783e:	687a      	ldr	r2, [r7, #4]
 8017840:	4613      	mov	r3, r2
 8017842:	005b      	lsls	r3, r3, #1
 8017844:	4413      	add	r3, r2
 8017846:	00db      	lsls	r3, r3, #3
 8017848:	440b      	add	r3, r1
 801784a:	3308      	adds	r3, #8
 801784c:	6818      	ldr	r0, [r3, #0]
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	4613      	mov	r3, r2
 8017852:	005b      	lsls	r3, r3, #1
 8017854:	4413      	add	r3, r2
 8017856:	00db      	lsls	r3, r3, #3
 8017858:	4a08      	ldr	r2, [pc, #32]	; (801787c <etharp_tmr+0x14c>)
 801785a:	4413      	add	r3, r2
 801785c:	3304      	adds	r3, #4
 801785e:	4619      	mov	r1, r3
 8017860:	f000 fe6e 	bl	8018540 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	3301      	adds	r3, #1
 8017868:	607b      	str	r3, [r7, #4]
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	2b09      	cmp	r3, #9
 801786e:	f77f af65 	ble.w	801773c <etharp_tmr+0xc>
      }
    }
  }
}
 8017872:	bf00      	nop
 8017874:	bf00      	nop
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}
 801787c:	2004f630 	.word	0x2004f630

08017880 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017880:	b580      	push	{r7, lr}
 8017882:	b08a      	sub	sp, #40	; 0x28
 8017884:	af00      	add	r7, sp, #0
 8017886:	60f8      	str	r0, [r7, #12]
 8017888:	460b      	mov	r3, r1
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801788e:	230a      	movs	r3, #10
 8017890:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017892:	230a      	movs	r3, #10
 8017894:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017896:	230a      	movs	r3, #10
 8017898:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801789a:	2300      	movs	r3, #0
 801789c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801789e:	230a      	movs	r3, #10
 80178a0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80178a2:	2300      	movs	r3, #0
 80178a4:	83bb      	strh	r3, [r7, #28]
 80178a6:	2300      	movs	r3, #0
 80178a8:	837b      	strh	r3, [r7, #26]
 80178aa:	2300      	movs	r3, #0
 80178ac:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80178ae:	2300      	movs	r3, #0
 80178b0:	843b      	strh	r3, [r7, #32]
 80178b2:	e0ae      	b.n	8017a12 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80178b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178b8:	49a6      	ldr	r1, [pc, #664]	; (8017b54 <etharp_find_entry+0x2d4>)
 80178ba:	4613      	mov	r3, r2
 80178bc:	005b      	lsls	r3, r3, #1
 80178be:	4413      	add	r3, r2
 80178c0:	00db      	lsls	r3, r3, #3
 80178c2:	440b      	add	r3, r1
 80178c4:	3314      	adds	r3, #20
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80178ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178ce:	2b0a      	cmp	r3, #10
 80178d0:	d105      	bne.n	80178de <etharp_find_entry+0x5e>
 80178d2:	7dfb      	ldrb	r3, [r7, #23]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d102      	bne.n	80178de <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80178d8:	8c3b      	ldrh	r3, [r7, #32]
 80178da:	847b      	strh	r3, [r7, #34]	; 0x22
 80178dc:	e095      	b.n	8017a0a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80178de:	7dfb      	ldrb	r3, [r7, #23]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	f000 8092 	beq.w	8017a0a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80178e6:	7dfb      	ldrb	r3, [r7, #23]
 80178e8:	2b01      	cmp	r3, #1
 80178ea:	d009      	beq.n	8017900 <etharp_find_entry+0x80>
 80178ec:	7dfb      	ldrb	r3, [r7, #23]
 80178ee:	2b01      	cmp	r3, #1
 80178f0:	d806      	bhi.n	8017900 <etharp_find_entry+0x80>
 80178f2:	4b99      	ldr	r3, [pc, #612]	; (8017b58 <etharp_find_entry+0x2d8>)
 80178f4:	f240 1223 	movw	r2, #291	; 0x123
 80178f8:	4998      	ldr	r1, [pc, #608]	; (8017b5c <etharp_find_entry+0x2dc>)
 80178fa:	4899      	ldr	r0, [pc, #612]	; (8017b60 <etharp_find_entry+0x2e0>)
 80178fc:	f002 fd3a 	bl	801a374 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	2b00      	cmp	r3, #0
 8017904:	d020      	beq.n	8017948 <etharp_find_entry+0xc8>
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	6819      	ldr	r1, [r3, #0]
 801790a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801790e:	4891      	ldr	r0, [pc, #580]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017910:	4613      	mov	r3, r2
 8017912:	005b      	lsls	r3, r3, #1
 8017914:	4413      	add	r3, r2
 8017916:	00db      	lsls	r3, r3, #3
 8017918:	4403      	add	r3, r0
 801791a:	3304      	adds	r3, #4
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	4299      	cmp	r1, r3
 8017920:	d112      	bne.n	8017948 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d00c      	beq.n	8017942 <etharp_find_entry+0xc2>
 8017928:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801792c:	4989      	ldr	r1, [pc, #548]	; (8017b54 <etharp_find_entry+0x2d4>)
 801792e:	4613      	mov	r3, r2
 8017930:	005b      	lsls	r3, r3, #1
 8017932:	4413      	add	r3, r2
 8017934:	00db      	lsls	r3, r3, #3
 8017936:	440b      	add	r3, r1
 8017938:	3308      	adds	r3, #8
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	687a      	ldr	r2, [r7, #4]
 801793e:	429a      	cmp	r2, r3
 8017940:	d102      	bne.n	8017948 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017946:	e100      	b.n	8017b4a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017948:	7dfb      	ldrb	r3, [r7, #23]
 801794a:	2b01      	cmp	r3, #1
 801794c:	d140      	bne.n	80179d0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801794e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017952:	4980      	ldr	r1, [pc, #512]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017954:	4613      	mov	r3, r2
 8017956:	005b      	lsls	r3, r3, #1
 8017958:	4413      	add	r3, r2
 801795a:	00db      	lsls	r3, r3, #3
 801795c:	440b      	add	r3, r1
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d01a      	beq.n	801799a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017964:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017968:	497a      	ldr	r1, [pc, #488]	; (8017b54 <etharp_find_entry+0x2d4>)
 801796a:	4613      	mov	r3, r2
 801796c:	005b      	lsls	r3, r3, #1
 801796e:	4413      	add	r3, r2
 8017970:	00db      	lsls	r3, r3, #3
 8017972:	440b      	add	r3, r1
 8017974:	3312      	adds	r3, #18
 8017976:	881b      	ldrh	r3, [r3, #0]
 8017978:	8bba      	ldrh	r2, [r7, #28]
 801797a:	429a      	cmp	r2, r3
 801797c:	d845      	bhi.n	8017a0a <etharp_find_entry+0x18a>
            old_queue = i;
 801797e:	8c3b      	ldrh	r3, [r7, #32]
 8017980:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017982:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017986:	4973      	ldr	r1, [pc, #460]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017988:	4613      	mov	r3, r2
 801798a:	005b      	lsls	r3, r3, #1
 801798c:	4413      	add	r3, r2
 801798e:	00db      	lsls	r3, r3, #3
 8017990:	440b      	add	r3, r1
 8017992:	3312      	adds	r3, #18
 8017994:	881b      	ldrh	r3, [r3, #0]
 8017996:	83bb      	strh	r3, [r7, #28]
 8017998:	e037      	b.n	8017a0a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801799a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801799e:	496d      	ldr	r1, [pc, #436]	; (8017b54 <etharp_find_entry+0x2d4>)
 80179a0:	4613      	mov	r3, r2
 80179a2:	005b      	lsls	r3, r3, #1
 80179a4:	4413      	add	r3, r2
 80179a6:	00db      	lsls	r3, r3, #3
 80179a8:	440b      	add	r3, r1
 80179aa:	3312      	adds	r3, #18
 80179ac:	881b      	ldrh	r3, [r3, #0]
 80179ae:	8b7a      	ldrh	r2, [r7, #26]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d82a      	bhi.n	8017a0a <etharp_find_entry+0x18a>
            old_pending = i;
 80179b4:	8c3b      	ldrh	r3, [r7, #32]
 80179b6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80179b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179bc:	4965      	ldr	r1, [pc, #404]	; (8017b54 <etharp_find_entry+0x2d4>)
 80179be:	4613      	mov	r3, r2
 80179c0:	005b      	lsls	r3, r3, #1
 80179c2:	4413      	add	r3, r2
 80179c4:	00db      	lsls	r3, r3, #3
 80179c6:	440b      	add	r3, r1
 80179c8:	3312      	adds	r3, #18
 80179ca:	881b      	ldrh	r3, [r3, #0]
 80179cc:	837b      	strh	r3, [r7, #26]
 80179ce:	e01c      	b.n	8017a0a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80179d0:	7dfb      	ldrb	r3, [r7, #23]
 80179d2:	2b01      	cmp	r3, #1
 80179d4:	d919      	bls.n	8017a0a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80179d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179da:	495e      	ldr	r1, [pc, #376]	; (8017b54 <etharp_find_entry+0x2d4>)
 80179dc:	4613      	mov	r3, r2
 80179de:	005b      	lsls	r3, r3, #1
 80179e0:	4413      	add	r3, r2
 80179e2:	00db      	lsls	r3, r3, #3
 80179e4:	440b      	add	r3, r1
 80179e6:	3312      	adds	r3, #18
 80179e8:	881b      	ldrh	r3, [r3, #0]
 80179ea:	8b3a      	ldrh	r2, [r7, #24]
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d80c      	bhi.n	8017a0a <etharp_find_entry+0x18a>
            old_stable = i;
 80179f0:	8c3b      	ldrh	r3, [r7, #32]
 80179f2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80179f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179f8:	4956      	ldr	r1, [pc, #344]	; (8017b54 <etharp_find_entry+0x2d4>)
 80179fa:	4613      	mov	r3, r2
 80179fc:	005b      	lsls	r3, r3, #1
 80179fe:	4413      	add	r3, r2
 8017a00:	00db      	lsls	r3, r3, #3
 8017a02:	440b      	add	r3, r1
 8017a04:	3312      	adds	r3, #18
 8017a06:	881b      	ldrh	r3, [r3, #0]
 8017a08:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017a0a:	8c3b      	ldrh	r3, [r7, #32]
 8017a0c:	3301      	adds	r3, #1
 8017a0e:	b29b      	uxth	r3, r3
 8017a10:	843b      	strh	r3, [r7, #32]
 8017a12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017a16:	2b09      	cmp	r3, #9
 8017a18:	f77f af4c 	ble.w	80178b4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017a1c:	7afb      	ldrb	r3, [r7, #11]
 8017a1e:	f003 0302 	and.w	r3, r3, #2
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d108      	bne.n	8017a38 <etharp_find_entry+0x1b8>
 8017a26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017a2a:	2b0a      	cmp	r3, #10
 8017a2c:	d107      	bne.n	8017a3e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017a2e:	7afb      	ldrb	r3, [r7, #11]
 8017a30:	f003 0301 	and.w	r3, r3, #1
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d102      	bne.n	8017a3e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a3c:	e085      	b.n	8017b4a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017a3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017a42:	2b09      	cmp	r3, #9
 8017a44:	dc02      	bgt.n	8017a4c <etharp_find_entry+0x1cc>
    i = empty;
 8017a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a48:	843b      	strh	r3, [r7, #32]
 8017a4a:	e039      	b.n	8017ac0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017a4c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017a50:	2b09      	cmp	r3, #9
 8017a52:	dc14      	bgt.n	8017a7e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017a54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a56:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017a58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017a5c:	493d      	ldr	r1, [pc, #244]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017a5e:	4613      	mov	r3, r2
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	4413      	add	r3, r2
 8017a64:	00db      	lsls	r3, r3, #3
 8017a66:	440b      	add	r3, r1
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d018      	beq.n	8017aa0 <etharp_find_entry+0x220>
 8017a6e:	4b3a      	ldr	r3, [pc, #232]	; (8017b58 <etharp_find_entry+0x2d8>)
 8017a70:	f240 126d 	movw	r2, #365	; 0x16d
 8017a74:	493b      	ldr	r1, [pc, #236]	; (8017b64 <etharp_find_entry+0x2e4>)
 8017a76:	483a      	ldr	r0, [pc, #232]	; (8017b60 <etharp_find_entry+0x2e0>)
 8017a78:	f002 fc7c 	bl	801a374 <iprintf>
 8017a7c:	e010      	b.n	8017aa0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017a7e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017a82:	2b09      	cmp	r3, #9
 8017a84:	dc02      	bgt.n	8017a8c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017a86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017a88:	843b      	strh	r3, [r7, #32]
 8017a8a:	e009      	b.n	8017aa0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017a8c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017a90:	2b09      	cmp	r3, #9
 8017a92:	dc02      	bgt.n	8017a9a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017a94:	8bfb      	ldrh	r3, [r7, #30]
 8017a96:	843b      	strh	r3, [r7, #32]
 8017a98:	e002      	b.n	8017aa0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a9e:	e054      	b.n	8017b4a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017aa0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017aa4:	2b09      	cmp	r3, #9
 8017aa6:	dd06      	ble.n	8017ab6 <etharp_find_entry+0x236>
 8017aa8:	4b2b      	ldr	r3, [pc, #172]	; (8017b58 <etharp_find_entry+0x2d8>)
 8017aaa:	f240 127f 	movw	r2, #383	; 0x17f
 8017aae:	492e      	ldr	r1, [pc, #184]	; (8017b68 <etharp_find_entry+0x2e8>)
 8017ab0:	482b      	ldr	r0, [pc, #172]	; (8017b60 <etharp_find_entry+0x2e0>)
 8017ab2:	f002 fc5f 	bl	801a374 <iprintf>
    etharp_free_entry(i);
 8017ab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017aba:	4618      	mov	r0, r3
 8017abc:	f7ff fe06 	bl	80176cc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017ac0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017ac4:	2b09      	cmp	r3, #9
 8017ac6:	dd06      	ble.n	8017ad6 <etharp_find_entry+0x256>
 8017ac8:	4b23      	ldr	r3, [pc, #140]	; (8017b58 <etharp_find_entry+0x2d8>)
 8017aca:	f240 1283 	movw	r2, #387	; 0x183
 8017ace:	4926      	ldr	r1, [pc, #152]	; (8017b68 <etharp_find_entry+0x2e8>)
 8017ad0:	4823      	ldr	r0, [pc, #140]	; (8017b60 <etharp_find_entry+0x2e0>)
 8017ad2:	f002 fc4f 	bl	801a374 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017ad6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017ada:	491e      	ldr	r1, [pc, #120]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017adc:	4613      	mov	r3, r2
 8017ade:	005b      	lsls	r3, r3, #1
 8017ae0:	4413      	add	r3, r2
 8017ae2:	00db      	lsls	r3, r3, #3
 8017ae4:	440b      	add	r3, r1
 8017ae6:	3314      	adds	r3, #20
 8017ae8:	781b      	ldrb	r3, [r3, #0]
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d006      	beq.n	8017afc <etharp_find_entry+0x27c>
 8017aee:	4b1a      	ldr	r3, [pc, #104]	; (8017b58 <etharp_find_entry+0x2d8>)
 8017af0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017af4:	491d      	ldr	r1, [pc, #116]	; (8017b6c <etharp_find_entry+0x2ec>)
 8017af6:	481a      	ldr	r0, [pc, #104]	; (8017b60 <etharp_find_entry+0x2e0>)
 8017af8:	f002 fc3c 	bl	801a374 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d00b      	beq.n	8017b1a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017b02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	6819      	ldr	r1, [r3, #0]
 8017b0a:	4812      	ldr	r0, [pc, #72]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	005b      	lsls	r3, r3, #1
 8017b10:	4413      	add	r3, r2
 8017b12:	00db      	lsls	r3, r3, #3
 8017b14:	4403      	add	r3, r0
 8017b16:	3304      	adds	r3, #4
 8017b18:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017b1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b1e:	490d      	ldr	r1, [pc, #52]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017b20:	4613      	mov	r3, r2
 8017b22:	005b      	lsls	r3, r3, #1
 8017b24:	4413      	add	r3, r2
 8017b26:	00db      	lsls	r3, r3, #3
 8017b28:	440b      	add	r3, r1
 8017b2a:	3312      	adds	r3, #18
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017b30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b34:	4907      	ldr	r1, [pc, #28]	; (8017b54 <etharp_find_entry+0x2d4>)
 8017b36:	4613      	mov	r3, r2
 8017b38:	005b      	lsls	r3, r3, #1
 8017b3a:	4413      	add	r3, r2
 8017b3c:	00db      	lsls	r3, r3, #3
 8017b3e:	440b      	add	r3, r1
 8017b40:	3308      	adds	r3, #8
 8017b42:	687a      	ldr	r2, [r7, #4]
 8017b44:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017b46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	3728      	adds	r7, #40	; 0x28
 8017b4e:	46bd      	mov	sp, r7
 8017b50:	bd80      	pop	{r7, pc}
 8017b52:	bf00      	nop
 8017b54:	2004f630 	.word	0x2004f630
 8017b58:	0801e0b4 	.word	0x0801e0b4
 8017b5c:	0801e0ec 	.word	0x0801e0ec
 8017b60:	0801e12c 	.word	0x0801e12c
 8017b64:	0801e154 	.word	0x0801e154
 8017b68:	0801e16c 	.word	0x0801e16c
 8017b6c:	0801e180 	.word	0x0801e180

08017b70 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b088      	sub	sp, #32
 8017b74:	af02      	add	r7, sp, #8
 8017b76:	60f8      	str	r0, [r7, #12]
 8017b78:	60b9      	str	r1, [r7, #8]
 8017b7a:	607a      	str	r2, [r7, #4]
 8017b7c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017b84:	2b06      	cmp	r3, #6
 8017b86:	d006      	beq.n	8017b96 <etharp_update_arp_entry+0x26>
 8017b88:	4b48      	ldr	r3, [pc, #288]	; (8017cac <etharp_update_arp_entry+0x13c>)
 8017b8a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017b8e:	4948      	ldr	r1, [pc, #288]	; (8017cb0 <etharp_update_arp_entry+0x140>)
 8017b90:	4848      	ldr	r0, [pc, #288]	; (8017cb4 <etharp_update_arp_entry+0x144>)
 8017b92:	f002 fbef 	bl	801a374 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017b96:	68bb      	ldr	r3, [r7, #8]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d012      	beq.n	8017bc2 <etharp_update_arp_entry+0x52>
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d00e      	beq.n	8017bc2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ba4:	68bb      	ldr	r3, [r7, #8]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	68f9      	ldr	r1, [r7, #12]
 8017baa:	4618      	mov	r0, r3
 8017bac:	f001 f8fe 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8017bb0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d105      	bne.n	8017bc2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017bb6:	68bb      	ldr	r3, [r7, #8]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017bbe:	2be0      	cmp	r3, #224	; 0xe0
 8017bc0:	d102      	bne.n	8017bc8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017bc2:	f06f 030f 	mvn.w	r3, #15
 8017bc6:	e06c      	b.n	8017ca2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017bc8:	78fb      	ldrb	r3, [r7, #3]
 8017bca:	68fa      	ldr	r2, [r7, #12]
 8017bcc:	4619      	mov	r1, r3
 8017bce:	68b8      	ldr	r0, [r7, #8]
 8017bd0:	f7ff fe56 	bl	8017880 <etharp_find_entry>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	da02      	bge.n	8017be6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017be0:	8afb      	ldrh	r3, [r7, #22]
 8017be2:	b25b      	sxtb	r3, r3
 8017be4:	e05d      	b.n	8017ca2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017be6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017bea:	4933      	ldr	r1, [pc, #204]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017bec:	4613      	mov	r3, r2
 8017bee:	005b      	lsls	r3, r3, #1
 8017bf0:	4413      	add	r3, r2
 8017bf2:	00db      	lsls	r3, r3, #3
 8017bf4:	440b      	add	r3, r1
 8017bf6:	3314      	adds	r3, #20
 8017bf8:	2202      	movs	r2, #2
 8017bfa:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017bfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c00:	492d      	ldr	r1, [pc, #180]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017c02:	4613      	mov	r3, r2
 8017c04:	005b      	lsls	r3, r3, #1
 8017c06:	4413      	add	r3, r2
 8017c08:	00db      	lsls	r3, r3, #3
 8017c0a:	440b      	add	r3, r1
 8017c0c:	3308      	adds	r3, #8
 8017c0e:	68fa      	ldr	r2, [r7, #12]
 8017c10:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017c12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c16:	4613      	mov	r3, r2
 8017c18:	005b      	lsls	r3, r3, #1
 8017c1a:	4413      	add	r3, r2
 8017c1c:	00db      	lsls	r3, r3, #3
 8017c1e:	3308      	adds	r3, #8
 8017c20:	4a25      	ldr	r2, [pc, #148]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017c22:	4413      	add	r3, r2
 8017c24:	3304      	adds	r3, #4
 8017c26:	2206      	movs	r2, #6
 8017c28:	6879      	ldr	r1, [r7, #4]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f002 faf7 	bl	801a21e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017c30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c34:	4920      	ldr	r1, [pc, #128]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017c36:	4613      	mov	r3, r2
 8017c38:	005b      	lsls	r3, r3, #1
 8017c3a:	4413      	add	r3, r2
 8017c3c:	00db      	lsls	r3, r3, #3
 8017c3e:	440b      	add	r3, r1
 8017c40:	3312      	adds	r3, #18
 8017c42:	2200      	movs	r2, #0
 8017c44:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017c46:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c4a:	491b      	ldr	r1, [pc, #108]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017c4c:	4613      	mov	r3, r2
 8017c4e:	005b      	lsls	r3, r3, #1
 8017c50:	4413      	add	r3, r2
 8017c52:	00db      	lsls	r3, r3, #3
 8017c54:	440b      	add	r3, r1
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d021      	beq.n	8017ca0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017c5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c60:	4915      	ldr	r1, [pc, #84]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017c62:	4613      	mov	r3, r2
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	4413      	add	r3, r2
 8017c68:	00db      	lsls	r3, r3, #3
 8017c6a:	440b      	add	r3, r1
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017c70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017c74:	4910      	ldr	r1, [pc, #64]	; (8017cb8 <etharp_update_arp_entry+0x148>)
 8017c76:	4613      	mov	r3, r2
 8017c78:	005b      	lsls	r3, r3, #1
 8017c7a:	4413      	add	r3, r2
 8017c7c:	00db      	lsls	r3, r3, #3
 8017c7e:	440b      	add	r3, r1
 8017c80:	2200      	movs	r2, #0
 8017c82:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017c8e:	9300      	str	r3, [sp, #0]
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6939      	ldr	r1, [r7, #16]
 8017c94:	68f8      	ldr	r0, [r7, #12]
 8017c96:	f001 ff97 	bl	8019bc8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017c9a:	6938      	ldr	r0, [r7, #16]
 8017c9c:	f7f8 fdbe 	bl	801081c <pbuf_free>
  }
  return ERR_OK;
 8017ca0:	2300      	movs	r3, #0
}
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	3718      	adds	r7, #24
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	0801e0b4 	.word	0x0801e0b4
 8017cb0:	0801e1ac 	.word	0x0801e1ac
 8017cb4:	0801e12c 	.word	0x0801e12c
 8017cb8:	2004f630 	.word	0x2004f630

08017cbc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017cc4:	2300      	movs	r3, #0
 8017cc6:	60fb      	str	r3, [r7, #12]
 8017cc8:	e01e      	b.n	8017d08 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017cca:	4913      	ldr	r1, [pc, #76]	; (8017d18 <etharp_cleanup_netif+0x5c>)
 8017ccc:	68fa      	ldr	r2, [r7, #12]
 8017cce:	4613      	mov	r3, r2
 8017cd0:	005b      	lsls	r3, r3, #1
 8017cd2:	4413      	add	r3, r2
 8017cd4:	00db      	lsls	r3, r3, #3
 8017cd6:	440b      	add	r3, r1
 8017cd8:	3314      	adds	r3, #20
 8017cda:	781b      	ldrb	r3, [r3, #0]
 8017cdc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017cde:	7afb      	ldrb	r3, [r7, #11]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d00e      	beq.n	8017d02 <etharp_cleanup_netif+0x46>
 8017ce4:	490c      	ldr	r1, [pc, #48]	; (8017d18 <etharp_cleanup_netif+0x5c>)
 8017ce6:	68fa      	ldr	r2, [r7, #12]
 8017ce8:	4613      	mov	r3, r2
 8017cea:	005b      	lsls	r3, r3, #1
 8017cec:	4413      	add	r3, r2
 8017cee:	00db      	lsls	r3, r3, #3
 8017cf0:	440b      	add	r3, r1
 8017cf2:	3308      	adds	r3, #8
 8017cf4:	681b      	ldr	r3, [r3, #0]
 8017cf6:	687a      	ldr	r2, [r7, #4]
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d102      	bne.n	8017d02 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017cfc:	68f8      	ldr	r0, [r7, #12]
 8017cfe:	f7ff fce5 	bl	80176cc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	3301      	adds	r3, #1
 8017d06:	60fb      	str	r3, [r7, #12]
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	2b09      	cmp	r3, #9
 8017d0c:	dddd      	ble.n	8017cca <etharp_cleanup_netif+0xe>
    }
  }
}
 8017d0e:	bf00      	nop
 8017d10:	bf00      	nop
 8017d12:	3710      	adds	r7, #16
 8017d14:	46bd      	mov	sp, r7
 8017d16:	bd80      	pop	{r7, pc}
 8017d18:	2004f630 	.word	0x2004f630

08017d1c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017d1c:	b5b0      	push	{r4, r5, r7, lr}
 8017d1e:	b08a      	sub	sp, #40	; 0x28
 8017d20:	af04      	add	r7, sp, #16
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d107      	bne.n	8017d3c <etharp_input+0x20>
 8017d2c:	4b3d      	ldr	r3, [pc, #244]	; (8017e24 <etharp_input+0x108>)
 8017d2e:	f240 228a 	movw	r2, #650	; 0x28a
 8017d32:	493d      	ldr	r1, [pc, #244]	; (8017e28 <etharp_input+0x10c>)
 8017d34:	483d      	ldr	r0, [pc, #244]	; (8017e2c <etharp_input+0x110>)
 8017d36:	f002 fb1d 	bl	801a374 <iprintf>
 8017d3a:	e06f      	b.n	8017e1c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	685b      	ldr	r3, [r3, #4]
 8017d40:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	881b      	ldrh	r3, [r3, #0]
 8017d46:	b29b      	uxth	r3, r3
 8017d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d4c:	d10c      	bne.n	8017d68 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017d52:	2b06      	cmp	r3, #6
 8017d54:	d108      	bne.n	8017d68 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017d56:	693b      	ldr	r3, [r7, #16]
 8017d58:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017d5a:	2b04      	cmp	r3, #4
 8017d5c:	d104      	bne.n	8017d68 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017d5e:	693b      	ldr	r3, [r7, #16]
 8017d60:	885b      	ldrh	r3, [r3, #2]
 8017d62:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017d64:	2b08      	cmp	r3, #8
 8017d66:	d003      	beq.n	8017d70 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7f8 fd57 	bl	801081c <pbuf_free>
    return;
 8017d6e:	e055      	b.n	8017e1c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	330e      	adds	r3, #14
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017d78:	693b      	ldr	r3, [r7, #16]
 8017d7a:	3318      	adds	r3, #24
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	3304      	adds	r3, #4
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d102      	bne.n	8017d90 <etharp_input+0x74>
    for_us = 0;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	75fb      	strb	r3, [r7, #23]
 8017d8e:	e009      	b.n	8017da4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017d90:	68ba      	ldr	r2, [r7, #8]
 8017d92:	683b      	ldr	r3, [r7, #0]
 8017d94:	3304      	adds	r3, #4
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	bf0c      	ite	eq
 8017d9c:	2301      	moveq	r3, #1
 8017d9e:	2300      	movne	r3, #0
 8017da0:	b2db      	uxtb	r3, r3
 8017da2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017da4:	693b      	ldr	r3, [r7, #16]
 8017da6:	f103 0208 	add.w	r2, r3, #8
 8017daa:	7dfb      	ldrb	r3, [r7, #23]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d001      	beq.n	8017db4 <etharp_input+0x98>
 8017db0:	2301      	movs	r3, #1
 8017db2:	e000      	b.n	8017db6 <etharp_input+0x9a>
 8017db4:	2302      	movs	r3, #2
 8017db6:	f107 010c 	add.w	r1, r7, #12
 8017dba:	6838      	ldr	r0, [r7, #0]
 8017dbc:	f7ff fed8 	bl	8017b70 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017dc0:	693b      	ldr	r3, [r7, #16]
 8017dc2:	88db      	ldrh	r3, [r3, #6]
 8017dc4:	b29b      	uxth	r3, r3
 8017dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017dca:	d003      	beq.n	8017dd4 <etharp_input+0xb8>
 8017dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017dd0:	d01e      	beq.n	8017e10 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017dd2:	e020      	b.n	8017e16 <etharp_input+0xfa>
      if (for_us) {
 8017dd4:	7dfb      	ldrb	r3, [r7, #23]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d01c      	beq.n	8017e14 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017de0:	693b      	ldr	r3, [r7, #16]
 8017de2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017de6:	683b      	ldr	r3, [r7, #0]
 8017de8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017df0:	693a      	ldr	r2, [r7, #16]
 8017df2:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017df4:	2102      	movs	r1, #2
 8017df6:	9103      	str	r1, [sp, #12]
 8017df8:	f107 010c 	add.w	r1, r7, #12
 8017dfc:	9102      	str	r1, [sp, #8]
 8017dfe:	9201      	str	r2, [sp, #4]
 8017e00:	9300      	str	r3, [sp, #0]
 8017e02:	462b      	mov	r3, r5
 8017e04:	4622      	mov	r2, r4
 8017e06:	4601      	mov	r1, r0
 8017e08:	6838      	ldr	r0, [r7, #0]
 8017e0a:	f000 faeb 	bl	80183e4 <etharp_raw>
      break;
 8017e0e:	e001      	b.n	8017e14 <etharp_input+0xf8>
      break;
 8017e10:	bf00      	nop
 8017e12:	e000      	b.n	8017e16 <etharp_input+0xfa>
      break;
 8017e14:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017e16:	6878      	ldr	r0, [r7, #4]
 8017e18:	f7f8 fd00 	bl	801081c <pbuf_free>
}
 8017e1c:	3718      	adds	r7, #24
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bdb0      	pop	{r4, r5, r7, pc}
 8017e22:	bf00      	nop
 8017e24:	0801e0b4 	.word	0x0801e0b4
 8017e28:	0801e204 	.word	0x0801e204
 8017e2c:	0801e12c 	.word	0x0801e12c

08017e30 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b086      	sub	sp, #24
 8017e34:	af02      	add	r7, sp, #8
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	4613      	mov	r3, r2
 8017e3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017e3e:	79fa      	ldrb	r2, [r7, #7]
 8017e40:	4944      	ldr	r1, [pc, #272]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017e42:	4613      	mov	r3, r2
 8017e44:	005b      	lsls	r3, r3, #1
 8017e46:	4413      	add	r3, r2
 8017e48:	00db      	lsls	r3, r3, #3
 8017e4a:	440b      	add	r3, r1
 8017e4c:	3314      	adds	r3, #20
 8017e4e:	781b      	ldrb	r3, [r3, #0]
 8017e50:	2b01      	cmp	r3, #1
 8017e52:	d806      	bhi.n	8017e62 <etharp_output_to_arp_index+0x32>
 8017e54:	4b40      	ldr	r3, [pc, #256]	; (8017f58 <etharp_output_to_arp_index+0x128>)
 8017e56:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017e5a:	4940      	ldr	r1, [pc, #256]	; (8017f5c <etharp_output_to_arp_index+0x12c>)
 8017e5c:	4840      	ldr	r0, [pc, #256]	; (8017f60 <etharp_output_to_arp_index+0x130>)
 8017e5e:	f002 fa89 	bl	801a374 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017e62:	79fa      	ldrb	r2, [r7, #7]
 8017e64:	493b      	ldr	r1, [pc, #236]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017e66:	4613      	mov	r3, r2
 8017e68:	005b      	lsls	r3, r3, #1
 8017e6a:	4413      	add	r3, r2
 8017e6c:	00db      	lsls	r3, r3, #3
 8017e6e:	440b      	add	r3, r1
 8017e70:	3314      	adds	r3, #20
 8017e72:	781b      	ldrb	r3, [r3, #0]
 8017e74:	2b02      	cmp	r3, #2
 8017e76:	d153      	bne.n	8017f20 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017e78:	79fa      	ldrb	r2, [r7, #7]
 8017e7a:	4936      	ldr	r1, [pc, #216]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017e7c:	4613      	mov	r3, r2
 8017e7e:	005b      	lsls	r3, r3, #1
 8017e80:	4413      	add	r3, r2
 8017e82:	00db      	lsls	r3, r3, #3
 8017e84:	440b      	add	r3, r1
 8017e86:	3312      	adds	r3, #18
 8017e88:	881b      	ldrh	r3, [r3, #0]
 8017e8a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017e8e:	d919      	bls.n	8017ec4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017e90:	79fa      	ldrb	r2, [r7, #7]
 8017e92:	4613      	mov	r3, r2
 8017e94:	005b      	lsls	r3, r3, #1
 8017e96:	4413      	add	r3, r2
 8017e98:	00db      	lsls	r3, r3, #3
 8017e9a:	4a2e      	ldr	r2, [pc, #184]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017e9c:	4413      	add	r3, r2
 8017e9e:	3304      	adds	r3, #4
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	68f8      	ldr	r0, [r7, #12]
 8017ea4:	f000 fb4c 	bl	8018540 <etharp_request>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d138      	bne.n	8017f20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017eae:	79fa      	ldrb	r2, [r7, #7]
 8017eb0:	4928      	ldr	r1, [pc, #160]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	005b      	lsls	r3, r3, #1
 8017eb6:	4413      	add	r3, r2
 8017eb8:	00db      	lsls	r3, r3, #3
 8017eba:	440b      	add	r3, r1
 8017ebc:	3314      	adds	r3, #20
 8017ebe:	2203      	movs	r2, #3
 8017ec0:	701a      	strb	r2, [r3, #0]
 8017ec2:	e02d      	b.n	8017f20 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017ec4:	79fa      	ldrb	r2, [r7, #7]
 8017ec6:	4923      	ldr	r1, [pc, #140]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017ec8:	4613      	mov	r3, r2
 8017eca:	005b      	lsls	r3, r3, #1
 8017ecc:	4413      	add	r3, r2
 8017ece:	00db      	lsls	r3, r3, #3
 8017ed0:	440b      	add	r3, r1
 8017ed2:	3312      	adds	r3, #18
 8017ed4:	881b      	ldrh	r3, [r3, #0]
 8017ed6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017eda:	d321      	bcc.n	8017f20 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017edc:	79fa      	ldrb	r2, [r7, #7]
 8017ede:	4613      	mov	r3, r2
 8017ee0:	005b      	lsls	r3, r3, #1
 8017ee2:	4413      	add	r3, r2
 8017ee4:	00db      	lsls	r3, r3, #3
 8017ee6:	4a1b      	ldr	r2, [pc, #108]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017ee8:	4413      	add	r3, r2
 8017eea:	1d19      	adds	r1, r3, #4
 8017eec:	79fa      	ldrb	r2, [r7, #7]
 8017eee:	4613      	mov	r3, r2
 8017ef0:	005b      	lsls	r3, r3, #1
 8017ef2:	4413      	add	r3, r2
 8017ef4:	00db      	lsls	r3, r3, #3
 8017ef6:	3308      	adds	r3, #8
 8017ef8:	4a16      	ldr	r2, [pc, #88]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017efa:	4413      	add	r3, r2
 8017efc:	3304      	adds	r3, #4
 8017efe:	461a      	mov	r2, r3
 8017f00:	68f8      	ldr	r0, [r7, #12]
 8017f02:	f000 fafb 	bl	80184fc <etharp_request_dst>
 8017f06:	4603      	mov	r3, r0
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d109      	bne.n	8017f20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017f0c:	79fa      	ldrb	r2, [r7, #7]
 8017f0e:	4911      	ldr	r1, [pc, #68]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017f10:	4613      	mov	r3, r2
 8017f12:	005b      	lsls	r3, r3, #1
 8017f14:	4413      	add	r3, r2
 8017f16:	00db      	lsls	r3, r3, #3
 8017f18:	440b      	add	r3, r1
 8017f1a:	3314      	adds	r3, #20
 8017f1c:	2203      	movs	r2, #3
 8017f1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8017f26:	79fa      	ldrb	r2, [r7, #7]
 8017f28:	4613      	mov	r3, r2
 8017f2a:	005b      	lsls	r3, r3, #1
 8017f2c:	4413      	add	r3, r2
 8017f2e:	00db      	lsls	r3, r3, #3
 8017f30:	3308      	adds	r3, #8
 8017f32:	4a08      	ldr	r2, [pc, #32]	; (8017f54 <etharp_output_to_arp_index+0x124>)
 8017f34:	4413      	add	r3, r2
 8017f36:	3304      	adds	r3, #4
 8017f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017f3c:	9200      	str	r2, [sp, #0]
 8017f3e:	460a      	mov	r2, r1
 8017f40:	68b9      	ldr	r1, [r7, #8]
 8017f42:	68f8      	ldr	r0, [r7, #12]
 8017f44:	f001 fe40 	bl	8019bc8 <ethernet_output>
 8017f48:	4603      	mov	r3, r0
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3710      	adds	r7, #16
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd80      	pop	{r7, pc}
 8017f52:	bf00      	nop
 8017f54:	2004f630 	.word	0x2004f630
 8017f58:	0801e0b4 	.word	0x0801e0b4
 8017f5c:	0801e224 	.word	0x0801e224
 8017f60:	0801e12c 	.word	0x0801e12c

08017f64 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017f64:	b580      	push	{r7, lr}
 8017f66:	b08a      	sub	sp, #40	; 0x28
 8017f68:	af02      	add	r7, sp, #8
 8017f6a:	60f8      	str	r0, [r7, #12]
 8017f6c:	60b9      	str	r1, [r7, #8]
 8017f6e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017f74:	68fb      	ldr	r3, [r7, #12]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d106      	bne.n	8017f88 <etharp_output+0x24>
 8017f7a:	4b73      	ldr	r3, [pc, #460]	; (8018148 <etharp_output+0x1e4>)
 8017f7c:	f240 321e 	movw	r2, #798	; 0x31e
 8017f80:	4972      	ldr	r1, [pc, #456]	; (801814c <etharp_output+0x1e8>)
 8017f82:	4873      	ldr	r0, [pc, #460]	; (8018150 <etharp_output+0x1ec>)
 8017f84:	f002 f9f6 	bl	801a374 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d106      	bne.n	8017f9c <etharp_output+0x38>
 8017f8e:	4b6e      	ldr	r3, [pc, #440]	; (8018148 <etharp_output+0x1e4>)
 8017f90:	f240 321f 	movw	r2, #799	; 0x31f
 8017f94:	496f      	ldr	r1, [pc, #444]	; (8018154 <etharp_output+0x1f0>)
 8017f96:	486e      	ldr	r0, [pc, #440]	; (8018150 <etharp_output+0x1ec>)
 8017f98:	f002 f9ec 	bl	801a374 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d106      	bne.n	8017fb0 <etharp_output+0x4c>
 8017fa2:	4b69      	ldr	r3, [pc, #420]	; (8018148 <etharp_output+0x1e4>)
 8017fa4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017fa8:	496b      	ldr	r1, [pc, #428]	; (8018158 <etharp_output+0x1f4>)
 8017faa:	4869      	ldr	r0, [pc, #420]	; (8018150 <etharp_output+0x1ec>)
 8017fac:	f002 f9e2 	bl	801a374 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	68f9      	ldr	r1, [r7, #12]
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f000 fef8 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d002      	beq.n	8017fc8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017fc2:	4b66      	ldr	r3, [pc, #408]	; (801815c <etharp_output+0x1f8>)
 8017fc4:	61fb      	str	r3, [r7, #28]
 8017fc6:	e0af      	b.n	8018128 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017fd0:	2be0      	cmp	r3, #224	; 0xe0
 8017fd2:	d118      	bne.n	8018006 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017fd4:	2301      	movs	r3, #1
 8017fd6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017fd8:	2300      	movs	r3, #0
 8017fda:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017fdc:	235e      	movs	r3, #94	; 0x5e
 8017fde:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	3301      	adds	r3, #1
 8017fe4:	781b      	ldrb	r3, [r3, #0]
 8017fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	3302      	adds	r3, #2
 8017ff2:	781b      	ldrb	r3, [r3, #0]
 8017ff4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	3303      	adds	r3, #3
 8017ffa:	781b      	ldrb	r3, [r3, #0]
 8017ffc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017ffe:	f107 0310 	add.w	r3, r7, #16
 8018002:	61fb      	str	r3, [r7, #28]
 8018004:	e090      	b.n	8018128 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	681a      	ldr	r2, [r3, #0]
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	3304      	adds	r3, #4
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	405a      	eors	r2, r3
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	3308      	adds	r3, #8
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4013      	ands	r3, r2
 801801a:	2b00      	cmp	r3, #0
 801801c:	d012      	beq.n	8018044 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018024:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018028:	4293      	cmp	r3, r2
 801802a:	d00b      	beq.n	8018044 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	330c      	adds	r3, #12
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d003      	beq.n	801803e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	330c      	adds	r3, #12
 801803a:	61bb      	str	r3, [r7, #24]
 801803c:	e002      	b.n	8018044 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801803e:	f06f 0303 	mvn.w	r3, #3
 8018042:	e07d      	b.n	8018140 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018044:	4b46      	ldr	r3, [pc, #280]	; (8018160 <etharp_output+0x1fc>)
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	4619      	mov	r1, r3
 801804a:	4a46      	ldr	r2, [pc, #280]	; (8018164 <etharp_output+0x200>)
 801804c:	460b      	mov	r3, r1
 801804e:	005b      	lsls	r3, r3, #1
 8018050:	440b      	add	r3, r1
 8018052:	00db      	lsls	r3, r3, #3
 8018054:	4413      	add	r3, r2
 8018056:	3314      	adds	r3, #20
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	2b01      	cmp	r3, #1
 801805c:	d925      	bls.n	80180aa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801805e:	4b40      	ldr	r3, [pc, #256]	; (8018160 <etharp_output+0x1fc>)
 8018060:	781b      	ldrb	r3, [r3, #0]
 8018062:	4619      	mov	r1, r3
 8018064:	4a3f      	ldr	r2, [pc, #252]	; (8018164 <etharp_output+0x200>)
 8018066:	460b      	mov	r3, r1
 8018068:	005b      	lsls	r3, r3, #1
 801806a:	440b      	add	r3, r1
 801806c:	00db      	lsls	r3, r3, #3
 801806e:	4413      	add	r3, r2
 8018070:	3308      	adds	r3, #8
 8018072:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018074:	68fa      	ldr	r2, [r7, #12]
 8018076:	429a      	cmp	r2, r3
 8018078:	d117      	bne.n	80180aa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801807a:	69bb      	ldr	r3, [r7, #24]
 801807c:	681a      	ldr	r2, [r3, #0]
 801807e:	4b38      	ldr	r3, [pc, #224]	; (8018160 <etharp_output+0x1fc>)
 8018080:	781b      	ldrb	r3, [r3, #0]
 8018082:	4618      	mov	r0, r3
 8018084:	4937      	ldr	r1, [pc, #220]	; (8018164 <etharp_output+0x200>)
 8018086:	4603      	mov	r3, r0
 8018088:	005b      	lsls	r3, r3, #1
 801808a:	4403      	add	r3, r0
 801808c:	00db      	lsls	r3, r3, #3
 801808e:	440b      	add	r3, r1
 8018090:	3304      	adds	r3, #4
 8018092:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018094:	429a      	cmp	r2, r3
 8018096:	d108      	bne.n	80180aa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018098:	4b31      	ldr	r3, [pc, #196]	; (8018160 <etharp_output+0x1fc>)
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	461a      	mov	r2, r3
 801809e:	68b9      	ldr	r1, [r7, #8]
 80180a0:	68f8      	ldr	r0, [r7, #12]
 80180a2:	f7ff fec5 	bl	8017e30 <etharp_output_to_arp_index>
 80180a6:	4603      	mov	r3, r0
 80180a8:	e04a      	b.n	8018140 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80180aa:	2300      	movs	r3, #0
 80180ac:	75fb      	strb	r3, [r7, #23]
 80180ae:	e031      	b.n	8018114 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80180b0:	7dfa      	ldrb	r2, [r7, #23]
 80180b2:	492c      	ldr	r1, [pc, #176]	; (8018164 <etharp_output+0x200>)
 80180b4:	4613      	mov	r3, r2
 80180b6:	005b      	lsls	r3, r3, #1
 80180b8:	4413      	add	r3, r2
 80180ba:	00db      	lsls	r3, r3, #3
 80180bc:	440b      	add	r3, r1
 80180be:	3314      	adds	r3, #20
 80180c0:	781b      	ldrb	r3, [r3, #0]
 80180c2:	2b01      	cmp	r3, #1
 80180c4:	d923      	bls.n	801810e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80180c6:	7dfa      	ldrb	r2, [r7, #23]
 80180c8:	4926      	ldr	r1, [pc, #152]	; (8018164 <etharp_output+0x200>)
 80180ca:	4613      	mov	r3, r2
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	4413      	add	r3, r2
 80180d0:	00db      	lsls	r3, r3, #3
 80180d2:	440b      	add	r3, r1
 80180d4:	3308      	adds	r3, #8
 80180d6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80180d8:	68fa      	ldr	r2, [r7, #12]
 80180da:	429a      	cmp	r2, r3
 80180dc:	d117      	bne.n	801810e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80180de:	69bb      	ldr	r3, [r7, #24]
 80180e0:	6819      	ldr	r1, [r3, #0]
 80180e2:	7dfa      	ldrb	r2, [r7, #23]
 80180e4:	481f      	ldr	r0, [pc, #124]	; (8018164 <etharp_output+0x200>)
 80180e6:	4613      	mov	r3, r2
 80180e8:	005b      	lsls	r3, r3, #1
 80180ea:	4413      	add	r3, r2
 80180ec:	00db      	lsls	r3, r3, #3
 80180ee:	4403      	add	r3, r0
 80180f0:	3304      	adds	r3, #4
 80180f2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80180f4:	4299      	cmp	r1, r3
 80180f6:	d10a      	bne.n	801810e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80180f8:	4a19      	ldr	r2, [pc, #100]	; (8018160 <etharp_output+0x1fc>)
 80180fa:	7dfb      	ldrb	r3, [r7, #23]
 80180fc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80180fe:	7dfb      	ldrb	r3, [r7, #23]
 8018100:	461a      	mov	r2, r3
 8018102:	68b9      	ldr	r1, [r7, #8]
 8018104:	68f8      	ldr	r0, [r7, #12]
 8018106:	f7ff fe93 	bl	8017e30 <etharp_output_to_arp_index>
 801810a:	4603      	mov	r3, r0
 801810c:	e018      	b.n	8018140 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801810e:	7dfb      	ldrb	r3, [r7, #23]
 8018110:	3301      	adds	r3, #1
 8018112:	75fb      	strb	r3, [r7, #23]
 8018114:	7dfb      	ldrb	r3, [r7, #23]
 8018116:	2b09      	cmp	r3, #9
 8018118:	d9ca      	bls.n	80180b0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801811a:	68ba      	ldr	r2, [r7, #8]
 801811c:	69b9      	ldr	r1, [r7, #24]
 801811e:	68f8      	ldr	r0, [r7, #12]
 8018120:	f000 f822 	bl	8018168 <etharp_query>
 8018124:	4603      	mov	r3, r0
 8018126:	e00b      	b.n	8018140 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801812e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	69fb      	ldr	r3, [r7, #28]
 8018136:	68b9      	ldr	r1, [r7, #8]
 8018138:	68f8      	ldr	r0, [r7, #12]
 801813a:	f001 fd45 	bl	8019bc8 <ethernet_output>
 801813e:	4603      	mov	r3, r0
}
 8018140:	4618      	mov	r0, r3
 8018142:	3720      	adds	r7, #32
 8018144:	46bd      	mov	sp, r7
 8018146:	bd80      	pop	{r7, pc}
 8018148:	0801e0b4 	.word	0x0801e0b4
 801814c:	0801e204 	.word	0x0801e204
 8018150:	0801e12c 	.word	0x0801e12c
 8018154:	0801e254 	.word	0x0801e254
 8018158:	0801e1f4 	.word	0x0801e1f4
 801815c:	0801e8d8 	.word	0x0801e8d8
 8018160:	2004f720 	.word	0x2004f720
 8018164:	2004f630 	.word	0x2004f630

08018168 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b08c      	sub	sp, #48	; 0x30
 801816c:	af02      	add	r7, sp, #8
 801816e:	60f8      	str	r0, [r7, #12]
 8018170:	60b9      	str	r1, [r7, #8]
 8018172:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018174:	68fb      	ldr	r3, [r7, #12]
 8018176:	3326      	adds	r3, #38	; 0x26
 8018178:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801817a:	23ff      	movs	r3, #255	; 0xff
 801817c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018180:	2300      	movs	r3, #0
 8018182:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	68f9      	ldr	r1, [r7, #12]
 801818a:	4618      	mov	r0, r3
 801818c:	f000 fe0e 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8018190:	4603      	mov	r3, r0
 8018192:	2b00      	cmp	r3, #0
 8018194:	d10c      	bne.n	80181b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	681b      	ldr	r3, [r3, #0]
 801819a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801819e:	2be0      	cmp	r3, #224	; 0xe0
 80181a0:	d006      	beq.n	80181b0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80181a2:	68bb      	ldr	r3, [r7, #8]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d003      	beq.n	80181b0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d102      	bne.n	80181b6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80181b0:	f06f 030f 	mvn.w	r3, #15
 80181b4:	e101      	b.n	80183ba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80181b6:	68fa      	ldr	r2, [r7, #12]
 80181b8:	2101      	movs	r1, #1
 80181ba:	68b8      	ldr	r0, [r7, #8]
 80181bc:	f7ff fb60 	bl	8017880 <etharp_find_entry>
 80181c0:	4603      	mov	r3, r0
 80181c2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80181c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	da02      	bge.n	80181d2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80181cc:	8a7b      	ldrh	r3, [r7, #18]
 80181ce:	b25b      	sxtb	r3, r3
 80181d0:	e0f3      	b.n	80183ba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80181d2:	8a7b      	ldrh	r3, [r7, #18]
 80181d4:	2b7e      	cmp	r3, #126	; 0x7e
 80181d6:	d906      	bls.n	80181e6 <etharp_query+0x7e>
 80181d8:	4b7a      	ldr	r3, [pc, #488]	; (80183c4 <etharp_query+0x25c>)
 80181da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80181de:	497a      	ldr	r1, [pc, #488]	; (80183c8 <etharp_query+0x260>)
 80181e0:	487a      	ldr	r0, [pc, #488]	; (80183cc <etharp_query+0x264>)
 80181e2:	f002 f8c7 	bl	801a374 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80181e6:	8a7b      	ldrh	r3, [r7, #18]
 80181e8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80181ea:	7c7a      	ldrb	r2, [r7, #17]
 80181ec:	4978      	ldr	r1, [pc, #480]	; (80183d0 <etharp_query+0x268>)
 80181ee:	4613      	mov	r3, r2
 80181f0:	005b      	lsls	r3, r3, #1
 80181f2:	4413      	add	r3, r2
 80181f4:	00db      	lsls	r3, r3, #3
 80181f6:	440b      	add	r3, r1
 80181f8:	3314      	adds	r3, #20
 80181fa:	781b      	ldrb	r3, [r3, #0]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d115      	bne.n	801822c <etharp_query+0xc4>
    is_new_entry = 1;
 8018200:	2301      	movs	r3, #1
 8018202:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018204:	7c7a      	ldrb	r2, [r7, #17]
 8018206:	4972      	ldr	r1, [pc, #456]	; (80183d0 <etharp_query+0x268>)
 8018208:	4613      	mov	r3, r2
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	4413      	add	r3, r2
 801820e:	00db      	lsls	r3, r3, #3
 8018210:	440b      	add	r3, r1
 8018212:	3314      	adds	r3, #20
 8018214:	2201      	movs	r2, #1
 8018216:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018218:	7c7a      	ldrb	r2, [r7, #17]
 801821a:	496d      	ldr	r1, [pc, #436]	; (80183d0 <etharp_query+0x268>)
 801821c:	4613      	mov	r3, r2
 801821e:	005b      	lsls	r3, r3, #1
 8018220:	4413      	add	r3, r2
 8018222:	00db      	lsls	r3, r3, #3
 8018224:	440b      	add	r3, r1
 8018226:	3308      	adds	r3, #8
 8018228:	68fa      	ldr	r2, [r7, #12]
 801822a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801822c:	7c7a      	ldrb	r2, [r7, #17]
 801822e:	4968      	ldr	r1, [pc, #416]	; (80183d0 <etharp_query+0x268>)
 8018230:	4613      	mov	r3, r2
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	440b      	add	r3, r1
 801823a:	3314      	adds	r3, #20
 801823c:	781b      	ldrb	r3, [r3, #0]
 801823e:	2b01      	cmp	r3, #1
 8018240:	d011      	beq.n	8018266 <etharp_query+0xfe>
 8018242:	7c7a      	ldrb	r2, [r7, #17]
 8018244:	4962      	ldr	r1, [pc, #392]	; (80183d0 <etharp_query+0x268>)
 8018246:	4613      	mov	r3, r2
 8018248:	005b      	lsls	r3, r3, #1
 801824a:	4413      	add	r3, r2
 801824c:	00db      	lsls	r3, r3, #3
 801824e:	440b      	add	r3, r1
 8018250:	3314      	adds	r3, #20
 8018252:	781b      	ldrb	r3, [r3, #0]
 8018254:	2b01      	cmp	r3, #1
 8018256:	d806      	bhi.n	8018266 <etharp_query+0xfe>
 8018258:	4b5a      	ldr	r3, [pc, #360]	; (80183c4 <etharp_query+0x25c>)
 801825a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801825e:	495d      	ldr	r1, [pc, #372]	; (80183d4 <etharp_query+0x26c>)
 8018260:	485a      	ldr	r0, [pc, #360]	; (80183cc <etharp_query+0x264>)
 8018262:	f002 f887 	bl	801a374 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018266:	6a3b      	ldr	r3, [r7, #32]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d102      	bne.n	8018272 <etharp_query+0x10a>
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d10c      	bne.n	801828c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018272:	68b9      	ldr	r1, [r7, #8]
 8018274:	68f8      	ldr	r0, [r7, #12]
 8018276:	f000 f963 	bl	8018540 <etharp_request>
 801827a:	4603      	mov	r3, r0
 801827c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d102      	bne.n	801828c <etharp_query+0x124>
      return result;
 8018286:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801828a:	e096      	b.n	80183ba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d106      	bne.n	80182a0 <etharp_query+0x138>
 8018292:	4b4c      	ldr	r3, [pc, #304]	; (80183c4 <etharp_query+0x25c>)
 8018294:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018298:	494f      	ldr	r1, [pc, #316]	; (80183d8 <etharp_query+0x270>)
 801829a:	484c      	ldr	r0, [pc, #304]	; (80183cc <etharp_query+0x264>)
 801829c:	f002 f86a 	bl	801a374 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80182a0:	7c7a      	ldrb	r2, [r7, #17]
 80182a2:	494b      	ldr	r1, [pc, #300]	; (80183d0 <etharp_query+0x268>)
 80182a4:	4613      	mov	r3, r2
 80182a6:	005b      	lsls	r3, r3, #1
 80182a8:	4413      	add	r3, r2
 80182aa:	00db      	lsls	r3, r3, #3
 80182ac:	440b      	add	r3, r1
 80182ae:	3314      	adds	r3, #20
 80182b0:	781b      	ldrb	r3, [r3, #0]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d917      	bls.n	80182e6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80182b6:	4a49      	ldr	r2, [pc, #292]	; (80183dc <etharp_query+0x274>)
 80182b8:	7c7b      	ldrb	r3, [r7, #17]
 80182ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80182bc:	7c7a      	ldrb	r2, [r7, #17]
 80182be:	4613      	mov	r3, r2
 80182c0:	005b      	lsls	r3, r3, #1
 80182c2:	4413      	add	r3, r2
 80182c4:	00db      	lsls	r3, r3, #3
 80182c6:	3308      	adds	r3, #8
 80182c8:	4a41      	ldr	r2, [pc, #260]	; (80183d0 <etharp_query+0x268>)
 80182ca:	4413      	add	r3, r2
 80182cc:	3304      	adds	r3, #4
 80182ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80182d2:	9200      	str	r2, [sp, #0]
 80182d4:	697a      	ldr	r2, [r7, #20]
 80182d6:	6879      	ldr	r1, [r7, #4]
 80182d8:	68f8      	ldr	r0, [r7, #12]
 80182da:	f001 fc75 	bl	8019bc8 <ethernet_output>
 80182de:	4603      	mov	r3, r0
 80182e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80182e4:	e067      	b.n	80183b6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80182e6:	7c7a      	ldrb	r2, [r7, #17]
 80182e8:	4939      	ldr	r1, [pc, #228]	; (80183d0 <etharp_query+0x268>)
 80182ea:	4613      	mov	r3, r2
 80182ec:	005b      	lsls	r3, r3, #1
 80182ee:	4413      	add	r3, r2
 80182f0:	00db      	lsls	r3, r3, #3
 80182f2:	440b      	add	r3, r1
 80182f4:	3314      	adds	r3, #20
 80182f6:	781b      	ldrb	r3, [r3, #0]
 80182f8:	2b01      	cmp	r3, #1
 80182fa:	d15c      	bne.n	80183b6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80182fc:	2300      	movs	r3, #0
 80182fe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018304:	e01c      	b.n	8018340 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018306:	69fb      	ldr	r3, [r7, #28]
 8018308:	895a      	ldrh	r2, [r3, #10]
 801830a:	69fb      	ldr	r3, [r7, #28]
 801830c:	891b      	ldrh	r3, [r3, #8]
 801830e:	429a      	cmp	r2, r3
 8018310:	d10a      	bne.n	8018328 <etharp_query+0x1c0>
 8018312:	69fb      	ldr	r3, [r7, #28]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d006      	beq.n	8018328 <etharp_query+0x1c0>
 801831a:	4b2a      	ldr	r3, [pc, #168]	; (80183c4 <etharp_query+0x25c>)
 801831c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018320:	492f      	ldr	r1, [pc, #188]	; (80183e0 <etharp_query+0x278>)
 8018322:	482a      	ldr	r0, [pc, #168]	; (80183cc <etharp_query+0x264>)
 8018324:	f002 f826 	bl	801a374 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018328:	69fb      	ldr	r3, [r7, #28]
 801832a:	7b1b      	ldrb	r3, [r3, #12]
 801832c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018330:	2b00      	cmp	r3, #0
 8018332:	d002      	beq.n	801833a <etharp_query+0x1d2>
        copy_needed = 1;
 8018334:	2301      	movs	r3, #1
 8018336:	61bb      	str	r3, [r7, #24]
        break;
 8018338:	e005      	b.n	8018346 <etharp_query+0x1de>
      }
      p = p->next;
 801833a:	69fb      	ldr	r3, [r7, #28]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d1df      	bne.n	8018306 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018346:	69bb      	ldr	r3, [r7, #24]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d007      	beq.n	801835c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801834c:	687a      	ldr	r2, [r7, #4]
 801834e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018352:	200e      	movs	r0, #14
 8018354:	f7f8 fcca 	bl	8010cec <pbuf_clone>
 8018358:	61f8      	str	r0, [r7, #28]
 801835a:	e004      	b.n	8018366 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018360:	69f8      	ldr	r0, [r7, #28]
 8018362:	f7f8 fb01 	bl	8010968 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018366:	69fb      	ldr	r3, [r7, #28]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d021      	beq.n	80183b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801836c:	7c7a      	ldrb	r2, [r7, #17]
 801836e:	4918      	ldr	r1, [pc, #96]	; (80183d0 <etharp_query+0x268>)
 8018370:	4613      	mov	r3, r2
 8018372:	005b      	lsls	r3, r3, #1
 8018374:	4413      	add	r3, r2
 8018376:	00db      	lsls	r3, r3, #3
 8018378:	440b      	add	r3, r1
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	2b00      	cmp	r3, #0
 801837e:	d00a      	beq.n	8018396 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018380:	7c7a      	ldrb	r2, [r7, #17]
 8018382:	4913      	ldr	r1, [pc, #76]	; (80183d0 <etharp_query+0x268>)
 8018384:	4613      	mov	r3, r2
 8018386:	005b      	lsls	r3, r3, #1
 8018388:	4413      	add	r3, r2
 801838a:	00db      	lsls	r3, r3, #3
 801838c:	440b      	add	r3, r1
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4618      	mov	r0, r3
 8018392:	f7f8 fa43 	bl	801081c <pbuf_free>
      }
      arp_table[i].q = p;
 8018396:	7c7a      	ldrb	r2, [r7, #17]
 8018398:	490d      	ldr	r1, [pc, #52]	; (80183d0 <etharp_query+0x268>)
 801839a:	4613      	mov	r3, r2
 801839c:	005b      	lsls	r3, r3, #1
 801839e:	4413      	add	r3, r2
 80183a0:	00db      	lsls	r3, r3, #3
 80183a2:	440b      	add	r3, r1
 80183a4:	69fa      	ldr	r2, [r7, #28]
 80183a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80183a8:	2300      	movs	r3, #0
 80183aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80183ae:	e002      	b.n	80183b6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80183b0:	23ff      	movs	r3, #255	; 0xff
 80183b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80183b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80183ba:	4618      	mov	r0, r3
 80183bc:	3728      	adds	r7, #40	; 0x28
 80183be:	46bd      	mov	sp, r7
 80183c0:	bd80      	pop	{r7, pc}
 80183c2:	bf00      	nop
 80183c4:	0801e0b4 	.word	0x0801e0b4
 80183c8:	0801e260 	.word	0x0801e260
 80183cc:	0801e12c 	.word	0x0801e12c
 80183d0:	2004f630 	.word	0x2004f630
 80183d4:	0801e270 	.word	0x0801e270
 80183d8:	0801e254 	.word	0x0801e254
 80183dc:	2004f720 	.word	0x2004f720
 80183e0:	0801e298 	.word	0x0801e298

080183e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b08a      	sub	sp, #40	; 0x28
 80183e8:	af02      	add	r7, sp, #8
 80183ea:	60f8      	str	r0, [r7, #12]
 80183ec:	60b9      	str	r1, [r7, #8]
 80183ee:	607a      	str	r2, [r7, #4]
 80183f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80183f2:	2300      	movs	r3, #0
 80183f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d106      	bne.n	801840a <etharp_raw+0x26>
 80183fc:	4b3a      	ldr	r3, [pc, #232]	; (80184e8 <etharp_raw+0x104>)
 80183fe:	f240 4257 	movw	r2, #1111	; 0x457
 8018402:	493a      	ldr	r1, [pc, #232]	; (80184ec <etharp_raw+0x108>)
 8018404:	483a      	ldr	r0, [pc, #232]	; (80184f0 <etharp_raw+0x10c>)
 8018406:	f001 ffb5 	bl	801a374 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801840a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801840e:	211c      	movs	r1, #28
 8018410:	200e      	movs	r0, #14
 8018412:	f7f7 ff1f 	bl	8010254 <pbuf_alloc>
 8018416:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018418:	69bb      	ldr	r3, [r7, #24]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d102      	bne.n	8018424 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801841e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018422:	e05d      	b.n	80184e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018424:	69bb      	ldr	r3, [r7, #24]
 8018426:	895b      	ldrh	r3, [r3, #10]
 8018428:	2b1b      	cmp	r3, #27
 801842a:	d806      	bhi.n	801843a <etharp_raw+0x56>
 801842c:	4b2e      	ldr	r3, [pc, #184]	; (80184e8 <etharp_raw+0x104>)
 801842e:	f240 4262 	movw	r2, #1122	; 0x462
 8018432:	4930      	ldr	r1, [pc, #192]	; (80184f4 <etharp_raw+0x110>)
 8018434:	482e      	ldr	r0, [pc, #184]	; (80184f0 <etharp_raw+0x10c>)
 8018436:	f001 ff9d 	bl	801a374 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801843a:	69bb      	ldr	r3, [r7, #24]
 801843c:	685b      	ldr	r3, [r3, #4]
 801843e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018440:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018442:	4618      	mov	r0, r3
 8018444:	f7f6 fdf8 	bl	800f038 <lwip_htons>
 8018448:	4603      	mov	r3, r0
 801844a:	461a      	mov	r2, r3
 801844c:	697b      	ldr	r3, [r7, #20]
 801844e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018456:	2b06      	cmp	r3, #6
 8018458:	d006      	beq.n	8018468 <etharp_raw+0x84>
 801845a:	4b23      	ldr	r3, [pc, #140]	; (80184e8 <etharp_raw+0x104>)
 801845c:	f240 4269 	movw	r2, #1129	; 0x469
 8018460:	4925      	ldr	r1, [pc, #148]	; (80184f8 <etharp_raw+0x114>)
 8018462:	4823      	ldr	r0, [pc, #140]	; (80184f0 <etharp_raw+0x10c>)
 8018464:	f001 ff86 	bl	801a374 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018468:	697b      	ldr	r3, [r7, #20]
 801846a:	3308      	adds	r3, #8
 801846c:	2206      	movs	r2, #6
 801846e:	6839      	ldr	r1, [r7, #0]
 8018470:	4618      	mov	r0, r3
 8018472:	f001 fed4 	bl	801a21e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018476:	697b      	ldr	r3, [r7, #20]
 8018478:	3312      	adds	r3, #18
 801847a:	2206      	movs	r2, #6
 801847c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801847e:	4618      	mov	r0, r3
 8018480:	f001 fecd 	bl	801a21e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018484:	697b      	ldr	r3, [r7, #20]
 8018486:	330e      	adds	r3, #14
 8018488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801848a:	6812      	ldr	r2, [r2, #0]
 801848c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801848e:	697b      	ldr	r3, [r7, #20]
 8018490:	3318      	adds	r3, #24
 8018492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018494:	6812      	ldr	r2, [r2, #0]
 8018496:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	2200      	movs	r2, #0
 801849c:	701a      	strb	r2, [r3, #0]
 801849e:	2200      	movs	r2, #0
 80184a0:	f042 0201 	orr.w	r2, r2, #1
 80184a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2200      	movs	r2, #0
 80184aa:	f042 0208 	orr.w	r2, r2, #8
 80184ae:	709a      	strb	r2, [r3, #2]
 80184b0:	2200      	movs	r2, #0
 80184b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	2206      	movs	r2, #6
 80184b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	2204      	movs	r2, #4
 80184be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80184c0:	f640 0306 	movw	r3, #2054	; 0x806
 80184c4:	9300      	str	r3, [sp, #0]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	68ba      	ldr	r2, [r7, #8]
 80184ca:	69b9      	ldr	r1, [r7, #24]
 80184cc:	68f8      	ldr	r0, [r7, #12]
 80184ce:	f001 fb7b 	bl	8019bc8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80184d2:	69b8      	ldr	r0, [r7, #24]
 80184d4:	f7f8 f9a2 	bl	801081c <pbuf_free>
  p = NULL;
 80184d8:	2300      	movs	r3, #0
 80184da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80184dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3720      	adds	r7, #32
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}
 80184e8:	0801e0b4 	.word	0x0801e0b4
 80184ec:	0801e204 	.word	0x0801e204
 80184f0:	0801e12c 	.word	0x0801e12c
 80184f4:	0801e2b4 	.word	0x0801e2b4
 80184f8:	0801e2e8 	.word	0x0801e2e8

080184fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b088      	sub	sp, #32
 8018500:	af04      	add	r7, sp, #16
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018518:	2201      	movs	r2, #1
 801851a:	9203      	str	r2, [sp, #12]
 801851c:	68ba      	ldr	r2, [r7, #8]
 801851e:	9202      	str	r2, [sp, #8]
 8018520:	4a06      	ldr	r2, [pc, #24]	; (801853c <etharp_request_dst+0x40>)
 8018522:	9201      	str	r2, [sp, #4]
 8018524:	9300      	str	r3, [sp, #0]
 8018526:	4603      	mov	r3, r0
 8018528:	687a      	ldr	r2, [r7, #4]
 801852a:	68f8      	ldr	r0, [r7, #12]
 801852c:	f7ff ff5a 	bl	80183e4 <etharp_raw>
 8018530:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018532:	4618      	mov	r0, r3
 8018534:	3710      	adds	r7, #16
 8018536:	46bd      	mov	sp, r7
 8018538:	bd80      	pop	{r7, pc}
 801853a:	bf00      	nop
 801853c:	0801e8e0 	.word	0x0801e8e0

08018540 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018540:	b580      	push	{r7, lr}
 8018542:	b082      	sub	sp, #8
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
 8018548:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801854a:	4a05      	ldr	r2, [pc, #20]	; (8018560 <etharp_request+0x20>)
 801854c:	6839      	ldr	r1, [r7, #0]
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f7ff ffd4 	bl	80184fc <etharp_request_dst>
 8018554:	4603      	mov	r3, r0
}
 8018556:	4618      	mov	r0, r3
 8018558:	3708      	adds	r7, #8
 801855a:	46bd      	mov	sp, r7
 801855c:	bd80      	pop	{r7, pc}
 801855e:	bf00      	nop
 8018560:	0801e8d8 	.word	0x0801e8d8

08018564 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b08e      	sub	sp, #56	; 0x38
 8018568:	af04      	add	r7, sp, #16
 801856a:	6078      	str	r0, [r7, #4]
 801856c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801856e:	4b79      	ldr	r3, [pc, #484]	; (8018754 <icmp_input+0x1f0>)
 8018570:	689b      	ldr	r3, [r3, #8]
 8018572:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018576:	781b      	ldrb	r3, [r3, #0]
 8018578:	f003 030f 	and.w	r3, r3, #15
 801857c:	b2db      	uxtb	r3, r3
 801857e:	009b      	lsls	r3, r3, #2
 8018580:	b2db      	uxtb	r3, r3
 8018582:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018584:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018586:	2b13      	cmp	r3, #19
 8018588:	f240 80cd 	bls.w	8018726 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	895b      	ldrh	r3, [r3, #10]
 8018590:	2b03      	cmp	r3, #3
 8018592:	f240 80ca 	bls.w	801872a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80185a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	f000 80b7 	beq.w	8018718 <icmp_input+0x1b4>
 80185aa:	2b08      	cmp	r3, #8
 80185ac:	f040 80b7 	bne.w	801871e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80185b0:	4b69      	ldr	r3, [pc, #420]	; (8018758 <icmp_input+0x1f4>)
 80185b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80185b4:	4b67      	ldr	r3, [pc, #412]	; (8018754 <icmp_input+0x1f0>)
 80185b6:	695b      	ldr	r3, [r3, #20]
 80185b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80185bc:	2be0      	cmp	r3, #224	; 0xe0
 80185be:	f000 80bb 	beq.w	8018738 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80185c2:	4b64      	ldr	r3, [pc, #400]	; (8018754 <icmp_input+0x1f0>)
 80185c4:	695b      	ldr	r3, [r3, #20]
 80185c6:	4a63      	ldr	r2, [pc, #396]	; (8018754 <icmp_input+0x1f0>)
 80185c8:	6812      	ldr	r2, [r2, #0]
 80185ca:	4611      	mov	r1, r2
 80185cc:	4618      	mov	r0, r3
 80185ce:	f000 fbed 	bl	8018dac <ip4_addr_isbroadcast_u32>
 80185d2:	4603      	mov	r3, r0
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	f040 80b1 	bne.w	801873c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	891b      	ldrh	r3, [r3, #8]
 80185de:	2b07      	cmp	r3, #7
 80185e0:	f240 80a5 	bls.w	801872e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80185e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185e6:	330e      	adds	r3, #14
 80185e8:	4619      	mov	r1, r3
 80185ea:	6878      	ldr	r0, [r7, #4]
 80185ec:	f7f8 f880 	bl	80106f0 <pbuf_add_header>
 80185f0:	4603      	mov	r3, r0
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d04b      	beq.n	801868e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	891a      	ldrh	r2, [r3, #8]
 80185fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80185fc:	4413      	add	r3, r2
 80185fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	891b      	ldrh	r3, [r3, #8]
 8018604:	8b7a      	ldrh	r2, [r7, #26]
 8018606:	429a      	cmp	r2, r3
 8018608:	f0c0 809a 	bcc.w	8018740 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801860c:	8b7b      	ldrh	r3, [r7, #26]
 801860e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018612:	4619      	mov	r1, r3
 8018614:	200e      	movs	r0, #14
 8018616:	f7f7 fe1d 	bl	8010254 <pbuf_alloc>
 801861a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	2b00      	cmp	r3, #0
 8018620:	f000 8090 	beq.w	8018744 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018624:	697b      	ldr	r3, [r7, #20]
 8018626:	895b      	ldrh	r3, [r3, #10]
 8018628:	461a      	mov	r2, r3
 801862a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801862c:	3308      	adds	r3, #8
 801862e:	429a      	cmp	r2, r3
 8018630:	d203      	bcs.n	801863a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018632:	6978      	ldr	r0, [r7, #20]
 8018634:	f7f8 f8f2 	bl	801081c <pbuf_free>
          goto icmperr;
 8018638:	e085      	b.n	8018746 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801863a:	697b      	ldr	r3, [r7, #20]
 801863c:	685b      	ldr	r3, [r3, #4]
 801863e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018642:	4618      	mov	r0, r3
 8018644:	f001 fdeb 	bl	801a21e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801864a:	4619      	mov	r1, r3
 801864c:	6978      	ldr	r0, [r7, #20]
 801864e:	f7f8 f85f 	bl	8010710 <pbuf_remove_header>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d009      	beq.n	801866c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018658:	4b40      	ldr	r3, [pc, #256]	; (801875c <icmp_input+0x1f8>)
 801865a:	22b6      	movs	r2, #182	; 0xb6
 801865c:	4940      	ldr	r1, [pc, #256]	; (8018760 <icmp_input+0x1fc>)
 801865e:	4841      	ldr	r0, [pc, #260]	; (8018764 <icmp_input+0x200>)
 8018660:	f001 fe88 	bl	801a374 <iprintf>
          pbuf_free(r);
 8018664:	6978      	ldr	r0, [r7, #20]
 8018666:	f7f8 f8d9 	bl	801081c <pbuf_free>
          goto icmperr;
 801866a:	e06c      	b.n	8018746 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801866c:	6879      	ldr	r1, [r7, #4]
 801866e:	6978      	ldr	r0, [r7, #20]
 8018670:	f7f8 f9f8 	bl	8010a64 <pbuf_copy>
 8018674:	4603      	mov	r3, r0
 8018676:	2b00      	cmp	r3, #0
 8018678:	d003      	beq.n	8018682 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801867a:	6978      	ldr	r0, [r7, #20]
 801867c:	f7f8 f8ce 	bl	801081c <pbuf_free>
          goto icmperr;
 8018680:	e061      	b.n	8018746 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018682:	6878      	ldr	r0, [r7, #4]
 8018684:	f7f8 f8ca 	bl	801081c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018688:	697b      	ldr	r3, [r7, #20]
 801868a:	607b      	str	r3, [r7, #4]
 801868c:	e00f      	b.n	80186ae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801868e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018690:	330e      	adds	r3, #14
 8018692:	4619      	mov	r1, r3
 8018694:	6878      	ldr	r0, [r7, #4]
 8018696:	f7f8 f83b 	bl	8010710 <pbuf_remove_header>
 801869a:	4603      	mov	r3, r0
 801869c:	2b00      	cmp	r3, #0
 801869e:	d006      	beq.n	80186ae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80186a0:	4b2e      	ldr	r3, [pc, #184]	; (801875c <icmp_input+0x1f8>)
 80186a2:	22c7      	movs	r2, #199	; 0xc7
 80186a4:	4930      	ldr	r1, [pc, #192]	; (8018768 <icmp_input+0x204>)
 80186a6:	482f      	ldr	r0, [pc, #188]	; (8018764 <icmp_input+0x200>)
 80186a8:	f001 fe64 	bl	801a374 <iprintf>
          goto icmperr;
 80186ac:	e04b      	b.n	8018746 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	685b      	ldr	r3, [r3, #4]
 80186b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80186b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80186b6:	4619      	mov	r1, r3
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	f7f8 f819 	bl	80106f0 <pbuf_add_header>
 80186be:	4603      	mov	r3, r0
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	d12b      	bne.n	801871c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	685b      	ldr	r3, [r3, #4]
 80186c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80186ca:	69fb      	ldr	r3, [r7, #28]
 80186cc:	681a      	ldr	r2, [r3, #0]
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80186d2:	4b20      	ldr	r3, [pc, #128]	; (8018754 <icmp_input+0x1f0>)
 80186d4:	691a      	ldr	r2, [r3, #16]
 80186d6:	68fb      	ldr	r3, [r7, #12]
 80186d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	2200      	movs	r2, #0
 80186de:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80186e0:	693b      	ldr	r3, [r7, #16]
 80186e2:	2200      	movs	r2, #0
 80186e4:	709a      	strb	r2, [r3, #2]
 80186e6:	2200      	movs	r2, #0
 80186e8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	22ff      	movs	r2, #255	; 0xff
 80186ee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80186f0:	68fb      	ldr	r3, [r7, #12]
 80186f2:	2200      	movs	r2, #0
 80186f4:	729a      	strb	r2, [r3, #10]
 80186f6:	2200      	movs	r2, #0
 80186f8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	9302      	str	r3, [sp, #8]
 80186fe:	2301      	movs	r3, #1
 8018700:	9301      	str	r3, [sp, #4]
 8018702:	2300      	movs	r3, #0
 8018704:	9300      	str	r3, [sp, #0]
 8018706:	23ff      	movs	r3, #255	; 0xff
 8018708:	2200      	movs	r2, #0
 801870a:	69f9      	ldr	r1, [r7, #28]
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f000 fa75 	bl	8018bfc <ip4_output_if>
 8018712:	4603      	mov	r3, r0
 8018714:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018716:	e001      	b.n	801871c <icmp_input+0x1b8>
      break;
 8018718:	bf00      	nop
 801871a:	e000      	b.n	801871e <icmp_input+0x1ba>
      break;
 801871c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801871e:	6878      	ldr	r0, [r7, #4]
 8018720:	f7f8 f87c 	bl	801081c <pbuf_free>
  return;
 8018724:	e013      	b.n	801874e <icmp_input+0x1ea>
    goto lenerr;
 8018726:	bf00      	nop
 8018728:	e002      	b.n	8018730 <icmp_input+0x1cc>
    goto lenerr;
 801872a:	bf00      	nop
 801872c:	e000      	b.n	8018730 <icmp_input+0x1cc>
        goto lenerr;
 801872e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f7f8 f873 	bl	801081c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018736:	e00a      	b.n	801874e <icmp_input+0x1ea>
        goto icmperr;
 8018738:	bf00      	nop
 801873a:	e004      	b.n	8018746 <icmp_input+0x1e2>
        goto icmperr;
 801873c:	bf00      	nop
 801873e:	e002      	b.n	8018746 <icmp_input+0x1e2>
          goto icmperr;
 8018740:	bf00      	nop
 8018742:	e000      	b.n	8018746 <icmp_input+0x1e2>
          goto icmperr;
 8018744:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f7f8 f868 	bl	801081c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801874c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801874e:	3728      	adds	r7, #40	; 0x28
 8018750:	46bd      	mov	sp, r7
 8018752:	bd80      	pop	{r7, pc}
 8018754:	2004b0bc 	.word	0x2004b0bc
 8018758:	2004b0d0 	.word	0x2004b0d0
 801875c:	0801e32c 	.word	0x0801e32c
 8018760:	0801e364 	.word	0x0801e364
 8018764:	0801e39c 	.word	0x0801e39c
 8018768:	0801e3c4 	.word	0x0801e3c4

0801876c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b082      	sub	sp, #8
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
 8018774:	460b      	mov	r3, r1
 8018776:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018778:	78fb      	ldrb	r3, [r7, #3]
 801877a:	461a      	mov	r2, r3
 801877c:	2103      	movs	r1, #3
 801877e:	6878      	ldr	r0, [r7, #4]
 8018780:	f000 f814 	bl	80187ac <icmp_send_response>
}
 8018784:	bf00      	nop
 8018786:	3708      	adds	r7, #8
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}

0801878c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b082      	sub	sp, #8
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	460b      	mov	r3, r1
 8018796:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018798:	78fb      	ldrb	r3, [r7, #3]
 801879a:	461a      	mov	r2, r3
 801879c:	210b      	movs	r1, #11
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f000 f804 	bl	80187ac <icmp_send_response>
}
 80187a4:	bf00      	nop
 80187a6:	3708      	adds	r7, #8
 80187a8:	46bd      	mov	sp, r7
 80187aa:	bd80      	pop	{r7, pc}

080187ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b08c      	sub	sp, #48	; 0x30
 80187b0:	af04      	add	r7, sp, #16
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	460b      	mov	r3, r1
 80187b6:	70fb      	strb	r3, [r7, #3]
 80187b8:	4613      	mov	r3, r2
 80187ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80187bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80187c0:	2124      	movs	r1, #36	; 0x24
 80187c2:	2022      	movs	r0, #34	; 0x22
 80187c4:	f7f7 fd46 	bl	8010254 <pbuf_alloc>
 80187c8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80187ca:	69fb      	ldr	r3, [r7, #28]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d04c      	beq.n	801886a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80187d0:	69fb      	ldr	r3, [r7, #28]
 80187d2:	895b      	ldrh	r3, [r3, #10]
 80187d4:	2b23      	cmp	r3, #35	; 0x23
 80187d6:	d806      	bhi.n	80187e6 <icmp_send_response+0x3a>
 80187d8:	4b26      	ldr	r3, [pc, #152]	; (8018874 <icmp_send_response+0xc8>)
 80187da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80187de:	4926      	ldr	r1, [pc, #152]	; (8018878 <icmp_send_response+0xcc>)
 80187e0:	4826      	ldr	r0, [pc, #152]	; (801887c <icmp_send_response+0xd0>)
 80187e2:	f001 fdc7 	bl	801a374 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	685b      	ldr	r3, [r3, #4]
 80187ea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80187ec:	69fb      	ldr	r3, [r7, #28]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80187f2:	697b      	ldr	r3, [r7, #20]
 80187f4:	78fa      	ldrb	r2, [r7, #3]
 80187f6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80187f8:	697b      	ldr	r3, [r7, #20]
 80187fa:	78ba      	ldrb	r2, [r7, #2]
 80187fc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80187fe:	697b      	ldr	r3, [r7, #20]
 8018800:	2200      	movs	r2, #0
 8018802:	711a      	strb	r2, [r3, #4]
 8018804:	2200      	movs	r2, #0
 8018806:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018808:	697b      	ldr	r3, [r7, #20]
 801880a:	2200      	movs	r2, #0
 801880c:	719a      	strb	r2, [r3, #6]
 801880e:	2200      	movs	r2, #0
 8018810:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018812:	69fb      	ldr	r3, [r7, #28]
 8018814:	685b      	ldr	r3, [r3, #4]
 8018816:	f103 0008 	add.w	r0, r3, #8
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	685b      	ldr	r3, [r3, #4]
 801881e:	221c      	movs	r2, #28
 8018820:	4619      	mov	r1, r3
 8018822:	f001 fcfc 	bl	801a21e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018826:	69bb      	ldr	r3, [r7, #24]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801882c:	f107 030c 	add.w	r3, r7, #12
 8018830:	4618      	mov	r0, r3
 8018832:	f000 f825 	bl	8018880 <ip4_route>
 8018836:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018838:	693b      	ldr	r3, [r7, #16]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d011      	beq.n	8018862 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801883e:	697b      	ldr	r3, [r7, #20]
 8018840:	2200      	movs	r2, #0
 8018842:	709a      	strb	r2, [r3, #2]
 8018844:	2200      	movs	r2, #0
 8018846:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018848:	f107 020c 	add.w	r2, r7, #12
 801884c:	693b      	ldr	r3, [r7, #16]
 801884e:	9302      	str	r3, [sp, #8]
 8018850:	2301      	movs	r3, #1
 8018852:	9301      	str	r3, [sp, #4]
 8018854:	2300      	movs	r3, #0
 8018856:	9300      	str	r3, [sp, #0]
 8018858:	23ff      	movs	r3, #255	; 0xff
 801885a:	2100      	movs	r1, #0
 801885c:	69f8      	ldr	r0, [r7, #28]
 801885e:	f000 f9cd 	bl	8018bfc <ip4_output_if>
  }
  pbuf_free(q);
 8018862:	69f8      	ldr	r0, [r7, #28]
 8018864:	f7f7 ffda 	bl	801081c <pbuf_free>
 8018868:	e000      	b.n	801886c <icmp_send_response+0xc0>
    return;
 801886a:	bf00      	nop
}
 801886c:	3720      	adds	r7, #32
 801886e:	46bd      	mov	sp, r7
 8018870:	bd80      	pop	{r7, pc}
 8018872:	bf00      	nop
 8018874:	0801e32c 	.word	0x0801e32c
 8018878:	0801e3f8 	.word	0x0801e3f8
 801887c:	0801e39c 	.word	0x0801e39c

08018880 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018880:	b480      	push	{r7}
 8018882:	b085      	sub	sp, #20
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018888:	4b33      	ldr	r3, [pc, #204]	; (8018958 <ip4_route+0xd8>)
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	60fb      	str	r3, [r7, #12]
 801888e:	e036      	b.n	80188fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018896:	f003 0301 	and.w	r3, r3, #1
 801889a:	b2db      	uxtb	r3, r3
 801889c:	2b00      	cmp	r3, #0
 801889e:	d02b      	beq.n	80188f8 <ip4_route+0x78>
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188a6:	089b      	lsrs	r3, r3, #2
 80188a8:	f003 0301 	and.w	r3, r3, #1
 80188ac:	b2db      	uxtb	r3, r3
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d022      	beq.n	80188f8 <ip4_route+0x78>
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	3304      	adds	r3, #4
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d01d      	beq.n	80188f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	681a      	ldr	r2, [r3, #0]
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	3304      	adds	r3, #4
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	405a      	eors	r2, r3
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	3308      	adds	r3, #8
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	4013      	ands	r3, r2
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d101      	bne.n	80188d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	e038      	b.n	801894a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188de:	f003 0302 	and.w	r3, r3, #2
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d108      	bne.n	80188f8 <ip4_route+0x78>
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681a      	ldr	r2, [r3, #0]
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	330c      	adds	r3, #12
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	429a      	cmp	r2, r3
 80188f2:	d101      	bne.n	80188f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	e028      	b.n	801894a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	60fb      	str	r3, [r7, #12]
 80188fe:	68fb      	ldr	r3, [r7, #12]
 8018900:	2b00      	cmp	r3, #0
 8018902:	d1c5      	bne.n	8018890 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018904:	4b15      	ldr	r3, [pc, #84]	; (801895c <ip4_route+0xdc>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d01a      	beq.n	8018942 <ip4_route+0xc2>
 801890c:	4b13      	ldr	r3, [pc, #76]	; (801895c <ip4_route+0xdc>)
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018914:	f003 0301 	and.w	r3, r3, #1
 8018918:	2b00      	cmp	r3, #0
 801891a:	d012      	beq.n	8018942 <ip4_route+0xc2>
 801891c:	4b0f      	ldr	r3, [pc, #60]	; (801895c <ip4_route+0xdc>)
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018924:	f003 0304 	and.w	r3, r3, #4
 8018928:	2b00      	cmp	r3, #0
 801892a:	d00a      	beq.n	8018942 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801892c:	4b0b      	ldr	r3, [pc, #44]	; (801895c <ip4_route+0xdc>)
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	3304      	adds	r3, #4
 8018932:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018934:	2b00      	cmp	r3, #0
 8018936:	d004      	beq.n	8018942 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	b2db      	uxtb	r3, r3
 801893e:	2b7f      	cmp	r3, #127	; 0x7f
 8018940:	d101      	bne.n	8018946 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018942:	2300      	movs	r3, #0
 8018944:	e001      	b.n	801894a <ip4_route+0xca>
  }

  return netif_default;
 8018946:	4b05      	ldr	r3, [pc, #20]	; (801895c <ip4_route+0xdc>)
 8018948:	681b      	ldr	r3, [r3, #0]
}
 801894a:	4618      	mov	r0, r3
 801894c:	3714      	adds	r7, #20
 801894e:	46bd      	mov	sp, r7
 8018950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018954:	4770      	bx	lr
 8018956:	bf00      	nop
 8018958:	2004f5c4 	.word	0x2004f5c4
 801895c:	2004f5c8 	.word	0x2004f5c8

08018960 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	b082      	sub	sp, #8
 8018964:	af00      	add	r7, sp, #0
 8018966:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801896e:	f003 0301 	and.w	r3, r3, #1
 8018972:	b2db      	uxtb	r3, r3
 8018974:	2b00      	cmp	r3, #0
 8018976:	d016      	beq.n	80189a6 <ip4_input_accept+0x46>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	3304      	adds	r3, #4
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d011      	beq.n	80189a6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018982:	4b0b      	ldr	r3, [pc, #44]	; (80189b0 <ip4_input_accept+0x50>)
 8018984:	695a      	ldr	r2, [r3, #20]
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	3304      	adds	r3, #4
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	429a      	cmp	r2, r3
 801898e:	d008      	beq.n	80189a2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018990:	4b07      	ldr	r3, [pc, #28]	; (80189b0 <ip4_input_accept+0x50>)
 8018992:	695b      	ldr	r3, [r3, #20]
 8018994:	6879      	ldr	r1, [r7, #4]
 8018996:	4618      	mov	r0, r3
 8018998:	f000 fa08 	bl	8018dac <ip4_addr_isbroadcast_u32>
 801899c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d001      	beq.n	80189a6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80189a2:	2301      	movs	r3, #1
 80189a4:	e000      	b.n	80189a8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80189a6:	2300      	movs	r3, #0
}
 80189a8:	4618      	mov	r0, r3
 80189aa:	3708      	adds	r7, #8
 80189ac:	46bd      	mov	sp, r7
 80189ae:	bd80      	pop	{r7, pc}
 80189b0:	2004b0bc 	.word	0x2004b0bc

080189b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b086      	sub	sp, #24
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
 80189bc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	685b      	ldr	r3, [r3, #4]
 80189c2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80189c4:	697b      	ldr	r3, [r7, #20]
 80189c6:	781b      	ldrb	r3, [r3, #0]
 80189c8:	091b      	lsrs	r3, r3, #4
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	2b04      	cmp	r3, #4
 80189ce:	d004      	beq.n	80189da <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f7f7 ff23 	bl	801081c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80189d6:	2300      	movs	r3, #0
 80189d8:	e107      	b.n	8018bea <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80189da:	697b      	ldr	r3, [r7, #20]
 80189dc:	781b      	ldrb	r3, [r3, #0]
 80189de:	f003 030f 	and.w	r3, r3, #15
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	009b      	lsls	r3, r3, #2
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80189ea:	697b      	ldr	r3, [r7, #20]
 80189ec:	885b      	ldrh	r3, [r3, #2]
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7f6 fb21 	bl	800f038 <lwip_htons>
 80189f6:	4603      	mov	r3, r0
 80189f8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	891b      	ldrh	r3, [r3, #8]
 80189fe:	89ba      	ldrh	r2, [r7, #12]
 8018a00:	429a      	cmp	r2, r3
 8018a02:	d204      	bcs.n	8018a0e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018a04:	89bb      	ldrh	r3, [r7, #12]
 8018a06:	4619      	mov	r1, r3
 8018a08:	6878      	ldr	r0, [r7, #4]
 8018a0a:	f7f7 fd81 	bl	8010510 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	895b      	ldrh	r3, [r3, #10]
 8018a12:	89fa      	ldrh	r2, [r7, #14]
 8018a14:	429a      	cmp	r2, r3
 8018a16:	d807      	bhi.n	8018a28 <ip4_input+0x74>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	891b      	ldrh	r3, [r3, #8]
 8018a1c:	89ba      	ldrh	r2, [r7, #12]
 8018a1e:	429a      	cmp	r2, r3
 8018a20:	d802      	bhi.n	8018a28 <ip4_input+0x74>
 8018a22:	89fb      	ldrh	r3, [r7, #14]
 8018a24:	2b13      	cmp	r3, #19
 8018a26:	d804      	bhi.n	8018a32 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018a28:	6878      	ldr	r0, [r7, #4]
 8018a2a:	f7f7 fef7 	bl	801081c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	e0db      	b.n	8018bea <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018a32:	697b      	ldr	r3, [r7, #20]
 8018a34:	691b      	ldr	r3, [r3, #16]
 8018a36:	4a6f      	ldr	r2, [pc, #444]	; (8018bf4 <ip4_input+0x240>)
 8018a38:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018a3a:	697b      	ldr	r3, [r7, #20]
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	4a6d      	ldr	r2, [pc, #436]	; (8018bf4 <ip4_input+0x240>)
 8018a40:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018a42:	4b6c      	ldr	r3, [pc, #432]	; (8018bf4 <ip4_input+0x240>)
 8018a44:	695b      	ldr	r3, [r3, #20]
 8018a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a4a:	2be0      	cmp	r3, #224	; 0xe0
 8018a4c:	d112      	bne.n	8018a74 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018a4e:	683b      	ldr	r3, [r7, #0]
 8018a50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018a54:	f003 0301 	and.w	r3, r3, #1
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d007      	beq.n	8018a6e <ip4_input+0xba>
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	3304      	adds	r3, #4
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d002      	beq.n	8018a6e <ip4_input+0xba>
      netif = inp;
 8018a68:	683b      	ldr	r3, [r7, #0]
 8018a6a:	613b      	str	r3, [r7, #16]
 8018a6c:	e02a      	b.n	8018ac4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018a6e:	2300      	movs	r3, #0
 8018a70:	613b      	str	r3, [r7, #16]
 8018a72:	e027      	b.n	8018ac4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018a74:	6838      	ldr	r0, [r7, #0]
 8018a76:	f7ff ff73 	bl	8018960 <ip4_input_accept>
 8018a7a:	4603      	mov	r3, r0
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d002      	beq.n	8018a86 <ip4_input+0xd2>
      netif = inp;
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	613b      	str	r3, [r7, #16]
 8018a84:	e01e      	b.n	8018ac4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018a86:	2300      	movs	r3, #0
 8018a88:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018a8a:	4b5a      	ldr	r3, [pc, #360]	; (8018bf4 <ip4_input+0x240>)
 8018a8c:	695b      	ldr	r3, [r3, #20]
 8018a8e:	b2db      	uxtb	r3, r3
 8018a90:	2b7f      	cmp	r3, #127	; 0x7f
 8018a92:	d017      	beq.n	8018ac4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018a94:	4b58      	ldr	r3, [pc, #352]	; (8018bf8 <ip4_input+0x244>)
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	613b      	str	r3, [r7, #16]
 8018a9a:	e00e      	b.n	8018aba <ip4_input+0x106>
          if (netif == inp) {
 8018a9c:	693a      	ldr	r2, [r7, #16]
 8018a9e:	683b      	ldr	r3, [r7, #0]
 8018aa0:	429a      	cmp	r2, r3
 8018aa2:	d006      	beq.n	8018ab2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018aa4:	6938      	ldr	r0, [r7, #16]
 8018aa6:	f7ff ff5b 	bl	8018960 <ip4_input_accept>
 8018aaa:	4603      	mov	r3, r0
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d108      	bne.n	8018ac2 <ip4_input+0x10e>
 8018ab0:	e000      	b.n	8018ab4 <ip4_input+0x100>
            continue;
 8018ab2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018ab4:	693b      	ldr	r3, [r7, #16]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	613b      	str	r3, [r7, #16]
 8018aba:	693b      	ldr	r3, [r7, #16]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d1ed      	bne.n	8018a9c <ip4_input+0xe8>
 8018ac0:	e000      	b.n	8018ac4 <ip4_input+0x110>
            break;
 8018ac2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018ac4:	4b4b      	ldr	r3, [pc, #300]	; (8018bf4 <ip4_input+0x240>)
 8018ac6:	691b      	ldr	r3, [r3, #16]
 8018ac8:	6839      	ldr	r1, [r7, #0]
 8018aca:	4618      	mov	r0, r3
 8018acc:	f000 f96e 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d105      	bne.n	8018ae2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018ad6:	4b47      	ldr	r3, [pc, #284]	; (8018bf4 <ip4_input+0x240>)
 8018ad8:	691b      	ldr	r3, [r3, #16]
 8018ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018ade:	2be0      	cmp	r3, #224	; 0xe0
 8018ae0:	d104      	bne.n	8018aec <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018ae2:	6878      	ldr	r0, [r7, #4]
 8018ae4:	f7f7 fe9a 	bl	801081c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018ae8:	2300      	movs	r3, #0
 8018aea:	e07e      	b.n	8018bea <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018aec:	693b      	ldr	r3, [r7, #16]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d104      	bne.n	8018afc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018af2:	6878      	ldr	r0, [r7, #4]
 8018af4:	f7f7 fe92 	bl	801081c <pbuf_free>
    return ERR_OK;
 8018af8:	2300      	movs	r3, #0
 8018afa:	e076      	b.n	8018bea <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018afc:	697b      	ldr	r3, [r7, #20]
 8018afe:	88db      	ldrh	r3, [r3, #6]
 8018b00:	b29b      	uxth	r3, r3
 8018b02:	461a      	mov	r2, r3
 8018b04:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018b08:	4013      	ands	r3, r2
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d00b      	beq.n	8018b26 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018b0e:	6878      	ldr	r0, [r7, #4]
 8018b10:	f000 fc92 	bl	8019438 <ip4_reass>
 8018b14:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d101      	bne.n	8018b20 <ip4_input+0x16c>
      return ERR_OK;
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	e064      	b.n	8018bea <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018b26:	4a33      	ldr	r2, [pc, #204]	; (8018bf4 <ip4_input+0x240>)
 8018b28:	693b      	ldr	r3, [r7, #16]
 8018b2a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018b2c:	4a31      	ldr	r2, [pc, #196]	; (8018bf4 <ip4_input+0x240>)
 8018b2e:	683b      	ldr	r3, [r7, #0]
 8018b30:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018b32:	4a30      	ldr	r2, [pc, #192]	; (8018bf4 <ip4_input+0x240>)
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018b38:	697b      	ldr	r3, [r7, #20]
 8018b3a:	781b      	ldrb	r3, [r3, #0]
 8018b3c:	f003 030f 	and.w	r3, r3, #15
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	009b      	lsls	r3, r3, #2
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	b29a      	uxth	r2, r3
 8018b48:	4b2a      	ldr	r3, [pc, #168]	; (8018bf4 <ip4_input+0x240>)
 8018b4a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018b4c:	89fb      	ldrh	r3, [r7, #14]
 8018b4e:	4619      	mov	r1, r3
 8018b50:	6878      	ldr	r0, [r7, #4]
 8018b52:	f7f7 fddd 	bl	8010710 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018b56:	697b      	ldr	r3, [r7, #20]
 8018b58:	7a5b      	ldrb	r3, [r3, #9]
 8018b5a:	2b11      	cmp	r3, #17
 8018b5c:	d006      	beq.n	8018b6c <ip4_input+0x1b8>
 8018b5e:	2b11      	cmp	r3, #17
 8018b60:	dc13      	bgt.n	8018b8a <ip4_input+0x1d6>
 8018b62:	2b01      	cmp	r3, #1
 8018b64:	d00c      	beq.n	8018b80 <ip4_input+0x1cc>
 8018b66:	2b06      	cmp	r3, #6
 8018b68:	d005      	beq.n	8018b76 <ip4_input+0x1c2>
 8018b6a:	e00e      	b.n	8018b8a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018b6c:	6839      	ldr	r1, [r7, #0]
 8018b6e:	6878      	ldr	r0, [r7, #4]
 8018b70:	f7fe fb9c 	bl	80172ac <udp_input>
        break;
 8018b74:	e026      	b.n	8018bc4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018b76:	6839      	ldr	r1, [r7, #0]
 8018b78:	6878      	ldr	r0, [r7, #4]
 8018b7a:	f7f9 ff55 	bl	8012a28 <tcp_input>
        break;
 8018b7e:	e021      	b.n	8018bc4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018b80:	6839      	ldr	r1, [r7, #0]
 8018b82:	6878      	ldr	r0, [r7, #4]
 8018b84:	f7ff fcee 	bl	8018564 <icmp_input>
        break;
 8018b88:	e01c      	b.n	8018bc4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018b8a:	4b1a      	ldr	r3, [pc, #104]	; (8018bf4 <ip4_input+0x240>)
 8018b8c:	695b      	ldr	r3, [r3, #20]
 8018b8e:	6939      	ldr	r1, [r7, #16]
 8018b90:	4618      	mov	r0, r3
 8018b92:	f000 f90b 	bl	8018dac <ip4_addr_isbroadcast_u32>
 8018b96:	4603      	mov	r3, r0
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d10f      	bne.n	8018bbc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018b9c:	4b15      	ldr	r3, [pc, #84]	; (8018bf4 <ip4_input+0x240>)
 8018b9e:	695b      	ldr	r3, [r3, #20]
 8018ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018ba4:	2be0      	cmp	r3, #224	; 0xe0
 8018ba6:	d009      	beq.n	8018bbc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018ba8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018bac:	4619      	mov	r1, r3
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f7f7 fe21 	bl	80107f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018bb4:	2102      	movs	r1, #2
 8018bb6:	6878      	ldr	r0, [r7, #4]
 8018bb8:	f7ff fdd8 	bl	801876c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018bbc:	6878      	ldr	r0, [r7, #4]
 8018bbe:	f7f7 fe2d 	bl	801081c <pbuf_free>
        break;
 8018bc2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018bc4:	4b0b      	ldr	r3, [pc, #44]	; (8018bf4 <ip4_input+0x240>)
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018bca:	4b0a      	ldr	r3, [pc, #40]	; (8018bf4 <ip4_input+0x240>)
 8018bcc:	2200      	movs	r2, #0
 8018bce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018bd0:	4b08      	ldr	r3, [pc, #32]	; (8018bf4 <ip4_input+0x240>)
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018bd6:	4b07      	ldr	r3, [pc, #28]	; (8018bf4 <ip4_input+0x240>)
 8018bd8:	2200      	movs	r2, #0
 8018bda:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018bdc:	4b05      	ldr	r3, [pc, #20]	; (8018bf4 <ip4_input+0x240>)
 8018bde:	2200      	movs	r2, #0
 8018be0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018be2:	4b04      	ldr	r3, [pc, #16]	; (8018bf4 <ip4_input+0x240>)
 8018be4:	2200      	movs	r2, #0
 8018be6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018be8:	2300      	movs	r3, #0
}
 8018bea:	4618      	mov	r0, r3
 8018bec:	3718      	adds	r7, #24
 8018bee:	46bd      	mov	sp, r7
 8018bf0:	bd80      	pop	{r7, pc}
 8018bf2:	bf00      	nop
 8018bf4:	2004b0bc 	.word	0x2004b0bc
 8018bf8:	2004f5c4 	.word	0x2004f5c4

08018bfc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b08a      	sub	sp, #40	; 0x28
 8018c00:	af04      	add	r7, sp, #16
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
 8018c08:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d009      	beq.n	8018c28 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018c14:	68bb      	ldr	r3, [r7, #8]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d003      	beq.n	8018c22 <ip4_output_if+0x26>
 8018c1a:	68bb      	ldr	r3, [r7, #8]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d102      	bne.n	8018c28 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c24:	3304      	adds	r3, #4
 8018c26:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018c28:	78fa      	ldrb	r2, [r7, #3]
 8018c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c2c:	9302      	str	r3, [sp, #8]
 8018c2e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018c32:	9301      	str	r3, [sp, #4]
 8018c34:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018c38:	9300      	str	r3, [sp, #0]
 8018c3a:	4613      	mov	r3, r2
 8018c3c:	687a      	ldr	r2, [r7, #4]
 8018c3e:	6979      	ldr	r1, [r7, #20]
 8018c40:	68f8      	ldr	r0, [r7, #12]
 8018c42:	f000 f805 	bl	8018c50 <ip4_output_if_src>
 8018c46:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3718      	adds	r7, #24
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b088      	sub	sp, #32
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	60f8      	str	r0, [r7, #12]
 8018c58:	60b9      	str	r1, [r7, #8]
 8018c5a:	607a      	str	r2, [r7, #4]
 8018c5c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	7b9b      	ldrb	r3, [r3, #14]
 8018c62:	2b01      	cmp	r3, #1
 8018c64:	d006      	beq.n	8018c74 <ip4_output_if_src+0x24>
 8018c66:	4b4b      	ldr	r3, [pc, #300]	; (8018d94 <ip4_output_if_src+0x144>)
 8018c68:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018c6c:	494a      	ldr	r1, [pc, #296]	; (8018d98 <ip4_output_if_src+0x148>)
 8018c6e:	484b      	ldr	r0, [pc, #300]	; (8018d9c <ip4_output_if_src+0x14c>)
 8018c70:	f001 fb80 	bl	801a374 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d060      	beq.n	8018d3c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018c7a:	2314      	movs	r3, #20
 8018c7c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018c7e:	2114      	movs	r1, #20
 8018c80:	68f8      	ldr	r0, [r7, #12]
 8018c82:	f7f7 fd35 	bl	80106f0 <pbuf_add_header>
 8018c86:	4603      	mov	r3, r0
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d002      	beq.n	8018c92 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018c8c:	f06f 0301 	mvn.w	r3, #1
 8018c90:	e07c      	b.n	8018d8c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	895b      	ldrh	r3, [r3, #10]
 8018c9c:	2b13      	cmp	r3, #19
 8018c9e:	d806      	bhi.n	8018cae <ip4_output_if_src+0x5e>
 8018ca0:	4b3c      	ldr	r3, [pc, #240]	; (8018d94 <ip4_output_if_src+0x144>)
 8018ca2:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018ca6:	493e      	ldr	r1, [pc, #248]	; (8018da0 <ip4_output_if_src+0x150>)
 8018ca8:	483c      	ldr	r0, [pc, #240]	; (8018d9c <ip4_output_if_src+0x14c>)
 8018caa:	f001 fb63 	bl	801a374 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018cae:	69fb      	ldr	r3, [r7, #28]
 8018cb0:	78fa      	ldrb	r2, [r7, #3]
 8018cb2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018cb4:	69fb      	ldr	r3, [r7, #28]
 8018cb6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018cba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018cc4:	8b7b      	ldrh	r3, [r7, #26]
 8018cc6:	089b      	lsrs	r3, r3, #2
 8018cc8:	b29b      	uxth	r3, r3
 8018cca:	b2db      	uxtb	r3, r3
 8018ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cd0:	b2da      	uxtb	r2, r3
 8018cd2:	69fb      	ldr	r3, [r7, #28]
 8018cd4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018cd6:	69fb      	ldr	r3, [r7, #28]
 8018cd8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018cdc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	891b      	ldrh	r3, [r3, #8]
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7f6 f9a8 	bl	800f038 <lwip_htons>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	461a      	mov	r2, r3
 8018cec:	69fb      	ldr	r3, [r7, #28]
 8018cee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018cf0:	69fb      	ldr	r3, [r7, #28]
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	719a      	strb	r2, [r3, #6]
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018cfa:	4b2a      	ldr	r3, [pc, #168]	; (8018da4 <ip4_output_if_src+0x154>)
 8018cfc:	881b      	ldrh	r3, [r3, #0]
 8018cfe:	4618      	mov	r0, r3
 8018d00:	f7f6 f99a 	bl	800f038 <lwip_htons>
 8018d04:	4603      	mov	r3, r0
 8018d06:	461a      	mov	r2, r3
 8018d08:	69fb      	ldr	r3, [r7, #28]
 8018d0a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018d0c:	4b25      	ldr	r3, [pc, #148]	; (8018da4 <ip4_output_if_src+0x154>)
 8018d0e:	881b      	ldrh	r3, [r3, #0]
 8018d10:	3301      	adds	r3, #1
 8018d12:	b29a      	uxth	r2, r3
 8018d14:	4b23      	ldr	r3, [pc, #140]	; (8018da4 <ip4_output_if_src+0x154>)
 8018d16:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018d18:	68bb      	ldr	r3, [r7, #8]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d104      	bne.n	8018d28 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018d1e:	4b22      	ldr	r3, [pc, #136]	; (8018da8 <ip4_output_if_src+0x158>)
 8018d20:	681a      	ldr	r2, [r3, #0]
 8018d22:	69fb      	ldr	r3, [r7, #28]
 8018d24:	60da      	str	r2, [r3, #12]
 8018d26:	e003      	b.n	8018d30 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018d28:	68bb      	ldr	r3, [r7, #8]
 8018d2a:	681a      	ldr	r2, [r3, #0]
 8018d2c:	69fb      	ldr	r3, [r7, #28]
 8018d2e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018d30:	69fb      	ldr	r3, [r7, #28]
 8018d32:	2200      	movs	r2, #0
 8018d34:	729a      	strb	r2, [r3, #10]
 8018d36:	2200      	movs	r2, #0
 8018d38:	72da      	strb	r2, [r3, #11]
 8018d3a:	e00f      	b.n	8018d5c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	895b      	ldrh	r3, [r3, #10]
 8018d40:	2b13      	cmp	r3, #19
 8018d42:	d802      	bhi.n	8018d4a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018d44:	f06f 0301 	mvn.w	r3, #1
 8018d48:	e020      	b.n	8018d8c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	685b      	ldr	r3, [r3, #4]
 8018d4e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018d50:	69fb      	ldr	r3, [r7, #28]
 8018d52:	691b      	ldr	r3, [r3, #16]
 8018d54:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018d56:	f107 0314 	add.w	r3, r7, #20
 8018d5a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d00c      	beq.n	8018d7e <ip4_output_if_src+0x12e>
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	891a      	ldrh	r2, [r3, #8]
 8018d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018d6c:	429a      	cmp	r2, r3
 8018d6e:	d906      	bls.n	8018d7e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018d70:	687a      	ldr	r2, [r7, #4]
 8018d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018d74:	68f8      	ldr	r0, [r7, #12]
 8018d76:	f000 fd53 	bl	8019820 <ip4_frag>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	e006      	b.n	8018d8c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d80:	695b      	ldr	r3, [r3, #20]
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	68f9      	ldr	r1, [r7, #12]
 8018d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018d88:	4798      	blx	r3
 8018d8a:	4603      	mov	r3, r0
}
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	3720      	adds	r7, #32
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bd80      	pop	{r7, pc}
 8018d94:	0801e424 	.word	0x0801e424
 8018d98:	0801e458 	.word	0x0801e458
 8018d9c:	0801e464 	.word	0x0801e464
 8018da0:	0801e48c 	.word	0x0801e48c
 8018da4:	2004f722 	.word	0x2004f722
 8018da8:	0801e8d4 	.word	0x0801e8d4

08018dac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018dac:	b480      	push	{r7}
 8018dae:	b085      	sub	sp, #20
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
 8018db4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018dc0:	d002      	beq.n	8018dc8 <ip4_addr_isbroadcast_u32+0x1c>
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d101      	bne.n	8018dcc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018dc8:	2301      	movs	r3, #1
 8018dca:	e02a      	b.n	8018e22 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018dcc:	683b      	ldr	r3, [r7, #0]
 8018dce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018dd2:	f003 0302 	and.w	r3, r3, #2
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d101      	bne.n	8018dde <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018dda:	2300      	movs	r3, #0
 8018ddc:	e021      	b.n	8018e22 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	3304      	adds	r3, #4
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	687a      	ldr	r2, [r7, #4]
 8018de6:	429a      	cmp	r2, r3
 8018de8:	d101      	bne.n	8018dee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018dea:	2300      	movs	r3, #0
 8018dec:	e019      	b.n	8018e22 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018dee:	68fa      	ldr	r2, [r7, #12]
 8018df0:	683b      	ldr	r3, [r7, #0]
 8018df2:	3304      	adds	r3, #4
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	405a      	eors	r2, r3
 8018df8:	683b      	ldr	r3, [r7, #0]
 8018dfa:	3308      	adds	r3, #8
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	4013      	ands	r3, r2
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d10d      	bne.n	8018e20 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018e04:	683b      	ldr	r3, [r7, #0]
 8018e06:	3308      	adds	r3, #8
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	43da      	mvns	r2, r3
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018e10:	683b      	ldr	r3, [r7, #0]
 8018e12:	3308      	adds	r3, #8
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018e18:	429a      	cmp	r2, r3
 8018e1a:	d101      	bne.n	8018e20 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018e1c:	2301      	movs	r3, #1
 8018e1e:	e000      	b.n	8018e22 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018e20:	2300      	movs	r3, #0
  }
}
 8018e22:	4618      	mov	r0, r3
 8018e24:	3714      	adds	r7, #20
 8018e26:	46bd      	mov	sp, r7
 8018e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2c:	4770      	bx	lr
	...

08018e30 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b084      	sub	sp, #16
 8018e34:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018e36:	2300      	movs	r3, #0
 8018e38:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018e3a:	4b12      	ldr	r3, [pc, #72]	; (8018e84 <ip_reass_tmr+0x54>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018e40:	e018      	b.n	8018e74 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	7fdb      	ldrb	r3, [r3, #31]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d00b      	beq.n	8018e62 <ip_reass_tmr+0x32>
      r->timer--;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	7fdb      	ldrb	r3, [r3, #31]
 8018e4e:	3b01      	subs	r3, #1
 8018e50:	b2da      	uxtb	r2, r3
 8018e52:	68fb      	ldr	r3, [r7, #12]
 8018e54:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	60fb      	str	r3, [r7, #12]
 8018e60:	e008      	b.n	8018e74 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018e6c:	68b9      	ldr	r1, [r7, #8]
 8018e6e:	6878      	ldr	r0, [r7, #4]
 8018e70:	f000 f80a 	bl	8018e88 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d1e3      	bne.n	8018e42 <ip_reass_tmr+0x12>
    }
  }
}
 8018e7a:	bf00      	nop
 8018e7c:	bf00      	nop
 8018e7e:	3710      	adds	r7, #16
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	2004f724 	.word	0x2004f724

08018e88 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b088      	sub	sp, #32
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018e92:	2300      	movs	r3, #0
 8018e94:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018e96:	683a      	ldr	r2, [r7, #0]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d105      	bne.n	8018eaa <ip_reass_free_complete_datagram+0x22>
 8018e9e:	4b45      	ldr	r3, [pc, #276]	; (8018fb4 <ip_reass_free_complete_datagram+0x12c>)
 8018ea0:	22ab      	movs	r2, #171	; 0xab
 8018ea2:	4945      	ldr	r1, [pc, #276]	; (8018fb8 <ip_reass_free_complete_datagram+0x130>)
 8018ea4:	4845      	ldr	r0, [pc, #276]	; (8018fbc <ip_reass_free_complete_datagram+0x134>)
 8018ea6:	f001 fa65 	bl	801a374 <iprintf>
  if (prev != NULL) {
 8018eaa:	683b      	ldr	r3, [r7, #0]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d00a      	beq.n	8018ec6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	687a      	ldr	r2, [r7, #4]
 8018eb6:	429a      	cmp	r2, r3
 8018eb8:	d005      	beq.n	8018ec6 <ip_reass_free_complete_datagram+0x3e>
 8018eba:	4b3e      	ldr	r3, [pc, #248]	; (8018fb4 <ip_reass_free_complete_datagram+0x12c>)
 8018ebc:	22ad      	movs	r2, #173	; 0xad
 8018ebe:	4940      	ldr	r1, [pc, #256]	; (8018fc0 <ip_reass_free_complete_datagram+0x138>)
 8018ec0:	483e      	ldr	r0, [pc, #248]	; (8018fbc <ip_reass_free_complete_datagram+0x134>)
 8018ec2:	f001 fa57 	bl	801a374 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	685b      	ldr	r3, [r3, #4]
 8018eca:	685b      	ldr	r3, [r3, #4]
 8018ecc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018ece:	697b      	ldr	r3, [r7, #20]
 8018ed0:	889b      	ldrh	r3, [r3, #4]
 8018ed2:	b29b      	uxth	r3, r3
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d12a      	bne.n	8018f2e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	685b      	ldr	r3, [r3, #4]
 8018edc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	681a      	ldr	r2, [r3, #0]
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018ee6:	69bb      	ldr	r3, [r7, #24]
 8018ee8:	6858      	ldr	r0, [r3, #4]
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	3308      	adds	r3, #8
 8018eee:	2214      	movs	r2, #20
 8018ef0:	4619      	mov	r1, r3
 8018ef2:	f001 f994 	bl	801a21e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018ef6:	2101      	movs	r1, #1
 8018ef8:	69b8      	ldr	r0, [r7, #24]
 8018efa:	f7ff fc47 	bl	801878c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018efe:	69b8      	ldr	r0, [r7, #24]
 8018f00:	f7f7 fd1a 	bl	8010938 <pbuf_clen>
 8018f04:	4603      	mov	r3, r0
 8018f06:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018f08:	8bfa      	ldrh	r2, [r7, #30]
 8018f0a:	8a7b      	ldrh	r3, [r7, #18]
 8018f0c:	4413      	add	r3, r2
 8018f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f12:	db05      	blt.n	8018f20 <ip_reass_free_complete_datagram+0x98>
 8018f14:	4b27      	ldr	r3, [pc, #156]	; (8018fb4 <ip_reass_free_complete_datagram+0x12c>)
 8018f16:	22bc      	movs	r2, #188	; 0xbc
 8018f18:	492a      	ldr	r1, [pc, #168]	; (8018fc4 <ip_reass_free_complete_datagram+0x13c>)
 8018f1a:	4828      	ldr	r0, [pc, #160]	; (8018fbc <ip_reass_free_complete_datagram+0x134>)
 8018f1c:	f001 fa2a 	bl	801a374 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018f20:	8bfa      	ldrh	r2, [r7, #30]
 8018f22:	8a7b      	ldrh	r3, [r7, #18]
 8018f24:	4413      	add	r3, r2
 8018f26:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018f28:	69b8      	ldr	r0, [r7, #24]
 8018f2a:	f7f7 fc77 	bl	801081c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	685b      	ldr	r3, [r3, #4]
 8018f32:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018f34:	e01f      	b.n	8018f76 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018f36:	69bb      	ldr	r3, [r7, #24]
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018f3c:	69bb      	ldr	r3, [r7, #24]
 8018f3e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018f40:	697b      	ldr	r3, [r7, #20]
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018f46:	68f8      	ldr	r0, [r7, #12]
 8018f48:	f7f7 fcf6 	bl	8010938 <pbuf_clen>
 8018f4c:	4603      	mov	r3, r0
 8018f4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018f50:	8bfa      	ldrh	r2, [r7, #30]
 8018f52:	8a7b      	ldrh	r3, [r7, #18]
 8018f54:	4413      	add	r3, r2
 8018f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f5a:	db05      	blt.n	8018f68 <ip_reass_free_complete_datagram+0xe0>
 8018f5c:	4b15      	ldr	r3, [pc, #84]	; (8018fb4 <ip_reass_free_complete_datagram+0x12c>)
 8018f5e:	22cc      	movs	r2, #204	; 0xcc
 8018f60:	4918      	ldr	r1, [pc, #96]	; (8018fc4 <ip_reass_free_complete_datagram+0x13c>)
 8018f62:	4816      	ldr	r0, [pc, #88]	; (8018fbc <ip_reass_free_complete_datagram+0x134>)
 8018f64:	f001 fa06 	bl	801a374 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018f68:	8bfa      	ldrh	r2, [r7, #30]
 8018f6a:	8a7b      	ldrh	r3, [r7, #18]
 8018f6c:	4413      	add	r3, r2
 8018f6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018f70:	68f8      	ldr	r0, [r7, #12]
 8018f72:	f7f7 fc53 	bl	801081c <pbuf_free>
  while (p != NULL) {
 8018f76:	69bb      	ldr	r3, [r7, #24]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d1dc      	bne.n	8018f36 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018f7c:	6839      	ldr	r1, [r7, #0]
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f000 f8c2 	bl	8019108 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018f84:	4b10      	ldr	r3, [pc, #64]	; (8018fc8 <ip_reass_free_complete_datagram+0x140>)
 8018f86:	881b      	ldrh	r3, [r3, #0]
 8018f88:	8bfa      	ldrh	r2, [r7, #30]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d905      	bls.n	8018f9a <ip_reass_free_complete_datagram+0x112>
 8018f8e:	4b09      	ldr	r3, [pc, #36]	; (8018fb4 <ip_reass_free_complete_datagram+0x12c>)
 8018f90:	22d2      	movs	r2, #210	; 0xd2
 8018f92:	490e      	ldr	r1, [pc, #56]	; (8018fcc <ip_reass_free_complete_datagram+0x144>)
 8018f94:	4809      	ldr	r0, [pc, #36]	; (8018fbc <ip_reass_free_complete_datagram+0x134>)
 8018f96:	f001 f9ed 	bl	801a374 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018f9a:	4b0b      	ldr	r3, [pc, #44]	; (8018fc8 <ip_reass_free_complete_datagram+0x140>)
 8018f9c:	881a      	ldrh	r2, [r3, #0]
 8018f9e:	8bfb      	ldrh	r3, [r7, #30]
 8018fa0:	1ad3      	subs	r3, r2, r3
 8018fa2:	b29a      	uxth	r2, r3
 8018fa4:	4b08      	ldr	r3, [pc, #32]	; (8018fc8 <ip_reass_free_complete_datagram+0x140>)
 8018fa6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018fa8:	8bfb      	ldrh	r3, [r7, #30]
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3720      	adds	r7, #32
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}
 8018fb2:	bf00      	nop
 8018fb4:	0801e4bc 	.word	0x0801e4bc
 8018fb8:	0801e4f8 	.word	0x0801e4f8
 8018fbc:	0801e504 	.word	0x0801e504
 8018fc0:	0801e52c 	.word	0x0801e52c
 8018fc4:	0801e540 	.word	0x0801e540
 8018fc8:	2004f728 	.word	0x2004f728
 8018fcc:	0801e560 	.word	0x0801e560

08018fd0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b08a      	sub	sp, #40	; 0x28
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018fde:	2300      	movs	r3, #0
 8018fe0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018fe2:	2300      	movs	r3, #0
 8018fe4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018fea:	2300      	movs	r3, #0
 8018fec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018fee:	4b28      	ldr	r3, [pc, #160]	; (8019090 <ip_reass_remove_oldest_datagram+0xc0>)
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ff4:	e030      	b.n	8019058 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff8:	695a      	ldr	r2, [r3, #20]
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	68db      	ldr	r3, [r3, #12]
 8018ffe:	429a      	cmp	r2, r3
 8019000:	d10c      	bne.n	801901c <ip_reass_remove_oldest_datagram+0x4c>
 8019002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019004:	699a      	ldr	r2, [r3, #24]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	691b      	ldr	r3, [r3, #16]
 801900a:	429a      	cmp	r2, r3
 801900c:	d106      	bne.n	801901c <ip_reass_remove_oldest_datagram+0x4c>
 801900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019010:	899a      	ldrh	r2, [r3, #12]
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	889b      	ldrh	r3, [r3, #4]
 8019016:	b29b      	uxth	r3, r3
 8019018:	429a      	cmp	r2, r3
 801901a:	d014      	beq.n	8019046 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801901c:	693b      	ldr	r3, [r7, #16]
 801901e:	3301      	adds	r3, #1
 8019020:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019022:	6a3b      	ldr	r3, [r7, #32]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d104      	bne.n	8019032 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801902a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801902c:	69fb      	ldr	r3, [r7, #28]
 801902e:	61bb      	str	r3, [r7, #24]
 8019030:	e009      	b.n	8019046 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019034:	7fda      	ldrb	r2, [r3, #31]
 8019036:	6a3b      	ldr	r3, [r7, #32]
 8019038:	7fdb      	ldrb	r3, [r3, #31]
 801903a:	429a      	cmp	r2, r3
 801903c:	d803      	bhi.n	8019046 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019040:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019042:	69fb      	ldr	r3, [r7, #28]
 8019044:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019048:	681b      	ldr	r3, [r3, #0]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d001      	beq.n	8019052 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019050:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801905a:	2b00      	cmp	r3, #0
 801905c:	d1cb      	bne.n	8018ff6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801905e:	6a3b      	ldr	r3, [r7, #32]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d008      	beq.n	8019076 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019064:	69b9      	ldr	r1, [r7, #24]
 8019066:	6a38      	ldr	r0, [r7, #32]
 8019068:	f7ff ff0e 	bl	8018e88 <ip_reass_free_complete_datagram>
 801906c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801906e:	697a      	ldr	r2, [r7, #20]
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	4413      	add	r3, r2
 8019074:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019076:	697a      	ldr	r2, [r7, #20]
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	429a      	cmp	r2, r3
 801907c:	da02      	bge.n	8019084 <ip_reass_remove_oldest_datagram+0xb4>
 801907e:	693b      	ldr	r3, [r7, #16]
 8019080:	2b01      	cmp	r3, #1
 8019082:	dcac      	bgt.n	8018fde <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019084:	697b      	ldr	r3, [r7, #20]
}
 8019086:	4618      	mov	r0, r3
 8019088:	3728      	adds	r7, #40	; 0x28
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	2004f724 	.word	0x2004f724

08019094 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019094:	b580      	push	{r7, lr}
 8019096:	b084      	sub	sp, #16
 8019098:	af00      	add	r7, sp, #0
 801909a:	6078      	str	r0, [r7, #4]
 801909c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801909e:	2004      	movs	r0, #4
 80190a0:	f7f6 fca2 	bl	800f9e8 <memp_malloc>
 80190a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d110      	bne.n	80190ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80190ac:	6839      	ldr	r1, [r7, #0]
 80190ae:	6878      	ldr	r0, [r7, #4]
 80190b0:	f7ff ff8e 	bl	8018fd0 <ip_reass_remove_oldest_datagram>
 80190b4:	4602      	mov	r2, r0
 80190b6:	683b      	ldr	r3, [r7, #0]
 80190b8:	4293      	cmp	r3, r2
 80190ba:	dc03      	bgt.n	80190c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80190bc:	2004      	movs	r0, #4
 80190be:	f7f6 fc93 	bl	800f9e8 <memp_malloc>
 80190c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80190c4:	68fb      	ldr	r3, [r7, #12]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d101      	bne.n	80190ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80190ca:	2300      	movs	r3, #0
 80190cc:	e016      	b.n	80190fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80190ce:	2220      	movs	r2, #32
 80190d0:	2100      	movs	r1, #0
 80190d2:	68f8      	ldr	r0, [r7, #12]
 80190d4:	f001 f8b1 	bl	801a23a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80190d8:	68fb      	ldr	r3, [r7, #12]
 80190da:	220f      	movs	r2, #15
 80190dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80190de:	4b09      	ldr	r3, [pc, #36]	; (8019104 <ip_reass_enqueue_new_datagram+0x70>)
 80190e0:	681a      	ldr	r2, [r3, #0]
 80190e2:	68fb      	ldr	r3, [r7, #12]
 80190e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80190e6:	4a07      	ldr	r2, [pc, #28]	; (8019104 <ip_reass_enqueue_new_datagram+0x70>)
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	3308      	adds	r3, #8
 80190f0:	2214      	movs	r2, #20
 80190f2:	6879      	ldr	r1, [r7, #4]
 80190f4:	4618      	mov	r0, r3
 80190f6:	f001 f892 	bl	801a21e <memcpy>
  return ipr;
 80190fa:	68fb      	ldr	r3, [r7, #12]
}
 80190fc:	4618      	mov	r0, r3
 80190fe:	3710      	adds	r7, #16
 8019100:	46bd      	mov	sp, r7
 8019102:	bd80      	pop	{r7, pc}
 8019104:	2004f724 	.word	0x2004f724

08019108 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b082      	sub	sp, #8
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
 8019110:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019112:	4b10      	ldr	r3, [pc, #64]	; (8019154 <ip_reass_dequeue_datagram+0x4c>)
 8019114:	681b      	ldr	r3, [r3, #0]
 8019116:	687a      	ldr	r2, [r7, #4]
 8019118:	429a      	cmp	r2, r3
 801911a:	d104      	bne.n	8019126 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	4a0c      	ldr	r2, [pc, #48]	; (8019154 <ip_reass_dequeue_datagram+0x4c>)
 8019122:	6013      	str	r3, [r2, #0]
 8019124:	e00d      	b.n	8019142 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019126:	683b      	ldr	r3, [r7, #0]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d106      	bne.n	801913a <ip_reass_dequeue_datagram+0x32>
 801912c:	4b0a      	ldr	r3, [pc, #40]	; (8019158 <ip_reass_dequeue_datagram+0x50>)
 801912e:	f240 1245 	movw	r2, #325	; 0x145
 8019132:	490a      	ldr	r1, [pc, #40]	; (801915c <ip_reass_dequeue_datagram+0x54>)
 8019134:	480a      	ldr	r0, [pc, #40]	; (8019160 <ip_reass_dequeue_datagram+0x58>)
 8019136:	f001 f91d 	bl	801a374 <iprintf>
    prev->next = ipr->next;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681a      	ldr	r2, [r3, #0]
 801913e:	683b      	ldr	r3, [r7, #0]
 8019140:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019142:	6879      	ldr	r1, [r7, #4]
 8019144:	2004      	movs	r0, #4
 8019146:	f7f6 fcc5 	bl	800fad4 <memp_free>
}
 801914a:	bf00      	nop
 801914c:	3708      	adds	r7, #8
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	2004f724 	.word	0x2004f724
 8019158:	0801e4bc 	.word	0x0801e4bc
 801915c:	0801e584 	.word	0x0801e584
 8019160:	0801e504 	.word	0x0801e504

08019164 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019164:	b580      	push	{r7, lr}
 8019166:	b08c      	sub	sp, #48	; 0x30
 8019168:	af00      	add	r7, sp, #0
 801916a:	60f8      	str	r0, [r7, #12]
 801916c:	60b9      	str	r1, [r7, #8]
 801916e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019170:	2300      	movs	r3, #0
 8019172:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019174:	2301      	movs	r3, #1
 8019176:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	685b      	ldr	r3, [r3, #4]
 801917c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801917e:	69fb      	ldr	r3, [r7, #28]
 8019180:	885b      	ldrh	r3, [r3, #2]
 8019182:	b29b      	uxth	r3, r3
 8019184:	4618      	mov	r0, r3
 8019186:	f7f5 ff57 	bl	800f038 <lwip_htons>
 801918a:	4603      	mov	r3, r0
 801918c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801918e:	69fb      	ldr	r3, [r7, #28]
 8019190:	781b      	ldrb	r3, [r3, #0]
 8019192:	f003 030f 	and.w	r3, r3, #15
 8019196:	b2db      	uxtb	r3, r3
 8019198:	009b      	lsls	r3, r3, #2
 801919a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801919c:	7e7b      	ldrb	r3, [r7, #25]
 801919e:	b29b      	uxth	r3, r3
 80191a0:	8b7a      	ldrh	r2, [r7, #26]
 80191a2:	429a      	cmp	r2, r3
 80191a4:	d202      	bcs.n	80191ac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80191a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80191aa:	e135      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80191ac:	7e7b      	ldrb	r3, [r7, #25]
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	8b7a      	ldrh	r2, [r7, #26]
 80191b2:	1ad3      	subs	r3, r2, r3
 80191b4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80191b6:	69fb      	ldr	r3, [r7, #28]
 80191b8:	88db      	ldrh	r3, [r3, #6]
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	4618      	mov	r0, r3
 80191be:	f7f5 ff3b 	bl	800f038 <lwip_htons>
 80191c2:	4603      	mov	r3, r0
 80191c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	00db      	lsls	r3, r3, #3
 80191cc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80191ce:	68bb      	ldr	r3, [r7, #8]
 80191d0:	685b      	ldr	r3, [r3, #4]
 80191d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80191d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191d6:	2200      	movs	r2, #0
 80191d8:	701a      	strb	r2, [r3, #0]
 80191da:	2200      	movs	r2, #0
 80191dc:	705a      	strb	r2, [r3, #1]
 80191de:	2200      	movs	r2, #0
 80191e0:	709a      	strb	r2, [r3, #2]
 80191e2:	2200      	movs	r2, #0
 80191e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80191e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191e8:	8afa      	ldrh	r2, [r7, #22]
 80191ea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80191ec:	8afa      	ldrh	r2, [r7, #22]
 80191ee:	8b7b      	ldrh	r3, [r7, #26]
 80191f0:	4413      	add	r3, r2
 80191f2:	b29a      	uxth	r2, r3
 80191f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191f6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80191f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191fa:	88db      	ldrh	r3, [r3, #6]
 80191fc:	b29b      	uxth	r3, r3
 80191fe:	8afa      	ldrh	r2, [r7, #22]
 8019200:	429a      	cmp	r2, r3
 8019202:	d902      	bls.n	801920a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019208:	e106      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	685b      	ldr	r3, [r3, #4]
 801920e:	627b      	str	r3, [r7, #36]	; 0x24
 8019210:	e068      	b.n	80192e4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019214:	685b      	ldr	r3, [r3, #4]
 8019216:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801921a:	889b      	ldrh	r3, [r3, #4]
 801921c:	b29a      	uxth	r2, r3
 801921e:	693b      	ldr	r3, [r7, #16]
 8019220:	889b      	ldrh	r3, [r3, #4]
 8019222:	b29b      	uxth	r3, r3
 8019224:	429a      	cmp	r2, r3
 8019226:	d235      	bcs.n	8019294 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801922a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801922c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019230:	2b00      	cmp	r3, #0
 8019232:	d020      	beq.n	8019276 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019236:	889b      	ldrh	r3, [r3, #4]
 8019238:	b29a      	uxth	r2, r3
 801923a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801923c:	88db      	ldrh	r3, [r3, #6]
 801923e:	b29b      	uxth	r3, r3
 8019240:	429a      	cmp	r2, r3
 8019242:	d307      	bcc.n	8019254 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019246:	88db      	ldrh	r3, [r3, #6]
 8019248:	b29a      	uxth	r2, r3
 801924a:	693b      	ldr	r3, [r7, #16]
 801924c:	889b      	ldrh	r3, [r3, #4]
 801924e:	b29b      	uxth	r3, r3
 8019250:	429a      	cmp	r2, r3
 8019252:	d902      	bls.n	801925a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019258:	e0de      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801925c:	68ba      	ldr	r2, [r7, #8]
 801925e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019262:	88db      	ldrh	r3, [r3, #6]
 8019264:	b29a      	uxth	r2, r3
 8019266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019268:	889b      	ldrh	r3, [r3, #4]
 801926a:	b29b      	uxth	r3, r3
 801926c:	429a      	cmp	r2, r3
 801926e:	d03d      	beq.n	80192ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019270:	2300      	movs	r3, #0
 8019272:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019274:	e03a      	b.n	80192ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019278:	88db      	ldrh	r3, [r3, #6]
 801927a:	b29a      	uxth	r2, r3
 801927c:	693b      	ldr	r3, [r7, #16]
 801927e:	889b      	ldrh	r3, [r3, #4]
 8019280:	b29b      	uxth	r3, r3
 8019282:	429a      	cmp	r2, r3
 8019284:	d902      	bls.n	801928c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801928a:	e0c5      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	68ba      	ldr	r2, [r7, #8]
 8019290:	605a      	str	r2, [r3, #4]
      break;
 8019292:	e02b      	b.n	80192ec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019296:	889b      	ldrh	r3, [r3, #4]
 8019298:	b29a      	uxth	r2, r3
 801929a:	693b      	ldr	r3, [r7, #16]
 801929c:	889b      	ldrh	r3, [r3, #4]
 801929e:	b29b      	uxth	r3, r3
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d102      	bne.n	80192aa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80192a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192a8:	e0b6      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80192aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192ac:	889b      	ldrh	r3, [r3, #4]
 80192ae:	b29a      	uxth	r2, r3
 80192b0:	693b      	ldr	r3, [r7, #16]
 80192b2:	88db      	ldrh	r3, [r3, #6]
 80192b4:	b29b      	uxth	r3, r3
 80192b6:	429a      	cmp	r2, r3
 80192b8:	d202      	bcs.n	80192c0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80192ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192be:	e0ab      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80192c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d009      	beq.n	80192da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80192c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c8:	88db      	ldrh	r3, [r3, #6]
 80192ca:	b29a      	uxth	r2, r3
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	889b      	ldrh	r3, [r3, #4]
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d001      	beq.n	80192da <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80192d6:	2300      	movs	r3, #0
 80192d8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80192da:	693b      	ldr	r3, [r7, #16]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80192e0:	693b      	ldr	r3, [r7, #16]
 80192e2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80192e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d193      	bne.n	8019212 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80192ea:	e000      	b.n	80192ee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80192ec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80192ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d12d      	bne.n	8019350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80192f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d01c      	beq.n	8019334 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80192fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192fc:	88db      	ldrh	r3, [r3, #6]
 80192fe:	b29a      	uxth	r2, r3
 8019300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019302:	889b      	ldrh	r3, [r3, #4]
 8019304:	b29b      	uxth	r3, r3
 8019306:	429a      	cmp	r2, r3
 8019308:	d906      	bls.n	8019318 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801930a:	4b45      	ldr	r3, [pc, #276]	; (8019420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801930c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019310:	4944      	ldr	r1, [pc, #272]	; (8019424 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019312:	4845      	ldr	r0, [pc, #276]	; (8019428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019314:	f001 f82e 	bl	801a374 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801931a:	68ba      	ldr	r2, [r7, #8]
 801931c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019320:	88db      	ldrh	r3, [r3, #6]
 8019322:	b29a      	uxth	r2, r3
 8019324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019326:	889b      	ldrh	r3, [r3, #4]
 8019328:	b29b      	uxth	r3, r3
 801932a:	429a      	cmp	r2, r3
 801932c:	d010      	beq.n	8019350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801932e:	2300      	movs	r3, #0
 8019330:	623b      	str	r3, [r7, #32]
 8019332:	e00d      	b.n	8019350 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	685b      	ldr	r3, [r3, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d006      	beq.n	801934a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801933c:	4b38      	ldr	r3, [pc, #224]	; (8019420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801933e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019342:	493a      	ldr	r1, [pc, #232]	; (801942c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019344:	4838      	ldr	r0, [pc, #224]	; (8019428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019346:	f001 f815 	bl	801a374 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	68ba      	ldr	r2, [r7, #8]
 801934e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	2b00      	cmp	r3, #0
 8019354:	d105      	bne.n	8019362 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	7f9b      	ldrb	r3, [r3, #30]
 801935a:	f003 0301 	and.w	r3, r3, #1
 801935e:	2b00      	cmp	r3, #0
 8019360:	d059      	beq.n	8019416 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019362:	6a3b      	ldr	r3, [r7, #32]
 8019364:	2b00      	cmp	r3, #0
 8019366:	d04f      	beq.n	8019408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	685b      	ldr	r3, [r3, #4]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d006      	beq.n	801937e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	685b      	ldr	r3, [r3, #4]
 8019374:	685b      	ldr	r3, [r3, #4]
 8019376:	889b      	ldrh	r3, [r3, #4]
 8019378:	b29b      	uxth	r3, r3
 801937a:	2b00      	cmp	r3, #0
 801937c:	d002      	beq.n	8019384 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801937e:	2300      	movs	r3, #0
 8019380:	623b      	str	r3, [r7, #32]
 8019382:	e041      	b.n	8019408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019386:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801938e:	e012      	b.n	80193b6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019392:	685b      	ldr	r3, [r3, #4]
 8019394:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019398:	88db      	ldrh	r3, [r3, #6]
 801939a:	b29a      	uxth	r2, r3
 801939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801939e:	889b      	ldrh	r3, [r3, #4]
 80193a0:	b29b      	uxth	r3, r3
 80193a2:	429a      	cmp	r2, r3
 80193a4:	d002      	beq.n	80193ac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80193a6:	2300      	movs	r3, #0
 80193a8:	623b      	str	r3, [r7, #32]
            break;
 80193aa:	e007      	b.n	80193bc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80193ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193ae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80193b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193b2:	681b      	ldr	r3, [r3, #0]
 80193b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80193b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d1e9      	bne.n	8019390 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80193bc:	6a3b      	ldr	r3, [r7, #32]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d022      	beq.n	8019408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	685b      	ldr	r3, [r3, #4]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d106      	bne.n	80193d8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80193ca:	4b15      	ldr	r3, [pc, #84]	; (8019420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80193cc:	f240 12df 	movw	r2, #479	; 0x1df
 80193d0:	4917      	ldr	r1, [pc, #92]	; (8019430 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80193d2:	4815      	ldr	r0, [pc, #84]	; (8019428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80193d4:	f000 ffce 	bl	801a374 <iprintf>
          LWIP_ASSERT("sanity check",
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	685b      	ldr	r3, [r3, #4]
 80193dc:	685b      	ldr	r3, [r3, #4]
 80193de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d106      	bne.n	80193f2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80193e4:	4b0e      	ldr	r3, [pc, #56]	; (8019420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80193e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80193ea:	4911      	ldr	r1, [pc, #68]	; (8019430 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80193ec:	480e      	ldr	r0, [pc, #56]	; (8019428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80193ee:	f000 ffc1 	bl	801a374 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80193f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d006      	beq.n	8019408 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80193fa:	4b09      	ldr	r3, [pc, #36]	; (8019420 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80193fc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019400:	490c      	ldr	r1, [pc, #48]	; (8019434 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019402:	4809      	ldr	r0, [pc, #36]	; (8019428 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019404:	f000 ffb6 	bl	801a374 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019408:	6a3b      	ldr	r3, [r7, #32]
 801940a:	2b00      	cmp	r3, #0
 801940c:	bf14      	ite	ne
 801940e:	2301      	movne	r3, #1
 8019410:	2300      	moveq	r3, #0
 8019412:	b2db      	uxtb	r3, r3
 8019414:	e000      	b.n	8019418 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019416:	2300      	movs	r3, #0
}
 8019418:	4618      	mov	r0, r3
 801941a:	3730      	adds	r7, #48	; 0x30
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}
 8019420:	0801e4bc 	.word	0x0801e4bc
 8019424:	0801e5a0 	.word	0x0801e5a0
 8019428:	0801e504 	.word	0x0801e504
 801942c:	0801e5c0 	.word	0x0801e5c0
 8019430:	0801e5f8 	.word	0x0801e5f8
 8019434:	0801e608 	.word	0x0801e608

08019438 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019438:	b580      	push	{r7, lr}
 801943a:	b08e      	sub	sp, #56	; 0x38
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	685b      	ldr	r3, [r3, #4]
 8019444:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8019446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019448:	781b      	ldrb	r3, [r3, #0]
 801944a:	f003 030f 	and.w	r3, r3, #15
 801944e:	b2db      	uxtb	r3, r3
 8019450:	009b      	lsls	r3, r3, #2
 8019452:	b2db      	uxtb	r3, r3
 8019454:	2b14      	cmp	r3, #20
 8019456:	f040 8171 	bne.w	801973c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801945a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945c:	88db      	ldrh	r3, [r3, #6]
 801945e:	b29b      	uxth	r3, r3
 8019460:	4618      	mov	r0, r3
 8019462:	f7f5 fde9 	bl	800f038 <lwip_htons>
 8019466:	4603      	mov	r3, r0
 8019468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801946c:	b29b      	uxth	r3, r3
 801946e:	00db      	lsls	r3, r3, #3
 8019470:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019474:	885b      	ldrh	r3, [r3, #2]
 8019476:	b29b      	uxth	r3, r3
 8019478:	4618      	mov	r0, r3
 801947a:	f7f5 fddd 	bl	800f038 <lwip_htons>
 801947e:	4603      	mov	r3, r0
 8019480:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019484:	781b      	ldrb	r3, [r3, #0]
 8019486:	f003 030f 	and.w	r3, r3, #15
 801948a:	b2db      	uxtb	r3, r3
 801948c:	009b      	lsls	r3, r3, #2
 801948e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019492:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019496:	b29b      	uxth	r3, r3
 8019498:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801949a:	429a      	cmp	r2, r3
 801949c:	f0c0 8150 	bcc.w	8019740 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80194a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80194a8:	1ad3      	subs	r3, r2, r3
 80194aa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	f7f7 fa43 	bl	8010938 <pbuf_clen>
 80194b2:	4603      	mov	r3, r0
 80194b4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80194b6:	4b8c      	ldr	r3, [pc, #560]	; (80196e8 <ip4_reass+0x2b0>)
 80194b8:	881b      	ldrh	r3, [r3, #0]
 80194ba:	461a      	mov	r2, r3
 80194bc:	8c3b      	ldrh	r3, [r7, #32]
 80194be:	4413      	add	r3, r2
 80194c0:	2b0a      	cmp	r3, #10
 80194c2:	dd10      	ble.n	80194e6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80194c4:	8c3b      	ldrh	r3, [r7, #32]
 80194c6:	4619      	mov	r1, r3
 80194c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194ca:	f7ff fd81 	bl	8018fd0 <ip_reass_remove_oldest_datagram>
 80194ce:	4603      	mov	r3, r0
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	f000 8137 	beq.w	8019744 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80194d6:	4b84      	ldr	r3, [pc, #528]	; (80196e8 <ip4_reass+0x2b0>)
 80194d8:	881b      	ldrh	r3, [r3, #0]
 80194da:	461a      	mov	r2, r3
 80194dc:	8c3b      	ldrh	r3, [r7, #32]
 80194de:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80194e0:	2b0a      	cmp	r3, #10
 80194e2:	f300 812f 	bgt.w	8019744 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80194e6:	4b81      	ldr	r3, [pc, #516]	; (80196ec <ip4_reass+0x2b4>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	633b      	str	r3, [r7, #48]	; 0x30
 80194ec:	e015      	b.n	801951a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80194ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194f0:	695a      	ldr	r2, [r3, #20]
 80194f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194f4:	68db      	ldr	r3, [r3, #12]
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d10c      	bne.n	8019514 <ip4_reass+0xdc>
 80194fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194fc:	699a      	ldr	r2, [r3, #24]
 80194fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019500:	691b      	ldr	r3, [r3, #16]
 8019502:	429a      	cmp	r2, r3
 8019504:	d106      	bne.n	8019514 <ip4_reass+0xdc>
 8019506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019508:	899a      	ldrh	r2, [r3, #12]
 801950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950c:	889b      	ldrh	r3, [r3, #4]
 801950e:	b29b      	uxth	r3, r3
 8019510:	429a      	cmp	r2, r3
 8019512:	d006      	beq.n	8019522 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8019514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	633b      	str	r3, [r7, #48]	; 0x30
 801951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801951c:	2b00      	cmp	r3, #0
 801951e:	d1e6      	bne.n	80194ee <ip4_reass+0xb6>
 8019520:	e000      	b.n	8019524 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8019522:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8019524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019526:	2b00      	cmp	r3, #0
 8019528:	d109      	bne.n	801953e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801952a:	8c3b      	ldrh	r3, [r7, #32]
 801952c:	4619      	mov	r1, r3
 801952e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019530:	f7ff fdb0 	bl	8019094 <ip_reass_enqueue_new_datagram>
 8019534:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019538:	2b00      	cmp	r3, #0
 801953a:	d11c      	bne.n	8019576 <ip4_reass+0x13e>
      goto nullreturn;
 801953c:	e105      	b.n	801974a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019540:	88db      	ldrh	r3, [r3, #6]
 8019542:	b29b      	uxth	r3, r3
 8019544:	4618      	mov	r0, r3
 8019546:	f7f5 fd77 	bl	800f038 <lwip_htons>
 801954a:	4603      	mov	r3, r0
 801954c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019550:	2b00      	cmp	r3, #0
 8019552:	d110      	bne.n	8019576 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019556:	89db      	ldrh	r3, [r3, #14]
 8019558:	4618      	mov	r0, r3
 801955a:	f7f5 fd6d 	bl	800f038 <lwip_htons>
 801955e:	4603      	mov	r3, r0
 8019560:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019564:	2b00      	cmp	r3, #0
 8019566:	d006      	beq.n	8019576 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801956a:	3308      	adds	r3, #8
 801956c:	2214      	movs	r2, #20
 801956e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019570:	4618      	mov	r0, r3
 8019572:	f000 fe54 	bl	801a21e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019578:	88db      	ldrh	r3, [r3, #6]
 801957a:	b29b      	uxth	r3, r3
 801957c:	f003 0320 	and.w	r3, r3, #32
 8019580:	2b00      	cmp	r3, #0
 8019582:	bf0c      	ite	eq
 8019584:	2301      	moveq	r3, #1
 8019586:	2300      	movne	r3, #0
 8019588:	b2db      	uxtb	r3, r3
 801958a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801958c:	69fb      	ldr	r3, [r7, #28]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d00e      	beq.n	80195b0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019592:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019594:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019596:	4413      	add	r3, r2
 8019598:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801959a:	8b7a      	ldrh	r2, [r7, #26]
 801959c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801959e:	429a      	cmp	r2, r3
 80195a0:	f0c0 80a0 	bcc.w	80196e4 <ip4_reass+0x2ac>
 80195a4:	8b7b      	ldrh	r3, [r7, #26]
 80195a6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80195aa:	4293      	cmp	r3, r2
 80195ac:	f200 809a 	bhi.w	80196e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80195b0:	69fa      	ldr	r2, [r7, #28]
 80195b2:	6879      	ldr	r1, [r7, #4]
 80195b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195b6:	f7ff fdd5 	bl	8019164 <ip_reass_chain_frag_into_datagram_and_validate>
 80195ba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80195bc:	697b      	ldr	r3, [r7, #20]
 80195be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80195c2:	f000 809b 	beq.w	80196fc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80195c6:	4b48      	ldr	r3, [pc, #288]	; (80196e8 <ip4_reass+0x2b0>)
 80195c8:	881a      	ldrh	r2, [r3, #0]
 80195ca:	8c3b      	ldrh	r3, [r7, #32]
 80195cc:	4413      	add	r3, r2
 80195ce:	b29a      	uxth	r2, r3
 80195d0:	4b45      	ldr	r3, [pc, #276]	; (80196e8 <ip4_reass+0x2b0>)
 80195d2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80195d4:	69fb      	ldr	r3, [r7, #28]
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d00d      	beq.n	80195f6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80195da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80195dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80195de:	4413      	add	r3, r2
 80195e0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80195e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e4:	8a7a      	ldrh	r2, [r7, #18]
 80195e6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80195e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ea:	7f9b      	ldrb	r3, [r3, #30]
 80195ec:	f043 0301 	orr.w	r3, r3, #1
 80195f0:	b2da      	uxtb	r2, r3
 80195f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195f4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80195f6:	697b      	ldr	r3, [r7, #20]
 80195f8:	2b01      	cmp	r3, #1
 80195fa:	d171      	bne.n	80196e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80195fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195fe:	8b9b      	ldrh	r3, [r3, #28]
 8019600:	3314      	adds	r3, #20
 8019602:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	685b      	ldr	r3, [r3, #4]
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019610:	685b      	ldr	r3, [r3, #4]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8019616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019618:	3308      	adds	r3, #8
 801961a:	2214      	movs	r2, #20
 801961c:	4619      	mov	r1, r3
 801961e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019620:	f000 fdfd 	bl	801a21e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8019624:	8a3b      	ldrh	r3, [r7, #16]
 8019626:	4618      	mov	r0, r3
 8019628:	f7f5 fd06 	bl	800f038 <lwip_htons>
 801962c:	4603      	mov	r3, r0
 801962e:	461a      	mov	r2, r3
 8019630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019632:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019636:	2200      	movs	r2, #0
 8019638:	719a      	strb	r2, [r3, #6]
 801963a:	2200      	movs	r2, #0
 801963c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019640:	2200      	movs	r2, #0
 8019642:	729a      	strb	r2, [r3, #10]
 8019644:	2200      	movs	r2, #0
 8019646:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801964a:	685b      	ldr	r3, [r3, #4]
 801964c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801964e:	e00d      	b.n	801966c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019652:	685b      	ldr	r3, [r3, #4]
 8019654:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019656:	2114      	movs	r1, #20
 8019658:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801965a:	f7f7 f859 	bl	8010710 <pbuf_remove_header>
      pbuf_cat(p, r);
 801965e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019660:	6878      	ldr	r0, [r7, #4]
 8019662:	f7f7 f9a9 	bl	80109b8 <pbuf_cat>
      r = iprh->next_pbuf;
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801966e:	2b00      	cmp	r3, #0
 8019670:	d1ee      	bne.n	8019650 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019672:	4b1e      	ldr	r3, [pc, #120]	; (80196ec <ip4_reass+0x2b4>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019678:	429a      	cmp	r2, r3
 801967a:	d102      	bne.n	8019682 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801967c:	2300      	movs	r3, #0
 801967e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019680:	e010      	b.n	80196a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019682:	4b1a      	ldr	r3, [pc, #104]	; (80196ec <ip4_reass+0x2b4>)
 8019684:	681b      	ldr	r3, [r3, #0]
 8019686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019688:	e007      	b.n	801969a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801968a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019690:	429a      	cmp	r2, r3
 8019692:	d006      	beq.n	80196a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	62fb      	str	r3, [r7, #44]	; 0x2c
 801969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801969c:	2b00      	cmp	r3, #0
 801969e:	d1f4      	bne.n	801968a <ip4_reass+0x252>
 80196a0:	e000      	b.n	80196a4 <ip4_reass+0x26c>
          break;
 80196a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80196a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80196a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80196a8:	f7ff fd2e 	bl	8019108 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f7f7 f943 	bl	8010938 <pbuf_clen>
 80196b2:	4603      	mov	r3, r0
 80196b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80196b6:	4b0c      	ldr	r3, [pc, #48]	; (80196e8 <ip4_reass+0x2b0>)
 80196b8:	881b      	ldrh	r3, [r3, #0]
 80196ba:	8c3a      	ldrh	r2, [r7, #32]
 80196bc:	429a      	cmp	r2, r3
 80196be:	d906      	bls.n	80196ce <ip4_reass+0x296>
 80196c0:	4b0b      	ldr	r3, [pc, #44]	; (80196f0 <ip4_reass+0x2b8>)
 80196c2:	f240 229b 	movw	r2, #667	; 0x29b
 80196c6:	490b      	ldr	r1, [pc, #44]	; (80196f4 <ip4_reass+0x2bc>)
 80196c8:	480b      	ldr	r0, [pc, #44]	; (80196f8 <ip4_reass+0x2c0>)
 80196ca:	f000 fe53 	bl	801a374 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80196ce:	4b06      	ldr	r3, [pc, #24]	; (80196e8 <ip4_reass+0x2b0>)
 80196d0:	881a      	ldrh	r2, [r3, #0]
 80196d2:	8c3b      	ldrh	r3, [r7, #32]
 80196d4:	1ad3      	subs	r3, r2, r3
 80196d6:	b29a      	uxth	r2, r3
 80196d8:	4b03      	ldr	r3, [pc, #12]	; (80196e8 <ip4_reass+0x2b0>)
 80196da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	e038      	b.n	8019752 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80196e0:	2300      	movs	r3, #0
 80196e2:	e036      	b.n	8019752 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80196e4:	bf00      	nop
 80196e6:	e00a      	b.n	80196fe <ip4_reass+0x2c6>
 80196e8:	2004f728 	.word	0x2004f728
 80196ec:	2004f724 	.word	0x2004f724
 80196f0:	0801e4bc 	.word	0x0801e4bc
 80196f4:	0801e62c 	.word	0x0801e62c
 80196f8:	0801e504 	.word	0x0801e504
    goto nullreturn_ipr;
 80196fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80196fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019700:	2b00      	cmp	r3, #0
 8019702:	d106      	bne.n	8019712 <ip4_reass+0x2da>
 8019704:	4b15      	ldr	r3, [pc, #84]	; (801975c <ip4_reass+0x324>)
 8019706:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801970a:	4915      	ldr	r1, [pc, #84]	; (8019760 <ip4_reass+0x328>)
 801970c:	4815      	ldr	r0, [pc, #84]	; (8019764 <ip4_reass+0x32c>)
 801970e:	f000 fe31 	bl	801a374 <iprintf>
  if (ipr->p == NULL) {
 8019712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019714:	685b      	ldr	r3, [r3, #4]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d116      	bne.n	8019748 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801971a:	4b13      	ldr	r3, [pc, #76]	; (8019768 <ip4_reass+0x330>)
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019720:	429a      	cmp	r2, r3
 8019722:	d006      	beq.n	8019732 <ip4_reass+0x2fa>
 8019724:	4b0d      	ldr	r3, [pc, #52]	; (801975c <ip4_reass+0x324>)
 8019726:	f240 22ab 	movw	r2, #683	; 0x2ab
 801972a:	4910      	ldr	r1, [pc, #64]	; (801976c <ip4_reass+0x334>)
 801972c:	480d      	ldr	r0, [pc, #52]	; (8019764 <ip4_reass+0x32c>)
 801972e:	f000 fe21 	bl	801a374 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019732:	2100      	movs	r1, #0
 8019734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019736:	f7ff fce7 	bl	8019108 <ip_reass_dequeue_datagram>
 801973a:	e006      	b.n	801974a <ip4_reass+0x312>
    goto nullreturn;
 801973c:	bf00      	nop
 801973e:	e004      	b.n	801974a <ip4_reass+0x312>
    goto nullreturn;
 8019740:	bf00      	nop
 8019742:	e002      	b.n	801974a <ip4_reass+0x312>
      goto nullreturn;
 8019744:	bf00      	nop
 8019746:	e000      	b.n	801974a <ip4_reass+0x312>
  }

nullreturn:
 8019748:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801974a:	6878      	ldr	r0, [r7, #4]
 801974c:	f7f7 f866 	bl	801081c <pbuf_free>
  return NULL;
 8019750:	2300      	movs	r3, #0
}
 8019752:	4618      	mov	r0, r3
 8019754:	3738      	adds	r7, #56	; 0x38
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	0801e4bc 	.word	0x0801e4bc
 8019760:	0801e648 	.word	0x0801e648
 8019764:	0801e504 	.word	0x0801e504
 8019768:	2004f724 	.word	0x2004f724
 801976c:	0801e654 	.word	0x0801e654

08019770 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019770:	b580      	push	{r7, lr}
 8019772:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019774:	2005      	movs	r0, #5
 8019776:	f7f6 f937 	bl	800f9e8 <memp_malloc>
 801977a:	4603      	mov	r3, r0
}
 801977c:	4618      	mov	r0, r3
 801977e:	bd80      	pop	{r7, pc}

08019780 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	2b00      	cmp	r3, #0
 801978c:	d106      	bne.n	801979c <ip_frag_free_pbuf_custom_ref+0x1c>
 801978e:	4b07      	ldr	r3, [pc, #28]	; (80197ac <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019790:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019794:	4906      	ldr	r1, [pc, #24]	; (80197b0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019796:	4807      	ldr	r0, [pc, #28]	; (80197b4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019798:	f000 fdec 	bl	801a374 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801979c:	6879      	ldr	r1, [r7, #4]
 801979e:	2005      	movs	r0, #5
 80197a0:	f7f6 f998 	bl	800fad4 <memp_free>
}
 80197a4:	bf00      	nop
 80197a6:	3708      	adds	r7, #8
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	0801e4bc 	.word	0x0801e4bc
 80197b0:	0801e674 	.word	0x0801e674
 80197b4:	0801e504 	.word	0x0801e504

080197b8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b084      	sub	sp, #16
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d106      	bne.n	80197d8 <ipfrag_free_pbuf_custom+0x20>
 80197ca:	4b11      	ldr	r3, [pc, #68]	; (8019810 <ipfrag_free_pbuf_custom+0x58>)
 80197cc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80197d0:	4910      	ldr	r1, [pc, #64]	; (8019814 <ipfrag_free_pbuf_custom+0x5c>)
 80197d2:	4811      	ldr	r0, [pc, #68]	; (8019818 <ipfrag_free_pbuf_custom+0x60>)
 80197d4:	f000 fdce 	bl	801a374 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80197d8:	68fa      	ldr	r2, [r7, #12]
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	429a      	cmp	r2, r3
 80197de:	d006      	beq.n	80197ee <ipfrag_free_pbuf_custom+0x36>
 80197e0:	4b0b      	ldr	r3, [pc, #44]	; (8019810 <ipfrag_free_pbuf_custom+0x58>)
 80197e2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80197e6:	490d      	ldr	r1, [pc, #52]	; (801981c <ipfrag_free_pbuf_custom+0x64>)
 80197e8:	480b      	ldr	r0, [pc, #44]	; (8019818 <ipfrag_free_pbuf_custom+0x60>)
 80197ea:	f000 fdc3 	bl	801a374 <iprintf>
  if (pcr->original != NULL) {
 80197ee:	68fb      	ldr	r3, [r7, #12]
 80197f0:	695b      	ldr	r3, [r3, #20]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d004      	beq.n	8019800 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	695b      	ldr	r3, [r3, #20]
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7f7 f80e 	bl	801081c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019800:	68f8      	ldr	r0, [r7, #12]
 8019802:	f7ff ffbd 	bl	8019780 <ip_frag_free_pbuf_custom_ref>
}
 8019806:	bf00      	nop
 8019808:	3710      	adds	r7, #16
 801980a:	46bd      	mov	sp, r7
 801980c:	bd80      	pop	{r7, pc}
 801980e:	bf00      	nop
 8019810:	0801e4bc 	.word	0x0801e4bc
 8019814:	0801e680 	.word	0x0801e680
 8019818:	0801e504 	.word	0x0801e504
 801981c:	0801e68c 	.word	0x0801e68c

08019820 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b094      	sub	sp, #80	; 0x50
 8019824:	af02      	add	r7, sp, #8
 8019826:	60f8      	str	r0, [r7, #12]
 8019828:	60b9      	str	r1, [r7, #8]
 801982a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801982c:	2300      	movs	r3, #0
 801982e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019832:	68bb      	ldr	r3, [r7, #8]
 8019834:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019836:	3b14      	subs	r3, #20
 8019838:	2b00      	cmp	r3, #0
 801983a:	da00      	bge.n	801983e <ip4_frag+0x1e>
 801983c:	3307      	adds	r3, #7
 801983e:	10db      	asrs	r3, r3, #3
 8019840:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019842:	2314      	movs	r3, #20
 8019844:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	685b      	ldr	r3, [r3, #4]
 801984a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801984c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801984e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019852:	781b      	ldrb	r3, [r3, #0]
 8019854:	f003 030f 	and.w	r3, r3, #15
 8019858:	b2db      	uxtb	r3, r3
 801985a:	009b      	lsls	r3, r3, #2
 801985c:	b2db      	uxtb	r3, r3
 801985e:	2b14      	cmp	r3, #20
 8019860:	d002      	beq.n	8019868 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019862:	f06f 0305 	mvn.w	r3, #5
 8019866:	e110      	b.n	8019a8a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	895b      	ldrh	r3, [r3, #10]
 801986c:	2b13      	cmp	r3, #19
 801986e:	d809      	bhi.n	8019884 <ip4_frag+0x64>
 8019870:	4b88      	ldr	r3, [pc, #544]	; (8019a94 <ip4_frag+0x274>)
 8019872:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019876:	4988      	ldr	r1, [pc, #544]	; (8019a98 <ip4_frag+0x278>)
 8019878:	4888      	ldr	r0, [pc, #544]	; (8019a9c <ip4_frag+0x27c>)
 801987a:	f000 fd7b 	bl	801a374 <iprintf>
 801987e:	f06f 0305 	mvn.w	r3, #5
 8019882:	e102      	b.n	8019a8a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019886:	88db      	ldrh	r3, [r3, #6]
 8019888:	b29b      	uxth	r3, r3
 801988a:	4618      	mov	r0, r3
 801988c:	f7f5 fbd4 	bl	800f038 <lwip_htons>
 8019890:	4603      	mov	r3, r0
 8019892:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019894:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019896:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801989a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801989e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80198a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80198a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	891b      	ldrh	r3, [r3, #8]
 80198aa:	3b14      	subs	r3, #20
 80198ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80198b0:	e0e1      	b.n	8019a76 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80198b2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198b4:	00db      	lsls	r3, r3, #3
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198bc:	4293      	cmp	r3, r2
 80198be:	bf28      	it	cs
 80198c0:	4613      	movcs	r3, r2
 80198c2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80198c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80198c8:	2114      	movs	r1, #20
 80198ca:	200e      	movs	r0, #14
 80198cc:	f7f6 fcc2 	bl	8010254 <pbuf_alloc>
 80198d0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80198d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	f000 80d5 	beq.w	8019a84 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80198da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198dc:	895b      	ldrh	r3, [r3, #10]
 80198de:	2b13      	cmp	r3, #19
 80198e0:	d806      	bhi.n	80198f0 <ip4_frag+0xd0>
 80198e2:	4b6c      	ldr	r3, [pc, #432]	; (8019a94 <ip4_frag+0x274>)
 80198e4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80198e8:	496d      	ldr	r1, [pc, #436]	; (8019aa0 <ip4_frag+0x280>)
 80198ea:	486c      	ldr	r0, [pc, #432]	; (8019a9c <ip4_frag+0x27c>)
 80198ec:	f000 fd42 	bl	801a374 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80198f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f2:	685b      	ldr	r3, [r3, #4]
 80198f4:	2214      	movs	r2, #20
 80198f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80198f8:	4618      	mov	r0, r3
 80198fa:	f000 fc90 	bl	801a21e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80198fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019900:	685b      	ldr	r3, [r3, #4]
 8019902:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019904:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019906:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801990a:	e064      	b.n	80199d6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	895a      	ldrh	r2, [r3, #10]
 8019910:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019912:	1ad3      	subs	r3, r2, r3
 8019914:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019916:	68fb      	ldr	r3, [r7, #12]
 8019918:	895b      	ldrh	r3, [r3, #10]
 801991a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801991c:	429a      	cmp	r2, r3
 801991e:	d906      	bls.n	801992e <ip4_frag+0x10e>
 8019920:	4b5c      	ldr	r3, [pc, #368]	; (8019a94 <ip4_frag+0x274>)
 8019922:	f240 322d 	movw	r2, #813	; 0x32d
 8019926:	495f      	ldr	r1, [pc, #380]	; (8019aa4 <ip4_frag+0x284>)
 8019928:	485c      	ldr	r0, [pc, #368]	; (8019a9c <ip4_frag+0x27c>)
 801992a:	f000 fd23 	bl	801a374 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801992e:	8bfa      	ldrh	r2, [r7, #30]
 8019930:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019934:	4293      	cmp	r3, r2
 8019936:	bf28      	it	cs
 8019938:	4613      	movcs	r3, r2
 801993a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801993e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019942:	2b00      	cmp	r3, #0
 8019944:	d105      	bne.n	8019952 <ip4_frag+0x132>
        poff = 0;
 8019946:	2300      	movs	r3, #0
 8019948:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	60fb      	str	r3, [r7, #12]
        continue;
 8019950:	e041      	b.n	80199d6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019952:	f7ff ff0d 	bl	8019770 <ip_frag_alloc_pbuf_custom_ref>
 8019956:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019958:	69bb      	ldr	r3, [r7, #24]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d103      	bne.n	8019966 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801995e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019960:	f7f6 ff5c 	bl	801081c <pbuf_free>
        goto memerr;
 8019964:	e08f      	b.n	8019a86 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019966:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801996c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801996e:	4413      	add	r3, r2
 8019970:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019974:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019978:	9201      	str	r2, [sp, #4]
 801997a:	9300      	str	r3, [sp, #0]
 801997c:	4603      	mov	r3, r0
 801997e:	2241      	movs	r2, #65	; 0x41
 8019980:	2000      	movs	r0, #0
 8019982:	f7f6 fd91 	bl	80104a8 <pbuf_alloced_custom>
 8019986:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019988:	697b      	ldr	r3, [r7, #20]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d106      	bne.n	801999c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801998e:	69b8      	ldr	r0, [r7, #24]
 8019990:	f7ff fef6 	bl	8019780 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019996:	f7f6 ff41 	bl	801081c <pbuf_free>
        goto memerr;
 801999a:	e074      	b.n	8019a86 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801999c:	68f8      	ldr	r0, [r7, #12]
 801999e:	f7f6 ffe3 	bl	8010968 <pbuf_ref>
      pcr->original = p;
 80199a2:	69bb      	ldr	r3, [r7, #24]
 80199a4:	68fa      	ldr	r2, [r7, #12]
 80199a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80199a8:	69bb      	ldr	r3, [r7, #24]
 80199aa:	4a3f      	ldr	r2, [pc, #252]	; (8019aa8 <ip4_frag+0x288>)
 80199ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80199ae:	6979      	ldr	r1, [r7, #20]
 80199b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80199b2:	f7f7 f801 	bl	80109b8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80199b6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80199ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80199be:	1ad3      	subs	r3, r2, r3
 80199c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80199c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d004      	beq.n	80199d6 <ip4_frag+0x1b6>
        poff = 0;
 80199cc:	2300      	movs	r3, #0
 80199ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80199d6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d196      	bne.n	801990c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80199de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80199e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80199e4:	4413      	add	r3, r2
 80199e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80199e8:	68bb      	ldr	r3, [r7, #8]
 80199ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80199ec:	f1a3 0213 	sub.w	r2, r3, #19
 80199f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80199f4:	429a      	cmp	r2, r3
 80199f6:	bfcc      	ite	gt
 80199f8:	2301      	movgt	r3, #1
 80199fa:	2300      	movle	r3, #0
 80199fc:	b2db      	uxtb	r3, r3
 80199fe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019a00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a08:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019a0a:	6a3b      	ldr	r3, [r7, #32]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d002      	beq.n	8019a16 <ip4_frag+0x1f6>
 8019a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d003      	beq.n	8019a1e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019a16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019a1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019a1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7f5 fb09 	bl	800f038 <lwip_htons>
 8019a26:	4603      	mov	r3, r0
 8019a28:	461a      	mov	r2, r3
 8019a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a2c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019a2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019a30:	3314      	adds	r3, #20
 8019a32:	b29b      	uxth	r3, r3
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7f5 faff 	bl	800f038 <lwip_htons>
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	461a      	mov	r2, r3
 8019a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a40:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a44:	2200      	movs	r2, #0
 8019a46:	729a      	strb	r2, [r3, #10]
 8019a48:	2200      	movs	r2, #0
 8019a4a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019a4c:	68bb      	ldr	r3, [r7, #8]
 8019a4e:	695b      	ldr	r3, [r3, #20]
 8019a50:	687a      	ldr	r2, [r7, #4]
 8019a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a54:	68b8      	ldr	r0, [r7, #8]
 8019a56:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019a5a:	f7f6 fedf 	bl	801081c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019a5e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019a62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019a64:	1ad3      	subs	r3, r2, r3
 8019a66:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019a6a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019a6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019a70:	4413      	add	r3, r2
 8019a72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019a76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	f47f af19 	bne.w	80198b2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019a80:	2300      	movs	r3, #0
 8019a82:	e002      	b.n	8019a8a <ip4_frag+0x26a>
      goto memerr;
 8019a84:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	3748      	adds	r7, #72	; 0x48
 8019a8e:	46bd      	mov	sp, r7
 8019a90:	bd80      	pop	{r7, pc}
 8019a92:	bf00      	nop
 8019a94:	0801e4bc 	.word	0x0801e4bc
 8019a98:	0801e698 	.word	0x0801e698
 8019a9c:	0801e504 	.word	0x0801e504
 8019aa0:	0801e6b4 	.word	0x0801e6b4
 8019aa4:	0801e6d4 	.word	0x0801e6d4
 8019aa8:	080197b9 	.word	0x080197b9

08019aac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b086      	sub	sp, #24
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
 8019ab4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019ab6:	230e      	movs	r3, #14
 8019ab8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	895b      	ldrh	r3, [r3, #10]
 8019abe:	2b0e      	cmp	r3, #14
 8019ac0:	d96e      	bls.n	8019ba0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	7bdb      	ldrb	r3, [r3, #15]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d106      	bne.n	8019ad8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019aca:	683b      	ldr	r3, [r7, #0]
 8019acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ad0:	3301      	adds	r3, #1
 8019ad2:	b2da      	uxtb	r2, r3
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	685b      	ldr	r3, [r3, #4]
 8019adc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019ade:	693b      	ldr	r3, [r7, #16]
 8019ae0:	7b1a      	ldrb	r2, [r3, #12]
 8019ae2:	7b5b      	ldrb	r3, [r3, #13]
 8019ae4:	021b      	lsls	r3, r3, #8
 8019ae6:	4313      	orrs	r3, r2
 8019ae8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019aea:	693b      	ldr	r3, [r7, #16]
 8019aec:	781b      	ldrb	r3, [r3, #0]
 8019aee:	f003 0301 	and.w	r3, r3, #1
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d023      	beq.n	8019b3e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019af6:	693b      	ldr	r3, [r7, #16]
 8019af8:	781b      	ldrb	r3, [r3, #0]
 8019afa:	2b01      	cmp	r3, #1
 8019afc:	d10f      	bne.n	8019b1e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019afe:	693b      	ldr	r3, [r7, #16]
 8019b00:	785b      	ldrb	r3, [r3, #1]
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d11b      	bne.n	8019b3e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019b06:	693b      	ldr	r3, [r7, #16]
 8019b08:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019b0a:	2b5e      	cmp	r3, #94	; 0x5e
 8019b0c:	d117      	bne.n	8019b3e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	7b5b      	ldrb	r3, [r3, #13]
 8019b12:	f043 0310 	orr.w	r3, r3, #16
 8019b16:	b2da      	uxtb	r2, r3
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	735a      	strb	r2, [r3, #13]
 8019b1c:	e00f      	b.n	8019b3e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019b1e:	693b      	ldr	r3, [r7, #16]
 8019b20:	2206      	movs	r2, #6
 8019b22:	4928      	ldr	r1, [pc, #160]	; (8019bc4 <ethernet_input+0x118>)
 8019b24:	4618      	mov	r0, r3
 8019b26:	f000 fb6a 	bl	801a1fe <memcmp>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d106      	bne.n	8019b3e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	7b5b      	ldrb	r3, [r3, #13]
 8019b34:	f043 0308 	orr.w	r3, r3, #8
 8019b38:	b2da      	uxtb	r2, r3
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019b3e:	89fb      	ldrh	r3, [r7, #14]
 8019b40:	2b08      	cmp	r3, #8
 8019b42:	d003      	beq.n	8019b4c <ethernet_input+0xa0>
 8019b44:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019b48:	d014      	beq.n	8019b74 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019b4a:	e032      	b.n	8019bb2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019b52:	f003 0308 	and.w	r3, r3, #8
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d024      	beq.n	8019ba4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019b5a:	8afb      	ldrh	r3, [r7, #22]
 8019b5c:	4619      	mov	r1, r3
 8019b5e:	6878      	ldr	r0, [r7, #4]
 8019b60:	f7f6 fdd6 	bl	8010710 <pbuf_remove_header>
 8019b64:	4603      	mov	r3, r0
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d11e      	bne.n	8019ba8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019b6a:	6839      	ldr	r1, [r7, #0]
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f7fe ff21 	bl	80189b4 <ip4_input>
      break;
 8019b72:	e013      	b.n	8019b9c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019b74:	683b      	ldr	r3, [r7, #0]
 8019b76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019b7a:	f003 0308 	and.w	r3, r3, #8
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d014      	beq.n	8019bac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019b82:	8afb      	ldrh	r3, [r7, #22]
 8019b84:	4619      	mov	r1, r3
 8019b86:	6878      	ldr	r0, [r7, #4]
 8019b88:	f7f6 fdc2 	bl	8010710 <pbuf_remove_header>
 8019b8c:	4603      	mov	r3, r0
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d10e      	bne.n	8019bb0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019b92:	6839      	ldr	r1, [r7, #0]
 8019b94:	6878      	ldr	r0, [r7, #4]
 8019b96:	f7fe f8c1 	bl	8017d1c <etharp_input>
      break;
 8019b9a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	e00c      	b.n	8019bba <ethernet_input+0x10e>
    goto free_and_return;
 8019ba0:	bf00      	nop
 8019ba2:	e006      	b.n	8019bb2 <ethernet_input+0x106>
        goto free_and_return;
 8019ba4:	bf00      	nop
 8019ba6:	e004      	b.n	8019bb2 <ethernet_input+0x106>
        goto free_and_return;
 8019ba8:	bf00      	nop
 8019baa:	e002      	b.n	8019bb2 <ethernet_input+0x106>
        goto free_and_return;
 8019bac:	bf00      	nop
 8019bae:	e000      	b.n	8019bb2 <ethernet_input+0x106>
        goto free_and_return;
 8019bb0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	f7f6 fe32 	bl	801081c <pbuf_free>
  return ERR_OK;
 8019bb8:	2300      	movs	r3, #0
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3718      	adds	r7, #24
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
 8019bc2:	bf00      	nop
 8019bc4:	0801e8d8 	.word	0x0801e8d8

08019bc8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b086      	sub	sp, #24
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	60f8      	str	r0, [r7, #12]
 8019bd0:	60b9      	str	r1, [r7, #8]
 8019bd2:	607a      	str	r2, [r7, #4]
 8019bd4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019bd6:	8c3b      	ldrh	r3, [r7, #32]
 8019bd8:	4618      	mov	r0, r3
 8019bda:	f7f5 fa2d 	bl	800f038 <lwip_htons>
 8019bde:	4603      	mov	r3, r0
 8019be0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019be2:	210e      	movs	r1, #14
 8019be4:	68b8      	ldr	r0, [r7, #8]
 8019be6:	f7f6 fd83 	bl	80106f0 <pbuf_add_header>
 8019bea:	4603      	mov	r3, r0
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d125      	bne.n	8019c3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019bf0:	68bb      	ldr	r3, [r7, #8]
 8019bf2:	685b      	ldr	r3, [r3, #4]
 8019bf4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019bf6:	693b      	ldr	r3, [r7, #16]
 8019bf8:	8afa      	ldrh	r2, [r7, #22]
 8019bfa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019bfc:	693b      	ldr	r3, [r7, #16]
 8019bfe:	2206      	movs	r2, #6
 8019c00:	6839      	ldr	r1, [r7, #0]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f000 fb0b 	bl	801a21e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019c08:	693b      	ldr	r3, [r7, #16]
 8019c0a:	3306      	adds	r3, #6
 8019c0c:	2206      	movs	r2, #6
 8019c0e:	6879      	ldr	r1, [r7, #4]
 8019c10:	4618      	mov	r0, r3
 8019c12:	f000 fb04 	bl	801a21e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019c1c:	2b06      	cmp	r3, #6
 8019c1e:	d006      	beq.n	8019c2e <ethernet_output+0x66>
 8019c20:	4b0a      	ldr	r3, [pc, #40]	; (8019c4c <ethernet_output+0x84>)
 8019c22:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019c26:	490a      	ldr	r1, [pc, #40]	; (8019c50 <ethernet_output+0x88>)
 8019c28:	480a      	ldr	r0, [pc, #40]	; (8019c54 <ethernet_output+0x8c>)
 8019c2a:	f000 fba3 	bl	801a374 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	699b      	ldr	r3, [r3, #24]
 8019c32:	68b9      	ldr	r1, [r7, #8]
 8019c34:	68f8      	ldr	r0, [r7, #12]
 8019c36:	4798      	blx	r3
 8019c38:	4603      	mov	r3, r0
 8019c3a:	e002      	b.n	8019c42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019c3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019c3e:	f06f 0301 	mvn.w	r3, #1
}
 8019c42:	4618      	mov	r0, r3
 8019c44:	3718      	adds	r7, #24
 8019c46:	46bd      	mov	sp, r7
 8019c48:	bd80      	pop	{r7, pc}
 8019c4a:	bf00      	nop
 8019c4c:	0801e6e4 	.word	0x0801e6e4
 8019c50:	0801e71c 	.word	0x0801e71c
 8019c54:	0801e750 	.word	0x0801e750

08019c58 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019c58:	b580      	push	{r7, lr}
 8019c5a:	b082      	sub	sp, #8
 8019c5c:	af00      	add	r7, sp, #0
 8019c5e:	6078      	str	r0, [r7, #4]
 8019c60:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019c62:	683b      	ldr	r3, [r7, #0]
 8019c64:	2200      	movs	r2, #0
 8019c66:	2104      	movs	r1, #4
 8019c68:	4618      	mov	r0, r3
 8019c6a:	f7ef fc57 	bl	800951c <osMessageQueueNew>
 8019c6e:	4602      	mov	r2, r0
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d102      	bne.n	8019c82 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c80:	e000      	b.n	8019c84 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019c82:	2300      	movs	r3, #0
}
 8019c84:	4618      	mov	r0, r3
 8019c86:	3708      	adds	r7, #8
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd80      	pop	{r7, pc}

08019c8c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019c8c:	b580      	push	{r7, lr}
 8019c8e:	b082      	sub	sp, #8
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	681b      	ldr	r3, [r3, #0]
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7ef fdab 	bl	80097f4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7ef fdd8 	bl	8009858 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019ca8:	bf00      	nop
 8019caa:	3708      	adds	r7, #8
 8019cac:	46bd      	mov	sp, r7
 8019cae:	bd80      	pop	{r7, pc}

08019cb0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b084      	sub	sp, #16
 8019cb4:	af00      	add	r7, sp, #0
 8019cb6:	6078      	str	r0, [r7, #4]
 8019cb8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	6818      	ldr	r0, [r3, #0]
 8019cbe:	4639      	mov	r1, r7
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	f7ef fcb0 	bl	8009628 <osMessageQueuePut>
 8019cc8:	4603      	mov	r3, r0
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d102      	bne.n	8019cd4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8019cce:	2300      	movs	r3, #0
 8019cd0:	73fb      	strb	r3, [r7, #15]
 8019cd2:	e001      	b.n	8019cd8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019cd4:	23ff      	movs	r3, #255	; 0xff
 8019cd6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3710      	adds	r7, #16
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}

08019ce4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b086      	sub	sp, #24
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	60f8      	str	r0, [r7, #12]
 8019cec:	60b9      	str	r1, [r7, #8]
 8019cee:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019cf0:	f7ef f840 	bl	8008d74 <osKernelGetTickCount>
 8019cf4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d013      	beq.n	8019d24 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	6818      	ldr	r0, [r3, #0]
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	2200      	movs	r2, #0
 8019d04:	68b9      	ldr	r1, [r7, #8]
 8019d06:	f7ef fd03 	bl	8009710 <osMessageQueueGet>
 8019d0a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019d0c:	693b      	ldr	r3, [r7, #16]
 8019d0e:	2b00      	cmp	r3, #0
 8019d10:	d105      	bne.n	8019d1e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019d12:	f7ef f82f 	bl	8008d74 <osKernelGetTickCount>
 8019d16:	4602      	mov	r2, r0
 8019d18:	697b      	ldr	r3, [r7, #20]
 8019d1a:	1ad3      	subs	r3, r2, r3
 8019d1c:	e00f      	b.n	8019d3e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d22:	e00c      	b.n	8019d3e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	6818      	ldr	r0, [r3, #0]
 8019d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	68b9      	ldr	r1, [r7, #8]
 8019d30:	f7ef fcee 	bl	8009710 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019d34:	f7ef f81e 	bl	8008d74 <osKernelGetTickCount>
 8019d38:	4602      	mov	r2, r0
 8019d3a:	697b      	ldr	r3, [r7, #20]
 8019d3c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019d3e:	4618      	mov	r0, r3
 8019d40:	3718      	adds	r7, #24
 8019d42:	46bd      	mov	sp, r7
 8019d44:	bd80      	pop	{r7, pc}

08019d46 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019d46:	b580      	push	{r7, lr}
 8019d48:	b082      	sub	sp, #8
 8019d4a:	af00      	add	r7, sp, #0
 8019d4c:	6078      	str	r0, [r7, #4]
 8019d4e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	6818      	ldr	r0, [r3, #0]
 8019d54:	2300      	movs	r3, #0
 8019d56:	2200      	movs	r2, #0
 8019d58:	6839      	ldr	r1, [r7, #0]
 8019d5a:	f7ef fcd9 	bl	8009710 <osMessageQueueGet>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d101      	bne.n	8019d68 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8019d64:	2300      	movs	r3, #0
 8019d66:	e001      	b.n	8019d6c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	3708      	adds	r7, #8
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd80      	pop	{r7, pc}

08019d74 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019d74:	b480      	push	{r7}
 8019d76:	b083      	sub	sp, #12
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d101      	bne.n	8019d88 <sys_mbox_valid+0x14>
    return 0;
 8019d84:	2300      	movs	r3, #0
 8019d86:	e000      	b.n	8019d8a <sys_mbox_valid+0x16>
  else
    return 1;
 8019d88:	2301      	movs	r3, #1
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	370c      	adds	r7, #12
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d94:	4770      	bx	lr

08019d96 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019d96:	b480      	push	{r7}
 8019d98:	b083      	sub	sp, #12
 8019d9a:	af00      	add	r7, sp, #0
 8019d9c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	2200      	movs	r2, #0
 8019da2:	601a      	str	r2, [r3, #0]
}
 8019da4:	bf00      	nop
 8019da6:	370c      	adds	r7, #12
 8019da8:	46bd      	mov	sp, r7
 8019daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dae:	4770      	bx	lr

08019db0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b082      	sub	sp, #8
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
 8019db8:	460b      	mov	r3, r1
 8019dba:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8019dbc:	78fb      	ldrb	r3, [r7, #3]
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019dc6:	f7ef fa19 	bl	80091fc <osSemaphoreNew>
 8019dca:	4602      	mov	r2, r0
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d102      	bne.n	8019dde <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019ddc:	e009      	b.n	8019df2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8019dde:	78fb      	ldrb	r3, [r7, #3]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d105      	bne.n	8019df0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	2100      	movs	r1, #0
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7ef faa2 	bl	8009334 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019df0:	2300      	movs	r3, #0
}
 8019df2:	4618      	mov	r0, r3
 8019df4:	3708      	adds	r7, #8
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}

08019dfa <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019dfa:	b580      	push	{r7, lr}
 8019dfc:	b084      	sub	sp, #16
 8019dfe:	af00      	add	r7, sp, #0
 8019e00:	6078      	str	r0, [r7, #4]
 8019e02:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8019e04:	f7ee ffb6 	bl	8008d74 <osKernelGetTickCount>
 8019e08:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d011      	beq.n	8019e34 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	6839      	ldr	r1, [r7, #0]
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7ef fa8c 	bl	8009334 <osSemaphoreAcquire>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d105      	bne.n	8019e2e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8019e22:	f7ee ffa7 	bl	8008d74 <osKernelGetTickCount>
 8019e26:	4602      	mov	r2, r0
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	1ad3      	subs	r3, r2, r3
 8019e2c:	e012      	b.n	8019e54 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e32:	e00f      	b.n	8019e54 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8019e34:	bf00      	nop
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7ef fa78 	bl	8009334 <osSemaphoreAcquire>
 8019e44:	4603      	mov	r3, r0
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d1f5      	bne.n	8019e36 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8019e4a:	f7ee ff93 	bl	8008d74 <osKernelGetTickCount>
 8019e4e:	4602      	mov	r2, r0
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019e54:	4618      	mov	r0, r3
 8019e56:	3710      	adds	r7, #16
 8019e58:	46bd      	mov	sp, r7
 8019e5a:	bd80      	pop	{r7, pc}

08019e5c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019e5c:	b580      	push	{r7, lr}
 8019e5e:	b082      	sub	sp, #8
 8019e60:	af00      	add	r7, sp, #0
 8019e62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f7ef fac9 	bl	8009400 <osSemaphoreRelease>
}
 8019e6e:	bf00      	nop
 8019e70:	3708      	adds	r7, #8
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}

08019e76 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019e76:	b580      	push	{r7, lr}
 8019e78:	b082      	sub	sp, #8
 8019e7a:	af00      	add	r7, sp, #0
 8019e7c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	681b      	ldr	r3, [r3, #0]
 8019e82:	4618      	mov	r0, r3
 8019e84:	f7ef fb14 	bl	80094b0 <osSemaphoreDelete>
}
 8019e88:	bf00      	nop
 8019e8a:	3708      	adds	r7, #8
 8019e8c:	46bd      	mov	sp, r7
 8019e8e:	bd80      	pop	{r7, pc}

08019e90 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019e90:	b480      	push	{r7}
 8019e92:	b083      	sub	sp, #12
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d101      	bne.n	8019ea4 <sys_sem_valid+0x14>
    return 0;
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	e000      	b.n	8019ea6 <sys_sem_valid+0x16>
  else
    return 1;
 8019ea4:	2301      	movs	r3, #1
}
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	370c      	adds	r7, #12
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eb0:	4770      	bx	lr

08019eb2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019eb2:	b480      	push	{r7}
 8019eb4:	b083      	sub	sp, #12
 8019eb6:	af00      	add	r7, sp, #0
 8019eb8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	601a      	str	r2, [r3, #0]
}
 8019ec0:	bf00      	nop
 8019ec2:	370c      	adds	r7, #12
 8019ec4:	46bd      	mov	sp, r7
 8019ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eca:	4770      	bx	lr

08019ecc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019ed0:	2000      	movs	r0, #0
 8019ed2:	f7ef f84b 	bl	8008f6c <osMutexNew>
 8019ed6:	4603      	mov	r3, r0
 8019ed8:	4a01      	ldr	r2, [pc, #4]	; (8019ee0 <sys_init+0x14>)
 8019eda:	6013      	str	r3, [r2, #0]
#endif
}
 8019edc:	bf00      	nop
 8019ede:	bd80      	pop	{r7, pc}
 8019ee0:	2004f72c 	.word	0x2004f72c

08019ee4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019eec:	2000      	movs	r0, #0
 8019eee:	f7ef f83d 	bl	8008f6c <osMutexNew>
 8019ef2:	4602      	mov	r2, r0
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d102      	bne.n	8019f06 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019f04:	e000      	b.n	8019f08 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019f06:	2300      	movs	r3, #0
}
 8019f08:	4618      	mov	r0, r3
 8019f0a:	3708      	adds	r7, #8
 8019f0c:	46bd      	mov	sp, r7
 8019f0e:	bd80      	pop	{r7, pc}

08019f10 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019f10:	b580      	push	{r7, lr}
 8019f12:	b082      	sub	sp, #8
 8019f14:	af00      	add	r7, sp, #0
 8019f16:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019f20:	4618      	mov	r0, r3
 8019f22:	f7ef f8bd 	bl	80090a0 <osMutexAcquire>
#endif
}
 8019f26:	bf00      	nop
 8019f28:	3708      	adds	r7, #8
 8019f2a:	46bd      	mov	sp, r7
 8019f2c:	bd80      	pop	{r7, pc}

08019f2e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019f2e:	b580      	push	{r7, lr}
 8019f30:	b082      	sub	sp, #8
 8019f32:	af00      	add	r7, sp, #0
 8019f34:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	681b      	ldr	r3, [r3, #0]
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	f7ef f90e 	bl	800915c <osMutexRelease>
}
 8019f40:	bf00      	nop
 8019f42:	3708      	adds	r7, #8
 8019f44:	46bd      	mov	sp, r7
 8019f46:	bd80      	pop	{r7, pc}

08019f48 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b08e      	sub	sp, #56	; 0x38
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	60f8      	str	r0, [r7, #12]
 8019f50:	60b9      	str	r1, [r7, #8]
 8019f52:	607a      	str	r2, [r7, #4]
 8019f54:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019f56:	f107 0314 	add.w	r3, r7, #20
 8019f5a:	2224      	movs	r2, #36	; 0x24
 8019f5c:	2100      	movs	r1, #0
 8019f5e:	4618      	mov	r0, r3
 8019f60:	f000 f96b 	bl	801a23a <memset>
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	617b      	str	r3, [r7, #20]
 8019f68:	683b      	ldr	r3, [r7, #0]
 8019f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019f70:	f107 0314 	add.w	r3, r7, #20
 8019f74:	461a      	mov	r2, r3
 8019f76:	6879      	ldr	r1, [r7, #4]
 8019f78:	68b8      	ldr	r0, [r7, #8]
 8019f7a:	f7ee ff23 	bl	8008dc4 <osThreadNew>
 8019f7e:	4603      	mov	r3, r0
#endif
}
 8019f80:	4618      	mov	r0, r3
 8019f82:	3738      	adds	r7, #56	; 0x38
 8019f84:	46bd      	mov	sp, r7
 8019f86:	bd80      	pop	{r7, pc}

08019f88 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019f8c:	4b04      	ldr	r3, [pc, #16]	; (8019fa0 <sys_arch_protect+0x18>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019f94:	4618      	mov	r0, r3
 8019f96:	f7ef f883 	bl	80090a0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019f9a:	2301      	movs	r3, #1
}
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	bd80      	pop	{r7, pc}
 8019fa0:	2004f72c 	.word	0x2004f72c

08019fa4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019fa4:	b580      	push	{r7, lr}
 8019fa6:	b082      	sub	sp, #8
 8019fa8:	af00      	add	r7, sp, #0
 8019faa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019fac:	4b04      	ldr	r3, [pc, #16]	; (8019fc0 <sys_arch_unprotect+0x1c>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	4618      	mov	r0, r3
 8019fb2:	f7ef f8d3 	bl	800915c <osMutexRelease>
}
 8019fb6:	bf00      	nop
 8019fb8:	3708      	adds	r7, #8
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	bd80      	pop	{r7, pc}
 8019fbe:	bf00      	nop
 8019fc0:	2004f72c 	.word	0x2004f72c

08019fc4 <std>:
 8019fc4:	2300      	movs	r3, #0
 8019fc6:	b510      	push	{r4, lr}
 8019fc8:	4604      	mov	r4, r0
 8019fca:	e9c0 3300 	strd	r3, r3, [r0]
 8019fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019fd2:	6083      	str	r3, [r0, #8]
 8019fd4:	8181      	strh	r1, [r0, #12]
 8019fd6:	6643      	str	r3, [r0, #100]	; 0x64
 8019fd8:	81c2      	strh	r2, [r0, #14]
 8019fda:	6183      	str	r3, [r0, #24]
 8019fdc:	4619      	mov	r1, r3
 8019fde:	2208      	movs	r2, #8
 8019fe0:	305c      	adds	r0, #92	; 0x5c
 8019fe2:	f000 f92a 	bl	801a23a <memset>
 8019fe6:	4b05      	ldr	r3, [pc, #20]	; (8019ffc <std+0x38>)
 8019fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8019fea:	4b05      	ldr	r3, [pc, #20]	; (801a000 <std+0x3c>)
 8019fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8019fee:	4b05      	ldr	r3, [pc, #20]	; (801a004 <std+0x40>)
 8019ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ff2:	4b05      	ldr	r3, [pc, #20]	; (801a008 <std+0x44>)
 8019ff4:	6224      	str	r4, [r4, #32]
 8019ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8019ff8:	bd10      	pop	{r4, pc}
 8019ffa:	bf00      	nop
 8019ffc:	0801a515 	.word	0x0801a515
 801a000:	0801a537 	.word	0x0801a537
 801a004:	0801a56f 	.word	0x0801a56f
 801a008:	0801a593 	.word	0x0801a593

0801a00c <_cleanup_r>:
 801a00c:	4901      	ldr	r1, [pc, #4]	; (801a014 <_cleanup_r+0x8>)
 801a00e:	f000 b8af 	b.w	801a170 <_fwalk_reent>
 801a012:	bf00      	nop
 801a014:	0801a729 	.word	0x0801a729

0801a018 <__sfmoreglue>:
 801a018:	b570      	push	{r4, r5, r6, lr}
 801a01a:	2268      	movs	r2, #104	; 0x68
 801a01c:	1e4d      	subs	r5, r1, #1
 801a01e:	4355      	muls	r5, r2
 801a020:	460e      	mov	r6, r1
 801a022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a026:	f000 f931 	bl	801a28c <_malloc_r>
 801a02a:	4604      	mov	r4, r0
 801a02c:	b140      	cbz	r0, 801a040 <__sfmoreglue+0x28>
 801a02e:	2100      	movs	r1, #0
 801a030:	e9c0 1600 	strd	r1, r6, [r0]
 801a034:	300c      	adds	r0, #12
 801a036:	60a0      	str	r0, [r4, #8]
 801a038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a03c:	f000 f8fd 	bl	801a23a <memset>
 801a040:	4620      	mov	r0, r4
 801a042:	bd70      	pop	{r4, r5, r6, pc}

0801a044 <__sfp_lock_acquire>:
 801a044:	4801      	ldr	r0, [pc, #4]	; (801a04c <__sfp_lock_acquire+0x8>)
 801a046:	f000 b8d8 	b.w	801a1fa <__retarget_lock_acquire_recursive>
 801a04a:	bf00      	nop
 801a04c:	2004f731 	.word	0x2004f731

0801a050 <__sfp_lock_release>:
 801a050:	4801      	ldr	r0, [pc, #4]	; (801a058 <__sfp_lock_release+0x8>)
 801a052:	f000 b8d3 	b.w	801a1fc <__retarget_lock_release_recursive>
 801a056:	bf00      	nop
 801a058:	2004f731 	.word	0x2004f731

0801a05c <__sinit_lock_acquire>:
 801a05c:	4801      	ldr	r0, [pc, #4]	; (801a064 <__sinit_lock_acquire+0x8>)
 801a05e:	f000 b8cc 	b.w	801a1fa <__retarget_lock_acquire_recursive>
 801a062:	bf00      	nop
 801a064:	2004f732 	.word	0x2004f732

0801a068 <__sinit_lock_release>:
 801a068:	4801      	ldr	r0, [pc, #4]	; (801a070 <__sinit_lock_release+0x8>)
 801a06a:	f000 b8c7 	b.w	801a1fc <__retarget_lock_release_recursive>
 801a06e:	bf00      	nop
 801a070:	2004f732 	.word	0x2004f732

0801a074 <__sinit>:
 801a074:	b510      	push	{r4, lr}
 801a076:	4604      	mov	r4, r0
 801a078:	f7ff fff0 	bl	801a05c <__sinit_lock_acquire>
 801a07c:	69a3      	ldr	r3, [r4, #24]
 801a07e:	b11b      	cbz	r3, 801a088 <__sinit+0x14>
 801a080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a084:	f7ff bff0 	b.w	801a068 <__sinit_lock_release>
 801a088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a08c:	6523      	str	r3, [r4, #80]	; 0x50
 801a08e:	4b13      	ldr	r3, [pc, #76]	; (801a0dc <__sinit+0x68>)
 801a090:	4a13      	ldr	r2, [pc, #76]	; (801a0e0 <__sinit+0x6c>)
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	62a2      	str	r2, [r4, #40]	; 0x28
 801a096:	42a3      	cmp	r3, r4
 801a098:	bf04      	itt	eq
 801a09a:	2301      	moveq	r3, #1
 801a09c:	61a3      	streq	r3, [r4, #24]
 801a09e:	4620      	mov	r0, r4
 801a0a0:	f000 f820 	bl	801a0e4 <__sfp>
 801a0a4:	6060      	str	r0, [r4, #4]
 801a0a6:	4620      	mov	r0, r4
 801a0a8:	f000 f81c 	bl	801a0e4 <__sfp>
 801a0ac:	60a0      	str	r0, [r4, #8]
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f000 f818 	bl	801a0e4 <__sfp>
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	60e0      	str	r0, [r4, #12]
 801a0b8:	2104      	movs	r1, #4
 801a0ba:	6860      	ldr	r0, [r4, #4]
 801a0bc:	f7ff ff82 	bl	8019fc4 <std>
 801a0c0:	68a0      	ldr	r0, [r4, #8]
 801a0c2:	2201      	movs	r2, #1
 801a0c4:	2109      	movs	r1, #9
 801a0c6:	f7ff ff7d 	bl	8019fc4 <std>
 801a0ca:	68e0      	ldr	r0, [r4, #12]
 801a0cc:	2202      	movs	r2, #2
 801a0ce:	2112      	movs	r1, #18
 801a0d0:	f7ff ff78 	bl	8019fc4 <std>
 801a0d4:	2301      	movs	r3, #1
 801a0d6:	61a3      	str	r3, [r4, #24]
 801a0d8:	e7d2      	b.n	801a080 <__sinit+0xc>
 801a0da:	bf00      	nop
 801a0dc:	0801e948 	.word	0x0801e948
 801a0e0:	0801a00d 	.word	0x0801a00d

0801a0e4 <__sfp>:
 801a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0e6:	4607      	mov	r7, r0
 801a0e8:	f7ff ffac 	bl	801a044 <__sfp_lock_acquire>
 801a0ec:	4b1e      	ldr	r3, [pc, #120]	; (801a168 <__sfp+0x84>)
 801a0ee:	681e      	ldr	r6, [r3, #0]
 801a0f0:	69b3      	ldr	r3, [r6, #24]
 801a0f2:	b913      	cbnz	r3, 801a0fa <__sfp+0x16>
 801a0f4:	4630      	mov	r0, r6
 801a0f6:	f7ff ffbd 	bl	801a074 <__sinit>
 801a0fa:	3648      	adds	r6, #72	; 0x48
 801a0fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a100:	3b01      	subs	r3, #1
 801a102:	d503      	bpl.n	801a10c <__sfp+0x28>
 801a104:	6833      	ldr	r3, [r6, #0]
 801a106:	b30b      	cbz	r3, 801a14c <__sfp+0x68>
 801a108:	6836      	ldr	r6, [r6, #0]
 801a10a:	e7f7      	b.n	801a0fc <__sfp+0x18>
 801a10c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a110:	b9d5      	cbnz	r5, 801a148 <__sfp+0x64>
 801a112:	4b16      	ldr	r3, [pc, #88]	; (801a16c <__sfp+0x88>)
 801a114:	60e3      	str	r3, [r4, #12]
 801a116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a11a:	6665      	str	r5, [r4, #100]	; 0x64
 801a11c:	f000 f86c 	bl	801a1f8 <__retarget_lock_init_recursive>
 801a120:	f7ff ff96 	bl	801a050 <__sfp_lock_release>
 801a124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a12c:	6025      	str	r5, [r4, #0]
 801a12e:	61a5      	str	r5, [r4, #24]
 801a130:	2208      	movs	r2, #8
 801a132:	4629      	mov	r1, r5
 801a134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a138:	f000 f87f 	bl	801a23a <memset>
 801a13c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a144:	4620      	mov	r0, r4
 801a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a148:	3468      	adds	r4, #104	; 0x68
 801a14a:	e7d9      	b.n	801a100 <__sfp+0x1c>
 801a14c:	2104      	movs	r1, #4
 801a14e:	4638      	mov	r0, r7
 801a150:	f7ff ff62 	bl	801a018 <__sfmoreglue>
 801a154:	4604      	mov	r4, r0
 801a156:	6030      	str	r0, [r6, #0]
 801a158:	2800      	cmp	r0, #0
 801a15a:	d1d5      	bne.n	801a108 <__sfp+0x24>
 801a15c:	f7ff ff78 	bl	801a050 <__sfp_lock_release>
 801a160:	230c      	movs	r3, #12
 801a162:	603b      	str	r3, [r7, #0]
 801a164:	e7ee      	b.n	801a144 <__sfp+0x60>
 801a166:	bf00      	nop
 801a168:	0801e948 	.word	0x0801e948
 801a16c:	ffff0001 	.word	0xffff0001

0801a170 <_fwalk_reent>:
 801a170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a174:	4606      	mov	r6, r0
 801a176:	4688      	mov	r8, r1
 801a178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a17c:	2700      	movs	r7, #0
 801a17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a182:	f1b9 0901 	subs.w	r9, r9, #1
 801a186:	d505      	bpl.n	801a194 <_fwalk_reent+0x24>
 801a188:	6824      	ldr	r4, [r4, #0]
 801a18a:	2c00      	cmp	r4, #0
 801a18c:	d1f7      	bne.n	801a17e <_fwalk_reent+0xe>
 801a18e:	4638      	mov	r0, r7
 801a190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a194:	89ab      	ldrh	r3, [r5, #12]
 801a196:	2b01      	cmp	r3, #1
 801a198:	d907      	bls.n	801a1aa <_fwalk_reent+0x3a>
 801a19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a19e:	3301      	adds	r3, #1
 801a1a0:	d003      	beq.n	801a1aa <_fwalk_reent+0x3a>
 801a1a2:	4629      	mov	r1, r5
 801a1a4:	4630      	mov	r0, r6
 801a1a6:	47c0      	blx	r8
 801a1a8:	4307      	orrs	r7, r0
 801a1aa:	3568      	adds	r5, #104	; 0x68
 801a1ac:	e7e9      	b.n	801a182 <_fwalk_reent+0x12>
	...

0801a1b0 <__libc_init_array>:
 801a1b0:	b570      	push	{r4, r5, r6, lr}
 801a1b2:	4d0d      	ldr	r5, [pc, #52]	; (801a1e8 <__libc_init_array+0x38>)
 801a1b4:	4c0d      	ldr	r4, [pc, #52]	; (801a1ec <__libc_init_array+0x3c>)
 801a1b6:	1b64      	subs	r4, r4, r5
 801a1b8:	10a4      	asrs	r4, r4, #2
 801a1ba:	2600      	movs	r6, #0
 801a1bc:	42a6      	cmp	r6, r4
 801a1be:	d109      	bne.n	801a1d4 <__libc_init_array+0x24>
 801a1c0:	4d0b      	ldr	r5, [pc, #44]	; (801a1f0 <__libc_init_array+0x40>)
 801a1c2:	4c0c      	ldr	r4, [pc, #48]	; (801a1f4 <__libc_init_array+0x44>)
 801a1c4:	f001 f802 	bl	801b1cc <_init>
 801a1c8:	1b64      	subs	r4, r4, r5
 801a1ca:	10a4      	asrs	r4, r4, #2
 801a1cc:	2600      	movs	r6, #0
 801a1ce:	42a6      	cmp	r6, r4
 801a1d0:	d105      	bne.n	801a1de <__libc_init_array+0x2e>
 801a1d2:	bd70      	pop	{r4, r5, r6, pc}
 801a1d4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1d8:	4798      	blx	r3
 801a1da:	3601      	adds	r6, #1
 801a1dc:	e7ee      	b.n	801a1bc <__libc_init_array+0xc>
 801a1de:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1e2:	4798      	blx	r3
 801a1e4:	3601      	adds	r6, #1
 801a1e6:	e7f2      	b.n	801a1ce <__libc_init_array+0x1e>
 801a1e8:	0801ea38 	.word	0x0801ea38
 801a1ec:	0801ea38 	.word	0x0801ea38
 801a1f0:	0801ea38 	.word	0x0801ea38
 801a1f4:	0801ea3c 	.word	0x0801ea3c

0801a1f8 <__retarget_lock_init_recursive>:
 801a1f8:	4770      	bx	lr

0801a1fa <__retarget_lock_acquire_recursive>:
 801a1fa:	4770      	bx	lr

0801a1fc <__retarget_lock_release_recursive>:
 801a1fc:	4770      	bx	lr

0801a1fe <memcmp>:
 801a1fe:	b510      	push	{r4, lr}
 801a200:	3901      	subs	r1, #1
 801a202:	4402      	add	r2, r0
 801a204:	4290      	cmp	r0, r2
 801a206:	d101      	bne.n	801a20c <memcmp+0xe>
 801a208:	2000      	movs	r0, #0
 801a20a:	e005      	b.n	801a218 <memcmp+0x1a>
 801a20c:	7803      	ldrb	r3, [r0, #0]
 801a20e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a212:	42a3      	cmp	r3, r4
 801a214:	d001      	beq.n	801a21a <memcmp+0x1c>
 801a216:	1b18      	subs	r0, r3, r4
 801a218:	bd10      	pop	{r4, pc}
 801a21a:	3001      	adds	r0, #1
 801a21c:	e7f2      	b.n	801a204 <memcmp+0x6>

0801a21e <memcpy>:
 801a21e:	440a      	add	r2, r1
 801a220:	4291      	cmp	r1, r2
 801a222:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a226:	d100      	bne.n	801a22a <memcpy+0xc>
 801a228:	4770      	bx	lr
 801a22a:	b510      	push	{r4, lr}
 801a22c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a230:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a234:	4291      	cmp	r1, r2
 801a236:	d1f9      	bne.n	801a22c <memcpy+0xe>
 801a238:	bd10      	pop	{r4, pc}

0801a23a <memset>:
 801a23a:	4402      	add	r2, r0
 801a23c:	4603      	mov	r3, r0
 801a23e:	4293      	cmp	r3, r2
 801a240:	d100      	bne.n	801a244 <memset+0xa>
 801a242:	4770      	bx	lr
 801a244:	f803 1b01 	strb.w	r1, [r3], #1
 801a248:	e7f9      	b.n	801a23e <memset+0x4>
	...

0801a24c <sbrk_aligned>:
 801a24c:	b570      	push	{r4, r5, r6, lr}
 801a24e:	4e0e      	ldr	r6, [pc, #56]	; (801a288 <sbrk_aligned+0x3c>)
 801a250:	460c      	mov	r4, r1
 801a252:	6831      	ldr	r1, [r6, #0]
 801a254:	4605      	mov	r5, r0
 801a256:	b911      	cbnz	r1, 801a25e <sbrk_aligned+0x12>
 801a258:	f000 f94c 	bl	801a4f4 <_sbrk_r>
 801a25c:	6030      	str	r0, [r6, #0]
 801a25e:	4621      	mov	r1, r4
 801a260:	4628      	mov	r0, r5
 801a262:	f000 f947 	bl	801a4f4 <_sbrk_r>
 801a266:	1c43      	adds	r3, r0, #1
 801a268:	d00a      	beq.n	801a280 <sbrk_aligned+0x34>
 801a26a:	1cc4      	adds	r4, r0, #3
 801a26c:	f024 0403 	bic.w	r4, r4, #3
 801a270:	42a0      	cmp	r0, r4
 801a272:	d007      	beq.n	801a284 <sbrk_aligned+0x38>
 801a274:	1a21      	subs	r1, r4, r0
 801a276:	4628      	mov	r0, r5
 801a278:	f000 f93c 	bl	801a4f4 <_sbrk_r>
 801a27c:	3001      	adds	r0, #1
 801a27e:	d101      	bne.n	801a284 <sbrk_aligned+0x38>
 801a280:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a284:	4620      	mov	r0, r4
 801a286:	bd70      	pop	{r4, r5, r6, pc}
 801a288:	2004f738 	.word	0x2004f738

0801a28c <_malloc_r>:
 801a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a290:	1ccd      	adds	r5, r1, #3
 801a292:	f025 0503 	bic.w	r5, r5, #3
 801a296:	3508      	adds	r5, #8
 801a298:	2d0c      	cmp	r5, #12
 801a29a:	bf38      	it	cc
 801a29c:	250c      	movcc	r5, #12
 801a29e:	2d00      	cmp	r5, #0
 801a2a0:	4607      	mov	r7, r0
 801a2a2:	db01      	blt.n	801a2a8 <_malloc_r+0x1c>
 801a2a4:	42a9      	cmp	r1, r5
 801a2a6:	d905      	bls.n	801a2b4 <_malloc_r+0x28>
 801a2a8:	230c      	movs	r3, #12
 801a2aa:	603b      	str	r3, [r7, #0]
 801a2ac:	2600      	movs	r6, #0
 801a2ae:	4630      	mov	r0, r6
 801a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2b4:	4e2e      	ldr	r6, [pc, #184]	; (801a370 <_malloc_r+0xe4>)
 801a2b6:	f000 fa9f 	bl	801a7f8 <__malloc_lock>
 801a2ba:	6833      	ldr	r3, [r6, #0]
 801a2bc:	461c      	mov	r4, r3
 801a2be:	bb34      	cbnz	r4, 801a30e <_malloc_r+0x82>
 801a2c0:	4629      	mov	r1, r5
 801a2c2:	4638      	mov	r0, r7
 801a2c4:	f7ff ffc2 	bl	801a24c <sbrk_aligned>
 801a2c8:	1c43      	adds	r3, r0, #1
 801a2ca:	4604      	mov	r4, r0
 801a2cc:	d14d      	bne.n	801a36a <_malloc_r+0xde>
 801a2ce:	6834      	ldr	r4, [r6, #0]
 801a2d0:	4626      	mov	r6, r4
 801a2d2:	2e00      	cmp	r6, #0
 801a2d4:	d140      	bne.n	801a358 <_malloc_r+0xcc>
 801a2d6:	6823      	ldr	r3, [r4, #0]
 801a2d8:	4631      	mov	r1, r6
 801a2da:	4638      	mov	r0, r7
 801a2dc:	eb04 0803 	add.w	r8, r4, r3
 801a2e0:	f000 f908 	bl	801a4f4 <_sbrk_r>
 801a2e4:	4580      	cmp	r8, r0
 801a2e6:	d13a      	bne.n	801a35e <_malloc_r+0xd2>
 801a2e8:	6821      	ldr	r1, [r4, #0]
 801a2ea:	3503      	adds	r5, #3
 801a2ec:	1a6d      	subs	r5, r5, r1
 801a2ee:	f025 0503 	bic.w	r5, r5, #3
 801a2f2:	3508      	adds	r5, #8
 801a2f4:	2d0c      	cmp	r5, #12
 801a2f6:	bf38      	it	cc
 801a2f8:	250c      	movcc	r5, #12
 801a2fa:	4629      	mov	r1, r5
 801a2fc:	4638      	mov	r0, r7
 801a2fe:	f7ff ffa5 	bl	801a24c <sbrk_aligned>
 801a302:	3001      	adds	r0, #1
 801a304:	d02b      	beq.n	801a35e <_malloc_r+0xd2>
 801a306:	6823      	ldr	r3, [r4, #0]
 801a308:	442b      	add	r3, r5
 801a30a:	6023      	str	r3, [r4, #0]
 801a30c:	e00e      	b.n	801a32c <_malloc_r+0xa0>
 801a30e:	6822      	ldr	r2, [r4, #0]
 801a310:	1b52      	subs	r2, r2, r5
 801a312:	d41e      	bmi.n	801a352 <_malloc_r+0xc6>
 801a314:	2a0b      	cmp	r2, #11
 801a316:	d916      	bls.n	801a346 <_malloc_r+0xba>
 801a318:	1961      	adds	r1, r4, r5
 801a31a:	42a3      	cmp	r3, r4
 801a31c:	6025      	str	r5, [r4, #0]
 801a31e:	bf18      	it	ne
 801a320:	6059      	strne	r1, [r3, #4]
 801a322:	6863      	ldr	r3, [r4, #4]
 801a324:	bf08      	it	eq
 801a326:	6031      	streq	r1, [r6, #0]
 801a328:	5162      	str	r2, [r4, r5]
 801a32a:	604b      	str	r3, [r1, #4]
 801a32c:	4638      	mov	r0, r7
 801a32e:	f104 060b 	add.w	r6, r4, #11
 801a332:	f000 fa67 	bl	801a804 <__malloc_unlock>
 801a336:	f026 0607 	bic.w	r6, r6, #7
 801a33a:	1d23      	adds	r3, r4, #4
 801a33c:	1af2      	subs	r2, r6, r3
 801a33e:	d0b6      	beq.n	801a2ae <_malloc_r+0x22>
 801a340:	1b9b      	subs	r3, r3, r6
 801a342:	50a3      	str	r3, [r4, r2]
 801a344:	e7b3      	b.n	801a2ae <_malloc_r+0x22>
 801a346:	6862      	ldr	r2, [r4, #4]
 801a348:	42a3      	cmp	r3, r4
 801a34a:	bf0c      	ite	eq
 801a34c:	6032      	streq	r2, [r6, #0]
 801a34e:	605a      	strne	r2, [r3, #4]
 801a350:	e7ec      	b.n	801a32c <_malloc_r+0xa0>
 801a352:	4623      	mov	r3, r4
 801a354:	6864      	ldr	r4, [r4, #4]
 801a356:	e7b2      	b.n	801a2be <_malloc_r+0x32>
 801a358:	4634      	mov	r4, r6
 801a35a:	6876      	ldr	r6, [r6, #4]
 801a35c:	e7b9      	b.n	801a2d2 <_malloc_r+0x46>
 801a35e:	230c      	movs	r3, #12
 801a360:	603b      	str	r3, [r7, #0]
 801a362:	4638      	mov	r0, r7
 801a364:	f000 fa4e 	bl	801a804 <__malloc_unlock>
 801a368:	e7a1      	b.n	801a2ae <_malloc_r+0x22>
 801a36a:	6025      	str	r5, [r4, #0]
 801a36c:	e7de      	b.n	801a32c <_malloc_r+0xa0>
 801a36e:	bf00      	nop
 801a370:	2004f734 	.word	0x2004f734

0801a374 <iprintf>:
 801a374:	b40f      	push	{r0, r1, r2, r3}
 801a376:	4b0a      	ldr	r3, [pc, #40]	; (801a3a0 <iprintf+0x2c>)
 801a378:	b513      	push	{r0, r1, r4, lr}
 801a37a:	681c      	ldr	r4, [r3, #0]
 801a37c:	b124      	cbz	r4, 801a388 <iprintf+0x14>
 801a37e:	69a3      	ldr	r3, [r4, #24]
 801a380:	b913      	cbnz	r3, 801a388 <iprintf+0x14>
 801a382:	4620      	mov	r0, r4
 801a384:	f7ff fe76 	bl	801a074 <__sinit>
 801a388:	ab05      	add	r3, sp, #20
 801a38a:	9a04      	ldr	r2, [sp, #16]
 801a38c:	68a1      	ldr	r1, [r4, #8]
 801a38e:	9301      	str	r3, [sp, #4]
 801a390:	4620      	mov	r0, r4
 801a392:	f000 fab3 	bl	801a8fc <_vfiprintf_r>
 801a396:	b002      	add	sp, #8
 801a398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a39c:	b004      	add	sp, #16
 801a39e:	4770      	bx	lr
 801a3a0:	20001a5c 	.word	0x20001a5c

0801a3a4 <rand>:
 801a3a4:	4b16      	ldr	r3, [pc, #88]	; (801a400 <rand+0x5c>)
 801a3a6:	b510      	push	{r4, lr}
 801a3a8:	681c      	ldr	r4, [r3, #0]
 801a3aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a3ac:	b9b3      	cbnz	r3, 801a3dc <rand+0x38>
 801a3ae:	2018      	movs	r0, #24
 801a3b0:	f000 fa1a 	bl	801a7e8 <malloc>
 801a3b4:	63a0      	str	r0, [r4, #56]	; 0x38
 801a3b6:	b928      	cbnz	r0, 801a3c4 <rand+0x20>
 801a3b8:	4602      	mov	r2, r0
 801a3ba:	4b12      	ldr	r3, [pc, #72]	; (801a404 <rand+0x60>)
 801a3bc:	4812      	ldr	r0, [pc, #72]	; (801a408 <rand+0x64>)
 801a3be:	214e      	movs	r1, #78	; 0x4e
 801a3c0:	f000 f8fe 	bl	801a5c0 <__assert_func>
 801a3c4:	4a11      	ldr	r2, [pc, #68]	; (801a40c <rand+0x68>)
 801a3c6:	4b12      	ldr	r3, [pc, #72]	; (801a410 <rand+0x6c>)
 801a3c8:	e9c0 2300 	strd	r2, r3, [r0]
 801a3cc:	4b11      	ldr	r3, [pc, #68]	; (801a414 <rand+0x70>)
 801a3ce:	6083      	str	r3, [r0, #8]
 801a3d0:	230b      	movs	r3, #11
 801a3d2:	8183      	strh	r3, [r0, #12]
 801a3d4:	2201      	movs	r2, #1
 801a3d6:	2300      	movs	r3, #0
 801a3d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a3dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a3de:	4a0e      	ldr	r2, [pc, #56]	; (801a418 <rand+0x74>)
 801a3e0:	6920      	ldr	r0, [r4, #16]
 801a3e2:	6963      	ldr	r3, [r4, #20]
 801a3e4:	490d      	ldr	r1, [pc, #52]	; (801a41c <rand+0x78>)
 801a3e6:	4342      	muls	r2, r0
 801a3e8:	fb01 2203 	mla	r2, r1, r3, r2
 801a3ec:	fba0 0101 	umull	r0, r1, r0, r1
 801a3f0:	1c43      	adds	r3, r0, #1
 801a3f2:	eb42 0001 	adc.w	r0, r2, r1
 801a3f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a3fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a3fe:	bd10      	pop	{r4, pc}
 801a400:	20001a5c 	.word	0x20001a5c
 801a404:	0801e94c 	.word	0x0801e94c
 801a408:	0801e963 	.word	0x0801e963
 801a40c:	abcd330e 	.word	0xabcd330e
 801a410:	e66d1234 	.word	0xe66d1234
 801a414:	0005deec 	.word	0x0005deec
 801a418:	5851f42d 	.word	0x5851f42d
 801a41c:	4c957f2d 	.word	0x4c957f2d

0801a420 <cleanup_glue>:
 801a420:	b538      	push	{r3, r4, r5, lr}
 801a422:	460c      	mov	r4, r1
 801a424:	6809      	ldr	r1, [r1, #0]
 801a426:	4605      	mov	r5, r0
 801a428:	b109      	cbz	r1, 801a42e <cleanup_glue+0xe>
 801a42a:	f7ff fff9 	bl	801a420 <cleanup_glue>
 801a42e:	4621      	mov	r1, r4
 801a430:	4628      	mov	r0, r5
 801a432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a436:	f000 b9eb 	b.w	801a810 <_free_r>
	...

0801a43c <_reclaim_reent>:
 801a43c:	4b2c      	ldr	r3, [pc, #176]	; (801a4f0 <_reclaim_reent+0xb4>)
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4283      	cmp	r3, r0
 801a442:	b570      	push	{r4, r5, r6, lr}
 801a444:	4604      	mov	r4, r0
 801a446:	d051      	beq.n	801a4ec <_reclaim_reent+0xb0>
 801a448:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a44a:	b143      	cbz	r3, 801a45e <_reclaim_reent+0x22>
 801a44c:	68db      	ldr	r3, [r3, #12]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d14a      	bne.n	801a4e8 <_reclaim_reent+0xac>
 801a452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a454:	6819      	ldr	r1, [r3, #0]
 801a456:	b111      	cbz	r1, 801a45e <_reclaim_reent+0x22>
 801a458:	4620      	mov	r0, r4
 801a45a:	f000 f9d9 	bl	801a810 <_free_r>
 801a45e:	6961      	ldr	r1, [r4, #20]
 801a460:	b111      	cbz	r1, 801a468 <_reclaim_reent+0x2c>
 801a462:	4620      	mov	r0, r4
 801a464:	f000 f9d4 	bl	801a810 <_free_r>
 801a468:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a46a:	b111      	cbz	r1, 801a472 <_reclaim_reent+0x36>
 801a46c:	4620      	mov	r0, r4
 801a46e:	f000 f9cf 	bl	801a810 <_free_r>
 801a472:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a474:	b111      	cbz	r1, 801a47c <_reclaim_reent+0x40>
 801a476:	4620      	mov	r0, r4
 801a478:	f000 f9ca 	bl	801a810 <_free_r>
 801a47c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a47e:	b111      	cbz	r1, 801a486 <_reclaim_reent+0x4a>
 801a480:	4620      	mov	r0, r4
 801a482:	f000 f9c5 	bl	801a810 <_free_r>
 801a486:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a488:	b111      	cbz	r1, 801a490 <_reclaim_reent+0x54>
 801a48a:	4620      	mov	r0, r4
 801a48c:	f000 f9c0 	bl	801a810 <_free_r>
 801a490:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a492:	b111      	cbz	r1, 801a49a <_reclaim_reent+0x5e>
 801a494:	4620      	mov	r0, r4
 801a496:	f000 f9bb 	bl	801a810 <_free_r>
 801a49a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a49c:	b111      	cbz	r1, 801a4a4 <_reclaim_reent+0x68>
 801a49e:	4620      	mov	r0, r4
 801a4a0:	f000 f9b6 	bl	801a810 <_free_r>
 801a4a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a4a6:	b111      	cbz	r1, 801a4ae <_reclaim_reent+0x72>
 801a4a8:	4620      	mov	r0, r4
 801a4aa:	f000 f9b1 	bl	801a810 <_free_r>
 801a4ae:	69a3      	ldr	r3, [r4, #24]
 801a4b0:	b1e3      	cbz	r3, 801a4ec <_reclaim_reent+0xb0>
 801a4b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a4b4:	4620      	mov	r0, r4
 801a4b6:	4798      	blx	r3
 801a4b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a4ba:	b1b9      	cbz	r1, 801a4ec <_reclaim_reent+0xb0>
 801a4bc:	4620      	mov	r0, r4
 801a4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a4c2:	f7ff bfad 	b.w	801a420 <cleanup_glue>
 801a4c6:	5949      	ldr	r1, [r1, r5]
 801a4c8:	b941      	cbnz	r1, 801a4dc <_reclaim_reent+0xa0>
 801a4ca:	3504      	adds	r5, #4
 801a4cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a4ce:	2d80      	cmp	r5, #128	; 0x80
 801a4d0:	68d9      	ldr	r1, [r3, #12]
 801a4d2:	d1f8      	bne.n	801a4c6 <_reclaim_reent+0x8a>
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	f000 f99b 	bl	801a810 <_free_r>
 801a4da:	e7ba      	b.n	801a452 <_reclaim_reent+0x16>
 801a4dc:	680e      	ldr	r6, [r1, #0]
 801a4de:	4620      	mov	r0, r4
 801a4e0:	f000 f996 	bl	801a810 <_free_r>
 801a4e4:	4631      	mov	r1, r6
 801a4e6:	e7ef      	b.n	801a4c8 <_reclaim_reent+0x8c>
 801a4e8:	2500      	movs	r5, #0
 801a4ea:	e7ef      	b.n	801a4cc <_reclaim_reent+0x90>
 801a4ec:	bd70      	pop	{r4, r5, r6, pc}
 801a4ee:	bf00      	nop
 801a4f0:	20001a5c 	.word	0x20001a5c

0801a4f4 <_sbrk_r>:
 801a4f4:	b538      	push	{r3, r4, r5, lr}
 801a4f6:	4d06      	ldr	r5, [pc, #24]	; (801a510 <_sbrk_r+0x1c>)
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	4604      	mov	r4, r0
 801a4fc:	4608      	mov	r0, r1
 801a4fe:	602b      	str	r3, [r5, #0]
 801a500:	f7e9 ff76 	bl	80043f0 <_sbrk>
 801a504:	1c43      	adds	r3, r0, #1
 801a506:	d102      	bne.n	801a50e <_sbrk_r+0x1a>
 801a508:	682b      	ldr	r3, [r5, #0]
 801a50a:	b103      	cbz	r3, 801a50e <_sbrk_r+0x1a>
 801a50c:	6023      	str	r3, [r4, #0]
 801a50e:	bd38      	pop	{r3, r4, r5, pc}
 801a510:	2004f73c 	.word	0x2004f73c

0801a514 <__sread>:
 801a514:	b510      	push	{r4, lr}
 801a516:	460c      	mov	r4, r1
 801a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a51c:	f000 fcb2 	bl	801ae84 <_read_r>
 801a520:	2800      	cmp	r0, #0
 801a522:	bfab      	itete	ge
 801a524:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a526:	89a3      	ldrhlt	r3, [r4, #12]
 801a528:	181b      	addge	r3, r3, r0
 801a52a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a52e:	bfac      	ite	ge
 801a530:	6563      	strge	r3, [r4, #84]	; 0x54
 801a532:	81a3      	strhlt	r3, [r4, #12]
 801a534:	bd10      	pop	{r4, pc}

0801a536 <__swrite>:
 801a536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a53a:	461f      	mov	r7, r3
 801a53c:	898b      	ldrh	r3, [r1, #12]
 801a53e:	05db      	lsls	r3, r3, #23
 801a540:	4605      	mov	r5, r0
 801a542:	460c      	mov	r4, r1
 801a544:	4616      	mov	r6, r2
 801a546:	d505      	bpl.n	801a554 <__swrite+0x1e>
 801a548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a54c:	2302      	movs	r3, #2
 801a54e:	2200      	movs	r2, #0
 801a550:	f000 f938 	bl	801a7c4 <_lseek_r>
 801a554:	89a3      	ldrh	r3, [r4, #12]
 801a556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a55a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a55e:	81a3      	strh	r3, [r4, #12]
 801a560:	4632      	mov	r2, r6
 801a562:	463b      	mov	r3, r7
 801a564:	4628      	mov	r0, r5
 801a566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a56a:	f000 b817 	b.w	801a59c <_write_r>

0801a56e <__sseek>:
 801a56e:	b510      	push	{r4, lr}
 801a570:	460c      	mov	r4, r1
 801a572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a576:	f000 f925 	bl	801a7c4 <_lseek_r>
 801a57a:	1c43      	adds	r3, r0, #1
 801a57c:	89a3      	ldrh	r3, [r4, #12]
 801a57e:	bf15      	itete	ne
 801a580:	6560      	strne	r0, [r4, #84]	; 0x54
 801a582:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a586:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a58a:	81a3      	strheq	r3, [r4, #12]
 801a58c:	bf18      	it	ne
 801a58e:	81a3      	strhne	r3, [r4, #12]
 801a590:	bd10      	pop	{r4, pc}

0801a592 <__sclose>:
 801a592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a596:	f000 b831 	b.w	801a5fc <_close_r>
	...

0801a59c <_write_r>:
 801a59c:	b538      	push	{r3, r4, r5, lr}
 801a59e:	4d07      	ldr	r5, [pc, #28]	; (801a5bc <_write_r+0x20>)
 801a5a0:	4604      	mov	r4, r0
 801a5a2:	4608      	mov	r0, r1
 801a5a4:	4611      	mov	r1, r2
 801a5a6:	2200      	movs	r2, #0
 801a5a8:	602a      	str	r2, [r5, #0]
 801a5aa:	461a      	mov	r2, r3
 801a5ac:	f7e9 fecf 	bl	800434e <_write>
 801a5b0:	1c43      	adds	r3, r0, #1
 801a5b2:	d102      	bne.n	801a5ba <_write_r+0x1e>
 801a5b4:	682b      	ldr	r3, [r5, #0]
 801a5b6:	b103      	cbz	r3, 801a5ba <_write_r+0x1e>
 801a5b8:	6023      	str	r3, [r4, #0]
 801a5ba:	bd38      	pop	{r3, r4, r5, pc}
 801a5bc:	2004f73c 	.word	0x2004f73c

0801a5c0 <__assert_func>:
 801a5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a5c2:	4614      	mov	r4, r2
 801a5c4:	461a      	mov	r2, r3
 801a5c6:	4b09      	ldr	r3, [pc, #36]	; (801a5ec <__assert_func+0x2c>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	4605      	mov	r5, r0
 801a5cc:	68d8      	ldr	r0, [r3, #12]
 801a5ce:	b14c      	cbz	r4, 801a5e4 <__assert_func+0x24>
 801a5d0:	4b07      	ldr	r3, [pc, #28]	; (801a5f0 <__assert_func+0x30>)
 801a5d2:	9100      	str	r1, [sp, #0]
 801a5d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a5d8:	4906      	ldr	r1, [pc, #24]	; (801a5f4 <__assert_func+0x34>)
 801a5da:	462b      	mov	r3, r5
 801a5dc:	f000 f8e0 	bl	801a7a0 <fiprintf>
 801a5e0:	f000 fd22 	bl	801b028 <abort>
 801a5e4:	4b04      	ldr	r3, [pc, #16]	; (801a5f8 <__assert_func+0x38>)
 801a5e6:	461c      	mov	r4, r3
 801a5e8:	e7f3      	b.n	801a5d2 <__assert_func+0x12>
 801a5ea:	bf00      	nop
 801a5ec:	20001a5c 	.word	0x20001a5c
 801a5f0:	0801e9be 	.word	0x0801e9be
 801a5f4:	0801e9cb 	.word	0x0801e9cb
 801a5f8:	0801e9f9 	.word	0x0801e9f9

0801a5fc <_close_r>:
 801a5fc:	b538      	push	{r3, r4, r5, lr}
 801a5fe:	4d06      	ldr	r5, [pc, #24]	; (801a618 <_close_r+0x1c>)
 801a600:	2300      	movs	r3, #0
 801a602:	4604      	mov	r4, r0
 801a604:	4608      	mov	r0, r1
 801a606:	602b      	str	r3, [r5, #0]
 801a608:	f7e9 febd 	bl	8004386 <_close>
 801a60c:	1c43      	adds	r3, r0, #1
 801a60e:	d102      	bne.n	801a616 <_close_r+0x1a>
 801a610:	682b      	ldr	r3, [r5, #0]
 801a612:	b103      	cbz	r3, 801a616 <_close_r+0x1a>
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	bd38      	pop	{r3, r4, r5, pc}
 801a618:	2004f73c 	.word	0x2004f73c

0801a61c <__sflush_r>:
 801a61c:	898a      	ldrh	r2, [r1, #12]
 801a61e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a622:	4605      	mov	r5, r0
 801a624:	0710      	lsls	r0, r2, #28
 801a626:	460c      	mov	r4, r1
 801a628:	d458      	bmi.n	801a6dc <__sflush_r+0xc0>
 801a62a:	684b      	ldr	r3, [r1, #4]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	dc05      	bgt.n	801a63c <__sflush_r+0x20>
 801a630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a632:	2b00      	cmp	r3, #0
 801a634:	dc02      	bgt.n	801a63c <__sflush_r+0x20>
 801a636:	2000      	movs	r0, #0
 801a638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a63c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a63e:	2e00      	cmp	r6, #0
 801a640:	d0f9      	beq.n	801a636 <__sflush_r+0x1a>
 801a642:	2300      	movs	r3, #0
 801a644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a648:	682f      	ldr	r7, [r5, #0]
 801a64a:	602b      	str	r3, [r5, #0]
 801a64c:	d032      	beq.n	801a6b4 <__sflush_r+0x98>
 801a64e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a650:	89a3      	ldrh	r3, [r4, #12]
 801a652:	075a      	lsls	r2, r3, #29
 801a654:	d505      	bpl.n	801a662 <__sflush_r+0x46>
 801a656:	6863      	ldr	r3, [r4, #4]
 801a658:	1ac0      	subs	r0, r0, r3
 801a65a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a65c:	b10b      	cbz	r3, 801a662 <__sflush_r+0x46>
 801a65e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a660:	1ac0      	subs	r0, r0, r3
 801a662:	2300      	movs	r3, #0
 801a664:	4602      	mov	r2, r0
 801a666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a668:	6a21      	ldr	r1, [r4, #32]
 801a66a:	4628      	mov	r0, r5
 801a66c:	47b0      	blx	r6
 801a66e:	1c43      	adds	r3, r0, #1
 801a670:	89a3      	ldrh	r3, [r4, #12]
 801a672:	d106      	bne.n	801a682 <__sflush_r+0x66>
 801a674:	6829      	ldr	r1, [r5, #0]
 801a676:	291d      	cmp	r1, #29
 801a678:	d82c      	bhi.n	801a6d4 <__sflush_r+0xb8>
 801a67a:	4a2a      	ldr	r2, [pc, #168]	; (801a724 <__sflush_r+0x108>)
 801a67c:	40ca      	lsrs	r2, r1
 801a67e:	07d6      	lsls	r6, r2, #31
 801a680:	d528      	bpl.n	801a6d4 <__sflush_r+0xb8>
 801a682:	2200      	movs	r2, #0
 801a684:	6062      	str	r2, [r4, #4]
 801a686:	04d9      	lsls	r1, r3, #19
 801a688:	6922      	ldr	r2, [r4, #16]
 801a68a:	6022      	str	r2, [r4, #0]
 801a68c:	d504      	bpl.n	801a698 <__sflush_r+0x7c>
 801a68e:	1c42      	adds	r2, r0, #1
 801a690:	d101      	bne.n	801a696 <__sflush_r+0x7a>
 801a692:	682b      	ldr	r3, [r5, #0]
 801a694:	b903      	cbnz	r3, 801a698 <__sflush_r+0x7c>
 801a696:	6560      	str	r0, [r4, #84]	; 0x54
 801a698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a69a:	602f      	str	r7, [r5, #0]
 801a69c:	2900      	cmp	r1, #0
 801a69e:	d0ca      	beq.n	801a636 <__sflush_r+0x1a>
 801a6a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6a4:	4299      	cmp	r1, r3
 801a6a6:	d002      	beq.n	801a6ae <__sflush_r+0x92>
 801a6a8:	4628      	mov	r0, r5
 801a6aa:	f000 f8b1 	bl	801a810 <_free_r>
 801a6ae:	2000      	movs	r0, #0
 801a6b0:	6360      	str	r0, [r4, #52]	; 0x34
 801a6b2:	e7c1      	b.n	801a638 <__sflush_r+0x1c>
 801a6b4:	6a21      	ldr	r1, [r4, #32]
 801a6b6:	2301      	movs	r3, #1
 801a6b8:	4628      	mov	r0, r5
 801a6ba:	47b0      	blx	r6
 801a6bc:	1c41      	adds	r1, r0, #1
 801a6be:	d1c7      	bne.n	801a650 <__sflush_r+0x34>
 801a6c0:	682b      	ldr	r3, [r5, #0]
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d0c4      	beq.n	801a650 <__sflush_r+0x34>
 801a6c6:	2b1d      	cmp	r3, #29
 801a6c8:	d001      	beq.n	801a6ce <__sflush_r+0xb2>
 801a6ca:	2b16      	cmp	r3, #22
 801a6cc:	d101      	bne.n	801a6d2 <__sflush_r+0xb6>
 801a6ce:	602f      	str	r7, [r5, #0]
 801a6d0:	e7b1      	b.n	801a636 <__sflush_r+0x1a>
 801a6d2:	89a3      	ldrh	r3, [r4, #12]
 801a6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6d8:	81a3      	strh	r3, [r4, #12]
 801a6da:	e7ad      	b.n	801a638 <__sflush_r+0x1c>
 801a6dc:	690f      	ldr	r7, [r1, #16]
 801a6de:	2f00      	cmp	r7, #0
 801a6e0:	d0a9      	beq.n	801a636 <__sflush_r+0x1a>
 801a6e2:	0793      	lsls	r3, r2, #30
 801a6e4:	680e      	ldr	r6, [r1, #0]
 801a6e6:	bf08      	it	eq
 801a6e8:	694b      	ldreq	r3, [r1, #20]
 801a6ea:	600f      	str	r7, [r1, #0]
 801a6ec:	bf18      	it	ne
 801a6ee:	2300      	movne	r3, #0
 801a6f0:	eba6 0807 	sub.w	r8, r6, r7
 801a6f4:	608b      	str	r3, [r1, #8]
 801a6f6:	f1b8 0f00 	cmp.w	r8, #0
 801a6fa:	dd9c      	ble.n	801a636 <__sflush_r+0x1a>
 801a6fc:	6a21      	ldr	r1, [r4, #32]
 801a6fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a700:	4643      	mov	r3, r8
 801a702:	463a      	mov	r2, r7
 801a704:	4628      	mov	r0, r5
 801a706:	47b0      	blx	r6
 801a708:	2800      	cmp	r0, #0
 801a70a:	dc06      	bgt.n	801a71a <__sflush_r+0xfe>
 801a70c:	89a3      	ldrh	r3, [r4, #12]
 801a70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a712:	81a3      	strh	r3, [r4, #12]
 801a714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a718:	e78e      	b.n	801a638 <__sflush_r+0x1c>
 801a71a:	4407      	add	r7, r0
 801a71c:	eba8 0800 	sub.w	r8, r8, r0
 801a720:	e7e9      	b.n	801a6f6 <__sflush_r+0xda>
 801a722:	bf00      	nop
 801a724:	20400001 	.word	0x20400001

0801a728 <_fflush_r>:
 801a728:	b538      	push	{r3, r4, r5, lr}
 801a72a:	690b      	ldr	r3, [r1, #16]
 801a72c:	4605      	mov	r5, r0
 801a72e:	460c      	mov	r4, r1
 801a730:	b913      	cbnz	r3, 801a738 <_fflush_r+0x10>
 801a732:	2500      	movs	r5, #0
 801a734:	4628      	mov	r0, r5
 801a736:	bd38      	pop	{r3, r4, r5, pc}
 801a738:	b118      	cbz	r0, 801a742 <_fflush_r+0x1a>
 801a73a:	6983      	ldr	r3, [r0, #24]
 801a73c:	b90b      	cbnz	r3, 801a742 <_fflush_r+0x1a>
 801a73e:	f7ff fc99 	bl	801a074 <__sinit>
 801a742:	4b14      	ldr	r3, [pc, #80]	; (801a794 <_fflush_r+0x6c>)
 801a744:	429c      	cmp	r4, r3
 801a746:	d11b      	bne.n	801a780 <_fflush_r+0x58>
 801a748:	686c      	ldr	r4, [r5, #4]
 801a74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d0ef      	beq.n	801a732 <_fflush_r+0xa>
 801a752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a754:	07d0      	lsls	r0, r2, #31
 801a756:	d404      	bmi.n	801a762 <_fflush_r+0x3a>
 801a758:	0599      	lsls	r1, r3, #22
 801a75a:	d402      	bmi.n	801a762 <_fflush_r+0x3a>
 801a75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a75e:	f7ff fd4c 	bl	801a1fa <__retarget_lock_acquire_recursive>
 801a762:	4628      	mov	r0, r5
 801a764:	4621      	mov	r1, r4
 801a766:	f7ff ff59 	bl	801a61c <__sflush_r>
 801a76a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a76c:	07da      	lsls	r2, r3, #31
 801a76e:	4605      	mov	r5, r0
 801a770:	d4e0      	bmi.n	801a734 <_fflush_r+0xc>
 801a772:	89a3      	ldrh	r3, [r4, #12]
 801a774:	059b      	lsls	r3, r3, #22
 801a776:	d4dd      	bmi.n	801a734 <_fflush_r+0xc>
 801a778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a77a:	f7ff fd3f 	bl	801a1fc <__retarget_lock_release_recursive>
 801a77e:	e7d9      	b.n	801a734 <_fflush_r+0xc>
 801a780:	4b05      	ldr	r3, [pc, #20]	; (801a798 <_fflush_r+0x70>)
 801a782:	429c      	cmp	r4, r3
 801a784:	d101      	bne.n	801a78a <_fflush_r+0x62>
 801a786:	68ac      	ldr	r4, [r5, #8]
 801a788:	e7df      	b.n	801a74a <_fflush_r+0x22>
 801a78a:	4b04      	ldr	r3, [pc, #16]	; (801a79c <_fflush_r+0x74>)
 801a78c:	429c      	cmp	r4, r3
 801a78e:	bf08      	it	eq
 801a790:	68ec      	ldreq	r4, [r5, #12]
 801a792:	e7da      	b.n	801a74a <_fflush_r+0x22>
 801a794:	0801e908 	.word	0x0801e908
 801a798:	0801e928 	.word	0x0801e928
 801a79c:	0801e8e8 	.word	0x0801e8e8

0801a7a0 <fiprintf>:
 801a7a0:	b40e      	push	{r1, r2, r3}
 801a7a2:	b503      	push	{r0, r1, lr}
 801a7a4:	4601      	mov	r1, r0
 801a7a6:	ab03      	add	r3, sp, #12
 801a7a8:	4805      	ldr	r0, [pc, #20]	; (801a7c0 <fiprintf+0x20>)
 801a7aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a7ae:	6800      	ldr	r0, [r0, #0]
 801a7b0:	9301      	str	r3, [sp, #4]
 801a7b2:	f000 f8a3 	bl	801a8fc <_vfiprintf_r>
 801a7b6:	b002      	add	sp, #8
 801a7b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a7bc:	b003      	add	sp, #12
 801a7be:	4770      	bx	lr
 801a7c0:	20001a5c 	.word	0x20001a5c

0801a7c4 <_lseek_r>:
 801a7c4:	b538      	push	{r3, r4, r5, lr}
 801a7c6:	4d07      	ldr	r5, [pc, #28]	; (801a7e4 <_lseek_r+0x20>)
 801a7c8:	4604      	mov	r4, r0
 801a7ca:	4608      	mov	r0, r1
 801a7cc:	4611      	mov	r1, r2
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	602a      	str	r2, [r5, #0]
 801a7d2:	461a      	mov	r2, r3
 801a7d4:	f7e9 fdfe 	bl	80043d4 <_lseek>
 801a7d8:	1c43      	adds	r3, r0, #1
 801a7da:	d102      	bne.n	801a7e2 <_lseek_r+0x1e>
 801a7dc:	682b      	ldr	r3, [r5, #0]
 801a7de:	b103      	cbz	r3, 801a7e2 <_lseek_r+0x1e>
 801a7e0:	6023      	str	r3, [r4, #0]
 801a7e2:	bd38      	pop	{r3, r4, r5, pc}
 801a7e4:	2004f73c 	.word	0x2004f73c

0801a7e8 <malloc>:
 801a7e8:	4b02      	ldr	r3, [pc, #8]	; (801a7f4 <malloc+0xc>)
 801a7ea:	4601      	mov	r1, r0
 801a7ec:	6818      	ldr	r0, [r3, #0]
 801a7ee:	f7ff bd4d 	b.w	801a28c <_malloc_r>
 801a7f2:	bf00      	nop
 801a7f4:	20001a5c 	.word	0x20001a5c

0801a7f8 <__malloc_lock>:
 801a7f8:	4801      	ldr	r0, [pc, #4]	; (801a800 <__malloc_lock+0x8>)
 801a7fa:	f7ff bcfe 	b.w	801a1fa <__retarget_lock_acquire_recursive>
 801a7fe:	bf00      	nop
 801a800:	2004f730 	.word	0x2004f730

0801a804 <__malloc_unlock>:
 801a804:	4801      	ldr	r0, [pc, #4]	; (801a80c <__malloc_unlock+0x8>)
 801a806:	f7ff bcf9 	b.w	801a1fc <__retarget_lock_release_recursive>
 801a80a:	bf00      	nop
 801a80c:	2004f730 	.word	0x2004f730

0801a810 <_free_r>:
 801a810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a812:	2900      	cmp	r1, #0
 801a814:	d044      	beq.n	801a8a0 <_free_r+0x90>
 801a816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a81a:	9001      	str	r0, [sp, #4]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	f1a1 0404 	sub.w	r4, r1, #4
 801a822:	bfb8      	it	lt
 801a824:	18e4      	addlt	r4, r4, r3
 801a826:	f7ff ffe7 	bl	801a7f8 <__malloc_lock>
 801a82a:	4a1e      	ldr	r2, [pc, #120]	; (801a8a4 <_free_r+0x94>)
 801a82c:	9801      	ldr	r0, [sp, #4]
 801a82e:	6813      	ldr	r3, [r2, #0]
 801a830:	b933      	cbnz	r3, 801a840 <_free_r+0x30>
 801a832:	6063      	str	r3, [r4, #4]
 801a834:	6014      	str	r4, [r2, #0]
 801a836:	b003      	add	sp, #12
 801a838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a83c:	f7ff bfe2 	b.w	801a804 <__malloc_unlock>
 801a840:	42a3      	cmp	r3, r4
 801a842:	d908      	bls.n	801a856 <_free_r+0x46>
 801a844:	6825      	ldr	r5, [r4, #0]
 801a846:	1961      	adds	r1, r4, r5
 801a848:	428b      	cmp	r3, r1
 801a84a:	bf01      	itttt	eq
 801a84c:	6819      	ldreq	r1, [r3, #0]
 801a84e:	685b      	ldreq	r3, [r3, #4]
 801a850:	1949      	addeq	r1, r1, r5
 801a852:	6021      	streq	r1, [r4, #0]
 801a854:	e7ed      	b.n	801a832 <_free_r+0x22>
 801a856:	461a      	mov	r2, r3
 801a858:	685b      	ldr	r3, [r3, #4]
 801a85a:	b10b      	cbz	r3, 801a860 <_free_r+0x50>
 801a85c:	42a3      	cmp	r3, r4
 801a85e:	d9fa      	bls.n	801a856 <_free_r+0x46>
 801a860:	6811      	ldr	r1, [r2, #0]
 801a862:	1855      	adds	r5, r2, r1
 801a864:	42a5      	cmp	r5, r4
 801a866:	d10b      	bne.n	801a880 <_free_r+0x70>
 801a868:	6824      	ldr	r4, [r4, #0]
 801a86a:	4421      	add	r1, r4
 801a86c:	1854      	adds	r4, r2, r1
 801a86e:	42a3      	cmp	r3, r4
 801a870:	6011      	str	r1, [r2, #0]
 801a872:	d1e0      	bne.n	801a836 <_free_r+0x26>
 801a874:	681c      	ldr	r4, [r3, #0]
 801a876:	685b      	ldr	r3, [r3, #4]
 801a878:	6053      	str	r3, [r2, #4]
 801a87a:	4421      	add	r1, r4
 801a87c:	6011      	str	r1, [r2, #0]
 801a87e:	e7da      	b.n	801a836 <_free_r+0x26>
 801a880:	d902      	bls.n	801a888 <_free_r+0x78>
 801a882:	230c      	movs	r3, #12
 801a884:	6003      	str	r3, [r0, #0]
 801a886:	e7d6      	b.n	801a836 <_free_r+0x26>
 801a888:	6825      	ldr	r5, [r4, #0]
 801a88a:	1961      	adds	r1, r4, r5
 801a88c:	428b      	cmp	r3, r1
 801a88e:	bf04      	itt	eq
 801a890:	6819      	ldreq	r1, [r3, #0]
 801a892:	685b      	ldreq	r3, [r3, #4]
 801a894:	6063      	str	r3, [r4, #4]
 801a896:	bf04      	itt	eq
 801a898:	1949      	addeq	r1, r1, r5
 801a89a:	6021      	streq	r1, [r4, #0]
 801a89c:	6054      	str	r4, [r2, #4]
 801a89e:	e7ca      	b.n	801a836 <_free_r+0x26>
 801a8a0:	b003      	add	sp, #12
 801a8a2:	bd30      	pop	{r4, r5, pc}
 801a8a4:	2004f734 	.word	0x2004f734

0801a8a8 <__sfputc_r>:
 801a8a8:	6893      	ldr	r3, [r2, #8]
 801a8aa:	3b01      	subs	r3, #1
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	b410      	push	{r4}
 801a8b0:	6093      	str	r3, [r2, #8]
 801a8b2:	da08      	bge.n	801a8c6 <__sfputc_r+0x1e>
 801a8b4:	6994      	ldr	r4, [r2, #24]
 801a8b6:	42a3      	cmp	r3, r4
 801a8b8:	db01      	blt.n	801a8be <__sfputc_r+0x16>
 801a8ba:	290a      	cmp	r1, #10
 801a8bc:	d103      	bne.n	801a8c6 <__sfputc_r+0x1e>
 801a8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8c2:	f000 baf1 	b.w	801aea8 <__swbuf_r>
 801a8c6:	6813      	ldr	r3, [r2, #0]
 801a8c8:	1c58      	adds	r0, r3, #1
 801a8ca:	6010      	str	r0, [r2, #0]
 801a8cc:	7019      	strb	r1, [r3, #0]
 801a8ce:	4608      	mov	r0, r1
 801a8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a8d4:	4770      	bx	lr

0801a8d6 <__sfputs_r>:
 801a8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8d8:	4606      	mov	r6, r0
 801a8da:	460f      	mov	r7, r1
 801a8dc:	4614      	mov	r4, r2
 801a8de:	18d5      	adds	r5, r2, r3
 801a8e0:	42ac      	cmp	r4, r5
 801a8e2:	d101      	bne.n	801a8e8 <__sfputs_r+0x12>
 801a8e4:	2000      	movs	r0, #0
 801a8e6:	e007      	b.n	801a8f8 <__sfputs_r+0x22>
 801a8e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8ec:	463a      	mov	r2, r7
 801a8ee:	4630      	mov	r0, r6
 801a8f0:	f7ff ffda 	bl	801a8a8 <__sfputc_r>
 801a8f4:	1c43      	adds	r3, r0, #1
 801a8f6:	d1f3      	bne.n	801a8e0 <__sfputs_r+0xa>
 801a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a8fc <_vfiprintf_r>:
 801a8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a900:	460d      	mov	r5, r1
 801a902:	b09d      	sub	sp, #116	; 0x74
 801a904:	4614      	mov	r4, r2
 801a906:	4698      	mov	r8, r3
 801a908:	4606      	mov	r6, r0
 801a90a:	b118      	cbz	r0, 801a914 <_vfiprintf_r+0x18>
 801a90c:	6983      	ldr	r3, [r0, #24]
 801a90e:	b90b      	cbnz	r3, 801a914 <_vfiprintf_r+0x18>
 801a910:	f7ff fbb0 	bl	801a074 <__sinit>
 801a914:	4b89      	ldr	r3, [pc, #548]	; (801ab3c <_vfiprintf_r+0x240>)
 801a916:	429d      	cmp	r5, r3
 801a918:	d11b      	bne.n	801a952 <_vfiprintf_r+0x56>
 801a91a:	6875      	ldr	r5, [r6, #4]
 801a91c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a91e:	07d9      	lsls	r1, r3, #31
 801a920:	d405      	bmi.n	801a92e <_vfiprintf_r+0x32>
 801a922:	89ab      	ldrh	r3, [r5, #12]
 801a924:	059a      	lsls	r2, r3, #22
 801a926:	d402      	bmi.n	801a92e <_vfiprintf_r+0x32>
 801a928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a92a:	f7ff fc66 	bl	801a1fa <__retarget_lock_acquire_recursive>
 801a92e:	89ab      	ldrh	r3, [r5, #12]
 801a930:	071b      	lsls	r3, r3, #28
 801a932:	d501      	bpl.n	801a938 <_vfiprintf_r+0x3c>
 801a934:	692b      	ldr	r3, [r5, #16]
 801a936:	b9eb      	cbnz	r3, 801a974 <_vfiprintf_r+0x78>
 801a938:	4629      	mov	r1, r5
 801a93a:	4630      	mov	r0, r6
 801a93c:	f000 fb06 	bl	801af4c <__swsetup_r>
 801a940:	b1c0      	cbz	r0, 801a974 <_vfiprintf_r+0x78>
 801a942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a944:	07dc      	lsls	r4, r3, #31
 801a946:	d50e      	bpl.n	801a966 <_vfiprintf_r+0x6a>
 801a948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a94c:	b01d      	add	sp, #116	; 0x74
 801a94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a952:	4b7b      	ldr	r3, [pc, #492]	; (801ab40 <_vfiprintf_r+0x244>)
 801a954:	429d      	cmp	r5, r3
 801a956:	d101      	bne.n	801a95c <_vfiprintf_r+0x60>
 801a958:	68b5      	ldr	r5, [r6, #8]
 801a95a:	e7df      	b.n	801a91c <_vfiprintf_r+0x20>
 801a95c:	4b79      	ldr	r3, [pc, #484]	; (801ab44 <_vfiprintf_r+0x248>)
 801a95e:	429d      	cmp	r5, r3
 801a960:	bf08      	it	eq
 801a962:	68f5      	ldreq	r5, [r6, #12]
 801a964:	e7da      	b.n	801a91c <_vfiprintf_r+0x20>
 801a966:	89ab      	ldrh	r3, [r5, #12]
 801a968:	0598      	lsls	r0, r3, #22
 801a96a:	d4ed      	bmi.n	801a948 <_vfiprintf_r+0x4c>
 801a96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a96e:	f7ff fc45 	bl	801a1fc <__retarget_lock_release_recursive>
 801a972:	e7e9      	b.n	801a948 <_vfiprintf_r+0x4c>
 801a974:	2300      	movs	r3, #0
 801a976:	9309      	str	r3, [sp, #36]	; 0x24
 801a978:	2320      	movs	r3, #32
 801a97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a97e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a982:	2330      	movs	r3, #48	; 0x30
 801a984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ab48 <_vfiprintf_r+0x24c>
 801a988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a98c:	f04f 0901 	mov.w	r9, #1
 801a990:	4623      	mov	r3, r4
 801a992:	469a      	mov	sl, r3
 801a994:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a998:	b10a      	cbz	r2, 801a99e <_vfiprintf_r+0xa2>
 801a99a:	2a25      	cmp	r2, #37	; 0x25
 801a99c:	d1f9      	bne.n	801a992 <_vfiprintf_r+0x96>
 801a99e:	ebba 0b04 	subs.w	fp, sl, r4
 801a9a2:	d00b      	beq.n	801a9bc <_vfiprintf_r+0xc0>
 801a9a4:	465b      	mov	r3, fp
 801a9a6:	4622      	mov	r2, r4
 801a9a8:	4629      	mov	r1, r5
 801a9aa:	4630      	mov	r0, r6
 801a9ac:	f7ff ff93 	bl	801a8d6 <__sfputs_r>
 801a9b0:	3001      	adds	r0, #1
 801a9b2:	f000 80aa 	beq.w	801ab0a <_vfiprintf_r+0x20e>
 801a9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a9b8:	445a      	add	r2, fp
 801a9ba:	9209      	str	r2, [sp, #36]	; 0x24
 801a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	f000 80a2 	beq.w	801ab0a <_vfiprintf_r+0x20e>
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9d0:	f10a 0a01 	add.w	sl, sl, #1
 801a9d4:	9304      	str	r3, [sp, #16]
 801a9d6:	9307      	str	r3, [sp, #28]
 801a9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9dc:	931a      	str	r3, [sp, #104]	; 0x68
 801a9de:	4654      	mov	r4, sl
 801a9e0:	2205      	movs	r2, #5
 801a9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9e6:	4858      	ldr	r0, [pc, #352]	; (801ab48 <_vfiprintf_r+0x24c>)
 801a9e8:	f7e5 fc1a 	bl	8000220 <memchr>
 801a9ec:	9a04      	ldr	r2, [sp, #16]
 801a9ee:	b9d8      	cbnz	r0, 801aa28 <_vfiprintf_r+0x12c>
 801a9f0:	06d1      	lsls	r1, r2, #27
 801a9f2:	bf44      	itt	mi
 801a9f4:	2320      	movmi	r3, #32
 801a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9fa:	0713      	lsls	r3, r2, #28
 801a9fc:	bf44      	itt	mi
 801a9fe:	232b      	movmi	r3, #43	; 0x2b
 801aa00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa04:	f89a 3000 	ldrb.w	r3, [sl]
 801aa08:	2b2a      	cmp	r3, #42	; 0x2a
 801aa0a:	d015      	beq.n	801aa38 <_vfiprintf_r+0x13c>
 801aa0c:	9a07      	ldr	r2, [sp, #28]
 801aa0e:	4654      	mov	r4, sl
 801aa10:	2000      	movs	r0, #0
 801aa12:	f04f 0c0a 	mov.w	ip, #10
 801aa16:	4621      	mov	r1, r4
 801aa18:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa1c:	3b30      	subs	r3, #48	; 0x30
 801aa1e:	2b09      	cmp	r3, #9
 801aa20:	d94e      	bls.n	801aac0 <_vfiprintf_r+0x1c4>
 801aa22:	b1b0      	cbz	r0, 801aa52 <_vfiprintf_r+0x156>
 801aa24:	9207      	str	r2, [sp, #28]
 801aa26:	e014      	b.n	801aa52 <_vfiprintf_r+0x156>
 801aa28:	eba0 0308 	sub.w	r3, r0, r8
 801aa2c:	fa09 f303 	lsl.w	r3, r9, r3
 801aa30:	4313      	orrs	r3, r2
 801aa32:	9304      	str	r3, [sp, #16]
 801aa34:	46a2      	mov	sl, r4
 801aa36:	e7d2      	b.n	801a9de <_vfiprintf_r+0xe2>
 801aa38:	9b03      	ldr	r3, [sp, #12]
 801aa3a:	1d19      	adds	r1, r3, #4
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	9103      	str	r1, [sp, #12]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	bfbb      	ittet	lt
 801aa44:	425b      	neglt	r3, r3
 801aa46:	f042 0202 	orrlt.w	r2, r2, #2
 801aa4a:	9307      	strge	r3, [sp, #28]
 801aa4c:	9307      	strlt	r3, [sp, #28]
 801aa4e:	bfb8      	it	lt
 801aa50:	9204      	strlt	r2, [sp, #16]
 801aa52:	7823      	ldrb	r3, [r4, #0]
 801aa54:	2b2e      	cmp	r3, #46	; 0x2e
 801aa56:	d10c      	bne.n	801aa72 <_vfiprintf_r+0x176>
 801aa58:	7863      	ldrb	r3, [r4, #1]
 801aa5a:	2b2a      	cmp	r3, #42	; 0x2a
 801aa5c:	d135      	bne.n	801aaca <_vfiprintf_r+0x1ce>
 801aa5e:	9b03      	ldr	r3, [sp, #12]
 801aa60:	1d1a      	adds	r2, r3, #4
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	9203      	str	r2, [sp, #12]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	bfb8      	it	lt
 801aa6a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aa6e:	3402      	adds	r4, #2
 801aa70:	9305      	str	r3, [sp, #20]
 801aa72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ab58 <_vfiprintf_r+0x25c>
 801aa76:	7821      	ldrb	r1, [r4, #0]
 801aa78:	2203      	movs	r2, #3
 801aa7a:	4650      	mov	r0, sl
 801aa7c:	f7e5 fbd0 	bl	8000220 <memchr>
 801aa80:	b140      	cbz	r0, 801aa94 <_vfiprintf_r+0x198>
 801aa82:	2340      	movs	r3, #64	; 0x40
 801aa84:	eba0 000a 	sub.w	r0, r0, sl
 801aa88:	fa03 f000 	lsl.w	r0, r3, r0
 801aa8c:	9b04      	ldr	r3, [sp, #16]
 801aa8e:	4303      	orrs	r3, r0
 801aa90:	3401      	adds	r4, #1
 801aa92:	9304      	str	r3, [sp, #16]
 801aa94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa98:	482c      	ldr	r0, [pc, #176]	; (801ab4c <_vfiprintf_r+0x250>)
 801aa9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa9e:	2206      	movs	r2, #6
 801aaa0:	f7e5 fbbe 	bl	8000220 <memchr>
 801aaa4:	2800      	cmp	r0, #0
 801aaa6:	d03f      	beq.n	801ab28 <_vfiprintf_r+0x22c>
 801aaa8:	4b29      	ldr	r3, [pc, #164]	; (801ab50 <_vfiprintf_r+0x254>)
 801aaaa:	bb1b      	cbnz	r3, 801aaf4 <_vfiprintf_r+0x1f8>
 801aaac:	9b03      	ldr	r3, [sp, #12]
 801aaae:	3307      	adds	r3, #7
 801aab0:	f023 0307 	bic.w	r3, r3, #7
 801aab4:	3308      	adds	r3, #8
 801aab6:	9303      	str	r3, [sp, #12]
 801aab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aaba:	443b      	add	r3, r7
 801aabc:	9309      	str	r3, [sp, #36]	; 0x24
 801aabe:	e767      	b.n	801a990 <_vfiprintf_r+0x94>
 801aac0:	fb0c 3202 	mla	r2, ip, r2, r3
 801aac4:	460c      	mov	r4, r1
 801aac6:	2001      	movs	r0, #1
 801aac8:	e7a5      	b.n	801aa16 <_vfiprintf_r+0x11a>
 801aaca:	2300      	movs	r3, #0
 801aacc:	3401      	adds	r4, #1
 801aace:	9305      	str	r3, [sp, #20]
 801aad0:	4619      	mov	r1, r3
 801aad2:	f04f 0c0a 	mov.w	ip, #10
 801aad6:	4620      	mov	r0, r4
 801aad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aadc:	3a30      	subs	r2, #48	; 0x30
 801aade:	2a09      	cmp	r2, #9
 801aae0:	d903      	bls.n	801aaea <_vfiprintf_r+0x1ee>
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d0c5      	beq.n	801aa72 <_vfiprintf_r+0x176>
 801aae6:	9105      	str	r1, [sp, #20]
 801aae8:	e7c3      	b.n	801aa72 <_vfiprintf_r+0x176>
 801aaea:	fb0c 2101 	mla	r1, ip, r1, r2
 801aaee:	4604      	mov	r4, r0
 801aaf0:	2301      	movs	r3, #1
 801aaf2:	e7f0      	b.n	801aad6 <_vfiprintf_r+0x1da>
 801aaf4:	ab03      	add	r3, sp, #12
 801aaf6:	9300      	str	r3, [sp, #0]
 801aaf8:	462a      	mov	r2, r5
 801aafa:	4b16      	ldr	r3, [pc, #88]	; (801ab54 <_vfiprintf_r+0x258>)
 801aafc:	a904      	add	r1, sp, #16
 801aafe:	4630      	mov	r0, r6
 801ab00:	f3af 8000 	nop.w
 801ab04:	4607      	mov	r7, r0
 801ab06:	1c78      	adds	r0, r7, #1
 801ab08:	d1d6      	bne.n	801aab8 <_vfiprintf_r+0x1bc>
 801ab0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab0c:	07d9      	lsls	r1, r3, #31
 801ab0e:	d405      	bmi.n	801ab1c <_vfiprintf_r+0x220>
 801ab10:	89ab      	ldrh	r3, [r5, #12]
 801ab12:	059a      	lsls	r2, r3, #22
 801ab14:	d402      	bmi.n	801ab1c <_vfiprintf_r+0x220>
 801ab16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab18:	f7ff fb70 	bl	801a1fc <__retarget_lock_release_recursive>
 801ab1c:	89ab      	ldrh	r3, [r5, #12]
 801ab1e:	065b      	lsls	r3, r3, #25
 801ab20:	f53f af12 	bmi.w	801a948 <_vfiprintf_r+0x4c>
 801ab24:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab26:	e711      	b.n	801a94c <_vfiprintf_r+0x50>
 801ab28:	ab03      	add	r3, sp, #12
 801ab2a:	9300      	str	r3, [sp, #0]
 801ab2c:	462a      	mov	r2, r5
 801ab2e:	4b09      	ldr	r3, [pc, #36]	; (801ab54 <_vfiprintf_r+0x258>)
 801ab30:	a904      	add	r1, sp, #16
 801ab32:	4630      	mov	r0, r6
 801ab34:	f000 f880 	bl	801ac38 <_printf_i>
 801ab38:	e7e4      	b.n	801ab04 <_vfiprintf_r+0x208>
 801ab3a:	bf00      	nop
 801ab3c:	0801e908 	.word	0x0801e908
 801ab40:	0801e928 	.word	0x0801e928
 801ab44:	0801e8e8 	.word	0x0801e8e8
 801ab48:	0801e9fa 	.word	0x0801e9fa
 801ab4c:	0801ea04 	.word	0x0801ea04
 801ab50:	00000000 	.word	0x00000000
 801ab54:	0801a8d7 	.word	0x0801a8d7
 801ab58:	0801ea00 	.word	0x0801ea00

0801ab5c <_printf_common>:
 801ab5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab60:	4616      	mov	r6, r2
 801ab62:	4699      	mov	r9, r3
 801ab64:	688a      	ldr	r2, [r1, #8]
 801ab66:	690b      	ldr	r3, [r1, #16]
 801ab68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab6c:	4293      	cmp	r3, r2
 801ab6e:	bfb8      	it	lt
 801ab70:	4613      	movlt	r3, r2
 801ab72:	6033      	str	r3, [r6, #0]
 801ab74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ab78:	4607      	mov	r7, r0
 801ab7a:	460c      	mov	r4, r1
 801ab7c:	b10a      	cbz	r2, 801ab82 <_printf_common+0x26>
 801ab7e:	3301      	adds	r3, #1
 801ab80:	6033      	str	r3, [r6, #0]
 801ab82:	6823      	ldr	r3, [r4, #0]
 801ab84:	0699      	lsls	r1, r3, #26
 801ab86:	bf42      	ittt	mi
 801ab88:	6833      	ldrmi	r3, [r6, #0]
 801ab8a:	3302      	addmi	r3, #2
 801ab8c:	6033      	strmi	r3, [r6, #0]
 801ab8e:	6825      	ldr	r5, [r4, #0]
 801ab90:	f015 0506 	ands.w	r5, r5, #6
 801ab94:	d106      	bne.n	801aba4 <_printf_common+0x48>
 801ab96:	f104 0a19 	add.w	sl, r4, #25
 801ab9a:	68e3      	ldr	r3, [r4, #12]
 801ab9c:	6832      	ldr	r2, [r6, #0]
 801ab9e:	1a9b      	subs	r3, r3, r2
 801aba0:	42ab      	cmp	r3, r5
 801aba2:	dc26      	bgt.n	801abf2 <_printf_common+0x96>
 801aba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aba8:	1e13      	subs	r3, r2, #0
 801abaa:	6822      	ldr	r2, [r4, #0]
 801abac:	bf18      	it	ne
 801abae:	2301      	movne	r3, #1
 801abb0:	0692      	lsls	r2, r2, #26
 801abb2:	d42b      	bmi.n	801ac0c <_printf_common+0xb0>
 801abb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801abb8:	4649      	mov	r1, r9
 801abba:	4638      	mov	r0, r7
 801abbc:	47c0      	blx	r8
 801abbe:	3001      	adds	r0, #1
 801abc0:	d01e      	beq.n	801ac00 <_printf_common+0xa4>
 801abc2:	6823      	ldr	r3, [r4, #0]
 801abc4:	68e5      	ldr	r5, [r4, #12]
 801abc6:	6832      	ldr	r2, [r6, #0]
 801abc8:	f003 0306 	and.w	r3, r3, #6
 801abcc:	2b04      	cmp	r3, #4
 801abce:	bf08      	it	eq
 801abd0:	1aad      	subeq	r5, r5, r2
 801abd2:	68a3      	ldr	r3, [r4, #8]
 801abd4:	6922      	ldr	r2, [r4, #16]
 801abd6:	bf0c      	ite	eq
 801abd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801abdc:	2500      	movne	r5, #0
 801abde:	4293      	cmp	r3, r2
 801abe0:	bfc4      	itt	gt
 801abe2:	1a9b      	subgt	r3, r3, r2
 801abe4:	18ed      	addgt	r5, r5, r3
 801abe6:	2600      	movs	r6, #0
 801abe8:	341a      	adds	r4, #26
 801abea:	42b5      	cmp	r5, r6
 801abec:	d11a      	bne.n	801ac24 <_printf_common+0xc8>
 801abee:	2000      	movs	r0, #0
 801abf0:	e008      	b.n	801ac04 <_printf_common+0xa8>
 801abf2:	2301      	movs	r3, #1
 801abf4:	4652      	mov	r2, sl
 801abf6:	4649      	mov	r1, r9
 801abf8:	4638      	mov	r0, r7
 801abfa:	47c0      	blx	r8
 801abfc:	3001      	adds	r0, #1
 801abfe:	d103      	bne.n	801ac08 <_printf_common+0xac>
 801ac00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac08:	3501      	adds	r5, #1
 801ac0a:	e7c6      	b.n	801ab9a <_printf_common+0x3e>
 801ac0c:	18e1      	adds	r1, r4, r3
 801ac0e:	1c5a      	adds	r2, r3, #1
 801ac10:	2030      	movs	r0, #48	; 0x30
 801ac12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ac16:	4422      	add	r2, r4
 801ac18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ac1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ac20:	3302      	adds	r3, #2
 801ac22:	e7c7      	b.n	801abb4 <_printf_common+0x58>
 801ac24:	2301      	movs	r3, #1
 801ac26:	4622      	mov	r2, r4
 801ac28:	4649      	mov	r1, r9
 801ac2a:	4638      	mov	r0, r7
 801ac2c:	47c0      	blx	r8
 801ac2e:	3001      	adds	r0, #1
 801ac30:	d0e6      	beq.n	801ac00 <_printf_common+0xa4>
 801ac32:	3601      	adds	r6, #1
 801ac34:	e7d9      	b.n	801abea <_printf_common+0x8e>
	...

0801ac38 <_printf_i>:
 801ac38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac3c:	7e0f      	ldrb	r7, [r1, #24]
 801ac3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ac40:	2f78      	cmp	r7, #120	; 0x78
 801ac42:	4691      	mov	r9, r2
 801ac44:	4680      	mov	r8, r0
 801ac46:	460c      	mov	r4, r1
 801ac48:	469a      	mov	sl, r3
 801ac4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ac4e:	d807      	bhi.n	801ac60 <_printf_i+0x28>
 801ac50:	2f62      	cmp	r7, #98	; 0x62
 801ac52:	d80a      	bhi.n	801ac6a <_printf_i+0x32>
 801ac54:	2f00      	cmp	r7, #0
 801ac56:	f000 80d8 	beq.w	801ae0a <_printf_i+0x1d2>
 801ac5a:	2f58      	cmp	r7, #88	; 0x58
 801ac5c:	f000 80a3 	beq.w	801ada6 <_printf_i+0x16e>
 801ac60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ac68:	e03a      	b.n	801ace0 <_printf_i+0xa8>
 801ac6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ac6e:	2b15      	cmp	r3, #21
 801ac70:	d8f6      	bhi.n	801ac60 <_printf_i+0x28>
 801ac72:	a101      	add	r1, pc, #4	; (adr r1, 801ac78 <_printf_i+0x40>)
 801ac74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ac78:	0801acd1 	.word	0x0801acd1
 801ac7c:	0801ace5 	.word	0x0801ace5
 801ac80:	0801ac61 	.word	0x0801ac61
 801ac84:	0801ac61 	.word	0x0801ac61
 801ac88:	0801ac61 	.word	0x0801ac61
 801ac8c:	0801ac61 	.word	0x0801ac61
 801ac90:	0801ace5 	.word	0x0801ace5
 801ac94:	0801ac61 	.word	0x0801ac61
 801ac98:	0801ac61 	.word	0x0801ac61
 801ac9c:	0801ac61 	.word	0x0801ac61
 801aca0:	0801ac61 	.word	0x0801ac61
 801aca4:	0801adf1 	.word	0x0801adf1
 801aca8:	0801ad15 	.word	0x0801ad15
 801acac:	0801add3 	.word	0x0801add3
 801acb0:	0801ac61 	.word	0x0801ac61
 801acb4:	0801ac61 	.word	0x0801ac61
 801acb8:	0801ae13 	.word	0x0801ae13
 801acbc:	0801ac61 	.word	0x0801ac61
 801acc0:	0801ad15 	.word	0x0801ad15
 801acc4:	0801ac61 	.word	0x0801ac61
 801acc8:	0801ac61 	.word	0x0801ac61
 801accc:	0801addb 	.word	0x0801addb
 801acd0:	682b      	ldr	r3, [r5, #0]
 801acd2:	1d1a      	adds	r2, r3, #4
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	602a      	str	r2, [r5, #0]
 801acd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801acdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ace0:	2301      	movs	r3, #1
 801ace2:	e0a3      	b.n	801ae2c <_printf_i+0x1f4>
 801ace4:	6820      	ldr	r0, [r4, #0]
 801ace6:	6829      	ldr	r1, [r5, #0]
 801ace8:	0606      	lsls	r6, r0, #24
 801acea:	f101 0304 	add.w	r3, r1, #4
 801acee:	d50a      	bpl.n	801ad06 <_printf_i+0xce>
 801acf0:	680e      	ldr	r6, [r1, #0]
 801acf2:	602b      	str	r3, [r5, #0]
 801acf4:	2e00      	cmp	r6, #0
 801acf6:	da03      	bge.n	801ad00 <_printf_i+0xc8>
 801acf8:	232d      	movs	r3, #45	; 0x2d
 801acfa:	4276      	negs	r6, r6
 801acfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad00:	485e      	ldr	r0, [pc, #376]	; (801ae7c <_printf_i+0x244>)
 801ad02:	230a      	movs	r3, #10
 801ad04:	e019      	b.n	801ad3a <_printf_i+0x102>
 801ad06:	680e      	ldr	r6, [r1, #0]
 801ad08:	602b      	str	r3, [r5, #0]
 801ad0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ad0e:	bf18      	it	ne
 801ad10:	b236      	sxthne	r6, r6
 801ad12:	e7ef      	b.n	801acf4 <_printf_i+0xbc>
 801ad14:	682b      	ldr	r3, [r5, #0]
 801ad16:	6820      	ldr	r0, [r4, #0]
 801ad18:	1d19      	adds	r1, r3, #4
 801ad1a:	6029      	str	r1, [r5, #0]
 801ad1c:	0601      	lsls	r1, r0, #24
 801ad1e:	d501      	bpl.n	801ad24 <_printf_i+0xec>
 801ad20:	681e      	ldr	r6, [r3, #0]
 801ad22:	e002      	b.n	801ad2a <_printf_i+0xf2>
 801ad24:	0646      	lsls	r6, r0, #25
 801ad26:	d5fb      	bpl.n	801ad20 <_printf_i+0xe8>
 801ad28:	881e      	ldrh	r6, [r3, #0]
 801ad2a:	4854      	ldr	r0, [pc, #336]	; (801ae7c <_printf_i+0x244>)
 801ad2c:	2f6f      	cmp	r7, #111	; 0x6f
 801ad2e:	bf0c      	ite	eq
 801ad30:	2308      	moveq	r3, #8
 801ad32:	230a      	movne	r3, #10
 801ad34:	2100      	movs	r1, #0
 801ad36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad3a:	6865      	ldr	r5, [r4, #4]
 801ad3c:	60a5      	str	r5, [r4, #8]
 801ad3e:	2d00      	cmp	r5, #0
 801ad40:	bfa2      	ittt	ge
 801ad42:	6821      	ldrge	r1, [r4, #0]
 801ad44:	f021 0104 	bicge.w	r1, r1, #4
 801ad48:	6021      	strge	r1, [r4, #0]
 801ad4a:	b90e      	cbnz	r6, 801ad50 <_printf_i+0x118>
 801ad4c:	2d00      	cmp	r5, #0
 801ad4e:	d04d      	beq.n	801adec <_printf_i+0x1b4>
 801ad50:	4615      	mov	r5, r2
 801ad52:	fbb6 f1f3 	udiv	r1, r6, r3
 801ad56:	fb03 6711 	mls	r7, r3, r1, r6
 801ad5a:	5dc7      	ldrb	r7, [r0, r7]
 801ad5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ad60:	4637      	mov	r7, r6
 801ad62:	42bb      	cmp	r3, r7
 801ad64:	460e      	mov	r6, r1
 801ad66:	d9f4      	bls.n	801ad52 <_printf_i+0x11a>
 801ad68:	2b08      	cmp	r3, #8
 801ad6a:	d10b      	bne.n	801ad84 <_printf_i+0x14c>
 801ad6c:	6823      	ldr	r3, [r4, #0]
 801ad6e:	07de      	lsls	r6, r3, #31
 801ad70:	d508      	bpl.n	801ad84 <_printf_i+0x14c>
 801ad72:	6923      	ldr	r3, [r4, #16]
 801ad74:	6861      	ldr	r1, [r4, #4]
 801ad76:	4299      	cmp	r1, r3
 801ad78:	bfde      	ittt	le
 801ad7a:	2330      	movle	r3, #48	; 0x30
 801ad7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ad80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ad84:	1b52      	subs	r2, r2, r5
 801ad86:	6122      	str	r2, [r4, #16]
 801ad88:	f8cd a000 	str.w	sl, [sp]
 801ad8c:	464b      	mov	r3, r9
 801ad8e:	aa03      	add	r2, sp, #12
 801ad90:	4621      	mov	r1, r4
 801ad92:	4640      	mov	r0, r8
 801ad94:	f7ff fee2 	bl	801ab5c <_printf_common>
 801ad98:	3001      	adds	r0, #1
 801ad9a:	d14c      	bne.n	801ae36 <_printf_i+0x1fe>
 801ad9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ada0:	b004      	add	sp, #16
 801ada2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ada6:	4835      	ldr	r0, [pc, #212]	; (801ae7c <_printf_i+0x244>)
 801ada8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801adac:	6829      	ldr	r1, [r5, #0]
 801adae:	6823      	ldr	r3, [r4, #0]
 801adb0:	f851 6b04 	ldr.w	r6, [r1], #4
 801adb4:	6029      	str	r1, [r5, #0]
 801adb6:	061d      	lsls	r5, r3, #24
 801adb8:	d514      	bpl.n	801ade4 <_printf_i+0x1ac>
 801adba:	07df      	lsls	r7, r3, #31
 801adbc:	bf44      	itt	mi
 801adbe:	f043 0320 	orrmi.w	r3, r3, #32
 801adc2:	6023      	strmi	r3, [r4, #0]
 801adc4:	b91e      	cbnz	r6, 801adce <_printf_i+0x196>
 801adc6:	6823      	ldr	r3, [r4, #0]
 801adc8:	f023 0320 	bic.w	r3, r3, #32
 801adcc:	6023      	str	r3, [r4, #0]
 801adce:	2310      	movs	r3, #16
 801add0:	e7b0      	b.n	801ad34 <_printf_i+0xfc>
 801add2:	6823      	ldr	r3, [r4, #0]
 801add4:	f043 0320 	orr.w	r3, r3, #32
 801add8:	6023      	str	r3, [r4, #0]
 801adda:	2378      	movs	r3, #120	; 0x78
 801addc:	4828      	ldr	r0, [pc, #160]	; (801ae80 <_printf_i+0x248>)
 801adde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ade2:	e7e3      	b.n	801adac <_printf_i+0x174>
 801ade4:	0659      	lsls	r1, r3, #25
 801ade6:	bf48      	it	mi
 801ade8:	b2b6      	uxthmi	r6, r6
 801adea:	e7e6      	b.n	801adba <_printf_i+0x182>
 801adec:	4615      	mov	r5, r2
 801adee:	e7bb      	b.n	801ad68 <_printf_i+0x130>
 801adf0:	682b      	ldr	r3, [r5, #0]
 801adf2:	6826      	ldr	r6, [r4, #0]
 801adf4:	6961      	ldr	r1, [r4, #20]
 801adf6:	1d18      	adds	r0, r3, #4
 801adf8:	6028      	str	r0, [r5, #0]
 801adfa:	0635      	lsls	r5, r6, #24
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	d501      	bpl.n	801ae04 <_printf_i+0x1cc>
 801ae00:	6019      	str	r1, [r3, #0]
 801ae02:	e002      	b.n	801ae0a <_printf_i+0x1d2>
 801ae04:	0670      	lsls	r0, r6, #25
 801ae06:	d5fb      	bpl.n	801ae00 <_printf_i+0x1c8>
 801ae08:	8019      	strh	r1, [r3, #0]
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	6123      	str	r3, [r4, #16]
 801ae0e:	4615      	mov	r5, r2
 801ae10:	e7ba      	b.n	801ad88 <_printf_i+0x150>
 801ae12:	682b      	ldr	r3, [r5, #0]
 801ae14:	1d1a      	adds	r2, r3, #4
 801ae16:	602a      	str	r2, [r5, #0]
 801ae18:	681d      	ldr	r5, [r3, #0]
 801ae1a:	6862      	ldr	r2, [r4, #4]
 801ae1c:	2100      	movs	r1, #0
 801ae1e:	4628      	mov	r0, r5
 801ae20:	f7e5 f9fe 	bl	8000220 <memchr>
 801ae24:	b108      	cbz	r0, 801ae2a <_printf_i+0x1f2>
 801ae26:	1b40      	subs	r0, r0, r5
 801ae28:	6060      	str	r0, [r4, #4]
 801ae2a:	6863      	ldr	r3, [r4, #4]
 801ae2c:	6123      	str	r3, [r4, #16]
 801ae2e:	2300      	movs	r3, #0
 801ae30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae34:	e7a8      	b.n	801ad88 <_printf_i+0x150>
 801ae36:	6923      	ldr	r3, [r4, #16]
 801ae38:	462a      	mov	r2, r5
 801ae3a:	4649      	mov	r1, r9
 801ae3c:	4640      	mov	r0, r8
 801ae3e:	47d0      	blx	sl
 801ae40:	3001      	adds	r0, #1
 801ae42:	d0ab      	beq.n	801ad9c <_printf_i+0x164>
 801ae44:	6823      	ldr	r3, [r4, #0]
 801ae46:	079b      	lsls	r3, r3, #30
 801ae48:	d413      	bmi.n	801ae72 <_printf_i+0x23a>
 801ae4a:	68e0      	ldr	r0, [r4, #12]
 801ae4c:	9b03      	ldr	r3, [sp, #12]
 801ae4e:	4298      	cmp	r0, r3
 801ae50:	bfb8      	it	lt
 801ae52:	4618      	movlt	r0, r3
 801ae54:	e7a4      	b.n	801ada0 <_printf_i+0x168>
 801ae56:	2301      	movs	r3, #1
 801ae58:	4632      	mov	r2, r6
 801ae5a:	4649      	mov	r1, r9
 801ae5c:	4640      	mov	r0, r8
 801ae5e:	47d0      	blx	sl
 801ae60:	3001      	adds	r0, #1
 801ae62:	d09b      	beq.n	801ad9c <_printf_i+0x164>
 801ae64:	3501      	adds	r5, #1
 801ae66:	68e3      	ldr	r3, [r4, #12]
 801ae68:	9903      	ldr	r1, [sp, #12]
 801ae6a:	1a5b      	subs	r3, r3, r1
 801ae6c:	42ab      	cmp	r3, r5
 801ae6e:	dcf2      	bgt.n	801ae56 <_printf_i+0x21e>
 801ae70:	e7eb      	b.n	801ae4a <_printf_i+0x212>
 801ae72:	2500      	movs	r5, #0
 801ae74:	f104 0619 	add.w	r6, r4, #25
 801ae78:	e7f5      	b.n	801ae66 <_printf_i+0x22e>
 801ae7a:	bf00      	nop
 801ae7c:	0801ea0b 	.word	0x0801ea0b
 801ae80:	0801ea1c 	.word	0x0801ea1c

0801ae84 <_read_r>:
 801ae84:	b538      	push	{r3, r4, r5, lr}
 801ae86:	4d07      	ldr	r5, [pc, #28]	; (801aea4 <_read_r+0x20>)
 801ae88:	4604      	mov	r4, r0
 801ae8a:	4608      	mov	r0, r1
 801ae8c:	4611      	mov	r1, r2
 801ae8e:	2200      	movs	r2, #0
 801ae90:	602a      	str	r2, [r5, #0]
 801ae92:	461a      	mov	r2, r3
 801ae94:	f7e9 fa3e 	bl	8004314 <_read>
 801ae98:	1c43      	adds	r3, r0, #1
 801ae9a:	d102      	bne.n	801aea2 <_read_r+0x1e>
 801ae9c:	682b      	ldr	r3, [r5, #0]
 801ae9e:	b103      	cbz	r3, 801aea2 <_read_r+0x1e>
 801aea0:	6023      	str	r3, [r4, #0]
 801aea2:	bd38      	pop	{r3, r4, r5, pc}
 801aea4:	2004f73c 	.word	0x2004f73c

0801aea8 <__swbuf_r>:
 801aea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeaa:	460e      	mov	r6, r1
 801aeac:	4614      	mov	r4, r2
 801aeae:	4605      	mov	r5, r0
 801aeb0:	b118      	cbz	r0, 801aeba <__swbuf_r+0x12>
 801aeb2:	6983      	ldr	r3, [r0, #24]
 801aeb4:	b90b      	cbnz	r3, 801aeba <__swbuf_r+0x12>
 801aeb6:	f7ff f8dd 	bl	801a074 <__sinit>
 801aeba:	4b21      	ldr	r3, [pc, #132]	; (801af40 <__swbuf_r+0x98>)
 801aebc:	429c      	cmp	r4, r3
 801aebe:	d12b      	bne.n	801af18 <__swbuf_r+0x70>
 801aec0:	686c      	ldr	r4, [r5, #4]
 801aec2:	69a3      	ldr	r3, [r4, #24]
 801aec4:	60a3      	str	r3, [r4, #8]
 801aec6:	89a3      	ldrh	r3, [r4, #12]
 801aec8:	071a      	lsls	r2, r3, #28
 801aeca:	d52f      	bpl.n	801af2c <__swbuf_r+0x84>
 801aecc:	6923      	ldr	r3, [r4, #16]
 801aece:	b36b      	cbz	r3, 801af2c <__swbuf_r+0x84>
 801aed0:	6923      	ldr	r3, [r4, #16]
 801aed2:	6820      	ldr	r0, [r4, #0]
 801aed4:	1ac0      	subs	r0, r0, r3
 801aed6:	6963      	ldr	r3, [r4, #20]
 801aed8:	b2f6      	uxtb	r6, r6
 801aeda:	4283      	cmp	r3, r0
 801aedc:	4637      	mov	r7, r6
 801aede:	dc04      	bgt.n	801aeea <__swbuf_r+0x42>
 801aee0:	4621      	mov	r1, r4
 801aee2:	4628      	mov	r0, r5
 801aee4:	f7ff fc20 	bl	801a728 <_fflush_r>
 801aee8:	bb30      	cbnz	r0, 801af38 <__swbuf_r+0x90>
 801aeea:	68a3      	ldr	r3, [r4, #8]
 801aeec:	3b01      	subs	r3, #1
 801aeee:	60a3      	str	r3, [r4, #8]
 801aef0:	6823      	ldr	r3, [r4, #0]
 801aef2:	1c5a      	adds	r2, r3, #1
 801aef4:	6022      	str	r2, [r4, #0]
 801aef6:	701e      	strb	r6, [r3, #0]
 801aef8:	6963      	ldr	r3, [r4, #20]
 801aefa:	3001      	adds	r0, #1
 801aefc:	4283      	cmp	r3, r0
 801aefe:	d004      	beq.n	801af0a <__swbuf_r+0x62>
 801af00:	89a3      	ldrh	r3, [r4, #12]
 801af02:	07db      	lsls	r3, r3, #31
 801af04:	d506      	bpl.n	801af14 <__swbuf_r+0x6c>
 801af06:	2e0a      	cmp	r6, #10
 801af08:	d104      	bne.n	801af14 <__swbuf_r+0x6c>
 801af0a:	4621      	mov	r1, r4
 801af0c:	4628      	mov	r0, r5
 801af0e:	f7ff fc0b 	bl	801a728 <_fflush_r>
 801af12:	b988      	cbnz	r0, 801af38 <__swbuf_r+0x90>
 801af14:	4638      	mov	r0, r7
 801af16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af18:	4b0a      	ldr	r3, [pc, #40]	; (801af44 <__swbuf_r+0x9c>)
 801af1a:	429c      	cmp	r4, r3
 801af1c:	d101      	bne.n	801af22 <__swbuf_r+0x7a>
 801af1e:	68ac      	ldr	r4, [r5, #8]
 801af20:	e7cf      	b.n	801aec2 <__swbuf_r+0x1a>
 801af22:	4b09      	ldr	r3, [pc, #36]	; (801af48 <__swbuf_r+0xa0>)
 801af24:	429c      	cmp	r4, r3
 801af26:	bf08      	it	eq
 801af28:	68ec      	ldreq	r4, [r5, #12]
 801af2a:	e7ca      	b.n	801aec2 <__swbuf_r+0x1a>
 801af2c:	4621      	mov	r1, r4
 801af2e:	4628      	mov	r0, r5
 801af30:	f000 f80c 	bl	801af4c <__swsetup_r>
 801af34:	2800      	cmp	r0, #0
 801af36:	d0cb      	beq.n	801aed0 <__swbuf_r+0x28>
 801af38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801af3c:	e7ea      	b.n	801af14 <__swbuf_r+0x6c>
 801af3e:	bf00      	nop
 801af40:	0801e908 	.word	0x0801e908
 801af44:	0801e928 	.word	0x0801e928
 801af48:	0801e8e8 	.word	0x0801e8e8

0801af4c <__swsetup_r>:
 801af4c:	4b32      	ldr	r3, [pc, #200]	; (801b018 <__swsetup_r+0xcc>)
 801af4e:	b570      	push	{r4, r5, r6, lr}
 801af50:	681d      	ldr	r5, [r3, #0]
 801af52:	4606      	mov	r6, r0
 801af54:	460c      	mov	r4, r1
 801af56:	b125      	cbz	r5, 801af62 <__swsetup_r+0x16>
 801af58:	69ab      	ldr	r3, [r5, #24]
 801af5a:	b913      	cbnz	r3, 801af62 <__swsetup_r+0x16>
 801af5c:	4628      	mov	r0, r5
 801af5e:	f7ff f889 	bl	801a074 <__sinit>
 801af62:	4b2e      	ldr	r3, [pc, #184]	; (801b01c <__swsetup_r+0xd0>)
 801af64:	429c      	cmp	r4, r3
 801af66:	d10f      	bne.n	801af88 <__swsetup_r+0x3c>
 801af68:	686c      	ldr	r4, [r5, #4]
 801af6a:	89a3      	ldrh	r3, [r4, #12]
 801af6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af70:	0719      	lsls	r1, r3, #28
 801af72:	d42c      	bmi.n	801afce <__swsetup_r+0x82>
 801af74:	06dd      	lsls	r5, r3, #27
 801af76:	d411      	bmi.n	801af9c <__swsetup_r+0x50>
 801af78:	2309      	movs	r3, #9
 801af7a:	6033      	str	r3, [r6, #0]
 801af7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801af80:	81a3      	strh	r3, [r4, #12]
 801af82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af86:	e03e      	b.n	801b006 <__swsetup_r+0xba>
 801af88:	4b25      	ldr	r3, [pc, #148]	; (801b020 <__swsetup_r+0xd4>)
 801af8a:	429c      	cmp	r4, r3
 801af8c:	d101      	bne.n	801af92 <__swsetup_r+0x46>
 801af8e:	68ac      	ldr	r4, [r5, #8]
 801af90:	e7eb      	b.n	801af6a <__swsetup_r+0x1e>
 801af92:	4b24      	ldr	r3, [pc, #144]	; (801b024 <__swsetup_r+0xd8>)
 801af94:	429c      	cmp	r4, r3
 801af96:	bf08      	it	eq
 801af98:	68ec      	ldreq	r4, [r5, #12]
 801af9a:	e7e6      	b.n	801af6a <__swsetup_r+0x1e>
 801af9c:	0758      	lsls	r0, r3, #29
 801af9e:	d512      	bpl.n	801afc6 <__swsetup_r+0x7a>
 801afa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afa2:	b141      	cbz	r1, 801afb6 <__swsetup_r+0x6a>
 801afa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afa8:	4299      	cmp	r1, r3
 801afaa:	d002      	beq.n	801afb2 <__swsetup_r+0x66>
 801afac:	4630      	mov	r0, r6
 801afae:	f7ff fc2f 	bl	801a810 <_free_r>
 801afb2:	2300      	movs	r3, #0
 801afb4:	6363      	str	r3, [r4, #52]	; 0x34
 801afb6:	89a3      	ldrh	r3, [r4, #12]
 801afb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afbc:	81a3      	strh	r3, [r4, #12]
 801afbe:	2300      	movs	r3, #0
 801afc0:	6063      	str	r3, [r4, #4]
 801afc2:	6923      	ldr	r3, [r4, #16]
 801afc4:	6023      	str	r3, [r4, #0]
 801afc6:	89a3      	ldrh	r3, [r4, #12]
 801afc8:	f043 0308 	orr.w	r3, r3, #8
 801afcc:	81a3      	strh	r3, [r4, #12]
 801afce:	6923      	ldr	r3, [r4, #16]
 801afd0:	b94b      	cbnz	r3, 801afe6 <__swsetup_r+0x9a>
 801afd2:	89a3      	ldrh	r3, [r4, #12]
 801afd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801afd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801afdc:	d003      	beq.n	801afe6 <__swsetup_r+0x9a>
 801afde:	4621      	mov	r1, r4
 801afe0:	4630      	mov	r0, r6
 801afe2:	f000 f84d 	bl	801b080 <__smakebuf_r>
 801afe6:	89a0      	ldrh	r0, [r4, #12]
 801afe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801afec:	f010 0301 	ands.w	r3, r0, #1
 801aff0:	d00a      	beq.n	801b008 <__swsetup_r+0xbc>
 801aff2:	2300      	movs	r3, #0
 801aff4:	60a3      	str	r3, [r4, #8]
 801aff6:	6963      	ldr	r3, [r4, #20]
 801aff8:	425b      	negs	r3, r3
 801affa:	61a3      	str	r3, [r4, #24]
 801affc:	6923      	ldr	r3, [r4, #16]
 801affe:	b943      	cbnz	r3, 801b012 <__swsetup_r+0xc6>
 801b000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b004:	d1ba      	bne.n	801af7c <__swsetup_r+0x30>
 801b006:	bd70      	pop	{r4, r5, r6, pc}
 801b008:	0781      	lsls	r1, r0, #30
 801b00a:	bf58      	it	pl
 801b00c:	6963      	ldrpl	r3, [r4, #20]
 801b00e:	60a3      	str	r3, [r4, #8]
 801b010:	e7f4      	b.n	801affc <__swsetup_r+0xb0>
 801b012:	2000      	movs	r0, #0
 801b014:	e7f7      	b.n	801b006 <__swsetup_r+0xba>
 801b016:	bf00      	nop
 801b018:	20001a5c 	.word	0x20001a5c
 801b01c:	0801e908 	.word	0x0801e908
 801b020:	0801e928 	.word	0x0801e928
 801b024:	0801e8e8 	.word	0x0801e8e8

0801b028 <abort>:
 801b028:	b508      	push	{r3, lr}
 801b02a:	2006      	movs	r0, #6
 801b02c:	f000 f890 	bl	801b150 <raise>
 801b030:	2001      	movs	r0, #1
 801b032:	f7e9 f965 	bl	8004300 <_exit>

0801b036 <__swhatbuf_r>:
 801b036:	b570      	push	{r4, r5, r6, lr}
 801b038:	460e      	mov	r6, r1
 801b03a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b03e:	2900      	cmp	r1, #0
 801b040:	b096      	sub	sp, #88	; 0x58
 801b042:	4614      	mov	r4, r2
 801b044:	461d      	mov	r5, r3
 801b046:	da08      	bge.n	801b05a <__swhatbuf_r+0x24>
 801b048:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b04c:	2200      	movs	r2, #0
 801b04e:	602a      	str	r2, [r5, #0]
 801b050:	061a      	lsls	r2, r3, #24
 801b052:	d410      	bmi.n	801b076 <__swhatbuf_r+0x40>
 801b054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b058:	e00e      	b.n	801b078 <__swhatbuf_r+0x42>
 801b05a:	466a      	mov	r2, sp
 801b05c:	f000 f894 	bl	801b188 <_fstat_r>
 801b060:	2800      	cmp	r0, #0
 801b062:	dbf1      	blt.n	801b048 <__swhatbuf_r+0x12>
 801b064:	9a01      	ldr	r2, [sp, #4]
 801b066:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b06a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b06e:	425a      	negs	r2, r3
 801b070:	415a      	adcs	r2, r3
 801b072:	602a      	str	r2, [r5, #0]
 801b074:	e7ee      	b.n	801b054 <__swhatbuf_r+0x1e>
 801b076:	2340      	movs	r3, #64	; 0x40
 801b078:	2000      	movs	r0, #0
 801b07a:	6023      	str	r3, [r4, #0]
 801b07c:	b016      	add	sp, #88	; 0x58
 801b07e:	bd70      	pop	{r4, r5, r6, pc}

0801b080 <__smakebuf_r>:
 801b080:	898b      	ldrh	r3, [r1, #12]
 801b082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b084:	079d      	lsls	r5, r3, #30
 801b086:	4606      	mov	r6, r0
 801b088:	460c      	mov	r4, r1
 801b08a:	d507      	bpl.n	801b09c <__smakebuf_r+0x1c>
 801b08c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b090:	6023      	str	r3, [r4, #0]
 801b092:	6123      	str	r3, [r4, #16]
 801b094:	2301      	movs	r3, #1
 801b096:	6163      	str	r3, [r4, #20]
 801b098:	b002      	add	sp, #8
 801b09a:	bd70      	pop	{r4, r5, r6, pc}
 801b09c:	ab01      	add	r3, sp, #4
 801b09e:	466a      	mov	r2, sp
 801b0a0:	f7ff ffc9 	bl	801b036 <__swhatbuf_r>
 801b0a4:	9900      	ldr	r1, [sp, #0]
 801b0a6:	4605      	mov	r5, r0
 801b0a8:	4630      	mov	r0, r6
 801b0aa:	f7ff f8ef 	bl	801a28c <_malloc_r>
 801b0ae:	b948      	cbnz	r0, 801b0c4 <__smakebuf_r+0x44>
 801b0b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0b4:	059a      	lsls	r2, r3, #22
 801b0b6:	d4ef      	bmi.n	801b098 <__smakebuf_r+0x18>
 801b0b8:	f023 0303 	bic.w	r3, r3, #3
 801b0bc:	f043 0302 	orr.w	r3, r3, #2
 801b0c0:	81a3      	strh	r3, [r4, #12]
 801b0c2:	e7e3      	b.n	801b08c <__smakebuf_r+0xc>
 801b0c4:	4b0d      	ldr	r3, [pc, #52]	; (801b0fc <__smakebuf_r+0x7c>)
 801b0c6:	62b3      	str	r3, [r6, #40]	; 0x28
 801b0c8:	89a3      	ldrh	r3, [r4, #12]
 801b0ca:	6020      	str	r0, [r4, #0]
 801b0cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0d0:	81a3      	strh	r3, [r4, #12]
 801b0d2:	9b00      	ldr	r3, [sp, #0]
 801b0d4:	6163      	str	r3, [r4, #20]
 801b0d6:	9b01      	ldr	r3, [sp, #4]
 801b0d8:	6120      	str	r0, [r4, #16]
 801b0da:	b15b      	cbz	r3, 801b0f4 <__smakebuf_r+0x74>
 801b0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b0e0:	4630      	mov	r0, r6
 801b0e2:	f000 f863 	bl	801b1ac <_isatty_r>
 801b0e6:	b128      	cbz	r0, 801b0f4 <__smakebuf_r+0x74>
 801b0e8:	89a3      	ldrh	r3, [r4, #12]
 801b0ea:	f023 0303 	bic.w	r3, r3, #3
 801b0ee:	f043 0301 	orr.w	r3, r3, #1
 801b0f2:	81a3      	strh	r3, [r4, #12]
 801b0f4:	89a0      	ldrh	r0, [r4, #12]
 801b0f6:	4305      	orrs	r5, r0
 801b0f8:	81a5      	strh	r5, [r4, #12]
 801b0fa:	e7cd      	b.n	801b098 <__smakebuf_r+0x18>
 801b0fc:	0801a00d 	.word	0x0801a00d

0801b100 <_raise_r>:
 801b100:	291f      	cmp	r1, #31
 801b102:	b538      	push	{r3, r4, r5, lr}
 801b104:	4604      	mov	r4, r0
 801b106:	460d      	mov	r5, r1
 801b108:	d904      	bls.n	801b114 <_raise_r+0x14>
 801b10a:	2316      	movs	r3, #22
 801b10c:	6003      	str	r3, [r0, #0]
 801b10e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b112:	bd38      	pop	{r3, r4, r5, pc}
 801b114:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b116:	b112      	cbz	r2, 801b11e <_raise_r+0x1e>
 801b118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b11c:	b94b      	cbnz	r3, 801b132 <_raise_r+0x32>
 801b11e:	4620      	mov	r0, r4
 801b120:	f000 f830 	bl	801b184 <_getpid_r>
 801b124:	462a      	mov	r2, r5
 801b126:	4601      	mov	r1, r0
 801b128:	4620      	mov	r0, r4
 801b12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b12e:	f000 b817 	b.w	801b160 <_kill_r>
 801b132:	2b01      	cmp	r3, #1
 801b134:	d00a      	beq.n	801b14c <_raise_r+0x4c>
 801b136:	1c59      	adds	r1, r3, #1
 801b138:	d103      	bne.n	801b142 <_raise_r+0x42>
 801b13a:	2316      	movs	r3, #22
 801b13c:	6003      	str	r3, [r0, #0]
 801b13e:	2001      	movs	r0, #1
 801b140:	e7e7      	b.n	801b112 <_raise_r+0x12>
 801b142:	2400      	movs	r4, #0
 801b144:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b148:	4628      	mov	r0, r5
 801b14a:	4798      	blx	r3
 801b14c:	2000      	movs	r0, #0
 801b14e:	e7e0      	b.n	801b112 <_raise_r+0x12>

0801b150 <raise>:
 801b150:	4b02      	ldr	r3, [pc, #8]	; (801b15c <raise+0xc>)
 801b152:	4601      	mov	r1, r0
 801b154:	6818      	ldr	r0, [r3, #0]
 801b156:	f7ff bfd3 	b.w	801b100 <_raise_r>
 801b15a:	bf00      	nop
 801b15c:	20001a5c 	.word	0x20001a5c

0801b160 <_kill_r>:
 801b160:	b538      	push	{r3, r4, r5, lr}
 801b162:	4d07      	ldr	r5, [pc, #28]	; (801b180 <_kill_r+0x20>)
 801b164:	2300      	movs	r3, #0
 801b166:	4604      	mov	r4, r0
 801b168:	4608      	mov	r0, r1
 801b16a:	4611      	mov	r1, r2
 801b16c:	602b      	str	r3, [r5, #0]
 801b16e:	f7e9 f8b5 	bl	80042dc <_kill>
 801b172:	1c43      	adds	r3, r0, #1
 801b174:	d102      	bne.n	801b17c <_kill_r+0x1c>
 801b176:	682b      	ldr	r3, [r5, #0]
 801b178:	b103      	cbz	r3, 801b17c <_kill_r+0x1c>
 801b17a:	6023      	str	r3, [r4, #0]
 801b17c:	bd38      	pop	{r3, r4, r5, pc}
 801b17e:	bf00      	nop
 801b180:	2004f73c 	.word	0x2004f73c

0801b184 <_getpid_r>:
 801b184:	f7e9 b8a2 	b.w	80042cc <_getpid>

0801b188 <_fstat_r>:
 801b188:	b538      	push	{r3, r4, r5, lr}
 801b18a:	4d07      	ldr	r5, [pc, #28]	; (801b1a8 <_fstat_r+0x20>)
 801b18c:	2300      	movs	r3, #0
 801b18e:	4604      	mov	r4, r0
 801b190:	4608      	mov	r0, r1
 801b192:	4611      	mov	r1, r2
 801b194:	602b      	str	r3, [r5, #0]
 801b196:	f7e9 f902 	bl	800439e <_fstat>
 801b19a:	1c43      	adds	r3, r0, #1
 801b19c:	d102      	bne.n	801b1a4 <_fstat_r+0x1c>
 801b19e:	682b      	ldr	r3, [r5, #0]
 801b1a0:	b103      	cbz	r3, 801b1a4 <_fstat_r+0x1c>
 801b1a2:	6023      	str	r3, [r4, #0]
 801b1a4:	bd38      	pop	{r3, r4, r5, pc}
 801b1a6:	bf00      	nop
 801b1a8:	2004f73c 	.word	0x2004f73c

0801b1ac <_isatty_r>:
 801b1ac:	b538      	push	{r3, r4, r5, lr}
 801b1ae:	4d06      	ldr	r5, [pc, #24]	; (801b1c8 <_isatty_r+0x1c>)
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	4604      	mov	r4, r0
 801b1b4:	4608      	mov	r0, r1
 801b1b6:	602b      	str	r3, [r5, #0]
 801b1b8:	f7e9 f901 	bl	80043be <_isatty>
 801b1bc:	1c43      	adds	r3, r0, #1
 801b1be:	d102      	bne.n	801b1c6 <_isatty_r+0x1a>
 801b1c0:	682b      	ldr	r3, [r5, #0]
 801b1c2:	b103      	cbz	r3, 801b1c6 <_isatty_r+0x1a>
 801b1c4:	6023      	str	r3, [r4, #0]
 801b1c6:	bd38      	pop	{r3, r4, r5, pc}
 801b1c8:	2004f73c 	.word	0x2004f73c

0801b1cc <_init>:
 801b1cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ce:	bf00      	nop
 801b1d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1d2:	bc08      	pop	{r3}
 801b1d4:	469e      	mov	lr, r3
 801b1d6:	4770      	bx	lr

0801b1d8 <_fini>:
 801b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1da:	bf00      	nop
 801b1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b1de:	bc08      	pop	{r3}
 801b1e0:	469e      	mov	lr, r3
 801b1e2:	4770      	bx	lr
