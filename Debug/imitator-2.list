
imitator-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aae4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003828  0801acb4  0801acb4  0002acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e4dc  0801e4dc  00031c00  2**0
                  CONTENTS
  4 .ARM          00000008  0801e4dc  0801e4dc  0002e4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e4e4  0801e4e4  00031c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e4e4  0801e4e4  0002e4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e4e8  0801e4e8  0002e4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ac0  20000000  0801e4ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20001ac0  0801ffac  00031ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20001b60  0802004c  00031b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0004daf4  20001c00  080200ec  00031c00  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2004f6f4  080200ec  0003f6f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00031c00  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fc5b  00000000  00000000  00031c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000075e8  00000000  00000000  0006188b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002020  00000000  00000000  00068e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001ec8  00000000  00000000  0006ae98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012560  00000000  00000000  0006cd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003409a  00000000  00000000  0007f2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010ba72  00000000  00000000  000b335a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001bedcc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008b88  00000000  00000000  001bee1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20001c00 	.word	0x20001c00
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ac9c 	.word	0x0801ac9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20001c04 	.word	0x20001c04
 800020c:	0801ac9c 	.word	0x0801ac9c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005c8:	f3bf 8f4f 	dsb	sy
}
 80005cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ce:	f3bf 8f6f 	isb	sy
}
 80005d2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <SCB_EnableICache+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableICache+0x48>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableICache+0x48>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <SCB_EnableDCache+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800061e:	f3bf 8f4f 	dsb	sy
}
 8000622:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <SCB_EnableDCache+0x84>)
 8000626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800062a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0b5b      	lsrs	r3, r3, #13
 8000630:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000634:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	08db      	lsrs	r3, r3, #3
 800063a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800063e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000648:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800064e:	4911      	ldr	r1, [pc, #68]	; (8000694 <SCB_EnableDCache+0x84>)
 8000650:	4313      	orrs	r3, r2
 8000652:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000656:	68bb      	ldr	r3, [r7, #8]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	60ba      	str	r2, [r7, #8]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1ef      	bne.n	8000640 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	60fa      	str	r2, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1e5      	bne.n	8000636 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800066a:	f3bf 8f4f 	dsb	sy
}
 800066e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SCB_EnableDCache+0x84>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SCB_EnableDCache+0x84>)
 8000676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800067a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800067c:	f3bf 8f4f 	dsb	sy
}
 8000680:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000682:	f3bf 8f6f 	isb	sy
}
 8000686:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <keyboard_GPIO_init>:
uint32_t key_count[4][3] = {0};
uint32_t stage = 0;
uint16_t keyboard_state = 0;


void keyboard_GPIO_init(){
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2110      	movs	r1, #16
 80006b0:	4826      	ldr	r0, [pc, #152]	; (800074c <keyboard_GPIO_init+0xb4>)
 80006b2:	f005 fd9d 	bl	80061f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	4825      	ldr	r0, [pc, #148]	; (8000750 <keyboard_GPIO_init+0xb8>)
 80006bc:	f005 fd98 	bl	80061f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	21c0      	movs	r1, #192	; 0xc0
 80006c4:	4823      	ldr	r0, [pc, #140]	; (8000754 <keyboard_GPIO_init+0xbc>)
 80006c6:	f005 fd93 	bl	80061f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ca:	2310      	movs	r3, #16
 80006cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006d2:	2302      	movs	r3, #2
 80006d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	481b      	ldr	r0, [pc, #108]	; (800074c <keyboard_GPIO_init+0xb4>)
 80006e0:	f005 fbc2 	bl	8005e68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI2 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80006e4:	230c      	movs	r3, #12
 80006e6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4619      	mov	r1, r3
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <keyboard_GPIO_init+0xb8>)
 80006f6:	f005 fbb7 	bl	8005e68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006fa:	2301      	movs	r3, #1
 80006fc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000702:	2302      	movs	r3, #2
 8000704:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4810      	ldr	r0, [pc, #64]	; (8000750 <keyboard_GPIO_init+0xb8>)
 8000710:	f005 fbaa 	bl	8005e68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG7 PG6 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000714:	23c0      	movs	r3, #192	; 0xc0
 8000716:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800071c:	2302      	movs	r3, #2
 800071e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <keyboard_GPIO_init+0xbc>)
 800072a:	f005 fb9d 	bl	8005e68 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800072e:	2340      	movs	r3, #64	; 0x40
 8000730:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <keyboard_GPIO_init+0xc0>)
 8000740:	f005 fb92 	bl	8005e68 <HAL_GPIO_Init>
}
 8000744:	bf00      	nop
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40020400 	.word	0x40020400
 8000750:	40022000 	.word	0x40022000
 8000754:	40021800 	.word	0x40021800
 8000758:	40021c00 	.word	0x40021c00

0800075c <get_current_keyboard_state>:

void get_current_keyboard_state(){
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	stage = (stage+1)%8;
 8000760:	4b95      	ldr	r3, [pc, #596]	; (80009b8 <get_current_keyboard_state+0x25c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	f003 0307 	and.w	r3, r3, #7
 800076a:	4a93      	ldr	r2, [pc, #588]	; (80009b8 <get_current_keyboard_state+0x25c>)
 800076c:	6013      	str	r3, [r2, #0]
	switch(stage){
 800076e:	4b92      	ldr	r3, [pc, #584]	; (80009b8 <get_current_keyboard_state+0x25c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b07      	cmp	r3, #7
 8000774:	f200 82a3 	bhi.w	8000cbe <get_current_keyboard_state+0x562>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <get_current_keyboard_state+0x24>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	080007a1 	.word	0x080007a1
 8000784:	080007cb 	.word	0x080007cb
 8000788:	080008db 	.word	0x080008db
 800078c:	08000905 	.word	0x08000905
 8000790:	08000a31 	.word	0x08000a31
 8000794:	08000a5b 	.word	0x08000a5b
 8000798:	08000b6b 	.word	0x08000b6b
 800079c:	08000b95 	.word	0x08000b95
		case 0:{
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2180      	movs	r1, #128	; 0x80
 80007a4:	4885      	ldr	r0, [pc, #532]	; (80009bc <get_current_keyboard_state+0x260>)
 80007a6:	f005 fd23 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);			
 80007aa:	2200      	movs	r2, #0
 80007ac:	2110      	movs	r1, #16
 80007ae:	4884      	ldr	r0, [pc, #528]	; (80009c0 <get_current_keyboard_state+0x264>)
 80007b0:	f005 fd1e 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2101      	movs	r1, #1
 80007b8:	4882      	ldr	r0, [pc, #520]	; (80009c4 <get_current_keyboard_state+0x268>)
 80007ba:	f005 fd19 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80007be:	2201      	movs	r2, #1
 80007c0:	2140      	movs	r1, #64	; 0x40
 80007c2:	487e      	ldr	r0, [pc, #504]	; (80009bc <get_current_keyboard_state+0x260>)
 80007c4:	f005 fd14 	bl	80061f0 <HAL_GPIO_WritePin>
			break;
 80007c8:	e279      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[0][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][0]++;}}else{if(key_count[0][0]){key_count[0][0]--;}}
 80007ca:	2140      	movs	r1, #64	; 0x40
 80007cc:	487e      	ldr	r0, [pc, #504]	; (80009c8 <get_current_keyboard_state+0x26c>)
 80007ce:	f005 fcf7 	bl	80061c0 <HAL_GPIO_ReadPin>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d109      	bne.n	80007ec <get_current_keyboard_state+0x90>
 80007d8:	4b7c      	ldr	r3, [pc, #496]	; (80009cc <get_current_keyboard_state+0x270>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b15      	cmp	r3, #21
 80007de:	d80e      	bhi.n	80007fe <get_current_keyboard_state+0xa2>
 80007e0:	4b7a      	ldr	r3, [pc, #488]	; (80009cc <get_current_keyboard_state+0x270>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	3301      	adds	r3, #1
 80007e6:	4a79      	ldr	r2, [pc, #484]	; (80009cc <get_current_keyboard_state+0x270>)
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e008      	b.n	80007fe <get_current_keyboard_state+0xa2>
 80007ec:	4b77      	ldr	r3, [pc, #476]	; (80009cc <get_current_keyboard_state+0x270>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d004      	beq.n	80007fe <get_current_keyboard_state+0xa2>
 80007f4:	4b75      	ldr	r3, [pc, #468]	; (80009cc <get_current_keyboard_state+0x270>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	3b01      	subs	r3, #1
 80007fa:	4a74      	ldr	r2, [pc, #464]	; (80009cc <get_current_keyboard_state+0x270>)
 80007fc:	6013      	str	r3, [r2, #0]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[0][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][1]++;}}else{if(key_count[0][1]){key_count[0][1]--;}}
 80007fe:	2108      	movs	r1, #8
 8000800:	4870      	ldr	r0, [pc, #448]	; (80009c4 <get_current_keyboard_state+0x268>)
 8000802:	f005 fcdd 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	d109      	bne.n	8000820 <get_current_keyboard_state+0xc4>
 800080c:	4b6f      	ldr	r3, [pc, #444]	; (80009cc <get_current_keyboard_state+0x270>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2b15      	cmp	r3, #21
 8000812:	d80e      	bhi.n	8000832 <get_current_keyboard_state+0xd6>
 8000814:	4b6d      	ldr	r3, [pc, #436]	; (80009cc <get_current_keyboard_state+0x270>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	4a6c      	ldr	r2, [pc, #432]	; (80009cc <get_current_keyboard_state+0x270>)
 800081c:	6053      	str	r3, [r2, #4]
 800081e:	e008      	b.n	8000832 <get_current_keyboard_state+0xd6>
 8000820:	4b6a      	ldr	r3, [pc, #424]	; (80009cc <get_current_keyboard_state+0x270>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d004      	beq.n	8000832 <get_current_keyboard_state+0xd6>
 8000828:	4b68      	ldr	r3, [pc, #416]	; (80009cc <get_current_keyboard_state+0x270>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	3b01      	subs	r3, #1
 800082e:	4a67      	ldr	r2, [pc, #412]	; (80009cc <get_current_keyboard_state+0x270>)
 8000830:	6053      	str	r3, [r2, #4]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[0][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[0][2]++;}}else{if(key_count[0][2]){key_count[0][2]--;}}
 8000832:	2104      	movs	r1, #4
 8000834:	4863      	ldr	r0, [pc, #396]	; (80009c4 <get_current_keyboard_state+0x268>)
 8000836:	f005 fcc3 	bl	80061c0 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d109      	bne.n	8000854 <get_current_keyboard_state+0xf8>
 8000840:	4b62      	ldr	r3, [pc, #392]	; (80009cc <get_current_keyboard_state+0x270>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	2b15      	cmp	r3, #21
 8000846:	d80e      	bhi.n	8000866 <get_current_keyboard_state+0x10a>
 8000848:	4b60      	ldr	r3, [pc, #384]	; (80009cc <get_current_keyboard_state+0x270>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	3301      	adds	r3, #1
 800084e:	4a5f      	ldr	r2, [pc, #380]	; (80009cc <get_current_keyboard_state+0x270>)
 8000850:	6093      	str	r3, [r2, #8]
 8000852:	e008      	b.n	8000866 <get_current_keyboard_state+0x10a>
 8000854:	4b5d      	ldr	r3, [pc, #372]	; (80009cc <get_current_keyboard_state+0x270>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d004      	beq.n	8000866 <get_current_keyboard_state+0x10a>
 800085c:	4b5b      	ldr	r3, [pc, #364]	; (80009cc <get_current_keyboard_state+0x270>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	3b01      	subs	r3, #1
 8000862:	4a5a      	ldr	r2, [pc, #360]	; (80009cc <get_current_keyboard_state+0x270>)
 8000864:	6093      	str	r3, [r2, #8]

			if(key_count[0][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_TEST;}else{keyboard_state&=~BUTTON_TEST;}
 8000866:	4b59      	ldr	r3, [pc, #356]	; (80009cc <get_current_keyboard_state+0x270>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b0e      	cmp	r3, #14
 800086c:	d907      	bls.n	800087e <get_current_keyboard_state+0x122>
 800086e:	4b58      	ldr	r3, [pc, #352]	; (80009d0 <get_current_keyboard_state+0x274>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <get_current_keyboard_state+0x274>)
 800087a:	801a      	strh	r2, [r3, #0]
 800087c:	e006      	b.n	800088c <get_current_keyboard_state+0x130>
 800087e:	4b54      	ldr	r3, [pc, #336]	; (80009d0 <get_current_keyboard_state+0x274>)
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	b29a      	uxth	r2, r3
 8000888:	4b51      	ldr	r3, [pc, #324]	; (80009d0 <get_current_keyboard_state+0x274>)
 800088a:	801a      	strh	r2, [r3, #0]
			if(key_count[0][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_TEMPERATURE;}else{keyboard_state&=~BUTTON_AIR_TEMPERATURE;}
 800088c:	4b4f      	ldr	r3, [pc, #316]	; (80009cc <get_current_keyboard_state+0x270>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2b0e      	cmp	r3, #14
 8000892:	d907      	bls.n	80008a4 <get_current_keyboard_state+0x148>
 8000894:	4b4e      	ldr	r3, [pc, #312]	; (80009d0 <get_current_keyboard_state+0x274>)
 8000896:	881b      	ldrh	r3, [r3, #0]
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	b29a      	uxth	r2, r3
 800089e:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008a0:	801a      	strh	r2, [r3, #0]
 80008a2:	e006      	b.n	80008b2 <get_current_keyboard_state+0x156>
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	f023 0302 	bic.w	r3, r3, #2
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	4b48      	ldr	r3, [pc, #288]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008b0:	801a      	strh	r2, [r3, #0]
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80008b2:	4b46      	ldr	r3, [pc, #280]	; (80009cc <get_current_keyboard_state+0x270>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b0e      	cmp	r3, #14
 80008b8:	d907      	bls.n	80008ca <get_current_keyboard_state+0x16e>
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008c6:	801a      	strh	r2, [r3, #0]
			break;
 80008c8:	e1f9      	b.n	8000cbe <get_current_keyboard_state+0x562>
			if(key_count[0][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_AIR_HUMIDITY;}else{keyboard_state&=~BUTTON_AIR_HUMIDITY;}
 80008ca:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008cc:	881b      	ldrh	r3, [r3, #0]
 80008ce:	f023 0304 	bic.w	r3, r3, #4
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <get_current_keyboard_state+0x274>)
 80008d6:	801a      	strh	r2, [r3, #0]
			break;
 80008d8:	e1f1      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 2:{	
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	; 0x40
 80008de:	4837      	ldr	r0, [pc, #220]	; (80009bc <get_current_keyboard_state+0x260>)
 80008e0:	f005 fc86 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2180      	movs	r1, #128	; 0x80
 80008e8:	4834      	ldr	r0, [pc, #208]	; (80009bc <get_current_keyboard_state+0x260>)
 80008ea:	f005 fc81 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);	
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	4834      	ldr	r0, [pc, #208]	; (80009c4 <get_current_keyboard_state+0x268>)
 80008f4:	f005 fc7c 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);			
 80008f8:	2201      	movs	r2, #1
 80008fa:	2110      	movs	r1, #16
 80008fc:	4830      	ldr	r0, [pc, #192]	; (80009c0 <get_current_keyboard_state+0x264>)
 80008fe:	f005 fc77 	bl	80061f0 <HAL_GPIO_WritePin>
			break;
 8000902:	e1dc      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[1][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][0]++;}}else{if(key_count[1][0]){key_count[1][0]--;}}
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	4830      	ldr	r0, [pc, #192]	; (80009c8 <get_current_keyboard_state+0x26c>)
 8000908:	f005 fc5a 	bl	80061c0 <HAL_GPIO_ReadPin>
 800090c:	4603      	mov	r3, r0
 800090e:	2b01      	cmp	r3, #1
 8000910:	d109      	bne.n	8000926 <get_current_keyboard_state+0x1ca>
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <get_current_keyboard_state+0x270>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	2b15      	cmp	r3, #21
 8000918:	d80e      	bhi.n	8000938 <get_current_keyboard_state+0x1dc>
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <get_current_keyboard_state+0x270>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	3301      	adds	r3, #1
 8000920:	4a2a      	ldr	r2, [pc, #168]	; (80009cc <get_current_keyboard_state+0x270>)
 8000922:	60d3      	str	r3, [r2, #12]
 8000924:	e008      	b.n	8000938 <get_current_keyboard_state+0x1dc>
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <get_current_keyboard_state+0x270>)
 8000928:	68db      	ldr	r3, [r3, #12]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d004      	beq.n	8000938 <get_current_keyboard_state+0x1dc>
 800092e:	4b27      	ldr	r3, [pc, #156]	; (80009cc <get_current_keyboard_state+0x270>)
 8000930:	68db      	ldr	r3, [r3, #12]
 8000932:	3b01      	subs	r3, #1
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <get_current_keyboard_state+0x270>)
 8000936:	60d3      	str	r3, [r2, #12]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[1][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][1]++;}}else{if(key_count[1][1]){key_count[1][1]--;}}
 8000938:	2108      	movs	r1, #8
 800093a:	4822      	ldr	r0, [pc, #136]	; (80009c4 <get_current_keyboard_state+0x268>)
 800093c:	f005 fc40 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d109      	bne.n	800095a <get_current_keyboard_state+0x1fe>
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <get_current_keyboard_state+0x270>)
 8000948:	691b      	ldr	r3, [r3, #16]
 800094a:	2b15      	cmp	r3, #21
 800094c:	d80e      	bhi.n	800096c <get_current_keyboard_state+0x210>
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <get_current_keyboard_state+0x270>)
 8000950:	691b      	ldr	r3, [r3, #16]
 8000952:	3301      	adds	r3, #1
 8000954:	4a1d      	ldr	r2, [pc, #116]	; (80009cc <get_current_keyboard_state+0x270>)
 8000956:	6113      	str	r3, [r2, #16]
 8000958:	e008      	b.n	800096c <get_current_keyboard_state+0x210>
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <get_current_keyboard_state+0x270>)
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d004      	beq.n	800096c <get_current_keyboard_state+0x210>
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <get_current_keyboard_state+0x270>)
 8000964:	691b      	ldr	r3, [r3, #16]
 8000966:	3b01      	subs	r3, #1
 8000968:	4a18      	ldr	r2, [pc, #96]	; (80009cc <get_current_keyboard_state+0x270>)
 800096a:	6113      	str	r3, [r2, #16]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[1][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[1][2]++;}}else{if(key_count[1][2]){key_count[1][2]--;}}
 800096c:	2104      	movs	r1, #4
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <get_current_keyboard_state+0x268>)
 8000970:	f005 fc26 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d109      	bne.n	800098e <get_current_keyboard_state+0x232>
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <get_current_keyboard_state+0x270>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	2b15      	cmp	r3, #21
 8000980:	d80e      	bhi.n	80009a0 <get_current_keyboard_state+0x244>
 8000982:	4b12      	ldr	r3, [pc, #72]	; (80009cc <get_current_keyboard_state+0x270>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	4a10      	ldr	r2, [pc, #64]	; (80009cc <get_current_keyboard_state+0x270>)
 800098a:	6153      	str	r3, [r2, #20]
 800098c:	e008      	b.n	80009a0 <get_current_keyboard_state+0x244>
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <get_current_keyboard_state+0x270>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <get_current_keyboard_state+0x244>
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <get_current_keyboard_state+0x270>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	3b01      	subs	r3, #1
 800099c:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <get_current_keyboard_state+0x270>)
 800099e:	6153      	str	r3, [r2, #20]
	
			if(key_count[1][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_CALIBRATION;}else{keyboard_state&=~BUTTON_CALIBRATION;}
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <get_current_keyboard_state+0x270>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	2b0e      	cmp	r3, #14
 80009a6:	d915      	bls.n	80009d4 <get_current_keyboard_state+0x278>
 80009a8:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <get_current_keyboard_state+0x274>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <get_current_keyboard_state+0x274>)
 80009b4:	801a      	strh	r2, [r3, #0]
 80009b6:	e014      	b.n	80009e2 <get_current_keyboard_state+0x286>
 80009b8:	20001c4c 	.word	0x20001c4c
 80009bc:	40021800 	.word	0x40021800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40022000 	.word	0x40022000
 80009c8:	40021c00 	.word	0x40021c00
 80009cc:	20001c1c 	.word	0x20001c1c
 80009d0:	20001c50 	.word	0x20001c50
 80009d4:	4b92      	ldr	r3, [pc, #584]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	f023 0308 	bic.w	r3, r3, #8
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b90      	ldr	r3, [pc, #576]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 80009e0:	801a      	strh	r2, [r3, #0]
			if(key_count[1][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_SPEED;}
 80009e2:	4b90      	ldr	r3, [pc, #576]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 80009e4:	691b      	ldr	r3, [r3, #16]
 80009e6:	2b0e      	cmp	r3, #14
 80009e8:	d907      	bls.n	80009fa <get_current_keyboard_state+0x29e>
 80009ea:	4b8d      	ldr	r3, [pc, #564]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	4b8a      	ldr	r3, [pc, #552]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 80009f6:	801a      	strh	r2, [r3, #0]
 80009f8:	e006      	b.n	8000a08 <get_current_keyboard_state+0x2ac>
 80009fa:	4b89      	ldr	r3, [pc, #548]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	f023 0310 	bic.w	r3, r3, #16
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b86      	ldr	r3, [pc, #536]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000a06:	801a      	strh	r2, [r3, #0]
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8000a08:	4b86      	ldr	r3, [pc, #536]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a0a:	695b      	ldr	r3, [r3, #20]
 8000a0c:	2b0e      	cmp	r3, #14
 8000a0e:	d907      	bls.n	8000a20 <get_current_keyboard_state+0x2c4>
 8000a10:	4b83      	ldr	r3, [pc, #524]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	f043 0320 	orr.w	r3, r3, #32
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b81      	ldr	r3, [pc, #516]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000a1c:	801a      	strh	r2, [r3, #0]
			break;
 8000a1e:	e14e      	b.n	8000cbe <get_current_keyboard_state+0x562>
			if(key_count[1][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_ATMOSPHERIC_PRESSURE;}else{keyboard_state&=~BUTTON_ATMOSPHERIC_PRESSURE;}
 8000a20:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	f023 0320 	bic.w	r3, r3, #32
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	4b7d      	ldr	r3, [pc, #500]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000a2c:	801a      	strh	r2, [r3, #0]
			break;
 8000a2e:	e146      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 4:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2110      	movs	r1, #16
 8000a34:	487c      	ldr	r0, [pc, #496]	; (8000c28 <get_current_keyboard_state+0x4cc>)
 8000a36:	f005 fbdb 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	487b      	ldr	r0, [pc, #492]	; (8000c2c <get_current_keyboard_state+0x4d0>)
 8000a40:	f005 fbd6 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2101      	movs	r1, #1
 8000a48:	4879      	ldr	r0, [pc, #484]	; (8000c30 <get_current_keyboard_state+0x4d4>)
 8000a4a:	f005 fbd1 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_SET);			
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	4876      	ldr	r0, [pc, #472]	; (8000c2c <get_current_keyboard_state+0x4d0>)
 8000a54:	f005 fbcc 	bl	80061f0 <HAL_GPIO_WritePin>
			break;
 8000a58:	e131      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[2][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][0]++;}}else{if(key_count[2][0]){key_count[2][0]--;}}
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	4875      	ldr	r0, [pc, #468]	; (8000c34 <get_current_keyboard_state+0x4d8>)
 8000a5e:	f005 fbaf 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d109      	bne.n	8000a7c <get_current_keyboard_state+0x320>
 8000a68:	4b6e      	ldr	r3, [pc, #440]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	2b15      	cmp	r3, #21
 8000a6e:	d80e      	bhi.n	8000a8e <get_current_keyboard_state+0x332>
 8000a70:	4b6c      	ldr	r3, [pc, #432]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a6b      	ldr	r2, [pc, #428]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	e008      	b.n	8000a8e <get_current_keyboard_state+0x332>
 8000a7c:	4b69      	ldr	r3, [pc, #420]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d004      	beq.n	8000a8e <get_current_keyboard_state+0x332>
 8000a84:	4b67      	ldr	r3, [pc, #412]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	3b01      	subs	r3, #1
 8000a8a:	4a66      	ldr	r2, [pc, #408]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a8c:	6193      	str	r3, [r2, #24]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[2][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][1]++;}}else{if(key_count[2][1]){key_count[2][1]--;}}
 8000a8e:	2108      	movs	r1, #8
 8000a90:	4867      	ldr	r0, [pc, #412]	; (8000c30 <get_current_keyboard_state+0x4d4>)
 8000a92:	f005 fb95 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d109      	bne.n	8000ab0 <get_current_keyboard_state+0x354>
 8000a9c:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000a9e:	69db      	ldr	r3, [r3, #28]
 8000aa0:	2b15      	cmp	r3, #21
 8000aa2:	d80e      	bhi.n	8000ac2 <get_current_keyboard_state+0x366>
 8000aa4:	4b5f      	ldr	r3, [pc, #380]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a5e      	ldr	r2, [pc, #376]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	e008      	b.n	8000ac2 <get_current_keyboard_state+0x366>
 8000ab0:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ab2:	69db      	ldr	r3, [r3, #28]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d004      	beq.n	8000ac2 <get_current_keyboard_state+0x366>
 8000ab8:	4b5a      	ldr	r3, [pc, #360]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000aba:	69db      	ldr	r3, [r3, #28]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a59      	ldr	r2, [pc, #356]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ac0:	61d3      	str	r3, [r2, #28]
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[2][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[2][2]++;}}else{if(key_count[2][2]){key_count[2][2]--;}}
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	485a      	ldr	r0, [pc, #360]	; (8000c30 <get_current_keyboard_state+0x4d4>)
 8000ac6:	f005 fb7b 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d109      	bne.n	8000ae4 <get_current_keyboard_state+0x388>
 8000ad0:	4b54      	ldr	r3, [pc, #336]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	2b15      	cmp	r3, #21
 8000ad6:	d80e      	bhi.n	8000af6 <get_current_keyboard_state+0x39a>
 8000ad8:	4b52      	ldr	r3, [pc, #328]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ada:	6a1b      	ldr	r3, [r3, #32]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a51      	ldr	r2, [pc, #324]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ae0:	6213      	str	r3, [r2, #32]
 8000ae2:	e008      	b.n	8000af6 <get_current_keyboard_state+0x39a>
 8000ae4:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d004      	beq.n	8000af6 <get_current_keyboard_state+0x39a>
 8000aec:	4b4d      	ldr	r3, [pc, #308]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000aee:	6a1b      	ldr	r3, [r3, #32]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	4a4c      	ldr	r2, [pc, #304]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000af4:	6213      	str	r3, [r2, #32]

			if(key_count[2][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_BRIGHTNESS;}else{keyboard_state&=~BUTTON_BRIGHTNESS;}
 8000af6:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	2b0e      	cmp	r3, #14
 8000afc:	d907      	bls.n	8000b0e <get_current_keyboard_state+0x3b2>
 8000afe:	4b48      	ldr	r3, [pc, #288]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	4b45      	ldr	r3, [pc, #276]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b0a:	801a      	strh	r2, [r3, #0]
 8000b0c:	e006      	b.n	8000b1c <get_current_keyboard_state+0x3c0>
 8000b0e:	4b44      	ldr	r3, [pc, #272]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b1a:	801a      	strh	r2, [r3, #0]
			if(key_count[2][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_HORIZONTAL_WIND_DIRECTION;}else{keyboard_state&=~BUTTON_HORIZONTAL_WIND_DIRECTION;}
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	2b0e      	cmp	r3, #14
 8000b22:	d907      	bls.n	8000b34 <get_current_keyboard_state+0x3d8>
 8000b24:	4b3e      	ldr	r3, [pc, #248]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b30:	801a      	strh	r2, [r3, #0]
 8000b32:	e006      	b.n	8000b42 <get_current_keyboard_state+0x3e6>
 8000b34:	4b3a      	ldr	r3, [pc, #232]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b38      	ldr	r3, [pc, #224]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b40:	801a      	strh	r2, [r3, #0]
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000b44:	6a1b      	ldr	r3, [r3, #32]
 8000b46:	2b0e      	cmp	r3, #14
 8000b48:	d907      	bls.n	8000b5a <get_current_keyboard_state+0x3fe>
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	b29a      	uxth	r2, r3
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b56:	801a      	strh	r2, [r3, #0]
			break;
 8000b58:	e0b1      	b.n	8000cbe <get_current_keyboard_state+0x562>
			if(key_count[2][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_OBJECT_TEMPERATURE;}else{keyboard_state&=~BUTTON_OBJECT_TEMPERATURE;}
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <get_current_keyboard_state+0x4c4>)
 8000b66:	801a      	strh	r2, [r3, #0]
			break;
 8000b68:	e0a9      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 6:{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	482e      	ldr	r0, [pc, #184]	; (8000c28 <get_current_keyboard_state+0x4cc>)
 8000b70:	f005 fb3e 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	482c      	ldr	r0, [pc, #176]	; (8000c2c <get_current_keyboard_state+0x4d0>)
 8000b7a:	f005 fb39 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	482a      	ldr	r0, [pc, #168]	; (8000c2c <get_current_keyboard_state+0x4d0>)
 8000b84:	f005 fb34 	bl	80061f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);			
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	4828      	ldr	r0, [pc, #160]	; (8000c30 <get_current_keyboard_state+0x4d4>)
 8000b8e:	f005 fb2f 	bl	80061f0 <HAL_GPIO_WritePin>
			break;
 8000b92:	e094      	b.n	8000cbe <get_current_keyboard_state+0x562>
		}
		case 7:{
			if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_6) == GPIO_PIN_SET){if(key_count[3][0]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][0]++;}}else{if(key_count[3][0]){key_count[3][0]--;}}
 8000b94:	2140      	movs	r1, #64	; 0x40
 8000b96:	4827      	ldr	r0, [pc, #156]	; (8000c34 <get_current_keyboard_state+0x4d8>)
 8000b98:	f005 fb12 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d109      	bne.n	8000bb6 <get_current_keyboard_state+0x45a>
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ba6:	2b15      	cmp	r3, #21
 8000ba8:	d80e      	bhi.n	8000bc8 <get_current_keyboard_state+0x46c>
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24
 8000bb4:	e008      	b.n	8000bc8 <get_current_keyboard_state+0x46c>
 8000bb6:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d004      	beq.n	8000bc8 <get_current_keyboard_state+0x46c>
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bc6:	6253      	str	r3, [r2, #36]	; 0x24
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_3) == GPIO_PIN_SET){if(key_count[3][1]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][1]++;}}else{if(key_count[3][1]){key_count[3][1]--;}}
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4819      	ldr	r0, [pc, #100]	; (8000c30 <get_current_keyboard_state+0x4d4>)
 8000bcc:	f005 faf8 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d109      	bne.n	8000bea <get_current_keyboard_state+0x48e>
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	2b15      	cmp	r3, #21
 8000bdc:	d80e      	bhi.n	8000bfc <get_current_keyboard_state+0x4a0>
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000be6:	6293      	str	r3, [r2, #40]	; 0x28
 8000be8:	e008      	b.n	8000bfc <get_current_keyboard_state+0x4a0>
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d004      	beq.n	8000bfc <get_current_keyboard_state+0x4a0>
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000bfa:	6293      	str	r3, [r2, #40]	; 0x28
			if(HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_2) == GPIO_PIN_SET){if(key_count[3][2]<KEY_COUNT_BOUNDRY+KEY_COUNT_BOUNDRY/2){key_count[3][2]++;}}else{if(key_count[3][2]){key_count[3][2]--;}}
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	480c      	ldr	r0, [pc, #48]	; (8000c30 <get_current_keyboard_state+0x4d4>)
 8000c00:	f005 fade 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d116      	bne.n	8000c38 <get_current_keyboard_state+0x4dc>
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	2b15      	cmp	r3, #21
 8000c10:	d81b      	bhi.n	8000c4a <get_current_keyboard_state+0x4ee>
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c16:	3301      	adds	r3, #1
 8000c18:	4a02      	ldr	r2, [pc, #8]	; (8000c24 <get_current_keyboard_state+0x4c8>)
 8000c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c1c:	e015      	b.n	8000c4a <get_current_keyboard_state+0x4ee>
 8000c1e:	bf00      	nop
 8000c20:	20001c50 	.word	0x20001c50
 8000c24:	20001c1c 	.word	0x20001c1c
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40021800 	.word	0x40021800
 8000c30:	40022000 	.word	0x40022000
 8000c34:	40021c00 	.word	0x40021c00
 8000c38:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <get_current_keyboard_state+0x568>)
 8000c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d004      	beq.n	8000c4a <get_current_keyboard_state+0x4ee>
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <get_current_keyboard_state+0x568>)
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	3b01      	subs	r3, #1
 8000c46:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <get_current_keyboard_state+0x568>)
 8000c48:	62d3      	str	r3, [r2, #44]	; 0x2c

			if(key_count[3][0] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_MEASURE;}else{keyboard_state&=~BUTTON_MEASURE;}
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <get_current_keyboard_state+0x568>)
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4e:	2b0e      	cmp	r3, #14
 8000c50:	d907      	bls.n	8000c62 <get_current_keyboard_state+0x506>
 8000c52:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c5e:	801a      	strh	r2, [r3, #0]
 8000c60:	e006      	b.n	8000c70 <get_current_keyboard_state+0x514>
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c6e:	801a      	strh	r2, [r3, #0]
			if(key_count[3][1] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_WIND_SPEED;}else{keyboard_state&=~BUTTON_VERTICAL_WIND_SPEED;}
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <get_current_keyboard_state+0x568>)
 8000c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c74:	2b0e      	cmp	r3, #14
 8000c76:	d907      	bls.n	8000c88 <get_current_keyboard_state+0x52c>
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c84:	801a      	strh	r2, [r3, #0]
 8000c86:	e006      	b.n	8000c96 <get_current_keyboard_state+0x53a>
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000c94:	801a      	strh	r2, [r3, #0]
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <get_current_keyboard_state+0x568>)
 8000c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9a:	2b0e      	cmp	r3, #14
 8000c9c:	d907      	bls.n	8000cae <get_current_keyboard_state+0x552>
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000caa:	801a      	strh	r2, [r3, #0]
			break;
 8000cac:	e006      	b.n	8000cbc <get_current_keyboard_state+0x560>
			if(key_count[3][2] >= KEY_COUNT_BOUNDRY){keyboard_state|=BUTTON_VERTICAL_STABILITY;}else{keyboard_state&=~BUTTON_VERTICAL_STABILITY;}
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <get_current_keyboard_state+0x56c>)
 8000cba:	801a      	strh	r2, [r3, #0]
			break;
 8000cbc:	bf00      	nop
		}

	}
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20001c1c 	.word	0x20001c1c
 8000cc8:	20001c50 	.word	0x20001c50

08000ccc <spinner_GPIO_init>:

uint32_t pluscnt = 0;
uint32_t minuscnt = 0;


void spinner_GPIO_init(){
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pins : PF8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <spinner_GPIO_init+0x60>)
 8000cf4:	f005 f8b8 	bl	8005e68 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <spinner_GPIO_init+0x64>)
 8000d0a:	f005 f8ad 	bl	8005e68 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);	
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4804      	ldr	r0, [pc, #16]	; (8000d30 <spinner_GPIO_init+0x64>)
 8000d20:	f005 f8a2 	bl	8005e68 <HAL_GPIO_Init>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021400 	.word	0x40021400
 8000d30:	40020800 	.word	0x40020800

08000d34 <get_current_spinner_button_state>:

void get_current_spinner_button_state(){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8);
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	4815      	ldr	r0, [pc, #84]	; (8000d94 <get_current_spinner_button_state+0x60>)
 8000d40:	f005 fa3e 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000d44:	4603      	mov	r3, r0
 8000d46:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_RESET){
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <get_current_spinner_button_state+0x2e>
		if(spinner_button_count < SPINNER_COUNT_BOUNDRY+SPINNER_COUNT_BOUNDRY/2){
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2b3b      	cmp	r3, #59	; 0x3b
 8000d54:	d80e      	bhi.n	8000d74 <get_current_spinner_button_state+0x40>
				spinner_button_count++;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e008      	b.n	8000d74 <get_current_spinner_button_state+0x40>
		}
	}else{
		if(spinner_button_count >= 3){
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d904      	bls.n	8000d74 <get_current_spinner_button_state+0x40>
			spinner_button_count-=3;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3b03      	subs	r3, #3
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d72:	6013      	str	r3, [r2, #0]
		}
	}
	if(spinner_button_count >= SPINNER_COUNT_BOUNDRY){
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <get_current_spinner_button_state+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b27      	cmp	r3, #39	; 0x27
 8000d7a:	d903      	bls.n	8000d84 <get_current_spinner_button_state+0x50>
		spinner_button_state=1;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <get_current_spinner_button_state+0x68>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	601a      	str	r2, [r3, #0]
	}else{
		spinner_button_state=0;
	}
}
 8000d82:	e002      	b.n	8000d8a <get_current_spinner_button_state+0x56>
		spinner_button_state=0;
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <get_current_spinner_button_state+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021400 	.word	0x40021400
 8000d98:	20001c58 	.word	0x20001c58
 8000d9c:	20001c54 	.word	0x20001c54

08000da0 <get_spinner_position_change>:


void get_spinner_position_change(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	switch(spinner_stage){
 8000da4:	4b4a      	ldr	r3, [pc, #296]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b05      	cmp	r3, #5
 8000daa:	f200 808f 	bhi.w	8000ecc <get_spinner_position_change+0x12c>
 8000dae:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <get_spinner_position_change+0x14>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000df9 	.word	0x08000df9
 8000dbc:	08000e37 	.word	0x08000e37
 8000dc0:	08000e4d 	.word	0x08000e4d
 8000dc4:	08000e8b 	.word	0x08000e8b
 8000dc8:	08000ea1 	.word	0x08000ea1
		case 0:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_RESET){
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	4841      	ldr	r0, [pc, #260]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000dd0:	f005 f9f6 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d16d      	bne.n	8000eb6 <get_spinner_position_change+0x116>
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	483d      	ldr	r0, [pc, #244]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000dde:	f005 f9ef 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d103      	bne.n	8000df0 <get_spinner_position_change+0x50>
					spinner_stage = 1;
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
				}else{
					spinner_stage = 3;
				}
			}
			break;
 8000dee:	e062      	b.n	8000eb6 <get_spinner_position_change+0x116>
					spinner_stage = 3;
 8000df0:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	601a      	str	r2, [r3, #0]
			break;
 8000df6:	e05e      	b.n	8000eb6 <get_spinner_position_change+0x116>
		}
		case 1:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000df8:	2140      	movs	r1, #64	; 0x40
 8000dfa:	4836      	ldr	r0, [pc, #216]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000dfc:	f005 f9e0 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d159      	bne.n	8000eba <get_spinner_position_change+0x11a>
				//if(spinner_position){
					//spinner_position--;
				minuscnt++;
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <get_spinner_position_change+0x138>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <get_spinner_position_change+0x138>)
 8000e0e:	6013      	str	r3, [r2, #0]
				pluscnt=0;
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <get_spinner_position_change+0x13c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
				if(minuscnt >= 4){
 8000e16:	4b30      	ldr	r3, [pc, #192]	; (8000ed8 <get_spinner_position_change+0x138>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d907      	bls.n	8000e2e <get_spinner_position_change+0x8e>
					spinner_position--;
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <get_spinner_position_change+0x140>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <get_spinner_position_change+0x140>)
 8000e26:	6013      	str	r3, [r2, #0]
					minuscnt=0;
 8000e28:	4b2b      	ldr	r3, [pc, #172]	; (8000ed8 <get_spinner_position_change+0x138>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
				}
				//}
				spinner_stage = 2;
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000e34:	e041      	b.n	8000eba <get_spinner_position_change+0x11a>
		}
		case 2:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e36:	2180      	movs	r1, #128	; 0x80
 8000e38:	4826      	ldr	r0, [pc, #152]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000e3a:	f005 f9c1 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d13c      	bne.n	8000ebe <get_spinner_position_change+0x11e>
				spinner_stage = 0;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000e4a:	e038      	b.n	8000ebe <get_spinner_position_change+0x11e>
		}
		case 3:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000e50:	f005 f9b6 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d133      	bne.n	8000ec2 <get_spinner_position_change+0x122>
				//if(spinner_position < 1000){
					//spinner_position++;
				pluscnt++;
 8000e5a:	4b20      	ldr	r3, [pc, #128]	; (8000edc <get_spinner_position_change+0x13c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <get_spinner_position_change+0x13c>)
 8000e62:	6013      	str	r3, [r2, #0]
				minuscnt=0;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <get_spinner_position_change+0x138>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
				if(pluscnt>=2){
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <get_spinner_position_change+0x13c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d907      	bls.n	8000e82 <get_spinner_position_change+0xe2>
					spinner_position++;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <get_spinner_position_change+0x140>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <get_spinner_position_change+0x140>)
 8000e7a:	6013      	str	r3, [r2, #0]
					pluscnt=0;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <get_spinner_position_change+0x13c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
				}
				//}				
				spinner_stage = 4;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000e84:	2204      	movs	r2, #4
 8000e86:	601a      	str	r2, [r3, #0]
			}
			break;			
 8000e88:	e01b      	b.n	8000ec2 <get_spinner_position_change+0x122>
		}
		case 4:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	4811      	ldr	r0, [pc, #68]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000e8e:	f005 f997 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d116      	bne.n	8000ec6 <get_spinner_position_change+0x126>
				spinner_stage = 5;
 8000e98:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e9e:	e012      	b.n	8000ec6 <get_spinner_position_change+0x126>
		}
		case 5:{
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_SET){
 8000ea0:	2140      	movs	r1, #64	; 0x40
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <get_spinner_position_change+0x134>)
 8000ea4:	f005 f98c 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d10d      	bne.n	8000eca <get_spinner_position_change+0x12a>
				spinner_stage = 0;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <get_spinner_position_change+0x130>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
			}
			break;
 8000eb4:	e009      	b.n	8000eca <get_spinner_position_change+0x12a>
			break;
 8000eb6:	bf00      	nop
 8000eb8:	e008      	b.n	8000ecc <get_spinner_position_change+0x12c>
			break;			
 8000eba:	bf00      	nop
 8000ebc:	e006      	b.n	8000ecc <get_spinner_position_change+0x12c>
			break;			
 8000ebe:	bf00      	nop
 8000ec0:	e004      	b.n	8000ecc <get_spinner_position_change+0x12c>
			break;			
 8000ec2:	bf00      	nop
 8000ec4:	e002      	b.n	8000ecc <get_spinner_position_change+0x12c>
			break;
 8000ec6:	bf00      	nop
 8000ec8:	e000      	b.n	8000ecc <get_spinner_position_change+0x12c>
			break;
 8000eca:	bf00      	nop
		}
	}
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20001c5c 	.word	0x20001c5c
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	20001c64 	.word	0x20001c64
 8000edc:	20001c60 	.word	0x20001c60
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <switch_GPIO_init>:
// SWITCH PORTS:
// IN: F10 (PULLUP)

uint32_t switch_state = 0;

void switch_GPIO_init(){
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin : PF10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <switch_GPIO_init+0x34>)
 8000f0c:	f004 ffac 	bl	8005e68 <HAL_GPIO_Init>
}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40021400 	.word	0x40021400

08000f1c <get_current_switch_state>:

void get_current_switch_state(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
	GPIO_PinState val = HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_10);
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	4809      	ldr	r0, [pc, #36]	; (8000f4c <get_current_switch_state+0x30>)
 8000f28:	f005 f94a 	bl	80061c0 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	71fb      	strb	r3, [r7, #7]
	if(val == GPIO_PIN_SET){
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d103      	bne.n	8000f3e <get_current_switch_state+0x22>
		switch_state = 0;
 8000f36:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <get_current_switch_state+0x34>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
	}else{
		switch_state = 1;
	}
}
 8000f3c:	e002      	b.n	8000f44 <get_current_switch_state+0x28>
		switch_state = 1;
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <get_current_switch_state+0x34>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021400 	.word	0x40021400
 8000f50:	20001c68 	.word	0x20001c68

08000f54 <print_rectangle>:
			framebuf[i * SCRWIDTH + j] = color;
		}
	}
}

void print_rectangle(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000f54:	b480      	push	{r7}
 8000f56:	b087      	sub	sp, #28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e01a      	b.n	8000f9e <print_rectangle+0x4a>
		for(uint32_t j = x; j < x+w; j++){
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	e00e      	b.n	8000f8c <print_rectangle+0x38>
			framebuf[i*SCRWIDTH+j] = color;
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4613      	mov	r3, r2
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	1a9b      	subs	r3, r3, r2
 8000f76:	015b      	lsls	r3, r3, #5
 8000f78:	461a      	mov	r2, r3
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <print_rectangle+0x64>)
 8000f80:	8c3a      	ldrh	r2, [r7, #32]
 8000f82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d3ea      	bcc.n	8000f6e <print_rectangle+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d3de      	bcc.n	8000f68 <print_rectangle+0x14>
		}
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20001c6c 	.word	0x20001c6c

08000fbc <print_rectangle_empty>:

void print_rectangle_empty(uint32_t x, uint32_t y, uint32_t w, uint32_t h, uint16_t color){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	603b      	str	r3, [r7, #0]
	for(uint32_t i = y; i < y+h; i++){
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e041      	b.n	8001054 <print_rectangle_empty+0x98>
		for(uint32_t j = x; j < x+w; j++){
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e035      	b.n	8001042 <print_rectangle_empty+0x86>
			if(i != y && i != y+h-1){
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d022      	beq.n	8001024 <print_rectangle_empty+0x68>
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d01b      	beq.n	8001024 <print_rectangle_empty+0x68>
				framebuf[i*SCRWIDTH+x] = color;
 8000fec:	697a      	ldr	r2, [r7, #20]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	1a9b      	subs	r3, r3, r2
 8000ff4:	015b      	lsls	r3, r3, #5
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	491c      	ldr	r1, [pc, #112]	; (8001070 <print_rectangle_empty+0xb4>)
 8000ffe:	8c3a      	ldrh	r2, [r7, #32]
 8001000:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				framebuf[i*SCRWIDTH+x+w-1] = color;
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4613      	mov	r3, r2
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	015b      	lsls	r3, r3, #5
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	441a      	add	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	3b01      	subs	r3, #1
 800101a:	4915      	ldr	r1, [pc, #84]	; (8001070 <print_rectangle_empty+0xb4>)
 800101c:	8c3a      	ldrh	r2, [r7, #32]
 800101e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				break;
 8001022:	e014      	b.n	800104e <print_rectangle_empty+0x92>
			}
			framebuf[i*SCRWIDTH+j] = color;
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4613      	mov	r3, r2
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	015b      	lsls	r3, r3, #5
 800102e:	461a      	mov	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4413      	add	r3, r2
 8001034:	490e      	ldr	r1, [pc, #56]	; (8001070 <print_rectangle_empty+0xb4>)
 8001036:	8c3a      	ldrh	r2, [r7, #32]
 8001038:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint32_t j = x; j < x+w; j++){
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	429a      	cmp	r2, r3
 800104c:	d3c3      	bcc.n	8000fd6 <print_rectangle_empty+0x1a>
	for(uint32_t i = y; i < y+h; i++){
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	4413      	add	r3, r2
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3b7      	bcc.n	8000fd0 <print_rectangle_empty+0x14>
		}
	}
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20001c6c 	.word	0x20001c6c

08001074 <print_char>:


void print_char(uint32_t x, uint32_t y, uint8_t index, uint16_t color){
 8001074:	b480      	push	{r7}
 8001076:	b08f      	sub	sp, #60	; 0x3c
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	460b      	mov	r3, r1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	4613      	mov	r3, r2
 8001088:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	461a      	mov	r2, r3
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <print_char+0x150>)
 8001098:	4413      	add	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
 80010a4:	e03c      	b.n	8001120 <print_char+0xac>
		uint32_t yiter = y;
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 80010aa:	2301      	movs	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
 80010b4:	e02b      	b.n	800110e <print_char+0x9a>
			if(*fptr & mask){
 80010b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b8:	781a      	ldrb	r2, [r3, #0]
 80010ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010be:	4013      	ands	r3, r2
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00c      	beq.n	80010e0 <print_char+0x6c>
				framebuf[yiter * SCRWIDTH + xiter] = color;
 80010c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010c8:	4613      	mov	r3, r2
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	015b      	lsls	r3, r3, #5
 80010d0:	461a      	mov	r2, r3
 80010d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d4:	4413      	add	r3, r2
 80010d6:	493c      	ldr	r1, [pc, #240]	; (80011c8 <print_char+0x154>)
 80010d8:	88ba      	ldrh	r2, [r7, #4]
 80010da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80010de:	e00b      	b.n	80010f8 <print_char+0x84>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 80010e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010e2:	4613      	mov	r3, r2
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	015b      	lsls	r3, r3, #5
 80010ea:	461a      	mov	r2, r3
 80010ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ee:	4413      	add	r3, r2
 80010f0:	4a35      	ldr	r2, [pc, #212]	; (80011c8 <print_char+0x154>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 80010f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter++;
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	3301      	adds	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	3301      	adds	r3, #1
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	2b07      	cmp	r3, #7
 8001112:	d9d0      	bls.n	80010b6 <print_char+0x42>
		}
		xiter++;
 8001114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001116:	3301      	adds	r3, #1
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 800111a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111c:	3301      	adds	r3, #1
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	330c      	adds	r3, #12
 8001124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001126:	429a      	cmp	r2, r3
 8001128:	d3bd      	bcc.n	80010a6 <print_char+0x32>
	}
	xiter = x;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	330c      	adds	r3, #12
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	e039      	b.n	80011aa <print_char+0x136>
		uint32_t yiter = y+8;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	3308      	adds	r3, #8
 800113a:	61fb      	str	r3, [r7, #28]
		uint8_t mask = 0b00000001;
 800113c:	2301      	movs	r3, #1
 800113e:	76fb      	strb	r3, [r7, #27]
		for(uint32_t i = 0; i < 8; i++){
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e028      	b.n	8001198 <print_char+0x124>
			if(*fptr & mask){
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	781a      	ldrb	r2, [r3, #0]
 800114a:	7efb      	ldrb	r3, [r7, #27]
 800114c:	4013      	ands	r3, r2
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00c      	beq.n	800116e <print_char+0xfa>
				framebuf[yiter * 480 + xiter] = color;
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	4613      	mov	r3, r2
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	015b      	lsls	r3, r3, #5
 800115e:	461a      	mov	r2, r3
 8001160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001162:	4413      	add	r3, r2
 8001164:	4918      	ldr	r1, [pc, #96]	; (80011c8 <print_char+0x154>)
 8001166:	88ba      	ldrh	r2, [r7, #4]
 8001168:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 800116c:	e00b      	b.n	8001186 <print_char+0x112>
			}else{
				framebuf[yiter * SCRWIDTH + xiter] = 0;
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4613      	mov	r3, r2
 8001172:	011b      	lsls	r3, r3, #4
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	461a      	mov	r2, r3
 800117a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800117c:	4413      	add	r3, r2
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <print_char+0x154>)
 8001180:	2100      	movs	r1, #0
 8001182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
			mask = mask << 1;
 8001186:	7efb      	ldrb	r3, [r7, #27]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	76fb      	strb	r3, [r7, #27]
			yiter++;
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	3301      	adds	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < 8; i++){
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b07      	cmp	r3, #7
 800119c:	d9d3      	bls.n	8001146 <print_char+0xd2>
		}
		xiter++;
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	3301      	adds	r3, #1
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	3301      	adds	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3318      	adds	r3, #24
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d3c0      	bcc.n	8001136 <print_char+0xc2>
	}

}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	373c      	adds	r7, #60	; 0x3c
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000004 	.word	0x20000004
 80011c8:	20001c6c 	.word	0x20001c6c

080011cc <print_char_scaled>:


void print_char_scaled(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 80011cc:	b480      	push	{r7}
 80011ce:	b097      	sub	sp, #92	; 0x5c
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	4611      	mov	r1, r2
 80011d8:	461a      	mov	r2, r3
 80011da:	460b      	mov	r3, r1
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	4613      	mov	r3, r2
 80011e0:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b80      	ldr	r3, [pc, #512]	; (80013f0 <print_char_scaled+0x224>)
 80011f0:	4413      	add	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
 80011fc:	e06e      	b.n	80012dc <print_char_scaled+0x110>
		uint32_t yiter = y;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint8_t mask = 0b00000001;
 8001202:	2301      	movs	r3, #1
 8001204:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		for(uint32_t i = 0; i < 8; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
 800120c:	e05c      	b.n	80012c8 <print_char_scaled+0xfc>
			if(*fptr & mask){
 800120e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001210:	781a      	ldrb	r2, [r3, #0]
 8001212:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001216:	4013      	ands	r3, r2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d024      	beq.n	8001268 <print_char_scaled+0x9c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800121e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001220:	643b      	str	r3, [r7, #64]	; 0x40
 8001222:	e01a      	b.n	800125a <print_char_scaled+0x8e>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001228:	e00e      	b.n	8001248 <print_char_scaled+0x7c>
						framebuf[iy * SCRWIDTH + ix] = color;	
 800122a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800122c:	4613      	mov	r3, r2
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	1a9b      	subs	r3, r3, r2
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	461a      	mov	r2, r3
 8001236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001238:	4413      	add	r3, r2
 800123a:	496e      	ldr	r1, [pc, #440]	; (80013f4 <print_char_scaled+0x228>)
 800123c:	88ba      	ldrh	r2, [r7, #4]
 800123e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001244:	3301      	adds	r3, #1
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800124a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800124c:	4413      	add	r3, r2
 800124e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001250:	429a      	cmp	r2, r3
 8001252:	d3ea      	bcc.n	800122a <print_char_scaled+0x5e>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001256:	3301      	adds	r3, #1
 8001258:	643b      	str	r3, [r7, #64]	; 0x40
 800125a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800125c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800125e:	4413      	add	r3, r2
 8001260:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001262:	429a      	cmp	r2, r3
 8001264:	d3de      	bcc.n	8001224 <print_char_scaled+0x58>
 8001266:	e023      	b.n	80012b0 <print_char_scaled+0xe4>
					}
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800126a:	63bb      	str	r3, [r7, #56]	; 0x38
 800126c:	e01a      	b.n	80012a4 <print_char_scaled+0xd8>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800126e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
 8001272:	e00e      	b.n	8001292 <print_char_scaled+0xc6>
						framebuf[iy * SCRWIDTH + ix] = 0;
 8001274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001276:	4613      	mov	r3, r2
 8001278:	011b      	lsls	r3, r3, #4
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	015b      	lsls	r3, r3, #5
 800127e:	461a      	mov	r2, r3
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	4413      	add	r3, r2
 8001284:	4a5b      	ldr	r2, [pc, #364]	; (80013f4 <print_char_scaled+0x228>)
 8001286:	2100      	movs	r1, #0
 8001288:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800128c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800128e:	3301      	adds	r3, #1
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
 8001292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001294:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001296:	4413      	add	r3, r2
 8001298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800129a:	429a      	cmp	r2, r3
 800129c:	d3ea      	bcc.n	8001274 <print_char_scaled+0xa8>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800129e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012a0:	3301      	adds	r3, #1
 80012a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80012a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012a8:	4413      	add	r3, r2
 80012aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3de      	bcc.n	800126e <print_char_scaled+0xa2>
					}
				}
			}
			mask = mask << 1;
 80012b0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			yiter+=scale;
 80012ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012be:	4413      	add	r3, r2
 80012c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		for(uint32_t i = 0; i < 8; i++){
 80012c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012c4:	3301      	adds	r3, #1
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
 80012c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	d99f      	bls.n	800120e <print_char_scaled+0x42>
		}
		xiter+=scale;
 80012ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80012d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d2:	4413      	add	r3, r2
 80012d4:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80012d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012d8:	3301      	adds	r3, #1
 80012da:	653b      	str	r3, [r7, #80]	; 0x50
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	330c      	adds	r3, #12
 80012e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d38b      	bcc.n	80011fe <print_char_scaled+0x32>
	}
	xiter = x;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	330c      	adds	r3, #12
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
 80012f0:	e071      	b.n	80013d6 <print_char_scaled+0x20a>
		uint32_t yiter = y+8*scale;
 80012f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	4413      	add	r3, r2
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8_t mask = 0b00000001;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for(uint32_t i = 0; i < 8; i++){
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	e05c      	b.n	80013c2 <print_char_scaled+0x1f6>
			if(*fptr & mask){
 8001308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800130a:	781a      	ldrb	r2, [r3, #0]
 800130c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001310:	4013      	ands	r3, r2
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	d024      	beq.n	8001362 <print_char_scaled+0x196>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131a:	623b      	str	r3, [r7, #32]
 800131c:	e01a      	b.n	8001354 <print_char_scaled+0x188>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001320:	61fb      	str	r3, [r7, #28]
 8001322:	e00e      	b.n	8001342 <print_char_scaled+0x176>
						framebuf[iy * SCRWIDTH + ix] = color;	
 8001324:	6a3a      	ldr	r2, [r7, #32]
 8001326:	4613      	mov	r3, r2
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	015b      	lsls	r3, r3, #5
 800132e:	461a      	mov	r2, r3
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	4413      	add	r3, r2
 8001334:	492f      	ldr	r1, [pc, #188]	; (80013f4 <print_char_scaled+0x228>)
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	3301      	adds	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001346:	4413      	add	r3, r2
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3ea      	bcc.n	8001324 <print_char_scaled+0x158>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	3301      	adds	r3, #1
 8001352:	623b      	str	r3, [r7, #32]
 8001354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001358:	4413      	add	r3, r2
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d3de      	bcc.n	800131e <print_char_scaled+0x152>
 8001360:	e023      	b.n	80013aa <print_char_scaled+0x1de>
					}
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	e01a      	b.n	800139e <print_char_scaled+0x1d2>
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	e00e      	b.n	800138c <print_char_scaled+0x1c0>
						framebuf[iy * SCRWIDTH + ix] = 0;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4613      	mov	r3, r2
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	015b      	lsls	r3, r3, #5
 8001378:	461a      	mov	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	4413      	add	r3, r2
 800137e:	4a1d      	ldr	r2, [pc, #116]	; (80013f4 <print_char_scaled+0x228>)
 8001380:	2100      	movs	r1, #0
 8001382:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					for(uint32_t ix = xiter; ix < xiter+scale; ix++){
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800138e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001390:	4413      	add	r3, r2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3ea      	bcc.n	800136e <print_char_scaled+0x1a2>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	3301      	adds	r3, #1
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013a2:	4413      	add	r3, r2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d3de      	bcc.n	8001368 <print_char_scaled+0x19c>
					}
				}
			}
			mask = mask << 1;
 80013aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			yiter+=scale;
 80013b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013b8:	4413      	add	r3, r2
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t i = 0; i < 8; i++){
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	3301      	adds	r3, #1
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	2b07      	cmp	r3, #7
 80013c6:	d99f      	bls.n	8001308 <print_char_scaled+0x13c>
		}
		xiter+=scale;
 80013c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013cc:	4413      	add	r3, r2
 80013ce:	657b      	str	r3, [r7, #84]	; 0x54
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	3301      	adds	r3, #1
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	3318      	adds	r3, #24
 80013da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013dc:	429a      	cmp	r2, r3
 80013de:	d388      	bcc.n	80012f2 <print_char_scaled+0x126>
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	375c      	adds	r7, #92	; 0x5c
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000004 	.word	0x20000004
 80013f4:	20001c6c 	.word	0x20001c6c

080013f8 <print_char_scaled_y>:


void print_char_scaled_y(uint32_t x, uint32_t y, uint8_t index, uint16_t color, uint32_t scale){
 80013f8:	b480      	push	{r7}
 80013fa:	b093      	sub	sp, #76	; 0x4c
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	4611      	mov	r1, r2
 8001404:	461a      	mov	r2, r3
 8001406:	460b      	mov	r3, r1
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	4613      	mov	r3, r2
 800140c:	80bb      	strh	r3, [r7, #4]
	uint8_t* sym = Font_12x16_Data+index*24;//get_char_data_addr(ch);
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	461a      	mov	r2, r3
 800141a:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <print_char_scaled_y+0x1c0>)
 800141c:	4413      	add	r3, r2
 800141e:	613b      	str	r3, [r7, #16]

	uint32_t xiter = x;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	643b      	str	r3, [r7, #64]	; 0x40
 8001428:	e055      	b.n	80014d6 <print_char_scaled_y+0xde>
		uint32_t yiter = y;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint8_t mask = 0b00000001;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		for(uint32_t i = 0; i < 8; i++){
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
 8001438:	e044      	b.n	80014c4 <print_char_scaled_y+0xcc>
			if(*fptr & mask){
 800143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001442:	4013      	ands	r3, r2
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d018      	beq.n	800147c <print_char_scaled_y+0x84>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800144a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
 800144e:	e00e      	b.n	800146e <print_char_scaled_y+0x76>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 8001450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001452:	4613      	mov	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	1a9b      	subs	r3, r3, r2
 8001458:	015b      	lsls	r3, r3, #5
 800145a:	461a      	mov	r2, r3
 800145c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800145e:	4413      	add	r3, r2
 8001460:	4956      	ldr	r1, [pc, #344]	; (80015bc <print_char_scaled_y+0x1c4>)
 8001462:	88ba      	ldrh	r2, [r7, #4]
 8001464:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146a:	3301      	adds	r3, #1
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
 800146e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001472:	4413      	add	r3, r2
 8001474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001476:	429a      	cmp	r2, r3
 8001478:	d3ea      	bcc.n	8001450 <print_char_scaled_y+0x58>
 800147a:	e017      	b.n	80014ac <print_char_scaled_y+0xb4>
				}
				
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800147c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001480:	e00e      	b.n	80014a0 <print_char_scaled_y+0xa8>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 8001482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001484:	4613      	mov	r3, r2
 8001486:	011b      	lsls	r3, r3, #4
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	015b      	lsls	r3, r3, #5
 800148c:	461a      	mov	r2, r3
 800148e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001490:	4413      	add	r3, r2
 8001492:	4a4a      	ldr	r2, [pc, #296]	; (80015bc <print_char_scaled_y+0x1c4>)
 8001494:	2100      	movs	r1, #0
 8001496:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	3301      	adds	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014a4:	4413      	add	r3, r2
 80014a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3ea      	bcc.n	8001482 <print_char_scaled_y+0x8a>
				}
			}
			mask = mask << 1;
 80014ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			yiter+=scale;
 80014b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80014b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ba:	4413      	add	r3, r2
 80014bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(uint32_t i = 0; i < 8; i++){
 80014be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c0:	3301      	adds	r3, #1
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
 80014c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c6:	2b07      	cmp	r3, #7
 80014c8:	d9b7      	bls.n	800143a <print_char_scaled_y+0x42>
		}
		xiter++;
 80014ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014cc:	3301      	adds	r3, #1
 80014ce:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym; fptr < sym + 12; fptr++){
 80014d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014d2:	3301      	adds	r3, #1
 80014d4:	643b      	str	r3, [r7, #64]	; 0x40
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	330c      	adds	r3, #12
 80014da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3a4      	bcc.n	800142a <print_char_scaled_y+0x32>
	}
	xiter = x;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	330c      	adds	r3, #12
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ea:	e058      	b.n	800159e <print_char_scaled_y+0x1a6>
		uint32_t yiter = y+8*scale;
 80014ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	4413      	add	r3, r2
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
		uint8_t mask = 0b00000001;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		for(uint32_t i = 0; i < 8; i++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	e044      	b.n	800158c <print_char_scaled_y+0x194>
			if(*fptr & mask){
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800150a:	4013      	ands	r3, r2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d018      	beq.n	8001544 <print_char_scaled_y+0x14c>
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	e00e      	b.n	8001536 <print_char_scaled_y+0x13e>
					framebuf[iy * SCRWIDTH + xiter] = color;	
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4613      	mov	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	015b      	lsls	r3, r3, #5
 8001522:	461a      	mov	r2, r3
 8001524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001526:	4413      	add	r3, r2
 8001528:	4924      	ldr	r1, [pc, #144]	; (80015bc <print_char_scaled_y+0x1c4>)
 800152a:	88ba      	ldrh	r2, [r7, #4]
 800152c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	3301      	adds	r3, #1
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153a:	4413      	add	r3, r2
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	429a      	cmp	r2, r3
 8001540:	d3ea      	bcc.n	8001518 <print_char_scaled_y+0x120>
 8001542:	e017      	b.n	8001574 <print_char_scaled_y+0x17c>
				}
			}else{
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	e00e      	b.n	8001568 <print_char_scaled_y+0x170>
					framebuf[iy * SCRWIDTH + xiter] = 0;
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4613      	mov	r3, r2
 800154e:	011b      	lsls	r3, r3, #4
 8001550:	1a9b      	subs	r3, r3, r2
 8001552:	015b      	lsls	r3, r3, #5
 8001554:	461a      	mov	r2, r3
 8001556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001558:	4413      	add	r3, r2
 800155a:	4a18      	ldr	r2, [pc, #96]	; (80015bc <print_char_scaled_y+0x1c4>)
 800155c:	2100      	movs	r1, #0
 800155e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(uint32_t iy = yiter; iy < yiter+scale; iy++){
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800156c:	4413      	add	r3, r2
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	429a      	cmp	r2, r3
 8001572:	d3ea      	bcc.n	800154a <print_char_scaled_y+0x152>
				}
			}
			mask = mask << 1;
 8001574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			yiter+=scale;
 800157e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001582:	4413      	add	r3, r2
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = 0; i < 8; i++){
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3301      	adds	r3, #1
 800158a:	61fb      	str	r3, [r7, #28]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b07      	cmp	r3, #7
 8001590:	d9b7      	bls.n	8001502 <print_char_scaled_y+0x10a>
		}
		xiter++;
 8001592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001594:	3301      	adds	r3, #1
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
	for(uint8_t* fptr = sym+12; fptr < sym+24; fptr++){
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	3301      	adds	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3318      	adds	r3, #24
 80015a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3a1      	bcc.n	80014ec <print_char_scaled_y+0xf4>
	}
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	374c      	adds	r7, #76	; 0x4c
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20001c6c 	.word	0x20001c6c

080015c0 <print_string>:

void print_string(uint32_t x, uint32_t y, char* string, uint16_t color){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fe1e 	bl	8000210 <strlen>
 80015d4:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00c      	b.n	80015f6 <print_string+0x36>
		print_char(x, y, *i, color);
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	68b9      	ldr	r1, [r7, #8]
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f7ff fd45 	bl	8001074 <print_char>
		x += 12;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	330c      	adds	r3, #12
 80015ee:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4413      	add	r3, r2
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d3ec      	bcc.n	80015dc <print_string+0x1c>
		//y += 16;
	}
}
 8001602:	bf00      	nop
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <print_string_scaled>:

void print_string_scaled(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7fe fdf8 	bl	8000210 <strlen>
 8001620:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	e015      	b.n	8001654 <print_string_scaled+0x48>
		print_char_scaled(x, y, *i, color, scale);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	781a      	ldrb	r2, [r3, #0]
 800162c:	8879      	ldrh	r1, [r7, #2]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	460b      	mov	r3, r1
 8001634:	68b9      	ldr	r1, [r7, #8]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fdc8 	bl	80011cc <print_char_scaled>
		x += 12*scale;
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	461a      	mov	r2, r3
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4413      	add	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4413      	add	r3, r2
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3e3      	bcc.n	8001628 <print_string_scaled+0x1c>
		//y += 16*scale;
	}
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <print_string_scaled_y>:

void print_string_scaled_y(uint32_t x, uint32_t y, char* string, uint16_t color, uint32_t scale){
 800166a:	b580      	push	{r7, lr}
 800166c:	b088      	sub	sp, #32
 800166e:	af02      	add	r7, sp, #8
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	807b      	strh	r3, [r7, #2]
	uint32_t len = strlen(string);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7fe fdc9 	bl	8000210 <strlen>
 800167e:	6138      	str	r0, [r7, #16]
	for(char* i = string; i < string+len; i++){
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e00f      	b.n	80016a6 <print_string_scaled_y+0x3c>
		print_char_scaled_y(x, y, *i, color, scale);
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	8879      	ldrh	r1, [r7, #2]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	460b      	mov	r3, r1
 8001692:	68b9      	ldr	r1, [r7, #8]
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f7ff feaf 	bl	80013f8 <print_char_scaled_y>
		x += 12;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	330c      	adds	r3, #12
 800169e:	60fb      	str	r3, [r7, #12]
	for(char* i = string; i < string+len; i++){
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4413      	add	r3, r2
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3e9      	bcc.n	8001686 <print_string_scaled_y+0x1c>
		//y += 16*scale;
	}
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <fill_screen>:
// 16
// 12
// 272
// 4

void fill_screen(uint16_t color){for(uint16_t* i = framebuf; i < framebuf+SCRWIDTH*SCRHEIGHT; i++){*i = color;}}
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <fill_screen+0x34>)
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e005      	b.n	80016d8 <fill_screen+0x1c>
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3302      	adds	r3, #2
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <fill_screen+0x38>)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	4293      	cmp	r3, r2
 80016de:	d3f5      	bcc.n	80016cc <fill_screen+0x10>
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20001c6c 	.word	0x20001c6c
 80016f4:	2004186c 	.word	0x2004186c

080016f8 <print_number>:


void print_number(uint32_t x, uint32_t y, uint32_t number, uint16_t color, uint32_t scale){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	807b      	strh	r3, [r7, #2]
	if(!number){
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d11b      	bne.n	8001744 <print_number+0x4c>
		print_char_scaled(x+scale * 12, y, number % 10 + 0x30, color, scale);
 800170c:	6a3a      	ldr	r2, [r7, #32]
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	18d0      	adds	r0, r2, r3
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <print_number+0xe0>)
 8001720:	fba3 2301 	umull	r2, r3, r3, r1
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	1aca      	subs	r2, r1, r3
 8001730:	b2d3      	uxtb	r3, r2
 8001732:	3330      	adds	r3, #48	; 0x30
 8001734:	b2da      	uxtb	r2, r3
 8001736:	8879      	ldrh	r1, [r7, #2]
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	460b      	mov	r3, r1
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	f7ff fd44 	bl	80011cc <print_char_scaled>
	}

	uint32_t numlen = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
	uint32_t num_cp = number;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	613b      	str	r3, [r7, #16]
	while(num_cp){
 800174c:	e008      	b.n	8001760 <print_number+0x68>
		numlen++;
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
		num_cp /= 10;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	4a20      	ldr	r2, [pc, #128]	; (80017d8 <print_number+0xe0>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	613b      	str	r3, [r7, #16]
	while(num_cp){
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f3      	bne.n	800174e <print_number+0x56>
	}

	x += numlen * scale * 12;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	fb03 f202 	mul.w	r2, r3, r2
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
	while(number){
 800177e:	e023      	b.n	80017c8 <print_number+0xd0>
		print_char_scaled(x, y, number % 10 + 0x30, color, scale);
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <print_number+0xe0>)
 8001784:	fba3 2301 	umull	r2, r3, r3, r1
 8001788:	08da      	lsrs	r2, r3, #3
 800178a:	4613      	mov	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	1aca      	subs	r2, r1, r3
 8001794:	b2d3      	uxtb	r3, r2
 8001796:	3330      	adds	r3, #48	; 0x30
 8001798:	b2da      	uxtb	r2, r3
 800179a:	8879      	ldrh	r1, [r7, #2]
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	460b      	mov	r3, r1
 80017a2:	68b9      	ldr	r1, [r7, #8]
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fd11 	bl	80011cc <print_char_scaled>
		x -= scale * 12;
 80017aa:	6a3a      	ldr	r2, [r7, #32]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
		number /= 10;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <print_number+0xe0>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	607b      	str	r3, [r7, #4]
	while(number){
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1d8      	bne.n	8001780 <print_number+0x88>
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	cccccccd 	.word	0xcccccccd

080017dc <print_fat_rectangle>:

uint32_t state_progress = 0;
uint32_t mem_sp_st = 0; // memorized spinner position for diff
uint32_t system_angle = 180;

void print_fat_rectangle(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
	uint32_t x = 80;
 80017e2:	2350      	movs	r3, #80	; 0x50
 80017e4:	617b      	str	r3, [r7, #20]
	uint32_t y = 80;
 80017e6:	2350      	movs	r3, #80	; 0x50
 80017e8:	613b      	str	r3, [r7, #16]
	uint32_t width = 320;
 80017ea:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80017ee:	60fb      	str	r3, [r7, #12]
	uint32_t height = 100;
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 80017f4:	2300      	movs	r3, #0
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	e017      	b.n	800182a <print_fat_rectangle+0x4e>
		print_rectangle_empty(x, y, width, height, 0x797);
 80017fa:	f240 7397 	movw	r3, #1943	; 0x797
 80017fe:	9300      	str	r3, [sp, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff fbd8 	bl	8000fbc <print_rectangle_empty>
		x++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
		y++;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	3301      	adds	r3, #1
 8001816:	613b      	str	r3, [r7, #16]
		width -= 2;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	3b02      	subs	r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
		height -= 2;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	3b02      	subs	r3, #2
 8001822:	60bb      	str	r3, [r7, #8]
	for(uint8_t i = 0; i < 6; i++){
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	3301      	adds	r3, #1
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	2b05      	cmp	r3, #5
 800182e:	d9e4      	bls.n	80017fa <print_fat_rectangle+0x1e>
	}
}
 8001830:	bf00      	nop
 8001832:	bf00      	nop
 8001834:	3718      	adds	r7, #24
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <state_machine>:





void state_machine(){
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af02      	add	r7, sp, #8
	uint32_t kbd_st = keyboard_state;
 8001842:	4ba5      	ldr	r3, [pc, #660]	; (8001ad8 <state_machine+0x29c>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	60fb      	str	r3, [r7, #12]
	uint32_t sw_st = switch_state;
 8001848:	4ba4      	ldr	r3, [pc, #656]	; (8001adc <state_machine+0x2a0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60bb      	str	r3, [r7, #8]
	uint32_t spb_st = spinner_button_state;
 800184e:	4ba4      	ldr	r3, [pc, #656]	; (8001ae0 <state_machine+0x2a4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	607b      	str	r3, [r7, #4]
	uint32_t sp_st = spinner_position;
 8001854:	4ba3      	ldr	r3, [pc, #652]	; (8001ae4 <state_machine+0x2a8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	603b      	str	r3, [r7, #0]


	static uint32_t state_time = 0;

	switch(system_state){
 800185a:	4ba3      	ldr	r3, [pc, #652]	; (8001ae8 <state_machine+0x2ac>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b11      	cmp	r3, #17
 8001860:	f201 835a 	bhi.w	8002f18 <state_machine+0x16dc>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <state_machine+0x30>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	080018b5 	.word	0x080018b5
 8001870:	080018eb 	.word	0x080018eb
 8001874:	080019a9 	.word	0x080019a9
 8001878:	08001a63 	.word	0x08001a63
 800187c:	08001b5d 	.word	0x08001b5d
 8001880:	08001c8b 	.word	0x08001c8b
 8001884:	08001d43 	.word	0x08001d43
 8001888:	08001ea5 	.word	0x08001ea5
 800188c:	08002065 	.word	0x08002065
 8001890:	08002193 	.word	0x08002193
 8001894:	08002319 	.word	0x08002319
 8001898:	08002477 	.word	0x08002477
 800189c:	08002603 	.word	0x08002603
 80018a0:	08002783 	.word	0x08002783
 80018a4:	08002915 	.word	0x08002915
 80018a8:	08002a95 	.word	0x08002a95
 80018ac:	08002bf1 	.word	0x08002bf1
 80018b0:	08002d79 	.word	0x08002d79
		case 0:{
			if(need_out){
 80018b4:	4b8d      	ldr	r3, [pc, #564]	; (8001aec <state_machine+0x2b0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <state_machine+0x8c>
				fill_screen(0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fefd 	bl	80016bc <fill_screen>
				need_out = 0;
 80018c2:	4b8a      	ldr	r3, [pc, #552]	; (8001aec <state_machine+0x2b0>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
			}


			if(sw_st){
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f001 8301 	beq.w	8002ed2 <state_machine+0x1696>
				system_state = 1;
 80018d0:	4b85      	ldr	r3, [pc, #532]	; (8001ae8 <state_machine+0x2ac>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]
				need_out = 1;
 80018d6:	4b85      	ldr	r3, [pc, #532]	; (8001aec <state_machine+0x2b0>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

				state_time = tick_fun();
 80018dc:	f009 faaa 	bl	800ae34 <xTaskGetTickCount>
 80018e0:	4603      	mov	r3, r0
 80018e2:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <state_machine+0x2b4>)
 80018e4:	6013      	str	r3, [r2, #0]
			}
			break;
 80018e6:	f001 baf4 	b.w	8002ed2 <state_machine+0x1696>
		}
		case 1:{
			if(need_out){
 80018ea:	4b80      	ldr	r3, [pc, #512]	; (8001aec <state_machine+0x2b0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d010      	beq.n	8001914 <state_machine+0xd8>
				fill_screen(0);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fee2 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 80018f8:	f7ff ff70 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(115, 120, state1_string, 0x797, 2);
 80018fc:	2302      	movs	r3, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	f240 7397 	movw	r3, #1943	; 0x797
 8001904:	4a7b      	ldr	r2, [pc, #492]	; (8001af4 <state_machine+0x2b8>)
 8001906:	2178      	movs	r1, #120	; 0x78
 8001908:	2073      	movs	r0, #115	; 0x73
 800190a:	f7ff feae 	bl	800166a <print_string_scaled_y>
				need_out = 0;
 800190e:	4b77      	ldr	r3, [pc, #476]	; (8001aec <state_machine+0x2b0>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
			}

			if(tick_fun() - state_time >= 1000){
 8001914:	f009 fa8e 	bl	800ae34 <xTaskGetTickCount>
 8001918:	4602      	mov	r2, r0
 800191a:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <state_machine+0x2b4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001924:	d30a      	bcc.n	800193c <state_machine+0x100>
				system_state = 2;
 8001926:	4b70      	ldr	r3, [pc, #448]	; (8001ae8 <state_machine+0x2ac>)
 8001928:	2202      	movs	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
				need_out = 1;
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <state_machine+0x2b0>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
				state_time = tick_fun();
 8001932:	f009 fa7f 	bl	800ae34 <xTaskGetTickCount>
 8001936:	4603      	mov	r3, r0
 8001938:	4a6d      	ldr	r2, [pc, #436]	; (8001af0 <state_machine+0x2b4>)
 800193a:	6013      	str	r3, [r2, #0]
			}

			check_brightness();
 800193c:	4b6e      	ldr	r3, [pc, #440]	; (8001af8 <state_machine+0x2bc>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11f      	bne.n	8001984 <state_machine+0x148>
 8001944:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <state_machine+0x2bc>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01a      	beq.n	800198a <state_machine+0x14e>
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <state_machine+0x2c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d103      	bne.n	8001964 <state_machine+0x128>
 800195c:	4b67      	ldr	r3, [pc, #412]	; (8001afc <state_machine+0x2c0>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e004      	b.n	800196e <state_machine+0x132>
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <state_machine+0x2c0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a64      	ldr	r2, [pc, #400]	; (8001afc <state_machine+0x2c0>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <state_machine+0x2c0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <state_machine+0x2c4>)
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	4861      	ldr	r0, [pc, #388]	; (8001b04 <state_machine+0x2c8>)
 800197e:	f004 fe21 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8001982:	e002      	b.n	800198a <state_machine+0x14e>
 8001984:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <state_machine+0x2bc>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
			check_switch();
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f041 82a2 	bne.w	8002ed6 <state_machine+0x169a>
 8001992:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <state_machine+0x2ac>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b5b      	ldr	r3, [pc, #364]	; (8001b08 <state_machine+0x2cc>)
 800199a:	22b4      	movs	r2, #180	; 0xb4
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <state_machine+0x2b0>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
			break;
 80019a4:	f001 ba97 	b.w	8002ed6 <state_machine+0x169a>
		}
		case 2:{
			if(need_out){
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <state_machine+0x2b0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d010      	beq.n	80019d2 <state_machine+0x196>
				fill_screen(0);
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff fe83 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 80019b6:	f7ff ff11 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(115, 120, state2_string, 0x797, 2);
 80019ba:	2302      	movs	r3, #2
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	f240 7397 	movw	r3, #1943	; 0x797
 80019c2:	4a52      	ldr	r2, [pc, #328]	; (8001b0c <state_machine+0x2d0>)
 80019c4:	2178      	movs	r1, #120	; 0x78
 80019c6:	2073      	movs	r0, #115	; 0x73
 80019c8:	f7ff fe4f 	bl	800166a <print_string_scaled_y>
				need_out = 0;
 80019cc:	4b47      	ldr	r3, [pc, #284]	; (8001aec <state_machine+0x2b0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
			}


			if(tick_fun() - state_time >= 1000){
 80019d2:	f009 fa2f 	bl	800ae34 <xTaskGetTickCount>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b45      	ldr	r3, [pc, #276]	; (8001af0 <state_machine+0x2b4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019e2:	d308      	bcc.n	80019f6 <state_machine+0x1ba>
				system_state = 3;
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <state_machine+0x2ac>)
 80019e6:	2203      	movs	r2, #3
 80019e8:	601a      	str	r2, [r3, #0]
				need_out = 1;
 80019ea:	4b40      	ldr	r3, [pc, #256]	; (8001aec <state_machine+0x2b0>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

				state_time = 0;
 80019f0:	4b3f      	ldr	r3, [pc, #252]	; (8001af0 <state_machine+0x2b4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 80019f6:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <state_machine+0x2bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11f      	bne.n	8001a3e <state_machine+0x202>
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <state_machine+0x2bc>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01a      	beq.n	8001a44 <state_machine+0x208>
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <state_machine+0x2c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d103      	bne.n	8001a1e <state_machine+0x1e2>
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <state_machine+0x2c0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e004      	b.n	8001a28 <state_machine+0x1ec>
 8001a1e:	4b37      	ldr	r3, [pc, #220]	; (8001afc <state_machine+0x2c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a35      	ldr	r2, [pc, #212]	; (8001afc <state_machine+0x2c0>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b34      	ldr	r3, [pc, #208]	; (8001afc <state_machine+0x2c0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a34      	ldr	r2, [pc, #208]	; (8001b00 <state_machine+0x2c4>)
 8001a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4833      	ldr	r0, [pc, #204]	; (8001b04 <state_machine+0x2c8>)
 8001a38:	f004 fdc4 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8001a3c:	e002      	b.n	8001a44 <state_machine+0x208>
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	; (8001af8 <state_machine+0x2bc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
			check_switch();
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f041 8247 	bne.w	8002eda <state_machine+0x169e>
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <state_machine+0x2ac>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <state_machine+0x2cc>)
 8001a54:	22b4      	movs	r2, #180	; 0xb4
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <state_machine+0x2b0>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
			break;
 8001a5e:	f001 ba3c 	b.w	8002eda <state_machine+0x169e>
		}
		case 3:{
			if(need_out){
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <state_machine+0x2b0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d010      	beq.n	8001a8c <state_machine+0x250>
				fill_screen(0);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fe26 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 8001a70:	f7ff feb4 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(90, 120, state3_string, 0x797, 2);
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f240 7397 	movw	r3, #1943	; 0x797
 8001a7c:	4a24      	ldr	r2, [pc, #144]	; (8001b10 <state_machine+0x2d4>)
 8001a7e:	2178      	movs	r1, #120	; 0x78
 8001a80:	205a      	movs	r0, #90	; 0x5a
 8001a82:	f7ff fdf2 	bl	800166a <print_string_scaled_y>
				need_out = 0;
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <state_machine+0x2b0>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_TEST){
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <state_machine+0x272>
				state_progress = 0;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <state_machine+0x2d8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <state_machine+0x2b4>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
				system_state = 4;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <state_machine+0x2ac>)
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <state_machine+0x2b0>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <state_machine+0x2bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d140      	bne.n	8001b38 <state_machine+0x2fc>
 8001ab6:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <state_machine+0x2bc>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03b      	beq.n	8001b3e <state_machine+0x302>
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <state_machine+0x2c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d124      	bne.n	8001b18 <state_machine+0x2dc>
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <state_machine+0x2c0>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e025      	b.n	8001b22 <state_machine+0x2e6>
 8001ad6:	bf00      	nop
 8001ad8:	20001c50 	.word	0x20001c50
 8001adc:	20001c68 	.word	0x20001c68
 8001ae0:	20001c54 	.word	0x20001c54
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20041870 	.word	0x20041870
 8001aec:	20001a24 	.word	0x20001a24
 8001af0:	20041b40 	.word	0x20041b40
 8001af4:	20001814 	.word	0x20001814
 8001af8:	2004186c 	.word	0x2004186c
 8001afc:	20001804 	.word	0x20001804
 8001b00:	20001808 	.word	0x20001808
 8001b04:	20041a94 	.word	0x20041a94
 8001b08:	20001a28 	.word	0x20001a28
 8001b0c:	20001828 	.word	0x20001828
 8001b10:	20001840 	.word	0x20001840
 8001b14:	20041874 	.word	0x20041874
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <state_machine+0x558>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	4a9d      	ldr	r2, [pc, #628]	; (8001d94 <state_machine+0x558>)
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	4b9c      	ldr	r3, [pc, #624]	; (8001d94 <state_machine+0x558>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a9c      	ldr	r2, [pc, #624]	; (8001d98 <state_machine+0x55c>)
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	489a      	ldr	r0, [pc, #616]	; (8001d9c <state_machine+0x560>)
 8001b32:	f004 fd47 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8001b36:	e002      	b.n	8001b3e <state_machine+0x302>
 8001b38:	4b99      	ldr	r3, [pc, #612]	; (8001da0 <state_machine+0x564>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
			check_switch();
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f041 81cc 	bne.w	8002ede <state_machine+0x16a2>
 8001b46:	4b97      	ldr	r3, [pc, #604]	; (8001da4 <state_machine+0x568>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	4b96      	ldr	r3, [pc, #600]	; (8001da8 <state_machine+0x56c>)
 8001b4e:	22b4      	movs	r2, #180	; 0xb4
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	4b96      	ldr	r3, [pc, #600]	; (8001dac <state_machine+0x570>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
			break;
 8001b58:	f001 b9c1 	b.w	8002ede <state_machine+0x16a2>
		}
		case 4:{
			if(need_out){
 8001b5c:	4b93      	ldr	r3, [pc, #588]	; (8001dac <state_machine+0x570>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d01a      	beq.n	8001b9a <state_machine+0x35e>
				fill_screen(0);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff fda9 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 8001b6a:	f7ff fe37 	bl	80017dc <print_fat_rectangle>
				print_string_scaled(185, 105, state4_string, 0x797, 2);
 8001b6e:	2302      	movs	r3, #2
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f240 7397 	movw	r3, #1943	; 0x797
 8001b76:	4a8e      	ldr	r2, [pc, #568]	; (8001db0 <state_machine+0x574>)
 8001b78:	2169      	movs	r1, #105	; 0x69
 8001b7a:	20b9      	movs	r0, #185	; 0xb9
 8001b7c:	f7ff fd46 	bl	800160c <print_string_scaled>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001b80:	f240 7397 	movw	r3, #1943	; 0x797
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	230a      	movs	r3, #10
 8001b88:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001b8c:	2196      	movs	r1, #150	; 0x96
 8001b8e:	2064      	movs	r0, #100	; 0x64
 8001b90:	f7ff fa14 	bl	8000fbc <print_rectangle_empty>
				need_out = 0;
 8001b94:	4b85      	ldr	r3, [pc, #532]	; (8001dac <state_machine+0x570>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
			}
			if(!state_time){state_time = tick_fun();}else{
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <state_machine+0x578>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d105      	bne.n	8001bae <state_machine+0x372>
 8001ba2:	f009 f947 	bl	800ae34 <xTaskGetTickCount>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a82      	ldr	r2, [pc, #520]	; (8001db4 <state_machine+0x578>)
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e010      	b.n	8001bd0 <state_machine+0x394>
				if(tick_fun() - state_time >= 300){
 8001bae:	f009 f941 	bl	800ae34 <xTaskGetTickCount>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <state_machine+0x578>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001bbe:	d307      	bcc.n	8001bd0 <state_machine+0x394>
					state_time = 0;
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <state_machine+0x578>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <state_machine+0x57c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	330a      	adds	r3, #10
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <state_machine+0x57c>)
 8001bce:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001bd0:	4b79      	ldr	r3, [pc, #484]	; (8001db8 <state_machine+0x57c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d012      	beq.n	8001bfe <state_machine+0x3c2>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001bd8:	4b77      	ldr	r3, [pc, #476]	; (8001db8 <state_machine+0x57c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <state_machine+0x580>)
 8001bde:	fba2 2303 	umull	r2, r3, r2, r3
 8001be2:	08da      	lsrs	r2, r3, #3
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	461a      	mov	r2, r3
 8001bee:	f240 7397 	movw	r3, #1943	; 0x797
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	2196      	movs	r1, #150	; 0x96
 8001bf8:	2064      	movs	r0, #100	; 0x64
 8001bfa:	f7ff f9ab 	bl	8000f54 <print_rectangle>
			}

			if(state_progress == 100){
 8001bfe:	4b6e      	ldr	r3, [pc, #440]	; (8001db8 <state_machine+0x57c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b64      	cmp	r3, #100	; 0x64
 8001c04:	d10b      	bne.n	8001c1e <state_machine+0x3e2>
				state_progress = 0;
 8001c06:	4b6c      	ldr	r3, [pc, #432]	; (8001db8 <state_machine+0x57c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001c0c:	4b69      	ldr	r3, [pc, #420]	; (8001db4 <state_machine+0x578>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001c12:	4b66      	ldr	r3, [pc, #408]	; (8001dac <state_machine+0x570>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
				system_state = 5;
 8001c18:	4b62      	ldr	r3, [pc, #392]	; (8001da4 <state_machine+0x568>)
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001c1e:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <state_machine+0x564>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11f      	bne.n	8001c66 <state_machine+0x42a>
 8001c26:	4b5e      	ldr	r3, [pc, #376]	; (8001da0 <state_machine+0x564>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d01a      	beq.n	8001c6c <state_machine+0x430>
 8001c36:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <state_machine+0x558>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d103      	bne.n	8001c46 <state_machine+0x40a>
 8001c3e:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <state_machine+0x558>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e004      	b.n	8001c50 <state_machine+0x414>
 8001c46:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <state_machine+0x558>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <state_machine+0x558>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b50      	ldr	r3, [pc, #320]	; (8001d94 <state_machine+0x558>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a50      	ldr	r2, [pc, #320]	; (8001d98 <state_machine+0x55c>)
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	484f      	ldr	r0, [pc, #316]	; (8001d9c <state_machine+0x560>)
 8001c60:	f004 fcb0 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8001c64:	e002      	b.n	8001c6c <state_machine+0x430>
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <state_machine+0x564>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
			check_switch();
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f041 8137 	bne.w	8002ee2 <state_machine+0x16a6>
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <state_machine+0x568>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <state_machine+0x56c>)
 8001c7c:	22b4      	movs	r2, #180	; 0xb4
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b4a      	ldr	r3, [pc, #296]	; (8001dac <state_machine+0x570>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
			break;
 8001c86:	f001 b92c 	b.w	8002ee2 <state_machine+0x16a6>
		}
		case 5:{
			if(need_out){
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <state_machine+0x570>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d010      	beq.n	8001cb4 <state_machine+0x478>
				fill_screen(0);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fd12 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 8001c98:	f7ff fda0 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(120, 120, state5_string, 0x797, 2);
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f240 7397 	movw	r3, #1943	; 0x797
 8001ca4:	4a46      	ldr	r2, [pc, #280]	; (8001dc0 <state_machine+0x584>)
 8001ca6:	2178      	movs	r1, #120	; 0x78
 8001ca8:	2078      	movs	r0, #120	; 0x78
 8001caa:	f7ff fcde 	bl	800166a <print_string_scaled_y>
				need_out = 0;
 8001cae:	4b3f      	ldr	r3, [pc, #252]	; (8001dac <state_machine+0x570>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
			}

			if(kbd_st & BUTTON_CALIBRATION){
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <state_machine+0x49a>
				system_state = 6;
 8001cbe:	4b39      	ldr	r3, [pc, #228]	; (8001da4 <state_machine+0x568>)
 8001cc0:	2206      	movs	r2, #6
 8001cc2:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001cc4:	4b39      	ldr	r3, [pc, #228]	; (8001dac <state_machine+0x570>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001cca:	4b3a      	ldr	r3, [pc, #232]	; (8001db4 <state_machine+0x578>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
				state_progress = 0;
 8001cd0:	4b39      	ldr	r3, [pc, #228]	; (8001db8 <state_machine+0x57c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001cd6:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <state_machine+0x564>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d11f      	bne.n	8001d1e <state_machine+0x4e2>
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <state_machine+0x564>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d01a      	beq.n	8001d24 <state_machine+0x4e8>
 8001cee:	4b29      	ldr	r3, [pc, #164]	; (8001d94 <state_machine+0x558>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d103      	bne.n	8001cfe <state_machine+0x4c2>
 8001cf6:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <state_machine+0x558>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e004      	b.n	8001d08 <state_machine+0x4cc>
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <state_machine+0x558>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <state_machine+0x558>)
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <state_machine+0x558>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a22      	ldr	r2, [pc, #136]	; (8001d98 <state_machine+0x55c>)
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	2200      	movs	r2, #0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4821      	ldr	r0, [pc, #132]	; (8001d9c <state_machine+0x560>)
 8001d18:	f004 fc54 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8001d1c:	e002      	b.n	8001d24 <state_machine+0x4e8>
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <state_machine+0x564>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
			check_switch();
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f041 80dd 	bne.w	8002ee6 <state_machine+0x16aa>
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <state_machine+0x568>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <state_machine+0x56c>)
 8001d34:	22b4      	movs	r2, #180	; 0xb4
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <state_machine+0x570>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
			break;
 8001d3e:	f001 b8d2 	b.w	8002ee6 <state_machine+0x16aa>
		}
		case 6:{
			if(need_out){
 8001d42:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <state_machine+0x570>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01a      	beq.n	8001d80 <state_machine+0x544>
				fill_screen(0);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fcb6 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 8001d50:	f7ff fd44 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(180, 100, state6_string, 0x797, 2);
 8001d54:	2302      	movs	r3, #2
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f240 7397 	movw	r3, #1943	; 0x797
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <state_machine+0x588>)
 8001d5e:	2164      	movs	r1, #100	; 0x64
 8001d60:	20b4      	movs	r0, #180	; 0xb4
 8001d62:	f7ff fc82 	bl	800166a <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8001d66:	f240 7397 	movw	r3, #1943	; 0x797
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001d72:	2196      	movs	r1, #150	; 0x96
 8001d74:	2064      	movs	r0, #100	; 0x64
 8001d76:	f7ff f921 	bl	8000fbc <print_rectangle_empty>
				need_out = 0;
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <state_machine+0x570>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = tick_fun();}else{
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <state_machine+0x578>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d11f      	bne.n	8001dc8 <state_machine+0x58c>
 8001d88:	f009 f854 	bl	800ae34 <xTaskGetTickCount>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <state_machine+0x578>)
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e02a      	b.n	8001dea <state_machine+0x5ae>
 8001d94:	20001804 	.word	0x20001804
 8001d98:	20001808 	.word	0x20001808
 8001d9c:	20041a94 	.word	0x20041a94
 8001da0:	2004186c 	.word	0x2004186c
 8001da4:	20041870 	.word	0x20041870
 8001da8:	20001a28 	.word	0x20001a28
 8001dac:	20001a24 	.word	0x20001a24
 8001db0:	2000185c 	.word	0x2000185c
 8001db4:	20041b40 	.word	0x20041b40
 8001db8:	20041874 	.word	0x20041874
 8001dbc:	cccccccd 	.word	0xcccccccd
 8001dc0:	20001864 	.word	0x20001864
 8001dc4:	2000187c 	.word	0x2000187c
				if(tick_fun() - state_time >= 300){
 8001dc8:	f009 f834 	bl	800ae34 <xTaskGetTickCount>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b99      	ldr	r3, [pc, #612]	; (8002034 <state_machine+0x7f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001dd8:	d307      	bcc.n	8001dea <state_machine+0x5ae>
					state_time = 0;
 8001dda:	4b96      	ldr	r3, [pc, #600]	; (8002034 <state_machine+0x7f8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 8001de0:	4b95      	ldr	r3, [pc, #596]	; (8002038 <state_machine+0x7fc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	330a      	adds	r3, #10
 8001de6:	4a94      	ldr	r2, [pc, #592]	; (8002038 <state_machine+0x7fc>)
 8001de8:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 8001dea:	4b93      	ldr	r3, [pc, #588]	; (8002038 <state_machine+0x7fc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d012      	beq.n	8001e18 <state_machine+0x5dc>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 8001df2:	4b91      	ldr	r3, [pc, #580]	; (8002038 <state_machine+0x7fc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a91      	ldr	r2, [pc, #580]	; (800203c <state_machine+0x800>)
 8001df8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfc:	08da      	lsrs	r2, r3, #3
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	f240 7397 	movw	r3, #1943	; 0x797
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	230a      	movs	r3, #10
 8001e10:	2196      	movs	r1, #150	; 0x96
 8001e12:	2064      	movs	r0, #100	; 0x64
 8001e14:	f7ff f89e 	bl	8000f54 <print_rectangle>
			}

			if(state_progress == 100){
 8001e18:	4b87      	ldr	r3, [pc, #540]	; (8002038 <state_machine+0x7fc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d10b      	bne.n	8001e38 <state_machine+0x5fc>
				state_progress = 0;
 8001e20:	4b85      	ldr	r3, [pc, #532]	; (8002038 <state_machine+0x7fc>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8001e26:	4b83      	ldr	r3, [pc, #524]	; (8002034 <state_machine+0x7f8>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001e2c:	4b84      	ldr	r3, [pc, #528]	; (8002040 <state_machine+0x804>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
				system_state = 7;
 8001e32:	4b84      	ldr	r3, [pc, #528]	; (8002044 <state_machine+0x808>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8001e38:	4b83      	ldr	r3, [pc, #524]	; (8002048 <state_machine+0x80c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11f      	bne.n	8001e80 <state_machine+0x644>
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <state_machine+0x80c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01a      	beq.n	8001e86 <state_machine+0x64a>
 8001e50:	4b7e      	ldr	r3, [pc, #504]	; (800204c <state_machine+0x810>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d103      	bne.n	8001e60 <state_machine+0x624>
 8001e58:	4b7c      	ldr	r3, [pc, #496]	; (800204c <state_machine+0x810>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e004      	b.n	8001e6a <state_machine+0x62e>
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <state_machine+0x810>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a79      	ldr	r2, [pc, #484]	; (800204c <state_machine+0x810>)
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b78      	ldr	r3, [pc, #480]	; (800204c <state_machine+0x810>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a78      	ldr	r2, [pc, #480]	; (8002050 <state_machine+0x814>)
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	2200      	movs	r2, #0
 8001e76:	4619      	mov	r1, r3
 8001e78:	4876      	ldr	r0, [pc, #472]	; (8002054 <state_machine+0x818>)
 8001e7a:	f004 fba3 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8001e7e:	e002      	b.n	8001e86 <state_machine+0x64a>
 8001e80:	4b71      	ldr	r3, [pc, #452]	; (8002048 <state_machine+0x80c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
			check_switch();
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f041 802e 	bne.w	8002eea <state_machine+0x16ae>
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <state_machine+0x808>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b70      	ldr	r3, [pc, #448]	; (8002058 <state_machine+0x81c>)
 8001e96:	22b4      	movs	r2, #180	; 0xb4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	4b69      	ldr	r3, [pc, #420]	; (8002040 <state_machine+0x804>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]
			break;
 8001ea0:	f001 b823 	b.w	8002eea <state_machine+0x16ae>
		}
		case 7:{
			if(need_out){
 8001ea4:	4b66      	ldr	r3, [pc, #408]	; (8002040 <state_machine+0x804>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01a      	beq.n	8001ee2 <state_machine+0x6a6>
				fill_screen(0);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff fc05 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 8001eb2:	f7ff fc93 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(110, 90, state7_string, 0x797, 2);	
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	f240 7397 	movw	r3, #1943	; 0x797
 8001ebe:	4a67      	ldr	r2, [pc, #412]	; (800205c <state_machine+0x820>)
 8001ec0:	215a      	movs	r1, #90	; 0x5a
 8001ec2:	206e      	movs	r0, #110	; 0x6e
 8001ec4:	f7ff fbd1 	bl	800166a <print_string_scaled_y>
				print_number(180, 130, system_angle, 0x797, 2);
 8001ec8:	4b63      	ldr	r3, [pc, #396]	; (8002058 <state_machine+0x81c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	f240 7397 	movw	r3, #1943	; 0x797
 8001ed4:	2182      	movs	r1, #130	; 0x82
 8001ed6:	20b4      	movs	r0, #180	; 0xb4
 8001ed8:	f7ff fc0e 	bl	80016f8 <print_number>
				need_out = 0;
 8001edc:	4b58      	ldr	r3, [pc, #352]	; (8002040 <state_machine+0x804>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
			}


			if(!mem_sp_st){
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <state_machine+0x824>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <state_machine+0x6b6>
				mem_sp_st = sp_st;
 8001eea:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <state_machine+0x824>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e05d      	b.n	8001fae <state_machine+0x772>
			}else{
				if(mem_sp_st > sp_st){
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <state_machine+0x824>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d229      	bcs.n	8001f50 <state_machine+0x714>
					if(((int32_t)(system_angle - (mem_sp_st - sp_st)*2)) >= 0){
 8001efc:	4b56      	ldr	r3, [pc, #344]	; (8002058 <state_machine+0x81c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b57      	ldr	r3, [pc, #348]	; (8002060 <state_machine+0x824>)
 8001f02:	6819      	ldr	r1, [r3, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	1acb      	subs	r3, r1, r3
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	db09      	blt.n	8001f24 <state_machine+0x6e8>
						system_angle -= (mem_sp_st - sp_st)*2;
 8001f10:	4b51      	ldr	r3, [pc, #324]	; (8002058 <state_machine+0x81c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b52      	ldr	r3, [pc, #328]	; (8002060 <state_machine+0x824>)
 8001f16:	6819      	ldr	r1, [r3, #0]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	1acb      	subs	r3, r1, r3
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	4a4d      	ldr	r2, [pc, #308]	; (8002058 <state_machine+0x81c>)
 8001f22:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 100, 40, 0);
 8001f24:	2300      	movs	r3, #0
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	2328      	movs	r3, #40	; 0x28
 8001f2a:	2264      	movs	r2, #100	; 0x64
 8001f2c:	2182      	movs	r1, #130	; 0x82
 8001f2e:	20b4      	movs	r0, #180	; 0xb4
 8001f30:	f7ff f810 	bl	8000f54 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001f34:	4b48      	ldr	r3, [pc, #288]	; (8002058 <state_machine+0x81c>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2302      	movs	r3, #2
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f240 7397 	movw	r3, #1943	; 0x797
 8001f40:	2182      	movs	r1, #130	; 0x82
 8001f42:	20b4      	movs	r0, #180	; 0xb4
 8001f44:	f7ff fbd8 	bl	80016f8 <print_number>
					mem_sp_st = 0;
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <state_machine+0x824>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e02e      	b.n	8001fae <state_machine+0x772>
				}else if(mem_sp_st < sp_st){
 8001f50:	4b43      	ldr	r3, [pc, #268]	; (8002060 <state_machine+0x824>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d929      	bls.n	8001fae <state_machine+0x772>
					if(system_angle + (sp_st - mem_sp_st)*2 <= 360){
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <state_machine+0x824>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	005a      	lsls	r2, r3, #1
 8001f64:	4b3c      	ldr	r3, [pc, #240]	; (8002058 <state_machine+0x81c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001f6e:	d809      	bhi.n	8001f84 <state_machine+0x748>
						system_angle += (sp_st - mem_sp_st)*2;
 8001f70:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <state_machine+0x824>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	005a      	lsls	r2, r3, #1
 8001f7a:	4b37      	ldr	r3, [pc, #220]	; (8002058 <state_machine+0x81c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a35      	ldr	r2, [pc, #212]	; (8002058 <state_machine+0x81c>)
 8001f82:	6013      	str	r3, [r2, #0]
					}
					print_rectangle(180, 130, 20, 20, 0);
 8001f84:	2300      	movs	r3, #0
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2314      	movs	r3, #20
 8001f8a:	2214      	movs	r2, #20
 8001f8c:	2182      	movs	r1, #130	; 0x82
 8001f8e:	20b4      	movs	r0, #180	; 0xb4
 8001f90:	f7fe ffe0 	bl	8000f54 <print_rectangle>
					print_number(180, 130, system_angle, 0x797, 2);
 8001f94:	4b30      	ldr	r3, [pc, #192]	; (8002058 <state_machine+0x81c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f240 7397 	movw	r3, #1943	; 0x797
 8001fa0:	2182      	movs	r1, #130	; 0x82
 8001fa2:	20b4      	movs	r0, #180	; 0xb4
 8001fa4:	f7ff fba8 	bl	80016f8 <print_number>
					mem_sp_st = 0;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <state_machine+0x824>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
				}	
			}

			if(spb_st){
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <state_machine+0x78a>
				mem_sp_st = 0;
 8001fb4:	4b2a      	ldr	r3, [pc, #168]	; (8002060 <state_machine+0x824>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
				need_out = 1;
 8001fba:	4b21      	ldr	r3, [pc, #132]	; (8002040 <state_machine+0x804>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]
				system_state = 8;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	; (8002044 <state_machine+0x808>)
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	601a      	str	r2, [r3, #0]
			}

			check_brightness();
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <state_machine+0x80c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d11f      	bne.n	800200e <state_machine+0x7d2>
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <state_machine+0x80c>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01a      	beq.n	8002014 <state_machine+0x7d8>
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <state_machine+0x810>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d103      	bne.n	8001fee <state_machine+0x7b2>
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <state_machine+0x810>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	e004      	b.n	8001ff8 <state_machine+0x7bc>
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <state_machine+0x810>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4a15      	ldr	r2, [pc, #84]	; (800204c <state_machine+0x810>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <state_machine+0x810>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a14      	ldr	r2, [pc, #80]	; (8002050 <state_machine+0x814>)
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	4813      	ldr	r0, [pc, #76]	; (8002054 <state_machine+0x818>)
 8002008:	f004 fadc 	bl	80065c4 <HAL_LTDC_SetAlpha>
 800200c:	e002      	b.n	8002014 <state_machine+0x7d8>
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <state_machine+0x80c>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
			check_switch();
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	f040 8769 	bne.w	8002eee <state_machine+0x16b2>
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <state_machine+0x808>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <state_machine+0x81c>)
 8002024:	22b4      	movs	r2, #180	; 0xb4
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <state_machine+0x804>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]
			break;
 800202e:	f000 bf5e 	b.w	8002eee <state_machine+0x16b2>
 8002032:	bf00      	nop
 8002034:	20041b40 	.word	0x20041b40
 8002038:	20041874 	.word	0x20041874
 800203c:	cccccccd 	.word	0xcccccccd
 8002040:	20001a24 	.word	0x20001a24
 8002044:	20041870 	.word	0x20041870
 8002048:	2004186c 	.word	0x2004186c
 800204c:	20001804 	.word	0x20001804
 8002050:	20001808 	.word	0x20001808
 8002054:	20041a94 	.word	0x20041a94
 8002058:	20001a28 	.word	0x20001a28
 800205c:	20001888 	.word	0x20001888
 8002060:	20041878 	.word	0x20041878
		}
		case 8:{
			if(need_out){
 8002064:	4ba0      	ldr	r3, [pc, #640]	; (80022e8 <state_machine+0xaac>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01a      	beq.n	80020a2 <state_machine+0x866>
				fill_screen(0);
 800206c:	2000      	movs	r0, #0
 800206e:	f7ff fb25 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 8002072:	f7ff fbb3 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(180, 100, state8_string, 0x797, 2);
 8002076:	2302      	movs	r3, #2
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f240 7397 	movw	r3, #1943	; 0x797
 800207e:	4a9b      	ldr	r2, [pc, #620]	; (80022ec <state_machine+0xab0>)
 8002080:	2164      	movs	r1, #100	; 0x64
 8002082:	20b4      	movs	r0, #180	; 0xb4
 8002084:	f7ff faf1 	bl	800166a <print_string_scaled_y>
				print_rectangle_empty(100, 150, 280, 10, 0x797);
 8002088:	f240 7397 	movw	r3, #1943	; 0x797
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	230a      	movs	r3, #10
 8002090:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002094:	2196      	movs	r1, #150	; 0x96
 8002096:	2064      	movs	r0, #100	; 0x64
 8002098:	f7fe ff90 	bl	8000fbc <print_rectangle_empty>
				need_out = 0;
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <state_machine+0xaac>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

			}

			if(!state_time){state_time = tick_fun();}else{
 80020a2:	4b93      	ldr	r3, [pc, #588]	; (80022f0 <state_machine+0xab4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d105      	bne.n	80020b6 <state_machine+0x87a>
 80020aa:	f008 fec3 	bl	800ae34 <xTaskGetTickCount>
 80020ae:	4603      	mov	r3, r0
 80020b0:	4a8f      	ldr	r2, [pc, #572]	; (80022f0 <state_machine+0xab4>)
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e010      	b.n	80020d8 <state_machine+0x89c>
				if(tick_fun() - state_time >= 300){
 80020b6:	f008 febd 	bl	800ae34 <xTaskGetTickCount>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b8c      	ldr	r3, [pc, #560]	; (80022f0 <state_machine+0xab4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020c6:	d307      	bcc.n	80020d8 <state_machine+0x89c>
					state_time = 0;
 80020c8:	4b89      	ldr	r3, [pc, #548]	; (80022f0 <state_machine+0xab4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
					state_progress += 10;
 80020ce:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <state_machine+0xab8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330a      	adds	r3, #10
 80020d4:	4a87      	ldr	r2, [pc, #540]	; (80022f4 <state_machine+0xab8>)
 80020d6:	6013      	str	r3, [r2, #0]
				}
			}
			if(state_progress){
 80020d8:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <state_machine+0xab8>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d012      	beq.n	8002106 <state_machine+0x8ca>
				print_rectangle(100, 150, (280 / 10) * (state_progress/10), 10, 0x797);
 80020e0:	4b84      	ldr	r3, [pc, #528]	; (80022f4 <state_machine+0xab8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a84      	ldr	r2, [pc, #528]	; (80022f8 <state_machine+0xabc>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	08da      	lsrs	r2, r3, #3
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	461a      	mov	r2, r3
 80020f6:	f240 7397 	movw	r3, #1943	; 0x797
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	230a      	movs	r3, #10
 80020fe:	2196      	movs	r1, #150	; 0x96
 8002100:	2064      	movs	r0, #100	; 0x64
 8002102:	f7fe ff27 	bl	8000f54 <print_rectangle>
			}

			if(state_progress == 100){
 8002106:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <state_machine+0xab8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d10b      	bne.n	8002126 <state_machine+0x8ea>
				state_progress = 0;
 800210e:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <state_machine+0xab8>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
				state_time = 0;
 8002114:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <state_machine+0xab4>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
				need_out = 1;
 800211a:	4b73      	ldr	r3, [pc, #460]	; (80022e8 <state_machine+0xaac>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]
				system_state = 9;
 8002120:	4b76      	ldr	r3, [pc, #472]	; (80022fc <state_machine+0xac0>)
 8002122:	2209      	movs	r2, #9
 8002124:	601a      	str	r2, [r3, #0]
			}			

			check_brightness();
 8002126:	4b76      	ldr	r3, [pc, #472]	; (8002300 <state_machine+0xac4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d11f      	bne.n	800216e <state_machine+0x932>
 800212e:	4b74      	ldr	r3, [pc, #464]	; (8002300 <state_machine+0xac4>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b00      	cmp	r3, #0
 800213c:	d01a      	beq.n	8002174 <state_machine+0x938>
 800213e:	4b71      	ldr	r3, [pc, #452]	; (8002304 <state_machine+0xac8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d103      	bne.n	800214e <state_machine+0x912>
 8002146:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <state_machine+0xac8>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e004      	b.n	8002158 <state_machine+0x91c>
 800214e:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <state_machine+0xac8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3301      	adds	r3, #1
 8002154:	4a6b      	ldr	r2, [pc, #428]	; (8002304 <state_machine+0xac8>)
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <state_machine+0xac8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6a      	ldr	r2, [pc, #424]	; (8002308 <state_machine+0xacc>)
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	2200      	movs	r2, #0
 8002164:	4619      	mov	r1, r3
 8002166:	4869      	ldr	r0, [pc, #420]	; (800230c <state_machine+0xad0>)
 8002168:	f004 fa2c 	bl	80065c4 <HAL_LTDC_SetAlpha>
 800216c:	e002      	b.n	8002174 <state_machine+0x938>
 800216e:	4b64      	ldr	r3, [pc, #400]	; (8002300 <state_machine+0xac4>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
			check_switch();
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 86bb 	bne.w	8002ef2 <state_machine+0x16b6>
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <state_machine+0xac0>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <state_machine+0xad4>)
 8002184:	22b4      	movs	r2, #180	; 0xb4
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	4b57      	ldr	r3, [pc, #348]	; (80022e8 <state_machine+0xaac>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
			break;
 800218e:	f000 beb0 	b.w	8002ef2 <state_machine+0x16b6>
		}
		case 9:{
			if(need_out){
 8002192:	4b55      	ldr	r3, [pc, #340]	; (80022e8 <state_machine+0xaac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d010      	beq.n	80021bc <state_machine+0x980>
				fill_screen(0);
 800219a:	2000      	movs	r0, #0
 800219c:	f7ff fa8e 	bl	80016bc <fill_screen>
				print_fat_rectangle();
 80021a0:	f7ff fb1c 	bl	80017dc <print_fat_rectangle>
				print_string_scaled_y(165, 105, state9_string, 0x797, 2);
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f240 7397 	movw	r3, #1943	; 0x797
 80021ac:	4a59      	ldr	r2, [pc, #356]	; (8002314 <state_machine+0xad8>)
 80021ae:	2169      	movs	r1, #105	; 0x69
 80021b0:	20a5      	movs	r0, #165	; 0xa5
 80021b2:	f7ff fa5a 	bl	800166a <print_string_scaled_y>
				need_out = 0;
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <state_machine+0xaac>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <state_machine+0x998>
 80021c6:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <state_machine+0xaac>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <state_machine+0xac0>)
 80021ce:	220a      	movs	r2, #10
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e052      	b.n	800227a <state_machine+0xa3e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d006      	beq.n	80021ec <state_machine+0x9b0>
 80021de:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <state_machine+0xaac>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	4b45      	ldr	r3, [pc, #276]	; (80022fc <state_machine+0xac0>)
 80021e6:	220b      	movs	r2, #11
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e046      	b.n	800227a <state_machine+0xa3e>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <state_machine+0x9c8>
 80021f6:	4b3c      	ldr	r3, [pc, #240]	; (80022e8 <state_machine+0xaac>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <state_machine+0xac0>)
 80021fe:	220c      	movs	r2, #12
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e03a      	b.n	800227a <state_machine+0xa3e>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d006      	beq.n	800221c <state_machine+0x9e0>
 800220e:	4b36      	ldr	r3, [pc, #216]	; (80022e8 <state_machine+0xaac>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <state_machine+0xac0>)
 8002216:	220d      	movs	r2, #13
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e02e      	b.n	800227a <state_machine+0xa3e>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <state_machine+0x9f8>
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <state_machine+0xaac>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <state_machine+0xac0>)
 800222e:	220e      	movs	r2, #14
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e022      	b.n	800227a <state_machine+0xa3e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0320 	and.w	r3, r3, #32
 800223a:	2b00      	cmp	r3, #0
 800223c:	d006      	beq.n	800224c <state_machine+0xa10>
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <state_machine+0xaac>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <state_machine+0xac0>)
 8002246:	220f      	movs	r2, #15
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e016      	b.n	800227a <state_machine+0xa3e>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d006      	beq.n	8002264 <state_machine+0xa28>
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <state_machine+0xaac>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <state_machine+0xac0>)
 800225e:	2210      	movs	r2, #16
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e00a      	b.n	800227a <state_machine+0xa3e>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <state_machine+0xa3e>
 800226e:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <state_machine+0xaac>)
 8002270:	2201      	movs	r2, #1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <state_machine+0xac0>)
 8002276:	2211      	movs	r2, #17
 8002278:	601a      	str	r2, [r3, #0]

			check_brightness();
 800227a:	4b21      	ldr	r3, [pc, #132]	; (8002300 <state_machine+0xac4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11f      	bne.n	80022c2 <state_machine+0xa86>
 8002282:	4b1f      	ldr	r3, [pc, #124]	; (8002300 <state_machine+0xac4>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d01a      	beq.n	80022c8 <state_machine+0xa8c>
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <state_machine+0xac8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d103      	bne.n	80022a2 <state_machine+0xa66>
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <state_machine+0xac8>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	e004      	b.n	80022ac <state_machine+0xa70>
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <state_machine+0xac8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a16      	ldr	r2, [pc, #88]	; (8002304 <state_machine+0xac8>)
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <state_machine+0xac8>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a15      	ldr	r2, [pc, #84]	; (8002308 <state_machine+0xacc>)
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	2200      	movs	r2, #0
 80022b8:	4619      	mov	r1, r3
 80022ba:	4814      	ldr	r0, [pc, #80]	; (800230c <state_machine+0xad0>)
 80022bc:	f004 f982 	bl	80065c4 <HAL_LTDC_SetAlpha>
 80022c0:	e002      	b.n	80022c8 <state_machine+0xa8c>
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <state_machine+0xac4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
			check_switch();
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 8613 	bne.w	8002ef6 <state_machine+0x16ba>
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <state_machine+0xac0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <state_machine+0xad4>)
 80022d8:	22b4      	movs	r2, #180	; 0xb4
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <state_machine+0xaac>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
			break;
 80022e2:	f000 be08 	b.w	8002ef6 <state_machine+0x16ba>
 80022e6:	bf00      	nop
 80022e8:	20001a24 	.word	0x20001a24
 80022ec:	200018a0 	.word	0x200018a0
 80022f0:	20041b40 	.word	0x20041b40
 80022f4:	20041874 	.word	0x20041874
 80022f8:	cccccccd 	.word	0xcccccccd
 80022fc:	20041870 	.word	0x20041870
 8002300:	2004186c 	.word	0x2004186c
 8002304:	20001804 	.word	0x20001804
 8002308:	20001808 	.word	0x20001808
 800230c:	20041a94 	.word	0x20041a94
 8002310:	20001a28 	.word	0x20001a28
 8002314:	200018ac 	.word	0x200018ac
		}
		case 10:{
			if(need_out){
 8002318:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <state_machine+0xd18>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d015      	beq.n	800234c <state_machine+0xb10>
				fill_screen(0);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff f9cb 	bl	80016bc <fill_screen>
				print_string(10, 40, state10_string, 0x797);
 8002326:	f240 7397 	movw	r3, #1943	; 0x797
 800232a:	4a8b      	ldr	r2, [pc, #556]	; (8002558 <state_machine+0xd1c>)
 800232c:	2128      	movs	r1, #40	; 0x28
 800232e:	200a      	movs	r0, #10
 8002330:	f7ff f946 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state10_string_2, 0x797, 3);
 8002334:	2303      	movs	r3, #3
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f240 7397 	movw	r3, #1943	; 0x797
 800233c:	4a87      	ldr	r2, [pc, #540]	; (800255c <state_machine+0xd20>)
 800233e:	2164      	movs	r1, #100	; 0x64
 8002340:	200a      	movs	r0, #10
 8002342:	f7ff f963 	bl	800160c <print_string_scaled>
				need_out = 0;
 8002346:	4b83      	ldr	r3, [pc, #524]	; (8002554 <state_machine+0xd18>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
			}

			check_data();
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <state_machine+0xb28>
 8002356:	4b7f      	ldr	r3, [pc, #508]	; (8002554 <state_machine+0xd18>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4b80      	ldr	r3, [pc, #512]	; (8002560 <state_machine+0xd24>)
 800235e:	220a      	movs	r2, #10
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e052      	b.n	800240a <state_machine+0xbce>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <state_machine+0xb40>
 800236e:	4b79      	ldr	r3, [pc, #484]	; (8002554 <state_machine+0xd18>)
 8002370:	2201      	movs	r2, #1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	4b7a      	ldr	r3, [pc, #488]	; (8002560 <state_machine+0xd24>)
 8002376:	220b      	movs	r2, #11
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e046      	b.n	800240a <state_machine+0xbce>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b00      	cmp	r3, #0
 8002384:	d006      	beq.n	8002394 <state_machine+0xb58>
 8002386:	4b73      	ldr	r3, [pc, #460]	; (8002554 <state_machine+0xd18>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	4b74      	ldr	r3, [pc, #464]	; (8002560 <state_machine+0xd24>)
 800238e:	220c      	movs	r2, #12
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e03a      	b.n	800240a <state_machine+0xbce>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d006      	beq.n	80023ac <state_machine+0xb70>
 800239e:	4b6d      	ldr	r3, [pc, #436]	; (8002554 <state_machine+0xd18>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <state_machine+0xd24>)
 80023a6:	220d      	movs	r2, #13
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e02e      	b.n	800240a <state_machine+0xbce>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d006      	beq.n	80023c4 <state_machine+0xb88>
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <state_machine+0xd18>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <state_machine+0xd24>)
 80023be:	220e      	movs	r2, #14
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e022      	b.n	800240a <state_machine+0xbce>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <state_machine+0xba0>
 80023ce:	4b61      	ldr	r3, [pc, #388]	; (8002554 <state_machine+0xd18>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	4b62      	ldr	r3, [pc, #392]	; (8002560 <state_machine+0xd24>)
 80023d6:	220f      	movs	r2, #15
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e016      	b.n	800240a <state_machine+0xbce>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <state_machine+0xbb8>
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <state_machine+0xd18>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	4b5c      	ldr	r3, [pc, #368]	; (8002560 <state_machine+0xd24>)
 80023ee:	2210      	movs	r2, #16
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e00a      	b.n	800240a <state_machine+0xbce>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d005      	beq.n	800240a <state_machine+0xbce>
 80023fe:	4b55      	ldr	r3, [pc, #340]	; (8002554 <state_machine+0xd18>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <state_machine+0xd24>)
 8002406:	2211      	movs	r2, #17
 8002408:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <state_machine+0xd28>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11f      	bne.n	8002452 <state_machine+0xc16>
 8002412:	4b54      	ldr	r3, [pc, #336]	; (8002564 <state_machine+0xd28>)
 8002414:	2201      	movs	r2, #1
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01a      	beq.n	8002458 <state_machine+0xc1c>
 8002422:	4b51      	ldr	r3, [pc, #324]	; (8002568 <state_machine+0xd2c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b02      	cmp	r3, #2
 8002428:	d103      	bne.n	8002432 <state_machine+0xbf6>
 800242a:	4b4f      	ldr	r3, [pc, #316]	; (8002568 <state_machine+0xd2c>)
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e004      	b.n	800243c <state_machine+0xc00>
 8002432:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <state_machine+0xd2c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	3301      	adds	r3, #1
 8002438:	4a4b      	ldr	r2, [pc, #300]	; (8002568 <state_machine+0xd2c>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <state_machine+0xd2c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4a      	ldr	r2, [pc, #296]	; (800256c <state_machine+0xd30>)
 8002442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002446:	2200      	movs	r2, #0
 8002448:	4619      	mov	r1, r3
 800244a:	4849      	ldr	r0, [pc, #292]	; (8002570 <state_machine+0xd34>)
 800244c:	f004 f8ba 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8002450:	e002      	b.n	8002458 <state_machine+0xc1c>
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <state_machine+0xd28>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
			check_switch();
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f040 854d 	bne.w	8002efa <state_machine+0x16be>
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <state_machine+0xd24>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <state_machine+0xd38>)
 8002468:	22b4      	movs	r2, #180	; 0xb4
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <state_machine+0xd18>)
 800246e:	2201      	movs	r2, #1
 8002470:	601a      	str	r2, [r3, #0]
			break;			
 8002472:	f000 bd42 	b.w	8002efa <state_machine+0x16be>
		}
		case 11:{
			if(need_out){
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <state_machine+0xd18>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d015      	beq.n	80024aa <state_machine+0xc6e>
				fill_screen(0);
 800247e:	2000      	movs	r0, #0
 8002480:	f7ff f91c 	bl	80016bc <fill_screen>
				print_string(10, 40, state11_string, 0x797);
 8002484:	f240 7397 	movw	r3, #1943	; 0x797
 8002488:	4a3b      	ldr	r2, [pc, #236]	; (8002578 <state_machine+0xd3c>)
 800248a:	2128      	movs	r1, #40	; 0x28
 800248c:	200a      	movs	r0, #10
 800248e:	f7ff f897 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state11_string_2, 0x797, 3);
 8002492:	2303      	movs	r3, #3
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	f240 7397 	movw	r3, #1943	; 0x797
 800249a:	4a38      	ldr	r2, [pc, #224]	; (800257c <state_machine+0xd40>)
 800249c:	2164      	movs	r1, #100	; 0x64
 800249e:	200a      	movs	r0, #10
 80024a0:	f7ff f8b4 	bl	800160c <print_string_scaled>
				need_out = 0;
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <state_machine+0xd18>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]
			}			

			check_data();
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <state_machine+0xc86>
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <state_machine+0xd18>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	4b29      	ldr	r3, [pc, #164]	; (8002560 <state_machine+0xd24>)
 80024bc:	220a      	movs	r2, #10
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e069      	b.n	8002596 <state_machine+0xd5a>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0310 	and.w	r3, r3, #16
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d006      	beq.n	80024da <state_machine+0xc9e>
 80024cc:	4b21      	ldr	r3, [pc, #132]	; (8002554 <state_machine+0xd18>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <state_machine+0xd24>)
 80024d4:	220b      	movs	r2, #11
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e05d      	b.n	8002596 <state_machine+0xd5a>
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <state_machine+0xcb6>
 80024e4:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <state_machine+0xd18>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <state_machine+0xd24>)
 80024ec:	220c      	movs	r2, #12
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e051      	b.n	8002596 <state_machine+0xd5a>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d006      	beq.n	800250a <state_machine+0xcce>
 80024fc:	4b15      	ldr	r3, [pc, #84]	; (8002554 <state_machine+0xd18>)
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4b17      	ldr	r3, [pc, #92]	; (8002560 <state_machine+0xd24>)
 8002504:	220d      	movs	r2, #13
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e045      	b.n	8002596 <state_machine+0xd5a>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <state_machine+0xce6>
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <state_machine+0xd18>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	4b11      	ldr	r3, [pc, #68]	; (8002560 <state_machine+0xd24>)
 800251c:	220e      	movs	r2, #14
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	e039      	b.n	8002596 <state_machine+0xd5a>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <state_machine+0xcfe>
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <state_machine+0xd18>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <state_machine+0xd24>)
 8002534:	220f      	movs	r2, #15
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e02d      	b.n	8002596 <state_machine+0xd5a>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01d      	beq.n	8002580 <state_machine+0xd44>
 8002544:	4b03      	ldr	r3, [pc, #12]	; (8002554 <state_machine+0xd18>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	4b05      	ldr	r3, [pc, #20]	; (8002560 <state_machine+0xd24>)
 800254c:	2210      	movs	r2, #16
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e021      	b.n	8002596 <state_machine+0xd5a>
 8002552:	bf00      	nop
 8002554:	20001a24 	.word	0x20001a24
 8002558:	200018bc 	.word	0x200018bc
 800255c:	20001998 	.word	0x20001998
 8002560:	20041870 	.word	0x20041870
 8002564:	2004186c 	.word	0x2004186c
 8002568:	20001804 	.word	0x20001804
 800256c:	20001808 	.word	0x20001808
 8002570:	20041a94 	.word	0x20041a94
 8002574:	20001a28 	.word	0x20001a28
 8002578:	200018d0 	.word	0x200018d0
 800257c:	200019a4 	.word	0x200019a4
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <state_machine+0xd5a>
 800258a:	4b9d      	ldr	r3, [pc, #628]	; (8002800 <state_machine+0xfc4>)
 800258c:	2201      	movs	r2, #1
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	4b9c      	ldr	r3, [pc, #624]	; (8002804 <state_machine+0xfc8>)
 8002592:	2211      	movs	r2, #17
 8002594:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002596:	4b9c      	ldr	r3, [pc, #624]	; (8002808 <state_machine+0xfcc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11f      	bne.n	80025de <state_machine+0xda2>
 800259e:	4b9a      	ldr	r3, [pc, #616]	; (8002808 <state_machine+0xfcc>)
 80025a0:	2201      	movs	r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01a      	beq.n	80025e4 <state_machine+0xda8>
 80025ae:	4b97      	ldr	r3, [pc, #604]	; (800280c <state_machine+0xfd0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d103      	bne.n	80025be <state_machine+0xd82>
 80025b6:	4b95      	ldr	r3, [pc, #596]	; (800280c <state_machine+0xfd0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e004      	b.n	80025c8 <state_machine+0xd8c>
 80025be:	4b93      	ldr	r3, [pc, #588]	; (800280c <state_machine+0xfd0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	4a91      	ldr	r2, [pc, #580]	; (800280c <state_machine+0xfd0>)
 80025c6:	6013      	str	r3, [r2, #0]
 80025c8:	4b90      	ldr	r3, [pc, #576]	; (800280c <state_machine+0xfd0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a90      	ldr	r2, [pc, #576]	; (8002810 <state_machine+0xfd4>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	2200      	movs	r2, #0
 80025d4:	4619      	mov	r1, r3
 80025d6:	488f      	ldr	r0, [pc, #572]	; (8002814 <state_machine+0xfd8>)
 80025d8:	f003 fff4 	bl	80065c4 <HAL_LTDC_SetAlpha>
 80025dc:	e002      	b.n	80025e4 <state_machine+0xda8>
 80025de:	4b8a      	ldr	r3, [pc, #552]	; (8002808 <state_machine+0xfcc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
			check_switch();
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 8489 	bne.w	8002efe <state_machine+0x16c2>
 80025ec:	4b85      	ldr	r3, [pc, #532]	; (8002804 <state_machine+0xfc8>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	4b89      	ldr	r3, [pc, #548]	; (8002818 <state_machine+0xfdc>)
 80025f4:	22b4      	movs	r2, #180	; 0xb4
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	4b81      	ldr	r3, [pc, #516]	; (8002800 <state_machine+0xfc4>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
			break;			
 80025fe:	f000 bc7e 	b.w	8002efe <state_machine+0x16c2>
		}
		case 12:{
			if(need_out){
 8002602:	4b7f      	ldr	r3, [pc, #508]	; (8002800 <state_machine+0xfc4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d027      	beq.n	800265a <state_machine+0xe1e>
				fill_screen(0);
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff f856 	bl	80016bc <fill_screen>
				print_string(10, 40, state12_string, 0x797);
 8002610:	f240 7397 	movw	r3, #1943	; 0x797
 8002614:	4a81      	ldr	r2, [pc, #516]	; (800281c <state_machine+0xfe0>)
 8002616:	2128      	movs	r1, #40	; 0x28
 8002618:	200a      	movs	r0, #10
 800261a:	f7fe ffd1 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state12_string_2, 0x797, 3);
 800261e:	2303      	movs	r3, #3
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f240 7397 	movw	r3, #1943	; 0x797
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <state_machine+0xfe4>)
 8002628:	2164      	movs	r1, #100	; 0x64
 800262a:	200a      	movs	r0, #10
 800262c:	f7fe ffee 	bl	800160c <print_string_scaled>
				print_string_scaled_y(10, 145, state12_string_3, 0x797, 2);
 8002630:	2302      	movs	r3, #2
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	f240 7397 	movw	r3, #1943	; 0x797
 8002638:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <state_machine+0xfe8>)
 800263a:	2191      	movs	r1, #145	; 0x91
 800263c:	200a      	movs	r0, #10
 800263e:	f7ff f814 	bl	800166a <print_string_scaled_y>
				print_string_scaled_y(50, 180, state12_string_4, 0x797, 2);
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	f240 7397 	movw	r3, #1943	; 0x797
 800264a:	4a77      	ldr	r2, [pc, #476]	; (8002828 <state_machine+0xfec>)
 800264c:	21b4      	movs	r1, #180	; 0xb4
 800264e:	2032      	movs	r0, #50	; 0x32
 8002650:	f7ff f80b 	bl	800166a <print_string_scaled_y>

				need_out = 0;
 8002654:	4b6a      	ldr	r3, [pc, #424]	; (8002800 <state_machine+0xfc4>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
			}

			check_data();
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d006      	beq.n	8002672 <state_machine+0xe36>
 8002664:	4b66      	ldr	r3, [pc, #408]	; (8002800 <state_machine+0xfc4>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	4b66      	ldr	r3, [pc, #408]	; (8002804 <state_machine+0xfc8>)
 800266c:	220a      	movs	r2, #10
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e052      	b.n	8002718 <state_machine+0xedc>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <state_machine+0xe4e>
 800267c:	4b60      	ldr	r3, [pc, #384]	; (8002800 <state_machine+0xfc4>)
 800267e:	2201      	movs	r2, #1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	4b60      	ldr	r3, [pc, #384]	; (8002804 <state_machine+0xfc8>)
 8002684:	220b      	movs	r2, #11
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e046      	b.n	8002718 <state_machine+0xedc>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <state_machine+0xe66>
 8002694:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <state_machine+0xfc4>)
 8002696:	2201      	movs	r2, #1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <state_machine+0xfc8>)
 800269c:	220c      	movs	r2, #12
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e03a      	b.n	8002718 <state_machine+0xedc>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <state_machine+0xe7e>
 80026ac:	4b54      	ldr	r3, [pc, #336]	; (8002800 <state_machine+0xfc4>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <state_machine+0xfc8>)
 80026b4:	220d      	movs	r2, #13
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e02e      	b.n	8002718 <state_machine+0xedc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <state_machine+0xe96>
 80026c4:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <state_machine+0xfc4>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	4b4e      	ldr	r3, [pc, #312]	; (8002804 <state_machine+0xfc8>)
 80026cc:	220e      	movs	r2, #14
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e022      	b.n	8002718 <state_machine+0xedc>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0320 	and.w	r3, r3, #32
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <state_machine+0xeae>
 80026dc:	4b48      	ldr	r3, [pc, #288]	; (8002800 <state_machine+0xfc4>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <state_machine+0xfc8>)
 80026e4:	220f      	movs	r2, #15
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e016      	b.n	8002718 <state_machine+0xedc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <state_machine+0xec6>
 80026f4:	4b42      	ldr	r3, [pc, #264]	; (8002800 <state_machine+0xfc4>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b42      	ldr	r3, [pc, #264]	; (8002804 <state_machine+0xfc8>)
 80026fc:	2210      	movs	r2, #16
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e00a      	b.n	8002718 <state_machine+0xedc>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <state_machine+0xedc>
 800270c:	4b3c      	ldr	r3, [pc, #240]	; (8002800 <state_machine+0xfc4>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	4b3c      	ldr	r3, [pc, #240]	; (8002804 <state_machine+0xfc8>)
 8002714:	2211      	movs	r2, #17
 8002716:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002718:	4b3b      	ldr	r3, [pc, #236]	; (8002808 <state_machine+0xfcc>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d11f      	bne.n	8002760 <state_machine+0xf24>
 8002720:	4b39      	ldr	r3, [pc, #228]	; (8002808 <state_machine+0xfcc>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01a      	beq.n	8002766 <state_machine+0xf2a>
 8002730:	4b36      	ldr	r3, [pc, #216]	; (800280c <state_machine+0xfd0>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d103      	bne.n	8002740 <state_machine+0xf04>
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <state_machine+0xfd0>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e004      	b.n	800274a <state_machine+0xf0e>
 8002740:	4b32      	ldr	r3, [pc, #200]	; (800280c <state_machine+0xfd0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	3301      	adds	r3, #1
 8002746:	4a31      	ldr	r2, [pc, #196]	; (800280c <state_machine+0xfd0>)
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <state_machine+0xfd0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a30      	ldr	r2, [pc, #192]	; (8002810 <state_machine+0xfd4>)
 8002750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002754:	2200      	movs	r2, #0
 8002756:	4619      	mov	r1, r3
 8002758:	482e      	ldr	r0, [pc, #184]	; (8002814 <state_machine+0xfd8>)
 800275a:	f003 ff33 	bl	80065c4 <HAL_LTDC_SetAlpha>
 800275e:	e002      	b.n	8002766 <state_machine+0xf2a>
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <state_machine+0xfcc>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
			check_switch();
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 83ca 	bne.w	8002f02 <state_machine+0x16c6>
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <state_machine+0xfc8>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	4b28      	ldr	r3, [pc, #160]	; (8002818 <state_machine+0xfdc>)
 8002776:	22b4      	movs	r2, #180	; 0xb4
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	4b21      	ldr	r3, [pc, #132]	; (8002800 <state_machine+0xfc4>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]
			break;			
 8002780:	e3bf      	b.n	8002f02 <state_machine+0x16c6>
		}
		case 13:{
			if(need_out){
 8002782:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <state_machine+0xfc4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d015      	beq.n	80027b6 <state_machine+0xf7a>
				fill_screen(0);
 800278a:	2000      	movs	r0, #0
 800278c:	f7fe ff96 	bl	80016bc <fill_screen>
				print_string(10, 40, state13_string, 0x797);
 8002790:	f240 7397 	movw	r3, #1943	; 0x797
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <state_machine+0xff0>)
 8002796:	2128      	movs	r1, #40	; 0x28
 8002798:	200a      	movs	r0, #10
 800279a:	f7fe ff11 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state13_string_2, 0x797, 3);
 800279e:	2303      	movs	r3, #3
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	f240 7397 	movw	r3, #1943	; 0x797
 80027a6:	4a22      	ldr	r2, [pc, #136]	; (8002830 <state_machine+0xff4>)
 80027a8:	2164      	movs	r1, #100	; 0x64
 80027aa:	200a      	movs	r0, #10
 80027ac:	f7fe ff2e 	bl	800160c <print_string_scaled>
				need_out = 0;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <state_machine+0xfc4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
			}

			check_data();
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <state_machine+0xf92>
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <state_machine+0xfc4>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <state_machine+0xfc8>)
 80027c8:	220a      	movs	r2, #10
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e06d      	b.n	80028aa <state_machine+0x106e>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <state_machine+0xfaa>
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <state_machine+0xfc4>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <state_machine+0xfc8>)
 80027e0:	220b      	movs	r2, #11
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e061      	b.n	80028aa <state_machine+0x106e>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d021      	beq.n	8002834 <state_machine+0xff8>
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <state_machine+0xfc4>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	4b03      	ldr	r3, [pc, #12]	; (8002804 <state_machine+0xfc8>)
 80027f8:	220c      	movs	r2, #12
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e055      	b.n	80028aa <state_machine+0x106e>
 80027fe:	bf00      	nop
 8002800:	20001a24 	.word	0x20001a24
 8002804:	20041870 	.word	0x20041870
 8002808:	2004186c 	.word	0x2004186c
 800280c:	20001804 	.word	0x20001804
 8002810:	20001808 	.word	0x20001808
 8002814:	20041a94 	.word	0x20041a94
 8002818:	20001a28 	.word	0x20001a28
 800281c:	200018f0 	.word	0x200018f0
 8002820:	200019b0 	.word	0x200019b0
 8002824:	200019c0 	.word	0x200019c0
 8002828:	200019d8 	.word	0x200019d8
 800282c:	20001914 	.word	0x20001914
 8002830:	200019f0 	.word	0x200019f0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	2b00      	cmp	r3, #0
 800283c:	d006      	beq.n	800284c <state_machine+0x1010>
 800283e:	4b8c      	ldr	r3, [pc, #560]	; (8002a70 <state_machine+0x1234>)
 8002840:	2201      	movs	r2, #1
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b8b      	ldr	r3, [pc, #556]	; (8002a74 <state_machine+0x1238>)
 8002846:	220d      	movs	r2, #13
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e02e      	b.n	80028aa <state_machine+0x106e>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <state_machine+0x1028>
 8002856:	4b86      	ldr	r3, [pc, #536]	; (8002a70 <state_machine+0x1234>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <state_machine+0x1238>)
 800285e:	220e      	movs	r2, #14
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e022      	b.n	80028aa <state_machine+0x106e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b00      	cmp	r3, #0
 800286c:	d006      	beq.n	800287c <state_machine+0x1040>
 800286e:	4b80      	ldr	r3, [pc, #512]	; (8002a70 <state_machine+0x1234>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	4b7f      	ldr	r3, [pc, #508]	; (8002a74 <state_machine+0x1238>)
 8002876:	220f      	movs	r2, #15
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e016      	b.n	80028aa <state_machine+0x106e>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <state_machine+0x1058>
 8002886:	4b7a      	ldr	r3, [pc, #488]	; (8002a70 <state_machine+0x1234>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4b79      	ldr	r3, [pc, #484]	; (8002a74 <state_machine+0x1238>)
 800288e:	2210      	movs	r2, #16
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e00a      	b.n	80028aa <state_machine+0x106e>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <state_machine+0x106e>
 800289e:	4b74      	ldr	r3, [pc, #464]	; (8002a70 <state_machine+0x1234>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	4b73      	ldr	r3, [pc, #460]	; (8002a74 <state_machine+0x1238>)
 80028a6:	2211      	movs	r2, #17
 80028a8:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 80028aa:	4b73      	ldr	r3, [pc, #460]	; (8002a78 <state_machine+0x123c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11f      	bne.n	80028f2 <state_machine+0x10b6>
 80028b2:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <state_machine+0x123c>)
 80028b4:	2201      	movs	r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d01a      	beq.n	80028f8 <state_machine+0x10bc>
 80028c2:	4b6e      	ldr	r3, [pc, #440]	; (8002a7c <state_machine+0x1240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d103      	bne.n	80028d2 <state_machine+0x1096>
 80028ca:	4b6c      	ldr	r3, [pc, #432]	; (8002a7c <state_machine+0x1240>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	e004      	b.n	80028dc <state_machine+0x10a0>
 80028d2:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <state_machine+0x1240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3301      	adds	r3, #1
 80028d8:	4a68      	ldr	r2, [pc, #416]	; (8002a7c <state_machine+0x1240>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <state_machine+0x1240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <state_machine+0x1244>)
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	2200      	movs	r2, #0
 80028e8:	4619      	mov	r1, r3
 80028ea:	4866      	ldr	r0, [pc, #408]	; (8002a84 <state_machine+0x1248>)
 80028ec:	f003 fe6a 	bl	80065c4 <HAL_LTDC_SetAlpha>
 80028f0:	e002      	b.n	80028f8 <state_machine+0x10bc>
 80028f2:	4b61      	ldr	r3, [pc, #388]	; (8002a78 <state_machine+0x123c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
			check_switch();
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8303 	bne.w	8002f06 <state_machine+0x16ca>
 8002900:	4b5c      	ldr	r3, [pc, #368]	; (8002a74 <state_machine+0x1238>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	4b60      	ldr	r3, [pc, #384]	; (8002a88 <state_machine+0x124c>)
 8002908:	22b4      	movs	r2, #180	; 0xb4
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	4b58      	ldr	r3, [pc, #352]	; (8002a70 <state_machine+0x1234>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]
			break;			
 8002912:	e2f8      	b.n	8002f06 <state_machine+0x16ca>
		}
		case 14:{
			if(need_out){
 8002914:	4b56      	ldr	r3, [pc, #344]	; (8002a70 <state_machine+0x1234>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <state_machine+0x110c>
				fill_screen(0);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe fecd 	bl	80016bc <fill_screen>
				print_string(10, 40, state14_string, 0x797);
 8002922:	f240 7397 	movw	r3, #1943	; 0x797
 8002926:	4a59      	ldr	r2, [pc, #356]	; (8002a8c <state_machine+0x1250>)
 8002928:	2128      	movs	r1, #40	; 0x28
 800292a:	200a      	movs	r0, #10
 800292c:	f7fe fe48 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state14_string_2, 0x797, 3);
 8002930:	2303      	movs	r3, #3
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f240 7397 	movw	r3, #1943	; 0x797
 8002938:	4a55      	ldr	r2, [pc, #340]	; (8002a90 <state_machine+0x1254>)
 800293a:	2164      	movs	r1, #100	; 0x64
 800293c:	200a      	movs	r0, #10
 800293e:	f7fe fe65 	bl	800160c <print_string_scaled>
				need_out = 0;
 8002942:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <state_machine+0x1234>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d006      	beq.n	8002960 <state_machine+0x1124>
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <state_machine+0x1234>)
 8002954:	2201      	movs	r2, #1
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <state_machine+0x1238>)
 800295a:	220a      	movs	r2, #10
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	e052      	b.n	8002a06 <state_machine+0x11ca>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <state_machine+0x113c>
 800296a:	4b41      	ldr	r3, [pc, #260]	; (8002a70 <state_machine+0x1234>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <state_machine+0x1238>)
 8002972:	220b      	movs	r2, #11
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	e046      	b.n	8002a06 <state_machine+0x11ca>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d006      	beq.n	8002990 <state_machine+0x1154>
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <state_machine+0x1234>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <state_machine+0x1238>)
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e03a      	b.n	8002a06 <state_machine+0x11ca>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <state_machine+0x116c>
 800299a:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <state_machine+0x1234>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b34      	ldr	r3, [pc, #208]	; (8002a74 <state_machine+0x1238>)
 80029a2:	220d      	movs	r2, #13
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e02e      	b.n	8002a06 <state_machine+0x11ca>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <state_machine+0x1184>
 80029b2:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <state_machine+0x1234>)
 80029b4:	2201      	movs	r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <state_machine+0x1238>)
 80029ba:	220e      	movs	r2, #14
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e022      	b.n	8002a06 <state_machine+0x11ca>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <state_machine+0x119c>
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <state_machine+0x1234>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <state_machine+0x1238>)
 80029d2:	220f      	movs	r2, #15
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e016      	b.n	8002a06 <state_machine+0x11ca>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <state_machine+0x11b4>
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <state_machine+0x1234>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <state_machine+0x1238>)
 80029ea:	2210      	movs	r2, #16
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e00a      	b.n	8002a06 <state_machine+0x11ca>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <state_machine+0x11ca>
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <state_machine+0x1234>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <state_machine+0x1238>)
 8002a02:	2211      	movs	r2, #17
 8002a04:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <state_machine+0x123c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d11f      	bne.n	8002a4e <state_machine+0x1212>
 8002a0e:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <state_machine+0x123c>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d01a      	beq.n	8002a54 <state_machine+0x1218>
 8002a1e:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <state_machine+0x1240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d103      	bne.n	8002a2e <state_machine+0x11f2>
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <state_machine+0x1240>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e004      	b.n	8002a38 <state_machine+0x11fc>
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <state_machine+0x1240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3301      	adds	r3, #1
 8002a34:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <state_machine+0x1240>)
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <state_machine+0x1240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a10      	ldr	r2, [pc, #64]	; (8002a80 <state_machine+0x1244>)
 8002a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	480f      	ldr	r0, [pc, #60]	; (8002a84 <state_machine+0x1248>)
 8002a48:	f003 fdbc 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8002a4c:	e002      	b.n	8002a54 <state_machine+0x1218>
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <state_machine+0x123c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
			check_switch();
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 8257 	bne.w	8002f0a <state_machine+0x16ce>
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <state_machine+0x1238>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <state_machine+0x124c>)
 8002a64:	22b4      	movs	r2, #180	; 0xb4
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	4b01      	ldr	r3, [pc, #4]	; (8002a70 <state_machine+0x1234>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
			break;			
 8002a6e:	e24c      	b.n	8002f0a <state_machine+0x16ce>
 8002a70:	20001a24 	.word	0x20001a24
 8002a74:	20041870 	.word	0x20041870
 8002a78:	2004186c 	.word	0x2004186c
 8002a7c:	20001804 	.word	0x20001804
 8002a80:	20001808 	.word	0x20001808
 8002a84:	20041a94 	.word	0x20041a94
 8002a88:	20001a28 	.word	0x20001a28
 8002a8c:	20001934 	.word	0x20001934
 8002a90:	200019fc 	.word	0x200019fc
		}
		case 15:{
			if(need_out){
 8002a94:	4b8d      	ldr	r3, [pc, #564]	; (8002ccc <state_machine+0x1490>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <state_machine+0x128c>
				fill_screen(0);
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7fe fe0d 	bl	80016bc <fill_screen>
				print_string(10, 40, state15_string, 0x797);
 8002aa2:	f240 7397 	movw	r3, #1943	; 0x797
 8002aa6:	4a8a      	ldr	r2, [pc, #552]	; (8002cd0 <state_machine+0x1494>)
 8002aa8:	2128      	movs	r1, #40	; 0x28
 8002aaa:	200a      	movs	r0, #10
 8002aac:	f7fe fd88 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state15_string_2, 0x797, 2);
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f240 7397 	movw	r3, #1943	; 0x797
 8002ab8:	4a86      	ldr	r2, [pc, #536]	; (8002cd4 <state_machine+0x1498>)
 8002aba:	2164      	movs	r1, #100	; 0x64
 8002abc:	200a      	movs	r0, #10
 8002abe:	f7fe fda5 	bl	800160c <print_string_scaled>
				need_out = 0;
 8002ac2:	4b82      	ldr	r3, [pc, #520]	; (8002ccc <state_machine+0x1490>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <state_machine+0x12a4>
 8002ad2:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <state_machine+0x1490>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	4b7f      	ldr	r3, [pc, #508]	; (8002cd8 <state_machine+0x149c>)
 8002ada:	220a      	movs	r2, #10
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	e052      	b.n	8002b86 <state_machine+0x134a>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d006      	beq.n	8002af8 <state_machine+0x12bc>
 8002aea:	4b78      	ldr	r3, [pc, #480]	; (8002ccc <state_machine+0x1490>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	4b79      	ldr	r3, [pc, #484]	; (8002cd8 <state_machine+0x149c>)
 8002af2:	220b      	movs	r2, #11
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e046      	b.n	8002b86 <state_machine+0x134a>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <state_machine+0x12d4>
 8002b02:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <state_machine+0x1490>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b73      	ldr	r3, [pc, #460]	; (8002cd8 <state_machine+0x149c>)
 8002b0a:	220c      	movs	r2, #12
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e03a      	b.n	8002b86 <state_machine+0x134a>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <state_machine+0x12ec>
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <state_machine+0x1490>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <state_machine+0x149c>)
 8002b22:	220d      	movs	r2, #13
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	e02e      	b.n	8002b86 <state_machine+0x134a>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <state_machine+0x1304>
 8002b32:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <state_machine+0x1490>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <state_machine+0x149c>)
 8002b3a:	220e      	movs	r2, #14
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e022      	b.n	8002b86 <state_machine+0x134a>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d006      	beq.n	8002b58 <state_machine+0x131c>
 8002b4a:	4b60      	ldr	r3, [pc, #384]	; (8002ccc <state_machine+0x1490>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	4b61      	ldr	r3, [pc, #388]	; (8002cd8 <state_machine+0x149c>)
 8002b52:	220f      	movs	r2, #15
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	e016      	b.n	8002b86 <state_machine+0x134a>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <state_machine+0x1334>
 8002b62:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <state_machine+0x1490>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <state_machine+0x149c>)
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e00a      	b.n	8002b86 <state_machine+0x134a>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <state_machine+0x134a>
 8002b7a:	4b54      	ldr	r3, [pc, #336]	; (8002ccc <state_machine+0x1490>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	4b55      	ldr	r3, [pc, #340]	; (8002cd8 <state_machine+0x149c>)
 8002b82:	2211      	movs	r2, #17
 8002b84:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002b86:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <state_machine+0x14a0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d11f      	bne.n	8002bce <state_machine+0x1392>
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <state_machine+0x14a0>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d01a      	beq.n	8002bd4 <state_machine+0x1398>
 8002b9e:	4b50      	ldr	r3, [pc, #320]	; (8002ce0 <state_machine+0x14a4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d103      	bne.n	8002bae <state_machine+0x1372>
 8002ba6:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <state_machine+0x14a4>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e004      	b.n	8002bb8 <state_machine+0x137c>
 8002bae:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <state_machine+0x14a4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <state_machine+0x14a4>)
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <state_machine+0x14a4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a49      	ldr	r2, [pc, #292]	; (8002ce4 <state_machine+0x14a8>)
 8002bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4848      	ldr	r0, [pc, #288]	; (8002ce8 <state_machine+0x14ac>)
 8002bc8:	f003 fcfc 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8002bcc:	e002      	b.n	8002bd4 <state_machine+0x1398>
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <state_machine+0x14a0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
			check_switch();
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f040 8199 	bne.w	8002f0e <state_machine+0x16d2>
 8002bdc:	4b3e      	ldr	r3, [pc, #248]	; (8002cd8 <state_machine+0x149c>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	4b42      	ldr	r3, [pc, #264]	; (8002cec <state_machine+0x14b0>)
 8002be4:	22b4      	movs	r2, #180	; 0xb4
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <state_machine+0x1490>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]
			break;			
 8002bee:	e18e      	b.n	8002f0e <state_machine+0x16d2>
		}
		case 16:{
			if(need_out){
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <state_machine+0x1490>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <state_machine+0x13e8>
				fill_screen(0);
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7fe fd5f 	bl	80016bc <fill_screen>
				print_string(10, 40, state16_string, 0x797);
 8002bfe:	f240 7397 	movw	r3, #1943	; 0x797
 8002c02:	4a3b      	ldr	r2, [pc, #236]	; (8002cf0 <state_machine+0x14b4>)
 8002c04:	2128      	movs	r1, #40	; 0x28
 8002c06:	200a      	movs	r0, #10
 8002c08:	f7fe fcda 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state16_string_2, 0x797, 3);
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f240 7397 	movw	r3, #1943	; 0x797
 8002c14:	4a37      	ldr	r2, [pc, #220]	; (8002cf4 <state_machine+0x14b8>)
 8002c16:	2164      	movs	r1, #100	; 0x64
 8002c18:	200a      	movs	r0, #10
 8002c1a:	f7fe fcf7 	bl	800160c <print_string_scaled>
				need_out = 0;
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <state_machine+0x1490>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d006      	beq.n	8002c3c <state_machine+0x1400>
 8002c2e:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <state_machine+0x1490>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <state_machine+0x149c>)
 8002c36:	220a      	movs	r2, #10
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e068      	b.n	8002d0e <state_machine+0x14d2>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <state_machine+0x1418>
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <state_machine+0x1490>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <state_machine+0x149c>)
 8002c4e:	220b      	movs	r2, #11
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e05c      	b.n	8002d0e <state_machine+0x14d2>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <state_machine+0x1430>
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <state_machine+0x1490>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <state_machine+0x149c>)
 8002c66:	220c      	movs	r2, #12
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e050      	b.n	8002d0e <state_machine+0x14d2>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <state_machine+0x1448>
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <state_machine+0x1490>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <state_machine+0x149c>)
 8002c7e:	220d      	movs	r2, #13
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	e044      	b.n	8002d0e <state_machine+0x14d2>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <state_machine+0x1460>
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <state_machine+0x1490>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <state_machine+0x149c>)
 8002c96:	220e      	movs	r2, #14
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e038      	b.n	8002d0e <state_machine+0x14d2>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <state_machine+0x1478>
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <state_machine+0x1490>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <state_machine+0x149c>)
 8002cae:	220f      	movs	r2, #15
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	e02c      	b.n	8002d0e <state_machine+0x14d2>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01c      	beq.n	8002cf8 <state_machine+0x14bc>
 8002cbe:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <state_machine+0x1490>)
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <state_machine+0x149c>)
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e020      	b.n	8002d0e <state_machine+0x14d2>
 8002ccc:	20001a24 	.word	0x20001a24
 8002cd0:	20001948 	.word	0x20001948
 8002cd4:	20001a04 	.word	0x20001a04
 8002cd8:	20041870 	.word	0x20041870
 8002cdc:	2004186c 	.word	0x2004186c
 8002ce0:	20001804 	.word	0x20001804
 8002ce4:	20001808 	.word	0x20001808
 8002ce8:	20041a94 	.word	0x20041a94
 8002cec:	20001a28 	.word	0x20001a28
 8002cf0:	20001960 	.word	0x20001960
 8002cf4:	20001a14 	.word	0x20001a14
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <state_machine+0x14d2>
 8002d02:	4b87      	ldr	r3, [pc, #540]	; (8002f20 <state_machine+0x16e4>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	4b86      	ldr	r3, [pc, #536]	; (8002f24 <state_machine+0x16e8>)
 8002d0a:	2211      	movs	r2, #17
 8002d0c:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002d0e:	4b86      	ldr	r3, [pc, #536]	; (8002f28 <state_machine+0x16ec>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d11f      	bne.n	8002d56 <state_machine+0x151a>
 8002d16:	4b84      	ldr	r3, [pc, #528]	; (8002f28 <state_machine+0x16ec>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d01a      	beq.n	8002d5c <state_machine+0x1520>
 8002d26:	4b81      	ldr	r3, [pc, #516]	; (8002f2c <state_machine+0x16f0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d103      	bne.n	8002d36 <state_machine+0x14fa>
 8002d2e:	4b7f      	ldr	r3, [pc, #508]	; (8002f2c <state_machine+0x16f0>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	e004      	b.n	8002d40 <state_machine+0x1504>
 8002d36:	4b7d      	ldr	r3, [pc, #500]	; (8002f2c <state_machine+0x16f0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a7b      	ldr	r2, [pc, #492]	; (8002f2c <state_machine+0x16f0>)
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b7a      	ldr	r3, [pc, #488]	; (8002f2c <state_machine+0x16f0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a7a      	ldr	r2, [pc, #488]	; (8002f30 <state_machine+0x16f4>)
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4879      	ldr	r0, [pc, #484]	; (8002f34 <state_machine+0x16f8>)
 8002d50:	f003 fc38 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8002d54:	e002      	b.n	8002d5c <state_machine+0x1520>
 8002d56:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <state_machine+0x16ec>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
			check_switch();
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 80d7 	bne.w	8002f12 <state_machine+0x16d6>
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <state_machine+0x16e8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <state_machine+0x16fc>)
 8002d6c:	22b4      	movs	r2, #180	; 0xb4
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	4b6b      	ldr	r3, [pc, #428]	; (8002f20 <state_machine+0x16e4>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
			break;			
 8002d76:	e0cc      	b.n	8002f12 <state_machine+0x16d6>
		}
		case 17:{
			if(need_out){
 8002d78:	4b69      	ldr	r3, [pc, #420]	; (8002f20 <state_machine+0x16e4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <state_machine+0x1570>
				fill_screen(0);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe fc9b 	bl	80016bc <fill_screen>
				print_string(10, 40, state17_string, 0x797);
 8002d86:	f240 7397 	movw	r3, #1943	; 0x797
 8002d8a:	4a6c      	ldr	r2, [pc, #432]	; (8002f3c <state_machine+0x1700>)
 8002d8c:	2128      	movs	r1, #40	; 0x28
 8002d8e:	200a      	movs	r0, #10
 8002d90:	f7fe fc16 	bl	80015c0 <print_string>
				print_string_scaled(10, 100, state17_string_2, 0x797, 3);
 8002d94:	2303      	movs	r3, #3
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f240 7397 	movw	r3, #1943	; 0x797
 8002d9c:	4a68      	ldr	r2, [pc, #416]	; (8002f40 <state_machine+0x1704>)
 8002d9e:	2164      	movs	r1, #100	; 0x64
 8002da0:	200a      	movs	r0, #10
 8002da2:	f7fe fc33 	bl	800160c <print_string_scaled>
				need_out = 0;
 8002da6:	4b5e      	ldr	r3, [pc, #376]	; (8002f20 <state_machine+0x16e4>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
			}

			check_data();
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d006      	beq.n	8002dc4 <state_machine+0x1588>
 8002db6:	4b5a      	ldr	r3, [pc, #360]	; (8002f20 <state_machine+0x16e4>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <state_machine+0x16e8>)
 8002dbe:	220a      	movs	r2, #10
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e052      	b.n	8002e6a <state_machine+0x162e>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <state_machine+0x15a0>
 8002dce:	4b54      	ldr	r3, [pc, #336]	; (8002f20 <state_machine+0x16e4>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <state_machine+0x16e8>)
 8002dd6:	220b      	movs	r2, #11
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e046      	b.n	8002e6a <state_machine+0x162e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <state_machine+0x15b8>
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <state_machine+0x16e4>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	4b4d      	ldr	r3, [pc, #308]	; (8002f24 <state_machine+0x16e8>)
 8002dee:	220c      	movs	r2, #12
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e03a      	b.n	8002e6a <state_machine+0x162e>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d006      	beq.n	8002e0c <state_machine+0x15d0>
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <state_machine+0x16e4>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <state_machine+0x16e8>)
 8002e06:	220d      	movs	r2, #13
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e02e      	b.n	8002e6a <state_machine+0x162e>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d006      	beq.n	8002e24 <state_machine+0x15e8>
 8002e16:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <state_machine+0x16e4>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <state_machine+0x16e8>)
 8002e1e:	220e      	movs	r2, #14
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e022      	b.n	8002e6a <state_machine+0x162e>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <state_machine+0x1600>
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <state_machine+0x16e4>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <state_machine+0x16e8>)
 8002e36:	220f      	movs	r2, #15
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e016      	b.n	8002e6a <state_machine+0x162e>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <state_machine+0x1618>
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <state_machine+0x16e4>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <state_machine+0x16e8>)
 8002e4e:	2210      	movs	r2, #16
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e00a      	b.n	8002e6a <state_machine+0x162e>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <state_machine+0x162e>
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <state_machine+0x16e4>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <state_machine+0x16e8>)
 8002e66:	2211      	movs	r2, #17
 8002e68:	601a      	str	r2, [r3, #0]
		
			check_brightness();
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <state_machine+0x16ec>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11f      	bne.n	8002eb2 <state_machine+0x1676>
 8002e72:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <state_machine+0x16ec>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d01a      	beq.n	8002eb8 <state_machine+0x167c>
 8002e82:	4b2a      	ldr	r3, [pc, #168]	; (8002f2c <state_machine+0x16f0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d103      	bne.n	8002e92 <state_machine+0x1656>
 8002e8a:	4b28      	ldr	r3, [pc, #160]	; (8002f2c <state_machine+0x16f0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e004      	b.n	8002e9c <state_machine+0x1660>
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <state_machine+0x16f0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3301      	adds	r3, #1
 8002e98:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <state_machine+0x16f0>)
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <state_machine+0x16f0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a23      	ldr	r2, [pc, #140]	; (8002f30 <state_machine+0x16f4>)
 8002ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4822      	ldr	r0, [pc, #136]	; (8002f34 <state_machine+0x16f8>)
 8002eac:	f003 fb8a 	bl	80065c4 <HAL_LTDC_SetAlpha>
 8002eb0:	e002      	b.n	8002eb8 <state_machine+0x167c>
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <state_machine+0x16ec>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
			check_switch();
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d12b      	bne.n	8002f16 <state_machine+0x16da>
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <state_machine+0x16e8>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <state_machine+0x16fc>)
 8002ec6:	22b4      	movs	r2, #180	; 0xb4
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <state_machine+0x16e4>)
 8002ecc:	2201      	movs	r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
			break;			
 8002ed0:	e021      	b.n	8002f16 <state_machine+0x16da>
			break;
 8002ed2:	bf00      	nop
 8002ed4:	e020      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002ed6:	bf00      	nop
 8002ed8:	e01e      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002eda:	bf00      	nop
 8002edc:	e01c      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002ede:	bf00      	nop
 8002ee0:	e01a      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002ee2:	bf00      	nop
 8002ee4:	e018      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002ee6:	bf00      	nop
 8002ee8:	e016      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002eea:	bf00      	nop
 8002eec:	e014      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002eee:	bf00      	nop
 8002ef0:	e012      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002ef2:	bf00      	nop
 8002ef4:	e010      	b.n	8002f18 <state_machine+0x16dc>
			break;
 8002ef6:	bf00      	nop
 8002ef8:	e00e      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002efa:	bf00      	nop
 8002efc:	e00c      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002efe:	bf00      	nop
 8002f00:	e00a      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002f02:	bf00      	nop
 8002f04:	e008      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002f06:	bf00      	nop
 8002f08:	e006      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002f0a:	bf00      	nop
 8002f0c:	e004      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002f0e:	bf00      	nop
 8002f10:	e002      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002f12:	bf00      	nop
 8002f14:	e000      	b.n	8002f18 <state_machine+0x16dc>
			break;			
 8002f16:	bf00      	nop
		}																				
	}
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	20001a24 	.word	0x20001a24
 8002f24:	20041870 	.word	0x20041870
 8002f28:	2004186c 	.word	0x2004186c
 8002f2c:	20001804 	.word	0x20001804
 8002f30:	20001808 	.word	0x20001808
 8002f34:	20041a94 	.word	0x20041a94
 8002f38:	20001a28 	.word	0x20001a28
 8002f3c:	20001974 	.word	0x20001974
 8002f40:	20001a1c 	.word	0x20001a1c

08002f44 <tcp_ether_init>:

static struct netbuf *netbuf;
char mb_req_buf[MB_ADU_MAXSIZE];
char mb_repl_buf[MB_ADU_MAXSIZE];

int tcp_ether_init(){
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
	conn = netconn_new(NETCONN_TCP);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2010      	movs	r0, #16
 8002f50:	f009 fc62 	bl	800c818 <netconn_new_with_proto_and_callback>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4a16      	ldr	r2, [pc, #88]	; (8002fb0 <tcp_ether_init+0x6c>)
 8002f58:	6013      	str	r3, [r2, #0]
	if(conn == NULL){return -1;}
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <tcp_ether_init+0x6c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <tcp_ether_init+0x24>
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f66:	e01f      	b.n	8002fa8 <tcp_ether_init+0x64>
	if(netconn_bind(conn, IP_ADDR_ANY, 502) == ERR_OK){
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <tcp_ether_init+0x6c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8002f70:	4910      	ldr	r1, [pc, #64]	; (8002fb4 <tcp_ether_init+0x70>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f009 fcca 	bl	800c90c <netconn_bind>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d112      	bne.n	8002fa4 <tcp_ether_init+0x60>
		netconn_listen(conn);
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <tcp_ether_init+0x6c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	21ff      	movs	r1, #255	; 0xff
 8002f84:	4618      	mov	r0, r3
 8002f86:	f009 fcf9 	bl	800c97c <netconn_listen_with_backlog>
		for(;;){
			int stt = 228;
 8002f8a:	23e4      	movs	r3, #228	; 0xe4
 8002f8c:	607b      	str	r3, [r7, #4]
			if(netconn_accept(conn, &newconn) == ERR_OK){
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <tcp_ether_init+0x6c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4909      	ldr	r1, [pc, #36]	; (8002fb8 <tcp_ether_init+0x74>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f009 fd1d 	bl	800c9d4 <netconn_accept>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f4      	bne.n	8002f8a <tcp_ether_init+0x46>
				return 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e001      	b.n	8002fa8 <tcp_ether_init+0x64>
			}
		}
	}else{
		return -2;
 8002fa4:	f06f 0301 	mvn.w	r3, #1
	}
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	2004187c 	.word	0x2004187c
 8002fb4:	0801e380 	.word	0x0801e380
 8002fb8:	20041880 	.word	0x20041880

08002fbc <state_ether>:

int ether_state = 0;

void state_ether(){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af02      	add	r7, sp, #8

	switch(ether_state){
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <state_ether+0xc0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <state_ether+0x14>
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d00d      	beq.n	8002fea <state_ether+0x2e>
			}
			break;
		}
	}

}
 8002fce:	e050      	b.n	8003072 <state_ether+0xb6>
			if(netconn_recv(newconn, &netbuf) == ERR_OK){
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <state_ether+0xc4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	492b      	ldr	r1, [pc, #172]	; (8003084 <state_ether+0xc8>)
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f009 ff04 	bl	800cde4 <netconn_recv>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d144      	bne.n	800306c <state_ether+0xb0>
				ether_state = 1;
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <state_ether+0xc0>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
			break;
 8002fe8:	e040      	b.n	800306c <state_ether+0xb0>
			for(uint32_t i = 0; i < netbuf->p->len; i++){mb_req_buf[i]=((char*)netbuf->p->payload)[i];} // get the message from the client
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	e00e      	b.n	800300e <state_ether+0x52>
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <state_ether+0xc8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	7819      	ldrb	r1, [r3, #0]
 8002ffe:	4a22      	ldr	r2, [pc, #136]	; (8003088 <state_ether+0xcc>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	460a      	mov	r2, r1
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3301      	adds	r3, #1
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <state_ether+0xc8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	895b      	ldrh	r3, [r3, #10]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4293      	cmp	r3, r2
 800301c:	d3e8      	bcc.n	8002ff0 <state_ether+0x34>
			uint16_t buf_len = netbuf->p->len;
 800301e:	4b19      	ldr	r3, [pc, #100]	; (8003084 <state_ether+0xc8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	895b      	ldrh	r3, [r3, #10]
 8003026:	807b      	strh	r3, [r7, #2]
			buf_len = mb_process(mb_repl_buf, mb_req_buf, buf_len); // process the data
 8003028:	887b      	ldrh	r3, [r7, #2]
 800302a:	461a      	mov	r2, r3
 800302c:	4916      	ldr	r1, [pc, #88]	; (8003088 <state_ether+0xcc>)
 800302e:	4817      	ldr	r0, [pc, #92]	; (800308c <state_ether+0xd0>)
 8003030:	f000 fd93 	bl	8003b5a <mb_process>
 8003034:	4603      	mov	r3, r0
 8003036:	807b      	strh	r3, [r7, #2]
			netconn_write(newconn, mb_repl_buf, buf_len, NETCONN_COPY); // send the message back to the client
 8003038:	4b11      	ldr	r3, [pc, #68]	; (8003080 <state_ether+0xc4>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	887a      	ldrh	r2, [r7, #2]
 800303e:	2300      	movs	r3, #0
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2301      	movs	r3, #1
 8003044:	4911      	ldr	r1, [pc, #68]	; (800308c <state_ether+0xd0>)
 8003046:	f009 ff47 	bl	800ced8 <netconn_write_partly>
			if(netbuf_next(netbuf) <= 0){
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <state_ether+0xc8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f00b fb72 	bl	800e738 <netbuf_next>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	dc0a      	bgt.n	8003070 <state_ether+0xb4>
				netbuf_delete(netbuf);
 800305a:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <state_ether+0xc8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f00b fb4a 	bl	800e6f8 <netbuf_delete>
				ether_state = 0;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <state_ether+0xc0>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
			break;
 800306a:	e001      	b.n	8003070 <state_ether+0xb4>
			break;
 800306c:	bf00      	nop
 800306e:	e000      	b.n	8003072 <state_ether+0xb6>
			break;
 8003070:	bf00      	nop
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20041a90 	.word	0x20041a90
 8003080:	20041880 	.word	0x20041880
 8003084:	20041884 	.word	0x20041884
 8003088:	20041888 	.word	0x20041888
 800308c:	2004198c 	.word	0x2004198c

08003090 <inf_loop>:
  .name = "defaultTask",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityNormal,
};
/* USER CODE BEGIN PV */
void inf_loop(){
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
	for(;;){
		state_machine();
 8003094:	f7fe fbd2 	bl	800183c <state_machine>
		state_ether();
 8003098:	f7ff ff90 	bl	8002fbc <state_ether>
		state_machine();
 800309c:	e7fa      	b.n	8003094 <inf_loop+0x4>
	...

080030a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80030a4:	f7fd fa8e 	bl	80005c4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80030a8:	f7fd fab2 	bl	8000610 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ac:	f001 fae1 	bl	8004672 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030b0:	f000 f826 	bl	8003100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b4:	f000 f912 	bl	80032dc <MX_GPIO_Init>
  MX_LTDC_Init();
 80030b8:	f000 f88e 	bl	80031d8 <MX_LTDC_Init>
  /* USER CODE BEGIN 2 */
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)framebuf, LTDC_LAYER_1);
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <main+0x4c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	4619      	mov	r1, r3
 80030c2:	480b      	ldr	r0, [pc, #44]	; (80030f0 <main+0x50>)
 80030c4:	f003 fab4 	bl	8006630 <HAL_LTDC_SetAddress>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80030c8:	f005 fb48 	bl	800875c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80030cc:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <main+0x54>)
 80030ce:	2100      	movs	r1, #0
 80030d0:	4809      	ldr	r0, [pc, #36]	; (80030f8 <main+0x58>)
 80030d2:	f005 fbd5 	bl	8008880 <osThreadNew>
 80030d6:	4603      	mov	r3, r0
 80030d8:	4a08      	ldr	r2, [pc, #32]	; (80030fc <main+0x5c>)
 80030da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80030dc:	f005 fb72 	bl	80087c4 <osKernelStart>

	while (1)
	{

		//print_char(50, 50, 0xde, 0xFFFF);
		state_machine();
 80030e0:	f7fe fbac 	bl	800183c <state_machine>


		HAL_Delay(50);
 80030e4:	2032      	movs	r0, #50	; 0x32
 80030e6:	f001 fb21 	bl	800472c <HAL_Delay>
		state_machine();
 80030ea:	e7f9      	b.n	80030e0 <main+0x40>
 80030ec:	20001c6c 	.word	0x20001c6c
 80030f0:	20041a94 	.word	0x20041a94
 80030f4:	0801e22c 	.word	0x0801e22c
 80030f8:	08003b15 	.word	0x08003b15
 80030fc:	20041b3c 	.word	0x20041b3c

08003100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b094      	sub	sp, #80	; 0x50
 8003104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003106:	f107 0320 	add.w	r3, r7, #32
 800310a:	2230      	movs	r2, #48	; 0x30
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f016 fdfb 	bl	8019d0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
 800311c:	605a      	str	r2, [r3, #4]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003124:	4b2a      	ldr	r3, [pc, #168]	; (80031d0 <SystemClock_Config+0xd0>)
 8003126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003128:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <SystemClock_Config+0xd0>)
 800312a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800312e:	6413      	str	r3, [r2, #64]	; 0x40
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <SystemClock_Config+0xd0>)
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003138:	60bb      	str	r3, [r7, #8]
 800313a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800313c:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <SystemClock_Config+0xd4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a24      	ldr	r2, [pc, #144]	; (80031d4 <SystemClock_Config+0xd4>)
 8003142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <SystemClock_Config+0xd4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003150:	607b      	str	r3, [r7, #4]
 8003152:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003154:	2302      	movs	r3, #2
 8003156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003158:	2301      	movs	r3, #1
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800315c:	2310      	movs	r3, #16
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003160:	2302      	movs	r3, #2
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003164:	2300      	movs	r3, #0
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003168:	2308      	movs	r3, #8
 800316a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800316c:	23d8      	movs	r3, #216	; 0xd8
 800316e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003170:	2302      	movs	r3, #2
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003174:	2302      	movs	r3, #2
 8003176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003178:	f107 0320 	add.w	r3, r7, #32
 800317c:	4618      	mov	r0, r3
 800317e:	f003 fc77 	bl	8006a70 <HAL_RCC_OscConfig>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003188:	f000 fce2 	bl	8003b50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800318c:	f003 fc20 	bl	80069d0 <HAL_PWREx_EnableOverDrive>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003196:	f000 fcdb 	bl	8003b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800319a:	230f      	movs	r3, #15
 800319c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800319e:	2302      	movs	r3, #2
 80031a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	2107      	movs	r1, #7
 80031b8:	4618      	mov	r0, r3
 80031ba:	f003 fefd 	bl	8006fb8 <HAL_RCC_ClockConfig>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80031c4:	f000 fcc4 	bl	8003b50 <Error_Handler>
  }
}
 80031c8:	bf00      	nop
 80031ca:	3750      	adds	r7, #80	; 0x50
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000

080031d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08e      	sub	sp, #56	; 0x38
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80031de:	1d3b      	adds	r3, r7, #4
 80031e0:	2234      	movs	r2, #52	; 0x34
 80031e2:	2100      	movs	r1, #0
 80031e4:	4618      	mov	r0, r3
 80031e6:	f016 fd90 	bl	8019d0a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80031ea:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <MX_LTDC_Init+0xfc>)
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <MX_LTDC_Init+0x100>)
 80031ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80031f0:	4b38      	ldr	r3, [pc, #224]	; (80032d4 <MX_LTDC_Init+0xfc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <MX_LTDC_Init+0xfc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80031fc:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <MX_LTDC_Init+0xfc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003202:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8003208:	4b32      	ldr	r3, [pc, #200]	; (80032d4 <MX_LTDC_Init+0xfc>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003210:	2209      	movs	r2, #9
 8003212:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8003214:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003216:	222b      	movs	r2, #43	; 0x2b
 8003218:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 800321a:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <MX_LTDC_Init+0xfc>)
 800321c:	2215      	movs	r2, #21
 800321e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8003220:	4b2c      	ldr	r3, [pc, #176]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003222:	f240 220b 	movw	r2, #523	; 0x20b
 8003226:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8003228:	4b2a      	ldr	r3, [pc, #168]	; (80032d4 <MX_LTDC_Init+0xfc>)
 800322a:	f240 1225 	movw	r2, #293	; 0x125
 800322e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 531;
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003232:	f240 2213 	movw	r2, #531	; 0x213
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 297;
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <MX_LTDC_Init+0xfc>)
 800323a:	f240 1229 	movw	r2, #297	; 0x129
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003240:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003248:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <MX_LTDC_Init+0xfc>)
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <MX_LTDC_Init+0xfc>)
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003258:	481e      	ldr	r0, [pc, #120]	; (80032d4 <MX_LTDC_Init+0xfc>)
 800325a:	f002 ffe3 	bl	8006224 <HAL_LTDC_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003264:	f000 fc74 	bl	8003b50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800326c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003270:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003276:	f44f 7388 	mov.w	r3, #272	; 0x110
 800327a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800327c:	2302      	movs	r3, #2
 800327e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003280:	23ff      	movs	r3, #255	; 0xff
 8003282:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8003288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800328c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800328e:	2305      	movs	r3, #5
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8003292:	2300      	movs	r3, #0
 8003294:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8003296:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800329c:	f44f 7388 	mov.w	r3, #272	; 0x110
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2200      	movs	r2, #0
 80032b8:	4619      	mov	r1, r3
 80032ba:	4806      	ldr	r0, [pc, #24]	; (80032d4 <MX_LTDC_Init+0xfc>)
 80032bc:	f003 f944 	bl	8006548 <HAL_LTDC_ConfigLayer>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 80032c6:	f000 fc43 	bl	8003b50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80032ca:	bf00      	nop
 80032cc:	3738      	adds	r7, #56	; 0x38
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20041a94 	.word	0x20041a94
 80032d8:	40016800 	.word	0x40016800

080032dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b090      	sub	sp, #64	; 0x40
 80032e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	605a      	str	r2, [r3, #4]
 80032ec:	609a      	str	r2, [r3, #8]
 80032ee:	60da      	str	r2, [r3, #12]
 80032f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f2:	4bae      	ldr	r3, [pc, #696]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	4aad      	ldr	r2, [pc, #692]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80032f8:	f043 0310 	orr.w	r3, r3, #16
 80032fc:	6313      	str	r3, [r2, #48]	; 0x30
 80032fe:	4bab      	ldr	r3, [pc, #684]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800330a:	4ba8      	ldr	r3, [pc, #672]	; (80035ac <MX_GPIO_Init+0x2d0>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	4aa7      	ldr	r2, [pc, #668]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003314:	6313      	str	r3, [r2, #48]	; 0x30
 8003316:	4ba5      	ldr	r3, [pc, #660]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003322:	4ba2      	ldr	r3, [pc, #648]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4aa1      	ldr	r2, [pc, #644]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003328:	f043 0302 	orr.w	r3, r3, #2
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b9f      	ldr	r3, [pc, #636]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800333a:	4b9c      	ldr	r3, [pc, #624]	; (80035ac <MX_GPIO_Init+0x2d0>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a9b      	ldr	r2, [pc, #620]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003340:	f043 0308 	orr.w	r3, r3, #8
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b99      	ldr	r3, [pc, #612]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003352:	4b96      	ldr	r3, [pc, #600]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a95      	ldr	r2, [pc, #596]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003358:	f043 0304 	orr.w	r3, r3, #4
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b93      	ldr	r3, [pc, #588]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	61bb      	str	r3, [r7, #24]
 8003368:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800336a:	4b90      	ldr	r3, [pc, #576]	; (80035ac <MX_GPIO_Init+0x2d0>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a8f      	ldr	r2, [pc, #572]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b8d      	ldr	r3, [pc, #564]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003382:	4b8a      	ldr	r3, [pc, #552]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a89      	ldr	r2, [pc, #548]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
 800338e:	4b87      	ldr	r3, [pc, #540]	; (80035ac <MX_GPIO_Init+0x2d0>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800339a:	4b84      	ldr	r3, [pc, #528]	; (80035ac <MX_GPIO_Init+0x2d0>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a83      	ldr	r2, [pc, #524]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b81      	ldr	r3, [pc, #516]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80033b2:	4b7e      	ldr	r3, [pc, #504]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a7d      	ldr	r2, [pc, #500]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033ca:	4b78      	ldr	r3, [pc, #480]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a77      	ldr	r2, [pc, #476]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033d0:	f043 0320 	orr.w	r3, r3, #32
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b75      	ldr	r3, [pc, #468]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033e2:	4b72      	ldr	r3, [pc, #456]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a71      	ldr	r2, [pc, #452]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <MX_GPIO_Init+0x2d0>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80033fa:	2201      	movs	r2, #1
 80033fc:	2120      	movs	r1, #32
 80033fe:	486c      	ldr	r0, [pc, #432]	; (80035b0 <MX_GPIO_Init+0x2d4>)
 8003400:	f002 fef6 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003404:	2200      	movs	r2, #0
 8003406:	210c      	movs	r1, #12
 8003408:	486a      	ldr	r0, [pc, #424]	; (80035b4 <MX_GPIO_Init+0x2d8>)
 800340a:	f002 fef1 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800340e:	2201      	movs	r2, #1
 8003410:	2108      	movs	r1, #8
 8003412:	4869      	ldr	r0, [pc, #420]	; (80035b8 <MX_GPIO_Init+0x2dc>)
 8003414:	f002 feec 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003418:	2201      	movs	r2, #1
 800341a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800341e:	4865      	ldr	r0, [pc, #404]	; (80035b4 <MX_GPIO_Init+0x2d8>)
 8003420:	f002 fee6 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800342a:	4864      	ldr	r0, [pc, #400]	; (80035bc <MX_GPIO_Init+0x2e0>)
 800342c:	f002 fee0 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003430:	2200      	movs	r2, #0
 8003432:	21c8      	movs	r1, #200	; 0xc8
 8003434:	4862      	ldr	r0, [pc, #392]	; (80035c0 <MX_GPIO_Init+0x2e4>)
 8003436:	f002 fedb 	bl	80061f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800343a:	2308      	movs	r3, #8
 800343c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343e:	2300      	movs	r3, #0
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800344a:	4619      	mov	r1, r3
 800344c:	485d      	ldr	r0, [pc, #372]	; (80035c4 <MX_GPIO_Init+0x2e8>)
 800344e:	f002 fd0b 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003452:	2304      	movs	r3, #4
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003462:	2309      	movs	r3, #9
 8003464:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346a:	4619      	mov	r1, r3
 800346c:	4855      	ldr	r0, [pc, #340]	; (80035c4 <MX_GPIO_Init+0x2e8>)
 800346e:	f002 fcfb 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003472:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003484:	230c      	movs	r3, #12
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800348c:	4619      	mov	r1, r3
 800348e:	484d      	ldr	r0, [pc, #308]	; (80035c4 <MX_GPIO_Init+0x2e8>)
 8003490:	f002 fcea 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349a:	2312      	movs	r3, #18
 800349c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a2:	2300      	movs	r3, #0
 80034a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034a6:	2304      	movs	r3, #4
 80034a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ae:	4619      	mov	r1, r3
 80034b0:	4845      	ldr	r0, [pc, #276]	; (80035c8 <MX_GPIO_Init+0x2ec>)
 80034b2:	f002 fcd9 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80034b6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034c8:	230a      	movs	r3, #10
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034d0:	4619      	mov	r1, r3
 80034d2:	483d      	ldr	r0, [pc, #244]	; (80035c8 <MX_GPIO_Init+0x2ec>)
 80034d4:	f002 fcc8 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80034d8:	2310      	movs	r3, #16
 80034da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034e8:	2302      	movs	r3, #2
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80034ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f0:	4619      	mov	r1, r3
 80034f2:	4835      	ldr	r0, [pc, #212]	; (80035c8 <MX_GPIO_Init+0x2ec>)
 80034f4:	f002 fcb8 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fc:	2302      	movs	r3, #2
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003508:	2308      	movs	r3, #8
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800350c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003510:	4619      	mov	r1, r3
 8003512:	4827      	ldr	r0, [pc, #156]	; (80035b0 <MX_GPIO_Init+0x2d4>)
 8003514:	f002 fca8 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003518:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800351c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003522:	2300      	movs	r3, #0
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003526:	2303      	movs	r3, #3
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800352a:	230c      	movs	r3, #12
 800352c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003532:	4619      	mov	r1, r3
 8003534:	4825      	ldr	r0, [pc, #148]	; (80035cc <MX_GPIO_Init+0x2f0>)
 8003536:	f002 fc97 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	2300      	movs	r3, #0
 8003546:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003548:	2300      	movs	r3, #0
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800354c:	2301      	movs	r3, #1
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003554:	4619      	mov	r1, r3
 8003556:	481e      	ldr	r0, [pc, #120]	; (80035d0 <MX_GPIO_Init+0x2f4>)
 8003558:	f002 fc86 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800355c:	2360      	movs	r3, #96	; 0x60
 800355e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800356c:	230d      	movs	r3, #13
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003574:	4619      	mov	r1, r3
 8003576:	4813      	ldr	r0, [pc, #76]	; (80035c4 <MX_GPIO_Init+0x2e8>)
 8003578:	f002 fc76 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003580:	2302      	movs	r3, #2
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	2300      	movs	r3, #0
 8003586:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003588:	2300      	movs	r3, #0
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800358c:	2307      	movs	r3, #7
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003594:	4619      	mov	r1, r3
 8003596:	480c      	ldr	r0, [pc, #48]	; (80035c8 <MX_GPIO_Init+0x2ec>)
 8003598:	f002 fc66 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800359c:	2340      	movs	r3, #64	; 0x40
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a0:	2302      	movs	r3, #2
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
 80035a8:	e014      	b.n	80035d4 <MX_GPIO_Init+0x2f8>
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40020c00 	.word	0x40020c00
 80035b4:	40022000 	.word	0x40022000
 80035b8:	40022800 	.word	0x40022800
 80035bc:	40021c00 	.word	0x40021c00
 80035c0:	40021800 	.word	0x40021800
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40020400 	.word	0x40020400
 80035cc:	40020800 	.word	0x40020800
 80035d0:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	2303      	movs	r3, #3
 80035d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80035d8:	230a      	movs	r3, #10
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e0:	4619      	mov	r1, r3
 80035e2:	48bd      	ldr	r0, [pc, #756]	; (80038d8 <MX_GPIO_Init+0x5fc>)
 80035e4:	f002 fc40 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A10_Pin
                           FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80035e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80035fa:	230c      	movs	r3, #12
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003602:	4619      	mov	r1, r3
 8003604:	48b5      	ldr	r0, [pc, #724]	; (80038dc <MX_GPIO_Init+0x600>)
 8003606:	f002 fc2f 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800360a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003610:	2300      	movs	r3, #0
 8003612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800361c:	4619      	mov	r1, r3
 800361e:	48b0      	ldr	r0, [pc, #704]	; (80038e0 <MX_GPIO_Init+0x604>)
 8003620:	f002 fc22 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003624:	2340      	movs	r3, #64	; 0x40
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003628:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003636:	4619      	mov	r1, r3
 8003638:	48aa      	ldr	r0, [pc, #680]	; (80038e4 <MX_GPIO_Init+0x608>)
 800363a:	f002 fc15 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800363e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003644:	2302      	movs	r3, #2
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003648:	2300      	movs	r3, #0
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364c:	2303      	movs	r3, #3
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003650:	230c      	movs	r3, #12
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003658:	4619      	mov	r1, r3
 800365a:	48a2      	ldr	r0, [pc, #648]	; (80038e4 <MX_GPIO_Init+0x608>)
 800365c:	f002 fc04 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8003660:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366e:	2303      	movs	r3, #3
 8003670:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003672:	230a      	movs	r3, #10
 8003674:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367a:	4619      	mov	r1, r3
 800367c:	489a      	ldr	r0, [pc, #616]	; (80038e8 <MX_GPIO_Init+0x60c>)
 800367e:	f002 fbf3 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8003682:	23f0      	movs	r3, #240	; 0xf0
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8003692:	230a      	movs	r3, #10
 8003694:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369a:	4619      	mov	r1, r3
 800369c:	4893      	ldr	r0, [pc, #588]	; (80038ec <MX_GPIO_Init+0x610>)
 800369e:	f002 fbe3 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80036a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80036b4:	230a      	movs	r3, #10
 80036b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80036b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036bc:	4619      	mov	r1, r3
 80036be:	4887      	ldr	r0, [pc, #540]	; (80038dc <MX_GPIO_Init+0x600>)
 80036c0:	f002 fbd2 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80036c4:	2320      	movs	r3, #32
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c8:	2301      	movs	r3, #1
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80036d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036d8:	4619      	mov	r1, r3
 80036da:	4882      	ldr	r0, [pc, #520]	; (80038e4 <MX_GPIO_Init+0x608>)
 80036dc:	f002 fbc4 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80036e0:	2308      	movs	r3, #8
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2302      	movs	r3, #2
 80036e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	2300      	movs	r3, #0
 80036ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80036f0:	230d      	movs	r3, #13
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80036f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036f8:	4619      	mov	r1, r3
 80036fa:	487a      	ldr	r0, [pc, #488]	; (80038e4 <MX_GPIO_Init+0x608>)
 80036fc:	f002 fbb4 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003700:	f241 030c 	movw	r3, #4108	; 0x100c
 8003704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003706:	2301      	movs	r3, #1
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370e:	2300      	movs	r3, #0
 8003710:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003716:	4619      	mov	r1, r3
 8003718:	4874      	ldr	r0, [pc, #464]	; (80038ec <MX_GPIO_Init+0x610>)
 800371a:	f002 fba5 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800371e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003724:	2300      	movs	r3, #0
 8003726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800372c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003730:	4619      	mov	r1, r3
 8003732:	486f      	ldr	r0, [pc, #444]	; (80038f0 <MX_GPIO_Init+0x614>)
 8003734:	f002 fb98 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003738:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800373c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003746:	2303      	movs	r3, #3
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800374a:	230c      	movs	r3, #12
 800374c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800374e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003752:	4619      	mov	r1, r3
 8003754:	4867      	ldr	r0, [pc, #412]	; (80038f4 <MX_GPIO_Init+0x618>)
 8003756:	f002 fb87 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800375a:	2308      	movs	r3, #8
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375e:	2301      	movs	r3, #1
 8003760:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003766:	2300      	movs	r3, #0
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800376a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800376e:	4619      	mov	r1, r3
 8003770:	4861      	ldr	r0, [pc, #388]	; (80038f8 <MX_GPIO_Init+0x61c>)
 8003772:	f002 fb79 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8003776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800377a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800377c:	2302      	movs	r3, #2
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003784:	2300      	movs	r3, #0
 8003786:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003788:	230d      	movs	r3, #13
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800378c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003790:	4619      	mov	r1, r3
 8003792:	4852      	ldr	r0, [pc, #328]	; (80038dc <MX_GPIO_Init+0x600>)
 8003794:	f002 fb68 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003798:	2310      	movs	r3, #16
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800379c:	2300      	movs	r3, #0
 800379e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80037a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037a8:	4619      	mov	r1, r3
 80037aa:	484e      	ldr	r0, [pc, #312]	; (80038e4 <MX_GPIO_Init+0x608>)
 80037ac:	f002 fb5c 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 80037b0:	2304      	movs	r3, #4
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b4:	2302      	movs	r3, #2
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037bc:	2303      	movs	r3, #3
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80037c0:	230c      	movs	r3, #12
 80037c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 80037c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c8:	4619      	mov	r1, r3
 80037ca:	4846      	ldr	r0, [pc, #280]	; (80038e4 <MX_GPIO_Init+0x608>)
 80037cc:	f002 fb4c 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80037d0:	f248 0304 	movw	r3, #32772	; 0x8004
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d6:	2300      	movs	r3, #0
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e2:	4619      	mov	r1, r3
 80037e4:	4845      	ldr	r0, [pc, #276]	; (80038fc <MX_GPIO_Init+0x620>)
 80037e6:	f002 fb3f 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80037ea:	2302      	movs	r3, #2
 80037ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f6:	2300      	movs	r3, #0
 80037f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037fa:	2305      	movs	r3, #5
 80037fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003802:	4619      	mov	r1, r3
 8003804:	4839      	ldr	r0, [pc, #228]	; (80038ec <MX_GPIO_Init+0x610>)
 8003806:	f002 fb2f 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800380a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800380e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003810:	2301      	movs	r3, #1
 8003812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003818:	2300      	movs	r3, #0
 800381a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800381c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003820:	4619      	mov	r1, r3
 8003822:	4836      	ldr	r0, [pc, #216]	; (80038fc <MX_GPIO_Init+0x620>)
 8003824:	f002 fb20 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8003828:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800382c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382e:	2302      	movs	r3, #2
 8003830:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003836:	2300      	movs	r3, #0
 8003838:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800383a:	230d      	movs	r3, #13
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800383e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003842:	4619      	mov	r1, r3
 8003844:	482d      	ldr	r0, [pc, #180]	; (80038fc <MX_GPIO_Init+0x620>)
 8003846:	f002 fb0f 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800384a:	2301      	movs	r3, #1
 800384c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384e:	2302      	movs	r3, #2
 8003850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003852:	2300      	movs	r3, #0
 8003854:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800385a:	2302      	movs	r3, #2
 800385c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800385e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003862:	4619      	mov	r1, r3
 8003864:	4821      	ldr	r0, [pc, #132]	; (80038ec <MX_GPIO_Init+0x610>)
 8003866:	f002 faff 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800386a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800387c:	2307      	movs	r3, #7
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003884:	4619      	mov	r1, r3
 8003886:	4818      	ldr	r0, [pc, #96]	; (80038e8 <MX_GPIO_Init+0x60c>)
 8003888:	f002 faee 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800388c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003892:	2302      	movs	r3, #2
 8003894:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003896:	2300      	movs	r3, #0
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800389a:	2300      	movs	r3, #0
 800389c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800389e:	2301      	movs	r3, #1
 80038a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80038a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a6:	4619      	mov	r1, r3
 80038a8:	480f      	ldr	r0, [pc, #60]	; (80038e8 <MX_GPIO_Init+0x60c>)
 80038aa:	f002 fadd 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80038ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80038b4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80038b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80038be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c2:	4619      	mov	r1, r3
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <MX_GPIO_Init+0x610>)
 80038c6:	f002 facf 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80038ca:	23c0      	movs	r3, #192	; 0xc0
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e014      	b.n	8003900 <MX_GPIO_Init+0x624>
 80038d6:	bf00      	nop
 80038d8:	40020400 	.word	0x40020400
 80038dc:	40021800 	.word	0x40021800
 80038e0:	40022400 	.word	0x40022400
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40021400 	.word	0x40021400
 80038f8:	40022800 	.word	0x40022800
 80038fc:	40021c00 	.word	0x40021c00
 8003900:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003902:	2303      	movs	r3, #3
 8003904:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003906:	2308      	movs	r3, #8
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800390e:	4619      	mov	r1, r3
 8003910:	4879      	ldr	r0, [pc, #484]	; (8003af8 <MX_GPIO_Init+0x81c>)
 8003912:	f002 faa9 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8003916:	2310      	movs	r3, #16
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391a:	2302      	movs	r3, #2
 800391c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391e:	2300      	movs	r3, #0
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003922:	2303      	movs	r3, #3
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003926:	230a      	movs	r3, #10
 8003928:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800392a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800392e:	4619      	mov	r1, r3
 8003930:	4872      	ldr	r0, [pc, #456]	; (8003afc <MX_GPIO_Init+0x820>)
 8003932:	f002 fa99 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNME_Pin FMC_SDNE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003936:	2328      	movs	r3, #40	; 0x28
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003942:	2303      	movs	r3, #3
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003946:	230c      	movs	r3, #12
 8003948:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800394a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800394e:	4619      	mov	r1, r3
 8003950:	486a      	ldr	r0, [pc, #424]	; (8003afc <MX_GPIO_Init+0x820>)
 8003952:	f002 fa89 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003956:	23c8      	movs	r3, #200	; 0xc8
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395a:	2301      	movs	r3, #1
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003962:	2300      	movs	r3, #0
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396a:	4619      	mov	r1, r3
 800396c:	4864      	ldr	r0, [pc, #400]	; (8003b00 <MX_GPIO_Init+0x824>)
 800396e:	f002 fa7b 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003972:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003978:	2303      	movs	r3, #3
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003984:	4619      	mov	r1, r3
 8003986:	485f      	ldr	r0, [pc, #380]	; (8003b04 <MX_GPIO_Init+0x828>)
 8003988:	f002 fa6e 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : FMC_SDCKE0_Pin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800398c:	2308      	movs	r3, #8
 800398e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003994:	2300      	movs	r3, #0
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800399c:	230c      	movs	r3, #12
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	4854      	ldr	r0, [pc, #336]	; (8003af8 <MX_GPIO_Init+0x81c>)
 80039a8:	f002 fa5e 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80039ac:	2305      	movs	r3, #5
 80039ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80039bc:	230a      	movs	r3, #10
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c4:	4619      	mov	r1, r3
 80039c6:	484c      	ldr	r0, [pc, #304]	; (8003af8 <MX_GPIO_Init+0x81c>)
 80039c8:	f002 fa4e 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039cc:	2304      	movs	r3, #4
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d8:	2303      	movs	r3, #3
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039dc:	2309      	movs	r3, #9
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e4:	4619      	mov	r1, r3
 80039e6:	4848      	ldr	r0, [pc, #288]	; (8003b08 <MX_GPIO_Init+0x82c>)
 80039e8:	f002 fa3e 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80039ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80039f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f2:	2302      	movs	r3, #2
 80039f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fa:	2303      	movs	r3, #3
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80039fe:	2309      	movs	r3, #9
 8003a00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a06:	4619      	mov	r1, r3
 8003a08:	4840      	ldr	r0, [pc, #256]	; (8003b0c <MX_GPIO_Init+0x830>)
 8003a0a:	f002 fa2d 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003a0e:	2304      	movs	r3, #4
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a12:	2300      	movs	r3, #0
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4837      	ldr	r0, [pc, #220]	; (8003b00 <MX_GPIO_Init+0x824>)
 8003a22:	f002 fa21 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_A0_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003a26:	2301      	movs	r3, #1
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003a32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a36:	4619      	mov	r1, r3
 8003a38:	4835      	ldr	r0, [pc, #212]	; (8003b10 <MX_GPIO_Init+0x834>)
 8003a3a:	f002 fa15 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8003a3e:	2350      	movs	r3, #80	; 0x50
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a42:	2302      	movs	r3, #2
 8003a44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a46:	2300      	movs	r3, #0
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003a4e:	230d      	movs	r3, #13
 8003a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a56:	4619      	mov	r1, r3
 8003a58:	482d      	ldr	r0, [pc, #180]	; (8003b10 <MX_GPIO_Init+0x834>)
 8003a5a:	f002 fa05 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003a5e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a64:	2312      	movs	r3, #18
 8003a66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a70:	2304      	movs	r3, #4
 8003a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4820      	ldr	r0, [pc, #128]	; (8003afc <MX_GPIO_Init+0x820>)
 8003a7c:	f002 f9f4 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003a80:	2328      	movs	r3, #40	; 0x28
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003a90:	230a      	movs	r3, #10
 8003a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a98:	4619      	mov	r1, r3
 8003a9a:	481d      	ldr	r0, [pc, #116]	; (8003b10 <MX_GPIO_Init+0x834>)
 8003a9c:	f002 f9e4 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003aa0:	2340      	movs	r3, #64	; 0x40
 8003aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aac:	2300      	movs	r3, #0
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003ab0:	2309      	movs	r3, #9
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4810      	ldr	r0, [pc, #64]	; (8003afc <MX_GPIO_Init+0x820>)
 8003abc:	f002 f9d4 	bl	8005e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003ac0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ada:	4619      	mov	r1, r3
 8003adc:	480a      	ldr	r0, [pc, #40]	; (8003b08 <MX_GPIO_Init+0x82c>)
 8003ade:	f002 f9c3 	bl	8005e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
	keyboard_GPIO_init();
 8003ae2:	f7fc fdd9 	bl	8000698 <keyboard_GPIO_init>
	switch_GPIO_init();
 8003ae6:	f7fd f9fd 	bl	8000ee4 <switch_GPIO_init>
	spinner_GPIO_init();
 8003aea:	f7fd f8ef 	bl	8000ccc <spinner_GPIO_init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8003aee:	bf00      	nop
 8003af0:	3740      	adds	r7, #64	; 0x40
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40020800 	.word	0x40020800
 8003afc:	40021c00 	.word	0x40021c00
 8003b00:	40021800 	.word	0x40021800
 8003b04:	40021400 	.word	0x40021400
 8003b08:	40020400 	.word	0x40020400
 8003b0c:	40020c00 	.word	0x40020c00
 8003b10:	40020000 	.word	0x40020000

08003b14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8003b1c:	f003 fffa 	bl	8007b14 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

osDelay(1);
 8003b20:	2001      	movs	r0, #1
 8003b22:	f004 ff53 	bl	80089cc <osDelay>

  if(tcp_ether_init()!=0){
 8003b26:	f7ff fa0d 	bl	8002f44 <tcp_ether_init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <StartDefaultTask+0x2c>
  	print_string(10, 40, "ETHERNET FAILURE!", 0x797);
 8003b30:	f240 7397 	movw	r3, #1943	; 0x797
 8003b34:	4a05      	ldr	r2, [pc, #20]	; (8003b4c <StartDefaultTask+0x38>)
 8003b36:	2128      	movs	r1, #40	; 0x28
 8003b38:	200a      	movs	r0, #10
 8003b3a:	f7fd fd41 	bl	80015c0 <print_string>
 8003b3e:	e001      	b.n	8003b44 <StartDefaultTask+0x30>
  }else{
  	inf_loop();
 8003b40:	f7ff faa6 	bl	8003090 <inf_loop>
  /* Infinite loop */
  for(;;)
  {
  	//state_machine();
  	//state_ether();
    osDelay(1);
 8003b44:	2001      	movs	r0, #1
 8003b46:	f004 ff41 	bl	80089cc <osDelay>
 8003b4a:	e7fb      	b.n	8003b44 <StartDefaultTask+0x30>
 8003b4c:	0801acc0 	.word	0x0801acc0

08003b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003b54:	b672      	cpsid	i
}
 8003b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003b58:	e7fe      	b.n	8003b58 <Error_Handler+0x8>

08003b5a <mb_process>:
static uint8_t mb_process_val(uint16_t fn, uint16_t val);

static void mb_mbap_copy(char *mb_repl_buf, char *mb_req_buf);
static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity);

uint16_t mb_process(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	4613      	mov	r3, r2
 8003b66:	80fb      	strh	r3, [r7, #6]
	memset(mb_repl_buf, '\0', MB_ADU_MAXSIZE);  // clear the buffer
 8003b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f016 f8cb 	bl	8019d0a <memset>
	mb_mbap_copy(mb_repl_buf, mb_req_buf);
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f8fd 	bl	8003d76 <mb_mbap_copy>
	uint16_t pduLen = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	82fb      	strh	r3, [r7, #22]

	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3307      	adds	r3, #7
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	757b      	strb	r3, [r7, #21]
	switch (fn) {
 8003b88:	7d7b      	ldrb	r3, [r7, #21]
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	dc1c      	bgt.n	8003bc8 <mb_process+0x6e>
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	da23      	bge.n	8003bda <mb_process+0x80>
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	dc02      	bgt.n	8003b9c <mb_process+0x42>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	dc04      	bgt.n	8003ba4 <mb_process+0x4a>
 8003b9a:	e015      	b.n	8003bc8 <mb_process+0x6e>
 8003b9c:	3b05      	subs	r3, #5
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d812      	bhi.n	8003bc8 <mb_process+0x6e>
 8003ba2:	e008      	b.n	8003bb6 <mb_process+0x5c>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		pduLen = mb_process_pdu_read_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8003ba4:	88fb      	ldrh	r3, [r7, #6]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68b9      	ldr	r1, [r7, #8]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f82b 	bl	8003c06 <mb_process_pdu_read_fn>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	82fb      	strh	r3, [r7, #22]
		break;
 8003bb4:	e012      	b.n	8003bdc <mb_process+0x82>
	case MB_FN_WRITE_S_COIL:
	case MB_FN_WRITE_S_HOLDING:
		pduLen = mb_process_pdu_write_single_fn(mb_repl_buf, mb_req_buf, req_buf_len);
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f000 f876 	bl	8003cae <mb_process_pdu_write_single_fn>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	82fb      	strh	r3, [r7, #22]
		break;
 8003bc6:	e009      	b.n	8003bdc <mb_process+0x82>
	case MB_FN_WRITE_M_COIL:
	case MB_FN_WRITE_M_HOLDING:
		//mb_process_write_fn(mb_repl_buf, mb_req_buf, req_buf_len);
		break;
	default:
		pduLen = mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_FN_UNSUPPORTED);
 8003bc8:	7d7b      	ldrb	r3, [r7, #21]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4619      	mov	r1, r3
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f972 	bl	8003eb8 <mb_process_err>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	82fb      	strh	r3, [r7, #22]
		break;
 8003bd8:	e000      	b.n	8003bdc <mb_process+0x82>
		break;
 8003bda:	bf00      	nop
	}

	mb_repl_buf[MB_MBAP_LEN_H] = (pduLen + 1) >> 8;
 8003bdc:	8afb      	ldrh	r3, [r7, #22]
 8003bde:	3301      	adds	r3, #1
 8003be0:	121a      	asrs	r2, r3, #8
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	3304      	adds	r3, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_LEN_L] = (pduLen + 1) & 0xff;
 8003bea:	8afb      	ldrh	r3, [r7, #22]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3305      	adds	r3, #5
 8003bf2:	3201      	adds	r2, #1
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

	return (pduLen + MB_MBAP_SIZE);
 8003bf8:	8afb      	ldrh	r3, [r7, #22]
 8003bfa:	3307      	adds	r3, #7
 8003bfc:	b29b      	uxth	r3, r3
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <mb_process_pdu_read_fn>:

static uint16_t mb_process_pdu_read_fn(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	3307      	adds	r3, #7
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	75fb      	strb	r3, [r7, #23]
	uint16_t start_address = mb_req_buf[MB_PDU_R_ST_ADDR_L] + (mb_req_buf[MB_PDU_R_ST_ADDR_H] << 8);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3309      	adds	r3, #9
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	3308      	adds	r3, #8
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	82bb      	strh	r3, [r7, #20]
	uint16_t quantity = mb_req_buf[MB_PDU_R_QUANTITY_L] + (mb_req_buf[MB_PDU_R_QUANTITY_H] << 8);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	330b      	adds	r3, #11
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	330a      	adds	r3, #10
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	4413      	add	r3, r2
 8003c4a:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, start_address, quantity) != MB_EXCEPTION_OK) {
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	8a7a      	ldrh	r2, [r7, #18]
 8003c52:	8ab9      	ldrh	r1, [r7, #20]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 f8b1 	bl	8003dbc <mb_process_start_address>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <mb_process_pdu_read_fn+0x6a>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4619      	mov	r1, r3
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f926 	bl	8003eb8 <mb_process_err>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	e01a      	b.n	8003ca6 <mb_process_pdu_read_fn+0xa0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3307      	adds	r3, #7
 8003c74:	7dfa      	ldrb	r2, [r7, #23]
 8003c76:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_REPL_N] = mb_pdu_calculate_N(fn, quantity);
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8a7a      	ldrh	r2, [r7, #18]
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 f934 	bl	8003eee <mb_pdu_calculate_N>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
//			read_inputs(mb_req_buf, start_address, quantity);
//			break;
//		}

	}
	return mb_pdu_calculate_N(fn, quantity) + 2; // returns PDU size where +2 are N and fn
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	8a7a      	ldrh	r2, [r7, #18]
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f927 	bl	8003eee <mb_pdu_calculate_N>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	b29b      	uxth	r3, r3
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <mb_process_pdu_write_single_fn>:

static uint16_t mb_process_pdu_write_single_fn(char *mb_repl_buf, char *mb_req_buf, uint16_t req_buf_len) {
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
	uint8_t fn = mb_req_buf[MB_PDU_FN];
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	3307      	adds	r3, #7
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	75fb      	strb	r3, [r7, #23]
	uint16_t address = mb_req_buf[MB_PDU_W_REG_ADDR_L] + (mb_req_buf[MB_PDU_W_REG_ADDR_H] << 8);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3309      	adds	r3, #9
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3308      	adds	r3, #8
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	82bb      	strh	r3, [r7, #20]
	uint16_t valToWrite = mb_req_buf[MB_PDU_W_REG_VAL_L] + (mb_req_buf[MB_PDU_W_REG_VAL_H] << 8);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	330b      	adds	r3, #11
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	330a      	adds	r3, #10
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	4413      	add	r3, r2
 8003cf2:	827b      	strh	r3, [r7, #18]

	if (mb_process_start_address(fn, address, 1) != MB_EXCEPTION_OK) {
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8ab9      	ldrh	r1, [r7, #20]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f85d 	bl	8003dbc <mb_process_start_address>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <mb_process_pdu_write_single_fn+0x6a>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_ADDR);
 8003d08:	7dfb      	ldrb	r3, [r7, #23]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f8d2 	bl	8003eb8 <mb_process_err>
 8003d14:	4603      	mov	r3, r0
 8003d16:	e02a      	b.n	8003d6e <mb_process_pdu_write_single_fn+0xc0>
	} else if (mb_process_val(fn, valToWrite) != MB_EXCEPTION_OK) {
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	8a7a      	ldrh	r2, [r7, #18]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 f8ab 	bl	8003e7c <mb_process_val>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d007      	beq.n	8003d3c <mb_process_pdu_write_single_fn+0x8e>
		return mb_process_err(mb_repl_buf, fn, MB_EXCEPTION_DATA_VAL);
 8003d2c:	7dfb      	ldrb	r3, [r7, #23]
 8003d2e:	2203      	movs	r2, #3
 8003d30:	4619      	mov	r1, r3
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 f8c0 	bl	8003eb8 <mb_process_err>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	e018      	b.n	8003d6e <mb_process_pdu_write_single_fn+0xc0>
	} else { // form PDU content
		mb_repl_buf[MB_PDU_FN] = fn;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3307      	adds	r3, #7
 8003d40:	7dfa      	ldrb	r2, [r7, #23]
 8003d42:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_H] = mb_req_buf[MB_PDU_W_REG_ADDR_H];
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3308      	adds	r3, #8
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	7a12      	ldrb	r2, [r2, #8]
 8003d4c:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_ADDR_L] = mb_req_buf[MB_PDU_W_REG_ADDR_L];
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3309      	adds	r3, #9
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	7a52      	ldrb	r2, [r2, #9]
 8003d56:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_H] = mb_req_buf[MB_PDU_W_REG_VAL_H];
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	330a      	adds	r3, #10
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	7a92      	ldrb	r2, [r2, #10]
 8003d60:	701a      	strb	r2, [r3, #0]
		mb_repl_buf[MB_PDU_W_REG_VAL_L] = mb_req_buf[MB_PDU_W_REG_VAL_L];
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	330b      	adds	r3, #11
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	7ad2      	ldrb	r2, [r2, #11]
 8003d6a:	701a      	strb	r2, [r3, #0]

//		if(fn == MB_FN_WRITE_S_COIL) write_single_coil(address, valToWrite);
//		if(fn == MB_FN_WRITE_S_HOLDING) write_single_holding(address, valToWrite);
	}
	return 5; // PDU size for write single XXX command
 8003d6c:	2305      	movs	r3, #5
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <mb_mbap_copy>:

static void mb_mbap_copy(char *mb_repl_buf, char *mb_req_buf) {
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_H] = mb_req_buf[MB_MBAP_TRANSACTION_ID_H];
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781a      	ldrb	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_TRANSACTION_ID_L] = mb_req_buf[MB_MBAP_TRANSACTION_ID_L];
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	7852      	ldrb	r2, [r2, #1]
 8003d90:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_H] = mb_req_buf[MB_MBAP_PROTOCOL_ID_H];
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3302      	adds	r3, #2
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	7892      	ldrb	r2, [r2, #2]
 8003d9a:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_PROTOCOL_ID_L] = mb_req_buf[MB_MBAP_PROTOCOL_ID_L];
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3303      	adds	r3, #3
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	78d2      	ldrb	r2, [r2, #3]
 8003da4:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_MBAP_CLIENT_ID] = mb_req_buf[MB_MBAP_CLIENT_ID];
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3306      	adds	r3, #6
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	7992      	ldrb	r2, [r2, #6]
 8003dae:	701a      	strb	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <mb_process_start_address>:

static uint8_t mb_process_start_address(uint16_t fn, uint16_t start_address, uint16_t quantity) {
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	80fb      	strh	r3, [r7, #6]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	80bb      	strh	r3, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	807b      	strh	r3, [r7, #2]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	2b05      	cmp	r3, #5
 8003dd8:	d849      	bhi.n	8003e6e <mb_process_start_address+0xb2>
 8003dda:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <mb_process_start_address+0x24>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df9 	.word	0x08003df9
 8003de4:	08003e09 	.word	0x08003e09
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e29 	.word	0x08003e29
 8003df0:	08003e39 	.word	0x08003e39
 8003df4:	08003e49 	.word	0x08003e49
	case MB_FN_READ_COILS:
		if ((start_address + quantity) > MB_COILS_Q)
 8003df8:	88ba      	ldrh	r2, [r7, #4]
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	2bff      	cmp	r3, #255	; 0xff
 8003e00:	dd2a      	ble.n	8003e58 <mb_process_start_address+0x9c>
			exception_code = 2;
 8003e02:	2302      	movs	r3, #2
 8003e04:	73fb      	strb	r3, [r7, #15]
		break;
 8003e06:	e027      	b.n	8003e58 <mb_process_start_address+0x9c>
	case MB_FN_READ_DISCRETE:
		if ((start_address + quantity) > MB_DISCRETE_Q)
 8003e08:	88ba      	ldrh	r2, [r7, #4]
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	dd24      	ble.n	8003e5c <mb_process_start_address+0xa0>
			exception_code = 2;
 8003e12:	2302      	movs	r3, #2
 8003e14:	73fb      	strb	r3, [r7, #15]
		break;
 8003e16:	e021      	b.n	8003e5c <mb_process_start_address+0xa0>
	case MB_FN_READ_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8003e18:	88ba      	ldrh	r2, [r7, #4]
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	dd1e      	ble.n	8003e60 <mb_process_start_address+0xa4>
			exception_code = 2;
 8003e22:	2302      	movs	r3, #2
 8003e24:	73fb      	strb	r3, [r7, #15]
		break;
 8003e26:	e01b      	b.n	8003e60 <mb_process_start_address+0xa4>
	case MB_FN_READ_INPUT:
		if ((start_address + quantity) > MB_INPUT_Q)
 8003e28:	88ba      	ldrh	r2, [r7, #4]
 8003e2a:	887b      	ldrh	r3, [r7, #2]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dd18      	ble.n	8003e64 <mb_process_start_address+0xa8>
			exception_code = 2;
 8003e32:	2302      	movs	r3, #2
 8003e34:	73fb      	strb	r3, [r7, #15]
		break;
 8003e36:	e015      	b.n	8003e64 <mb_process_start_address+0xa8>

	case MB_FN_WRITE_S_COIL:
		if ((start_address + quantity) > MB_COILS_Q)
 8003e38:	88ba      	ldrh	r2, [r7, #4]
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	2bff      	cmp	r3, #255	; 0xff
 8003e40:	dd12      	ble.n	8003e68 <mb_process_start_address+0xac>
			exception_code = 2;
 8003e42:	2302      	movs	r3, #2
 8003e44:	73fb      	strb	r3, [r7, #15]
		break;
 8003e46:	e00f      	b.n	8003e68 <mb_process_start_address+0xac>
	case MB_FN_WRITE_S_HOLDING:
		if ((start_address + quantity) > MB_HOLDING_Q)
 8003e48:	88ba      	ldrh	r2, [r7, #4]
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	dd0c      	ble.n	8003e6c <mb_process_start_address+0xb0>
			exception_code = 2;
 8003e52:	2302      	movs	r3, #2
 8003e54:	73fb      	strb	r3, [r7, #15]
		break;
 8003e56:	e009      	b.n	8003e6c <mb_process_start_address+0xb0>
		break;
 8003e58:	bf00      	nop
 8003e5a:	e008      	b.n	8003e6e <mb_process_start_address+0xb2>
		break;
 8003e5c:	bf00      	nop
 8003e5e:	e006      	b.n	8003e6e <mb_process_start_address+0xb2>
		break;
 8003e60:	bf00      	nop
 8003e62:	e004      	b.n	8003e6e <mb_process_start_address+0xb2>
		break;
 8003e64:	bf00      	nop
 8003e66:	e002      	b.n	8003e6e <mb_process_start_address+0xb2>
		break;
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <mb_process_start_address+0xb2>
		break;
 8003e6c:	bf00      	nop
	}
	return exception_code;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <mb_process_val>:

static uint8_t mb_process_val(uint16_t fn, uint16_t val) {
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	460a      	mov	r2, r1
 8003e86:	80fb      	strh	r3, [r7, #6]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	80bb      	strh	r3, [r7, #4]
	uint8_t exception_code = MB_EXCEPTION_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
	switch (fn) {
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d109      	bne.n	8003eaa <mb_process_val+0x2e>
	case MB_FN_WRITE_S_COIL:
		if ((val != 0xFF00) && (val != 0x0000))
 8003e96:	88bb      	ldrh	r3, [r7, #4]
 8003e98:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8003e9c:	d004      	beq.n	8003ea8 <mb_process_val+0x2c>
 8003e9e:	88bb      	ldrh	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <mb_process_val+0x2c>
			exception_code = 3;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	73fb      	strb	r3, [r7, #15]
		break;
 8003ea8:	bf00      	nop
	}
	return exception_code;
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <mb_process_err>:

static uint16_t mb_process_err(char *mb_repl_buf, uint8_t fn, uint16_t exceptionCode) {
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	803b      	strh	r3, [r7, #0]
	mb_repl_buf[MB_PDU_FN] = fn | 0x80;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3307      	adds	r3, #7
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	701a      	strb	r2, [r3, #0]
	mb_repl_buf[MB_PDU_EXCEPTION_CODE] = exceptionCode;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3308      	adds	r3, #8
 8003eda:	883a      	ldrh	r2, [r7, #0]
 8003edc:	b2d2      	uxtb	r2, r2
 8003ede:	701a      	strb	r2, [r3, #0]
	return 2;
 8003ee0:	2302      	movs	r3, #2
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <mb_pdu_calculate_N>:

static uint16_t mb_pdu_calculate_N(uint16_t fn, uint16_t quantity) {
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	460a      	mov	r2, r1
 8003ef8:	80fb      	strh	r3, [r7, #6]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80bb      	strh	r3, [r7, #4]
	switch (fn) {
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	dc02      	bgt.n	8003f0a <mb_pdu_calculate_N+0x1c>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	dc04      	bgt.n	8003f12 <mb_pdu_calculate_N+0x24>
 8003f08:	e017      	b.n	8003f3a <mb_pdu_calculate_N+0x4c>
 8003f0a:	3b03      	subs	r3, #3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d814      	bhi.n	8003f3a <mb_pdu_calculate_N+0x4c>
 8003f10:	e00f      	b.n	8003f32 <mb_pdu_calculate_N+0x44>
	case MB_FN_READ_COILS:
	case MB_FN_READ_DISCRETE:
		if (quantity % 8 != 0)
 8003f12:	88bb      	ldrh	r3, [r7, #4]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <mb_pdu_calculate_N+0x3c>
			return ((quantity / 8) + 1);
 8003f1e:	88bb      	ldrh	r3, [r7, #4]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3301      	adds	r3, #1
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	e008      	b.n	8003f3c <mb_pdu_calculate_N+0x4e>
		else
			return (quantity / 8);
 8003f2a:	88bb      	ldrh	r3, [r7, #4]
 8003f2c:	08db      	lsrs	r3, r3, #3
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	e004      	b.n	8003f3c <mb_pdu_calculate_N+0x4e>
		break;
	case MB_FN_READ_HOLDING:
	case MB_FN_READ_INPUT:
		return quantity * 2;
 8003f32:	88bb      	ldrh	r3, [r7, #4]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	e000      	b.n	8003f3c <mb_pdu_calculate_N+0x4e>
		break;
	default:
		return 0;
 8003f3a:	2300      	movs	r3, #0
	}
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f4e:	4b11      	ldr	r3, [pc, #68]	; (8003f94 <HAL_MspInit+0x4c>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	4a10      	ldr	r2, [pc, #64]	; (8003f94 <HAL_MspInit+0x4c>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	; 0x40
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_MspInit+0x4c>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_MspInit+0x4c>)
 8003f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6a:	4a0a      	ldr	r2, [pc, #40]	; (8003f94 <HAL_MspInit+0x4c>)
 8003f6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f70:	6453      	str	r3, [r2, #68]	; 0x44
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <HAL_MspInit+0x4c>)
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	210f      	movs	r1, #15
 8003f82:	f06f 0001 	mvn.w	r0, #1
 8003f86:	f000 fcd0 	bl	800492a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023800 	.word	0x40023800

08003f98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b0ae      	sub	sp, #184	; 0xb8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	605a      	str	r2, [r3, #4]
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	60da      	str	r2, [r3, #12]
 8003fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003fb0:	f107 0320 	add.w	r3, r7, #32
 8003fb4:	2284      	movs	r2, #132	; 0x84
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f015 fea6 	bl	8019d0a <memset>
  if(hltdc->Instance==LTDC)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a72      	ldr	r2, [pc, #456]	; (800418c <HAL_LTDC_MspInit+0x1f4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f040 80dc 	bne.w	8004182 <HAL_LTDC_MspInit+0x1ea>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003fca:	2308      	movs	r3, #8
 8003fcc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8003fce:	2332      	movs	r3, #50	; 0x32
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe6:	f107 0320 	add.w	r3, r7, #32
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 f9a2 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8003ff6:	f7ff fdab 	bl	8003b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	4a64      	ldr	r2, [pc, #400]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004000:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004004:	6453      	str	r3, [r2, #68]	; 0x44
 8004006:	4b62      	ldr	r3, [pc, #392]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004012:	4b5f      	ldr	r3, [pc, #380]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004018:	f043 0310 	orr.w	r3, r3, #16
 800401c:	6313      	str	r3, [r2, #48]	; 0x30
 800401e:	4b5c      	ldr	r3, [pc, #368]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800402a:	4b59      	ldr	r3, [pc, #356]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004030:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b56      	ldr	r3, [pc, #344]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004042:	4b53      	ldr	r3, [pc, #332]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004048:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b50      	ldr	r3, [pc, #320]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800405a:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a4c      	ldr	r2, [pc, #304]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004072:	4b47      	ldr	r3, [pc, #284]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4a46      	ldr	r2, [pc, #280]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	6313      	str	r3, [r2, #48]	; 0x30
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <HAL_LTDC_MspInit+0x1f8>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	60bb      	str	r3, [r7, #8]
 8004088:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800408a:	2310      	movs	r3, #16
 800408c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004090:	2302      	movs	r3, #2
 8004092:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040a2:	230e      	movs	r3, #14
 80040a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80040a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040ac:	4619      	mov	r1, r3
 80040ae:	4839      	ldr	r0, [pc, #228]	; (8004194 <HAL_LTDC_MspInit+0x1fc>)
 80040b0:	f001 feda 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80040b4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80040b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040ce:	230e      	movs	r3, #14
 80040d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80040d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80040d8:	4619      	mov	r1, r3
 80040da:	482f      	ldr	r0, [pc, #188]	; (8004198 <HAL_LTDC_MspInit+0x200>)
 80040dc:	f001 fec4 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80040e0:	23f7      	movs	r3, #247	; 0xf7
 80040e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80040f8:	230e      	movs	r3, #14
 80040fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80040fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004102:	4619      	mov	r1, r3
 8004104:	4825      	ldr	r0, [pc, #148]	; (800419c <HAL_LTDC_MspInit+0x204>)
 8004106:	f001 feaf 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800410a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800410e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004124:	2309      	movs	r3, #9
 8004126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800412a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800412e:	4619      	mov	r1, r3
 8004130:	481b      	ldr	r0, [pc, #108]	; (80041a0 <HAL_LTDC_MspInit+0x208>)
 8004132:	f001 fe99 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004136:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800413a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413e:	2302      	movs	r3, #2
 8004140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004150:	230e      	movs	r3, #14
 8004152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800415a:	4619      	mov	r1, r3
 800415c:	4811      	ldr	r0, [pc, #68]	; (80041a4 <HAL_LTDC_MspInit+0x20c>)
 800415e:	f001 fe83 	bl	8005e68 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004162:	2200      	movs	r2, #0
 8004164:	2105      	movs	r1, #5
 8004166:	2058      	movs	r0, #88	; 0x58
 8004168:	f000 fbdf 	bl	800492a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800416c:	2058      	movs	r0, #88	; 0x58
 800416e:	f000 fbf8 	bl	8004962 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 5, 0);
 8004172:	2200      	movs	r2, #0
 8004174:	2105      	movs	r1, #5
 8004176:	2059      	movs	r0, #89	; 0x59
 8004178:	f000 fbd7 	bl	800492a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 800417c:	2059      	movs	r0, #89	; 0x59
 800417e:	f000 fbf0 	bl	8004962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004182:	bf00      	nop
 8004184:	37b8      	adds	r7, #184	; 0xb8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	40016800 	.word	0x40016800
 8004190:	40023800 	.word	0x40023800
 8004194:	40021000 	.word	0x40021000
 8004198:	40022400 	.word	0x40022400
 800419c:	40022800 	.word	0x40022800
 80041a0:	40021800 	.word	0x40021800
 80041a4:	40022000 	.word	0x40022000

080041a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041ac:	e7fe      	b.n	80041ac <NMI_Handler+0x4>
	...

080041b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    uint8_t reason = *((uint8_t*)0xE000ED2A);
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HardFault_Handler+0x1c>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	71fb      	strb	r3, [r7, #7]
    print_string(10, 40, "HARDFAULT!", 0x797);
 80041bc:	f240 7397 	movw	r3, #1943	; 0x797
 80041c0:	4a03      	ldr	r2, [pc, #12]	; (80041d0 <HardFault_Handler+0x20>)
 80041c2:	2128      	movs	r1, #40	; 0x28
 80041c4:	200a      	movs	r0, #10
 80041c6:	f7fd f9fb 	bl	80015c0 <print_string>
  {
 80041ca:	e7f4      	b.n	80041b6 <HardFault_Handler+0x6>
 80041cc:	e000ed2a 	.word	0xe000ed2a
 80041d0:	0801acd4 	.word	0x0801acd4

080041d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <MemManage_Handler+0x4>

080041da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041de:	e7fe      	b.n	80041de <BusFault_Handler+0x4>

080041e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041e4:	e7fe      	b.n	80041e4 <UsageFault_Handler+0x4>

080041e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041ea:	bf00      	nop
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  get_current_keyboard_state();
 80041f8:	f7fc fab0 	bl	800075c <get_current_keyboard_state>
  get_current_spinner_button_state();
 80041fc:	f7fc fd9a 	bl	8000d34 <get_current_spinner_button_state>
  get_spinner_position_change();
 8004200:	f7fc fdce 	bl	8000da0 <get_spinner_position_change>
  get_current_switch_state();
 8004204:	f7fc fe8a 	bl	8000f1c <get_current_switch_state>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004208:	f000 fa70 	bl	80046ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800420c:	f007 f988 	bl	800b520 <xTaskGetSchedulerState>
 8004210:	4603      	mov	r3, r0
 8004212:	2b01      	cmp	r3, #1
 8004214:	d001      	beq.n	800421a <SysTick_Handler+0x26>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004216:	f008 f867 	bl	800c2e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <ETH_IRQHandler+0x10>)
 8004226:	f000 ff45 	bl	80050b4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20046550 	.word	0x20046550

08004234 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <LTDC_IRQHandler+0x10>)
 800423a:	f002 f8c3 	bl	80063c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20041a94 	.word	0x20041a94

08004248 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <LTDC_ER_IRQHandler+0x10>)
 800424e:	f002 f8b9 	bl	80063c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20041a94 	.word	0x20041a94

0800425c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return 1;
 8004260:	2301      	movs	r3, #1
}
 8004262:	4618      	mov	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_kill>:

int _kill(int pid, int sig)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <_kill+0x20>)
 8004278:	2216      	movs	r2, #22
 800427a:	601a      	str	r2, [r3, #0]
  return -1;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2004f6f0 	.word	0x2004f6f0

08004290 <_exit>:

void _exit (int status)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff ffe5 	bl	800426c <_kill>
  while (1) {}    /* Make sure we hang here */
 80042a2:	e7fe      	b.n	80042a2 <_exit+0x12>

080042a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e00a      	b.n	80042cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042b6:	f3af 8000 	nop.w
 80042ba:	4601      	mov	r1, r0
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	60ba      	str	r2, [r7, #8]
 80042c2:	b2ca      	uxtb	r2, r1
 80042c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	3301      	adds	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	dbf0      	blt.n	80042b6 <_read+0x12>
  }

  return len;
 80042d4:	687b      	ldr	r3, [r7, #4]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e009      	b.n	8004304 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	60ba      	str	r2, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3301      	adds	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	dbf1      	blt.n	80042f0 <_write+0x12>
  }
  return len;
 800430c:	687b      	ldr	r3, [r7, #4]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <_close>:

int _close(int file)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800433e:	605a      	str	r2, [r3, #4]
  return 0;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <_isatty>:

int _isatty(int file)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004356:	2301      	movs	r3, #1
}
 8004358:	4618      	mov	r0, r3
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
	...

08004380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004388:	4a14      	ldr	r2, [pc, #80]	; (80043dc <_sbrk+0x5c>)
 800438a:	4b15      	ldr	r3, [pc, #84]	; (80043e0 <_sbrk+0x60>)
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <_sbrk+0x64>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <_sbrk+0x64>)
 800439e:	4a12      	ldr	r2, [pc, #72]	; (80043e8 <_sbrk+0x68>)
 80043a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043a2:	4b10      	ldr	r3, [pc, #64]	; (80043e4 <_sbrk+0x64>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d205      	bcs.n	80043bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80043b0:	4b0e      	ldr	r3, [pc, #56]	; (80043ec <_sbrk+0x6c>)
 80043b2:	220c      	movs	r2, #12
 80043b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ba:	e009      	b.n	80043d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <_sbrk+0x64>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <_sbrk+0x64>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4413      	add	r3, r2
 80043ca:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <_sbrk+0x64>)
 80043cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043ce:	68fb      	ldr	r3, [r7, #12]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	20050000 	.word	0x20050000
 80043e0:	00000400 	.word	0x00000400
 80043e4:	20041b44 	.word	0x20041b44
 80043e8:	2004f6f8 	.word	0x2004f6f8
 80043ec:	2004f6f0 	.word	0x2004f6f0

080043f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <SystemInit+0x20>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <SystemInit+0x20>)
 80043fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004404:	bf00      	nop
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	e000ed00 	.word	0xe000ed00

08004414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800444c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004418:	f7ff ffea 	bl	80043f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800441c:	480c      	ldr	r0, [pc, #48]	; (8004450 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800441e:	490d      	ldr	r1, [pc, #52]	; (8004454 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004420:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004424:	e002      	b.n	800442c <LoopCopyDataInit>

08004426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800442a:	3304      	adds	r3, #4

0800442c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800442c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800442e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004430:	d3f9      	bcc.n	8004426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004434:	4c0a      	ldr	r4, [pc, #40]	; (8004460 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004438:	e001      	b.n	800443e <LoopFillZerobss>

0800443a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800443a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800443c:	3204      	adds	r2, #4

0800443e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800443e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004440:	d3fb      	bcc.n	800443a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004442:	f015 fc1d 	bl	8019c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004446:	f7fe fe2b 	bl	80030a0 <main>
  bx  lr    
 800444a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800444c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004454:	20001ac0 	.word	0x20001ac0
  ldr r2, =_sidata
 8004458:	0801e4ec 	.word	0x0801e4ec
  ldr r2, =_sbss
 800445c:	20001c00 	.word	0x20001c00
  ldr r4, =_ebss
 8004460:	2004f6f4 	.word	0x2004f6f4

08004464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004464:	e7fe      	b.n	8004464 <ADC_IRQHandler>

08004466 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <LAN8742_RegisterBusIO+0x28>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d007      	beq.n	800448e <LAN8742_RegisterBusIO+0x28>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <LAN8742_RegisterBusIO+0x28>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d102      	bne.n	8004494 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004492:	e014      	b.n	80044be <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691a      	ldr	r2, [r3, #16]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d139      	bne.n	800455a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2220      	movs	r2, #32
 80044f8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	e01c      	b.n	800453a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f107 020c 	add.w	r2, r7, #12
 8004508:	2112      	movs	r1, #18
 800450a:	6978      	ldr	r0, [r7, #20]
 800450c:	4798      	blx	r3
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	da03      	bge.n	800451c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8004514:	f06f 0304 	mvn.w	r3, #4
 8004518:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800451a:	e00b      	b.n	8004534 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	429a      	cmp	r2, r3
 8004526:	d105      	bne.n	8004534 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	613b      	str	r3, [r7, #16]
         break;
 8004532:	e005      	b.n	8004540 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3301      	adds	r3, #1
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b1f      	cmp	r3, #31
 800453e:	d9df      	bls.n	8004500 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b1f      	cmp	r3, #31
 8004546:	d902      	bls.n	800454e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004548:	f06f 0302 	mvn.w	r3, #2
 800454c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d102      	bne.n	800455a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800455a:	693b      	ldr	r3, [r7, #16]
 }
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6810      	ldr	r0, [r2, #0]
 8004578:	f107 020c 	add.w	r2, r7, #12
 800457c:	2101      	movs	r1, #1
 800457e:	4798      	blx	r3
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	da02      	bge.n	800458c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004586:	f06f 0304 	mvn.w	r3, #4
 800458a:	e06e      	b.n	800466a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6810      	ldr	r0, [r2, #0]
 8004594:	f107 020c 	add.w	r2, r7, #12
 8004598:	2101      	movs	r1, #1
 800459a:	4798      	blx	r3
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	da02      	bge.n	80045a8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80045a2:	f06f 0304 	mvn.w	r3, #4
 80045a6:	e060      	b.n	800466a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e059      	b.n	800466a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6810      	ldr	r0, [r2, #0]
 80045be:	f107 020c 	add.w	r2, r7, #12
 80045c2:	2100      	movs	r1, #0
 80045c4:	4798      	blx	r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	da02      	bge.n	80045d2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80045cc:	f06f 0304 	mvn.w	r3, #4
 80045d0:	e04b      	b.n	800466a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11b      	bne.n	8004614 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d006      	beq.n	80045f4 <LAN8742_GetLinkState+0x90>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80045f0:	2302      	movs	r3, #2
 80045f2:	e03a      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80045fe:	2303      	movs	r3, #3
 8004600:	e033      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800460c:	2304      	movs	r3, #4
 800460e:	e02c      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004610:	2305      	movs	r3, #5
 8004612:	e02a      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6810      	ldr	r0, [r2, #0]
 800461c:	f107 020c 	add.w	r2, r7, #12
 8004620:	211f      	movs	r1, #31
 8004622:	4798      	blx	r3
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	da02      	bge.n	8004630 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800462a:	f06f 0304 	mvn.w	r3, #4
 800462e:	e01c      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800463a:	2306      	movs	r3, #6
 800463c:	e015      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 031c 	and.w	r3, r3, #28
 8004644:	2b18      	cmp	r3, #24
 8004646:	d101      	bne.n	800464c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004648:	2302      	movs	r3, #2
 800464a:	e00e      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 031c 	and.w	r3, r3, #28
 8004652:	2b08      	cmp	r3, #8
 8004654:	d101      	bne.n	800465a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004656:	2303      	movs	r3, #3
 8004658:	e007      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f003 031c 	and.w	r3, r3, #28
 8004660:	2b14      	cmp	r3, #20
 8004662:	d101      	bne.n	8004668 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004664:	2304      	movs	r3, #4
 8004666:	e000      	b.n	800466a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004668:	2305      	movs	r3, #5
    }
  }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004676:	2003      	movs	r0, #3
 8004678:	f000 f94c 	bl	8004914 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800467c:	200f      	movs	r0, #15
 800467e:	f000 f805 	bl	800468c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004682:	f7ff fc61 	bl	8003f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_InitTick+0x54>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_InitTick+0x58>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4619      	mov	r1, r3
 800469e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80046a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f967 	bl	800497e <HAL_SYSTICK_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00e      	b.n	80046d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b0f      	cmp	r3, #15
 80046be:	d80a      	bhi.n	80046d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046c0:	2200      	movs	r2, #0
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046c8:	f000 f92f 	bl	800492a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046cc:	4a06      	ldr	r2, [pc, #24]	; (80046e8 <HAL_InitTick+0x5c>)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20001a2c 	.word	0x20001a2c
 80046e4:	20001a34 	.word	0x20001a34
 80046e8:	20001a30 	.word	0x20001a30

080046ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046ec:	b480      	push	{r7}
 80046ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_IncTick+0x20>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_IncTick+0x24>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4413      	add	r3, r2
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HAL_IncTick+0x24>)
 80046fe:	6013      	str	r3, [r2, #0]
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20001a34 	.word	0x20001a34
 8004710:	20041b48 	.word	0x20041b48

08004714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return uwTick;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_GetTick+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20041b48 	.word	0x20041b48

0800472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7ff ffee 	bl	8004714 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004744:	d005      	beq.n	8004752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <HAL_Delay+0x44>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004752:	bf00      	nop
 8004754:	f7ff ffde 	bl	8004714 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d8f7      	bhi.n	8004754 <HAL_Delay+0x28>
  {
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20001a34 	.word	0x20001a34

08004774 <__NVIC_SetPriorityGrouping>:
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <__NVIC_SetPriorityGrouping+0x40>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004790:	4013      	ands	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <__NVIC_SetPriorityGrouping+0x44>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <__NVIC_SetPriorityGrouping+0x40>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	60d3      	str	r3, [r2, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00
 80047b8:	05fa0000 	.word	0x05fa0000

080047bc <__NVIC_GetPriorityGrouping>:
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <__NVIC_GetPriorityGrouping+0x18>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 0307 	and.w	r3, r3, #7
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <__NVIC_EnableIRQ>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	db0b      	blt.n	8004802 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047ea:	79fb      	ldrb	r3, [r7, #7]
 80047ec:	f003 021f 	and.w	r2, r3, #31
 80047f0:	4907      	ldr	r1, [pc, #28]	; (8004810 <__NVIC_EnableIRQ+0x38>)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	2001      	movs	r0, #1
 80047fa:	fa00 f202 	lsl.w	r2, r0, r2
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e100 	.word	0xe000e100

08004814 <__NVIC_SetPriority>:
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	6039      	str	r1, [r7, #0]
 800481e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	2b00      	cmp	r3, #0
 8004826:	db0a      	blt.n	800483e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	b2da      	uxtb	r2, r3
 800482c:	490c      	ldr	r1, [pc, #48]	; (8004860 <__NVIC_SetPriority+0x4c>)
 800482e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004832:	0112      	lsls	r2, r2, #4
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	440b      	add	r3, r1
 8004838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800483c:	e00a      	b.n	8004854 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4908      	ldr	r1, [pc, #32]	; (8004864 <__NVIC_SetPriority+0x50>)
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	3b04      	subs	r3, #4
 800484c:	0112      	lsls	r2, r2, #4
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	440b      	add	r3, r1
 8004852:	761a      	strb	r2, [r3, #24]
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	e000e100 	.word	0xe000e100
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <NVIC_EncodePriority>:
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	; 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 0307 	and.w	r3, r3, #7
 800487a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f1c3 0307 	rsb	r3, r3, #7
 8004882:	2b04      	cmp	r3, #4
 8004884:	bf28      	it	cs
 8004886:	2304      	movcs	r3, #4
 8004888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	3304      	adds	r3, #4
 800488e:	2b06      	cmp	r3, #6
 8004890:	d902      	bls.n	8004898 <NVIC_EncodePriority+0x30>
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	3b03      	subs	r3, #3
 8004896:	e000      	b.n	800489a <NVIC_EncodePriority+0x32>
 8004898:	2300      	movs	r3, #0
 800489a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800489c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	401a      	ands	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ba:	43d9      	mvns	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048c0:	4313      	orrs	r3, r2
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3724      	adds	r7, #36	; 0x24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
	...

080048d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3b01      	subs	r3, #1
 80048dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048e0:	d301      	bcc.n	80048e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048e2:	2301      	movs	r3, #1
 80048e4:	e00f      	b.n	8004906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048e6:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <SysTick_Config+0x40>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048ee:	210f      	movs	r1, #15
 80048f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f4:	f7ff ff8e 	bl	8004814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <SysTick_Config+0x40>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048fe:	4b04      	ldr	r3, [pc, #16]	; (8004910 <SysTick_Config+0x40>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	e000e010 	.word	0xe000e010

08004914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff29 	bl	8004774 <__NVIC_SetPriorityGrouping>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800493c:	f7ff ff3e 	bl	80047bc <__NVIC_GetPriorityGrouping>
 8004940:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	6978      	ldr	r0, [r7, #20]
 8004948:	f7ff ff8e 	bl	8004868 <NVIC_EncodePriority>
 800494c:	4602      	mov	r2, r0
 800494e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff ff5d 	bl	8004814 <__NVIC_SetPriority>
}
 800495a:	bf00      	nop
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b082      	sub	sp, #8
 8004966:	af00      	add	r7, sp, #0
 8004968:	4603      	mov	r3, r0
 800496a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800496c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff ff31 	bl	80047d8 <__NVIC_EnableIRQ>
}
 8004976:	bf00      	nop
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff ffa2 	bl	80048d0 <SysTick_Config>
 800498c:	4603      	mov	r3, r0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e086      	b.n	8004ab8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2223      	movs	r2, #35	; 0x23
 80049b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f003 fccb 	bl	8008358 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c2:	4b3f      	ldr	r3, [pc, #252]	; (8004ac0 <HAL_ETH_Init+0x128>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	4a3e      	ldr	r2, [pc, #248]	; (8004ac0 <HAL_ETH_Init+0x128>)
 80049c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049cc:	6453      	str	r3, [r2, #68]	; 0x44
 80049ce:	4b3c      	ldr	r3, [pc, #240]	; (8004ac0 <HAL_ETH_Init+0x128>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80049da:	4b3a      	ldr	r3, [pc, #232]	; (8004ac4 <HAL_ETH_Init+0x12c>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	4a39      	ldr	r2, [pc, #228]	; (8004ac4 <HAL_ETH_Init+0x12c>)
 80049e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80049e6:	4b37      	ldr	r3, [pc, #220]	; (8004ac4 <HAL_ETH_Init+0x12c>)
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4935      	ldr	r1, [pc, #212]	; (8004ac4 <HAL_ETH_Init+0x12c>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80049f4:	4b33      	ldr	r3, [pc, #204]	; (8004ac4 <HAL_ETH_Init+0x12c>)
 80049f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a10:	f7ff fe80 	bl	8004714 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004a16:	e011      	b.n	8004a3c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004a18:	f7ff fe7c 	bl	8004714 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a26:	d909      	bls.n	8004a3c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	22e0      	movs	r2, #224	; 0xe0
 8004a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e03d      	b.n	8004ab8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e4      	bne.n	8004a18 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 ff4e 	bl	80058f0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fff9 	bl	8005a4c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f001 f84f 	bl	8005afe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	461a      	mov	r2, r3
 8004a66:	2100      	movs	r1, #0
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 ffb7 	bl	80059dc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8004a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <HAL_ETH_Init+0x130>)
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004aa2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40013800 	.word	0x40013800
 8004ac8:	00020060 	.word	0x00020060

08004acc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	d15f      	bne.n	8004b9e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2223      	movs	r2, #35	; 0x23
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2204      	movs	r2, #4
 8004af0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f9f6 	bl	8004ee4 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b00:	2001      	movs	r0, #1
 8004b02:	f7ff fe13 	bl	800472c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b24:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b3c:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fd73 	bl	800562a <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0208 	orr.w	r2, r2, #8
 8004b52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b5c:	2001      	movs	r0, #1
 8004b5e:	f7ff fde5 	bl	800472c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0204 	orr.w	r2, r2, #4
 8004b78:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b82:	69d9      	ldr	r1, [r3, #28]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_ETH_Start_IT+0xdc>)
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b90:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2223      	movs	r2, #35	; 0x23
 8004b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e000      	b.n	8004ba0 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
  }
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	0001a0c1 	.word	0x0001a0c1

08004bac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bba:	2b23      	cmp	r3, #35	; 0x23
 8004bbc:	d16e      	bne.n	8004c9c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2223      	movs	r2, #35	; 0x23
 8004bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bce:	69d9      	ldr	r1, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <HAL_ETH_Stop_IT+0xfc>)
 8004bd6:	400b      	ands	r3, r1
 8004bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bdc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bf4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	f023 0302 	bic.w	r3, r3, #2
 8004c08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c0c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c26:	2001      	movs	r0, #1
 8004c28:	f7ff fd80 	bl	800472c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fcf8 	bl	800562a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0208 	bic.w	r2, r2, #8
 8004c48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f7ff fd6a 	bl	800472c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004c60:	2300      	movs	r3, #0
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	e00e      	b.n	8004c84 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	697a      	ldr	r2, [r7, #20]
 8004c6a:	3212      	adds	r2, #18
 8004c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c70:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d9ed      	bls.n	8004c66 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2210      	movs	r2, #16
 8004c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	e000      	b.n	8004c9e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	fffe5f3e 	.word	0xfffe5f3e

08004cac <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d109      	bne.n	8004cd0 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e045      	b.n	8004d5c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd6:	2b23      	cmp	r3, #35	; 0x23
 8004cd8:	d13f      	bne.n	8004d5a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 ff78 	bl	8005bdc <ETH_Prepare_Tx_Descriptors>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f043 0202 	orr.w	r2, r3, #2
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e02a      	b.n	8004d5c <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8004d06:	f3bf 8f4f 	dsb	sy
}
 8004d0a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d904      	bls.n	8004d28 <HAL_ETH_Transmit_IT+0x7c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d22:	1f1a      	subs	r2, r3, #4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d42:	461a      	mov	r2, r3
 8004d44:	2304      	movs	r3, #4
 8004d46:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	461a      	mov	r2, r3
 8004d52:	2300      	movs	r3, #0
 8004d54:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f043 0201 	orr.w	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0a4      	b.n	8004eda <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d96:	2b23      	cmp	r3, #35	; 0x23
 8004d98:	d001      	beq.n	8004d9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e09d      	b.n	8004eda <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	3212      	adds	r2, #18
 8004daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004db4:	f1c3 0304 	rsb	r3, r3, #4
 8004db8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004dba:	e066      	b.n	8004e8a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	69da      	ldr	r2, [r3, #28]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	699a      	ldr	r2, [r3, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <HAL_ETH_ReadData+0x88>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d03c      	beq.n	8004e66 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004e0e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004e24:	2301      	movs	r3, #1
 8004e26:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004e40:	461a      	mov	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f003 fc35 	bl	80086b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	441a      	add	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2200      	movs	r2, #0
 8004e64:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d902      	bls.n	8004e78 <HAL_ETH_ReadData+0x114>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3b04      	subs	r3, #4
 8004e76:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	3212      	adds	r2, #18
 8004e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e82:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3301      	adds	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	db06      	blt.n	8004ea0 <HAL_ETH_ReadData+0x13c>
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d202      	bcs.n	8004ea0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d08d      	beq.n	8004dbc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f815 	bl	8004ee4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69fa      	ldr	r2, [r7, #28]
 8004ebe:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004ec0:	7cfb      	ldrb	r3, [r7, #19]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d108      	bne.n	8004ed8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	e000      	b.n	8004eda <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ef8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	3212      	adds	r2, #18
 8004f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f04:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f0a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004f0c:	e042      	b.n	8004f94 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d112      	bne.n	8004f3c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004f16:	f107 0308 	add.w	r3, r7, #8
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f003 fb9a 	bl	8008654 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d102      	bne.n	8004f2c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	74fb      	strb	r3, [r7, #19]
 8004f2a:	e007      	b.n	8004f3c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	461a      	mov	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d028      	beq.n	8004f94 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	4b26      	ldr	r3, [pc, #152]	; (8004fe8 <ETH_UpdateDescriptor+0x104>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	6053      	str	r3, [r2, #4]
 8004f56:	e005      	b.n	8004f64 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3301      	adds	r3, #1
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d902      	bls.n	8004f82 <ETH_UpdateDescriptor+0x9e>
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3b04      	subs	r3, #4
 8004f80:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	3212      	adds	r2, #18
 8004f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f8c:	617b      	str	r3, [r7, #20]
      desccount--;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <ETH_UpdateDescriptor+0xbc>
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1b6      	bne.n	8004f0e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d01a      	beq.n	8004fe0 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	3301      	adds	r3, #1
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004fb4:	f3bf 8f5f 	dmb	sy
}
 8004fb8:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6919      	ldr	r1, [r3, #16]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	18ca      	adds	r2, r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd2:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004fe0:	bf00      	nop
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	80004000 	.word	0x80004000

08004fec <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3318      	adds	r3, #24
 8004ff8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800500a:	e047      	b.n	800509c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800500c:	2301      	movs	r3, #1
 800500e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	3b01      	subs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10a      	bne.n	800503c <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3301      	adds	r3, #1
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d902      	bls.n	8005038 <HAL_ETH_ReleaseTxPacket+0x4c>
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	3b04      	subs	r3, #4
 8005036:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800503c:	7bbb      	ldrb	r3, [r7, #14]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d02c      	beq.n	800509c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	440b      	add	r3, r1
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db1f      	blt.n	8005098 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	3304      	adds	r3, #4
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4618      	mov	r0, r3
 8005066:	f003 fb67 	bl	8008738 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	3304      	adds	r3, #4
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3301      	adds	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d902      	bls.n	800508a <HAL_ETH_ReleaseTxPacket+0x9e>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	3b04      	subs	r3, #4
 8005088:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	62da      	str	r2, [r3, #44]	; 0x2c
 8005096:	e001      	b.n	800509c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <HAL_ETH_ReleaseTxPacket+0xbc>
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d1b1      	bne.n	800500c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
	...

080050b4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c2:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80050dc:	4b4b      	ldr	r3, [pc, #300]	; (800520c <HAL_ETH_IRQHandler+0x158>)
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00e      	beq.n	800510a <HAL_ETH_IRQHandler+0x56>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fe:	461a      	mov	r2, r3
 8005100:	4b43      	ldr	r3, [pc, #268]	; (8005210 <HAL_ETH_IRQHandler+0x15c>)
 8005102:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f002 fe89 	bl	8007e1c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00f      	beq.n	8005134 <HAL_ETH_IRQHandler+0x80>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005126:	461a      	mov	r2, r3
 8005128:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800512c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f002 fe84 	bl	8007e3c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d042      	beq.n	80051c4 <HAL_ETH_IRQHandler+0x110>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03d      	beq.n	80051c4 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514e:	f043 0208 	orr.w	r2, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d01a      	beq.n	8005198 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_ETH_IRQHandler+0x160>)
 800516e:	4013      	ands	r3, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8005188:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800518c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	22e0      	movs	r2, #224	; 0xe0
 8005192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005196:	e012      	b.n	80051be <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	f248 6380 	movw	r3, #34432	; 0x8680
 80051a6:	4013      	ands	r3, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051b6:	461a      	mov	r2, r3
 80051b8:	f248 6380 	movw	r3, #34432	; 0x8680
 80051bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f002 fe4c 	bl	8007e5c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00e      	beq.n	80051ec <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f81a 	bl	8005218 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_ETH_IRQHandler+0x158>)
 80051f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80051fc:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f814 	bl	800522c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40013c00 	.word	0x40013c00
 8005210:	00010040 	.word	0x00010040
 8005214:	007e2000 	.word	0x007e2000

08005218 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 031c 	and.w	r3, r3, #28
 800525c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	02db      	lsls	r3, r3, #11
 8005262:	b29b      	uxth	r3, r3
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0302 	bic.w	r3, r3, #2
 800527e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005290:	f7ff fa40 	bl	8004714 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005296:	e00d      	b.n	80052b4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005298:	f7ff fa3c 	bl	8004714 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d301      	bcc.n	80052ac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e010      	b.n	80052ce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1ec      	bne.n	8005298 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	695b      	ldr	r3, [r3, #20]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	461a      	mov	r2, r3
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 031c 	and.w	r3, r3, #28
 80052f2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	02db      	lsls	r3, r3, #11
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	019b      	lsls	r3, r3, #6
 8005304:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005330:	f7ff f9f0 	bl	8004714 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005336:	e00d      	b.n	8005354 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005338:	f7ff f9ec 	bl	8004714 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005346:	d301      	bcc.n	800534c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e009      	b.n	8005360 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f003 0301 	and.w	r3, r3, #1
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1ec      	bne.n	8005338 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0e6      	b.n	800554a <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0310 	and.w	r3, r3, #16
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf14      	ite	ne
 800538a:	2301      	movne	r3, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf14      	ite	ne
 80053d0:	2301      	movne	r3, #1
 80053d2:	2300      	moveq	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	bf0c      	ite	eq
 80053ea:	2301      	moveq	r3, #1
 80053ec:	2300      	movne	r3, #0
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	461a      	mov	r2, r3
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005400:	2b00      	cmp	r3, #0
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	461a      	mov	r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	461a      	mov	r2, r3
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	461a      	mov	r2, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	bf14      	ite	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	2300      	moveq	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	0c1b      	lsrs	r3, r3, #16
 800550a:	b29a      	uxth	r2, r3
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e00b      	b.n	8005582 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005570:	2b10      	cmp	r3, #16
 8005572:	d105      	bne.n	8005580 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f87c 	bl	8005674 <ETH_SetMACConfig>

    return HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	e000      	b.n	8005582 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
  }
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 031c 	bic.w	r3, r3, #28
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055a4:	f001 feba 	bl	800731c <HAL_RCC_GetHCLKFreq>
 80055a8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a14      	ldr	r2, [pc, #80]	; (8005600 <HAL_ETH_SetMDIOClockRange+0x74>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d804      	bhi.n	80055bc <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f043 0308 	orr.w	r3, r3, #8
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e019      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4a11      	ldr	r2, [pc, #68]	; (8005604 <HAL_ETH_SetMDIOClockRange+0x78>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d204      	bcs.n	80055ce <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f043 030c 	orr.w	r3, r3, #12
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e010      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4a0d      	ldr	r2, [pc, #52]	; (8005608 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d90c      	bls.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	4a0c      	ldr	r2, [pc, #48]	; (800560c <HAL_ETH_SetMDIOClockRange+0x80>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d804      	bhi.n	80055e8 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f043 0304 	orr.w	r3, r3, #4
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e003      	b.n	80055f0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f043 0310 	orr.w	r3, r3, #16
 80055ee:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	611a      	str	r2, [r3, #16]
}
 80055f8:	bf00      	nop
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	02160ebf 	.word	0x02160ebf
 8005604:	03938700 	.word	0x03938700
 8005608:	05f5e0ff 	.word	0x05f5e0ff
 800560c:	08f0d17f 	.word	0x08f0d17f

08005610 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800564c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800565a:	2001      	movs	r0, #1
 800565c:	f7ff f866 	bl	800472c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800566a:	6193      	str	r3, [r2, #24]
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4b53      	ldr	r3, [pc, #332]	; (80057d8 <ETH_SetMACConfig+0x164>)
 800568a:	4013      	ands	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	7b9b      	ldrb	r3, [r3, #14]
 8005692:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	7c12      	ldrb	r2, [r2, #16]
 8005698:	2a00      	cmp	r2, #0
 800569a:	d102      	bne.n	80056a2 <ETH_SetMACConfig+0x2e>
 800569c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056a0:	e000      	b.n	80056a4 <ETH_SetMACConfig+0x30>
 80056a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80056a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	7c52      	ldrb	r2, [r2, #17]
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	d102      	bne.n	80056b4 <ETH_SetMACConfig+0x40>
 80056ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80056b2:	e000      	b.n	80056b6 <ETH_SetMACConfig+0x42>
 80056b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80056b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80056bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	7fdb      	ldrb	r3, [r3, #31]
 80056c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80056c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80056ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	7f92      	ldrb	r2, [r2, #30]
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	d102      	bne.n	80056da <ETH_SetMACConfig+0x66>
 80056d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056d8:	e000      	b.n	80056dc <ETH_SetMACConfig+0x68>
 80056da:	2200      	movs	r2, #0
                        macconf->Speed |
 80056dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	7f1b      	ldrb	r3, [r3, #28]
 80056e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80056e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80056ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	791b      	ldrb	r3, [r3, #4]
 80056f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80056f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	d102      	bne.n	8005704 <ETH_SetMACConfig+0x90>
 80056fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005702:	e000      	b.n	8005706 <ETH_SetMACConfig+0x92>
 8005704:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005706:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	7bdb      	ldrb	r3, [r3, #15]
 800570c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800570e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005714:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800571c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800571e:	4313      	orrs	r3, r2
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005736:	2001      	movs	r0, #1
 8005738:	f7fe fff8 	bl	800472c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005752:	4013      	ands	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800575a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005762:	2a00      	cmp	r2, #0
 8005764:	d101      	bne.n	800576a <ETH_SetMACConfig+0xf6>
 8005766:	2280      	movs	r2, #128	; 0x80
 8005768:	e000      	b.n	800576c <ETH_SetMACConfig+0xf8>
 800576a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800576c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005772:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800577a:	2a01      	cmp	r2, #1
 800577c:	d101      	bne.n	8005782 <ETH_SetMACConfig+0x10e>
 800577e:	2208      	movs	r2, #8
 8005780:	e000      	b.n	8005784 <ETH_SetMACConfig+0x110>
 8005782:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005784:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800578c:	2a01      	cmp	r2, #1
 800578e:	d101      	bne.n	8005794 <ETH_SetMACConfig+0x120>
 8005790:	2204      	movs	r2, #4
 8005792:	e000      	b.n	8005796 <ETH_SetMACConfig+0x122>
 8005794:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005796:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800579e:	2a01      	cmp	r2, #1
 80057a0:	d101      	bne.n	80057a6 <ETH_SetMACConfig+0x132>
 80057a2:	2202      	movs	r2, #2
 80057a4:	e000      	b.n	80057a8 <ETH_SetMACConfig+0x134>
 80057a6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80057a8:	4313      	orrs	r3, r2
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80057c0:	2001      	movs	r0, #1
 80057c2:	f7fe ffb3 	bl	800472c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	619a      	str	r2, [r3, #24]
}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	fd20810f 	.word	0xfd20810f

080057dc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <ETH_SetDMAConfig+0x110>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	7b1b      	ldrb	r3, [r3, #12]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <ETH_SetDMAConfig+0x2c>
 8005802:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005806:	e000      	b.n	800580a <ETH_SetDMAConfig+0x2e>
 8005808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	7b5b      	ldrb	r3, [r3, #13]
 800580e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005810:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	7f52      	ldrb	r2, [r2, #29]
 8005816:	2a00      	cmp	r2, #0
 8005818:	d102      	bne.n	8005820 <ETH_SetDMAConfig+0x44>
 800581a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800581e:	e000      	b.n	8005822 <ETH_SetDMAConfig+0x46>
 8005820:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005822:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	7b9b      	ldrb	r3, [r3, #14]
 8005828:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800582a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005830:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	7f1b      	ldrb	r3, [r3, #28]
 8005836:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005838:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	7f9b      	ldrb	r3, [r3, #30]
 800583e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005840:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005846:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800584e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005850:	4313      	orrs	r3, r2
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005860:	461a      	mov	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005872:	2001      	movs	r0, #1
 8005874:	f7fe ff5a 	bl	800472c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005880:	461a      	mov	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	791b      	ldrb	r3, [r3, #4]
 800588a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005890:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005896:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800589c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058a4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80058a6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80058ae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80058b4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80058be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058c2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058d0:	2001      	movs	r0, #1
 80058d2:	f7fe ff2b 	bl	800472c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058de:	461a      	mov	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6013      	str	r3, [r2, #0]
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	f8de3f23 	.word	0xf8de3f23

080058f0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b0a6      	sub	sp, #152	; 0x98
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80058fe:	2301      	movs	r3, #1
 8005900:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005904:	2300      	movs	r3, #0
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005908:	2300      	movs	r3, #0
 800590a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005914:	2300      	movs	r3, #0
 8005916:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005926:	2300      	movs	r3, #0
 8005928:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800592c:	2300      	movs	r3, #0
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005932:	2300      	movs	r3, #0
 8005934:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005936:	2300      	movs	r3, #0
 8005938:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800593c:	2300      	movs	r3, #0
 800593e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005940:	2300      	movs	r3, #0
 8005942:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005946:	2300      	movs	r3, #0
 8005948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005952:	2300      	movs	r3, #0
 8005954:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800595c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800595e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005962:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005964:	2300      	movs	r3, #0
 8005966:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800596a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fe7f 	bl	8005674 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005976:	2301      	movs	r3, #1
 8005978:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800597a:	2301      	movs	r3, #1
 800597c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005984:	2301      	movs	r3, #1
 8005986:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800598c:	2300      	movs	r3, #0
 800598e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005992:	2300      	movs	r3, #0
 8005994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005998:	2300      	movs	r3, #0
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800599c:	2301      	movs	r3, #1
 800599e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80059a2:	2301      	movs	r3, #1
 80059a4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80059a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059aa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80059ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80059b0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80059b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059b6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80059be:	2300      	movs	r3, #0
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80059c6:	f107 0308 	add.w	r3, r7, #8
 80059ca:	4619      	mov	r1, r3
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff ff05 	bl	80057dc <ETH_SetDMAConfig>
}
 80059d2:	bf00      	nop
 80059d4:	3798      	adds	r7, #152	; 0x98
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3305      	adds	r3, #5
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	3204      	adds	r2, #4
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <ETH_MACAddressConfig+0x68>)
 80059fe:	4413      	add	r3, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3303      	adds	r3, #3
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	061a      	lsls	r2, r3, #24
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3302      	adds	r3, #2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	4313      	orrs	r3, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	7812      	ldrb	r2, [r2, #0]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <ETH_MACAddressConfig+0x6c>)
 8005a2e:	4413      	add	r3, r2
 8005a30:	461a      	mov	r2, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6013      	str	r3, [r2, #0]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40028040 	.word	0x40028040
 8005a48:	40028044 	.word	0x40028044

08005a4c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e03e      	b.n	8005ad8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68d9      	ldr	r1, [r3, #12]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	440b      	add	r3, r1
 8005a6a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2200      	movs	r2, #0
 8005a82:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005a84:	68b9      	ldr	r1, [r7, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	3206      	adds	r2, #6
 8005a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d80c      	bhi.n	8005abc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68d9      	ldr	r1, [r3, #12]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e004      	b.n	8005ac6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d9bd      	bls.n	8005a5a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005af0:	611a      	str	r2, [r3, #16]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e048      	b.n	8005b9e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6919      	ldr	r1, [r3, #16]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	440b      	add	r3, r1
 8005b1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2200      	movs	r2, #0
 8005b22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2200      	movs	r2, #0
 8005b28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b48:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	3212      	adds	r2, #18
 8005b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d80c      	bhi.n	8005b8e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6919      	ldr	r1, [r3, #16]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	440b      	add	r3, r1
 8005b86:	461a      	mov	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	60da      	str	r2, [r3, #12]
 8005b8c:	e004      	b.n	8005b98 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	461a      	mov	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d9b3      	bls.n	8005b0c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bce:	60da      	str	r2, [r3, #12]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b091      	sub	sp, #68	; 0x44
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3318      	adds	r3, #24
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c06:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c1e:	d007      	beq.n	8005c30 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c24:	3304      	adds	r3, #4
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005c30:	2302      	movs	r3, #2
 8005c32:	e111      	b.n	8005e58 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8005c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c36:	3301      	adds	r3, #1
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c42:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4b86      	ldr	r3, [pc, #536]	; (8005e64 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c4e:	6852      	ldr	r2, [r2, #4]
 8005c50:	431a      	orrs	r2, r3
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d008      	beq.n	8005c74 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0320 	and.w	r3, r3, #32
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0304 	and.w	r3, r3, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005cb6:	e082      	b.n	8005dbe <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d006      	beq.n	8005cd8 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e005      	b.n	8005ce4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d902      	bls.n	8005cf6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf2:	3b04      	subs	r3, #4
 8005cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0c:	d007      	beq.n	8005d1e <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d12:	3304      	adds	r3, #4
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d029      	beq.n	8005d72 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d30:	e019      	b.n	8005d66 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8005d32:	f3bf 8f5f 	dmb	sy
}
 8005d36:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d46:	3301      	adds	r3, #1
 8005d48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d902      	bls.n	8005d56 <ETH_Prepare_Tx_Descriptors+0x17a>
 8005d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d52:	3b04      	subs	r3, #4
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	3301      	adds	r3, #1
 8005d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d3e1      	bcc.n	8005d32 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e072      	b.n	8005e58 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	3301      	adds	r3, #1
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d92:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	4b32      	ldr	r3, [pc, #200]	; (8005e64 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9e:	6852      	ldr	r2, [r2, #4]
 8005da0:	431a      	orrs	r2, r3
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	3301      	adds	r3, #1
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005dac:	f3bf 8f5f 	dmb	sy
}
 8005db0:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f47f af78 	bne.w	8005cb8 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d006      	beq.n	8005ddc <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e005      	b.n	8005de8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	6a3a      	ldr	r2, [r7, #32]
 8005df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005dfe:	f3bf 8f5f 	dmb	sy
}
 8005e02:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e18:	3304      	adds	r3, #4
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e24:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e26:	f3ef 8310 	mrs	r3, PRIMASK
 8005e2a:	613b      	str	r3, [r7, #16]
  return(result);
 8005e2c:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005e2e:	61fb      	str	r3, [r7, #28]
 8005e30:	2301      	movs	r3, #1
 8005e32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f383 8810 	msr	PRIMASK, r3
}
 8005e3a:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e42:	4413      	add	r3, r2
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	629a      	str	r2, [r3, #40]	; 0x28
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	f383 8810 	msr	PRIMASK, r3
}
 8005e54:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3744      	adds	r7, #68	; 0x44
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	ffffe000 	.word	0xffffe000

08005e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e72:	2300      	movs	r3, #0
 8005e74:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e82:	2300      	movs	r3, #0
 8005e84:	61fb      	str	r3, [r7, #28]
 8005e86:	e175      	b.n	8006174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e88:	2201      	movs	r2, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	f040 8164 	bne.w	800616e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d005      	beq.n	8005ebe <HAL_GPIO_Init+0x56>
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f003 0303 	and.w	r3, r3, #3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d130      	bne.n	8005f20 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	2203      	movs	r2, #3
 8005eca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	69fb      	ldr	r3, [r7, #28]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	091b      	lsrs	r3, r3, #4
 8005f0a:	f003 0201 	and.w	r2, r3, #1
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 0303 	and.w	r3, r3, #3
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d017      	beq.n	8005f5c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	2203      	movs	r2, #3
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4013      	ands	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d123      	bne.n	8005fb0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	08da      	lsrs	r2, r3, #3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3208      	adds	r2, #8
 8005f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	220f      	movs	r2, #15
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	43db      	mvns	r3, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691a      	ldr	r2, [r3, #16]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	08da      	lsrs	r2, r3, #3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3208      	adds	r2, #8
 8005faa:	69b9      	ldr	r1, [r7, #24]
 8005fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	2203      	movs	r2, #3
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f003 0203 	and.w	r2, r3, #3
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80be 	beq.w	800616e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ff2:	4b66      	ldr	r3, [pc, #408]	; (800618c <HAL_GPIO_Init+0x324>)
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	4a65      	ldr	r2, [pc, #404]	; (800618c <HAL_GPIO_Init+0x324>)
 8005ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ffe:	4b63      	ldr	r3, [pc, #396]	; (800618c <HAL_GPIO_Init+0x324>)
 8006000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800600a:	4a61      	ldr	r2, [pc, #388]	; (8006190 <HAL_GPIO_Init+0x328>)
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	089b      	lsrs	r3, r3, #2
 8006010:	3302      	adds	r3, #2
 8006012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	220f      	movs	r2, #15
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	4013      	ands	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a58      	ldr	r2, [pc, #352]	; (8006194 <HAL_GPIO_Init+0x32c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d037      	beq.n	80060a6 <HAL_GPIO_Init+0x23e>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a57      	ldr	r2, [pc, #348]	; (8006198 <HAL_GPIO_Init+0x330>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d031      	beq.n	80060a2 <HAL_GPIO_Init+0x23a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a56      	ldr	r2, [pc, #344]	; (800619c <HAL_GPIO_Init+0x334>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d02b      	beq.n	800609e <HAL_GPIO_Init+0x236>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a55      	ldr	r2, [pc, #340]	; (80061a0 <HAL_GPIO_Init+0x338>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d025      	beq.n	800609a <HAL_GPIO_Init+0x232>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a54      	ldr	r2, [pc, #336]	; (80061a4 <HAL_GPIO_Init+0x33c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01f      	beq.n	8006096 <HAL_GPIO_Init+0x22e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a53      	ldr	r2, [pc, #332]	; (80061a8 <HAL_GPIO_Init+0x340>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d019      	beq.n	8006092 <HAL_GPIO_Init+0x22a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a52      	ldr	r2, [pc, #328]	; (80061ac <HAL_GPIO_Init+0x344>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <HAL_GPIO_Init+0x226>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a51      	ldr	r2, [pc, #324]	; (80061b0 <HAL_GPIO_Init+0x348>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00d      	beq.n	800608a <HAL_GPIO_Init+0x222>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a50      	ldr	r2, [pc, #320]	; (80061b4 <HAL_GPIO_Init+0x34c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <HAL_GPIO_Init+0x21e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a4f      	ldr	r2, [pc, #316]	; (80061b8 <HAL_GPIO_Init+0x350>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d101      	bne.n	8006082 <HAL_GPIO_Init+0x21a>
 800607e:	2309      	movs	r3, #9
 8006080:	e012      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006082:	230a      	movs	r3, #10
 8006084:	e010      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006086:	2308      	movs	r3, #8
 8006088:	e00e      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800608a:	2307      	movs	r3, #7
 800608c:	e00c      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800608e:	2306      	movs	r3, #6
 8006090:	e00a      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006092:	2305      	movs	r3, #5
 8006094:	e008      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 8006096:	2304      	movs	r3, #4
 8006098:	e006      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800609a:	2303      	movs	r3, #3
 800609c:	e004      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 800609e:	2302      	movs	r3, #2
 80060a0:	e002      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_GPIO_Init+0x240>
 80060a6:	2300      	movs	r3, #0
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	f002 0203 	and.w	r2, r2, #3
 80060ae:	0092      	lsls	r2, r2, #2
 80060b0:	4093      	lsls	r3, r2
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80060b8:	4935      	ldr	r1, [pc, #212]	; (8006190 <HAL_GPIO_Init+0x328>)
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	089b      	lsrs	r3, r3, #2
 80060be:	3302      	adds	r3, #2
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060c6:	4b3d      	ldr	r3, [pc, #244]	; (80061bc <HAL_GPIO_Init+0x354>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	4013      	ands	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060ea:	4a34      	ldr	r2, [pc, #208]	; (80061bc <HAL_GPIO_Init+0x354>)
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060f0:	4b32      	ldr	r3, [pc, #200]	; (80061bc <HAL_GPIO_Init+0x354>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4013      	ands	r3, r2
 80060fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006114:	4a29      	ldr	r2, [pc, #164]	; (80061bc <HAL_GPIO_Init+0x354>)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800611a:	4b28      	ldr	r3, [pc, #160]	; (80061bc <HAL_GPIO_Init+0x354>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	43db      	mvns	r3, r3
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4013      	ands	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800613e:	4a1f      	ldr	r2, [pc, #124]	; (80061bc <HAL_GPIO_Init+0x354>)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006144:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_GPIO_Init+0x354>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	43db      	mvns	r3, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4013      	ands	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <HAL_GPIO_Init+0x354>)
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800616e:	69fb      	ldr	r3, [r7, #28]
 8006170:	3301      	adds	r3, #1
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	2b0f      	cmp	r3, #15
 8006178:	f67f ae86 	bls.w	8005e88 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	3724      	adds	r7, #36	; 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40023800 	.word	0x40023800
 8006190:	40013800 	.word	0x40013800
 8006194:	40020000 	.word	0x40020000
 8006198:	40020400 	.word	0x40020400
 800619c:	40020800 	.word	0x40020800
 80061a0:	40020c00 	.word	0x40020c00
 80061a4:	40021000 	.word	0x40021000
 80061a8:	40021400 	.word	0x40021400
 80061ac:	40021800 	.word	0x40021800
 80061b0:	40021c00 	.word	0x40021c00
 80061b4:	40022000 	.word	0x40022000
 80061b8:	40022400 	.word	0x40022400
 80061bc:	40013c00 	.word	0x40013c00

080061c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	460b      	mov	r3, r1
 80061ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	887b      	ldrh	r3, [r7, #2]
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
 80061dc:	e001      	b.n	80061e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	460b      	mov	r3, r1
 80061fa:	807b      	strh	r3, [r7, #2]
 80061fc:	4613      	mov	r3, r2
 80061fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006200:	787b      	ldrb	r3, [r7, #1]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006206:	887a      	ldrh	r2, [r7, #2]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800620c:	e003      	b.n	8006216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800620e:	887b      	ldrh	r3, [r7, #2]
 8006210:	041a      	lsls	r2, r3, #16
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	619a      	str	r2, [r3, #24]
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
	...

08006224 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e0bf      	b.n	80063b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7fd fea4 	bl	8003f98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006266:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6999      	ldr	r1, [r3, #24]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800627c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6899      	ldr	r1, [r3, #8]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	4b4a      	ldr	r3, [pc, #296]	; (80063c0 <HAL_LTDC_Init+0x19c>)
 8006298:	400b      	ands	r3, r1
 800629a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6899      	ldr	r1, [r3, #8]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68d9      	ldr	r1, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b3e      	ldr	r3, [pc, #248]	; (80063c0 <HAL_LTDC_Init+0x19c>)
 80062c6:	400b      	ands	r3, r1
 80062c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	041b      	lsls	r3, r3, #16
 80062d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68d9      	ldr	r1, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1a      	ldr	r2, [r3, #32]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6919      	ldr	r1, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	4b33      	ldr	r3, [pc, #204]	; (80063c0 <HAL_LTDC_Init+0x19c>)
 80062f4:	400b      	ands	r3, r1
 80062f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	041b      	lsls	r3, r3, #16
 80062fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6919      	ldr	r1, [r3, #16]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	431a      	orrs	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	430a      	orrs	r2, r1
 8006314:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6959      	ldr	r1, [r3, #20]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	4b27      	ldr	r3, [pc, #156]	; (80063c0 <HAL_LTDC_Init+0x19c>)
 8006322:	400b      	ands	r3, r1
 8006324:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632a:	041b      	lsls	r3, r3, #16
 800632c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6959      	ldr	r1, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006354:	041b      	lsls	r3, r3, #16
 8006356:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006366:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0206 	orr.w	r2, r2, #6
 8006392:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	f000f800 	.word	0xf000f800

080063c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d023      	beq.n	800642e <HAL_LTDC_IRQHandler+0x6a>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f003 0304 	and.w	r3, r3, #4
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01e      	beq.n	800642e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0204 	bic.w	r2, r2, #4
 80063fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2204      	movs	r2, #4
 8006406:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2204      	movs	r2, #4
 800641c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f86f 	bl	800650c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d023      	beq.n	8006480 <HAL_LTDC_IRQHandler+0xbc>
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01e      	beq.n	8006480 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0202 	bic.w	r2, r2, #2
 8006450:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2202      	movs	r2, #2
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006460:	f043 0202 	orr.w	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2204      	movs	r2, #4
 800646e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f846 	bl	800650c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 0301 	and.w	r3, r3, #1
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01b      	beq.n	80064c2 <HAL_LTDC_IRQHandler+0xfe>
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d016      	beq.n	80064c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2201      	movs	r2, #1
 80064aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f82f 	bl	8006520 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01b      	beq.n	8006504 <HAL_LTDC_IRQHandler+0x140>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f003 0308 	and.w	r3, r3, #8
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d016      	beq.n	8006504 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0208 	bic.w	r2, r2, #8
 80064e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2208      	movs	r2, #8
 80064ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f818 	bl	8006534 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006548:	b5b0      	push	{r4, r5, r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_LTDC_ConfigLayer+0x1a>
 800655e:	2302      	movs	r3, #2
 8006560:	e02c      	b.n	80065bc <HAL_LTDC_ConfigLayer+0x74>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2202      	movs	r2, #2
 800656e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2134      	movs	r1, #52	; 0x34
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006594:	682b      	ldr	r3, [r5, #0]
 8006596:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f87d 	bl	800669c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bdb0      	pop	{r4, r5, r7, pc}

080065c4 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_LTDC_SetAlpha+0x1a>
 80065da:	2302      	movs	r3, #2
 80065dc:	e024      	b.n	8006628 <HAL_LTDC_SetAlpha+0x64>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2234      	movs	r2, #52	; 0x34
 80065f2:	fb02 f303 	mul.w	r3, r2, r3
 80065f6:	3338      	adds	r3, #56	; 0x38
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f847 	bl	800669c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2201      	movs	r2, #1
 8006614:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_LTDC_SetAddress+0x1a>
 8006646:	2302      	movs	r3, #2
 8006648:	e024      	b.n	8006694 <HAL_LTDC_SetAddress+0x64>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2234      	movs	r2, #52	; 0x34
 800665e:	fb02 f303 	mul.w	r3, r2, r3
 8006662:	3338      	adds	r3, #56	; 0x38
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f811 	bl	800669c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2201      	movs	r2, #1
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800669c:	b480      	push	{r7}
 800669e:	b089      	sub	sp, #36	; 0x24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b8:	4413      	add	r3, r2
 80066ba:	041b      	lsls	r3, r3, #16
 80066bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	01db      	lsls	r3, r3, #7
 80066c8:	4413      	add	r3, r2
 80066ca:	3384      	adds	r3, #132	; 0x84
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	4611      	mov	r1, r2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	01d2      	lsls	r2, r2, #7
 80066d8:	440a      	add	r2, r1
 80066da:	3284      	adds	r2, #132	; 0x84
 80066dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80066e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	0c1b      	lsrs	r3, r3, #16
 80066ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066f2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066f4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	01db      	lsls	r3, r3, #7
 8006700:	440b      	add	r3, r1
 8006702:	3384      	adds	r3, #132	; 0x84
 8006704:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800670a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800671a:	4413      	add	r3, r2
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	01db      	lsls	r3, r3, #7
 800672a:	4413      	add	r3, r2
 800672c:	3384      	adds	r3, #132	; 0x84
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	4611      	mov	r1, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	01d2      	lsls	r2, r2, #7
 800673a:	440a      	add	r2, r1
 800673c:	3284      	adds	r2, #132	; 0x84
 800673e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006742:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006752:	4413      	add	r3, r2
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	01db      	lsls	r3, r3, #7
 8006760:	440b      	add	r3, r1
 8006762:	3384      	adds	r3, #132	; 0x84
 8006764:	4619      	mov	r1, r3
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4313      	orrs	r3, r2
 800676a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	461a      	mov	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	01db      	lsls	r3, r3, #7
 8006776:	4413      	add	r3, r2
 8006778:	3384      	adds	r3, #132	; 0x84
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	4611      	mov	r1, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	01d2      	lsls	r2, r2, #7
 8006786:	440a      	add	r2, r1
 8006788:	3284      	adds	r2, #132	; 0x84
 800678a:	f023 0307 	bic.w	r3, r3, #7
 800678e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	461a      	mov	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	01db      	lsls	r3, r3, #7
 800679a:	4413      	add	r3, r2
 800679c:	3384      	adds	r3, #132	; 0x84
 800679e:	461a      	mov	r2, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067b6:	041b      	lsls	r3, r3, #16
 80067b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	061b      	lsls	r3, r3, #24
 80067c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	01db      	lsls	r3, r3, #7
 80067cc:	4413      	add	r3, r2
 80067ce:	3384      	adds	r3, #132	; 0x84
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	01db      	lsls	r3, r3, #7
 80067dc:	4413      	add	r3, r2
 80067de:	3384      	adds	r3, #132	; 0x84
 80067e0:	461a      	mov	r2, r3
 80067e2:	2300      	movs	r3, #0
 80067e4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ec:	461a      	mov	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	431a      	orrs	r2, r3
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4619      	mov	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	01db      	lsls	r3, r3, #7
 8006800:	440b      	add	r3, r1
 8006802:	3384      	adds	r3, #132	; 0x84
 8006804:	4619      	mov	r1, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	01db      	lsls	r3, r3, #7
 8006816:	4413      	add	r3, r2
 8006818:	3384      	adds	r3, #132	; 0x84
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	4611      	mov	r1, r2
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	01d2      	lsls	r2, r2, #7
 8006826:	440a      	add	r2, r1
 8006828:	3284      	adds	r2, #132	; 0x84
 800682a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800682e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	01db      	lsls	r3, r3, #7
 800683a:	4413      	add	r3, r2
 800683c:	3384      	adds	r3, #132	; 0x84
 800683e:	461a      	mov	r2, r3
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	01db      	lsls	r3, r3, #7
 8006850:	4413      	add	r3, r2
 8006852:	3384      	adds	r3, #132	; 0x84
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4619      	mov	r1, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	01db      	lsls	r3, r3, #7
 8006860:	440b      	add	r3, r1
 8006862:	3384      	adds	r3, #132	; 0x84
 8006864:	4619      	mov	r1, r3
 8006866:	4b58      	ldr	r3, [pc, #352]	; (80069c8 <LTDC_SetConfig+0x32c>)
 8006868:	4013      	ands	r3, r2
 800686a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	69da      	ldr	r2, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	68f9      	ldr	r1, [r7, #12]
 8006876:	6809      	ldr	r1, [r1, #0]
 8006878:	4608      	mov	r0, r1
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	01c9      	lsls	r1, r1, #7
 800687e:	4401      	add	r1, r0
 8006880:	3184      	adds	r1, #132	; 0x84
 8006882:	4313      	orrs	r3, r2
 8006884:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	01db      	lsls	r3, r3, #7
 8006890:	4413      	add	r3, r2
 8006892:	3384      	adds	r3, #132	; 0x84
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	461a      	mov	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	01db      	lsls	r3, r3, #7
 80068a0:	4413      	add	r3, r2
 80068a2:	3384      	adds	r3, #132	; 0x84
 80068a4:	461a      	mov	r2, r3
 80068a6:	2300      	movs	r3, #0
 80068a8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	01db      	lsls	r3, r3, #7
 80068b4:	4413      	add	r3, r2
 80068b6:	3384      	adds	r3, #132	; 0x84
 80068b8:	461a      	mov	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80068c8:	2304      	movs	r3, #4
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	e01b      	b.n	8006906 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d102      	bne.n	80068dc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80068d6:	2303      	movs	r3, #3
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	e014      	b.n	8006906 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b04      	cmp	r3, #4
 80068e2:	d00b      	beq.n	80068fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d007      	beq.n	80068fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d003      	beq.n	80068fc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	d102      	bne.n	8006902 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80068fc:	2302      	movs	r3, #2
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e001      	b.n	8006906 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006902:	2301      	movs	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	01db      	lsls	r3, r3, #7
 8006910:	4413      	add	r3, r2
 8006912:	3384      	adds	r3, #132	; 0x84
 8006914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	4611      	mov	r1, r2
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	01d2      	lsls	r2, r2, #7
 8006920:	440a      	add	r2, r1
 8006922:	3284      	adds	r2, #132	; 0x84
 8006924:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006928:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	fb02 f303 	mul.w	r3, r2, r3
 8006934:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6859      	ldr	r1, [r3, #4]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	1acb      	subs	r3, r1, r3
 8006940:	69f9      	ldr	r1, [r7, #28]
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006948:	68f9      	ldr	r1, [r7, #12]
 800694a:	6809      	ldr	r1, [r1, #0]
 800694c:	4608      	mov	r0, r1
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	01c9      	lsls	r1, r1, #7
 8006952:	4401      	add	r1, r0
 8006954:	3184      	adds	r1, #132	; 0x84
 8006956:	4313      	orrs	r3, r2
 8006958:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	01db      	lsls	r3, r3, #7
 8006964:	4413      	add	r3, r2
 8006966:	3384      	adds	r3, #132	; 0x84
 8006968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	01db      	lsls	r3, r3, #7
 8006974:	440b      	add	r3, r1
 8006976:	3384      	adds	r3, #132	; 0x84
 8006978:	4619      	mov	r1, r3
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <LTDC_SetConfig+0x330>)
 800697c:	4013      	ands	r3, r2
 800697e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	01db      	lsls	r3, r3, #7
 800698a:	4413      	add	r3, r2
 800698c:	3384      	adds	r3, #132	; 0x84
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	01db      	lsls	r3, r3, #7
 80069a0:	4413      	add	r3, r2
 80069a2:	3384      	adds	r3, #132	; 0x84
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	4611      	mov	r1, r2
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	01d2      	lsls	r2, r2, #7
 80069b0:	440a      	add	r2, r1
 80069b2:	3284      	adds	r2, #132	; 0x84
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	6013      	str	r3, [r2, #0]
}
 80069ba:	bf00      	nop
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	fffff8f8 	.word	0xfffff8f8
 80069cc:	fffff800 	.word	0xfffff800

080069d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069da:	4b23      	ldr	r3, [pc, #140]	; (8006a68 <HAL_PWREx_EnableOverDrive+0x98>)
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	4a22      	ldr	r2, [pc, #136]	; (8006a68 <HAL_PWREx_EnableOverDrive+0x98>)
 80069e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069e4:	6413      	str	r3, [r2, #64]	; 0x40
 80069e6:	4b20      	ldr	r3, [pc, #128]	; (8006a68 <HAL_PWREx_EnableOverDrive+0x98>)
 80069e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80069f2:	4b1e      	ldr	r3, [pc, #120]	; (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1d      	ldr	r2, [pc, #116]	; (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 80069f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80069fe:	f7fd fe89 	bl	8004714 <HAL_GetTick>
 8006a02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a04:	e009      	b.n	8006a1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a06:	f7fd fe85 	bl	8004714 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a14:	d901      	bls.n	8006a1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e022      	b.n	8006a60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a1a:	4b14      	ldr	r3, [pc, #80]	; (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a26:	d1ee      	bne.n	8006a06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a28:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a0f      	ldr	r2, [pc, #60]	; (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a34:	f7fd fe6e 	bl	8004714 <HAL_GetTick>
 8006a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a3a:	e009      	b.n	8006a50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a3c:	f7fd fe6a 	bl	8004714 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a4a:	d901      	bls.n	8006a50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e007      	b.n	8006a60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a50:	4b06      	ldr	r3, [pc, #24]	; (8006a6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a5c:	d1ee      	bne.n	8006a3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40007000 	.word	0x40007000

08006a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e291      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8087 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a94:	4b96      	ldr	r3, [pc, #600]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d00c      	beq.n	8006aba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa0:	4b93      	ldr	r3, [pc, #588]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d112      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x62>
 8006aac:	4b90      	ldr	r3, [pc, #576]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab8:	d10b      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aba:	4b8d      	ldr	r3, [pc, #564]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d06c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x130>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d168      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e26b      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x7a>
 8006adc:	4b84      	ldr	r3, [pc, #528]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a83      	ldr	r2, [pc, #524]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e02e      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x9c>
 8006af2:	4b7f      	ldr	r3, [pc, #508]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7e      	ldr	r2, [pc, #504]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	4b7c      	ldr	r3, [pc, #496]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7b      	ldr	r2, [pc, #492]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0xc0>
 8006b16:	4b76      	ldr	r3, [pc, #472]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a75      	ldr	r2, [pc, #468]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b73      	ldr	r3, [pc, #460]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a72      	ldr	r2, [pc, #456]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006b30:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b6c      	ldr	r3, [pc, #432]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d013      	beq.n	8006b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fd fde0 	bl	8004714 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fd fddc 	bl	8004714 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	; 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e21f      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0xe8>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fd fdcc 	bl	8004714 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fd fdc8 	bl	8004714 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e20b      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	4b57      	ldr	r3, [pc, #348]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x110>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d069      	beq.n	8006c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bae:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bba:	4b4d      	ldr	r3, [pc, #308]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x190>
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd2:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCC_OscConfig+0x17a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e1df      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	493d      	ldr	r1, [pc, #244]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	e040      	b.n	8006c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d023      	beq.n	8006c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c08:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fd fd7e 	bl	8004714 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c1c:	f7fd fd7a 	bl	8004714 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e1bd      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4929      	ldr	r1, [pc, #164]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]
 8006c4e:	e018      	b.n	8006c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a26      	ldr	r2, [pc, #152]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fd fd5a 	bl	8004714 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c64:	f7fd fd56 	bl	8004714 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e199      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d038      	beq.n	8006d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d019      	beq.n	8006cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c96:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca2:	f7fd fd37 	bl	8004714 <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006caa:	f7fd fd33 	bl	8004714 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e176      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <HAL_RCC_OscConfig+0x23a>
 8006cc8:	e01a      	b.n	8006d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cce:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd6:	f7fd fd1d 	bl	8004714 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cde:	f7fd fd19 	bl	8004714 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d903      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e15c      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
 8006cf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b91      	ldr	r3, [pc, #580]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ee      	bne.n	8006cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80a4 	beq.w	8006e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d0e:	4b8b      	ldr	r3, [pc, #556]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1a:	4b88      	ldr	r3, [pc, #544]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	4a87      	ldr	r2, [pc, #540]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	; 0x40
 8006d26:	4b85      	ldr	r3, [pc, #532]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d32:	2301      	movs	r3, #1
 8006d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d36:	4b82      	ldr	r3, [pc, #520]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d118      	bne.n	8006d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d42:	4b7f      	ldr	r3, [pc, #508]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a7e      	ldr	r2, [pc, #504]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4e:	f7fd fce1 	bl	8004714 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d56:	f7fd fcdd 	bl	8004714 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b64      	cmp	r3, #100	; 0x64
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e120      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d68:	4b75      	ldr	r3, [pc, #468]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x31a>
 8006d7c:	4b6f      	ldr	r3, [pc, #444]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	4a6e      	ldr	r2, [pc, #440]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
 8006d88:	e02d      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x33c>
 8006d92:	4b6a      	ldr	r3, [pc, #424]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	4a69      	ldr	r2, [pc, #420]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9e:	4b67      	ldr	r3, [pc, #412]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	4a66      	ldr	r2, [pc, #408]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70
 8006daa:	e01c      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d10c      	bne.n	8006dce <HAL_RCC_OscConfig+0x35e>
 8006db4:	4b61      	ldr	r3, [pc, #388]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a60      	ldr	r2, [pc, #384]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dba:	f043 0304 	orr.w	r3, r3, #4
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc0:	4b5e      	ldr	r3, [pc, #376]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	4a5d      	ldr	r2, [pc, #372]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	; 0x70
 8006dcc:	e00b      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006dce:	4b5b      	ldr	r3, [pc, #364]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a5a      	ldr	r2, [pc, #360]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dda:	4b58      	ldr	r3, [pc, #352]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	4a57      	ldr	r2, [pc, #348]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006de0:	f023 0304 	bic.w	r3, r3, #4
 8006de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d015      	beq.n	8006e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dee:	f7fd fc91 	bl	8004714 <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df6:	f7fd fc8d 	bl	8004714 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e0ce      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0c:	4b4b      	ldr	r3, [pc, #300]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ee      	beq.n	8006df6 <HAL_RCC_OscConfig+0x386>
 8006e18:	e014      	b.n	8006e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1a:	f7fd fc7b 	bl	8004714 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fd fc77 	bl	8004714 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0b8      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e38:	4b40      	ldr	r3, [pc, #256]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1ee      	bne.n	8006e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4a:	4b3c      	ldr	r3, [pc, #240]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	4a3b      	ldr	r2, [pc, #236]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a4 	beq.w	8006fa8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d06b      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d149      	bne.n	8006f08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b31      	ldr	r3, [pc, #196]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a30      	ldr	r2, [pc, #192]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fd fc48 	bl	8004714 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fd fc44 	bl	8004714 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e087      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69da      	ldr	r2, [r3, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	4a1b      	ldr	r2, [pc, #108]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006ece:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ed2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed4:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a18      	ldr	r2, [pc, #96]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fd fc18 	bl	8004714 <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7fd fc14 	bl	8004714 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e057      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efa:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f0      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x478>
 8006f06:	e04f      	b.n	8006fa8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f08:	4b0c      	ldr	r3, [pc, #48]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a0b      	ldr	r2, [pc, #44]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f14:	f7fd fbfe 	bl	8004714 <HAL_GetTick>
 8006f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1a:	e008      	b.n	8006f2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f1c:	f7fd fbfa 	bl	8004714 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e03d      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f2e:	4b03      	ldr	r3, [pc, #12]	; (8006f3c <HAL_RCC_OscConfig+0x4cc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1f0      	bne.n	8006f1c <HAL_RCC_OscConfig+0x4ac>
 8006f3a:	e035      	b.n	8006fa8 <HAL_RCC_OscConfig+0x538>
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f44:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <HAL_RCC_OscConfig+0x544>)
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d028      	beq.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d121      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d11a      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f74:	4013      	ands	r3, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d111      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d107      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d001      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	40023800 	.word	0x40023800

08006fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e0d0      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd0:	4b6a      	ldr	r3, [pc, #424]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	683a      	ldr	r2, [r7, #0]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d910      	bls.n	8007000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fde:	4b67      	ldr	r3, [pc, #412]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f023 020f 	bic.w	r2, r3, #15
 8006fe6:	4965      	ldr	r1, [pc, #404]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fee:	4b63      	ldr	r3, [pc, #396]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d001      	beq.n	8007000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e0b8      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007018:	4b59      	ldr	r3, [pc, #356]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4a58      	ldr	r2, [pc, #352]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800701e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d005      	beq.n	800703c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007030:	4b53      	ldr	r3, [pc, #332]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	4a52      	ldr	r2, [pc, #328]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800703a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800703c:	4b50      	ldr	r3, [pc, #320]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	494d      	ldr	r1, [pc, #308]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	2b00      	cmp	r3, #0
 8007058:	d040      	beq.n	80070dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d107      	bne.n	8007072 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007062:	4b47      	ldr	r3, [pc, #284]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d115      	bne.n	800709a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e07f      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d107      	bne.n	800708a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707a:	4b41      	ldr	r3, [pc, #260]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d109      	bne.n	800709a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e073      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708a:	4b3d      	ldr	r3, [pc, #244]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e06b      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800709a:	4b39      	ldr	r3, [pc, #228]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0203 	bic.w	r2, r3, #3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	4936      	ldr	r1, [pc, #216]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ac:	f7fd fb32 	bl	8004714 <HAL_GetTick>
 80070b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b4:	f7fd fb2e 	bl	8004714 <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d901      	bls.n	80070ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e053      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ca:	4b2d      	ldr	r3, [pc, #180]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	f003 020c 	and.w	r2, r3, #12
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1eb      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070dc:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d210      	bcs.n	800710c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ea:	4b24      	ldr	r3, [pc, #144]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f023 020f 	bic.w	r2, r3, #15
 80070f2:	4922      	ldr	r1, [pc, #136]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fa:	4b20      	ldr	r3, [pc, #128]	; (800717c <HAL_RCC_ClockConfig+0x1c4>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d001      	beq.n	800710c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e032      	b.n	8007172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007118:	4b19      	ldr	r3, [pc, #100]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	4916      	ldr	r1, [pc, #88]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007126:	4313      	orrs	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0308 	and.w	r3, r3, #8
 8007132:	2b00      	cmp	r3, #0
 8007134:	d009      	beq.n	800714a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007136:	4b12      	ldr	r3, [pc, #72]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	490e      	ldr	r1, [pc, #56]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800714a:	f000 f821 	bl	8007190 <HAL_RCC_GetSysClockFreq>
 800714e:	4602      	mov	r2, r0
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <HAL_RCC_ClockConfig+0x1c8>)
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	091b      	lsrs	r3, r3, #4
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	490a      	ldr	r1, [pc, #40]	; (8007184 <HAL_RCC_ClockConfig+0x1cc>)
 800715c:	5ccb      	ldrb	r3, [r1, r3]
 800715e:	fa22 f303 	lsr.w	r3, r2, r3
 8007162:	4a09      	ldr	r2, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1d0>)
 8007164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_RCC_ClockConfig+0x1d4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7fd fa8e 	bl	800468c <HAL_InitTick>

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	40023c00 	.word	0x40023c00
 8007180:	40023800 	.word	0x40023800
 8007184:	0801e250 	.word	0x0801e250
 8007188:	20001a2c 	.word	0x20001a2c
 800718c:	20001a30 	.word	0x20001a30

08007190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b090      	sub	sp, #64	; 0x40
 8007196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
 800719c:	2300      	movs	r3, #0
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	2300      	movs	r3, #0
 80071a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a8:	4b59      	ldr	r3, [pc, #356]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d00d      	beq.n	80071d0 <HAL_RCC_GetSysClockFreq+0x40>
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	f200 80a1 	bhi.w	80072fc <HAL_RCC_GetSysClockFreq+0x16c>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_RCC_GetSysClockFreq+0x34>
 80071be:	2b04      	cmp	r3, #4
 80071c0:	d003      	beq.n	80071ca <HAL_RCC_GetSysClockFreq+0x3a>
 80071c2:	e09b      	b.n	80072fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c4:	4b53      	ldr	r3, [pc, #332]	; (8007314 <HAL_RCC_GetSysClockFreq+0x184>)
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071c8:	e09b      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ca:	4b53      	ldr	r3, [pc, #332]	; (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 80071cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ce:	e098      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d0:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80071da:	4b4d      	ldr	r3, [pc, #308]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d028      	beq.n	8007238 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e6:	4b4a      	ldr	r3, [pc, #296]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	099b      	lsrs	r3, r3, #6
 80071ec:	2200      	movs	r2, #0
 80071ee:	623b      	str	r3, [r7, #32]
 80071f0:	627a      	str	r2, [r7, #36]	; 0x24
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071f8:	2100      	movs	r1, #0
 80071fa:	4b47      	ldr	r3, [pc, #284]	; (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 80071fc:	fb03 f201 	mul.w	r2, r3, r1
 8007200:	2300      	movs	r3, #0
 8007202:	fb00 f303 	mul.w	r3, r0, r3
 8007206:	4413      	add	r3, r2
 8007208:	4a43      	ldr	r2, [pc, #268]	; (8007318 <HAL_RCC_GetSysClockFreq+0x188>)
 800720a:	fba0 1202 	umull	r1, r2, r0, r2
 800720e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007210:	460a      	mov	r2, r1
 8007212:	62ba      	str	r2, [r7, #40]	; 0x28
 8007214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007216:	4413      	add	r3, r2
 8007218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800721a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721c:	2200      	movs	r2, #0
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	61fa      	str	r2, [r7, #28]
 8007222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800722a:	f7f9 f849 	bl	80002c0 <__aeabi_uldivmod>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4613      	mov	r3, r2
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007236:	e053      	b.n	80072e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007238:	4b35      	ldr	r3, [pc, #212]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	099b      	lsrs	r3, r3, #6
 800723e:	2200      	movs	r2, #0
 8007240:	613b      	str	r3, [r7, #16]
 8007242:	617a      	str	r2, [r7, #20]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800724a:	f04f 0b00 	mov.w	fp, #0
 800724e:	4652      	mov	r2, sl
 8007250:	465b      	mov	r3, fp
 8007252:	f04f 0000 	mov.w	r0, #0
 8007256:	f04f 0100 	mov.w	r1, #0
 800725a:	0159      	lsls	r1, r3, #5
 800725c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007260:	0150      	lsls	r0, r2, #5
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	ebb2 080a 	subs.w	r8, r2, sl
 800726a:	eb63 090b 	sbc.w	r9, r3, fp
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	f04f 0300 	mov.w	r3, #0
 8007276:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800727a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800727e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007282:	ebb2 0408 	subs.w	r4, r2, r8
 8007286:	eb63 0509 	sbc.w	r5, r3, r9
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	00eb      	lsls	r3, r5, #3
 8007294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007298:	00e2      	lsls	r2, r4, #3
 800729a:	4614      	mov	r4, r2
 800729c:	461d      	mov	r5, r3
 800729e:	eb14 030a 	adds.w	r3, r4, sl
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	eb45 030b 	adc.w	r3, r5, fp
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b6:	4629      	mov	r1, r5
 80072b8:	028b      	lsls	r3, r1, #10
 80072ba:	4621      	mov	r1, r4
 80072bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c0:	4621      	mov	r1, r4
 80072c2:	028a      	lsls	r2, r1, #10
 80072c4:	4610      	mov	r0, r2
 80072c6:	4619      	mov	r1, r3
 80072c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ca:	2200      	movs	r2, #0
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	60fa      	str	r2, [r7, #12]
 80072d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d4:	f7f8 fff4 	bl	80002c0 <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4613      	mov	r3, r2
 80072de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072e0:	4b0b      	ldr	r3, [pc, #44]	; (8007310 <HAL_RCC_GetSysClockFreq+0x180>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	3301      	adds	r3, #1
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80072f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072fa:	e002      	b.n	8007302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <HAL_RCC_GetSysClockFreq+0x184>)
 80072fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007304:	4618      	mov	r0, r3
 8007306:	3740      	adds	r7, #64	; 0x40
 8007308:	46bd      	mov	sp, r7
 800730a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730e:	bf00      	nop
 8007310:	40023800 	.word	0x40023800
 8007314:	00f42400 	.word	0x00f42400
 8007318:	017d7840 	.word	0x017d7840

0800731c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007320:	4b03      	ldr	r3, [pc, #12]	; (8007330 <HAL_RCC_GetHCLKFreq+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20001a2c 	.word	0x20001a2c

08007334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007340:	2300      	movs	r3, #0
 8007342:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d012      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800735c:	4b69      	ldr	r3, [pc, #420]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	4a68      	ldr	r2, [pc, #416]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007366:	6093      	str	r3, [r2, #8]
 8007368:	4b66      	ldr	r3, [pc, #408]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007370:	4964      	ldr	r1, [pc, #400]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007372:	4313      	orrs	r3, r2
 8007374:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d017      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800738e:	4b5d      	ldr	r3, [pc, #372]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800739c:	4959      	ldr	r1, [pc, #356]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ac:	d101      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d017      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073ca:	4b4e      	ldr	r3, [pc, #312]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	494a      	ldr	r1, [pc, #296]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073e8:	d101      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d101      	bne.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80073f6:	2301      	movs	r3, #1
 80073f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 808b 	beq.w	800752e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007418:	4b3a      	ldr	r3, [pc, #232]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	4a39      	ldr	r2, [pc, #228]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007422:	6413      	str	r3, [r2, #64]	; 0x40
 8007424:	4b37      	ldr	r3, [pc, #220]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007430:	4b35      	ldr	r3, [pc, #212]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a34      	ldr	r2, [pc, #208]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800743a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743c:	f7fd f96a 	bl	8004714 <HAL_GetTick>
 8007440:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007444:	f7fd f966 	bl	8004714 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b64      	cmp	r3, #100	; 0x64
 8007450:	d901      	bls.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e357      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007456:	4b2c      	ldr	r3, [pc, #176]	; (8007508 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007462:	4b28      	ldr	r3, [pc, #160]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d035      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d02e      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007480:	4b20      	ldr	r3, [pc, #128]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007488:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800748a:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007494:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007496:	4b1b      	ldr	r3, [pc, #108]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074a8:	4b16      	ldr	r3, [pc, #88]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d114      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074b4:	f7fd f92e 	bl	8004714 <HAL_GetTick>
 80074b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ba:	e00a      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074bc:	f7fd f92a 	bl	8004714 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e319      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0ee      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ea:	d111      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074f8:	4b04      	ldr	r3, [pc, #16]	; (800750c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80074fa:	400b      	ands	r3, r1
 80074fc:	4901      	ldr	r1, [pc, #4]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	608b      	str	r3, [r1, #8]
 8007502:	e00b      	b.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007504:	40023800 	.word	0x40023800
 8007508:	40007000 	.word	0x40007000
 800750c:	0ffffcff 	.word	0x0ffffcff
 8007510:	4baa      	ldr	r3, [pc, #680]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	4aa9      	ldr	r2, [pc, #676]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007516:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800751a:	6093      	str	r3, [r2, #8]
 800751c:	4ba7      	ldr	r3, [pc, #668]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800751e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007528:	49a4      	ldr	r1, [pc, #656]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752a:	4313      	orrs	r3, r2
 800752c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 0310 	and.w	r3, r3, #16
 8007536:	2b00      	cmp	r3, #0
 8007538:	d010      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800753a:	4ba0      	ldr	r3, [pc, #640]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007540:	4a9e      	ldr	r2, [pc, #632]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007546:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800754a:	4b9c      	ldr	r3, [pc, #624]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800754c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007554:	4999      	ldr	r1, [pc, #612]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007556:	4313      	orrs	r3, r2
 8007558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00a      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007568:	4b94      	ldr	r3, [pc, #592]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007576:	4991      	ldr	r1, [pc, #580]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800758a:	4b8c      	ldr	r3, [pc, #560]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007598:	4988      	ldr	r1, [pc, #544]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00a      	beq.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075ac:	4b83      	ldr	r3, [pc, #524]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ba:	4980      	ldr	r1, [pc, #512]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00a      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075ce:	4b7b      	ldr	r3, [pc, #492]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4977      	ldr	r1, [pc, #476]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075f0:	4b72      	ldr	r3, [pc, #456]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f6:	f023 0203 	bic.w	r2, r3, #3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	496f      	ldr	r1, [pc, #444]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007612:	4b6a      	ldr	r3, [pc, #424]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007618:	f023 020c 	bic.w	r2, r3, #12
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007620:	4966      	ldr	r1, [pc, #408]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00a      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007634:	4b61      	ldr	r3, [pc, #388]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007642:	495e      	ldr	r1, [pc, #376]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00a      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007656:	4b59      	ldr	r3, [pc, #356]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007664:	4955      	ldr	r1, [pc, #340]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007666:	4313      	orrs	r3, r2
 8007668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00a      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007678:	4b50      	ldr	r3, [pc, #320]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	494d      	ldr	r1, [pc, #308]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007688:	4313      	orrs	r3, r2
 800768a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800769a:	4b48      	ldr	r3, [pc, #288]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800769c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076a8:	4944      	ldr	r1, [pc, #272]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80076bc:	4b3f      	ldr	r3, [pc, #252]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ca:	493c      	ldr	r1, [pc, #240]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00a      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076de:	4b37      	ldr	r3, [pc, #220]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ec:	4933      	ldr	r1, [pc, #204]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ee:	4313      	orrs	r3, r2
 80076f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007700:	4b2e      	ldr	r3, [pc, #184]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007706:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800770e:	492b      	ldr	r1, [pc, #172]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007710:	4313      	orrs	r3, r2
 8007712:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d011      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007722:	4b26      	ldr	r3, [pc, #152]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007728:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007730:	4922      	ldr	r1, [pc, #136]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800773c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007740:	d101      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007742:	2301      	movs	r3, #1
 8007744:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0308 	and.w	r3, r3, #8
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007752:	2301      	movs	r3, #1
 8007754:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007762:	4b16      	ldr	r3, [pc, #88]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007770:	4912      	ldr	r1, [pc, #72]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007784:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007794:	4909      	ldr	r1, [pc, #36]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d006      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80d9 	beq.w	8007962 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077b0:	4b02      	ldr	r3, [pc, #8]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a01      	ldr	r2, [pc, #4]	; (80077bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077ba:	e001      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80077bc:	40023800 	.word	0x40023800
 80077c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077c2:	f7fc ffa7 	bl	8004714 <HAL_GetTick>
 80077c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077c8:	e008      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077ca:	f7fc ffa3 	bl	8004714 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b64      	cmp	r3, #100	; 0x64
 80077d6:	d901      	bls.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e194      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077dc:	4b6c      	ldr	r3, [pc, #432]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1f0      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d021      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d11d      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077fc:	4b64      	ldr	r3, [pc, #400]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800780a:	4b61      	ldr	r3, [pc, #388]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800780c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007810:	0e1b      	lsrs	r3, r3, #24
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	019a      	lsls	r2, r3, #6
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	041b      	lsls	r3, r3, #16
 8007822:	431a      	orrs	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	061b      	lsls	r3, r3, #24
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	071b      	lsls	r3, r3, #28
 8007830:	4957      	ldr	r1, [pc, #348]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784c:	d00a      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02e      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007862:	d129      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007864:	4b4a      	ldr	r3, [pc, #296]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786a:	0c1b      	lsrs	r3, r3, #16
 800786c:	f003 0303 	and.w	r3, r3, #3
 8007870:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007872:	4b47      	ldr	r3, [pc, #284]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007878:	0f1b      	lsrs	r3, r3, #28
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	019a      	lsls	r2, r3, #6
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	041b      	lsls	r3, r3, #16
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	061b      	lsls	r3, r3, #24
 8007892:	431a      	orrs	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	071b      	lsls	r3, r3, #28
 8007898:	493d      	ldr	r1, [pc, #244]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078a0:	4b3b      	ldr	r3, [pc, #236]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a6:	f023 021f 	bic.w	r2, r3, #31
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	3b01      	subs	r3, #1
 80078b0:	4937      	ldr	r1, [pc, #220]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01d      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078c4:	4b32      	ldr	r3, [pc, #200]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ca:	0e1b      	lsrs	r3, r3, #24
 80078cc:	f003 030f 	and.w	r3, r3, #15
 80078d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078d2:	4b2f      	ldr	r3, [pc, #188]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	0f1b      	lsrs	r3, r3, #28
 80078da:	f003 0307 	and.w	r3, r3, #7
 80078de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	019a      	lsls	r2, r3, #6
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	041b      	lsls	r3, r3, #16
 80078ec:	431a      	orrs	r2, r3
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	061b      	lsls	r3, r3, #24
 80078f2:	431a      	orrs	r2, r3
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	071b      	lsls	r3, r3, #28
 80078f8:	4925      	ldr	r1, [pc, #148]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d011      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	019a      	lsls	r2, r3, #6
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	041b      	lsls	r3, r3, #16
 8007918:	431a      	orrs	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	061b      	lsls	r3, r3, #24
 8007920:	431a      	orrs	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	071b      	lsls	r3, r3, #28
 8007928:	4919      	ldr	r1, [pc, #100]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007930:	4b17      	ldr	r3, [pc, #92]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a16      	ldr	r2, [pc, #88]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007936:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800793a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793c:	f7fc feea 	bl	8004714 <HAL_GetTick>
 8007940:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007944:	f7fc fee6 	bl	8004714 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b64      	cmp	r3, #100	; 0x64
 8007950:	d901      	bls.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e0d7      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007956:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d0f0      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	2b01      	cmp	r3, #1
 8007966:	f040 80cd 	bne.w	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800796a:	4b09      	ldr	r3, [pc, #36]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a08      	ldr	r2, [pc, #32]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007976:	f7fc fecd 	bl	8004714 <HAL_GetTick>
 800797a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800797c:	e00a      	b.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800797e:	f7fc fec9 	bl	8004714 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	2b64      	cmp	r3, #100	; 0x64
 800798a:	d903      	bls.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800798c:	2303      	movs	r3, #3
 800798e:	e0ba      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007990:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007994:	4b5e      	ldr	r3, [pc, #376]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800799c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a0:	d0ed      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d02e      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d12a      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079ca:	4b51      	ldr	r3, [pc, #324]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079d8:	4b4d      	ldr	r3, [pc, #308]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079de:	0f1b      	lsrs	r3, r3, #28
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	019a      	lsls	r2, r3, #6
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	041b      	lsls	r3, r3, #16
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	061b      	lsls	r3, r3, #24
 80079f8:	431a      	orrs	r2, r3
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	071b      	lsls	r3, r3, #28
 80079fe:	4944      	ldr	r1, [pc, #272]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a06:	4b42      	ldr	r3, [pc, #264]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a14:	3b01      	subs	r3, #1
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	493d      	ldr	r1, [pc, #244]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d022      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a34:	d11d      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a36:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3c:	0e1b      	lsrs	r3, r3, #24
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a44:	4b32      	ldr	r3, [pc, #200]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a4a:	0f1b      	lsrs	r3, r3, #28
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	019a      	lsls	r2, r3, #6
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	061b      	lsls	r3, r3, #24
 8007a64:	431a      	orrs	r2, r3
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	071b      	lsls	r3, r3, #28
 8007a6a:	4929      	ldr	r1, [pc, #164]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0308 	and.w	r3, r3, #8
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d028      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a7e:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a84:	0e1b      	lsrs	r3, r3, #24
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a8c:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a92:	0c1b      	lsrs	r3, r3, #16
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	019a      	lsls	r2, r3, #6
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	041b      	lsls	r3, r3, #16
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	071b      	lsls	r3, r3, #28
 8007ab2:	4917      	ldr	r1, [pc, #92]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007aba:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	4911      	ldr	r1, [pc, #68]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a0e      	ldr	r2, [pc, #56]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ada:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007adc:	f7fc fe1a 	bl	8004714 <HAL_GetTick>
 8007ae0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007ae4:	f7fc fe16 	bl	8004714 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b64      	cmp	r3, #100	; 0x64
 8007af0:	d901      	bls.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e007      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007af6:	4b06      	ldr	r3, [pc, #24]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b02:	d1ef      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3720      	adds	r7, #32
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	40023800 	.word	0x40023800

08007b14 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007b1a:	4b98      	ldr	r3, [pc, #608]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b1c:	22c0      	movs	r2, #192	; 0xc0
 8007b1e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007b20:	4b96      	ldr	r3, [pc, #600]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b22:	22a8      	movs	r2, #168	; 0xa8
 8007b24:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007b26:	4b95      	ldr	r3, [pc, #596]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8007b2c:	4b93      	ldr	r3, [pc, #588]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b2e:	227b      	movs	r2, #123	; 0x7b
 8007b30:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007b32:	4b93      	ldr	r3, [pc, #588]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007b34:	22ff      	movs	r2, #255	; 0xff
 8007b36:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007b38:	4b91      	ldr	r3, [pc, #580]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007b3a:	22ff      	movs	r2, #255	; 0xff
 8007b3c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007b3e:	4b90      	ldr	r3, [pc, #576]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007b40:	22ff      	movs	r2, #255	; 0xff
 8007b42:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007b44:	4b8e      	ldr	r3, [pc, #568]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007b4a:	4b8e      	ldr	r3, [pc, #568]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007b4c:	22c0      	movs	r2, #192	; 0xc0
 8007b4e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007b50:	4b8c      	ldr	r3, [pc, #560]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007b52:	22a8      	movs	r2, #168	; 0xa8
 8007b54:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007b56:	4b8b      	ldr	r3, [pc, #556]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007b5c:	4b89      	ldr	r3, [pc, #548]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007b62:	2100      	movs	r1, #0
 8007b64:	2000      	movs	r0, #0
 8007b66:	f006 ff85 	bl	800ea74 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007b6a:	4b84      	ldr	r3, [pc, #528]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	061a      	lsls	r2, r3, #24
 8007b70:	4b82      	ldr	r3, [pc, #520]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	431a      	orrs	r2, r3
 8007b78:	4b80      	ldr	r3, [pc, #512]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b7a:	789b      	ldrb	r3, [r3, #2]
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	4a7e      	ldr	r2, [pc, #504]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b82:	78d2      	ldrb	r2, [r2, #3]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	061a      	lsls	r2, r3, #24
 8007b88:	4b7c      	ldr	r3, [pc, #496]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	0619      	lsls	r1, r3, #24
 8007b8e:	4b7b      	ldr	r3, [pc, #492]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	4319      	orrs	r1, r3
 8007b96:	4b79      	ldr	r3, [pc, #484]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007b98:	789b      	ldrb	r3, [r3, #2]
 8007b9a:	021b      	lsls	r3, r3, #8
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	4977      	ldr	r1, [pc, #476]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007ba0:	78c9      	ldrb	r1, [r1, #3]
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007baa:	431a      	orrs	r2, r3
 8007bac:	4b73      	ldr	r3, [pc, #460]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	0619      	lsls	r1, r3, #24
 8007bb2:	4b72      	ldr	r3, [pc, #456]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	041b      	lsls	r3, r3, #16
 8007bb8:	4319      	orrs	r1, r3
 8007bba:	4b70      	ldr	r3, [pc, #448]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007bbc:	789b      	ldrb	r3, [r3, #2]
 8007bbe:	021b      	lsls	r3, r3, #8
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	496e      	ldr	r1, [pc, #440]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007bc4:	78c9      	ldrb	r1, [r1, #3]
 8007bc6:	430b      	orrs	r3, r1
 8007bc8:	0a1b      	lsrs	r3, r3, #8
 8007bca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	4b6a      	ldr	r3, [pc, #424]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	0619      	lsls	r1, r3, #24
 8007bd6:	4b69      	ldr	r3, [pc, #420]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	041b      	lsls	r3, r3, #16
 8007bdc:	4319      	orrs	r1, r3
 8007bde:	4b67      	ldr	r3, [pc, #412]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007be0:	789b      	ldrb	r3, [r3, #2]
 8007be2:	021b      	lsls	r3, r3, #8
 8007be4:	430b      	orrs	r3, r1
 8007be6:	4965      	ldr	r1, [pc, #404]	; (8007d7c <MX_LWIP_Init+0x268>)
 8007be8:	78c9      	ldrb	r1, [r1, #3]
 8007bea:	430b      	orrs	r3, r1
 8007bec:	0e1b      	lsrs	r3, r3, #24
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	4a65      	ldr	r2, [pc, #404]	; (8007d88 <MX_LWIP_Init+0x274>)
 8007bf2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007bf4:	4b62      	ldr	r3, [pc, #392]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	061a      	lsls	r2, r3, #24
 8007bfa:	4b61      	ldr	r3, [pc, #388]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	431a      	orrs	r2, r3
 8007c02:	4b5f      	ldr	r3, [pc, #380]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c04:	789b      	ldrb	r3, [r3, #2]
 8007c06:	021b      	lsls	r3, r3, #8
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	4a5d      	ldr	r2, [pc, #372]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c0c:	78d2      	ldrb	r2, [r2, #3]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	061a      	lsls	r2, r3, #24
 8007c12:	4b5b      	ldr	r3, [pc, #364]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	0619      	lsls	r1, r3, #24
 8007c18:	4b59      	ldr	r3, [pc, #356]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c1a:	785b      	ldrb	r3, [r3, #1]
 8007c1c:	041b      	lsls	r3, r3, #16
 8007c1e:	4319      	orrs	r1, r3
 8007c20:	4b57      	ldr	r3, [pc, #348]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c22:	789b      	ldrb	r3, [r3, #2]
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	430b      	orrs	r3, r1
 8007c28:	4955      	ldr	r1, [pc, #340]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c2a:	78c9      	ldrb	r1, [r1, #3]
 8007c2c:	430b      	orrs	r3, r1
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c34:	431a      	orrs	r2, r3
 8007c36:	4b52      	ldr	r3, [pc, #328]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	0619      	lsls	r1, r3, #24
 8007c3c:	4b50      	ldr	r3, [pc, #320]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	4319      	orrs	r1, r3
 8007c44:	4b4e      	ldr	r3, [pc, #312]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c46:	789b      	ldrb	r3, [r3, #2]
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	494c      	ldr	r1, [pc, #304]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c4e:	78c9      	ldrb	r1, [r1, #3]
 8007c50:	430b      	orrs	r3, r1
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	4b49      	ldr	r3, [pc, #292]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	0619      	lsls	r1, r3, #24
 8007c60:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c62:	785b      	ldrb	r3, [r3, #1]
 8007c64:	041b      	lsls	r3, r3, #16
 8007c66:	4319      	orrs	r1, r3
 8007c68:	4b45      	ldr	r3, [pc, #276]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c6a:	789b      	ldrb	r3, [r3, #2]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	430b      	orrs	r3, r1
 8007c70:	4943      	ldr	r1, [pc, #268]	; (8007d80 <MX_LWIP_Init+0x26c>)
 8007c72:	78c9      	ldrb	r1, [r1, #3]
 8007c74:	430b      	orrs	r3, r1
 8007c76:	0e1b      	lsrs	r3, r3, #24
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	4a44      	ldr	r2, [pc, #272]	; (8007d8c <MX_LWIP_Init+0x278>)
 8007c7c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007c7e:	4b41      	ldr	r3, [pc, #260]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	061a      	lsls	r2, r3, #24
 8007c84:	4b3f      	ldr	r3, [pc, #252]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	4b3d      	ldr	r3, [pc, #244]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007c8e:	789b      	ldrb	r3, [r3, #2]
 8007c90:	021b      	lsls	r3, r3, #8
 8007c92:	4313      	orrs	r3, r2
 8007c94:	4a3b      	ldr	r2, [pc, #236]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007c96:	78d2      	ldrb	r2, [r2, #3]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	061a      	lsls	r2, r3, #24
 8007c9c:	4b39      	ldr	r3, [pc, #228]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	0619      	lsls	r1, r3, #24
 8007ca2:	4b38      	ldr	r3, [pc, #224]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007ca4:	785b      	ldrb	r3, [r3, #1]
 8007ca6:	041b      	lsls	r3, r3, #16
 8007ca8:	4319      	orrs	r1, r3
 8007caa:	4b36      	ldr	r3, [pc, #216]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cac:	789b      	ldrb	r3, [r3, #2]
 8007cae:	021b      	lsls	r3, r3, #8
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	4934      	ldr	r1, [pc, #208]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cb4:	78c9      	ldrb	r1, [r1, #3]
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	4b30      	ldr	r3, [pc, #192]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	0619      	lsls	r1, r3, #24
 8007cc6:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cc8:	785b      	ldrb	r3, [r3, #1]
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	4319      	orrs	r1, r3
 8007cce:	4b2d      	ldr	r3, [pc, #180]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cd0:	789b      	ldrb	r3, [r3, #2]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	430b      	orrs	r3, r1
 8007cd6:	492b      	ldr	r1, [pc, #172]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cd8:	78c9      	ldrb	r1, [r1, #3]
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	0a1b      	lsrs	r3, r3, #8
 8007cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	0619      	lsls	r1, r3, #24
 8007cea:	4b26      	ldr	r3, [pc, #152]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	041b      	lsls	r3, r3, #16
 8007cf0:	4319      	orrs	r1, r3
 8007cf2:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cf4:	789b      	ldrb	r3, [r3, #2]
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	430b      	orrs	r3, r1
 8007cfa:	4922      	ldr	r1, [pc, #136]	; (8007d84 <MX_LWIP_Init+0x270>)
 8007cfc:	78c9      	ldrb	r1, [r1, #3]
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	0e1b      	lsrs	r3, r3, #24
 8007d02:	4313      	orrs	r3, r2
 8007d04:	4a22      	ldr	r2, [pc, #136]	; (8007d90 <MX_LWIP_Init+0x27c>)
 8007d06:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007d08:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <MX_LWIP_Init+0x280>)
 8007d0a:	9302      	str	r3, [sp, #8]
 8007d0c:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <MX_LWIP_Init+0x284>)
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	2300      	movs	r3, #0
 8007d12:	9300      	str	r3, [sp, #0]
 8007d14:	4b1e      	ldr	r3, [pc, #120]	; (8007d90 <MX_LWIP_Init+0x27c>)
 8007d16:	4a1d      	ldr	r2, [pc, #116]	; (8007d8c <MX_LWIP_Init+0x278>)
 8007d18:	491b      	ldr	r1, [pc, #108]	; (8007d88 <MX_LWIP_Init+0x274>)
 8007d1a:	4820      	ldr	r0, [pc, #128]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d1c:	f007 fc74 	bl	800f608 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007d20:	481e      	ldr	r0, [pc, #120]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d22:	f007 fe23 	bl	800f96c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007d26:	4b1d      	ldr	r3, [pc, #116]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d2c:	089b      	lsrs	r3, r3, #2
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007d38:	4818      	ldr	r0, [pc, #96]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d3a:	f007 fe27 	bl	800f98c <netif_set_up>
 8007d3e:	e002      	b.n	8007d46 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007d40:	4816      	ldr	r0, [pc, #88]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d42:	f007 fe8f 	bl	800fa64 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007d46:	4916      	ldr	r1, [pc, #88]	; (8007da0 <MX_LWIP_Init+0x28c>)
 8007d48:	4814      	ldr	r0, [pc, #80]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d4a:	f007 ff21 	bl	800fb90 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007d4e:	2224      	movs	r2, #36	; 0x24
 8007d50:	2100      	movs	r1, #0
 8007d52:	4814      	ldr	r0, [pc, #80]	; (8007da4 <MX_LWIP_Init+0x290>)
 8007d54:	f011 ffd9 	bl	8019d0a <memset>
  attributes.name = "EthLink";
 8007d58:	4b12      	ldr	r3, [pc, #72]	; (8007da4 <MX_LWIP_Init+0x290>)
 8007d5a:	4a13      	ldr	r2, [pc, #76]	; (8007da8 <MX_LWIP_Init+0x294>)
 8007d5c:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007d5e:	4b11      	ldr	r3, [pc, #68]	; (8007da4 <MX_LWIP_Init+0x290>)
 8007d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d64:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007d66:	4b0f      	ldr	r3, [pc, #60]	; (8007da4 <MX_LWIP_Init+0x290>)
 8007d68:	2210      	movs	r2, #16
 8007d6a:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007d6c:	4a0d      	ldr	r2, [pc, #52]	; (8007da4 <MX_LWIP_Init+0x290>)
 8007d6e:	490b      	ldr	r1, [pc, #44]	; (8007d9c <MX_LWIP_Init+0x288>)
 8007d70:	480e      	ldr	r0, [pc, #56]	; (8007dac <MX_LWIP_Init+0x298>)
 8007d72:	f000 fd85 	bl	8008880 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007d76:	bf00      	nop
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20041b8c 	.word	0x20041b8c
 8007d80:	20041b90 	.word	0x20041b90
 8007d84:	20041b94 	.word	0x20041b94
 8007d88:	20041b80 	.word	0x20041b80
 8007d8c:	20041b84 	.word	0x20041b84
 8007d90:	20041b88 	.word	0x20041b88
 8007d94:	0800e985 	.word	0x0800e985
 8007d98:	080082ad 	.word	0x080082ad
 8007d9c:	20041b4c 	.word	0x20041b4c
 8007da0:	08007db1 	.word	0x08007db1
 8007da4:	20041b98 	.word	0x20041b98
 8007da8:	0801ace0 	.word	0x0801ace0
 8007dac:	08008539 	.word	0x08008539

08007db0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <SCB_InvalidateDCache_by_Addr>:
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007dd6:	2320      	movs	r3, #32
 8007dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007dda:	f3bf 8f4f 	dsb	sy
}
 8007dde:	bf00      	nop
    while (op_size > 0) {
 8007de0:	e00b      	b.n	8007dfa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007de2:	4a0d      	ldr	r2, [pc, #52]	; (8007e18 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4413      	add	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	dcf0      	bgt.n	8007de2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007e00:	f3bf 8f4f 	dsb	sy
}
 8007e04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e06:	f3bf 8f6f 	isb	sy
}
 8007e0a:	bf00      	nop
}
 8007e0c:	bf00      	nop
 8007e0e:	371c      	adds	r7, #28
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	e000ed00 	.word	0xe000ed00

08007e1c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007e24:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <HAL_ETH_RxCpltCallback+0x1c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f001 f851 	bl	8008ed0 <osSemaphoreRelease>
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20046548 	.word	0x20046548

08007e3c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007e44:	4b04      	ldr	r3, [pc, #16]	; (8007e58 <HAL_ETH_TxCpltCallback+0x1c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f001 f841 	bl	8008ed0 <osSemaphoreRelease>
}
 8007e4e:	bf00      	nop
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	2004654c 	.word	0x2004654c

08007e5c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7fd fbd3 	bl	8005610 <HAL_ETH_GetDMAError>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e70:	2b80      	cmp	r3, #128	; 0x80
 8007e72:	d104      	bne.n	8007e7e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007e74:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <HAL_ETH_ErrorCallback+0x2c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 f829 	bl	8008ed0 <osSemaphoreRelease>
  }
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20046548 	.word	0x20046548

08007e8c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b0aa      	sub	sp, #168	; 0xa8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8007ea6:	f107 0310 	add.w	r3, r7, #16
 8007eaa:	2264      	movs	r2, #100	; 0x64
 8007eac:	2100      	movs	r1, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f011 ff2b 	bl	8019d0a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007eb4:	4b85      	ldr	r3, [pc, #532]	; (80080cc <low_level_init+0x240>)
 8007eb6:	4a86      	ldr	r2, [pc, #536]	; (80080d0 <low_level_init+0x244>)
 8007eb8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007ebe:	2380      	movs	r3, #128	; 0x80
 8007ec0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007ec2:	23e1      	movs	r3, #225	; 0xe1
 8007ec4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007ed2:	4a7e      	ldr	r2, [pc, #504]	; (80080cc <low_level_init+0x240>)
 8007ed4:	f107 0308 	add.w	r3, r7, #8
 8007ed8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007eda:	4b7c      	ldr	r3, [pc, #496]	; (80080cc <low_level_init+0x240>)
 8007edc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007ee0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007ee2:	4b7a      	ldr	r3, [pc, #488]	; (80080cc <low_level_init+0x240>)
 8007ee4:	4a7b      	ldr	r2, [pc, #492]	; (80080d4 <low_level_init+0x248>)
 8007ee6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007ee8:	4b78      	ldr	r3, [pc, #480]	; (80080cc <low_level_init+0x240>)
 8007eea:	4a7b      	ldr	r2, [pc, #492]	; (80080d8 <low_level_init+0x24c>)
 8007eec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007eee:	4b77      	ldr	r3, [pc, #476]	; (80080cc <low_level_init+0x240>)
 8007ef0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007ef4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007ef6:	4875      	ldr	r0, [pc, #468]	; (80080cc <low_level_init+0x240>)
 8007ef8:	f7fc fd4e 	bl	8004998 <HAL_ETH_Init>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007f02:	2238      	movs	r2, #56	; 0x38
 8007f04:	2100      	movs	r1, #0
 8007f06:	4875      	ldr	r0, [pc, #468]	; (80080dc <low_level_init+0x250>)
 8007f08:	f011 feff 	bl	8019d0a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007f0c:	4b73      	ldr	r3, [pc, #460]	; (80080dc <low_level_init+0x250>)
 8007f0e:	2221      	movs	r2, #33	; 0x21
 8007f10:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007f12:	4b72      	ldr	r3, [pc, #456]	; (80080dc <low_level_init+0x250>)
 8007f14:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8007f18:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007f1a:	4b70      	ldr	r3, [pc, #448]	; (80080dc <low_level_init+0x250>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007f20:	486f      	ldr	r0, [pc, #444]	; (80080e0 <low_level_init+0x254>)
 8007f22:	f007 fa2b 	bl	800f37c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2206      	movs	r2, #6
 8007f2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f2e:	4b67      	ldr	r3, [pc, #412]	; (80080cc <low_level_init+0x240>)
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f3a:	4b64      	ldr	r3, [pc, #400]	; (80080cc <low_level_init+0x240>)
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	785a      	ldrb	r2, [r3, #1]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f46:	4b61      	ldr	r3, [pc, #388]	; (80080cc <low_level_init+0x240>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	789a      	ldrb	r2, [r3, #2]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f52:	4b5e      	ldr	r3, [pc, #376]	; (80080cc <low_level_init+0x240>)
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	78da      	ldrb	r2, [r3, #3]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f5e:	4b5b      	ldr	r3, [pc, #364]	; (80080cc <low_level_init+0x240>)
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	791a      	ldrb	r2, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f6a:	4b58      	ldr	r3, [pc, #352]	; (80080cc <low_level_init+0x240>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	795a      	ldrb	r2, [r3, #5]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f7c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f84:	f043 030a 	orr.w	r3, r3, #10
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007f90:	2200      	movs	r2, #0
 8007f92:	2101      	movs	r1, #1
 8007f94:	2001      	movs	r0, #1
 8007f96:	f000 fe99 	bl	8008ccc <osSemaphoreNew>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	4a51      	ldr	r2, [pc, #324]	; (80080e4 <low_level_init+0x258>)
 8007f9e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	2001      	movs	r0, #1
 8007fa6:	f000 fe91 	bl	8008ccc <osSemaphoreNew>
 8007faa:	4603      	mov	r3, r0
 8007fac:	4a4e      	ldr	r2, [pc, #312]	; (80080e8 <low_level_init+0x25c>)
 8007fae:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007fb0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007fb4:	2224      	movs	r2, #36	; 0x24
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f011 fea6 	bl	8019d0a <memset>
  attributes.name = "EthIf";
 8007fbe:	4b4b      	ldr	r3, [pc, #300]	; (80080ec <low_level_init+0x260>)
 8007fc0:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007fc2:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007fc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8007fca:	2330      	movs	r3, #48	; 0x30
 8007fcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007fd0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4845      	ldr	r0, [pc, #276]	; (80080f0 <low_level_init+0x264>)
 8007fda:	f000 fc51 	bl	8008880 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007fde:	4945      	ldr	r1, [pc, #276]	; (80080f4 <low_level_init+0x268>)
 8007fe0:	4845      	ldr	r0, [pc, #276]	; (80080f8 <low_level_init+0x26c>)
 8007fe2:	f7fc fa40 	bl	8004466 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007fe6:	4844      	ldr	r0, [pc, #272]	; (80080f8 <low_level_init+0x26c>)
 8007fe8:	f7fc fa6f 	bl	80044ca <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007fec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d164      	bne.n	80080be <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007ff4:	4840      	ldr	r0, [pc, #256]	; (80080f8 <low_level_init+0x26c>)
 8007ff6:	f7fc fab5 	bl	8004564 <LAN8742_GetLinkState>
 8007ffa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007ffe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008002:	2b01      	cmp	r3, #1
 8008004:	dc06      	bgt.n	8008014 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f007 fd92 	bl	800fb30 <netif_set_link_down>
      netif_set_down(netif);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f007 fd29 	bl	800fa64 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008012:	e056      	b.n	80080c2 <low_level_init+0x236>
      switch (PHYLinkState)
 8008014:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008018:	3b02      	subs	r3, #2
 800801a:	2b03      	cmp	r3, #3
 800801c:	d82a      	bhi.n	8008074 <low_level_init+0x1e8>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <low_level_init+0x198>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	08008035 	.word	0x08008035
 8008028:	08008047 	.word	0x08008047
 800802c:	08008057 	.word	0x08008057
 8008030:	08008067 	.word	0x08008067
        duplex = ETH_FULLDUPLEX_MODE;
 8008034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800803c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008044:	e01f      	b.n	8008086 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008046:	2300      	movs	r3, #0
 8008048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800804c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008050:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008054:	e017      	b.n	8008086 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800805a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008064:	e00f      	b.n	8008086 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008066:	2300      	movs	r3, #0
 8008068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800806c:	2300      	movs	r3, #0
 800806e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008072:	e008      	b.n	8008086 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800807c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008080:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008084:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008086:	f107 0310 	add.w	r3, r7, #16
 800808a:	4619      	mov	r1, r3
 800808c:	480f      	ldr	r0, [pc, #60]	; (80080cc <low_level_init+0x240>)
 800808e:	f7fd f96b 	bl	8005368 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008092:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008098:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800809e:	f107 0310 	add.w	r3, r7, #16
 80080a2:	4619      	mov	r1, r3
 80080a4:	4809      	ldr	r0, [pc, #36]	; (80080cc <low_level_init+0x240>)
 80080a6:	f7fd fa56 	bl	8005556 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80080aa:	4808      	ldr	r0, [pc, #32]	; (80080cc <low_level_init+0x240>)
 80080ac:	f7fc fd0e 	bl	8004acc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f007 fc6b 	bl	800f98c <netif_set_up>
    netif_set_link_up(netif);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f007 fd06 	bl	800fac8 <netif_set_link_up>
}
 80080bc:	e001      	b.n	80080c2 <low_level_init+0x236>
    Error_Handler();
 80080be:	f7fb fd47 	bl	8003b50 <Error_Handler>
}
 80080c2:	bf00      	nop
 80080c4:	37a8      	adds	r7, #168	; 0xa8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20046550 	.word	0x20046550
 80080d0:	40028000 	.word	0x40028000
 80080d4:	20001b60 	.word	0x20001b60
 80080d8:	20001ac0 	.word	0x20001ac0
 80080dc:	20046600 	.word	0x20046600
 80080e0:	0801e260 	.word	0x0801e260
 80080e4:	20046548 	.word	0x20046548
 80080e8:	2004654c 	.word	0x2004654c
 80080ec:	0801ace8 	.word	0x0801ace8
 80080f0:	08008259 	.word	0x08008259
 80080f4:	20001a38 	.word	0x20001a38
 80080f8:	20046638 	.word	0x20046638

080080fc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b092      	sub	sp, #72	; 0x48
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800810a:	2300      	movs	r3, #0
 800810c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008114:	f107 030c 	add.w	r3, r7, #12
 8008118:	2230      	movs	r2, #48	; 0x30
 800811a:	2100      	movs	r1, #0
 800811c:	4618      	mov	r0, r3
 800811e:	f011 fdf4 	bl	8019d0a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008122:	f107 030c 	add.w	r3, r7, #12
 8008126:	2230      	movs	r2, #48	; 0x30
 8008128:	2100      	movs	r1, #0
 800812a:	4618      	mov	r0, r3
 800812c:	f011 fded 	bl	8019d0a <memset>

  for(q = p; q != NULL; q = q->next)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	643b      	str	r3, [r7, #64]	; 0x40
 8008134:	e045      	b.n	80081c2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008138:	2b03      	cmp	r3, #3
 800813a:	d902      	bls.n	8008142 <low_level_output+0x46>
      return ERR_IF;
 800813c:	f06f 030b 	mvn.w	r3, #11
 8008140:	e065      	b.n	800820e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8008142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008144:	6859      	ldr	r1, [r3, #4]
 8008146:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008148:	4613      	mov	r3, r2
 800814a:	005b      	lsls	r3, r3, #1
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	3348      	adds	r3, #72	; 0x48
 8008152:	443b      	add	r3, r7
 8008154:	3b3c      	subs	r3, #60	; 0x3c
 8008156:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800815a:	895b      	ldrh	r3, [r3, #10]
 800815c:	4619      	mov	r1, r3
 800815e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	3348      	adds	r3, #72	; 0x48
 800816a:	443b      	add	r3, r7
 800816c:	3b38      	subs	r3, #56	; 0x38
 800816e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008172:	2b00      	cmp	r3, #0
 8008174:	d011      	beq.n	800819a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	f107 000c 	add.w	r0, r7, #12
 800817e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008180:	460b      	mov	r3, r1
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	440b      	add	r3, r1
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	18c1      	adds	r1, r0, r3
 800818a:	4613      	mov	r3, r2
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	4413      	add	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	3348      	adds	r3, #72	; 0x48
 8008194:	443b      	add	r3, r7
 8008196:	3b34      	subs	r3, #52	; 0x34
 8008198:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d109      	bne.n	80081b6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80081a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a4:	4613      	mov	r3, r2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	3348      	adds	r3, #72	; 0x48
 80081ae:	443b      	add	r3, r7
 80081b0:	3b34      	subs	r3, #52	; 0x34
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80081b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081b8:	3301      	adds	r3, #1
 80081ba:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80081bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	643b      	str	r3, [r7, #64]	; 0x40
 80081c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1b6      	bne.n	8008136 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	891b      	ldrh	r3, [r3, #8]
 80081cc:	461a      	mov	r2, r3
 80081ce:	4b12      	ldr	r3, [pc, #72]	; (8008218 <low_level_output+0x11c>)
 80081d0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80081d2:	4a11      	ldr	r2, [pc, #68]	; (8008218 <low_level_output+0x11c>)
 80081d4:	f107 030c 	add.w	r3, r7, #12
 80081d8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80081da:	4a0f      	ldr	r2, [pc, #60]	; (8008218 <low_level_output+0x11c>)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80081e0:	6838      	ldr	r0, [r7, #0]
 80081e2:	f008 f929 	bl	8010438 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80081e6:	490c      	ldr	r1, [pc, #48]	; (8008218 <low_level_output+0x11c>)
 80081e8:	480c      	ldr	r0, [pc, #48]	; (800821c <low_level_output+0x120>)
 80081ea:	f7fc fd5f 	bl	8004cac <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80081ee:	bf00      	nop
 80081f0:	4b0b      	ldr	r3, [pc, #44]	; (8008220 <low_level_output+0x124>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fe03 	bl	8008e04 <osSemaphoreAcquire>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1f5      	bne.n	80081f0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8008204:	4805      	ldr	r0, [pc, #20]	; (800821c <low_level_output+0x120>)
 8008206:	f7fc fef1 	bl	8004fec <HAL_ETH_ReleaseTxPacket>

  return errval;
 800820a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800820e:	4618      	mov	r0, r3
 8008210:	3748      	adds	r7, #72	; 0x48
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	20046600 	.word	0x20046600
 800821c:	20046550 	.word	0x20046550
 8008220:	2004654c 	.word	0x2004654c

08008224 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <low_level_input+0x2c>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	4619      	mov	r1, r3
 800823e:	4805      	ldr	r0, [pc, #20]	; (8008254 <low_level_input+0x30>)
 8008240:	f7fc fd90 	bl	8004d64 <HAL_ETH_ReadData>
  }

  return p;
 8008244:	68fb      	ldr	r3, [r7, #12]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20046544 	.word	0x20046544
 8008254:	20046550 	.word	0x20046550

08008258 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008268:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <ethernetif_input+0x50>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fdc7 	bl	8008e04 <osSemaphoreAcquire>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f5      	bne.n	8008268 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800827c:	68b8      	ldr	r0, [r7, #8]
 800827e:	f7ff ffd1 	bl	8008224 <low_level_input>
 8008282:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	68b9      	ldr	r1, [r7, #8]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	4798      	blx	r3
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f008 f826 	bl	80102ec <pbuf_free>
          }
        }
      } while(p!=NULL);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1ea      	bne.n	800827c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80082a6:	e7df      	b.n	8008268 <ethernetif_input+0x10>
 80082a8:	20046548 	.word	0x20046548

080082ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d106      	bne.n	80082c8 <ethernetif_init+0x1c>
 80082ba:	4b0e      	ldr	r3, [pc, #56]	; (80082f4 <ethernetif_init+0x48>)
 80082bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80082c0:	490d      	ldr	r1, [pc, #52]	; (80082f8 <ethernetif_init+0x4c>)
 80082c2:	480e      	ldr	r0, [pc, #56]	; (80082fc <ethernetif_init+0x50>)
 80082c4:	f011 fdbe 	bl	8019e44 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2273      	movs	r2, #115	; 0x73
 80082cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2274      	movs	r2, #116	; 0x74
 80082d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a09      	ldr	r2, [pc, #36]	; (8008300 <ethernetif_init+0x54>)
 80082dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a08      	ldr	r2, [pc, #32]	; (8008304 <ethernetif_init+0x58>)
 80082e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7ff fdd1 	bl	8007e8c <low_level_init>

  return ERR_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	0801acf0 	.word	0x0801acf0
 80082f8:	0801ad0c 	.word	0x0801ad0c
 80082fc:	0801ad1c 	.word	0x0801ad1c
 8008300:	08017a35 	.word	0x08017a35
 8008304:	080080fd 	.word	0x080080fd

08008308 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008314:	68f9      	ldr	r1, [r7, #12]
 8008316:	4809      	ldr	r0, [pc, #36]	; (800833c <pbuf_free_custom+0x34>)
 8008318:	f007 f920 	bl	800f55c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800831c:	4b08      	ldr	r3, [pc, #32]	; (8008340 <pbuf_free_custom+0x38>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d107      	bne.n	8008334 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <pbuf_free_custom+0x38>)
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800832a:	4b06      	ldr	r3, [pc, #24]	; (8008344 <pbuf_free_custom+0x3c>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fdce 	bl	8008ed0 <osSemaphoreRelease>
  }
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	0801e260 	.word	0x0801e260
 8008340:	20046544 	.word	0x20046544
 8008344:	20046548 	.word	0x20046548

08008348 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800834c:	f7fc f9e2 	bl	8004714 <HAL_GetTick>
 8008350:	4603      	mov	r3, r0
}
 8008352:	4618      	mov	r0, r3
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08e      	sub	sp, #56	; 0x38
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	605a      	str	r2, [r3, #4]
 800836a:	609a      	str	r2, [r3, #8]
 800836c:	60da      	str	r2, [r3, #12]
 800836e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a44      	ldr	r2, [pc, #272]	; (8008488 <HAL_ETH_MspInit+0x130>)
 8008376:	4293      	cmp	r3, r2
 8008378:	f040 8081 	bne.w	800847e <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800837c:	4b43      	ldr	r3, [pc, #268]	; (800848c <HAL_ETH_MspInit+0x134>)
 800837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008380:	4a42      	ldr	r2, [pc, #264]	; (800848c <HAL_ETH_MspInit+0x134>)
 8008382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008386:	6313      	str	r3, [r2, #48]	; 0x30
 8008388:	4b40      	ldr	r3, [pc, #256]	; (800848c <HAL_ETH_MspInit+0x134>)
 800838a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008390:	623b      	str	r3, [r7, #32]
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	4b3d      	ldr	r3, [pc, #244]	; (800848c <HAL_ETH_MspInit+0x134>)
 8008396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008398:	4a3c      	ldr	r2, [pc, #240]	; (800848c <HAL_ETH_MspInit+0x134>)
 800839a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800839e:	6313      	str	r3, [r2, #48]	; 0x30
 80083a0:	4b3a      	ldr	r3, [pc, #232]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	4b37      	ldr	r3, [pc, #220]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083b0:	4a36      	ldr	r2, [pc, #216]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083b6:	6313      	str	r3, [r2, #48]	; 0x30
 80083b8:	4b34      	ldr	r3, [pc, #208]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c0:	61bb      	str	r3, [r7, #24]
 80083c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80083c4:	4b31      	ldr	r3, [pc, #196]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	4a30      	ldr	r2, [pc, #192]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ce:	6313      	str	r3, [r2, #48]	; 0x30
 80083d0:	4b2e      	ldr	r3, [pc, #184]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	617b      	str	r3, [r7, #20]
 80083da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083dc:	4b2b      	ldr	r3, [pc, #172]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e0:	4a2a      	ldr	r2, [pc, #168]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083e2:	f043 0304 	orr.w	r3, r3, #4
 80083e6:	6313      	str	r3, [r2, #48]	; 0x30
 80083e8:	4b28      	ldr	r3, [pc, #160]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	613b      	str	r3, [r7, #16]
 80083f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f8:	4a24      	ldr	r2, [pc, #144]	; (800848c <HAL_ETH_MspInit+0x134>)
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	6313      	str	r3, [r2, #48]	; 0x30
 8008400:	4b22      	ldr	r3, [pc, #136]	; (800848c <HAL_ETH_MspInit+0x134>)
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	f003 0301 	and.w	r3, r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800840c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008412:	2302      	movs	r3, #2
 8008414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008416:	2300      	movs	r3, #0
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800841a:	2303      	movs	r3, #3
 800841c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800841e:	230b      	movs	r3, #11
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008426:	4619      	mov	r1, r3
 8008428:	4819      	ldr	r0, [pc, #100]	; (8008490 <HAL_ETH_MspInit+0x138>)
 800842a:	f7fd fd1d 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800842e:	2332      	movs	r3, #50	; 0x32
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008432:	2302      	movs	r3, #2
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008436:	2300      	movs	r3, #0
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800843a:	2303      	movs	r3, #3
 800843c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800843e:	230b      	movs	r3, #11
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008442:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008446:	4619      	mov	r1, r3
 8008448:	4812      	ldr	r0, [pc, #72]	; (8008494 <HAL_ETH_MspInit+0x13c>)
 800844a:	f7fd fd0d 	bl	8005e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800844e:	2386      	movs	r3, #134	; 0x86
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008452:	2302      	movs	r3, #2
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008456:	2300      	movs	r3, #0
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800845a:	2303      	movs	r3, #3
 800845c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800845e:	230b      	movs	r3, #11
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008466:	4619      	mov	r1, r3
 8008468:	480b      	ldr	r0, [pc, #44]	; (8008498 <HAL_ETH_MspInit+0x140>)
 800846a:	f7fd fcfd 	bl	8005e68 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800846e:	2200      	movs	r2, #0
 8008470:	2105      	movs	r1, #5
 8008472:	203d      	movs	r0, #61	; 0x3d
 8008474:	f7fc fa59 	bl	800492a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008478:	203d      	movs	r0, #61	; 0x3d
 800847a:	f7fc fa72 	bl	8004962 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800847e:	bf00      	nop
 8008480:	3738      	adds	r7, #56	; 0x38
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40028000 	.word	0x40028000
 800848c:	40023800 	.word	0x40023800
 8008490:	40021800 	.word	0x40021800
 8008494:	40020800 	.word	0x40020800
 8008498:	40020000 	.word	0x40020000

0800849c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80084a0:	4802      	ldr	r0, [pc, #8]	; (80084ac <ETH_PHY_IO_Init+0x10>)
 80084a2:	f7fd f873 	bl	800558c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20046550 	.word	0x20046550

080084b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  return 0;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	4807      	ldr	r0, [pc, #28]	; (80084f0 <ETH_PHY_IO_ReadReg+0x30>)
 80084d4:	f7fc feb4 	bl	8005240 <HAL_ETH_ReadPHYRegister>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80084de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084e2:	e000      	b.n	80084e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20046550 	.word	0x20046550

080084f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	68f9      	ldr	r1, [r7, #12]
 8008506:	4807      	ldr	r0, [pc, #28]	; (8008524 <ETH_PHY_IO_WriteReg+0x30>)
 8008508:	f7fc fee5 	bl	80052d6 <HAL_ETH_WritePHYRegister>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008516:	e000      	b.n	800851a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20046550 	.word	0x20046550

08008528 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800852c:	f7fc f8f2 	bl	8004714 <HAL_GetTick>
 8008530:	4603      	mov	r3, r0
}
 8008532:	4618      	mov	r0, r3
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b0a0      	sub	sp, #128	; 0x80
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008540:	f107 0308 	add.w	r3, r7, #8
 8008544:	2264      	movs	r2, #100	; 0x64
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f011 fbde 	bl	8019d0a <memset>
  int32_t PHYLinkState = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008556:	2300      	movs	r3, #0
 8008558:	67bb      	str	r3, [r7, #120]	; 0x78
 800855a:	2300      	movs	r3, #0
 800855c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008562:	483a      	ldr	r0, [pc, #232]	; (800864c <ethernet_link_thread+0x114>)
 8008564:	f7fb fffe 	bl	8004564 <LAN8742_GetLinkState>
 8008568:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800856a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00c      	beq.n	8008596 <ethernet_link_thread+0x5e>
 800857c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800857e:	2b01      	cmp	r3, #1
 8008580:	dc09      	bgt.n	8008596 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008582:	4833      	ldr	r0, [pc, #204]	; (8008650 <ethernet_link_thread+0x118>)
 8008584:	f7fc fb12 	bl	8004bac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008588:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800858a:	f007 fa6b 	bl	800fa64 <netif_set_down>
    netif_set_link_down(netif);
 800858e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008590:	f007 face 	bl	800fb30 <netif_set_link_down>
 8008594:	e055      	b.n	8008642 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d14e      	bne.n	8008642 <ethernet_link_thread+0x10a>
 80085a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	dd4b      	ble.n	8008642 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80085aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085ac:	3b02      	subs	r3, #2
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d82a      	bhi.n	8008608 <ethernet_link_thread+0xd0>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <ethernet_link_thread+0x80>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085db 	.word	0x080085db
 80085c0:	080085eb 	.word	0x080085eb
 80085c4:	080085fb 	.word	0x080085fb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80085c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80085ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085d4:	2301      	movs	r3, #1
 80085d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085d8:	e017      	b.n	800860a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80085da:	2300      	movs	r3, #0
 80085dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80085de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085e8:	e00f      	b.n	800860a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80085ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085ee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80085f0:	2300      	movs	r3, #0
 80085f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085f4:	2301      	movs	r3, #1
 80085f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085f8:	e007      	b.n	800860a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80085fe:	2300      	movs	r3, #0
 8008600:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008602:	2301      	movs	r3, #1
 8008604:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008606:	e000      	b.n	800860a <ethernet_link_thread+0xd2>
    default:
      break;
 8008608:	bf00      	nop
    }

    if(linkchanged)
 800860a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d018      	beq.n	8008642 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4619      	mov	r1, r3
 8008616:	480e      	ldr	r0, [pc, #56]	; (8008650 <ethernet_link_thread+0x118>)
 8008618:	f7fc fea6 	bl	8005368 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800861c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800861e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008622:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008624:	f107 0308 	add.w	r3, r7, #8
 8008628:	4619      	mov	r1, r3
 800862a:	4809      	ldr	r0, [pc, #36]	; (8008650 <ethernet_link_thread+0x118>)
 800862c:	f7fc ff93 	bl	8005556 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008630:	4807      	ldr	r0, [pc, #28]	; (8008650 <ethernet_link_thread+0x118>)
 8008632:	f7fc fa4b 	bl	8004acc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008636:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008638:	f007 f9a8 	bl	800f98c <netif_set_up>
      netif_set_link_up(netif);
 800863c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800863e:	f007 fa43 	bl	800fac8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008642:	2064      	movs	r0, #100	; 0x64
 8008644:	f000 f9c2 	bl	80089cc <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008648:	e78b      	b.n	8008562 <ethernet_link_thread+0x2a>
 800864a:	bf00      	nop
 800864c:	20046638 	.word	0x20046638
 8008650:	20046550 	.word	0x20046550

08008654 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af02      	add	r7, sp, #8
 800865a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800865c:	4812      	ldr	r0, [pc, #72]	; (80086a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800865e:	f006 ff09 	bl	800f474 <memp_malloc_pool>
 8008662:	60f8      	str	r0, [r7, #12]
  if (p)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f103 0220 	add.w	r2, r3, #32
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4a0d      	ldr	r2, [pc, #52]	; (80086ac <HAL_ETH_RxAllocateCallback+0x58>)
 8008678:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008682:	9201      	str	r2, [sp, #4]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2241      	movs	r2, #65	; 0x41
 800868a:	2100      	movs	r1, #0
 800868c:	2000      	movs	r0, #0
 800868e:	f007 fc73 	bl	800ff78 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008692:	e005      	b.n	80086a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	0801e260 	.word	0x0801e260
 80086ac:	08008309 	.word	0x08008309
 80086b0:	20046544 	.word	0x20046544

080086b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3b20      	subs	r3, #32
 80086d2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2200      	movs	r2, #0
 80086de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	69fa      	ldr	r2, [r7, #28]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e003      	b.n	80086fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	61fb      	str	r3, [r7, #28]
 800870a:	e009      	b.n	8008720 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	891a      	ldrh	r2, [r3, #8]
 8008710:	887b      	ldrh	r3, [r7, #2]
 8008712:	4413      	add	r3, r2
 8008714:	b29a      	uxth	r2, r3
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f2      	bne.n	800870c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008726:	887b      	ldrh	r3, [r7, #2]
 8008728:	4619      	mov	r1, r3
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7ff fb4a 	bl	8007dc4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008730:	bf00      	nop
 8008732:	3720      	adds	r7, #32
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f007 fdd3 	bl	80102ec <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800874e:	b480      	push	{r7}
 8008750:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008752:	bf00      	nop
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008762:	f3ef 8305 	mrs	r3, IPSR
 8008766:	60bb      	str	r3, [r7, #8]
  return(result);
 8008768:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10f      	bne.n	800878e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800876e:	f3ef 8310 	mrs	r3, PRIMASK
 8008772:	607b      	str	r3, [r7, #4]
  return(result);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800877a:	f3ef 8311 	mrs	r3, BASEPRI
 800877e:	603b      	str	r3, [r7, #0]
  return(result);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d007      	beq.n	8008796 <osKernelInitialize+0x3a>
 8008786:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <osKernelInitialize+0x64>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d103      	bne.n	8008796 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800878e:	f06f 0305 	mvn.w	r3, #5
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e00c      	b.n	80087b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008796:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <osKernelInitialize+0x64>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d105      	bne.n	80087aa <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800879e:	4b08      	ldr	r3, [pc, #32]	; (80087c0 <osKernelInitialize+0x64>)
 80087a0:	2201      	movs	r2, #1
 80087a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	60fb      	str	r3, [r7, #12]
 80087a8:	e002      	b.n	80087b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80087aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80087b0:	68fb      	ldr	r3, [r7, #12]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20046658 	.word	0x20046658

080087c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087ca:	f3ef 8305 	mrs	r3, IPSR
 80087ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80087d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10f      	bne.n	80087f6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087d6:	f3ef 8310 	mrs	r3, PRIMASK
 80087da:	607b      	str	r3, [r7, #4]
  return(result);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087e2:	f3ef 8311 	mrs	r3, BASEPRI
 80087e6:	603b      	str	r3, [r7, #0]
  return(result);
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d007      	beq.n	80087fe <osKernelStart+0x3a>
 80087ee:	4b0f      	ldr	r3, [pc, #60]	; (800882c <osKernelStart+0x68>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d103      	bne.n	80087fe <osKernelStart+0x3a>
    stat = osErrorISR;
 80087f6:	f06f 0305 	mvn.w	r3, #5
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	e010      	b.n	8008820 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80087fe:	4b0b      	ldr	r3, [pc, #44]	; (800882c <osKernelStart+0x68>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d109      	bne.n	800881a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008806:	f7ff ffa2 	bl	800874e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800880a:	4b08      	ldr	r3, [pc, #32]	; (800882c <osKernelStart+0x68>)
 800880c:	2202      	movs	r2, #2
 800880e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008810:	f002 f9ee 	bl	800abf0 <vTaskStartScheduler>
      stat = osOK;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e002      	b.n	8008820 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800881a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800881e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008820:	68fb      	ldr	r3, [r7, #12]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20046658 	.word	0x20046658

08008830 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008836:	f3ef 8305 	mrs	r3, IPSR
 800883a:	60bb      	str	r3, [r7, #8]
  return(result);
 800883c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008842:	f3ef 8310 	mrs	r3, PRIMASK
 8008846:	607b      	str	r3, [r7, #4]
  return(result);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d105      	bne.n	800885a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800884e:	f3ef 8311 	mrs	r3, BASEPRI
 8008852:	603b      	str	r3, [r7, #0]
  return(result);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d007      	beq.n	800886a <osKernelGetTickCount+0x3a>
 800885a:	4b08      	ldr	r3, [pc, #32]	; (800887c <osKernelGetTickCount+0x4c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d103      	bne.n	800886a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008862:	f002 faf7 	bl	800ae54 <xTaskGetTickCountFromISR>
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	e002      	b.n	8008870 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800886a:	f002 fae3 	bl	800ae34 <xTaskGetTickCount>
 800886e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008870:	68fb      	ldr	r3, [r7, #12]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20046658 	.word	0x20046658

08008880 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008880:	b580      	push	{r7, lr}
 8008882:	b090      	sub	sp, #64	; 0x40
 8008884:	af04      	add	r7, sp, #16
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800888c:	2300      	movs	r3, #0
 800888e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008890:	f3ef 8305 	mrs	r3, IPSR
 8008894:	61fb      	str	r3, [r7, #28]
  return(result);
 8008896:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008898:	2b00      	cmp	r3, #0
 800889a:	f040 808f 	bne.w	80089bc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800889e:	f3ef 8310 	mrs	r3, PRIMASK
 80088a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d105      	bne.n	80088b6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80088aa:	f3ef 8311 	mrs	r3, BASEPRI
 80088ae:	617b      	str	r3, [r7, #20]
  return(result);
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <osThreadNew+0x3e>
 80088b6:	4b44      	ldr	r3, [pc, #272]	; (80089c8 <osThreadNew+0x148>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d07e      	beq.n	80089bc <osThreadNew+0x13c>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d07b      	beq.n	80089bc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80088c4:	2380      	movs	r3, #128	; 0x80
 80088c6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80088c8:	2318      	movs	r3, #24
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80088cc:	2300      	movs	r3, #0
 80088ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80088d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d045      	beq.n	8008968 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <osThreadNew+0x6a>
        name = attr->name;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <osThreadNew+0x90>
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	2b38      	cmp	r3, #56	; 0x38
 8008902:	d805      	bhi.n	8008910 <osThreadNew+0x90>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f003 0301 	and.w	r3, r3, #1
 800890c:	2b00      	cmp	r3, #0
 800890e:	d001      	beq.n	8008914 <osThreadNew+0x94>
        return (NULL);
 8008910:	2300      	movs	r3, #0
 8008912:	e054      	b.n	80089be <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	089b      	lsrs	r3, r3, #2
 8008922:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d00e      	beq.n	800894a <osThreadNew+0xca>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	2bbb      	cmp	r3, #187	; 0xbb
 8008932:	d90a      	bls.n	800894a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008938:	2b00      	cmp	r3, #0
 800893a:	d006      	beq.n	800894a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <osThreadNew+0xca>
        mem = 1;
 8008944:	2301      	movs	r3, #1
 8008946:	623b      	str	r3, [r7, #32]
 8008948:	e010      	b.n	800896c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10c      	bne.n	800896c <osThreadNew+0xec>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d108      	bne.n	800896c <osThreadNew+0xec>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d104      	bne.n	800896c <osThreadNew+0xec>
          mem = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	623b      	str	r3, [r7, #32]
 8008966:	e001      	b.n	800896c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d110      	bne.n	8008994 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800897a:	9202      	str	r2, [sp, #8]
 800897c:	9301      	str	r3, [sp, #4]
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f001 ff3b 	bl	800a804 <xTaskCreateStatic>
 800898e:	4603      	mov	r3, r0
 8008990:	613b      	str	r3, [r7, #16]
 8008992:	e013      	b.n	80089bc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008994:	6a3b      	ldr	r3, [r7, #32]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d110      	bne.n	80089bc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800899a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899c:	b29a      	uxth	r2, r3
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f001 ff8c 	bl	800a8ca <xTaskCreate>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d001      	beq.n	80089bc <osThreadNew+0x13c>
          hTask = NULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089bc:	693b      	ldr	r3, [r7, #16]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3730      	adds	r7, #48	; 0x30
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20046658 	.word	0x20046658

080089cc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089d4:	f3ef 8305 	mrs	r3, IPSR
 80089d8:	613b      	str	r3, [r7, #16]
  return(result);
 80089da:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10f      	bne.n	8008a00 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e0:	f3ef 8310 	mrs	r3, PRIMASK
 80089e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089ec:	f3ef 8311 	mrs	r3, BASEPRI
 80089f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <osDelay+0x3c>
 80089f8:	4b0e      	ldr	r3, [pc, #56]	; (8008a34 <osDelay+0x68>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d103      	bne.n	8008a08 <osDelay+0x3c>
    stat = osErrorISR;
 8008a00:	f06f 0305 	mvn.w	r3, #5
 8008a04:	617b      	str	r3, [r7, #20]
 8008a06:	e010      	b.n	8008a2a <osDelay+0x5e>
  }
  else {
    stat = osOK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <osDelay+0x5e>
      vTaskDelay(pdMS_TO_TICKS(ticks));
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a18:	fb02 f303 	mul.w	r3, r2, r3
 8008a1c:	4a06      	ldr	r2, [pc, #24]	; (8008a38 <osDelay+0x6c>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	099b      	lsrs	r3, r3, #6
 8008a24:	4618      	mov	r0, r3
 8008a26:	f002 f8ad 	bl	800ab84 <vTaskDelay>
    }
  }

  return (stat);
 8008a2a:	697b      	ldr	r3, [r7, #20]
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	20046658 	.word	0x20046658
 8008a38:	10624dd3 	.word	0x10624dd3

08008a3c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b08a      	sub	sp, #40	; 0x28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008a44:	2300      	movs	r3, #0
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a48:	f3ef 8305 	mrs	r3, IPSR
 8008a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f040 8085 	bne.w	8008b60 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a56:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d105      	bne.n	8008a6e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a62:	f3ef 8311 	mrs	r3, BASEPRI
 8008a66:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <osMutexNew+0x3a>
 8008a6e:	4b3f      	ldr	r3, [pc, #252]	; (8008b6c <osMutexNew+0x130>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d074      	beq.n	8008b60 <osMutexNew+0x124>
    if (attr != NULL) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d003      	beq.n	8008a84 <osMutexNew+0x48>
      type = attr->attr_bits;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	623b      	str	r3, [r7, #32]
 8008a82:	e001      	b.n	8008a88 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <osMutexNew+0x5c>
      rmtx = 1U;
 8008a92:	2301      	movs	r3, #1
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	e001      	b.n	8008a9c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008a9c:	6a3b      	ldr	r3, [r7, #32]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d15c      	bne.n	8008b60 <osMutexNew+0x124>
      mem = -1;
 8008aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008aaa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d015      	beq.n	8008ade <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <osMutexNew+0x8c>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b4f      	cmp	r3, #79	; 0x4f
 8008ac0:	d902      	bls.n	8008ac8 <osMutexNew+0x8c>
          mem = 1;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	e00c      	b.n	8008ae2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d108      	bne.n	8008ae2 <osMutexNew+0xa6>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d104      	bne.n	8008ae2 <osMutexNew+0xa6>
            mem = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	61bb      	str	r3, [r7, #24]
 8008adc:	e001      	b.n	8008ae2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d112      	bne.n	8008b0e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	4619      	mov	r1, r3
 8008af4:	2004      	movs	r0, #4
 8008af6:	f000 feb8 	bl	800986a <xQueueCreateMutexStatic>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24
 8008afc:	e016      	b.n	8008b2c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4619      	mov	r1, r3
 8008b04:	2001      	movs	r0, #1
 8008b06:	f000 feb0 	bl	800986a <xQueueCreateMutexStatic>
 8008b0a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b0c:	e00e      	b.n	8008b2c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d004      	beq.n	8008b24 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8008b1a:	2004      	movs	r0, #4
 8008b1c:	f000 fe8d 	bl	800983a <xQueueCreateMutex>
 8008b20:	6278      	str	r0, [r7, #36]	; 0x24
 8008b22:	e003      	b.n	8008b2c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008b24:	2001      	movs	r0, #1
 8008b26:	f000 fe88 	bl	800983a <xQueueCreateMutex>
 8008b2a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00c      	beq.n	8008b4c <osMutexNew+0x110>
        if (attr != NULL) {
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <osMutexNew+0x104>
          name = attr->name;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	617b      	str	r3, [r7, #20]
 8008b3e:	e001      	b.n	8008b44 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008b44:	6979      	ldr	r1, [r7, #20]
 8008b46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b48:	f001 fdd4 	bl	800a6f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d006      	beq.n	8008b60 <osMutexNew+0x124>
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3728      	adds	r7, #40	; 0x28
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20046658 	.word	0x20046658

08008b70 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b088      	sub	sp, #32
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f023 0301 	bic.w	r3, r3, #1
 8008b80:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b8e:	f3ef 8305 	mrs	r3, IPSR
 8008b92:	613b      	str	r3, [r7, #16]
  return(result);
 8008b94:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10f      	bne.n	8008bba <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d105      	bne.n	8008bb2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ba6:	f3ef 8311 	mrs	r3, BASEPRI
 8008baa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <osMutexAcquire+0x52>
 8008bb2:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <osMutexAcquire+0xb8>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d103      	bne.n	8008bc2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008bba:	f06f 0305 	mvn.w	r3, #5
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	e02c      	b.n	8008c1c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d103      	bne.n	8008bd0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008bc8:	f06f 0303 	mvn.w	r3, #3
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	e025      	b.n	8008c1c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	69b8      	ldr	r0, [r7, #24]
 8008bda:	f000 fe97 	bl	800990c <xQueueTakeMutexRecursive>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d01b      	beq.n	8008c1c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008bea:	f06f 0301 	mvn.w	r3, #1
 8008bee:	61fb      	str	r3, [r7, #28]
 8008bf0:	e014      	b.n	8008c1c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008bf2:	f06f 0302 	mvn.w	r3, #2
 8008bf6:	61fb      	str	r3, [r7, #28]
 8008bf8:	e010      	b.n	8008c1c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	69b8      	ldr	r0, [r7, #24]
 8008bfe:	f001 fa51 	bl	800a0a4 <xQueueSemaphoreTake>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d009      	beq.n	8008c1c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008c0e:	f06f 0301 	mvn.w	r3, #1
 8008c12:	61fb      	str	r3, [r7, #28]
 8008c14:	e002      	b.n	8008c1c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8008c16:	f06f 0302 	mvn.w	r3, #2
 8008c1a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c1c:	69fb      	ldr	r3, [r7, #28]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20046658 	.word	0x20046658

08008c2c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b088      	sub	sp, #32
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f023 0301 	bic.w	r3, r3, #1
 8008c3a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c48:	f3ef 8305 	mrs	r3, IPSR
 8008c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8008c4e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10f      	bne.n	8008c74 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c54:	f3ef 8310 	mrs	r3, PRIMASK
 8008c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d105      	bne.n	8008c6c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c60:	f3ef 8311 	mrs	r3, BASEPRI
 8008c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d007      	beq.n	8008c7c <osMutexRelease+0x50>
 8008c6c:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <osMutexRelease+0x9c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d103      	bne.n	8008c7c <osMutexRelease+0x50>
    stat = osErrorISR;
 8008c74:	f06f 0305 	mvn.w	r3, #5
 8008c78:	61fb      	str	r3, [r7, #28]
 8008c7a:	e01f      	b.n	8008cbc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008c82:	f06f 0303 	mvn.w	r3, #3
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e018      	b.n	8008cbc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d009      	beq.n	8008ca4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c90:	69b8      	ldr	r0, [r7, #24]
 8008c92:	f000 fe05 	bl	80098a0 <xQueueGiveMutexRecursive>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d00f      	beq.n	8008cbc <osMutexRelease+0x90>
        stat = osErrorResource;
 8008c9c:	f06f 0302 	mvn.w	r3, #2
 8008ca0:	61fb      	str	r3, [r7, #28]
 8008ca2:	e00b      	b.n	8008cbc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2100      	movs	r1, #0
 8008caa:	69b8      	ldr	r0, [r7, #24]
 8008cac:	f000 fed8 	bl	8009a60 <xQueueGenericSend>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d002      	beq.n	8008cbc <osMutexRelease+0x90>
        stat = osErrorResource;
 8008cb6:	f06f 0302 	mvn.w	r3, #2
 8008cba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008cbc:	69fb      	ldr	r3, [r7, #28]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3720      	adds	r7, #32
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	20046658 	.word	0x20046658

08008ccc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b08c      	sub	sp, #48	; 0x30
 8008cd0:	af02      	add	r7, sp, #8
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cdc:	f3ef 8305 	mrs	r3, IPSR
 8008ce0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ce2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f040 8086 	bne.w	8008df6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cea:	f3ef 8310 	mrs	r3, PRIMASK
 8008cee:	617b      	str	r3, [r7, #20]
  return(result);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d105      	bne.n	8008d02 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8008cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <osSemaphoreNew+0x3e>
 8008d02:	4b3f      	ldr	r3, [pc, #252]	; (8008e00 <osSemaphoreNew+0x134>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d075      	beq.n	8008df6 <osSemaphoreNew+0x12a>
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d072      	beq.n	8008df6 <osSemaphoreNew+0x12a>
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d86e      	bhi.n	8008df6 <osSemaphoreNew+0x12a>
    mem = -1;
 8008d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d015      	beq.n	8008d50 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d006      	beq.n	8008d3a <osSemaphoreNew+0x6e>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	2b4f      	cmp	r3, #79	; 0x4f
 8008d32:	d902      	bls.n	8008d3a <osSemaphoreNew+0x6e>
        mem = 1;
 8008d34:	2301      	movs	r3, #1
 8008d36:	623b      	str	r3, [r7, #32]
 8008d38:	e00c      	b.n	8008d54 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d108      	bne.n	8008d54 <osSemaphoreNew+0x88>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <osSemaphoreNew+0x88>
          mem = 0;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	623b      	str	r3, [r7, #32]
 8008d4e:	e001      	b.n	8008d54 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d5a:	d04c      	beq.n	8008df6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d128      	bne.n	8008db4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8008d62:	6a3b      	ldr	r3, [r7, #32]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d10a      	bne.n	8008d7e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	9200      	str	r2, [sp, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	2100      	movs	r1, #0
 8008d74:	2001      	movs	r0, #1
 8008d76:	f000 fc5f 	bl	8009638 <xQueueGenericCreateStatic>
 8008d7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d7c:	e005      	b.n	8008d8a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008d7e:	2203      	movs	r2, #3
 8008d80:	2100      	movs	r1, #0
 8008d82:	2001      	movs	r0, #1
 8008d84:	f000 fcda 	bl	800973c <xQueueGenericCreate>
 8008d88:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d022      	beq.n	8008dd6 <osSemaphoreNew+0x10a>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d01f      	beq.n	8008dd6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d96:	2300      	movs	r3, #0
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d9e:	f000 fe5f 	bl	8009a60 <xQueueGenericSend>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d016      	beq.n	8008dd6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008daa:	f001 fb55 	bl	800a458 <vQueueDelete>
            hSemaphore = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	e010      	b.n	8008dd6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d108      	bne.n	8008dcc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f000 fdda 	bl	800997c <xQueueCreateCountingSemaphoreStatic>
 8008dc8:	6278      	str	r0, [r7, #36]	; 0x24
 8008dca:	e004      	b.n	8008dd6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008dcc:	68b9      	ldr	r1, [r7, #8]
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 fe0f 	bl	80099f2 <xQueueCreateCountingSemaphore>
 8008dd4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00c      	beq.n	8008df6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <osSemaphoreNew+0x11e>
          name = attr->name;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	61fb      	str	r3, [r7, #28]
 8008de8:	e001      	b.n	8008dee <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008dee:	69f9      	ldr	r1, [r7, #28]
 8008df0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008df2:	f001 fc7f 	bl	800a6f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3728      	adds	r7, #40	; 0x28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20046658 	.word	0x20046658

08008e04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b088      	sub	sp, #32
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008e16:	69bb      	ldr	r3, [r7, #24]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d103      	bne.n	8008e24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008e1c:	f06f 0303 	mvn.w	r3, #3
 8008e20:	61fb      	str	r3, [r7, #28]
 8008e22:	e04b      	b.n	8008ebc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e24:	f3ef 8305 	mrs	r3, IPSR
 8008e28:	617b      	str	r3, [r7, #20]
  return(result);
 8008e2a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10f      	bne.n	8008e50 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e30:	f3ef 8310 	mrs	r3, PRIMASK
 8008e34:	613b      	str	r3, [r7, #16]
  return(result);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d105      	bne.n	8008e48 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8008e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d026      	beq.n	8008e96 <osSemaphoreAcquire+0x92>
 8008e48:	4b1f      	ldr	r3, [pc, #124]	; (8008ec8 <osSemaphoreAcquire+0xc4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d122      	bne.n	8008e96 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008e56:	f06f 0303 	mvn.w	r3, #3
 8008e5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008e5c:	e02d      	b.n	8008eba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	461a      	mov	r2, r3
 8008e68:	2100      	movs	r1, #0
 8008e6a:	69b8      	ldr	r0, [r7, #24]
 8008e6c:	f001 fa2e 	bl	800a2cc <xQueueReceiveFromISR>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d003      	beq.n	8008e7e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008e76:	f06f 0302 	mvn.w	r3, #2
 8008e7a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008e7c:	e01d      	b.n	8008eba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01a      	beq.n	8008eba <osSemaphoreAcquire+0xb6>
 8008e84:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <osSemaphoreAcquire+0xc8>)
 8008e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008e94:	e011      	b.n	8008eba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	69b8      	ldr	r0, [r7, #24]
 8008e9a:	f001 f903 	bl	800a0a4 <xQueueSemaphoreTake>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d00b      	beq.n	8008ebc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008eaa:	f06f 0301 	mvn.w	r3, #1
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e004      	b.n	8008ebc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008eb2:	f06f 0302 	mvn.w	r3, #2
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	e000      	b.n	8008ebc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008eba:	bf00      	nop
      }
    }
  }

  return (stat);
 8008ebc:	69fb      	ldr	r3, [r7, #28]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3720      	adds	r7, #32
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20046658 	.word	0x20046658
 8008ecc:	e000ed04 	.word	0xe000ed04

08008ed0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d103      	bne.n	8008eee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008ee6:	f06f 0303 	mvn.w	r3, #3
 8008eea:	61fb      	str	r3, [r7, #28]
 8008eec:	e03e      	b.n	8008f6c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eee:	f3ef 8305 	mrs	r3, IPSR
 8008ef2:	617b      	str	r3, [r7, #20]
  return(result);
 8008ef4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10f      	bne.n	8008f1a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008efa:	f3ef 8310 	mrs	r3, PRIMASK
 8008efe:	613b      	str	r3, [r7, #16]
  return(result);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d105      	bne.n	8008f12 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f06:	f3ef 8311 	mrs	r3, BASEPRI
 8008f0a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01e      	beq.n	8008f50 <osSemaphoreRelease+0x80>
 8008f12:	4b19      	ldr	r3, [pc, #100]	; (8008f78 <osSemaphoreRelease+0xa8>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d11a      	bne.n	8008f50 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008f1e:	f107 0308 	add.w	r3, r7, #8
 8008f22:	4619      	mov	r1, r3
 8008f24:	69b8      	ldr	r0, [r7, #24]
 8008f26:	f000 ff41 	bl	8009dac <xQueueGiveFromISR>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d003      	beq.n	8008f38 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008f30:	f06f 0302 	mvn.w	r3, #2
 8008f34:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008f36:	e018      	b.n	8008f6a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d015      	beq.n	8008f6a <osSemaphoreRelease+0x9a>
 8008f3e:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <osSemaphoreRelease+0xac>)
 8008f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008f4e:	e00c      	b.n	8008f6a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008f50:	2300      	movs	r3, #0
 8008f52:	2200      	movs	r2, #0
 8008f54:	2100      	movs	r1, #0
 8008f56:	69b8      	ldr	r0, [r7, #24]
 8008f58:	f000 fd82 	bl	8009a60 <xQueueGenericSend>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d004      	beq.n	8008f6c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008f62:	f06f 0302 	mvn.w	r3, #2
 8008f66:	61fb      	str	r3, [r7, #28]
 8008f68:	e000      	b.n	8008f6c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008f6a:	bf00      	nop
    }
  }

  return (stat);
 8008f6c:	69fb      	ldr	r3, [r7, #28]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3720      	adds	r7, #32
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20046658 	.word	0x20046658
 8008f7c:	e000ed04 	.word	0xe000ed04

08008f80 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f8c:	f3ef 8305 	mrs	r3, IPSR
 8008f90:	617b      	str	r3, [r7, #20]
  return(result);
 8008f92:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10f      	bne.n	8008fb8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f98:	f3ef 8310 	mrs	r3, PRIMASK
 8008f9c:	613b      	str	r3, [r7, #16]
  return(result);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <osSemaphoreDelete+0x40>
 8008fb0:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <osSemaphoreDelete+0x68>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d103      	bne.n	8008fc0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8008fb8:	f06f 0305 	mvn.w	r3, #5
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	e00e      	b.n	8008fde <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d103      	bne.n	8008fce <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8008fc6:	f06f 0303 	mvn.w	r3, #3
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	e007      	b.n	8008fde <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008fce:	69b8      	ldr	r0, [r7, #24]
 8008fd0:	f001 fbba 	bl	800a748 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8008fd8:	69b8      	ldr	r0, [r7, #24]
 8008fda:	f001 fa3d 	bl	800a458 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008fde:	69fb      	ldr	r3, [r7, #28]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20046658 	.word	0x20046658

08008fec <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08c      	sub	sp, #48	; 0x30
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ffc:	f3ef 8305 	mrs	r3, IPSR
 8009000:	61bb      	str	r3, [r7, #24]
  return(result);
 8009002:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009004:	2b00      	cmp	r3, #0
 8009006:	d16f      	bne.n	80090e8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009008:	f3ef 8310 	mrs	r3, PRIMASK
 800900c:	617b      	str	r3, [r7, #20]
  return(result);
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d105      	bne.n	8009020 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009014:	f3ef 8311 	mrs	r3, BASEPRI
 8009018:	613b      	str	r3, [r7, #16]
  return(result);
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <osMessageQueueNew+0x3c>
 8009020:	4b34      	ldr	r3, [pc, #208]	; (80090f4 <osMessageQueueNew+0x108>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b02      	cmp	r3, #2
 8009026:	d05f      	beq.n	80090e8 <osMessageQueueNew+0xfc>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d05c      	beq.n	80090e8 <osMessageQueueNew+0xfc>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d059      	beq.n	80090e8 <osMessageQueueNew+0xfc>
    mem = -1;
 8009034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009038:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d029      	beq.n	8009094 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d012      	beq.n	800906e <osMessageQueueNew+0x82>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	2b4f      	cmp	r3, #79	; 0x4f
 800904e:	d90e      	bls.n	800906e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00a      	beq.n	800906e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	68b9      	ldr	r1, [r7, #8]
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	429a      	cmp	r2, r3
 8009066:	d302      	bcc.n	800906e <osMessageQueueNew+0x82>
        mem = 1;
 8009068:	2301      	movs	r3, #1
 800906a:	623b      	str	r3, [r7, #32]
 800906c:	e014      	b.n	8009098 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d110      	bne.n	8009098 <osMessageQueueNew+0xac>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10c      	bne.n	8009098 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009082:	2b00      	cmp	r3, #0
 8009084:	d108      	bne.n	8009098 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	695b      	ldr	r3, [r3, #20]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d104      	bne.n	8009098 <osMessageQueueNew+0xac>
          mem = 0;
 800908e:	2300      	movs	r3, #0
 8009090:	623b      	str	r3, [r7, #32]
 8009092:	e001      	b.n	8009098 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	2b01      	cmp	r3, #1
 800909c:	d10b      	bne.n	80090b6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691a      	ldr	r2, [r3, #16]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	2100      	movs	r1, #0
 80090a8:	9100      	str	r1, [sp, #0]
 80090aa:	68b9      	ldr	r1, [r7, #8]
 80090ac:	68f8      	ldr	r0, [r7, #12]
 80090ae:	f000 fac3 	bl	8009638 <xQueueGenericCreateStatic>
 80090b2:	6278      	str	r0, [r7, #36]	; 0x24
 80090b4:	e008      	b.n	80090c8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80090bc:	2200      	movs	r2, #0
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fb3b 	bl	800973c <xQueueGenericCreate>
 80090c6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00c      	beq.n	80090e8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d003      	beq.n	80090dc <osMessageQueueNew+0xf0>
        name = attr->name;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	e001      	b.n	80090e0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80090e0:	69f9      	ldr	r1, [r7, #28]
 80090e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090e4:	f001 fb06 	bl	800a6f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3728      	adds	r7, #40	; 0x28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20046658 	.word	0x20046658

080090f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b08a      	sub	sp, #40	; 0x28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	603b      	str	r3, [r7, #0]
 8009104:	4613      	mov	r3, r2
 8009106:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800910c:	2300      	movs	r3, #0
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009110:	f3ef 8305 	mrs	r3, IPSR
 8009114:	61fb      	str	r3, [r7, #28]
  return(result);
 8009116:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10f      	bne.n	800913c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800911c:	f3ef 8310 	mrs	r3, PRIMASK
 8009120:	61bb      	str	r3, [r7, #24]
  return(result);
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d105      	bne.n	8009134 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009128:	f3ef 8311 	mrs	r3, BASEPRI
 800912c:	617b      	str	r3, [r7, #20]
  return(result);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d02c      	beq.n	800918e <osMessageQueuePut+0x96>
 8009134:	4b28      	ldr	r3, [pc, #160]	; (80091d8 <osMessageQueuePut+0xe0>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	2b02      	cmp	r3, #2
 800913a:	d128      	bne.n	800918e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d005      	beq.n	800914e <osMessageQueuePut+0x56>
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <osMessageQueuePut+0x56>
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d003      	beq.n	8009156 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800914e:	f06f 0303 	mvn.w	r3, #3
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009154:	e039      	b.n	80091ca <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800915a:	f107 0210 	add.w	r2, r7, #16
 800915e:	2300      	movs	r3, #0
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	6a38      	ldr	r0, [r7, #32]
 8009164:	f000 fd82 	bl	8009c6c <xQueueGenericSendFromISR>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	d003      	beq.n	8009176 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800916e:	f06f 0302 	mvn.w	r3, #2
 8009172:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009174:	e029      	b.n	80091ca <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d026      	beq.n	80091ca <osMessageQueuePut+0xd2>
 800917c:	4b17      	ldr	r3, [pc, #92]	; (80091dc <osMessageQueuePut+0xe4>)
 800917e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800918c:	e01d      	b.n	80091ca <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800918e:	6a3b      	ldr	r3, [r7, #32]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d002      	beq.n	800919a <osMessageQueuePut+0xa2>
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d103      	bne.n	80091a2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800919a:	f06f 0303 	mvn.w	r3, #3
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
 80091a0:	e014      	b.n	80091cc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80091a2:	2300      	movs	r3, #0
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	68b9      	ldr	r1, [r7, #8]
 80091a8:	6a38      	ldr	r0, [r7, #32]
 80091aa:	f000 fc59 	bl	8009a60 <xQueueGenericSend>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d00b      	beq.n	80091cc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80091ba:	f06f 0301 	mvn.w	r3, #1
 80091be:	627b      	str	r3, [r7, #36]	; 0x24
 80091c0:	e004      	b.n	80091cc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80091c2:	f06f 0302 	mvn.w	r3, #2
 80091c6:	627b      	str	r3, [r7, #36]	; 0x24
 80091c8:	e000      	b.n	80091cc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80091ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3728      	adds	r7, #40	; 0x28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20046658 	.word	0x20046658
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b08a      	sub	sp, #40	; 0x28
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	60b9      	str	r1, [r7, #8]
 80091ea:	607a      	str	r2, [r7, #4]
 80091ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80091f2:	2300      	movs	r3, #0
 80091f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091f6:	f3ef 8305 	mrs	r3, IPSR
 80091fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80091fc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10f      	bne.n	8009222 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009202:	f3ef 8310 	mrs	r3, PRIMASK
 8009206:	61bb      	str	r3, [r7, #24]
  return(result);
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d105      	bne.n	800921a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800920e:	f3ef 8311 	mrs	r3, BASEPRI
 8009212:	617b      	str	r3, [r7, #20]
  return(result);
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d02c      	beq.n	8009274 <osMessageQueueGet+0x94>
 800921a:	4b28      	ldr	r3, [pc, #160]	; (80092bc <osMessageQueueGet+0xdc>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d128      	bne.n	8009274 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d005      	beq.n	8009234 <osMessageQueueGet+0x54>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d002      	beq.n	8009234 <osMessageQueueGet+0x54>
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009234:	f06f 0303 	mvn.w	r3, #3
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800923a:	e038      	b.n	80092ae <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800923c:	2300      	movs	r3, #0
 800923e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009240:	f107 0310 	add.w	r3, r7, #16
 8009244:	461a      	mov	r2, r3
 8009246:	68b9      	ldr	r1, [r7, #8]
 8009248:	6a38      	ldr	r0, [r7, #32]
 800924a:	f001 f83f 	bl	800a2cc <xQueueReceiveFromISR>
 800924e:	4603      	mov	r3, r0
 8009250:	2b01      	cmp	r3, #1
 8009252:	d003      	beq.n	800925c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009254:	f06f 0302 	mvn.w	r3, #2
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800925a:	e028      	b.n	80092ae <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d025      	beq.n	80092ae <osMessageQueueGet+0xce>
 8009262:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <osMessageQueueGet+0xe0>)
 8009264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009272:	e01c      	b.n	80092ae <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <osMessageQueueGet+0xa0>
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009280:	f06f 0303 	mvn.w	r3, #3
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	e013      	b.n	80092b0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	68b9      	ldr	r1, [r7, #8]
 800928c:	6a38      	ldr	r0, [r7, #32]
 800928e:	f000 fe23 	bl	8009ed8 <xQueueReceive>
 8009292:	4603      	mov	r3, r0
 8009294:	2b01      	cmp	r3, #1
 8009296:	d00b      	beq.n	80092b0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800929e:	f06f 0301 	mvn.w	r3, #1
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
 80092a4:	e004      	b.n	80092b0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80092a6:	f06f 0302 	mvn.w	r3, #2
 80092aa:	627b      	str	r3, [r7, #36]	; 0x24
 80092ac:	e000      	b.n	80092b0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80092ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3728      	adds	r7, #40	; 0x28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	20046658 	.word	0x20046658
 80092c0:	e000ed04 	.word	0xe000ed04

080092c4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80092d0:	69bb      	ldr	r3, [r7, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <osMessageQueueGetCount+0x18>
    count = 0U;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	e01e      	b.n	800931a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092dc:	f3ef 8305 	mrs	r3, IPSR
 80092e0:	617b      	str	r3, [r7, #20]
  return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10f      	bne.n	8009308 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092e8:	f3ef 8310 	mrs	r3, PRIMASK
 80092ec:	613b      	str	r3, [r7, #16]
  return(result);
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d105      	bne.n	8009300 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092f4:	f3ef 8311 	mrs	r3, BASEPRI
 80092f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d008      	beq.n	8009312 <osMessageQueueGetCount+0x4e>
 8009300:	4b08      	ldr	r3, [pc, #32]	; (8009324 <osMessageQueueGetCount+0x60>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b02      	cmp	r3, #2
 8009306:	d104      	bne.n	8009312 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8009308:	69b8      	ldr	r0, [r7, #24]
 800930a:	f001 f885 	bl	800a418 <uxQueueMessagesWaitingFromISR>
 800930e:	61f8      	str	r0, [r7, #28]
 8009310:	e003      	b.n	800931a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8009312:	69b8      	ldr	r0, [r7, #24]
 8009314:	f001 f860 	bl	800a3d8 <uxQueueMessagesWaiting>
 8009318:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800931a:	69fb      	ldr	r3, [r7, #28]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	20046658 	.word	0x20046658

08009328 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8009328:	b580      	push	{r7, lr}
 800932a:	b088      	sub	sp, #32
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009334:	f3ef 8305 	mrs	r3, IPSR
 8009338:	617b      	str	r3, [r7, #20]
  return(result);
 800933a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10f      	bne.n	8009360 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009340:	f3ef 8310 	mrs	r3, PRIMASK
 8009344:	613b      	str	r3, [r7, #16]
  return(result);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d105      	bne.n	8009358 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800934c:	f3ef 8311 	mrs	r3, BASEPRI
 8009350:	60fb      	str	r3, [r7, #12]
  return(result);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <osMessageQueueDelete+0x40>
 8009358:	4b0d      	ldr	r3, [pc, #52]	; (8009390 <osMessageQueueDelete+0x68>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d103      	bne.n	8009368 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8009360:	f06f 0305 	mvn.w	r3, #5
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	e00e      	b.n	8009386 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d103      	bne.n	8009376 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800936e:	f06f 0303 	mvn.w	r3, #3
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	e007      	b.n	8009386 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009376:	69b8      	ldr	r0, [r7, #24]
 8009378:	f001 f9e6 	bl	800a748 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8009380:	69b8      	ldr	r0, [r7, #24]
 8009382:	f001 f869 	bl	800a458 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009386:	69fb      	ldr	r3, [r7, #28]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20046658 	.word	0x20046658

08009394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a07      	ldr	r2, [pc, #28]	; (80093c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80093a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	4a06      	ldr	r2, [pc, #24]	; (80093c4 <vApplicationGetIdleTaskMemory+0x30>)
 80093aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2280      	movs	r2, #128	; 0x80
 80093b0:	601a      	str	r2, [r3, #0]
}
 80093b2:	bf00      	nop
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	2004665c 	.word	0x2004665c
 80093c4:	20046718 	.word	0x20046718

080093c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	4a07      	ldr	r2, [pc, #28]	; (80093f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80093d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	4a06      	ldr	r2, [pc, #24]	; (80093f8 <vApplicationGetTimerTaskMemory+0x30>)
 80093de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093e6:	601a      	str	r2, [r3, #0]
}
 80093e8:	bf00      	nop
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	20046918 	.word	0x20046918
 80093f8:	200469d4 	.word	0x200469d4

080093fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f103 0208 	add.w	r2, r3, #8
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f103 0208 	add.w	r2, r3, #8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f103 0208 	add.w	r2, r3, #8
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800944a:	bf00      	nop
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	601a      	str	r2, [r3, #0]
}
 8009492:	bf00      	nop
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800949e:	b480      	push	{r7}
 80094a0:	b085      	sub	sp, #20
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094b4:	d103      	bne.n	80094be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	60fb      	str	r3, [r7, #12]
 80094bc:	e00c      	b.n	80094d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	3308      	adds	r3, #8
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	e002      	b.n	80094cc <vListInsert+0x2e>
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d2f6      	bcs.n	80094c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	1c5a      	adds	r2, r3, #1
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	601a      	str	r2, [r3, #0]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6892      	ldr	r2, [r2, #8]
 8009526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	6852      	ldr	r2, [r2, #4]
 8009530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	429a      	cmp	r2, r3
 800953a:	d103      	bne.n	8009544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689a      	ldr	r2, [r3, #8]
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	1e5a      	subs	r2, r3, #1
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10c      	bne.n	8009592 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	b672      	cpsid	i
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	b662      	cpsie	i
 800958c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009592:	f002 fe13 	bl	800c1bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095a2:	fb01 f303 	mul.w	r3, r1, r3
 80095a6:	441a      	add	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2200      	movs	r2, #0
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c2:	3b01      	subs	r3, #1
 80095c4:	68f9      	ldr	r1, [r7, #12]
 80095c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095c8:	fb01 f303 	mul.w	r3, r1, r3
 80095cc:	441a      	add	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	22ff      	movs	r2, #255	; 0xff
 80095d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	22ff      	movs	r2, #255	; 0xff
 80095de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d114      	bne.n	8009612 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01a      	beq.n	8009626 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3310      	adds	r3, #16
 80095f4:	4618      	mov	r0, r3
 80095f6:	f001 fdb9 	bl	800b16c <xTaskRemoveFromEventList>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d012      	beq.n	8009626 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009600:	4b0c      	ldr	r3, [pc, #48]	; (8009634 <xQueueGenericReset+0xd0>)
 8009602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	e009      	b.n	8009626 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3310      	adds	r3, #16
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff fef0 	bl	80093fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3324      	adds	r3, #36	; 0x24
 8009620:	4618      	mov	r0, r3
 8009622:	f7ff feeb 	bl	80093fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009626:	f002 fdfd 	bl	800c224 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800962a:	2301      	movs	r3, #1
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	e000ed04 	.word	0xe000ed04

08009638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08e      	sub	sp, #56	; 0x38
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
 8009644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10c      	bne.n	8009666 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	b672      	cpsid	i
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	b662      	cpsie	i
 8009660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10c      	bne.n	8009686 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009670:	b672      	cpsid	i
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	b662      	cpsie	i
 8009680:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009682:	bf00      	nop
 8009684:	e7fe      	b.n	8009684 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <xQueueGenericCreateStatic+0x5a>
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <xQueueGenericCreateStatic+0x5e>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <xQueueGenericCreateStatic+0x60>
 8009696:	2300      	movs	r3, #0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10c      	bne.n	80096b6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	b672      	cpsid	i
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	b662      	cpsie	i
 80096b0:	623b      	str	r3, [r7, #32]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d102      	bne.n	80096c2 <xQueueGenericCreateStatic+0x8a>
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <xQueueGenericCreateStatic+0x8e>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <xQueueGenericCreateStatic+0x90>
 80096c6:	2300      	movs	r3, #0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10c      	bne.n	80096e6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	b672      	cpsid	i
 80096d2:	f383 8811 	msr	BASEPRI, r3
 80096d6:	f3bf 8f6f 	isb	sy
 80096da:	f3bf 8f4f 	dsb	sy
 80096de:	b662      	cpsie	i
 80096e0:	61fb      	str	r3, [r7, #28]
}
 80096e2:	bf00      	nop
 80096e4:	e7fe      	b.n	80096e4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80096e6:	2350      	movs	r3, #80	; 0x50
 80096e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	2b50      	cmp	r3, #80	; 0x50
 80096ee:	d00c      	beq.n	800970a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f4:	b672      	cpsid	i
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	b662      	cpsie	i
 8009704:	61bb      	str	r3, [r7, #24]
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800970a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00d      	beq.n	8009732 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	2201      	movs	r2, #1
 800971a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800971e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	4613      	mov	r3, r2
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	68b9      	ldr	r1, [r7, #8]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f847 	bl	80097c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009734:	4618      	mov	r0, r3
 8009736:	3730      	adds	r7, #48	; 0x30
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08a      	sub	sp, #40	; 0x28
 8009740:	af02      	add	r7, sp, #8
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10c      	bne.n	800976a <xQueueGenericCreate+0x2e>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	b672      	cpsid	i
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	b662      	cpsie	i
 8009764:	613b      	str	r3, [r7, #16]
}
 8009766:	bf00      	nop
 8009768:	e7fe      	b.n	8009768 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	e004      	b.n	8009780 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	fb02 f303 	mul.w	r3, r2, r3
 800977e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	3350      	adds	r3, #80	; 0x50
 8009784:	4618      	mov	r0, r3
 8009786:	f002 fe45 	bl	800c414 <pvPortMalloc>
 800978a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d011      	beq.n	80097b6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	3350      	adds	r3, #80	; 0x50
 800979a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80097a4:	79fa      	ldrb	r2, [r7, #7]
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	4613      	mov	r3, r2
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f805 	bl	80097c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097b6:	69bb      	ldr	r3, [r7, #24]
	}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3720      	adds	r7, #32
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e002      	b.n	80097e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097ee:	2101      	movs	r1, #1
 80097f0:	69b8      	ldr	r0, [r7, #24]
 80097f2:	f7ff feb7 	bl	8009564 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097fe:	bf00      	nop
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00e      	beq.n	8009832 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009826:	2300      	movs	r3, #0
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f917 	bl	8009a60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009832:	bf00      	nop
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800983a:	b580      	push	{r7, lr}
 800983c:	b086      	sub	sp, #24
 800983e:	af00      	add	r7, sp, #0
 8009840:	4603      	mov	r3, r0
 8009842:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	2300      	movs	r3, #0
 800984a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	461a      	mov	r2, r3
 8009850:	6939      	ldr	r1, [r7, #16]
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f7ff ff72 	bl	800973c <xQueueGenericCreate>
 8009858:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800985a:	68f8      	ldr	r0, [r7, #12]
 800985c:	f7ff ffd3 	bl	8009806 <prvInitialiseMutex>

		return xNewQueue;
 8009860:	68fb      	ldr	r3, [r7, #12]
	}
 8009862:	4618      	mov	r0, r3
 8009864:	3718      	adds	r7, #24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800986a:	b580      	push	{r7, lr}
 800986c:	b088      	sub	sp, #32
 800986e:	af02      	add	r7, sp, #8
 8009870:	4603      	mov	r3, r0
 8009872:	6039      	str	r1, [r7, #0]
 8009874:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009876:	2301      	movs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	2300      	movs	r3, #0
 800987c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800987e:	79fb      	ldrb	r3, [r7, #7]
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2200      	movs	r2, #0
 8009886:	6939      	ldr	r1, [r7, #16]
 8009888:	6978      	ldr	r0, [r7, #20]
 800988a:	f7ff fed5 	bl	8009638 <xQueueGenericCreateStatic>
 800988e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f7ff ffb8 	bl	8009806 <prvInitialiseMutex>

		return xNewQueue;
 8009896:	68fb      	ldr	r3, [r7, #12]
	}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	b672      	cpsid	i
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	b662      	cpsie	i
 80098c6:	60fb      	str	r3, [r7, #12]
}
 80098c8:	bf00      	nop
 80098ca:	e7fe      	b.n	80098ca <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	689c      	ldr	r4, [r3, #8]
 80098d0:	f001 fe16 	bl	800b500 <xTaskGetCurrentTaskHandle>
 80098d4:	4603      	mov	r3, r0
 80098d6:	429c      	cmp	r4, r3
 80098d8:	d111      	bne.n	80098fe <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	68db      	ldr	r3, [r3, #12]
 80098de:	1e5a      	subs	r2, r3, #1
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80098ec:	2300      	movs	r3, #0
 80098ee:	2200      	movs	r2, #0
 80098f0:	2100      	movs	r1, #0
 80098f2:	6938      	ldr	r0, [r7, #16]
 80098f4:	f000 f8b4 	bl	8009a60 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80098f8:	2301      	movs	r3, #1
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	e001      	b.n	8009902 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009902:	697b      	ldr	r3, [r7, #20]
	}
 8009904:	4618      	mov	r0, r3
 8009906:	371c      	adds	r7, #28
 8009908:	46bd      	mov	sp, r7
 800990a:	bd90      	pop	{r4, r7, pc}

0800990c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800990c:	b590      	push	{r4, r7, lr}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10c      	bne.n	800993a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	b672      	cpsid	i
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	b662      	cpsie	i
 8009934:	60fb      	str	r3, [r7, #12]
}
 8009936:	bf00      	nop
 8009938:	e7fe      	b.n	8009938 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	689c      	ldr	r4, [r3, #8]
 800993e:	f001 fddf 	bl	800b500 <xTaskGetCurrentTaskHandle>
 8009942:	4603      	mov	r3, r0
 8009944:	429c      	cmp	r4, r3
 8009946:	d107      	bne.n	8009958 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009952:	2301      	movs	r3, #1
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	e00c      	b.n	8009972 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6938      	ldr	r0, [r7, #16]
 800995c:	f000 fba2 	bl	800a0a4 <xQueueSemaphoreTake>
 8009960:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d004      	beq.n	8009972 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	1c5a      	adds	r2, r3, #1
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009972:	697b      	ldr	r3, [r7, #20]
	}
 8009974:	4618      	mov	r0, r3
 8009976:	371c      	adds	r7, #28
 8009978:	46bd      	mov	sp, r7
 800997a:	bd90      	pop	{r4, r7, pc}

0800997c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	; 0x28
 8009980:	af02      	add	r7, sp, #8
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10c      	bne.n	80099a8 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	b672      	cpsid	i
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	b662      	cpsie	i
 80099a2:	61bb      	str	r3, [r7, #24]
}
 80099a4:	bf00      	nop
 80099a6:	e7fe      	b.n	80099a6 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d90c      	bls.n	80099ca <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	b672      	cpsid	i
 80099b6:	f383 8811 	msr	BASEPRI, r3
 80099ba:	f3bf 8f6f 	isb	sy
 80099be:	f3bf 8f4f 	dsb	sy
 80099c2:	b662      	cpsie	i
 80099c4:	617b      	str	r3, [r7, #20]
}
 80099c6:	bf00      	nop
 80099c8:	e7fe      	b.n	80099c8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80099ca:	2302      	movs	r3, #2
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	2100      	movs	r1, #0
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fe2f 	bl	8009638 <xQueueGenericCreateStatic>
 80099da:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d002      	beq.n	80099e8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80099e8:	69fb      	ldr	r3, [r7, #28]
	}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3720      	adds	r7, #32
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b086      	sub	sp, #24
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10c      	bne.n	8009a1c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	b672      	cpsid	i
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	b662      	cpsie	i
 8009a16:	613b      	str	r3, [r7, #16]
}
 8009a18:	bf00      	nop
 8009a1a:	e7fe      	b.n	8009a1a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d90c      	bls.n	8009a3e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	b672      	cpsid	i
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	b662      	cpsie	i
 8009a38:	60fb      	str	r3, [r7, #12]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009a3e:	2202      	movs	r2, #2
 8009a40:	2100      	movs	r1, #0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fe7a 	bl	800973c <xQueueGenericCreate>
 8009a48:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d002      	beq.n	8009a56 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009a56:	697b      	ldr	r3, [r7, #20]
	}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08e      	sub	sp, #56	; 0x38
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10c      	bne.n	8009a96 <xQueueGenericSend+0x36>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	b672      	cpsid	i
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	b662      	cpsie	i
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d103      	bne.n	8009aa4 <xQueueGenericSend+0x44>
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <xQueueGenericSend+0x48>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <xQueueGenericSend+0x4a>
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10c      	bne.n	8009ac8 <xQueueGenericSend+0x68>
	__asm volatile
 8009aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab2:	b672      	cpsid	i
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	b662      	cpsie	i
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d103      	bne.n	8009ad6 <xQueueGenericSend+0x76>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d101      	bne.n	8009ada <xQueueGenericSend+0x7a>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e000      	b.n	8009adc <xQueueGenericSend+0x7c>
 8009ada:	2300      	movs	r3, #0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10c      	bne.n	8009afa <xQueueGenericSend+0x9a>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	b672      	cpsid	i
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	b662      	cpsie	i
 8009af4:	623b      	str	r3, [r7, #32]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009afa:	f001 fd11 	bl	800b520 <xTaskGetSchedulerState>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <xQueueGenericSend+0xaa>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <xQueueGenericSend+0xae>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e000      	b.n	8009b10 <xQueueGenericSend+0xb0>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10c      	bne.n	8009b2e <xQueueGenericSend+0xce>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	b672      	cpsid	i
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	b662      	cpsie	i
 8009b28:	61fb      	str	r3, [r7, #28]
}
 8009b2a:	bf00      	nop
 8009b2c:	e7fe      	b.n	8009b2c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b2e:	f002 fb45 	bl	800c1bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d302      	bcc.n	8009b44 <xQueueGenericSend+0xe4>
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d129      	bne.n	8009b98 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	68b9      	ldr	r1, [r7, #8]
 8009b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b4a:	f000 fcc2 	bl	800a4d2 <prvCopyDataToQueue>
 8009b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d010      	beq.n	8009b7a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	3324      	adds	r3, #36	; 0x24
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fb05 	bl	800b16c <xTaskRemoveFromEventList>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d013      	beq.n	8009b90 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009b68:	4b3f      	ldr	r3, [pc, #252]	; (8009c68 <xQueueGenericSend+0x208>)
 8009b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6e:	601a      	str	r2, [r3, #0]
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	e00a      	b.n	8009b90 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d007      	beq.n	8009b90 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009b80:	4b39      	ldr	r3, [pc, #228]	; (8009c68 <xQueueGenericSend+0x208>)
 8009b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009b90:	f002 fb48 	bl	800c224 <vPortExitCritical>
				return pdPASS;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e063      	b.n	8009c60 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d103      	bne.n	8009ba6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b9e:	f002 fb41 	bl	800c224 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e05c      	b.n	8009c60 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bac:	f107 0314 	add.w	r3, r7, #20
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 fb41 	bl	800b238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bba:	f002 fb33 	bl	800c224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009bbe:	f001 f88b 	bl	800acd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009bc2:	f002 fafb 	bl	800c1bc <vPortEnterCritical>
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bcc:	b25b      	sxtb	r3, r3
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd2:	d103      	bne.n	8009bdc <xQueueGenericSend+0x17c>
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009be2:	b25b      	sxtb	r3, r3
 8009be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009be8:	d103      	bne.n	8009bf2 <xQueueGenericSend+0x192>
 8009bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bf2:	f002 fb17 	bl	800c224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bf6:	1d3a      	adds	r2, r7, #4
 8009bf8:	f107 0314 	add.w	r3, r7, #20
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f001 fb30 	bl	800b264 <xTaskCheckForTimeOut>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d124      	bne.n	8009c54 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c0c:	f000 fd59 	bl	800a6c2 <prvIsQueueFull>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d018      	beq.n	8009c48 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c18:	3310      	adds	r3, #16
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fa50 	bl	800b0c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c26:	f000 fce4 	bl	800a5f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009c2a:	f001 f863 	bl	800acf4 <xTaskResumeAll>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f47f af7c 	bne.w	8009b2e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <xQueueGenericSend+0x208>)
 8009c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c3c:	601a      	str	r2, [r3, #0]
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	e772      	b.n	8009b2e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c4a:	f000 fcd2 	bl	800a5f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c4e:	f001 f851 	bl	800acf4 <xTaskResumeAll>
 8009c52:	e76c      	b.n	8009b2e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c56:	f000 fccc 	bl	800a5f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c5a:	f001 f84b 	bl	800acf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3738      	adds	r7, #56	; 0x38
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08e      	sub	sp, #56	; 0x38
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10c      	bne.n	8009c9e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c88:	b672      	cpsid	i
 8009c8a:	f383 8811 	msr	BASEPRI, r3
 8009c8e:	f3bf 8f6f 	isb	sy
 8009c92:	f3bf 8f4f 	dsb	sy
 8009c96:	b662      	cpsie	i
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d103      	bne.n	8009cac <xQueueGenericSendFromISR+0x40>
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <xQueueGenericSendFromISR+0x44>
 8009cac:	2301      	movs	r3, #1
 8009cae:	e000      	b.n	8009cb2 <xQueueGenericSendFromISR+0x46>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10c      	bne.n	8009cd0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cba:	b672      	cpsid	i
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	b662      	cpsie	i
 8009cca:	623b      	str	r3, [r7, #32]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d103      	bne.n	8009cde <xQueueGenericSendFromISR+0x72>
 8009cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d101      	bne.n	8009ce2 <xQueueGenericSendFromISR+0x76>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e000      	b.n	8009ce4 <xQueueGenericSendFromISR+0x78>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10c      	bne.n	8009d02 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	b672      	cpsid	i
 8009cee:	f383 8811 	msr	BASEPRI, r3
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	b662      	cpsie	i
 8009cfc:	61fb      	str	r3, [r7, #28]
}
 8009cfe:	bf00      	nop
 8009d00:	e7fe      	b.n	8009d00 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d02:	f002 fb43 	bl	800c38c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009d06:	f3ef 8211 	mrs	r2, BASEPRI
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	b672      	cpsid	i
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	b662      	cpsie	i
 8009d1e:	61ba      	str	r2, [r7, #24]
 8009d20:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009d22:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <xQueueGenericSendFromISR+0xcc>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b02      	cmp	r3, #2
 8009d36:	d12c      	bne.n	8009d92 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	68b9      	ldr	r1, [r7, #8]
 8009d46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d48:	f000 fbc3 	bl	800a4d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d4c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d54:	d112      	bne.n	8009d7c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d016      	beq.n	8009d8c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	3324      	adds	r3, #36	; 0x24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f001 fa02 	bl	800b16c <xTaskRemoveFromEventList>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00e      	beq.n	8009d8c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e007      	b.n	8009d8c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009d7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d80:	3301      	adds	r3, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	b25a      	sxtb	r2, r3
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009d90:	e001      	b.n	8009d96 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009d92:	2300      	movs	r3, #0
 8009d94:	637b      	str	r3, [r7, #52]	; 0x34
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009da0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3738      	adds	r7, #56	; 0x38
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b08e      	sub	sp, #56	; 0x38
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10c      	bne.n	8009dda <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	b672      	cpsid	i
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	b662      	cpsie	i
 8009dd4:	623b      	str	r3, [r7, #32]
}
 8009dd6:	bf00      	nop
 8009dd8:	e7fe      	b.n	8009dd8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00c      	beq.n	8009dfc <xQueueGiveFromISR+0x50>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	b672      	cpsid	i
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	b662      	cpsie	i
 8009df6:	61fb      	str	r3, [r7, #28]
}
 8009df8:	bf00      	nop
 8009dfa:	e7fe      	b.n	8009dfa <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d103      	bne.n	8009e0c <xQueueGiveFromISR+0x60>
 8009e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e06:	689b      	ldr	r3, [r3, #8]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <xQueueGiveFromISR+0x64>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e000      	b.n	8009e12 <xQueueGiveFromISR+0x66>
 8009e10:	2300      	movs	r3, #0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10c      	bne.n	8009e30 <xQueueGiveFromISR+0x84>
	__asm volatile
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	b672      	cpsid	i
 8009e1c:	f383 8811 	msr	BASEPRI, r3
 8009e20:	f3bf 8f6f 	isb	sy
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	b662      	cpsie	i
 8009e2a:	61bb      	str	r3, [r7, #24]
}
 8009e2c:	bf00      	nop
 8009e2e:	e7fe      	b.n	8009e2e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e30:	f002 faac 	bl	800c38c <vPortValidateInterruptPriority>
	__asm volatile
 8009e34:	f3ef 8211 	mrs	r2, BASEPRI
 8009e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3c:	b672      	cpsid	i
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	b662      	cpsie	i
 8009e4c:	617a      	str	r2, [r7, #20]
 8009e4e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009e50:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e58:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d22b      	bcs.n	8009ebc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e74:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e7e:	d112      	bne.n	8009ea6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d016      	beq.n	8009eb6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8a:	3324      	adds	r3, #36	; 0x24
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f001 f96d 	bl	800b16c <xTaskRemoveFromEventList>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00e      	beq.n	8009eb6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]
 8009ea4:	e007      	b.n	8009eb6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	b25a      	sxtb	r2, r3
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009eba:	e001      	b.n	8009ec0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f383 8811 	msr	BASEPRI, r3
}
 8009eca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3738      	adds	r7, #56	; 0x38
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
	...

08009ed8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08c      	sub	sp, #48	; 0x30
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10c      	bne.n	8009f0c <xQueueReceive+0x34>
	__asm volatile
 8009ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef6:	b672      	cpsid	i
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	b662      	cpsie	i
 8009f06:	623b      	str	r3, [r7, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	e7fe      	b.n	8009f0a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d103      	bne.n	8009f1a <xQueueReceive+0x42>
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <xQueueReceive+0x46>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e000      	b.n	8009f20 <xQueueReceive+0x48>
 8009f1e:	2300      	movs	r3, #0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d10c      	bne.n	8009f3e <xQueueReceive+0x66>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	b672      	cpsid	i
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	b662      	cpsie	i
 8009f38:	61fb      	str	r3, [r7, #28]
}
 8009f3a:	bf00      	nop
 8009f3c:	e7fe      	b.n	8009f3c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f3e:	f001 faef 	bl	800b520 <xTaskGetSchedulerState>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d102      	bne.n	8009f4e <xQueueReceive+0x76>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <xQueueReceive+0x7a>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <xQueueReceive+0x7c>
 8009f52:	2300      	movs	r3, #0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10c      	bne.n	8009f72 <xQueueReceive+0x9a>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	b672      	cpsid	i
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	b662      	cpsie	i
 8009f6c:	61bb      	str	r3, [r7, #24]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f72:	f002 f923 	bl	800c1bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d01f      	beq.n	8009fc2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f86:	f000 fb0e 	bl	800a5a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	1e5a      	subs	r2, r3, #1
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00f      	beq.n	8009fba <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9c:	3310      	adds	r3, #16
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f001 f8e4 	bl	800b16c <xTaskRemoveFromEventList>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d007      	beq.n	8009fba <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009faa:	4b3d      	ldr	r3, [pc, #244]	; (800a0a0 <xQueueReceive+0x1c8>)
 8009fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fba:	f002 f933 	bl	800c224 <vPortExitCritical>
				return pdPASS;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e069      	b.n	800a096 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d103      	bne.n	8009fd0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fc8:	f002 f92c 	bl	800c224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	e062      	b.n	800a096 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d106      	bne.n	8009fe4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fd6:	f107 0310 	add.w	r3, r7, #16
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 f92c 	bl	800b238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fe4:	f002 f91e 	bl	800c224 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fe8:	f000 fe76 	bl	800acd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fec:	f002 f8e6 	bl	800c1bc <vPortEnterCritical>
 8009ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ff6:	b25b      	sxtb	r3, r3
 8009ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ffc:	d103      	bne.n	800a006 <xQueueReceive+0x12e>
 8009ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a00c:	b25b      	sxtb	r3, r3
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a012:	d103      	bne.n	800a01c <xQueueReceive+0x144>
 800a014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a016:	2200      	movs	r2, #0
 800a018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a01c:	f002 f902 	bl	800c224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a020:	1d3a      	adds	r2, r7, #4
 800a022:	f107 0310 	add.w	r3, r7, #16
 800a026:	4611      	mov	r1, r2
 800a028:	4618      	mov	r0, r3
 800a02a:	f001 f91b 	bl	800b264 <xTaskCheckForTimeOut>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d123      	bne.n	800a07c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a036:	f000 fb2e 	bl	800a696 <prvIsQueueEmpty>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d017      	beq.n	800a070 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a042:	3324      	adds	r3, #36	; 0x24
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f001 f83b 	bl	800b0c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a050:	f000 facf 	bl	800a5f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a054:	f000 fe4e 	bl	800acf4 <xTaskResumeAll>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d189      	bne.n	8009f72 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a05e:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <xQueueReceive+0x1c8>)
 800a060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	e780      	b.n	8009f72 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a070:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a072:	f000 fabe 	bl	800a5f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a076:	f000 fe3d 	bl	800acf4 <xTaskResumeAll>
 800a07a:	e77a      	b.n	8009f72 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a07e:	f000 fab8 	bl	800a5f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a082:	f000 fe37 	bl	800acf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a088:	f000 fb05 	bl	800a696 <prvIsQueueEmpty>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	f43f af6f 	beq.w	8009f72 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a094:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a096:	4618      	mov	r0, r3
 800a098:	3730      	adds	r7, #48	; 0x30
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08e      	sub	sp, #56	; 0x38
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10c      	bne.n	800a0da <xQueueSemaphoreTake+0x36>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	b672      	cpsid	i
 800a0c6:	f383 8811 	msr	BASEPRI, r3
 800a0ca:	f3bf 8f6f 	isb	sy
 800a0ce:	f3bf 8f4f 	dsb	sy
 800a0d2:	b662      	cpsie	i
 800a0d4:	623b      	str	r3, [r7, #32]
}
 800a0d6:	bf00      	nop
 800a0d8:	e7fe      	b.n	800a0d8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00c      	beq.n	800a0fc <xQueueSemaphoreTake+0x58>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	b672      	cpsid	i
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	b662      	cpsie	i
 800a0f6:	61fb      	str	r3, [r7, #28]
}
 800a0f8:	bf00      	nop
 800a0fa:	e7fe      	b.n	800a0fa <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0fc:	f001 fa10 	bl	800b520 <xTaskGetSchedulerState>
 800a100:	4603      	mov	r3, r0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d102      	bne.n	800a10c <xQueueSemaphoreTake+0x68>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d101      	bne.n	800a110 <xQueueSemaphoreTake+0x6c>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <xQueueSemaphoreTake+0x6e>
 800a110:	2300      	movs	r3, #0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10c      	bne.n	800a130 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	b672      	cpsid	i
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	b662      	cpsie	i
 800a12a:	61bb      	str	r3, [r7, #24]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a130:	f002 f844 	bl	800c1bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d024      	beq.n	800a18a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a142:	1e5a      	subs	r2, r3, #1
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d104      	bne.n	800a15a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a150:	f001 fb64 	bl	800b81c <pvTaskIncrementMutexHeldCount>
 800a154:	4602      	mov	r2, r0
 800a156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a158:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00f      	beq.n	800a182 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a164:	3310      	adds	r3, #16
 800a166:	4618      	mov	r0, r3
 800a168:	f001 f800 	bl	800b16c <xTaskRemoveFromEventList>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a172:	4b55      	ldr	r3, [pc, #340]	; (800a2c8 <xQueueSemaphoreTake+0x224>)
 800a174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	f3bf 8f4f 	dsb	sy
 800a17e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a182:	f002 f84f 	bl	800c224 <vPortExitCritical>
				return pdPASS;
 800a186:	2301      	movs	r3, #1
 800a188:	e099      	b.n	800a2be <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d113      	bne.n	800a1b8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00c      	beq.n	800a1b0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	b672      	cpsid	i
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	b662      	cpsie	i
 800a1aa:	617b      	str	r3, [r7, #20]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a1b0:	f002 f838 	bl	800c224 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	e082      	b.n	800a2be <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d106      	bne.n	800a1cc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a1be:	f107 030c 	add.w	r3, r7, #12
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 f838 	bl	800b238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a1cc:	f002 f82a 	bl	800c224 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a1d0:	f000 fd82 	bl	800acd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a1d4:	f001 fff2 	bl	800c1bc <vPortEnterCritical>
 800a1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1de:	b25b      	sxtb	r3, r3
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1e4:	d103      	bne.n	800a1ee <xQueueSemaphoreTake+0x14a>
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1f4:	b25b      	sxtb	r3, r3
 800a1f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1fa:	d103      	bne.n	800a204 <xQueueSemaphoreTake+0x160>
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a204:	f002 f80e 	bl	800c224 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a208:	463a      	mov	r2, r7
 800a20a:	f107 030c 	add.w	r3, r7, #12
 800a20e:	4611      	mov	r1, r2
 800a210:	4618      	mov	r0, r3
 800a212:	f001 f827 	bl	800b264 <xTaskCheckForTimeOut>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d132      	bne.n	800a282 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a21c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a21e:	f000 fa3a 	bl	800a696 <prvIsQueueEmpty>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d026      	beq.n	800a276 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d109      	bne.n	800a244 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800a230:	f001 ffc4 	bl	800c1bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	4618      	mov	r0, r3
 800a23a:	f001 f98f 	bl	800b55c <xTaskPriorityInherit>
 800a23e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a240:	f001 fff0 	bl	800c224 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	3324      	adds	r3, #36	; 0x24
 800a248:	683a      	ldr	r2, [r7, #0]
 800a24a:	4611      	mov	r1, r2
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 ff39 	bl	800b0c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a254:	f000 f9cd 	bl	800a5f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a258:	f000 fd4c 	bl	800acf4 <xTaskResumeAll>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f47f af66 	bne.w	800a130 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800a264:	4b18      	ldr	r3, [pc, #96]	; (800a2c8 <xQueueSemaphoreTake+0x224>)
 800a266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	e75c      	b.n	800a130 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a278:	f000 f9bb 	bl	800a5f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a27c:	f000 fd3a 	bl	800acf4 <xTaskResumeAll>
 800a280:	e756      	b.n	800a130 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a284:	f000 f9b5 	bl	800a5f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a288:	f000 fd34 	bl	800acf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a28c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a28e:	f000 fa02 	bl	800a696 <prvIsQueueEmpty>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	f43f af4b 	beq.w	800a130 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00d      	beq.n	800a2bc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800a2a0:	f001 ff8c 	bl	800c1bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a2a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2a6:	f000 f8fc 	bl	800a4a2 <prvGetDisinheritPriorityAfterTimeout>
 800a2aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f001 fa2c 	bl	800b710 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a2b8:	f001 ffb4 	bl	800c224 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3738      	adds	r7, #56	; 0x38
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08e      	sub	sp, #56	; 0x38
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d10c      	bne.n	800a2fc <xQueueReceiveFromISR+0x30>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	b672      	cpsid	i
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	b662      	cpsie	i
 800a2f6:	623b      	str	r3, [r7, #32]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <xQueueReceiveFromISR+0x3e>
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <xQueueReceiveFromISR+0x42>
 800a30a:	2301      	movs	r3, #1
 800a30c:	e000      	b.n	800a310 <xQueueReceiveFromISR+0x44>
 800a30e:	2300      	movs	r3, #0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10c      	bne.n	800a32e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800a314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a318:	b672      	cpsid	i
 800a31a:	f383 8811 	msr	BASEPRI, r3
 800a31e:	f3bf 8f6f 	isb	sy
 800a322:	f3bf 8f4f 	dsb	sy
 800a326:	b662      	cpsie	i
 800a328:	61fb      	str	r3, [r7, #28]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a32e:	f002 f82d 	bl	800c38c <vPortValidateInterruptPriority>
	__asm volatile
 800a332:	f3ef 8211 	mrs	r2, BASEPRI
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	b672      	cpsid	i
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	b662      	cpsie	i
 800a34a:	61ba      	str	r2, [r7, #24]
 800a34c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a34e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a350:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a356:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d02f      	beq.n	800a3be <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a360:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a368:	68b9      	ldr	r1, [r7, #8]
 800a36a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a36c:	f000 f91b 	bl	800a5a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	1e5a      	subs	r2, r3, #1
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a378:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a380:	d112      	bne.n	800a3a8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d016      	beq.n	800a3b8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38c:	3310      	adds	r3, #16
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 feec 	bl	800b16c <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00e      	beq.n	800a3b8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00b      	beq.n	800a3b8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	601a      	str	r2, [r3, #0]
 800a3a6:	e007      	b.n	800a3b8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a3a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	b25a      	sxtb	r2, r3
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
 800a3bc:	e001      	b.n	800a3c2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f383 8811 	msr	BASEPRI, r3
}
 800a3cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3738      	adds	r7, #56	; 0x38
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10c      	bne.n	800a400 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ea:	b672      	cpsid	i
 800a3ec:	f383 8811 	msr	BASEPRI, r3
 800a3f0:	f3bf 8f6f 	isb	sy
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	b662      	cpsie	i
 800a3fa:	60bb      	str	r3, [r7, #8]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a400:	f001 fedc 	bl	800c1bc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a408:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a40a:	f001 ff0b 	bl	800c224 <vPortExitCritical>

	return uxReturn;
 800a40e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10c      	bne.n	800a444 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	b672      	cpsid	i
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	b662      	cpsie	i
 800a43e:	60fb      	str	r3, [r7, #12]
}
 800a440:	bf00      	nop
 800a442:	e7fe      	b.n	800a442 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a448:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a44a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a44c:	4618      	mov	r0, r3
 800a44e:	371c      	adds	r7, #28
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr

0800a458 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b084      	sub	sp, #16
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10c      	bne.n	800a484 <vQueueDelete+0x2c>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	b672      	cpsid	i
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	b662      	cpsie	i
 800a47e:	60bb      	str	r3, [r7, #8]
}
 800a480:	bf00      	nop
 800a482:	e7fe      	b.n	800a482 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 f95f 	bl	800a748 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f002 f887 	bl	800c5a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a49a:	bf00      	nop
 800a49c:	3710      	adds	r7, #16
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}

0800a4a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b085      	sub	sp, #20
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d006      	beq.n	800a4c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a4bc:	60fb      	str	r3, [r7, #12]
 800a4be:	e001      	b.n	800a4c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
	}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b086      	sub	sp, #24
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10d      	bne.n	800a50c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d14d      	bne.n	800a594 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f001 f895 	bl	800b62c <xTaskPriorityDisinherit>
 800a502:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	609a      	str	r2, [r3, #8]
 800a50a:	e043      	b.n	800a594 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d119      	bne.n	800a546 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6858      	ldr	r0, [r3, #4]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	461a      	mov	r2, r3
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	f00f fbe6 	bl	8019cee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52a:	441a      	add	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d32b      	bcc.n	800a594 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	605a      	str	r2, [r3, #4]
 800a544:	e026      	b.n	800a594 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	68d8      	ldr	r0, [r3, #12]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a54e:	461a      	mov	r2, r3
 800a550:	68b9      	ldr	r1, [r7, #8]
 800a552:	f00f fbcc 	bl	8019cee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55e:	425b      	negs	r3, r3
 800a560:	441a      	add	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	68da      	ldr	r2, [r3, #12]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d207      	bcs.n	800a582 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a57a:	425b      	negs	r3, r3
 800a57c:	441a      	add	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d105      	bne.n	800a594 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3b01      	subs	r3, #1
 800a592:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	1c5a      	adds	r2, r3, #1
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a59c:	697b      	ldr	r3, [r7, #20]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d018      	beq.n	800a5ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68da      	ldr	r2, [r3, #12]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c0:	441a      	add	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d303      	bcc.n	800a5da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68d9      	ldr	r1, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	6838      	ldr	r0, [r7, #0]
 800a5e6:	f00f fb82 	bl	8019cee <memcpy>
	}
}
 800a5ea:	bf00      	nop
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a5fa:	f001 fddf 	bl	800c1bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a604:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a606:	e011      	b.n	800a62c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d012      	beq.n	800a636 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	3324      	adds	r3, #36	; 0x24
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fda9 	bl	800b16c <xTaskRemoveFromEventList>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a620:	f000 fe86 	bl	800b330 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a624:	7bfb      	ldrb	r3, [r7, #15]
 800a626:	3b01      	subs	r3, #1
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a630:	2b00      	cmp	r3, #0
 800a632:	dce9      	bgt.n	800a608 <prvUnlockQueue+0x16>
 800a634:	e000      	b.n	800a638 <prvUnlockQueue+0x46>
					break;
 800a636:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	22ff      	movs	r2, #255	; 0xff
 800a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a640:	f001 fdf0 	bl	800c224 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a644:	f001 fdba 	bl	800c1bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a64e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a650:	e011      	b.n	800a676 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d012      	beq.n	800a680 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3310      	adds	r3, #16
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 fd84 	bl	800b16c <xTaskRemoveFromEventList>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a66a:	f000 fe61 	bl	800b330 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	3b01      	subs	r3, #1
 800a672:	b2db      	uxtb	r3, r3
 800a674:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a676:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	dce9      	bgt.n	800a652 <prvUnlockQueue+0x60>
 800a67e:	e000      	b.n	800a682 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a680:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	22ff      	movs	r2, #255	; 0xff
 800a686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a68a:	f001 fdcb 	bl	800c224 <vPortExitCritical>
}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a69e:	f001 fd8d 	bl	800c1bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d102      	bne.n	800a6b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	e001      	b.n	800a6b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6b4:	f001 fdb6 	bl	800c224 <vPortExitCritical>

	return xReturn;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6ca:	f001 fd77 	bl	800c1bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d102      	bne.n	800a6e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	60fb      	str	r3, [r7, #12]
 800a6de:	e001      	b.n	800a6e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6e4:	f001 fd9e 	bl	800c224 <vPortExitCritical>

	return xReturn;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
	...

0800a6f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6fe:	2300      	movs	r3, #0
 800a700:	60fb      	str	r3, [r7, #12]
 800a702:	e014      	b.n	800a72e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a704:	4a0f      	ldr	r2, [pc, #60]	; (800a744 <vQueueAddToRegistry+0x50>)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10b      	bne.n	800a728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a710:	490c      	ldr	r1, [pc, #48]	; (800a744 <vQueueAddToRegistry+0x50>)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	683a      	ldr	r2, [r7, #0]
 800a716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a71a:	4a0a      	ldr	r2, [pc, #40]	; (800a744 <vQueueAddToRegistry+0x50>)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	4413      	add	r3, r2
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a726:	e006      	b.n	800a736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3301      	adds	r3, #1
 800a72c:	60fb      	str	r3, [r7, #12]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2b07      	cmp	r3, #7
 800a732:	d9e7      	bls.n	800a704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a734:	bf00      	nop
 800a736:	bf00      	nop
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	20046dd4 	.word	0x20046dd4

0800a748 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	e016      	b.n	800a784 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a756:	4a10      	ldr	r2, [pc, #64]	; (800a798 <vQueueUnregisterQueue+0x50>)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	00db      	lsls	r3, r3, #3
 800a75c:	4413      	add	r3, r2
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	429a      	cmp	r2, r3
 800a764:	d10b      	bne.n	800a77e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a766:	4a0c      	ldr	r2, [pc, #48]	; (800a798 <vQueueUnregisterQueue+0x50>)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2100      	movs	r1, #0
 800a76c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a770:	4a09      	ldr	r2, [pc, #36]	; (800a798 <vQueueUnregisterQueue+0x50>)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	4413      	add	r3, r2
 800a778:	2200      	movs	r2, #0
 800a77a:	605a      	str	r2, [r3, #4]
				break;
 800a77c:	e006      	b.n	800a78c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	3301      	adds	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b07      	cmp	r3, #7
 800a788:	d9e5      	bls.n	800a756 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	3714      	adds	r7, #20
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr
 800a798:	20046dd4 	.word	0x20046dd4

0800a79c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b086      	sub	sp, #24
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a7ac:	f001 fd06 	bl	800c1bc <vPortEnterCritical>
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7bc:	d103      	bne.n	800a7c6 <vQueueWaitForMessageRestricted+0x2a>
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7cc:	b25b      	sxtb	r3, r3
 800a7ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7d2:	d103      	bne.n	800a7dc <vQueueWaitForMessageRestricted+0x40>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7dc:	f001 fd22 	bl	800c224 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	3324      	adds	r3, #36	; 0x24
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f000 fc8d 	bl	800b110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a7f6:	6978      	ldr	r0, [r7, #20]
 800a7f8:	f7ff fefb 	bl	800a5f2 <prvUnlockQueue>
	}
 800a7fc:	bf00      	nop
 800a7fe:	3718      	adds	r7, #24
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08e      	sub	sp, #56	; 0x38
 800a808:	af04      	add	r7, sp, #16
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
 800a810:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10c      	bne.n	800a832 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	b672      	cpsid	i
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	b662      	cpsie	i
 800a82c:	623b      	str	r3, [r7, #32]
}
 800a82e:	bf00      	nop
 800a830:	e7fe      	b.n	800a830 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10c      	bne.n	800a852 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83c:	b672      	cpsid	i
 800a83e:	f383 8811 	msr	BASEPRI, r3
 800a842:	f3bf 8f6f 	isb	sy
 800a846:	f3bf 8f4f 	dsb	sy
 800a84a:	b662      	cpsie	i
 800a84c:	61fb      	str	r3, [r7, #28]
}
 800a84e:	bf00      	nop
 800a850:	e7fe      	b.n	800a850 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a852:	23bc      	movs	r3, #188	; 0xbc
 800a854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	2bbc      	cmp	r3, #188	; 0xbc
 800a85a:	d00c      	beq.n	800a876 <xTaskCreateStatic+0x72>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	b672      	cpsid	i
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	b662      	cpsie	i
 800a870:	61bb      	str	r3, [r7, #24]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a876:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d01e      	beq.n	800a8bc <xTaskCreateStatic+0xb8>
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01b      	beq.n	800a8bc <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a88c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a890:	2202      	movs	r2, #2
 800a892:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a896:	2300      	movs	r3, #0
 800a898:	9303      	str	r3, [sp, #12]
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	f107 0314 	add.w	r3, r7, #20
 800a8a2:	9301      	str	r3, [sp, #4]
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	68b9      	ldr	r1, [r7, #8]
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f000 f850 	bl	800a954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a8b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a8b6:	f000 f8f5 	bl	800aaa4 <prvAddNewTaskToReadyList>
 800a8ba:	e001      	b.n	800a8c0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a8c0:	697b      	ldr	r3, [r7, #20]
	}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3728      	adds	r7, #40	; 0x28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a8ca:	b580      	push	{r7, lr}
 800a8cc:	b08c      	sub	sp, #48	; 0x30
 800a8ce:	af04      	add	r7, sp, #16
 800a8d0:	60f8      	str	r0, [r7, #12]
 800a8d2:	60b9      	str	r1, [r7, #8]
 800a8d4:	603b      	str	r3, [r7, #0]
 800a8d6:	4613      	mov	r3, r2
 800a8d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f001 fd98 	bl	800c414 <pvPortMalloc>
 800a8e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00e      	beq.n	800a90a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a8ec:	20bc      	movs	r0, #188	; 0xbc
 800a8ee:	f001 fd91 	bl	800c414 <pvPortMalloc>
 800a8f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d003      	beq.n	800a902 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	697a      	ldr	r2, [r7, #20]
 800a8fe:	631a      	str	r2, [r3, #48]	; 0x30
 800a900:	e005      	b.n	800a90e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a902:	6978      	ldr	r0, [r7, #20]
 800a904:	f001 fe50 	bl	800c5a8 <vPortFree>
 800a908:	e001      	b.n	800a90e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a90a:	2300      	movs	r3, #0
 800a90c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d017      	beq.n	800a944 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a91c:	88fa      	ldrh	r2, [r7, #6]
 800a91e:	2300      	movs	r3, #0
 800a920:	9303      	str	r3, [sp, #12]
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	9302      	str	r3, [sp, #8]
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68b9      	ldr	r1, [r7, #8]
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 f80e 	bl	800a954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a938:	69f8      	ldr	r0, [r7, #28]
 800a93a:	f000 f8b3 	bl	800aaa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a93e:	2301      	movs	r3, #1
 800a940:	61bb      	str	r3, [r7, #24]
 800a942:	e002      	b.n	800a94a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a948:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a94a:	69bb      	ldr	r3, [r7, #24]
	}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3720      	adds	r7, #32
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	607a      	str	r2, [r7, #4]
 800a960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	461a      	mov	r2, r3
 800a96c:	21a5      	movs	r1, #165	; 0xa5
 800a96e:	f00f f9cc 	bl	8019d0a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a976:	6879      	ldr	r1, [r7, #4]
 800a978:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a97c:	440b      	add	r3, r1
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	f023 0307 	bic.w	r3, r3, #7
 800a98a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	f003 0307 	and.w	r3, r3, #7
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00c      	beq.n	800a9b0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	b672      	cpsid	i
 800a99c:	f383 8811 	msr	BASEPRI, r3
 800a9a0:	f3bf 8f6f 	isb	sy
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	b662      	cpsie	i
 800a9aa:	617b      	str	r3, [r7, #20]
}
 800a9ac:	bf00      	nop
 800a9ae:	e7fe      	b.n	800a9ae <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01f      	beq.n	800a9f6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	61fb      	str	r3, [r7, #28]
 800a9ba:	e012      	b.n	800a9e2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a9bc:	68ba      	ldr	r2, [r7, #8]
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	7819      	ldrb	r1, [r3, #0]
 800a9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	3334      	adds	r3, #52	; 0x34
 800a9cc:	460a      	mov	r2, r1
 800a9ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a9d0:	68ba      	ldr	r2, [r7, #8]
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d006      	beq.n	800a9ea <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	2b0f      	cmp	r3, #15
 800a9e6:	d9e9      	bls.n	800a9bc <prvInitialiseNewTask+0x68>
 800a9e8:	e000      	b.n	800a9ec <prvInitialiseNewTask+0x98>
			{
				break;
 800a9ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9f4:	e003      	b.n	800a9fe <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa00:	2b37      	cmp	r3, #55	; 0x37
 800aa02:	d901      	bls.n	800aa08 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa04:	2337      	movs	r3, #55	; 0x37
 800aa06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa16:	2200      	movs	r2, #0
 800aa18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe fd0c 	bl	800943c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	3318      	adds	r3, #24
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7fe fd07 	bl	800943c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aa54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa56:	3354      	adds	r3, #84	; 0x54
 800aa58:	2260      	movs	r2, #96	; 0x60
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f00f f954 	bl	8019d0a <memset>
 800aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa64:	4a0c      	ldr	r2, [pc, #48]	; (800aa98 <prvInitialiseNewTask+0x144>)
 800aa66:	659a      	str	r2, [r3, #88]	; 0x58
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	4a0c      	ldr	r2, [pc, #48]	; (800aa9c <prvInitialiseNewTask+0x148>)
 800aa6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <prvInitialiseNewTask+0x14c>)
 800aa72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	69b8      	ldr	r0, [r7, #24]
 800aa7a:	f001 fa93 	bl	800bfa4 <pxPortInitialiseStack>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa90:	bf00      	nop
 800aa92:	3720      	adds	r7, #32
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0801e3b4 	.word	0x0801e3b4
 800aa9c:	0801e3d4 	.word	0x0801e3d4
 800aaa0:	0801e394 	.word	0x0801e394

0800aaa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aaac:	f001 fb86 	bl	800c1bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aab0:	4b2d      	ldr	r3, [pc, #180]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	4a2c      	ldr	r2, [pc, #176]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800aaba:	4b2c      	ldr	r3, [pc, #176]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aac2:	4a2a      	ldr	r2, [pc, #168]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aac8:	4b27      	ldr	r3, [pc, #156]	; (800ab68 <prvAddNewTaskToReadyList+0xc4>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d110      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aad0:	f000 fc52 	bl	800b378 <prvInitialiseTaskLists>
 800aad4:	e00d      	b.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aad6:	4b26      	ldr	r3, [pc, #152]	; (800ab70 <prvAddNewTaskToReadyList+0xcc>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aade:	4b23      	ldr	r3, [pc, #140]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d802      	bhi.n	800aaf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aaec:	4a1f      	ldr	r2, [pc, #124]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aaf2:	4b20      	ldr	r3, [pc, #128]	; (800ab74 <prvAddNewTaskToReadyList+0xd0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	4a1e      	ldr	r2, [pc, #120]	; (800ab74 <prvAddNewTaskToReadyList+0xd0>)
 800aafa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aafc:	4b1d      	ldr	r3, [pc, #116]	; (800ab74 <prvAddNewTaskToReadyList+0xd0>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	4b1b      	ldr	r3, [pc, #108]	; (800ab78 <prvAddNewTaskToReadyList+0xd4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d903      	bls.n	800ab18 <prvAddNewTaskToReadyList+0x74>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <prvAddNewTaskToReadyList+0xd4>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a15      	ldr	r2, [pc, #84]	; (800ab7c <prvAddNewTaskToReadyList+0xd8>)
 800ab26:	441a      	add	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe fc91 	bl	8009456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ab34:	f001 fb76 	bl	800c224 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ab38:	4b0d      	ldr	r3, [pc, #52]	; (800ab70 <prvAddNewTaskToReadyList+0xcc>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00e      	beq.n	800ab5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ab40:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <prvAddNewTaskToReadyList+0xc8>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d207      	bcs.n	800ab5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ab4e:	4b0c      	ldr	r3, [pc, #48]	; (800ab80 <prvAddNewTaskToReadyList+0xdc>)
 800ab50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab54:	601a      	str	r2, [r3, #0]
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab5e:	bf00      	nop
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200472e8 	.word	0x200472e8
 800ab6c:	20046e14 	.word	0x20046e14
 800ab70:	200472f4 	.word	0x200472f4
 800ab74:	20047304 	.word	0x20047304
 800ab78:	200472f0 	.word	0x200472f0
 800ab7c:	20046e18 	.word	0x20046e18
 800ab80:	e000ed04 	.word	0xe000ed04

0800ab84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d019      	beq.n	800abca <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <vTaskDelay+0x64>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00c      	beq.n	800abb8 <vTaskDelay+0x34>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	b672      	cpsid	i
 800aba4:	f383 8811 	msr	BASEPRI, r3
 800aba8:	f3bf 8f6f 	isb	sy
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	b662      	cpsie	i
 800abb2:	60bb      	str	r3, [r7, #8]
}
 800abb4:	bf00      	nop
 800abb6:	e7fe      	b.n	800abb6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800abb8:	f000 f88e 	bl	800acd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800abbc:	2100      	movs	r1, #0
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fe40 	bl	800b844 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800abc4:	f000 f896 	bl	800acf4 <xTaskResumeAll>
 800abc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d107      	bne.n	800abe0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <vTaskDelay+0x68>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800abe0:	bf00      	nop
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20047310 	.word	0x20047310
 800abec:	e000ed04 	.word	0xe000ed04

0800abf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08a      	sub	sp, #40	; 0x28
 800abf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800abfa:	2300      	movs	r3, #0
 800abfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800abfe:	463a      	mov	r2, r7
 800ac00:	1d39      	adds	r1, r7, #4
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fe fbc4 	bl	8009394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	9202      	str	r2, [sp, #8]
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	2300      	movs	r3, #0
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	460a      	mov	r2, r1
 800ac1e:	4926      	ldr	r1, [pc, #152]	; (800acb8 <vTaskStartScheduler+0xc8>)
 800ac20:	4826      	ldr	r0, [pc, #152]	; (800acbc <vTaskStartScheduler+0xcc>)
 800ac22:	f7ff fdef 	bl	800a804 <xTaskCreateStatic>
 800ac26:	4603      	mov	r3, r0
 800ac28:	4a25      	ldr	r2, [pc, #148]	; (800acc0 <vTaskStartScheduler+0xd0>)
 800ac2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ac2c:	4b24      	ldr	r3, [pc, #144]	; (800acc0 <vTaskStartScheduler+0xd0>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ac34:	2301      	movs	r3, #1
 800ac36:	617b      	str	r3, [r7, #20]
 800ac38:	e001      	b.n	800ac3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d102      	bne.n	800ac4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ac44:	f000 fe52 	bl	800b8ec <xTimerCreateTimerTask>
 800ac48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d11d      	bne.n	800ac8c <vTaskStartScheduler+0x9c>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	b672      	cpsid	i
 800ac56:	f383 8811 	msr	BASEPRI, r3
 800ac5a:	f3bf 8f6f 	isb	sy
 800ac5e:	f3bf 8f4f 	dsb	sy
 800ac62:	b662      	cpsie	i
 800ac64:	613b      	str	r3, [r7, #16]
}
 800ac66:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac68:	4b16      	ldr	r3, [pc, #88]	; (800acc4 <vTaskStartScheduler+0xd4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	3354      	adds	r3, #84	; 0x54
 800ac6e:	4a16      	ldr	r2, [pc, #88]	; (800acc8 <vTaskStartScheduler+0xd8>)
 800ac70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ac72:	4b16      	ldr	r3, [pc, #88]	; (800accc <vTaskStartScheduler+0xdc>)
 800ac74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ac7a:	4b15      	ldr	r3, [pc, #84]	; (800acd0 <vTaskStartScheduler+0xe0>)
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ac80:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <vTaskStartScheduler+0xe4>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ac86:	f001 fa1b 	bl	800c0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ac8a:	e010      	b.n	800acae <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac92:	d10c      	bne.n	800acae <vTaskStartScheduler+0xbe>
	__asm volatile
 800ac94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac98:	b672      	cpsid	i
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	b662      	cpsie	i
 800aca8:	60fb      	str	r3, [r7, #12]
}
 800acaa:	bf00      	nop
 800acac:	e7fe      	b.n	800acac <vTaskStartScheduler+0xbc>
}
 800acae:	bf00      	nop
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	0801ad44 	.word	0x0801ad44
 800acbc:	0800b349 	.word	0x0800b349
 800acc0:	2004730c 	.word	0x2004730c
 800acc4:	20046e14 	.word	0x20046e14
 800acc8:	20001a5c 	.word	0x20001a5c
 800accc:	20047308 	.word	0x20047308
 800acd0:	200472f4 	.word	0x200472f4
 800acd4:	200472ec 	.word	0x200472ec

0800acd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800acdc:	4b04      	ldr	r3, [pc, #16]	; (800acf0 <vTaskSuspendAll+0x18>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	3301      	adds	r3, #1
 800ace2:	4a03      	ldr	r2, [pc, #12]	; (800acf0 <vTaskSuspendAll+0x18>)
 800ace4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ace6:	bf00      	nop
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	20047310 	.word	0x20047310

0800acf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad02:	4b43      	ldr	r3, [pc, #268]	; (800ae10 <xTaskResumeAll+0x11c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10c      	bne.n	800ad24 <xTaskResumeAll+0x30>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	b672      	cpsid	i
 800ad10:	f383 8811 	msr	BASEPRI, r3
 800ad14:	f3bf 8f6f 	isb	sy
 800ad18:	f3bf 8f4f 	dsb	sy
 800ad1c:	b662      	cpsie	i
 800ad1e:	603b      	str	r3, [r7, #0]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad24:	f001 fa4a 	bl	800c1bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad28:	4b39      	ldr	r3, [pc, #228]	; (800ae10 <xTaskResumeAll+0x11c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	4a38      	ldr	r2, [pc, #224]	; (800ae10 <xTaskResumeAll+0x11c>)
 800ad30:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad32:	4b37      	ldr	r3, [pc, #220]	; (800ae10 <xTaskResumeAll+0x11c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d162      	bne.n	800ae00 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ad3a:	4b36      	ldr	r3, [pc, #216]	; (800ae14 <xTaskResumeAll+0x120>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d05e      	beq.n	800ae00 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad42:	e02f      	b.n	800ada4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad44:	4b34      	ldr	r3, [pc, #208]	; (800ae18 <xTaskResumeAll+0x124>)
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	3318      	adds	r3, #24
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7fe fbdd 	bl	8009510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe fbd8 	bl	8009510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad64:	4b2d      	ldr	r3, [pc, #180]	; (800ae1c <xTaskResumeAll+0x128>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d903      	bls.n	800ad74 <xTaskResumeAll+0x80>
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	4a2a      	ldr	r2, [pc, #168]	; (800ae1c <xTaskResumeAll+0x128>)
 800ad72:	6013      	str	r3, [r2, #0]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	4a27      	ldr	r2, [pc, #156]	; (800ae20 <xTaskResumeAll+0x12c>)
 800ad82:	441a      	add	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	3304      	adds	r3, #4
 800ad88:	4619      	mov	r1, r3
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	f7fe fb63 	bl	8009456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad94:	4b23      	ldr	r3, [pc, #140]	; (800ae24 <xTaskResumeAll+0x130>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d302      	bcc.n	800ada4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ad9e:	4b22      	ldr	r3, [pc, #136]	; (800ae28 <xTaskResumeAll+0x134>)
 800ada0:	2201      	movs	r2, #1
 800ada2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ada4:	4b1c      	ldr	r3, [pc, #112]	; (800ae18 <xTaskResumeAll+0x124>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1cb      	bne.n	800ad44 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800adb2:	f000 fb85 	bl	800b4c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800adb6:	4b1d      	ldr	r3, [pc, #116]	; (800ae2c <xTaskResumeAll+0x138>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d010      	beq.n	800ade4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800adc2:	f000 f859 	bl	800ae78 <xTaskIncrementTick>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800adcc:	4b16      	ldr	r3, [pc, #88]	; (800ae28 <xTaskResumeAll+0x134>)
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3b01      	subs	r3, #1
 800add6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f1      	bne.n	800adc2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800adde:	4b13      	ldr	r3, [pc, #76]	; (800ae2c <xTaskResumeAll+0x138>)
 800ade0:	2200      	movs	r2, #0
 800ade2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ade4:	4b10      	ldr	r3, [pc, #64]	; (800ae28 <xTaskResumeAll+0x134>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d009      	beq.n	800ae00 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800adec:	2301      	movs	r3, #1
 800adee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800adf0:	4b0f      	ldr	r3, [pc, #60]	; (800ae30 <xTaskResumeAll+0x13c>)
 800adf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adf6:	601a      	str	r2, [r3, #0]
 800adf8:	f3bf 8f4f 	dsb	sy
 800adfc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae00:	f001 fa10 	bl	800c224 <vPortExitCritical>

	return xAlreadyYielded;
 800ae04:	68bb      	ldr	r3, [r7, #8]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	20047310 	.word	0x20047310
 800ae14:	200472e8 	.word	0x200472e8
 800ae18:	200472a8 	.word	0x200472a8
 800ae1c:	200472f0 	.word	0x200472f0
 800ae20:	20046e18 	.word	0x20046e18
 800ae24:	20046e14 	.word	0x20046e14
 800ae28:	200472fc 	.word	0x200472fc
 800ae2c:	200472f8 	.word	0x200472f8
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ae3a:	4b05      	ldr	r3, [pc, #20]	; (800ae50 <xTaskGetTickCount+0x1c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ae40:	687b      	ldr	r3, [r7, #4]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	200472ec 	.word	0x200472ec

0800ae54 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae5a:	f001 fa97 	bl	800c38c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ae5e:	2300      	movs	r3, #0
 800ae60:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800ae62:	4b04      	ldr	r3, [pc, #16]	; (800ae74 <xTaskGetTickCountFromISR+0x20>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae68:	683b      	ldr	r3, [r7, #0]
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	200472ec 	.word	0x200472ec

0800ae78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae82:	4b52      	ldr	r3, [pc, #328]	; (800afcc <xTaskIncrementTick+0x154>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f040 808f 	bne.w	800afaa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae8c:	4b50      	ldr	r3, [pc, #320]	; (800afd0 <xTaskIncrementTick+0x158>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ae94:	4a4e      	ldr	r2, [pc, #312]	; (800afd0 <xTaskIncrementTick+0x158>)
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d122      	bne.n	800aee6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800aea0:	4b4c      	ldr	r3, [pc, #304]	; (800afd4 <xTaskIncrementTick+0x15c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00c      	beq.n	800aec4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	b672      	cpsid	i
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	b662      	cpsie	i
 800aebe:	603b      	str	r3, [r7, #0]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <xTaskIncrementTick+0x4a>
 800aec4:	4b43      	ldr	r3, [pc, #268]	; (800afd4 <xTaskIncrementTick+0x15c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
 800aeca:	4b43      	ldr	r3, [pc, #268]	; (800afd8 <xTaskIncrementTick+0x160>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a41      	ldr	r2, [pc, #260]	; (800afd4 <xTaskIncrementTick+0x15c>)
 800aed0:	6013      	str	r3, [r2, #0]
 800aed2:	4a41      	ldr	r2, [pc, #260]	; (800afd8 <xTaskIncrementTick+0x160>)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	4b40      	ldr	r3, [pc, #256]	; (800afdc <xTaskIncrementTick+0x164>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3301      	adds	r3, #1
 800aede:	4a3f      	ldr	r2, [pc, #252]	; (800afdc <xTaskIncrementTick+0x164>)
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	f000 faed 	bl	800b4c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aee6:	4b3e      	ldr	r3, [pc, #248]	; (800afe0 <xTaskIncrementTick+0x168>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	693a      	ldr	r2, [r7, #16]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d349      	bcc.n	800af84 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef0:	4b38      	ldr	r3, [pc, #224]	; (800afd4 <xTaskIncrementTick+0x15c>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aefa:	4b39      	ldr	r3, [pc, #228]	; (800afe0 <xTaskIncrementTick+0x168>)
 800aefc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af00:	601a      	str	r2, [r3, #0]
					break;
 800af02:	e03f      	b.n	800af84 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af04:	4b33      	ldr	r3, [pc, #204]	; (800afd4 <xTaskIncrementTick+0x15c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af14:	693a      	ldr	r2, [r7, #16]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d203      	bcs.n	800af24 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af1c:	4a30      	ldr	r2, [pc, #192]	; (800afe0 <xTaskIncrementTick+0x168>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af22:	e02f      	b.n	800af84 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	3304      	adds	r3, #4
 800af28:	4618      	mov	r0, r3
 800af2a:	f7fe faf1 	bl	8009510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3318      	adds	r3, #24
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fae8 	bl	8009510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af44:	4b27      	ldr	r3, [pc, #156]	; (800afe4 <xTaskIncrementTick+0x16c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d903      	bls.n	800af54 <xTaskIncrementTick+0xdc>
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	4a24      	ldr	r2, [pc, #144]	; (800afe4 <xTaskIncrementTick+0x16c>)
 800af52:	6013      	str	r3, [r2, #0]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af58:	4613      	mov	r3, r2
 800af5a:	009b      	lsls	r3, r3, #2
 800af5c:	4413      	add	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4a21      	ldr	r2, [pc, #132]	; (800afe8 <xTaskIncrementTick+0x170>)
 800af62:	441a      	add	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	3304      	adds	r3, #4
 800af68:	4619      	mov	r1, r3
 800af6a:	4610      	mov	r0, r2
 800af6c:	f7fe fa73 	bl	8009456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af74:	4b1d      	ldr	r3, [pc, #116]	; (800afec <xTaskIncrementTick+0x174>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d3b8      	bcc.n	800aef0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800af7e:	2301      	movs	r3, #1
 800af80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af82:	e7b5      	b.n	800aef0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if(pxCurrentTCB != NULL){
 800af84:	4b19      	ldr	r3, [pc, #100]	; (800afec <xTaskIncrementTick+0x174>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d013      	beq.n	800afb4 <xTaskIncrementTick+0x13c>
				if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800af8c:	4b17      	ldr	r3, [pc, #92]	; (800afec <xTaskIncrementTick+0x174>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af92:	4915      	ldr	r1, [pc, #84]	; (800afe8 <xTaskIncrementTick+0x170>)
 800af94:	4613      	mov	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	4413      	add	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	440b      	add	r3, r1
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d907      	bls.n	800afb4 <xTaskIncrementTick+0x13c>
				{
					xSwitchRequired = pdTRUE;
 800afa4:	2301      	movs	r3, #1
 800afa6:	617b      	str	r3, [r7, #20]
 800afa8:	e004      	b.n	800afb4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <xTaskIncrementTick+0x178>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3301      	adds	r3, #1
 800afb0:	4a0f      	ldr	r2, [pc, #60]	; (800aff0 <xTaskIncrementTick+0x178>)
 800afb2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800afb4:	4b0f      	ldr	r3, [pc, #60]	; (800aff4 <xTaskIncrementTick+0x17c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d001      	beq.n	800afc0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800afbc:	2301      	movs	r3, #1
 800afbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800afc0:	697b      	ldr	r3, [r7, #20]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20047310 	.word	0x20047310
 800afd0:	200472ec 	.word	0x200472ec
 800afd4:	200472a0 	.word	0x200472a0
 800afd8:	200472a4 	.word	0x200472a4
 800afdc:	20047300 	.word	0x20047300
 800afe0:	20047308 	.word	0x20047308
 800afe4:	200472f0 	.word	0x200472f0
 800afe8:	20046e18 	.word	0x20046e18
 800afec:	20046e14 	.word	0x20046e14
 800aff0:	200472f8 	.word	0x200472f8
 800aff4:	200472fc 	.word	0x200472fc

0800aff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800affe:	4b2b      	ldr	r3, [pc, #172]	; (800b0ac <vTaskSwitchContext+0xb4>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b006:	4b2a      	ldr	r3, [pc, #168]	; (800b0b0 <vTaskSwitchContext+0xb8>)
 800b008:	2201      	movs	r2, #1
 800b00a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b00c:	e048      	b.n	800b0a0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b00e:	4b28      	ldr	r3, [pc, #160]	; (800b0b0 <vTaskSwitchContext+0xb8>)
 800b010:	2200      	movs	r2, #0
 800b012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b014:	4b27      	ldr	r3, [pc, #156]	; (800b0b4 <vTaskSwitchContext+0xbc>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60fb      	str	r3, [r7, #12]
 800b01a:	e012      	b.n	800b042 <vTaskSwitchContext+0x4a>
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10c      	bne.n	800b03c <vTaskSwitchContext+0x44>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	b672      	cpsid	i
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	b662      	cpsie	i
 800b036:	607b      	str	r3, [r7, #4]
}
 800b038:	bf00      	nop
 800b03a:	e7fe      	b.n	800b03a <vTaskSwitchContext+0x42>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	3b01      	subs	r3, #1
 800b040:	60fb      	str	r3, [r7, #12]
 800b042:	491d      	ldr	r1, [pc, #116]	; (800b0b8 <vTaskSwitchContext+0xc0>)
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	440b      	add	r3, r1
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0e2      	beq.n	800b01c <vTaskSwitchContext+0x24>
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4613      	mov	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	4a15      	ldr	r2, [pc, #84]	; (800b0b8 <vTaskSwitchContext+0xc0>)
 800b062:	4413      	add	r3, r2
 800b064:	60bb      	str	r3, [r7, #8]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	605a      	str	r2, [r3, #4]
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	3308      	adds	r3, #8
 800b078:	429a      	cmp	r2, r3
 800b07a:	d104      	bne.n	800b086 <vTaskSwitchContext+0x8e>
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	605a      	str	r2, [r3, #4]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	68db      	ldr	r3, [r3, #12]
 800b08c:	4a0b      	ldr	r2, [pc, #44]	; (800b0bc <vTaskSwitchContext+0xc4>)
 800b08e:	6013      	str	r3, [r2, #0]
 800b090:	4a08      	ldr	r2, [pc, #32]	; (800b0b4 <vTaskSwitchContext+0xbc>)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b096:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <vTaskSwitchContext+0xc4>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	3354      	adds	r3, #84	; 0x54
 800b09c:	4a08      	ldr	r2, [pc, #32]	; (800b0c0 <vTaskSwitchContext+0xc8>)
 800b09e:	6013      	str	r3, [r2, #0]
}
 800b0a0:	bf00      	nop
 800b0a2:	3714      	adds	r7, #20
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr
 800b0ac:	20047310 	.word	0x20047310
 800b0b0:	200472fc 	.word	0x200472fc
 800b0b4:	200472f0 	.word	0x200472f0
 800b0b8:	20046e18 	.word	0x20046e18
 800b0bc:	20046e14 	.word	0x20046e14
 800b0c0:	20001a5c 	.word	0x20001a5c

0800b0c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10c      	bne.n	800b0ee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	b672      	cpsid	i
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	b662      	cpsie	i
 800b0e8:	60fb      	str	r3, [r7, #12]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b0ee:	4b07      	ldr	r3, [pc, #28]	; (800b10c <vTaskPlaceOnEventList+0x48>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3318      	adds	r3, #24
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7fe f9d1 	bl	800949e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b0fc:	2101      	movs	r1, #1
 800b0fe:	6838      	ldr	r0, [r7, #0]
 800b100:	f000 fba0 	bl	800b844 <prvAddCurrentTaskToDelayedList>
}
 800b104:	bf00      	nop
 800b106:	3710      	adds	r7, #16
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}
 800b10c:	20046e14 	.word	0x20046e14

0800b110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d10c      	bne.n	800b13c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b126:	b672      	cpsid	i
 800b128:	f383 8811 	msr	BASEPRI, r3
 800b12c:	f3bf 8f6f 	isb	sy
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	b662      	cpsie	i
 800b136:	617b      	str	r3, [r7, #20]
}
 800b138:	bf00      	nop
 800b13a:	e7fe      	b.n	800b13a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b13c:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <vTaskPlaceOnEventListRestricted+0x58>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3318      	adds	r3, #24
 800b142:	4619      	mov	r1, r3
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	f7fe f986 	bl	8009456 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b154:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b156:	6879      	ldr	r1, [r7, #4]
 800b158:	68b8      	ldr	r0, [r7, #8]
 800b15a:	f000 fb73 	bl	800b844 <prvAddCurrentTaskToDelayedList>
	}
 800b15e:	bf00      	nop
 800b160:	3718      	adds	r7, #24
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}
 800b166:	bf00      	nop
 800b168:	20046e14 	.word	0x20046e14

0800b16c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d10c      	bne.n	800b19c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b186:	b672      	cpsid	i
 800b188:	f383 8811 	msr	BASEPRI, r3
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f3bf 8f4f 	dsb	sy
 800b194:	b662      	cpsie	i
 800b196:	60fb      	str	r3, [r7, #12]
}
 800b198:	bf00      	nop
 800b19a:	e7fe      	b.n	800b19a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	3318      	adds	r3, #24
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7fe f9b5 	bl	8009510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1a6:	4b1e      	ldr	r3, [pc, #120]	; (800b220 <xTaskRemoveFromEventList+0xb4>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d11d      	bne.n	800b1ea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe f9ac 	bl	8009510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1bc:	4b19      	ldr	r3, [pc, #100]	; (800b224 <xTaskRemoveFromEventList+0xb8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d903      	bls.n	800b1cc <xTaskRemoveFromEventList+0x60>
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	4a16      	ldr	r2, [pc, #88]	; (800b224 <xTaskRemoveFromEventList+0xb8>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d0:	4613      	mov	r3, r2
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4a13      	ldr	r2, [pc, #76]	; (800b228 <xTaskRemoveFromEventList+0xbc>)
 800b1da:	441a      	add	r2, r3
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f7fe f937 	bl	8009456 <vListInsertEnd>
 800b1e8:	e005      	b.n	800b1f6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	3318      	adds	r3, #24
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	480e      	ldr	r0, [pc, #56]	; (800b22c <xTaskRemoveFromEventList+0xc0>)
 800b1f2:	f7fe f930 	bl	8009456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fa:	4b0d      	ldr	r3, [pc, #52]	; (800b230 <xTaskRemoveFromEventList+0xc4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b200:	429a      	cmp	r2, r3
 800b202:	d905      	bls.n	800b210 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b204:	2301      	movs	r3, #1
 800b206:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b208:	4b0a      	ldr	r3, [pc, #40]	; (800b234 <xTaskRemoveFromEventList+0xc8>)
 800b20a:	2201      	movs	r2, #1
 800b20c:	601a      	str	r2, [r3, #0]
 800b20e:	e001      	b.n	800b214 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b210:	2300      	movs	r3, #0
 800b212:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b214:	697b      	ldr	r3, [r7, #20]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20047310 	.word	0x20047310
 800b224:	200472f0 	.word	0x200472f0
 800b228:	20046e18 	.word	0x20046e18
 800b22c:	200472a8 	.word	0x200472a8
 800b230:	20046e14 	.word	0x20046e14
 800b234:	200472fc 	.word	0x200472fc

0800b238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b240:	4b06      	ldr	r3, [pc, #24]	; (800b25c <vTaskInternalSetTimeOutState+0x24>)
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b248:	4b05      	ldr	r3, [pc, #20]	; (800b260 <vTaskInternalSetTimeOutState+0x28>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	605a      	str	r2, [r3, #4]
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	20047300 	.word	0x20047300
 800b260:	200472ec 	.word	0x200472ec

0800b264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b088      	sub	sp, #32
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d10c      	bne.n	800b28e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	b672      	cpsid	i
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	b662      	cpsie	i
 800b288:	613b      	str	r3, [r7, #16]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10c      	bne.n	800b2ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	b672      	cpsid	i
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	b662      	cpsie	i
 800b2a8:	60fb      	str	r3, [r7, #12]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b2ae:	f000 ff85 	bl	800c1bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2b2:	4b1d      	ldr	r3, [pc, #116]	; (800b328 <xTaskCheckForTimeOut+0xc4>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2ca:	d102      	bne.n	800b2d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	61fb      	str	r3, [r7, #28]
 800b2d0:	e023      	b.n	800b31a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b15      	ldr	r3, [pc, #84]	; (800b32c <xTaskCheckForTimeOut+0xc8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d007      	beq.n	800b2ee <xTaskCheckForTimeOut+0x8a>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d302      	bcc.n	800b2ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	e015      	b.n	800b31a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d20b      	bcs.n	800b310 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	1ad2      	subs	r2, r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f7ff ff97 	bl	800b238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b30a:	2300      	movs	r3, #0
 800b30c:	61fb      	str	r3, [r7, #28]
 800b30e:	e004      	b.n	800b31a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b316:	2301      	movs	r3, #1
 800b318:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b31a:	f000 ff83 	bl	800c224 <vPortExitCritical>

	return xReturn;
 800b31e:	69fb      	ldr	r3, [r7, #28]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3720      	adds	r7, #32
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	200472ec 	.word	0x200472ec
 800b32c:	20047300 	.word	0x20047300

0800b330 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b334:	4b03      	ldr	r3, [pc, #12]	; (800b344 <vTaskMissedYield+0x14>)
 800b336:	2201      	movs	r2, #1
 800b338:	601a      	str	r2, [r3, #0]
}
 800b33a:	bf00      	nop
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	200472fc 	.word	0x200472fc

0800b348 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b350:	f000 f852 	bl	800b3f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b354:	4b06      	ldr	r3, [pc, #24]	; (800b370 <prvIdleTask+0x28>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d9f9      	bls.n	800b350 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b35c:	4b05      	ldr	r3, [pc, #20]	; (800b374 <prvIdleTask+0x2c>)
 800b35e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	f3bf 8f4f 	dsb	sy
 800b368:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b36c:	e7f0      	b.n	800b350 <prvIdleTask+0x8>
 800b36e:	bf00      	nop
 800b370:	20046e18 	.word	0x20046e18
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b37e:	2300      	movs	r3, #0
 800b380:	607b      	str	r3, [r7, #4]
 800b382:	e00c      	b.n	800b39e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	4613      	mov	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4a12      	ldr	r2, [pc, #72]	; (800b3d8 <prvInitialiseTaskLists+0x60>)
 800b390:	4413      	add	r3, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe f832 	bl	80093fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3301      	adds	r3, #1
 800b39c:	607b      	str	r3, [r7, #4]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2b37      	cmp	r3, #55	; 0x37
 800b3a2:	d9ef      	bls.n	800b384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3a4:	480d      	ldr	r0, [pc, #52]	; (800b3dc <prvInitialiseTaskLists+0x64>)
 800b3a6:	f7fe f829 	bl	80093fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3aa:	480d      	ldr	r0, [pc, #52]	; (800b3e0 <prvInitialiseTaskLists+0x68>)
 800b3ac:	f7fe f826 	bl	80093fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3b0:	480c      	ldr	r0, [pc, #48]	; (800b3e4 <prvInitialiseTaskLists+0x6c>)
 800b3b2:	f7fe f823 	bl	80093fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3b6:	480c      	ldr	r0, [pc, #48]	; (800b3e8 <prvInitialiseTaskLists+0x70>)
 800b3b8:	f7fe f820 	bl	80093fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3bc:	480b      	ldr	r0, [pc, #44]	; (800b3ec <prvInitialiseTaskLists+0x74>)
 800b3be:	f7fe f81d 	bl	80093fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3c2:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <prvInitialiseTaskLists+0x78>)
 800b3c4:	4a05      	ldr	r2, [pc, #20]	; (800b3dc <prvInitialiseTaskLists+0x64>)
 800b3c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3c8:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <prvInitialiseTaskLists+0x7c>)
 800b3ca:	4a05      	ldr	r2, [pc, #20]	; (800b3e0 <prvInitialiseTaskLists+0x68>)
 800b3cc:	601a      	str	r2, [r3, #0]
}
 800b3ce:	bf00      	nop
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20046e18 	.word	0x20046e18
 800b3dc:	20047278 	.word	0x20047278
 800b3e0:	2004728c 	.word	0x2004728c
 800b3e4:	200472a8 	.word	0x200472a8
 800b3e8:	200472bc 	.word	0x200472bc
 800b3ec:	200472d4 	.word	0x200472d4
 800b3f0:	200472a0 	.word	0x200472a0
 800b3f4:	200472a4 	.word	0x200472a4

0800b3f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b3fe:	e019      	b.n	800b434 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b400:	f000 fedc 	bl	800c1bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b404:	4b10      	ldr	r3, [pc, #64]	; (800b448 <prvCheckTasksWaitingTermination+0x50>)
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3304      	adds	r3, #4
 800b410:	4618      	mov	r0, r3
 800b412:	f7fe f87d 	bl	8009510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b416:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <prvCheckTasksWaitingTermination+0x54>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	3b01      	subs	r3, #1
 800b41c:	4a0b      	ldr	r2, [pc, #44]	; (800b44c <prvCheckTasksWaitingTermination+0x54>)
 800b41e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b420:	4b0b      	ldr	r3, [pc, #44]	; (800b450 <prvCheckTasksWaitingTermination+0x58>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3b01      	subs	r3, #1
 800b426:	4a0a      	ldr	r2, [pc, #40]	; (800b450 <prvCheckTasksWaitingTermination+0x58>)
 800b428:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b42a:	f000 fefb 	bl	800c224 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f810 	bl	800b454 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <prvCheckTasksWaitingTermination+0x58>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1e1      	bne.n	800b400 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b43c:	bf00      	nop
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200472bc 	.word	0x200472bc
 800b44c:	200472e8 	.word	0x200472e8
 800b450:	200472d0 	.word	0x200472d0

0800b454 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	3354      	adds	r3, #84	; 0x54
 800b460:	4618      	mov	r0, r3
 800b462:	f00e fd53 	bl	8019f0c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d108      	bne.n	800b482 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b474:	4618      	mov	r0, r3
 800b476:	f001 f897 	bl	800c5a8 <vPortFree>
				vPortFree( pxTCB );
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 f894 	bl	800c5a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b480:	e01a      	b.n	800b4b8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d103      	bne.n	800b494 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f001 f88b 	bl	800c5a8 <vPortFree>
	}
 800b492:	e011      	b.n	800b4b8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d00c      	beq.n	800b4b8 <prvDeleteTCB+0x64>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a2:	b672      	cpsid	i
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	b662      	cpsie	i
 800b4b2:	60fb      	str	r3, [r7, #12]
}
 800b4b4:	bf00      	nop
 800b4b6:	e7fe      	b.n	800b4b6 <prvDeleteTCB+0x62>
	}
 800b4b8:	bf00      	nop
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4c6:	4b0c      	ldr	r3, [pc, #48]	; (800b4f8 <prvResetNextTaskUnblockTime+0x38>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d104      	bne.n	800b4da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4d0:	4b0a      	ldr	r3, [pc, #40]	; (800b4fc <prvResetNextTaskUnblockTime+0x3c>)
 800b4d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4d8:	e008      	b.n	800b4ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <prvResetNextTaskUnblockTime+0x38>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	68db      	ldr	r3, [r3, #12]
 800b4e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4a04      	ldr	r2, [pc, #16]	; (800b4fc <prvResetNextTaskUnblockTime+0x3c>)
 800b4ea:	6013      	str	r3, [r2, #0]
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr
 800b4f8:	200472a0 	.word	0x200472a0
 800b4fc:	20047308 	.word	0x20047308

0800b500 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b506:	4b05      	ldr	r3, [pc, #20]	; (800b51c <xTaskGetCurrentTaskHandle+0x1c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b50c:	687b      	ldr	r3, [r7, #4]
	}
 800b50e:	4618      	mov	r0, r3
 800b510:	370c      	adds	r7, #12
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	20046e14 	.word	0x20046e14

0800b520 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b526:	4b0b      	ldr	r3, [pc, #44]	; (800b554 <xTaskGetSchedulerState+0x34>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d102      	bne.n	800b534 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b52e:	2301      	movs	r3, #1
 800b530:	607b      	str	r3, [r7, #4]
 800b532:	e008      	b.n	800b546 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b534:	4b08      	ldr	r3, [pc, #32]	; (800b558 <xTaskGetSchedulerState+0x38>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d102      	bne.n	800b542 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b53c:	2302      	movs	r3, #2
 800b53e:	607b      	str	r3, [r7, #4]
 800b540:	e001      	b.n	800b546 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b542:	2300      	movs	r3, #0
 800b544:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b546:	687b      	ldr	r3, [r7, #4]
	}
 800b548:	4618      	mov	r0, r3
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	200472f4 	.word	0x200472f4
 800b558:	20047310 	.word	0x20047310

0800b55c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b568:	2300      	movs	r3, #0
 800b56a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d051      	beq.n	800b616 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b576:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <xTaskPriorityInherit+0xc4>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d241      	bcs.n	800b604 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	699b      	ldr	r3, [r3, #24]
 800b584:	2b00      	cmp	r3, #0
 800b586:	db06      	blt.n	800b596 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b588:	4b25      	ldr	r3, [pc, #148]	; (800b620 <xTaskPriorityInherit+0xc4>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	6959      	ldr	r1, [r3, #20]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4a1f      	ldr	r2, [pc, #124]	; (800b624 <xTaskPriorityInherit+0xc8>)
 800b5a8:	4413      	add	r3, r2
 800b5aa:	4299      	cmp	r1, r3
 800b5ac:	d122      	bne.n	800b5f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	3304      	adds	r3, #4
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fd ffac 	bl	8009510 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5b8:	4b19      	ldr	r3, [pc, #100]	; (800b620 <xTaskPriorityInherit+0xc4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c6:	4b18      	ldr	r3, [pc, #96]	; (800b628 <xTaskPriorityInherit+0xcc>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d903      	bls.n	800b5d6 <xTaskPriorityInherit+0x7a>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d2:	4a15      	ldr	r2, [pc, #84]	; (800b628 <xTaskPriorityInherit+0xcc>)
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5da:	4613      	mov	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	009b      	lsls	r3, r3, #2
 800b5e2:	4a10      	ldr	r2, [pc, #64]	; (800b624 <xTaskPriorityInherit+0xc8>)
 800b5e4:	441a      	add	r2, r3
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	f7fd ff32 	bl	8009456 <vListInsertEnd>
 800b5f2:	e004      	b.n	800b5fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <xTaskPriorityInherit+0xc4>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b5fe:	2301      	movs	r3, #1
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	e008      	b.n	800b616 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b608:	4b05      	ldr	r3, [pc, #20]	; (800b620 <xTaskPriorityInherit+0xc4>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60e:	429a      	cmp	r2, r3
 800b610:	d201      	bcs.n	800b616 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b612:	2301      	movs	r3, #1
 800b614:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b616:	68fb      	ldr	r3, [r7, #12]
	}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20046e14 	.word	0x20046e14
 800b624:	20046e18 	.word	0x20046e18
 800b628:	200472f0 	.word	0x200472f0

0800b62c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b086      	sub	sp, #24
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b638:	2300      	movs	r3, #0
 800b63a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d05a      	beq.n	800b6f8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b642:	4b30      	ldr	r3, [pc, #192]	; (800b704 <xTaskPriorityDisinherit+0xd8>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	693a      	ldr	r2, [r7, #16]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d00c      	beq.n	800b666 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b650:	b672      	cpsid	i
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	b662      	cpsie	i
 800b660:	60fb      	str	r3, [r7, #12]
}
 800b662:	bf00      	nop
 800b664:	e7fe      	b.n	800b664 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d10c      	bne.n	800b688 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b672:	b672      	cpsid	i
 800b674:	f383 8811 	msr	BASEPRI, r3
 800b678:	f3bf 8f6f 	isb	sy
 800b67c:	f3bf 8f4f 	dsb	sy
 800b680:	b662      	cpsie	i
 800b682:	60bb      	str	r3, [r7, #8]
}
 800b684:	bf00      	nop
 800b686:	e7fe      	b.n	800b686 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b68c:	1e5a      	subs	r2, r3, #1
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d02c      	beq.n	800b6f8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d128      	bne.n	800b6f8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fd ff30 	bl	8009510 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	; (800b708 <xTaskPriorityDisinherit+0xdc>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d903      	bls.n	800b6d8 <xTaskPriorityDisinherit+0xac>
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	4a0c      	ldr	r2, [pc, #48]	; (800b708 <xTaskPriorityDisinherit+0xdc>)
 800b6d6:	6013      	str	r3, [r2, #0]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6dc:	4613      	mov	r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4a09      	ldr	r2, [pc, #36]	; (800b70c <xTaskPriorityDisinherit+0xe0>)
 800b6e6:	441a      	add	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	f7fd feb1 	bl	8009456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6f8:	697b      	ldr	r3, [r7, #20]
	}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3718      	adds	r7, #24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20046e14 	.word	0x20046e14
 800b708:	200472f0 	.word	0x200472f0
 800b70c:	20046e18 	.word	0x20046e18

0800b710 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d06e      	beq.n	800b806 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d10c      	bne.n	800b74a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b734:	b672      	cpsid	i
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	b662      	cpsie	i
 800b744:	60fb      	str	r3, [r7, #12]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74e:	683a      	ldr	r2, [r7, #0]
 800b750:	429a      	cmp	r2, r3
 800b752:	d902      	bls.n	800b75a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	61fb      	str	r3, [r7, #28]
 800b758:	e002      	b.n	800b760 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b75e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	69fa      	ldr	r2, [r7, #28]
 800b766:	429a      	cmp	r2, r3
 800b768:	d04d      	beq.n	800b806 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b76e:	697a      	ldr	r2, [r7, #20]
 800b770:	429a      	cmp	r2, r3
 800b772:	d148      	bne.n	800b806 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b774:	4b26      	ldr	r3, [pc, #152]	; (800b810 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d10c      	bne.n	800b798 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	b672      	cpsid	i
 800b784:	f383 8811 	msr	BASEPRI, r3
 800b788:	f3bf 8f6f 	isb	sy
 800b78c:	f3bf 8f4f 	dsb	sy
 800b790:	b662      	cpsie	i
 800b792:	60bb      	str	r3, [r7, #8]
}
 800b794:	bf00      	nop
 800b796:	e7fe      	b.n	800b796 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	69fa      	ldr	r2, [r7, #28]
 800b7a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db04      	blt.n	800b7b6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	6959      	ldr	r1, [r3, #20]
 800b7ba:	693a      	ldr	r2, [r7, #16]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	4a13      	ldr	r2, [pc, #76]	; (800b814 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b7c6:	4413      	add	r3, r2
 800b7c8:	4299      	cmp	r1, r3
 800b7ca:	d11c      	bne.n	800b806 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	3304      	adds	r3, #4
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fd fe9d 	bl	8009510 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7da:	4b0f      	ldr	r3, [pc, #60]	; (800b818 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d903      	bls.n	800b7ea <vTaskPriorityDisinheritAfterTimeout+0xda>
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e6:	4a0c      	ldr	r2, [pc, #48]	; (800b818 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7ee:	4613      	mov	r3, r2
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4a07      	ldr	r2, [pc, #28]	; (800b814 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b7f8:	441a      	add	r2, r3
 800b7fa:	69bb      	ldr	r3, [r7, #24]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	4619      	mov	r1, r3
 800b800:	4610      	mov	r0, r2
 800b802:	f7fd fe28 	bl	8009456 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b806:	bf00      	nop
 800b808:	3720      	adds	r7, #32
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20046e14 	.word	0x20046e14
 800b814:	20046e18 	.word	0x20046e18
 800b818:	200472f0 	.word	0x200472f0

0800b81c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b820:	4b07      	ldr	r3, [pc, #28]	; (800b840 <pvTaskIncrementMutexHeldCount+0x24>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d004      	beq.n	800b832 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b828:	4b05      	ldr	r3, [pc, #20]	; (800b840 <pvTaskIncrementMutexHeldCount+0x24>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b82e:	3201      	adds	r2, #1
 800b830:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b832:	4b03      	ldr	r3, [pc, #12]	; (800b840 <pvTaskIncrementMutexHeldCount+0x24>)
 800b834:	681b      	ldr	r3, [r3, #0]
	}
 800b836:	4618      	mov	r0, r3
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	20046e14 	.word	0x20046e14

0800b844 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b84e:	4b21      	ldr	r3, [pc, #132]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b854:	4b20      	ldr	r3, [pc, #128]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fd fe58 	bl	8009510 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b866:	d10a      	bne.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b86e:	4b1a      	ldr	r3, [pc, #104]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3304      	adds	r3, #4
 800b874:	4619      	mov	r1, r3
 800b876:	4819      	ldr	r0, [pc, #100]	; (800b8dc <prvAddCurrentTaskToDelayedList+0x98>)
 800b878:	f7fd fded 	bl	8009456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b87c:	e026      	b.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b886:	4b14      	ldr	r3, [pc, #80]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	429a      	cmp	r2, r3
 800b894:	d209      	bcs.n	800b8aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b896:	4b12      	ldr	r3, [pc, #72]	; (800b8e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b0f      	ldr	r3, [pc, #60]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fd fdfb 	bl	800949e <vListInsert>
}
 800b8a8:	e010      	b.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8aa:	4b0e      	ldr	r3, [pc, #56]	; (800b8e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	4b0a      	ldr	r3, [pc, #40]	; (800b8d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4610      	mov	r0, r2
 800b8b8:	f7fd fdf1 	bl	800949e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d202      	bcs.n	800b8cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8c6:	4a08      	ldr	r2, [pc, #32]	; (800b8e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	6013      	str	r3, [r2, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	200472ec 	.word	0x200472ec
 800b8d8:	20046e14 	.word	0x20046e14
 800b8dc:	200472d4 	.word	0x200472d4
 800b8e0:	200472a4 	.word	0x200472a4
 800b8e4:	200472a0 	.word	0x200472a0
 800b8e8:	20047308 	.word	0x20047308

0800b8ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	; 0x28
 800b8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8f6:	f000 fb15 	bl	800bf24 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8fa:	4b1d      	ldr	r3, [pc, #116]	; (800b970 <xTimerCreateTimerTask+0x84>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d021      	beq.n	800b946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b906:	2300      	movs	r3, #0
 800b908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b90a:	1d3a      	adds	r2, r7, #4
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	f107 030c 	add.w	r3, r7, #12
 800b914:	4618      	mov	r0, r3
 800b916:	f7fd fd57 	bl	80093c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	68fa      	ldr	r2, [r7, #12]
 800b920:	9202      	str	r2, [sp, #8]
 800b922:	9301      	str	r3, [sp, #4]
 800b924:	2302      	movs	r3, #2
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	2300      	movs	r3, #0
 800b92a:	460a      	mov	r2, r1
 800b92c:	4911      	ldr	r1, [pc, #68]	; (800b974 <xTimerCreateTimerTask+0x88>)
 800b92e:	4812      	ldr	r0, [pc, #72]	; (800b978 <xTimerCreateTimerTask+0x8c>)
 800b930:	f7fe ff68 	bl	800a804 <xTaskCreateStatic>
 800b934:	4603      	mov	r3, r0
 800b936:	4a11      	ldr	r2, [pc, #68]	; (800b97c <xTimerCreateTimerTask+0x90>)
 800b938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b93a:	4b10      	ldr	r3, [pc, #64]	; (800b97c <xTimerCreateTimerTask+0x90>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b942:	2301      	movs	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10c      	bne.n	800b966 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b950:	b672      	cpsid	i
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	b662      	cpsie	i
 800b960:	613b      	str	r3, [r7, #16]
}
 800b962:	bf00      	nop
 800b964:	e7fe      	b.n	800b964 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b966:	697b      	ldr	r3, [r7, #20]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	20047344 	.word	0x20047344
 800b974:	0801ad4c 	.word	0x0801ad4c
 800b978:	0800babd 	.word	0x0800babd
 800b97c:	20047348 	.word	0x20047348

0800b980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b08a      	sub	sp, #40	; 0x28
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
 800b98c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b98e:	2300      	movs	r3, #0
 800b990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10c      	bne.n	800b9b2 <xTimerGenericCommand+0x32>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	b672      	cpsid	i
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	b662      	cpsie	i
 800b9ac:	623b      	str	r3, [r7, #32]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <xTimerGenericCommand+0x9c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d02a      	beq.n	800ba10 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b05      	cmp	r3, #5
 800b9ca:	dc18      	bgt.n	800b9fe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9cc:	f7ff fda8 	bl	800b520 <xTaskGetSchedulerState>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d109      	bne.n	800b9ea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9d6:	4b11      	ldr	r3, [pc, #68]	; (800ba1c <xTimerGenericCommand+0x9c>)
 800b9d8:	6818      	ldr	r0, [r3, #0]
 800b9da:	f107 0110 	add.w	r1, r7, #16
 800b9de:	2300      	movs	r3, #0
 800b9e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9e2:	f7fe f83d 	bl	8009a60 <xQueueGenericSend>
 800b9e6:	6278      	str	r0, [r7, #36]	; 0x24
 800b9e8:	e012      	b.n	800ba10 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9ea:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <xTimerGenericCommand+0x9c>)
 800b9ec:	6818      	ldr	r0, [r3, #0]
 800b9ee:	f107 0110 	add.w	r1, r7, #16
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f7fe f833 	bl	8009a60 <xQueueGenericSend>
 800b9fa:	6278      	str	r0, [r7, #36]	; 0x24
 800b9fc:	e008      	b.n	800ba10 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9fe:	4b07      	ldr	r3, [pc, #28]	; (800ba1c <xTimerGenericCommand+0x9c>)
 800ba00:	6818      	ldr	r0, [r3, #0]
 800ba02:	f107 0110 	add.w	r1, r7, #16
 800ba06:	2300      	movs	r3, #0
 800ba08:	683a      	ldr	r2, [r7, #0]
 800ba0a:	f7fe f92f 	bl	8009c6c <xQueueGenericSendFromISR>
 800ba0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3728      	adds	r7, #40	; 0x28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20047344 	.word	0x20047344

0800ba20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b088      	sub	sp, #32
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba2a:	4b23      	ldr	r3, [pc, #140]	; (800bab8 <prvProcessExpiredTimer+0x98>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fd fd69 	bl	8009510 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba44:	f003 0304 	and.w	r3, r3, #4
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d024      	beq.n	800ba96 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	699a      	ldr	r2, [r3, #24]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	18d1      	adds	r1, r2, r3
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	6978      	ldr	r0, [r7, #20]
 800ba5a:	f000 f8d3 	bl	800bc04 <prvInsertTimerInActiveList>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d021      	beq.n	800baa8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba64:	2300      	movs	r3, #0
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6978      	ldr	r0, [r7, #20]
 800ba70:	f7ff ff86 	bl	800b980 <xTimerGenericCommand>
 800ba74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d115      	bne.n	800baa8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	60fb      	str	r3, [r7, #12]
}
 800ba92:	bf00      	nop
 800ba94:	e7fe      	b.n	800ba94 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba9c:	f023 0301 	bic.w	r3, r3, #1
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	6a1b      	ldr	r3, [r3, #32]
 800baac:	6978      	ldr	r0, [r7, #20]
 800baae:	4798      	blx	r3
}
 800bab0:	bf00      	nop
 800bab2:	3718      	adds	r7, #24
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	2004733c 	.word	0x2004733c

0800babc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bac4:	f107 0308 	add.w	r3, r7, #8
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 f857 	bl	800bb7c <prvGetNextExpireTime>
 800bace:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	4619      	mov	r1, r3
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 f803 	bl	800bae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bada:	f000 f8d5 	bl	800bc88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bade:	e7f1      	b.n	800bac4 <prvTimerTask+0x8>

0800bae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800baea:	f7ff f8f5 	bl	800acd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800baee:	f107 0308 	add.w	r3, r7, #8
 800baf2:	4618      	mov	r0, r3
 800baf4:	f000 f866 	bl	800bbc4 <prvSampleTimeNow>
 800baf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d130      	bne.n	800bb62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d10a      	bne.n	800bb1c <prvProcessTimerOrBlockTask+0x3c>
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d806      	bhi.n	800bb1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb0e:	f7ff f8f1 	bl	800acf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb12:	68f9      	ldr	r1, [r7, #12]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff ff83 	bl	800ba20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb1a:	e024      	b.n	800bb66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d008      	beq.n	800bb34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb22:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <prvProcessTimerOrBlockTask+0x90>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d101      	bne.n	800bb30 <prvProcessTimerOrBlockTask+0x50>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <prvProcessTimerOrBlockTask+0x52>
 800bb30:	2300      	movs	r3, #0
 800bb32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb34:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <prvProcessTimerOrBlockTask+0x94>)
 800bb36:	6818      	ldr	r0, [r3, #0]
 800bb38:	687a      	ldr	r2, [r7, #4]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	1ad3      	subs	r3, r2, r3
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	4619      	mov	r1, r3
 800bb42:	f7fe fe2b 	bl	800a79c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb46:	f7ff f8d5 	bl	800acf4 <xTaskResumeAll>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10a      	bne.n	800bb66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb50:	4b09      	ldr	r3, [pc, #36]	; (800bb78 <prvProcessTimerOrBlockTask+0x98>)
 800bb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb56:	601a      	str	r2, [r3, #0]
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	f3bf 8f6f 	isb	sy
}
 800bb60:	e001      	b.n	800bb66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb62:	f7ff f8c7 	bl	800acf4 <xTaskResumeAll>
}
 800bb66:	bf00      	nop
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20047340 	.word	0x20047340
 800bb74:	20047344 	.word	0x20047344
 800bb78:	e000ed04 	.word	0xe000ed04

0800bb7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb84:	4b0e      	ldr	r3, [pc, #56]	; (800bbc0 <prvGetNextExpireTime+0x44>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <prvGetNextExpireTime+0x16>
 800bb8e:	2201      	movs	r2, #1
 800bb90:	e000      	b.n	800bb94 <prvGetNextExpireTime+0x18>
 800bb92:	2200      	movs	r2, #0
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d105      	bne.n	800bbac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bba0:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <prvGetNextExpireTime+0x44>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	e001      	b.n	800bbb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbac:	2300      	movs	r3, #0
 800bbae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	2004733c 	.word	0x2004733c

0800bbc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbcc:	f7ff f932 	bl	800ae34 <xTaskGetTickCount>
 800bbd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbd2:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <prvSampleTimeNow+0x3c>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d205      	bcs.n	800bbe8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbdc:	f000 f93c 	bl	800be58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e002      	b.n	800bbee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbee:	4a04      	ldr	r2, [pc, #16]	; (800bc00 <prvSampleTimeNow+0x3c>)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	2004734c 	.word	0x2004734c

0800bc04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	607a      	str	r2, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc12:	2300      	movs	r3, #0
 800bc14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d812      	bhi.n	800bc50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	1ad2      	subs	r2, r2, r3
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	699b      	ldr	r3, [r3, #24]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d302      	bcc.n	800bc3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	617b      	str	r3, [r7, #20]
 800bc3c:	e01b      	b.n	800bc76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc3e:	4b10      	ldr	r3, [pc, #64]	; (800bc80 <prvInsertTimerInActiveList+0x7c>)
 800bc40:	681a      	ldr	r2, [r3, #0]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	3304      	adds	r3, #4
 800bc46:	4619      	mov	r1, r3
 800bc48:	4610      	mov	r0, r2
 800bc4a:	f7fd fc28 	bl	800949e <vListInsert>
 800bc4e:	e012      	b.n	800bc76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d206      	bcs.n	800bc66 <prvInsertTimerInActiveList+0x62>
 800bc58:	68ba      	ldr	r2, [r7, #8]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	d302      	bcc.n	800bc66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc60:	2301      	movs	r3, #1
 800bc62:	617b      	str	r3, [r7, #20]
 800bc64:	e007      	b.n	800bc76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc66:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <prvInsertTimerInActiveList+0x80>)
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4610      	mov	r0, r2
 800bc72:	f7fd fc14 	bl	800949e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc76:	697b      	ldr	r3, [r7, #20]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20047340 	.word	0x20047340
 800bc84:	2004733c 	.word	0x2004733c

0800bc88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b08e      	sub	sp, #56	; 0x38
 800bc8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc8e:	e0d0      	b.n	800be32 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	da1a      	bge.n	800bccc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc96:	1d3b      	adds	r3, r7, #4
 800bc98:	3304      	adds	r3, #4
 800bc9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10c      	bne.n	800bcbc <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	b672      	cpsid	i
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	b662      	cpsie	i
 800bcb6:	61fb      	str	r3, [r7, #28]
}
 800bcb8:	bf00      	nop
 800bcba:	e7fe      	b.n	800bcba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcc2:	6850      	ldr	r0, [r2, #4]
 800bcc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcc6:	6892      	ldr	r2, [r2, #8]
 800bcc8:	4611      	mov	r1, r2
 800bcca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f2c0 80ae 	blt.w	800be30 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d004      	beq.n	800bcea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce2:	3304      	adds	r3, #4
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7fd fc13 	bl	8009510 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcea:	463b      	mov	r3, r7
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7ff ff69 	bl	800bbc4 <prvSampleTimeNow>
 800bcf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b09      	cmp	r3, #9
 800bcf8:	f200 809b 	bhi.w	800be32 <prvProcessReceivedCommands+0x1aa>
 800bcfc:	a201      	add	r2, pc, #4	; (adr r2, 800bd04 <prvProcessReceivedCommands+0x7c>)
 800bcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd02:	bf00      	nop
 800bd04:	0800bd2d 	.word	0x0800bd2d
 800bd08:	0800bd2d 	.word	0x0800bd2d
 800bd0c:	0800bd2d 	.word	0x0800bd2d
 800bd10:	0800bda5 	.word	0x0800bda5
 800bd14:	0800bdb9 	.word	0x0800bdb9
 800bd18:	0800be07 	.word	0x0800be07
 800bd1c:	0800bd2d 	.word	0x0800bd2d
 800bd20:	0800bd2d 	.word	0x0800bd2d
 800bd24:	0800bda5 	.word	0x0800bda5
 800bd28:	0800bdb9 	.word	0x0800bdb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd32:	f043 0301 	orr.w	r3, r3, #1
 800bd36:	b2da      	uxtb	r2, r3
 800bd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd3e:	68ba      	ldr	r2, [r7, #8]
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	18d1      	adds	r1, r2, r3
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd4c:	f7ff ff5a 	bl	800bc04 <prvInsertTimerInActiveList>
 800bd50:	4603      	mov	r3, r0
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d06d      	beq.n	800be32 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd64:	f003 0304 	and.w	r3, r3, #4
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d062      	beq.n	800be32 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd70:	699b      	ldr	r3, [r3, #24]
 800bd72:	441a      	add	r2, r3
 800bd74:	2300      	movs	r3, #0
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd7e:	f7ff fdff 	bl	800b980 <xTimerGenericCommand>
 800bd82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d153      	bne.n	800be32 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	b672      	cpsid	i
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	b662      	cpsie	i
 800bd9e:	61bb      	str	r3, [r7, #24]
}
 800bda0:	bf00      	nop
 800bda2:	e7fe      	b.n	800bda2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdaa:	f023 0301 	bic.w	r3, r3, #1
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bdb6:	e03c      	b.n	800be32 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdbe:	f043 0301 	orr.w	r3, r3, #1
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd2:	699b      	ldr	r3, [r3, #24]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10c      	bne.n	800bdf2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	b672      	cpsid	i
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	b662      	cpsie	i
 800bdec:	617b      	str	r3, [r7, #20]
}
 800bdee:	bf00      	nop
 800bdf0:	e7fe      	b.n	800bdf0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	699a      	ldr	r2, [r3, #24]
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf8:	18d1      	adds	r1, r2, r3
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be00:	f7ff ff00 	bl	800bc04 <prvInsertTimerInActiveList>
					break;
 800be04:	e015      	b.n	800be32 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0c:	f003 0302 	and.w	r3, r3, #2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d103      	bne.n	800be1c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800be14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be16:	f000 fbc7 	bl	800c5a8 <vPortFree>
 800be1a:	e00a      	b.n	800be32 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be22:	f023 0301 	bic.w	r3, r3, #1
 800be26:	b2da      	uxtb	r2, r3
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be2e:	e000      	b.n	800be32 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be32:	4b08      	ldr	r3, [pc, #32]	; (800be54 <prvProcessReceivedCommands+0x1cc>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	1d39      	adds	r1, r7, #4
 800be38:	2200      	movs	r2, #0
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe f84c 	bl	8009ed8 <xQueueReceive>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	f47f af24 	bne.w	800bc90 <prvProcessReceivedCommands+0x8>
	}
}
 800be48:	bf00      	nop
 800be4a:	bf00      	nop
 800be4c:	3730      	adds	r7, #48	; 0x30
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20047344 	.word	0x20047344

0800be58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be5e:	e04a      	b.n	800bef6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be60:	4b2e      	ldr	r3, [pc, #184]	; (800bf1c <prvSwitchTimerLists+0xc4>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be6a:	4b2c      	ldr	r3, [pc, #176]	; (800bf1c <prvSwitchTimerLists+0xc4>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3304      	adds	r3, #4
 800be78:	4618      	mov	r0, r3
 800be7a:	f7fd fb49 	bl	8009510 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a1b      	ldr	r3, [r3, #32]
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be8c:	f003 0304 	and.w	r3, r3, #4
 800be90:	2b00      	cmp	r3, #0
 800be92:	d030      	beq.n	800bef6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	4413      	add	r3, r2
 800be9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d90e      	bls.n	800bec4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800beb2:	4b1a      	ldr	r3, [pc, #104]	; (800bf1c <prvSwitchTimerLists+0xc4>)
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3304      	adds	r3, #4
 800beba:	4619      	mov	r1, r3
 800bebc:	4610      	mov	r0, r2
 800bebe:	f7fd faee 	bl	800949e <vListInsert>
 800bec2:	e018      	b.n	800bef6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bec4:	2300      	movs	r3, #0
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	2300      	movs	r3, #0
 800beca:	693a      	ldr	r2, [r7, #16]
 800becc:	2100      	movs	r1, #0
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f7ff fd56 	bl	800b980 <xTimerGenericCommand>
 800bed4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10c      	bne.n	800bef6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	b672      	cpsid	i
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	b662      	cpsie	i
 800bef0:	603b      	str	r3, [r7, #0]
}
 800bef2:	bf00      	nop
 800bef4:	e7fe      	b.n	800bef4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bef6:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <prvSwitchTimerLists+0xc4>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1af      	bne.n	800be60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf00:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <prvSwitchTimerLists+0xc4>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf06:	4b06      	ldr	r3, [pc, #24]	; (800bf20 <prvSwitchTimerLists+0xc8>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a04      	ldr	r2, [pc, #16]	; (800bf1c <prvSwitchTimerLists+0xc4>)
 800bf0c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf0e:	4a04      	ldr	r2, [pc, #16]	; (800bf20 <prvSwitchTimerLists+0xc8>)
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	6013      	str	r3, [r2, #0]
}
 800bf14:	bf00      	nop
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	2004733c 	.word	0x2004733c
 800bf20:	20047340 	.word	0x20047340

0800bf24 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf2a:	f000 f947 	bl	800c1bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf2e:	4b15      	ldr	r3, [pc, #84]	; (800bf84 <prvCheckForValidListAndQueue+0x60>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d120      	bne.n	800bf78 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf36:	4814      	ldr	r0, [pc, #80]	; (800bf88 <prvCheckForValidListAndQueue+0x64>)
 800bf38:	f7fd fa60 	bl	80093fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf3c:	4813      	ldr	r0, [pc, #76]	; (800bf8c <prvCheckForValidListAndQueue+0x68>)
 800bf3e:	f7fd fa5d 	bl	80093fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf42:	4b13      	ldr	r3, [pc, #76]	; (800bf90 <prvCheckForValidListAndQueue+0x6c>)
 800bf44:	4a10      	ldr	r2, [pc, #64]	; (800bf88 <prvCheckForValidListAndQueue+0x64>)
 800bf46:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf48:	4b12      	ldr	r3, [pc, #72]	; (800bf94 <prvCheckForValidListAndQueue+0x70>)
 800bf4a:	4a10      	ldr	r2, [pc, #64]	; (800bf8c <prvCheckForValidListAndQueue+0x68>)
 800bf4c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf4e:	2300      	movs	r3, #0
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	4b11      	ldr	r3, [pc, #68]	; (800bf98 <prvCheckForValidListAndQueue+0x74>)
 800bf54:	4a11      	ldr	r2, [pc, #68]	; (800bf9c <prvCheckForValidListAndQueue+0x78>)
 800bf56:	2110      	movs	r1, #16
 800bf58:	200a      	movs	r0, #10
 800bf5a:	f7fd fb6d 	bl	8009638 <xQueueGenericCreateStatic>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	4a08      	ldr	r2, [pc, #32]	; (800bf84 <prvCheckForValidListAndQueue+0x60>)
 800bf62:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf64:	4b07      	ldr	r3, [pc, #28]	; (800bf84 <prvCheckForValidListAndQueue+0x60>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d005      	beq.n	800bf78 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf6c:	4b05      	ldr	r3, [pc, #20]	; (800bf84 <prvCheckForValidListAndQueue+0x60>)
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	490b      	ldr	r1, [pc, #44]	; (800bfa0 <prvCheckForValidListAndQueue+0x7c>)
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fbbe 	bl	800a6f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf78:	f000 f954 	bl	800c224 <vPortExitCritical>
}
 800bf7c:	bf00      	nop
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20047344 	.word	0x20047344
 800bf88:	20047314 	.word	0x20047314
 800bf8c:	20047328 	.word	0x20047328
 800bf90:	2004733c 	.word	0x2004733c
 800bf94:	20047340 	.word	0x20047340
 800bf98:	200473f0 	.word	0x200473f0
 800bf9c:	20047350 	.word	0x20047350
 800bfa0:	0801ad54 	.word	0x0801ad54

0800bfa4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3b04      	subs	r3, #4
 800bfb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bfbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	3b04      	subs	r3, #4
 800bfc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f023 0201 	bic.w	r2, r3, #1
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	3b04      	subs	r3, #4
 800bfd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfd4:	4a0c      	ldr	r2, [pc, #48]	; (800c008 <pxPortInitialiseStack+0x64>)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3b14      	subs	r3, #20
 800bfde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	3b04      	subs	r3, #4
 800bfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f06f 0202 	mvn.w	r2, #2
 800bff2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	3b20      	subs	r3, #32
 800bff8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bffa:	68fb      	ldr	r3, [r7, #12]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	0800c00d 	.word	0x0800c00d

0800c00c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c016:	4b14      	ldr	r3, [pc, #80]	; (800c068 <prvTaskExitError+0x5c>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c01e:	d00c      	beq.n	800c03a <prvTaskExitError+0x2e>
	__asm volatile
 800c020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c024:	b672      	cpsid	i
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	b662      	cpsie	i
 800c034:	60fb      	str	r3, [r7, #12]
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <prvTaskExitError+0x2c>
	__asm volatile
 800c03a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03e:	b672      	cpsid	i
 800c040:	f383 8811 	msr	BASEPRI, r3
 800c044:	f3bf 8f6f 	isb	sy
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	b662      	cpsie	i
 800c04e:	60bb      	str	r3, [r7, #8]
}
 800c050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c052:	bf00      	nop
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d0fc      	beq.n	800c054 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	3714      	adds	r7, #20
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr
 800c068:	20001a4c 	.word	0x20001a4c
 800c06c:	00000000 	.word	0x00000000

0800c070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c070:	4b07      	ldr	r3, [pc, #28]	; (800c090 <pxCurrentTCBConst2>)
 800c072:	6819      	ldr	r1, [r3, #0]
 800c074:	6808      	ldr	r0, [r1, #0]
 800c076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07a:	f380 8809 	msr	PSP, r0
 800c07e:	f3bf 8f6f 	isb	sy
 800c082:	f04f 0000 	mov.w	r0, #0
 800c086:	f380 8811 	msr	BASEPRI, r0
 800c08a:	4770      	bx	lr
 800c08c:	f3af 8000 	nop.w

0800c090 <pxCurrentTCBConst2>:
 800c090:	20046e14 	.word	0x20046e14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c094:	bf00      	nop
 800c096:	bf00      	nop

0800c098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c098:	4808      	ldr	r0, [pc, #32]	; (800c0bc <prvPortStartFirstTask+0x24>)
 800c09a:	6800      	ldr	r0, [r0, #0]
 800c09c:	6800      	ldr	r0, [r0, #0]
 800c09e:	f380 8808 	msr	MSP, r0
 800c0a2:	f04f 0000 	mov.w	r0, #0
 800c0a6:	f380 8814 	msr	CONTROL, r0
 800c0aa:	b662      	cpsie	i
 800c0ac:	b661      	cpsie	f
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	f3bf 8f6f 	isb	sy
 800c0b6:	df00      	svc	0
 800c0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ba:	bf00      	nop
 800c0bc:	e000ed08 	.word	0xe000ed08

0800c0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0c6:	4b37      	ldr	r3, [pc, #220]	; (800c1a4 <xPortStartScheduler+0xe4>)
 800c0c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	22ff      	movs	r2, #255	; 0xff
 800c0d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0e8:	b2da      	uxtb	r2, r3
 800c0ea:	4b2f      	ldr	r3, [pc, #188]	; (800c1a8 <xPortStartScheduler+0xe8>)
 800c0ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0ee:	4b2f      	ldr	r3, [pc, #188]	; (800c1ac <xPortStartScheduler+0xec>)
 800c0f0:	2207      	movs	r2, #7
 800c0f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0f4:	e009      	b.n	800c10a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c0f6:	4b2d      	ldr	r3, [pc, #180]	; (800c1ac <xPortStartScheduler+0xec>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	4a2b      	ldr	r2, [pc, #172]	; (800c1ac <xPortStartScheduler+0xec>)
 800c0fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	b2db      	uxtb	r3, r3
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	b2db      	uxtb	r3, r3
 800c108:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c10a:	78fb      	ldrb	r3, [r7, #3]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c112:	2b80      	cmp	r3, #128	; 0x80
 800c114:	d0ef      	beq.n	800c0f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c116:	4b25      	ldr	r3, [pc, #148]	; (800c1ac <xPortStartScheduler+0xec>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1c3 0307 	rsb	r3, r3, #7
 800c11e:	2b04      	cmp	r3, #4
 800c120:	d00c      	beq.n	800c13c <xPortStartScheduler+0x7c>
	__asm volatile
 800c122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c126:	b672      	cpsid	i
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	b662      	cpsie	i
 800c136:	60bb      	str	r3, [r7, #8]
}
 800c138:	bf00      	nop
 800c13a:	e7fe      	b.n	800c13a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c13c:	4b1b      	ldr	r3, [pc, #108]	; (800c1ac <xPortStartScheduler+0xec>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	021b      	lsls	r3, r3, #8
 800c142:	4a1a      	ldr	r2, [pc, #104]	; (800c1ac <xPortStartScheduler+0xec>)
 800c144:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c146:	4b19      	ldr	r3, [pc, #100]	; (800c1ac <xPortStartScheduler+0xec>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c14e:	4a17      	ldr	r2, [pc, #92]	; (800c1ac <xPortStartScheduler+0xec>)
 800c150:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	b2da      	uxtb	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c15a:	4b15      	ldr	r3, [pc, #84]	; (800c1b0 <xPortStartScheduler+0xf0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	4a14      	ldr	r2, [pc, #80]	; (800c1b0 <xPortStartScheduler+0xf0>)
 800c160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c164:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c166:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <xPortStartScheduler+0xf0>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a11      	ldr	r2, [pc, #68]	; (800c1b0 <xPortStartScheduler+0xf0>)
 800c16c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c170:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c172:	f000 f8dd 	bl	800c330 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c176:	4b0f      	ldr	r3, [pc, #60]	; (800c1b4 <xPortStartScheduler+0xf4>)
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c17c:	f000 f8fc 	bl	800c378 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c180:	4b0d      	ldr	r3, [pc, #52]	; (800c1b8 <xPortStartScheduler+0xf8>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a0c      	ldr	r2, [pc, #48]	; (800c1b8 <xPortStartScheduler+0xf8>)
 800c186:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c18a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c18c:	f7ff ff84 	bl	800c098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c190:	f7fe ff32 	bl	800aff8 <vTaskSwitchContext>
	prvTaskExitError();
 800c194:	f7ff ff3a 	bl	800c00c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3710      	adds	r7, #16
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	e000e400 	.word	0xe000e400
 800c1a8:	20047440 	.word	0x20047440
 800c1ac:	20047444 	.word	0x20047444
 800c1b0:	e000ed20 	.word	0xe000ed20
 800c1b4:	20001a4c 	.word	0x20001a4c
 800c1b8:	e000ef34 	.word	0xe000ef34

0800c1bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c6:	b672      	cpsid	i
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	b662      	cpsie	i
 800c1d6:	607b      	str	r3, [r7, #4]
}
 800c1d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1da:	4b10      	ldr	r3, [pc, #64]	; (800c21c <vPortEnterCritical+0x60>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	4a0e      	ldr	r2, [pc, #56]	; (800c21c <vPortEnterCritical+0x60>)
 800c1e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <vPortEnterCritical+0x60>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d111      	bne.n	800c210 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c1ec:	4b0c      	ldr	r3, [pc, #48]	; (800c220 <vPortEnterCritical+0x64>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00c      	beq.n	800c210 <vPortEnterCritical+0x54>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	b672      	cpsid	i
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	b662      	cpsie	i
 800c20a:	603b      	str	r3, [r7, #0]
}
 800c20c:	bf00      	nop
 800c20e:	e7fe      	b.n	800c20e <vPortEnterCritical+0x52>
	}
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	20001a4c 	.word	0x20001a4c
 800c220:	e000ed04 	.word	0xe000ed04

0800c224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c22a:	4b13      	ldr	r3, [pc, #76]	; (800c278 <vPortExitCritical+0x54>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10c      	bne.n	800c24c <vPortExitCritical+0x28>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	b672      	cpsid	i
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	b662      	cpsie	i
 800c246:	607b      	str	r3, [r7, #4]
}
 800c248:	bf00      	nop
 800c24a:	e7fe      	b.n	800c24a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <vPortExitCritical+0x54>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3b01      	subs	r3, #1
 800c252:	4a09      	ldr	r2, [pc, #36]	; (800c278 <vPortExitCritical+0x54>)
 800c254:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c256:	4b08      	ldr	r3, [pc, #32]	; (800c278 <vPortExitCritical+0x54>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d105      	bne.n	800c26a <vPortExitCritical+0x46>
 800c25e:	2300      	movs	r3, #0
 800c260:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	f383 8811 	msr	BASEPRI, r3
}
 800c268:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	20001a4c 	.word	0x20001a4c
 800c27c:	00000000 	.word	0x00000000

0800c280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c280:	f3ef 8009 	mrs	r0, PSP
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	4b15      	ldr	r3, [pc, #84]	; (800c2e0 <pxCurrentTCBConst>)
 800c28a:	681a      	ldr	r2, [r3, #0]
 800c28c:	f01e 0f10 	tst.w	lr, #16
 800c290:	bf08      	it	eq
 800c292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c29a:	6010      	str	r0, [r2, #0]
 800c29c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2a4:	b672      	cpsid	i
 800c2a6:	f380 8811 	msr	BASEPRI, r0
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	f3bf 8f6f 	isb	sy
 800c2b2:	b662      	cpsie	i
 800c2b4:	f7fe fea0 	bl	800aff8 <vTaskSwitchContext>
 800c2b8:	f04f 0000 	mov.w	r0, #0
 800c2bc:	f380 8811 	msr	BASEPRI, r0
 800c2c0:	bc09      	pop	{r0, r3}
 800c2c2:	6819      	ldr	r1, [r3, #0]
 800c2c4:	6808      	ldr	r0, [r1, #0]
 800c2c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ca:	f01e 0f10 	tst.w	lr, #16
 800c2ce:	bf08      	it	eq
 800c2d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2d4:	f380 8809 	msr	PSP, r0
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop

0800c2e0 <pxCurrentTCBConst>:
 800c2e0:	20046e14 	.word	0x20046e14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop

0800c2e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f2:	b672      	cpsid	i
 800c2f4:	f383 8811 	msr	BASEPRI, r3
 800c2f8:	f3bf 8f6f 	isb	sy
 800c2fc:	f3bf 8f4f 	dsb	sy
 800c300:	b662      	cpsie	i
 800c302:	607b      	str	r3, [r7, #4]
}
 800c304:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c306:	f7fe fdb7 	bl	800ae78 <xTaskIncrementTick>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d003      	beq.n	800c318 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c310:	4b06      	ldr	r3, [pc, #24]	; (800c32c <xPortSysTickHandler+0x44>)
 800c312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c316:	601a      	str	r2, [r3, #0]
 800c318:	2300      	movs	r3, #0
 800c31a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	f383 8811 	msr	BASEPRI, r3
}
 800c322:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c324:	bf00      	nop
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	e000ed04 	.word	0xe000ed04

0800c330 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c330:	b480      	push	{r7}
 800c332:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c334:	4b0b      	ldr	r3, [pc, #44]	; (800c364 <vPortSetupTimerInterrupt+0x34>)
 800c336:	2200      	movs	r2, #0
 800c338:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c33a:	4b0b      	ldr	r3, [pc, #44]	; (800c368 <vPortSetupTimerInterrupt+0x38>)
 800c33c:	2200      	movs	r2, #0
 800c33e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c340:	4b0a      	ldr	r3, [pc, #40]	; (800c36c <vPortSetupTimerInterrupt+0x3c>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a0a      	ldr	r2, [pc, #40]	; (800c370 <vPortSetupTimerInterrupt+0x40>)
 800c346:	fba2 2303 	umull	r2, r3, r2, r3
 800c34a:	099b      	lsrs	r3, r3, #6
 800c34c:	4a09      	ldr	r2, [pc, #36]	; (800c374 <vPortSetupTimerInterrupt+0x44>)
 800c34e:	3b01      	subs	r3, #1
 800c350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c352:	4b04      	ldr	r3, [pc, #16]	; (800c364 <vPortSetupTimerInterrupt+0x34>)
 800c354:	2207      	movs	r2, #7
 800c356:	601a      	str	r2, [r3, #0]
}
 800c358:	bf00      	nop
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	e000e010 	.word	0xe000e010
 800c368:	e000e018 	.word	0xe000e018
 800c36c:	20001a2c 	.word	0x20001a2c
 800c370:	10624dd3 	.word	0x10624dd3
 800c374:	e000e014 	.word	0xe000e014

0800c378 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c378:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c388 <vPortEnableVFP+0x10>
 800c37c:	6801      	ldr	r1, [r0, #0]
 800c37e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c382:	6001      	str	r1, [r0, #0]
 800c384:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c386:	bf00      	nop
 800c388:	e000ed88 	.word	0xe000ed88

0800c38c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c392:	f3ef 8305 	mrs	r3, IPSR
 800c396:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2b0f      	cmp	r3, #15
 800c39c:	d916      	bls.n	800c3cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c39e:	4a19      	ldr	r2, [pc, #100]	; (800c404 <vPortValidateInterruptPriority+0x78>)
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3a8:	4b17      	ldr	r3, [pc, #92]	; (800c408 <vPortValidateInterruptPriority+0x7c>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	7afa      	ldrb	r2, [r7, #11]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d20c      	bcs.n	800c3cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b6:	b672      	cpsid	i
 800c3b8:	f383 8811 	msr	BASEPRI, r3
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	f3bf 8f4f 	dsb	sy
 800c3c4:	b662      	cpsie	i
 800c3c6:	607b      	str	r3, [r7, #4]
}
 800c3c8:	bf00      	nop
 800c3ca:	e7fe      	b.n	800c3ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3cc:	4b0f      	ldr	r3, [pc, #60]	; (800c40c <vPortValidateInterruptPriority+0x80>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3d4:	4b0e      	ldr	r3, [pc, #56]	; (800c410 <vPortValidateInterruptPriority+0x84>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d90c      	bls.n	800c3f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	b672      	cpsid	i
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	b662      	cpsie	i
 800c3f0:	603b      	str	r3, [r7, #0]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <vPortValidateInterruptPriority+0x68>
	}
 800c3f6:	bf00      	nop
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	e000e3f0 	.word	0xe000e3f0
 800c408:	20047440 	.word	0x20047440
 800c40c:	e000ed0c 	.word	0xe000ed0c
 800c410:	20047444 	.word	0x20047444

0800c414 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b08a      	sub	sp, #40	; 0x28
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c41c:	2300      	movs	r3, #0
 800c41e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c420:	f7fe fc5a 	bl	800acd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c424:	4b5b      	ldr	r3, [pc, #364]	; (800c594 <pvPortMalloc+0x180>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d101      	bne.n	800c430 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c42c:	f000 f91a 	bl	800c664 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c430:	4b59      	ldr	r3, [pc, #356]	; (800c598 <pvPortMalloc+0x184>)
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4013      	ands	r3, r2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 8092 	bne.w	800c562 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d01f      	beq.n	800c484 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c444:	2208      	movs	r2, #8
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	4413      	add	r3, r2
 800c44a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f003 0307 	and.w	r3, r3, #7
 800c452:	2b00      	cmp	r3, #0
 800c454:	d016      	beq.n	800c484 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f023 0307 	bic.w	r3, r3, #7
 800c45c:	3308      	adds	r3, #8
 800c45e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00c      	beq.n	800c484 <pvPortMalloc+0x70>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	b672      	cpsid	i
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	b662      	cpsie	i
 800c47e:	617b      	str	r3, [r7, #20]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d06b      	beq.n	800c562 <pvPortMalloc+0x14e>
 800c48a:	4b44      	ldr	r3, [pc, #272]	; (800c59c <pvPortMalloc+0x188>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d866      	bhi.n	800c562 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c494:	4b42      	ldr	r3, [pc, #264]	; (800c5a0 <pvPortMalloc+0x18c>)
 800c496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c498:	4b41      	ldr	r3, [pc, #260]	; (800c5a0 <pvPortMalloc+0x18c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c49e:	e004      	b.n	800c4aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d903      	bls.n	800c4bc <pvPortMalloc+0xa8>
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1f1      	bne.n	800c4a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4bc:	4b35      	ldr	r3, [pc, #212]	; (800c594 <pvPortMalloc+0x180>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d04d      	beq.n	800c562 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	4413      	add	r3, r2
 800c4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	1ad2      	subs	r2, r2, r3
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d921      	bls.n	800c52c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00c      	beq.n	800c514 <pvPortMalloc+0x100>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	b672      	cpsid	i
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	b662      	cpsie	i
 800c50e:	613b      	str	r3, [r7, #16]
}
 800c510:	bf00      	nop
 800c512:	e7fe      	b.n	800c512 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c516:	685a      	ldr	r2, [r3, #4]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	1ad2      	subs	r2, r2, r3
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c526:	69b8      	ldr	r0, [r7, #24]
 800c528:	f000 f8fe 	bl	800c728 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c52c:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <pvPortMalloc+0x188>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	1ad3      	subs	r3, r2, r3
 800c536:	4a19      	ldr	r2, [pc, #100]	; (800c59c <pvPortMalloc+0x188>)
 800c538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c53a:	4b18      	ldr	r3, [pc, #96]	; (800c59c <pvPortMalloc+0x188>)
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	4b19      	ldr	r3, [pc, #100]	; (800c5a4 <pvPortMalloc+0x190>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	429a      	cmp	r2, r3
 800c544:	d203      	bcs.n	800c54e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c546:	4b15      	ldr	r3, [pc, #84]	; (800c59c <pvPortMalloc+0x188>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a16      	ldr	r2, [pc, #88]	; (800c5a4 <pvPortMalloc+0x190>)
 800c54c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c550:	685a      	ldr	r2, [r3, #4]
 800c552:	4b11      	ldr	r3, [pc, #68]	; (800c598 <pvPortMalloc+0x184>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	431a      	orrs	r2, r3
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	2200      	movs	r2, #0
 800c560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c562:	f7fe fbc7 	bl	800acf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	f003 0307 	and.w	r3, r3, #7
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d00c      	beq.n	800c58a <pvPortMalloc+0x176>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c574:	b672      	cpsid	i
 800c576:	f383 8811 	msr	BASEPRI, r3
 800c57a:	f3bf 8f6f 	isb	sy
 800c57e:	f3bf 8f4f 	dsb	sy
 800c582:	b662      	cpsie	i
 800c584:	60fb      	str	r3, [r7, #12]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <pvPortMalloc+0x174>
	return pvReturn;
 800c58a:	69fb      	ldr	r3, [r7, #28]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3728      	adds	r7, #40	; 0x28
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	2004b050 	.word	0x2004b050
 800c598:	2004b05c 	.word	0x2004b05c
 800c59c:	2004b054 	.word	0x2004b054
 800c5a0:	2004b048 	.word	0x2004b048
 800c5a4:	2004b058 	.word	0x2004b058

0800c5a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d04c      	beq.n	800c654 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5ba:	2308      	movs	r3, #8
 800c5bc:	425b      	negs	r3, r3
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	4b23      	ldr	r3, [pc, #140]	; (800c65c <vPortFree+0xb4>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10c      	bne.n	800c5f0 <vPortFree+0x48>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5da:	b672      	cpsid	i
 800c5dc:	f383 8811 	msr	BASEPRI, r3
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	f3bf 8f4f 	dsb	sy
 800c5e8:	b662      	cpsie	i
 800c5ea:	60fb      	str	r3, [r7, #12]
}
 800c5ec:	bf00      	nop
 800c5ee:	e7fe      	b.n	800c5ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00c      	beq.n	800c612 <vPortFree+0x6a>
	__asm volatile
 800c5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fc:	b672      	cpsid	i
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	b662      	cpsie	i
 800c60c:	60bb      	str	r3, [r7, #8]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	4b11      	ldr	r3, [pc, #68]	; (800c65c <vPortFree+0xb4>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4013      	ands	r3, r2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d019      	beq.n	800c654 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d115      	bne.n	800c654 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <vPortFree+0xb4>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	43db      	mvns	r3, r3
 800c632:	401a      	ands	r2, r3
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c638:	f7fe fb4e 	bl	800acd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	4b07      	ldr	r3, [pc, #28]	; (800c660 <vPortFree+0xb8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4413      	add	r3, r2
 800c646:	4a06      	ldr	r2, [pc, #24]	; (800c660 <vPortFree+0xb8>)
 800c648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c64a:	6938      	ldr	r0, [r7, #16]
 800c64c:	f000 f86c 	bl	800c728 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c650:	f7fe fb50 	bl	800acf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c654:	bf00      	nop
 800c656:	3718      	adds	r7, #24
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}
 800c65c:	2004b05c 	.word	0x2004b05c
 800c660:	2004b054 	.word	0x2004b054

0800c664 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c66a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c66e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c670:	4b27      	ldr	r3, [pc, #156]	; (800c710 <prvHeapInit+0xac>)
 800c672:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f003 0307 	and.w	r3, r3, #7
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d00c      	beq.n	800c698 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3307      	adds	r3, #7
 800c682:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f023 0307 	bic.w	r3, r3, #7
 800c68a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	4a1f      	ldr	r2, [pc, #124]	; (800c710 <prvHeapInit+0xac>)
 800c694:	4413      	add	r3, r2
 800c696:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c69c:	4a1d      	ldr	r2, [pc, #116]	; (800c714 <prvHeapInit+0xb0>)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6a2:	4b1c      	ldr	r3, [pc, #112]	; (800c714 <prvHeapInit+0xb0>)
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	1a9b      	subs	r3, r3, r2
 800c6b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f023 0307 	bic.w	r3, r3, #7
 800c6be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	4a15      	ldr	r2, [pc, #84]	; (800c718 <prvHeapInit+0xb4>)
 800c6c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6c6:	4b14      	ldr	r3, [pc, #80]	; (800c718 <prvHeapInit+0xb4>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6ce:	4b12      	ldr	r3, [pc, #72]	; (800c718 <prvHeapInit+0xb4>)
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	1ad2      	subs	r2, r2, r3
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <prvHeapInit+0xb4>)
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	4a0a      	ldr	r2, [pc, #40]	; (800c71c <prvHeapInit+0xb8>)
 800c6f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4a09      	ldr	r2, [pc, #36]	; (800c720 <prvHeapInit+0xbc>)
 800c6fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c6fc:	4b09      	ldr	r3, [pc, #36]	; (800c724 <prvHeapInit+0xc0>)
 800c6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c702:	601a      	str	r2, [r3, #0]
}
 800c704:	bf00      	nop
 800c706:	3714      	adds	r7, #20
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr
 800c710:	20047448 	.word	0x20047448
 800c714:	2004b048 	.word	0x2004b048
 800c718:	2004b050 	.word	0x2004b050
 800c71c:	2004b058 	.word	0x2004b058
 800c720:	2004b054 	.word	0x2004b054
 800c724:	2004b05c 	.word	0x2004b05c

0800c728 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c730:	4b28      	ldr	r3, [pc, #160]	; (800c7d4 <prvInsertBlockIntoFreeList+0xac>)
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	e002      	b.n	800c73c <prvInsertBlockIntoFreeList+0x14>
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	687a      	ldr	r2, [r7, #4]
 800c742:	429a      	cmp	r2, r3
 800c744:	d8f7      	bhi.n	800c736 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	4413      	add	r3, r2
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	429a      	cmp	r2, r3
 800c756:	d108      	bne.n	800c76a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	441a      	add	r2, r3
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	441a      	add	r2, r3
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d118      	bne.n	800c7b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	4b15      	ldr	r3, [pc, #84]	; (800c7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d00d      	beq.n	800c7a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685a      	ldr	r2, [r3, #4]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	441a      	add	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	681a      	ldr	r2, [r3, #0]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	601a      	str	r2, [r3, #0]
 800c7a4:	e008      	b.n	800c7b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7a6:	4b0c      	ldr	r3, [pc, #48]	; (800c7d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	e003      	b.n	800c7b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d002      	beq.n	800c7c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	2004b048 	.word	0x2004b048
 800c7d8:	2004b050 	.word	0x2004b050

0800c7dc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b084      	sub	sp, #16
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	330c      	adds	r3, #12
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	6839      	ldr	r1, [r7, #0]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f002 f929 	bl	800ea48 <tcpip_send_msg_wait_sem>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c7fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d103      	bne.n	800c80a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c808:	e001      	b.n	800c80e <netconn_apimsg+0x32>
  }
  return err;
 800c80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
	...

0800c818 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b08c      	sub	sp, #48	; 0x30
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	4603      	mov	r3, r0
 800c820:	603a      	str	r2, [r7, #0]
 800c822:	71fb      	strb	r3, [r7, #7]
 800c824:	460b      	mov	r3, r1
 800c826:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c828:	79fb      	ldrb	r3, [r7, #7]
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f001 f8d7 	bl	800d9e0 <netconn_alloc>
 800c832:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	2b00      	cmp	r3, #0
 800c838:	d054      	beq.n	800c8e4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c83a:	79bb      	ldrb	r3, [r7, #6]
 800c83c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c842:	f107 0308 	add.w	r3, r7, #8
 800c846:	4619      	mov	r1, r3
 800c848:	4829      	ldr	r0, [pc, #164]	; (800c8f0 <netconn_new_with_proto_and_callback+0xd8>)
 800c84a:	f7ff ffc7 	bl	800c7dc <netconn_apimsg>
 800c84e:	4603      	mov	r3, r0
 800c850:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c854:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d043      	beq.n	800c8e4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d005      	beq.n	800c870 <netconn_new_with_proto_and_callback+0x58>
 800c864:	4b23      	ldr	r3, [pc, #140]	; (800c8f4 <netconn_new_with_proto_and_callback+0xdc>)
 800c866:	22a3      	movs	r2, #163	; 0xa3
 800c868:	4923      	ldr	r1, [pc, #140]	; (800c8f8 <netconn_new_with_proto_and_callback+0xe0>)
 800c86a:	4824      	ldr	r0, [pc, #144]	; (800c8fc <netconn_new_with_proto_and_callback+0xe4>)
 800c86c:	f00d faea 	bl	8019e44 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	3310      	adds	r3, #16
 800c874:	4618      	mov	r0, r3
 800c876:	f00c ffe5 	bl	8019844 <sys_mbox_valid>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d105      	bne.n	800c88c <netconn_new_with_proto_and_callback+0x74>
 800c880:	4b1c      	ldr	r3, [pc, #112]	; (800c8f4 <netconn_new_with_proto_and_callback+0xdc>)
 800c882:	22a4      	movs	r2, #164	; 0xa4
 800c884:	491e      	ldr	r1, [pc, #120]	; (800c900 <netconn_new_with_proto_and_callback+0xe8>)
 800c886:	481d      	ldr	r0, [pc, #116]	; (800c8fc <netconn_new_with_proto_and_callback+0xe4>)
 800c888:	f00d fadc 	bl	8019e44 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	3314      	adds	r3, #20
 800c890:	4618      	mov	r0, r3
 800c892:	f00c ffd7 	bl	8019844 <sys_mbox_valid>
 800c896:	4603      	mov	r3, r0
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <netconn_new_with_proto_and_callback+0x90>
 800c89c:	4b15      	ldr	r3, [pc, #84]	; (800c8f4 <netconn_new_with_proto_and_callback+0xdc>)
 800c89e:	22a6      	movs	r2, #166	; 0xa6
 800c8a0:	4918      	ldr	r1, [pc, #96]	; (800c904 <netconn_new_with_proto_and_callback+0xec>)
 800c8a2:	4816      	ldr	r0, [pc, #88]	; (800c8fc <netconn_new_with_proto_and_callback+0xe4>)
 800c8a4:	f00d face 	bl	8019e44 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	330c      	adds	r3, #12
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f00d f857 	bl	8019960 <sys_sem_valid>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d105      	bne.n	800c8c4 <netconn_new_with_proto_and_callback+0xac>
 800c8b8:	4b0e      	ldr	r3, [pc, #56]	; (800c8f4 <netconn_new_with_proto_and_callback+0xdc>)
 800c8ba:	22a9      	movs	r2, #169	; 0xa9
 800c8bc:	4912      	ldr	r1, [pc, #72]	; (800c908 <netconn_new_with_proto_and_callback+0xf0>)
 800c8be:	480f      	ldr	r0, [pc, #60]	; (800c8fc <netconn_new_with_proto_and_callback+0xe4>)
 800c8c0:	f00d fac0 	bl	8019e44 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c6:	330c      	adds	r3, #12
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f00d f83c 	bl	8019946 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	3310      	adds	r3, #16
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f00c ff42 	bl	801975c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c8d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8da:	2007      	movs	r0, #7
 800c8dc:	f002 fe62 	bl	800f5a4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	e000      	b.n	800c8e6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3730      	adds	r7, #48	; 0x30
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	0800d9b5 	.word	0x0800d9b5
 800c8f4:	0801ad5c 	.word	0x0801ad5c
 800c8f8:	0801ad90 	.word	0x0801ad90
 800c8fc:	0801adb4 	.word	0x0801adb4
 800c900:	0801addc 	.word	0x0801addc
 800c904:	0801adf4 	.word	0x0801adf4
 800c908:	0801ae18 	.word	0x0801ae18

0800c90c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08e      	sub	sp, #56	; 0x38
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	4613      	mov	r3, r2
 800c918:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d109      	bne.n	800c934 <netconn_bind+0x28>
 800c920:	4b11      	ldr	r3, [pc, #68]	; (800c968 <netconn_bind+0x5c>)
 800c922:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c926:	4911      	ldr	r1, [pc, #68]	; (800c96c <netconn_bind+0x60>)
 800c928:	4811      	ldr	r0, [pc, #68]	; (800c970 <netconn_bind+0x64>)
 800c92a:	f00d fa8b 	bl	8019e44 <iprintf>
 800c92e:	f06f 030f 	mvn.w	r3, #15
 800c932:	e015      	b.n	800c960 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d101      	bne.n	800c93e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c93a:	4b0e      	ldr	r3, [pc, #56]	; (800c974 <netconn_bind+0x68>)
 800c93c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c946:	88fb      	ldrh	r3, [r7, #6]
 800c948:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c94a:	f107 0314 	add.w	r3, r7, #20
 800c94e:	4619      	mov	r1, r3
 800c950:	4809      	ldr	r0, [pc, #36]	; (800c978 <netconn_bind+0x6c>)
 800c952:	f7ff ff43 	bl	800c7dc <netconn_apimsg>
 800c956:	4603      	mov	r3, r0
 800c958:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c95c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c960:	4618      	mov	r0, r3
 800c962:	3738      	adds	r7, #56	; 0x38
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	0801ad5c 	.word	0x0801ad5c
 800c96c:	0801ae94 	.word	0x0801ae94
 800c970:	0801adb4 	.word	0x0801adb4
 800c974:	0801e380 	.word	0x0801e380
 800c978:	0800df21 	.word	0x0800df21

0800c97c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08c      	sub	sp, #48	; 0x30
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	460b      	mov	r3, r1
 800c986:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d109      	bne.n	800c9a2 <netconn_listen_with_backlog+0x26>
 800c98e:	4b0d      	ldr	r3, [pc, #52]	; (800c9c4 <netconn_listen_with_backlog+0x48>)
 800c990:	f240 12bb 	movw	r2, #443	; 0x1bb
 800c994:	490c      	ldr	r1, [pc, #48]	; (800c9c8 <netconn_listen_with_backlog+0x4c>)
 800c996:	480d      	ldr	r0, [pc, #52]	; (800c9cc <netconn_listen_with_backlog+0x50>)
 800c998:	f00d fa54 	bl	8019e44 <iprintf>
 800c99c:	f06f 030f 	mvn.w	r3, #15
 800c9a0:	e00c      	b.n	800c9bc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800c9a6:	f107 030c 	add.w	r3, r7, #12
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	4808      	ldr	r0, [pc, #32]	; (800c9d0 <netconn_listen_with_backlog+0x54>)
 800c9ae:	f7ff ff15 	bl	800c7dc <netconn_apimsg>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c9b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3730      	adds	r7, #48	; 0x30
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	0801ad5c 	.word	0x0801ad5c
 800c9c8:	0801af14 	.word	0x0801af14
 800c9cc:	0801adb4 	.word	0x0801adb4
 800c9d0:	0800df95 	.word	0x0800df95

0800c9d4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b086      	sub	sp, #24
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d109      	bne.n	800c9f8 <netconn_accept+0x24>
 800c9e4:	4b3d      	ldr	r3, [pc, #244]	; (800cadc <netconn_accept+0x108>)
 800c9e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c9ea:	493d      	ldr	r1, [pc, #244]	; (800cae0 <netconn_accept+0x10c>)
 800c9ec:	483d      	ldr	r0, [pc, #244]	; (800cae4 <netconn_accept+0x110>)
 800c9ee:	f00d fa29 	bl	8019e44 <iprintf>
 800c9f2:	f06f 030f 	mvn.w	r3, #15
 800c9f6:	e06c      	b.n	800cad2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d109      	bne.n	800ca18 <netconn_accept+0x44>
 800ca04:	4b35      	ldr	r3, [pc, #212]	; (800cadc <netconn_accept+0x108>)
 800ca06:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ca0a:	4937      	ldr	r1, [pc, #220]	; (800cae8 <netconn_accept+0x114>)
 800ca0c:	4835      	ldr	r0, [pc, #212]	; (800cae4 <netconn_accept+0x110>)
 800ca0e:	f00d fa19 	bl	8019e44 <iprintf>
 800ca12:	f06f 030f 	mvn.w	r3, #15
 800ca16:	e05c      	b.n	800cad2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f000 fb5f 	bl	800d0dc <netconn_err>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ca22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d002      	beq.n	800ca30 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ca2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca2e:	e050      	b.n	800cad2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	3314      	adds	r3, #20
 800ca34:	4618      	mov	r0, r3
 800ca36:	f00c ff05 	bl	8019844 <sys_mbox_valid>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <netconn_accept+0x78>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	7f1b      	ldrb	r3, [r3, #28]
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800ca4c:	f06f 030e 	mvn.w	r3, #14
 800ca50:	e03f      	b.n	800cad2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7f1b      	ldrb	r3, [r3, #28]
 800ca56:	f003 0302 	and.w	r3, r3, #2
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d00e      	beq.n	800ca7c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3314      	adds	r3, #20
 800ca62:	f107 020c 	add.w	r2, r7, #12
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f00c fed4 	bl	8019816 <sys_arch_mbox_tryfetch>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca74:	d10a      	bne.n	800ca8c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ca76:	f06f 0306 	mvn.w	r3, #6
 800ca7a:	e02a      	b.n	800cad2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3314      	adds	r3, #20
 800ca80:	f107 010c 	add.w	r1, r7, #12
 800ca84:	2200      	movs	r2, #0
 800ca86:	4618      	mov	r0, r3
 800ca88:	f00c fe94 	bl	80197b4 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d005      	beq.n	800caa0 <netconn_accept+0xcc>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca98:	2200      	movs	r2, #0
 800ca9a:	2101      	movs	r1, #1
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f107 0213 	add.w	r2, r7, #19
 800caa6:	4611      	mov	r1, r2
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fb69 	bl	800d180 <lwip_netconn_is_err_msg>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800cab4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cab8:	e00b      	b.n	800cad2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d102      	bne.n	800cac6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800cac0:	f06f 030e 	mvn.w	r3, #14
 800cac4:	e005      	b.n	800cad2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cad0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3718      	adds	r7, #24
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	0801ad5c 	.word	0x0801ad5c
 800cae0:	0801af34 	.word	0x0801af34
 800cae4:	0801adb4 	.word	0x0801adb4
 800cae8:	0801af54 	.word	0x0801af54

0800caec <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	4613      	mov	r3, r2
 800caf8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <netconn_recv_data+0x2c>
 800cb04:	4b58      	ldr	r3, [pc, #352]	; (800cc68 <netconn_recv_data+0x17c>)
 800cb06:	f44f 7212 	mov.w	r2, #584	; 0x248
 800cb0a:	4958      	ldr	r1, [pc, #352]	; (800cc6c <netconn_recv_data+0x180>)
 800cb0c:	4858      	ldr	r0, [pc, #352]	; (800cc70 <netconn_recv_data+0x184>)
 800cb0e:	f00d f999 	bl	8019e44 <iprintf>
 800cb12:	f06f 030f 	mvn.w	r3, #15
 800cb16:	e0a2      	b.n	800cc5e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d109      	bne.n	800cb38 <netconn_recv_data+0x4c>
 800cb24:	4b50      	ldr	r3, [pc, #320]	; (800cc68 <netconn_recv_data+0x17c>)
 800cb26:	f240 224a 	movw	r2, #586	; 0x24a
 800cb2a:	4952      	ldr	r1, [pc, #328]	; (800cc74 <netconn_recv_data+0x188>)
 800cb2c:	4850      	ldr	r0, [pc, #320]	; (800cc70 <netconn_recv_data+0x184>)
 800cb2e:	f00d f989 	bl	8019e44 <iprintf>
 800cb32:	f06f 030f 	mvn.w	r3, #15
 800cb36:	e092      	b.n	800cc5e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3310      	adds	r3, #16
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f00c fe81 	bl	8019844 <sys_mbox_valid>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d10e      	bne.n	800cb66 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f000 fac7 	bl	800d0dc <netconn_err>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800cb52:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d002      	beq.n	800cb60 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800cb5a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800cb5e:	e07e      	b.n	800cc5e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800cb60:	f06f 030a 	mvn.w	r3, #10
 800cb64:	e07b      	b.n	800cc5e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	7f1b      	ldrb	r3, [r3, #28]
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d10f      	bne.n	800cb92 <netconn_recv_data+0xa6>
 800cb72:	79fb      	ldrb	r3, [r7, #7]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	7f1b      	ldrb	r3, [r3, #28]
 800cb80:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d104      	bne.n	800cb92 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d023      	beq.n	800cbda <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3310      	adds	r3, #16
 800cb96:	f107 0218 	add.w	r2, r7, #24
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f00c fe3a 	bl	8019816 <sys_arch_mbox_tryfetch>
 800cba2:	4603      	mov	r3, r0
 800cba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cba8:	d11f      	bne.n	800cbea <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f000 fa96 	bl	800d0dc <netconn_err>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800cbb4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800cbbc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800cbc0:	e04d      	b.n	800cc5e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	7f1b      	ldrb	r3, [r3, #28]
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800cbce:	f06f 030a 	mvn.w	r3, #10
 800cbd2:	e044      	b.n	800cc5e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800cbd4:	f06f 0306 	mvn.w	r3, #6
 800cbd8:	e041      	b.n	800cc5e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3310      	adds	r3, #16
 800cbde:	f107 0118 	add.w	r1, r7, #24
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f00c fde5 	bl	80197b4 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbf2:	2b10      	cmp	r3, #16
 800cbf4:	d117      	bne.n	800cc26 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	f107 0217 	add.w	r2, r7, #23
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fabe 	bl	800d180 <lwip_netconn_is_err_msg>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d009      	beq.n	800cc1e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800cc0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc0e:	f113 0f0f 	cmn.w	r3, #15
 800cc12:	d101      	bne.n	800cc18 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	e022      	b.n	800cc5e <netconn_recv_data+0x172>
      }
      return err;
 800cc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cc1c:	e01f      	b.n	800cc5e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	891b      	ldrh	r3, [r3, #8]
 800cc22:	83fb      	strh	r3, [r7, #30]
 800cc24:	e00d      	b.n	800cc42 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d106      	bne.n	800cc3a <netconn_recv_data+0x14e>
 800cc2c:	4b0e      	ldr	r3, [pc, #56]	; (800cc68 <netconn_recv_data+0x17c>)
 800cc2e:	f240 2291 	movw	r2, #657	; 0x291
 800cc32:	4911      	ldr	r1, [pc, #68]	; (800cc78 <netconn_recv_data+0x18c>)
 800cc34:	480e      	ldr	r0, [pc, #56]	; (800cc70 <netconn_recv_data+0x184>)
 800cc36:	f00d f905 	bl	8019e44 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	891b      	ldrh	r3, [r3, #8]
 800cc40:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d005      	beq.n	800cc56 <netconn_recv_data+0x16a>
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc4e:	8bfa      	ldrh	r2, [r7, #30]
 800cc50:	2101      	movs	r1, #1
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3720      	adds	r7, #32
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	0801ad5c 	.word	0x0801ad5c
 800cc6c:	0801af74 	.word	0x0801af74
 800cc70:	0801adb4 	.word	0x0801adb4
 800cc74:	0801af94 	.word	0x0801af94
 800cc78:	0801afb0 	.word	0x0801afb0

0800cc7c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d005      	beq.n	800cc9a <netconn_tcp_recvd_msg+0x1e>
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc96:	2b10      	cmp	r3, #16
 800cc98:	d009      	beq.n	800ccae <netconn_tcp_recvd_msg+0x32>
 800cc9a:	4b0c      	ldr	r3, [pc, #48]	; (800cccc <netconn_tcp_recvd_msg+0x50>)
 800cc9c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800cca0:	490b      	ldr	r1, [pc, #44]	; (800ccd0 <netconn_tcp_recvd_msg+0x54>)
 800cca2:	480c      	ldr	r0, [pc, #48]	; (800ccd4 <netconn_tcp_recvd_msg+0x58>)
 800cca4:	f00d f8ce 	bl	8019e44 <iprintf>
 800cca8:	f06f 030f 	mvn.w	r3, #15
 800ccac:	e00a      	b.n	800ccc4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	68ba      	ldr	r2, [r7, #8]
 800ccb8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	4806      	ldr	r0, [pc, #24]	; (800ccd8 <netconn_tcp_recvd_msg+0x5c>)
 800ccbe:	f7ff fd8d 	bl	800c7dc <netconn_apimsg>
 800ccc2:	4603      	mov	r3, r0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3710      	adds	r7, #16
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	0801ad5c 	.word	0x0801ad5c
 800ccd0:	0801afbc 	.word	0x0801afbc
 800ccd4:	0801adb4 	.word	0x0801adb4
 800ccd8:	0800e0c5 	.word	0x0800e0c5

0800ccdc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b090      	sub	sp, #64	; 0x40
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	4613      	mov	r3, r2
 800cce8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	3310      	adds	r3, #16
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f00c fda8 	bl	8019844 <sys_mbox_valid>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d102      	bne.n	800cd00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ccfa:	f06f 030a 	mvn.w	r3, #10
 800ccfe:	e06d      	b.n	800cddc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	7f1b      	ldrb	r3, [r3, #28]
 800cd04:	b25b      	sxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	da07      	bge.n	800cd1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	7f1b      	ldrb	r3, [r3, #28]
 800cd0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800cd18:	e039      	b.n	800cd8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	68b9      	ldr	r1, [r7, #8]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f7ff fee3 	bl	800caec <netconn_recv_data>
 800cd26:	4603      	mov	r3, r0
 800cd28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800cd2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800cd34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cd38:	e050      	b.n	800cddc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	f003 0308 	and.w	r3, r3, #8
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d10e      	bne.n	800cd68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800cd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d002      	beq.n	800cd56 <netconn_recv_data_tcp+0x7a>
 800cd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd52:	891b      	ldrh	r3, [r3, #8]
 800cd54:	e000      	b.n	800cd58 <netconn_recv_data_tcp+0x7c>
 800cd56:	2301      	movs	r3, #1
 800cd58:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800cd5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cd5c:	f107 0214 	add.w	r2, r7, #20
 800cd60:	4619      	mov	r1, r3
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	f7ff ff8a 	bl	800cc7c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800cd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d134      	bne.n	800cdd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800cd6e:	79fb      	ldrb	r3, [r7, #7]
 800cd70:	f003 0310 	and.w	r3, r3, #16
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d009      	beq.n	800cd8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	7f1b      	ldrb	r3, [r3, #28]
 800cd7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800cd86:	f06f 0306 	mvn.w	r3, #6
 800cd8a:	e027      	b.n	800cddc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800cd8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d005      	beq.n	800cda2 <netconn_recv_data_tcp+0xc6>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	68f8      	ldr	r0, [r7, #12]
 800cda0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d10f      	bne.n	800cdca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 f996 	bl	800d0dc <netconn_err>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800cdb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d002      	beq.n	800cdc4 <netconn_recv_data_tcp+0xe8>
          return err;
 800cdbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cdc2:	e00b      	b.n	800cddc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800cdc4:	f06f 030d 	mvn.w	r3, #13
 800cdc8:	e008      	b.n	800cddc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800cdca:	2101      	movs	r1, #1
 800cdcc:	68f8      	ldr	r0, [r7, #12]
 800cdce:	f000 f955 	bl	800d07c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800cdd2:	f06f 030e 	mvn.w	r3, #14
 800cdd6:	e001      	b.n	800cddc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800cdd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3740      	adds	r7, #64	; 0x40
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d109      	bne.n	800ce0c <netconn_recv+0x28>
 800cdf8:	4b32      	ldr	r3, [pc, #200]	; (800cec4 <netconn_recv+0xe0>)
 800cdfa:	f240 3263 	movw	r2, #867	; 0x363
 800cdfe:	4932      	ldr	r1, [pc, #200]	; (800cec8 <netconn_recv+0xe4>)
 800ce00:	4832      	ldr	r0, [pc, #200]	; (800cecc <netconn_recv+0xe8>)
 800ce02:	f00d f81f 	bl	8019e44 <iprintf>
 800ce06:	f06f 030f 	mvn.w	r3, #15
 800ce0a:	e056      	b.n	800ceba <netconn_recv+0xd6>
  *new_buf = NULL;
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d109      	bne.n	800ce2c <netconn_recv+0x48>
 800ce18:	4b2a      	ldr	r3, [pc, #168]	; (800cec4 <netconn_recv+0xe0>)
 800ce1a:	f240 3265 	movw	r2, #869	; 0x365
 800ce1e:	492c      	ldr	r1, [pc, #176]	; (800ced0 <netconn_recv+0xec>)
 800ce20:	482a      	ldr	r0, [pc, #168]	; (800cecc <netconn_recv+0xe8>)
 800ce22:	f00d f80f 	bl	8019e44 <iprintf>
 800ce26:	f06f 030f 	mvn.w	r3, #15
 800ce2a:	e046      	b.n	800ceba <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce34:	2b10      	cmp	r3, #16
 800ce36:	d13a      	bne.n	800ceae <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ce3c:	2006      	movs	r0, #6
 800ce3e:	f002 fb3b 	bl	800f4b8 <memp_malloc>
 800ce42:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d102      	bne.n	800ce50 <netconn_recv+0x6c>
      return ERR_MEM;
 800ce4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce4e:	e034      	b.n	800ceba <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ce50:	f107 030c 	add.w	r3, r7, #12
 800ce54:	2200      	movs	r2, #0
 800ce56:	4619      	mov	r1, r3
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7ff ff3f 	bl	800ccdc <netconn_recv_data_tcp>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ce62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d006      	beq.n	800ce78 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ce6a:	6979      	ldr	r1, [r7, #20]
 800ce6c:	2006      	movs	r0, #6
 800ce6e:	f002 fb99 	bl	800f5a4 <memp_free>
      return err;
 800ce72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce76:	e020      	b.n	800ceba <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d106      	bne.n	800ce8c <netconn_recv+0xa8>
 800ce7e:	4b11      	ldr	r3, [pc, #68]	; (800cec4 <netconn_recv+0xe0>)
 800ce80:	f240 3279 	movw	r2, #889	; 0x379
 800ce84:	4913      	ldr	r1, [pc, #76]	; (800ced4 <netconn_recv+0xf0>)
 800ce86:	4811      	ldr	r0, [pc, #68]	; (800cecc <netconn_recv+0xe8>)
 800ce88:	f00c ffdc 	bl	8019e44 <iprintf>

    buf->p = p;
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	2200      	movs	r2, #0
 800cea2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	697a      	ldr	r2, [r7, #20]
 800cea8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e005      	b.n	800ceba <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ceae:	2200      	movs	r2, #0
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f7ff fe1a 	bl	800caec <netconn_recv_data>
 800ceb8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	0801ad5c 	.word	0x0801ad5c
 800cec8:	0801af74 	.word	0x0801af74
 800cecc:	0801adb4 	.word	0x0801adb4
 800ced0:	0801af94 	.word	0x0801af94
 800ced4:	0801b00c 	.word	0x0801b00c

0800ced8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b088      	sub	sp, #32
 800cedc:	af02      	add	r7, sp, #8
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
 800cee4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ceee:	78fa      	ldrb	r2, [r7, #3]
 800cef0:	f107 0110 	add.w	r1, r7, #16
 800cef4:	6a3b      	ldr	r3, [r7, #32]
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4613      	mov	r3, r2
 800cefa:	2201      	movs	r2, #1
 800cefc:	68f8      	ldr	r0, [r7, #12]
 800cefe:	f000 f805 	bl	800cf0c <netconn_write_vectors_partly>
 800cf02:	4603      	mov	r3, r0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b092      	sub	sp, #72	; 0x48
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4611      	mov	r1, r2
 800cf18:	461a      	mov	r2, r3
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	80fb      	strh	r3, [r7, #6]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d109      	bne.n	800cf3c <netconn_write_vectors_partly+0x30>
 800cf28:	4b4e      	ldr	r3, [pc, #312]	; (800d064 <netconn_write_vectors_partly+0x158>)
 800cf2a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cf2e:	494e      	ldr	r1, [pc, #312]	; (800d068 <netconn_write_vectors_partly+0x15c>)
 800cf30:	484e      	ldr	r0, [pc, #312]	; (800d06c <netconn_write_vectors_partly+0x160>)
 800cf32:	f00c ff87 	bl	8019e44 <iprintf>
 800cf36:	f06f 030f 	mvn.w	r3, #15
 800cf3a:	e08e      	b.n	800d05a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf44:	2b10      	cmp	r3, #16
 800cf46:	d009      	beq.n	800cf5c <netconn_write_vectors_partly+0x50>
 800cf48:	4b46      	ldr	r3, [pc, #280]	; (800d064 <netconn_write_vectors_partly+0x158>)
 800cf4a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cf4e:	4948      	ldr	r1, [pc, #288]	; (800d070 <netconn_write_vectors_partly+0x164>)
 800cf50:	4846      	ldr	r0, [pc, #280]	; (800d06c <netconn_write_vectors_partly+0x160>)
 800cf52:	f00c ff77 	bl	8019e44 <iprintf>
 800cf56:	f06f 0305 	mvn.w	r3, #5
 800cf5a:	e07e      	b.n	800d05a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	7f1b      	ldrb	r3, [r3, #28]
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d104      	bne.n	800cf72 <netconn_write_vectors_partly+0x66>
 800cf68:	797b      	ldrb	r3, [r7, #5]
 800cf6a:	f003 0304 	and.w	r3, r3, #4
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <netconn_write_vectors_partly+0x6a>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e000      	b.n	800cf78 <netconn_write_vectors_partly+0x6c>
 800cf76:	2300      	movs	r3, #0
 800cf78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800cf7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d005      	beq.n	800cf90 <netconn_write_vectors_partly+0x84>
 800cf84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d102      	bne.n	800cf90 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800cf8a:	f06f 0305 	mvn.w	r3, #5
 800cf8e:	e064      	b.n	800d05a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800cf90:	2300      	movs	r3, #0
 800cf92:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800cf94:	2300      	movs	r3, #0
 800cf96:	643b      	str	r3, [r7, #64]	; 0x40
 800cf98:	e015      	b.n	800cfc6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800cf9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	68ba      	ldr	r2, [r7, #8]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	685b      	ldr	r3, [r3, #4]
 800cfa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfa6:	4413      	add	r3, r2
 800cfa8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800cfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfac:	00db      	lsls	r3, r3, #3
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d202      	bcs.n	800cfc0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800cfba:	f06f 0305 	mvn.w	r3, #5
 800cfbe:	e04c      	b.n	800d05a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800cfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	643b      	str	r3, [r7, #64]	; 0x40
 800cfc6:	88fb      	ldrh	r3, [r7, #6]
 800cfc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	dbe5      	blt.n	800cf9a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800cfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	e040      	b.n	800d05a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800cfd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da0a      	bge.n	800cff4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800cfde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d102      	bne.n	800cfea <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800cfe4:	f06f 0305 	mvn.w	r3, #5
 800cfe8:	e037      	b.n	800d05a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800cfea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cfee:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800cffc:	88fb      	ldrh	r3, [r7, #6]
 800cffe:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d004:	797b      	ldrb	r3, [r7, #5]
 800d006:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d00a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d012:	f107 0314 	add.w	r3, r7, #20
 800d016:	4619      	mov	r1, r3
 800d018:	4816      	ldr	r0, [pc, #88]	; (800d074 <netconn_write_vectors_partly+0x168>)
 800d01a:	f7ff fbdf 	bl	800c7dc <netconn_apimsg>
 800d01e:	4603      	mov	r3, r0
 800d020:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800d024:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d114      	bne.n	800d056 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800d02c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800d032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d036:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800d038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800d040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d044:	429a      	cmp	r2, r3
 800d046:	d006      	beq.n	800d056 <netconn_write_vectors_partly+0x14a>
 800d048:	4b06      	ldr	r3, [pc, #24]	; (800d064 <netconn_write_vectors_partly+0x158>)
 800d04a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d04e:	490a      	ldr	r1, [pc, #40]	; (800d078 <netconn_write_vectors_partly+0x16c>)
 800d050:	4806      	ldr	r0, [pc, #24]	; (800d06c <netconn_write_vectors_partly+0x160>)
 800d052:	f00c fef7 	bl	8019e44 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d056:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3748      	adds	r7, #72	; 0x48
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	0801ad5c 	.word	0x0801ad5c
 800d068:	0801b034 	.word	0x0801b034
 800d06c:	0801adb4 	.word	0x0801adb4
 800d070:	0801b050 	.word	0x0801b050
 800d074:	0800e4c9 	.word	0x0800e4c9
 800d078:	0801b074 	.word	0x0801b074

0800d07c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08c      	sub	sp, #48	; 0x30
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d109      	bne.n	800d0a2 <netconn_close_shutdown+0x26>
 800d08e:	4b0f      	ldr	r3, [pc, #60]	; (800d0cc <netconn_close_shutdown+0x50>)
 800d090:	f240 4247 	movw	r2, #1095	; 0x447
 800d094:	490e      	ldr	r1, [pc, #56]	; (800d0d0 <netconn_close_shutdown+0x54>)
 800d096:	480f      	ldr	r0, [pc, #60]	; (800d0d4 <netconn_close_shutdown+0x58>)
 800d098:	f00c fed4 	bl	8019e44 <iprintf>
 800d09c:	f06f 030f 	mvn.w	r3, #15
 800d0a0:	e010      	b.n	800d0c4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d0a6:	78fb      	ldrb	r3, [r7, #3]
 800d0a8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d0aa:	2329      	movs	r3, #41	; 0x29
 800d0ac:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d0ae:	f107 030c 	add.w	r3, r7, #12
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	4808      	ldr	r0, [pc, #32]	; (800d0d8 <netconn_close_shutdown+0x5c>)
 800d0b6:	f7ff fb91 	bl	800c7dc <netconn_apimsg>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d0c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3730      	adds	r7, #48	; 0x30
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	0801ad5c 	.word	0x0801ad5c
 800d0d0:	0801b098 	.word	0x0801b098
 800d0d4:	0801adb4 	.word	0x0801adb4
 800d0d8:	0800e5e1 	.word	0x0800e5e1

0800d0dc <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d101      	bne.n	800d0ee <netconn_err+0x12>
    return ERR_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e00d      	b.n	800d10a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d0ee:	f00c fcb3 	bl	8019a58 <sys_arch_protect>
 800d0f2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	7a1b      	ldrb	r3, [r3, #8]
 800d0f8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f00c fcb7 	bl	8019a74 <sys_arch_unprotect>
  return err;
 800d106:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	4603      	mov	r3, r0
 800d11c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d11e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d122:	f113 0f0d 	cmn.w	r3, #13
 800d126:	d009      	beq.n	800d13c <lwip_netconn_err_to_msg+0x28>
 800d128:	f113 0f0d 	cmn.w	r3, #13
 800d12c:	dc0c      	bgt.n	800d148 <lwip_netconn_err_to_msg+0x34>
 800d12e:	f113 0f0f 	cmn.w	r3, #15
 800d132:	d007      	beq.n	800d144 <lwip_netconn_err_to_msg+0x30>
 800d134:	f113 0f0e 	cmn.w	r3, #14
 800d138:	d002      	beq.n	800d140 <lwip_netconn_err_to_msg+0x2c>
 800d13a:	e005      	b.n	800d148 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d13c:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <lwip_netconn_err_to_msg+0x54>)
 800d13e:	e00e      	b.n	800d15e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d140:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <lwip_netconn_err_to_msg+0x58>)
 800d142:	e00c      	b.n	800d15e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <lwip_netconn_err_to_msg+0x5c>)
 800d146:	e00a      	b.n	800d15e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d005      	beq.n	800d15c <lwip_netconn_err_to_msg+0x48>
 800d150:	4b08      	ldr	r3, [pc, #32]	; (800d174 <lwip_netconn_err_to_msg+0x60>)
 800d152:	227d      	movs	r2, #125	; 0x7d
 800d154:	4908      	ldr	r1, [pc, #32]	; (800d178 <lwip_netconn_err_to_msg+0x64>)
 800d156:	4809      	ldr	r0, [pc, #36]	; (800d17c <lwip_netconn_err_to_msg+0x68>)
 800d158:	f00c fe74 	bl	8019e44 <iprintf>
      return NULL;
 800d15c:	2300      	movs	r3, #0
  }
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	0801e26c 	.word	0x0801e26c
 800d16c:	0801e26d 	.word	0x0801e26d
 800d170:	0801e26e 	.word	0x0801e26e
 800d174:	0801b0b4 	.word	0x0801b0b4
 800d178:	0801b0e8 	.word	0x0801b0e8
 800d17c:	0801b0f8 	.word	0x0801b0f8

0800d180 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
 800d188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d105      	bne.n	800d19c <lwip_netconn_is_err_msg+0x1c>
 800d190:	4b12      	ldr	r3, [pc, #72]	; (800d1dc <lwip_netconn_is_err_msg+0x5c>)
 800d192:	2285      	movs	r2, #133	; 0x85
 800d194:	4912      	ldr	r1, [pc, #72]	; (800d1e0 <lwip_netconn_is_err_msg+0x60>)
 800d196:	4813      	ldr	r0, [pc, #76]	; (800d1e4 <lwip_netconn_is_err_msg+0x64>)
 800d198:	f00c fe54 	bl	8019e44 <iprintf>

  if (msg == &netconn_aborted) {
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4a12      	ldr	r2, [pc, #72]	; (800d1e8 <lwip_netconn_is_err_msg+0x68>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d104      	bne.n	800d1ae <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	22f3      	movs	r2, #243	; 0xf3
 800d1a8:	701a      	strb	r2, [r3, #0]
    return 1;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e012      	b.n	800d1d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	4a0e      	ldr	r2, [pc, #56]	; (800d1ec <lwip_netconn_is_err_msg+0x6c>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d104      	bne.n	800d1c0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	22f2      	movs	r2, #242	; 0xf2
 800d1ba:	701a      	strb	r2, [r3, #0]
    return 1;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e009      	b.n	800d1d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	4a0b      	ldr	r2, [pc, #44]	; (800d1f0 <lwip_netconn_is_err_msg+0x70>)
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d104      	bne.n	800d1d2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	22f1      	movs	r2, #241	; 0xf1
 800d1cc:	701a      	strb	r2, [r3, #0]
    return 1;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e000      	b.n	800d1d4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	0801b0b4 	.word	0x0801b0b4
 800d1e0:	0801b120 	.word	0x0801b120
 800d1e4:	0801b0f8 	.word	0x0801b0f8
 800d1e8:	0801e26c 	.word	0x0801e26c
 800d1ec:	0801e26d 	.word	0x0801e26d
 800d1f0:	0801e26e 	.word	0x0801e26e

0800d1f4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b088      	sub	sp, #32
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d105      	bne.n	800d214 <recv_udp+0x20>
 800d208:	4b34      	ldr	r3, [pc, #208]	; (800d2dc <recv_udp+0xe8>)
 800d20a:	22e5      	movs	r2, #229	; 0xe5
 800d20c:	4934      	ldr	r1, [pc, #208]	; (800d2e0 <recv_udp+0xec>)
 800d20e:	4835      	ldr	r0, [pc, #212]	; (800d2e4 <recv_udp+0xf0>)
 800d210:	f00c fe18 	bl	8019e44 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d105      	bne.n	800d226 <recv_udp+0x32>
 800d21a:	4b30      	ldr	r3, [pc, #192]	; (800d2dc <recv_udp+0xe8>)
 800d21c:	22e6      	movs	r2, #230	; 0xe6
 800d21e:	4932      	ldr	r1, [pc, #200]	; (800d2e8 <recv_udp+0xf4>)
 800d220:	4830      	ldr	r0, [pc, #192]	; (800d2e4 <recv_udp+0xf0>)
 800d222:	f00c fe0f 	bl	8019e44 <iprintf>
  conn = (struct netconn *)arg;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d103      	bne.n	800d238 <recv_udp+0x44>
    pbuf_free(p);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f003 f85b 	bl	80102ec <pbuf_free>
    return;
 800d236:	e04d      	b.n	800d2d4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d005      	beq.n	800d24e <recv_udp+0x5a>
 800d242:	4b26      	ldr	r3, [pc, #152]	; (800d2dc <recv_udp+0xe8>)
 800d244:	22ee      	movs	r2, #238	; 0xee
 800d246:	4929      	ldr	r1, [pc, #164]	; (800d2ec <recv_udp+0xf8>)
 800d248:	4826      	ldr	r0, [pc, #152]	; (800d2e4 <recv_udp+0xf0>)
 800d24a:	f00c fdfb 	bl	8019e44 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	3310      	adds	r3, #16
 800d252:	4618      	mov	r0, r3
 800d254:	f00c faf6 	bl	8019844 <sys_mbox_valid>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d103      	bne.n	800d266 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f003 f844 	bl	80102ec <pbuf_free>
    return;
 800d264:	e036      	b.n	800d2d4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d266:	2006      	movs	r0, #6
 800d268:	f002 f926 	bl	800f4b8 <memp_malloc>
 800d26c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d103      	bne.n	800d27c <recv_udp+0x88>
    pbuf_free(p);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f003 f839 	bl	80102ec <pbuf_free>
    return;
 800d27a:	e02b      	b.n	800d2d4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	687a      	ldr	r2, [r7, #4]
 800d280:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d002      	beq.n	800d294 <recv_udp+0xa0>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	e000      	b.n	800d296 <recv_udp+0xa2>
 800d294:	2300      	movs	r3, #0
 800d296:	69ba      	ldr	r2, [r7, #24]
 800d298:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d29e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	891b      	ldrh	r3, [r3, #8]
 800d2a4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	3310      	adds	r3, #16
 800d2aa:	69b9      	ldr	r1, [r7, #24]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f00c fa67 	bl	8019780 <sys_mbox_trypost>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d003      	beq.n	800d2c0 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d2b8:	69b8      	ldr	r0, [r7, #24]
 800d2ba:	f001 fa1d 	bl	800e6f8 <netbuf_delete>
    return;
 800d2be:	e009      	b.n	800d2d4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d005      	beq.n	800d2d4 <recv_udp+0xe0>
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2cc:	8afa      	ldrh	r2, [r7, #22]
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	69f8      	ldr	r0, [r7, #28]
 800d2d2:	4798      	blx	r3
  }
}
 800d2d4:	3720      	adds	r7, #32
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}
 800d2da:	bf00      	nop
 800d2dc:	0801b0b4 	.word	0x0801b0b4
 800d2e0:	0801b12c 	.word	0x0801b12c
 800d2e4:	0801b0f8 	.word	0x0801b0f8
 800d2e8:	0801b150 	.word	0x0801b150
 800d2ec:	0801b170 	.word	0x0801b170

0800d2f0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b088      	sub	sp, #32
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
 800d2fc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d106      	bne.n	800d312 <recv_tcp+0x22>
 800d304:	4b36      	ldr	r3, [pc, #216]	; (800d3e0 <recv_tcp+0xf0>)
 800d306:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d30a:	4936      	ldr	r1, [pc, #216]	; (800d3e4 <recv_tcp+0xf4>)
 800d30c:	4836      	ldr	r0, [pc, #216]	; (800d3e8 <recv_tcp+0xf8>)
 800d30e:	f00c fd99 	bl	8019e44 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d106      	bne.n	800d326 <recv_tcp+0x36>
 800d318:	4b31      	ldr	r3, [pc, #196]	; (800d3e0 <recv_tcp+0xf0>)
 800d31a:	f240 122d 	movw	r2, #301	; 0x12d
 800d31e:	4933      	ldr	r1, [pc, #204]	; (800d3ec <recv_tcp+0xfc>)
 800d320:	4831      	ldr	r0, [pc, #196]	; (800d3e8 <recv_tcp+0xf8>)
 800d322:	f00c fd8f 	bl	8019e44 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d326:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d006      	beq.n	800d33c <recv_tcp+0x4c>
 800d32e:	4b2c      	ldr	r3, [pc, #176]	; (800d3e0 <recv_tcp+0xf0>)
 800d330:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d334:	492e      	ldr	r1, [pc, #184]	; (800d3f0 <recv_tcp+0x100>)
 800d336:	482c      	ldr	r0, [pc, #176]	; (800d3e8 <recv_tcp+0xf8>)
 800d338:	f00c fd84 	bl	8019e44 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d102      	bne.n	800d34c <recv_tcp+0x5c>
    return ERR_VAL;
 800d346:	f06f 0305 	mvn.w	r3, #5
 800d34a:	e045      	b.n	800d3d8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	429a      	cmp	r2, r3
 800d354:	d006      	beq.n	800d364 <recv_tcp+0x74>
 800d356:	4b22      	ldr	r3, [pc, #136]	; (800d3e0 <recv_tcp+0xf0>)
 800d358:	f240 1235 	movw	r2, #309	; 0x135
 800d35c:	4925      	ldr	r1, [pc, #148]	; (800d3f4 <recv_tcp+0x104>)
 800d35e:	4822      	ldr	r0, [pc, #136]	; (800d3e8 <recv_tcp+0xf8>)
 800d360:	f00c fd70 	bl	8019e44 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d364:	697b      	ldr	r3, [r7, #20]
 800d366:	3310      	adds	r3, #16
 800d368:	4618      	mov	r0, r3
 800d36a:	f00c fa6b 	bl	8019844 <sys_mbox_valid>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d10d      	bne.n	800d390 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d008      	beq.n	800d38c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	891b      	ldrh	r3, [r3, #8]
 800d37e:	4619      	mov	r1, r3
 800d380:	68b8      	ldr	r0, [r7, #8]
 800d382:	f003 ff6b 	bl	801125c <tcp_recved>
      pbuf_free(p);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f002 ffb0 	bl	80102ec <pbuf_free>
    }
    return ERR_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e023      	b.n	800d3d8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d005      	beq.n	800d3a2 <recv_tcp+0xb2>
    msg = p;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	891b      	ldrh	r3, [r3, #8]
 800d39e:	83fb      	strh	r3, [r7, #30]
 800d3a0:	e003      	b.n	800d3aa <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d3a2:	4b15      	ldr	r3, [pc, #84]	; (800d3f8 <recv_tcp+0x108>)
 800d3a4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	69b9      	ldr	r1, [r7, #24]
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f00c f9e5 	bl	8019780 <sys_mbox_trypost>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d002      	beq.n	800d3c2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d3bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d3c0:	e00a      	b.n	800d3d8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d005      	beq.n	800d3d6 <recv_tcp+0xe6>
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ce:	8bfa      	ldrh	r2, [r7, #30]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	6978      	ldr	r0, [r7, #20]
 800d3d4:	4798      	blx	r3
  }

  return ERR_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3720      	adds	r7, #32
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	0801b0b4 	.word	0x0801b0b4
 800d3e4:	0801b190 	.word	0x0801b190
 800d3e8:	0801b0f8 	.word	0x0801b0f8
 800d3ec:	0801b1b4 	.word	0x0801b1b4
 800d3f0:	0801b1d4 	.word	0x0801b1d4
 800d3f4:	0801b1ec 	.word	0x0801b1ec
 800d3f8:	0801e26e 	.word	0x0801e26e

0800d3fc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d106      	bne.n	800d41e <poll_tcp+0x22>
 800d410:	4b29      	ldr	r3, [pc, #164]	; (800d4b8 <poll_tcp+0xbc>)
 800d412:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d416:	4929      	ldr	r1, [pc, #164]	; (800d4bc <poll_tcp+0xc0>)
 800d418:	4829      	ldr	r0, [pc, #164]	; (800d4c0 <poll_tcp+0xc4>)
 800d41a:	f00c fd13 	bl	8019e44 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	785b      	ldrb	r3, [r3, #1]
 800d422:	2b01      	cmp	r3, #1
 800d424:	d104      	bne.n	800d430 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d426:	2101      	movs	r1, #1
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f000 fe81 	bl	800e130 <lwip_netconn_do_writemore>
 800d42e:	e016      	b.n	800d45e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b04      	cmp	r3, #4
 800d436:	d112      	bne.n	800d45e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6a1b      	ldr	r3, [r3, #32]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00a      	beq.n	800d456 <poll_tcp+0x5a>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6a1b      	ldr	r3, [r3, #32]
 800d444:	7a5b      	ldrb	r3, [r3, #9]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6a1b      	ldr	r3, [r3, #32]
 800d44e:	7a5a      	ldrb	r2, [r3, #9]
 800d450:	3a01      	subs	r2, #1
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d456:	2101      	movs	r1, #1
 800d458:	68f8      	ldr	r0, [r7, #12]
 800d45a:	f000 fbf7 	bl	800dc4c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	7f1b      	ldrb	r3, [r3, #28]
 800d462:	f003 0310 	and.w	r3, r3, #16
 800d466:	2b00      	cmp	r3, #0
 800d468:	d021      	beq.n	800d4ae <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	685b      	ldr	r3, [r3, #4]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d01d      	beq.n	800d4ae <poll_tcp+0xb2>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d47a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d47e:	d316      	bcc.n	800d4ae <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d488:	2b04      	cmp	r3, #4
 800d48a:	d810      	bhi.n	800d4ae <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	7f1b      	ldrb	r3, [r3, #28]
 800d490:	f023 0310 	bic.w	r3, r3, #16
 800d494:	b2da      	uxtb	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d005      	beq.n	800d4ae <poll_tcp+0xb2>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2102      	movs	r1, #2
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d4ae:	2300      	movs	r3, #0
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	0801b0b4 	.word	0x0801b0b4
 800d4bc:	0801b20c 	.word	0x0801b20c
 800d4c0:	0801b0f8 	.word	0x0801b0f8

0800d4c4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d106      	bne.n	800d4ea <sent_tcp+0x26>
 800d4dc:	4b20      	ldr	r3, [pc, #128]	; (800d560 <sent_tcp+0x9c>)
 800d4de:	f240 1293 	movw	r2, #403	; 0x193
 800d4e2:	4920      	ldr	r1, [pc, #128]	; (800d564 <sent_tcp+0xa0>)
 800d4e4:	4820      	ldr	r0, [pc, #128]	; (800d568 <sent_tcp+0xa4>)
 800d4e6:	f00c fcad 	bl	8019e44 <iprintf>

  if (conn) {
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d032      	beq.n	800d556 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	785b      	ldrb	r3, [r3, #1]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d104      	bne.n	800d502 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d4f8:	2101      	movs	r1, #1
 800d4fa:	6978      	ldr	r0, [r7, #20]
 800d4fc:	f000 fe18 	bl	800e130 <lwip_netconn_do_writemore>
 800d500:	e007      	b.n	800d512 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	785b      	ldrb	r3, [r3, #1]
 800d506:	2b04      	cmp	r3, #4
 800d508:	d103      	bne.n	800d512 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d50a:	2101      	movs	r1, #1
 800d50c:	6978      	ldr	r0, [r7, #20]
 800d50e:	f000 fb9d 	bl	800dc4c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d01d      	beq.n	800d556 <sent_tcp+0x92>
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d522:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d526:	d316      	bcc.n	800d556 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	685b      	ldr	r3, [r3, #4]
 800d52c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d530:	2b04      	cmp	r3, #4
 800d532:	d810      	bhi.n	800d556 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	7f1b      	ldrb	r3, [r3, #28]
 800d538:	f023 0310 	bic.w	r3, r3, #16
 800d53c:	b2da      	uxtb	r2, r3
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d546:	2b00      	cmp	r3, #0
 800d548:	d005      	beq.n	800d556 <sent_tcp+0x92>
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54e:	88fa      	ldrh	r2, [r7, #6]
 800d550:	2102      	movs	r1, #2
 800d552:	6978      	ldr	r0, [r7, #20]
 800d554:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3718      	adds	r7, #24
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	0801b0b4 	.word	0x0801b0b4
 800d564:	0801b20c 	.word	0x0801b20c
 800d568:	0801b0f8 	.word	0x0801b0f8

0800d56c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d106      	bne.n	800d590 <err_tcp+0x24>
 800d582:	4b5f      	ldr	r3, [pc, #380]	; (800d700 <err_tcp+0x194>)
 800d584:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d588:	495e      	ldr	r1, [pc, #376]	; (800d704 <err_tcp+0x198>)
 800d58a:	485f      	ldr	r0, [pc, #380]	; (800d708 <err_tcp+0x19c>)
 800d58c:	f00c fc5a 	bl	8019e44 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d590:	f00c fa62 	bl	8019a58 <sys_arch_protect>
 800d594:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	2200      	movs	r2, #0
 800d59a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	78fa      	ldrb	r2, [r7, #3]
 800d5a0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	7f1b      	ldrb	r3, [r3, #28]
 800d5a6:	f043 0301 	orr.w	r3, r3, #1
 800d5aa:	b2da      	uxtb	r2, r3
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	785b      	ldrb	r3, [r3, #1]
 800d5b4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d5bc:	69b8      	ldr	r0, [r7, #24]
 800d5be:	f00c fa59 	bl	8019a74 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d005      	beq.n	800d5d6 <err_tcp+0x6a>
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2104      	movs	r1, #4
 800d5d2:	69f8      	ldr	r0, [r7, #28]
 800d5d4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <err_tcp+0x7e>
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	2100      	movs	r1, #0
 800d5e6:	69f8      	ldr	r0, [r7, #28]
 800d5e8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d005      	beq.n	800d5fe <err_tcp+0x92>
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	2102      	movs	r1, #2
 800d5fa:	69f8      	ldr	r0, [r7, #28]
 800d5fc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d5fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d602:	4618      	mov	r0, r3
 800d604:	f7ff fd86 	bl	800d114 <lwip_netconn_err_to_msg>
 800d608:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	3310      	adds	r3, #16
 800d60e:	4618      	mov	r0, r3
 800d610:	f00c f918 	bl	8019844 <sys_mbox_valid>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	3310      	adds	r3, #16
 800d61e:	6939      	ldr	r1, [r7, #16]
 800d620:	4618      	mov	r0, r3
 800d622:	f00c f8ad 	bl	8019780 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	3314      	adds	r3, #20
 800d62a:	4618      	mov	r0, r3
 800d62c:	f00c f90a 	bl	8019844 <sys_mbox_valid>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d005      	beq.n	800d642 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	3314      	adds	r3, #20
 800d63a:	6939      	ldr	r1, [r7, #16]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f00c f89f 	bl	8019780 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d642:	7dfb      	ldrb	r3, [r7, #23]
 800d644:	2b01      	cmp	r3, #1
 800d646:	d005      	beq.n	800d654 <err_tcp+0xe8>
 800d648:	7dfb      	ldrb	r3, [r7, #23]
 800d64a:	2b04      	cmp	r3, #4
 800d64c:	d002      	beq.n	800d654 <err_tcp+0xe8>
 800d64e:	7dfb      	ldrb	r3, [r7, #23]
 800d650:	2b03      	cmp	r3, #3
 800d652:	d143      	bne.n	800d6dc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	7f1b      	ldrb	r3, [r3, #28]
 800d658:	f003 0304 	and.w	r3, r3, #4
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	bf14      	ite	ne
 800d660:	2301      	movne	r3, #1
 800d662:	2300      	moveq	r3, #0
 800d664:	b2db      	uxtb	r3, r3
 800d666:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	7f1b      	ldrb	r3, [r3, #28]
 800d66c:	f023 0304 	bic.w	r3, r3, #4
 800d670:	b2da      	uxtb	r2, r3
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d13b      	bne.n	800d6f4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d106      	bne.n	800d692 <err_tcp+0x126>
 800d684:	4b1e      	ldr	r3, [pc, #120]	; (800d700 <err_tcp+0x194>)
 800d686:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d68a:	4920      	ldr	r1, [pc, #128]	; (800d70c <err_tcp+0x1a0>)
 800d68c:	481e      	ldr	r0, [pc, #120]	; (800d708 <err_tcp+0x19c>)
 800d68e:	f00c fbd9 	bl	8019e44 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d692:	7dfb      	ldrb	r3, [r7, #23]
 800d694:	2b04      	cmp	r3, #4
 800d696:	d104      	bne.n	800d6a2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	6a1b      	ldr	r3, [r3, #32]
 800d69c:	2200      	movs	r2, #0
 800d69e:	711a      	strb	r2, [r3, #4]
 800d6a0:	e003      	b.n	800d6aa <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	6a1b      	ldr	r3, [r3, #32]
 800d6a6:	78fa      	ldrb	r2, [r7, #3]
 800d6a8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	6a1b      	ldr	r3, [r3, #32]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	330c      	adds	r3, #12
 800d6b2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d6b4:	68b8      	ldr	r0, [r7, #8]
 800d6b6:	f00c f953 	bl	8019960 <sys_sem_valid>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d106      	bne.n	800d6ce <err_tcp+0x162>
 800d6c0:	4b0f      	ldr	r3, [pc, #60]	; (800d700 <err_tcp+0x194>)
 800d6c2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d6c6:	4912      	ldr	r1, [pc, #72]	; (800d710 <err_tcp+0x1a4>)
 800d6c8:	480f      	ldr	r0, [pc, #60]	; (800d708 <err_tcp+0x19c>)
 800d6ca:	f00c fbbb 	bl	8019e44 <iprintf>
      conn->current_msg = NULL;
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d6d4:	68b8      	ldr	r0, [r7, #8]
 800d6d6:	f00c f929 	bl	801992c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d6da:	e00b      	b.n	800d6f4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	6a1b      	ldr	r3, [r3, #32]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d008      	beq.n	800d6f6 <err_tcp+0x18a>
 800d6e4:	4b06      	ldr	r3, [pc, #24]	; (800d700 <err_tcp+0x194>)
 800d6e6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d6ea:	490a      	ldr	r1, [pc, #40]	; (800d714 <err_tcp+0x1a8>)
 800d6ec:	4806      	ldr	r0, [pc, #24]	; (800d708 <err_tcp+0x19c>)
 800d6ee:	f00c fba9 	bl	8019e44 <iprintf>
  }
}
 800d6f2:	e000      	b.n	800d6f6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d6f4:	bf00      	nop
}
 800d6f6:	bf00      	nop
 800d6f8:	3720      	adds	r7, #32
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	0801b0b4 	.word	0x0801b0b4
 800d704:	0801b20c 	.word	0x0801b20c
 800d708:	0801b0f8 	.word	0x0801b0f8
 800d70c:	0801b21c 	.word	0x0801b21c
 800d710:	0801b238 	.word	0x0801b238
 800d714:	0801b254 	.word	0x0801b254

0800d718 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b084      	sub	sp, #16
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d726:	6879      	ldr	r1, [r7, #4]
 800d728:	68f8      	ldr	r0, [r7, #12]
 800d72a:	f004 fc5d 	bl	8011fe8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d72e:	490a      	ldr	r1, [pc, #40]	; (800d758 <setup_tcp+0x40>)
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f004 fc6b 	bl	801200c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d736:	4909      	ldr	r1, [pc, #36]	; (800d75c <setup_tcp+0x44>)
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f004 fc89 	bl	8012050 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d73e:	2202      	movs	r2, #2
 800d740:	4907      	ldr	r1, [pc, #28]	; (800d760 <setup_tcp+0x48>)
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f004 fce0 	bl	8012108 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d748:	4906      	ldr	r1, [pc, #24]	; (800d764 <setup_tcp+0x4c>)
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f004 fca2 	bl	8012094 <tcp_err>
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	0800d2f1 	.word	0x0800d2f1
 800d75c:	0800d4c5 	.word	0x0800d4c5
 800d760:	0800d3fd 	.word	0x0800d3fd
 800d764:	0800d56d 	.word	0x0800d56d

0800d768 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d768:	b590      	push	{r4, r7, lr}
 800d76a:	b089      	sub	sp, #36	; 0x24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	4613      	mov	r3, r2
 800d774:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d102      	bne.n	800d786 <accept_function+0x1e>
    return ERR_VAL;
 800d780:	f06f 0305 	mvn.w	r3, #5
 800d784:	e0a1      	b.n	800d8ca <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	3314      	adds	r3, #20
 800d78a:	4618      	mov	r0, r3
 800d78c:	f00c f85a 	bl	8019844 <sys_mbox_valid>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d102      	bne.n	800d79c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d796:	f06f 0305 	mvn.w	r3, #5
 800d79a:	e096      	b.n	800d8ca <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d11b      	bne.n	800d7da <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	f103 0414 	add.w	r4, r3, #20
 800d7a8:	f06f 000c 	mvn.w	r0, #12
 800d7ac:	f7ff fcb2 	bl	800d114 <lwip_netconn_err_to_msg>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	4620      	mov	r0, r4
 800d7b6:	f00b ffe3 	bl	8019780 <sys_mbox_trypost>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d109      	bne.n	800d7d4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <accept_function+0x6c>
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	69f8      	ldr	r0, [r7, #28]
 800d7d2:	4798      	blx	r3
    }
    return ERR_VAL;
 800d7d4:	f06f 0305 	mvn.w	r3, #5
 800d7d8:	e077      	b.n	800d8ca <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800d7da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d006      	beq.n	800d7f0 <accept_function+0x88>
 800d7e2:	4b3c      	ldr	r3, [pc, #240]	; (800d8d4 <accept_function+0x16c>)
 800d7e4:	f240 222a 	movw	r2, #554	; 0x22a
 800d7e8:	493b      	ldr	r1, [pc, #236]	; (800d8d8 <accept_function+0x170>)
 800d7ea:	483c      	ldr	r0, [pc, #240]	; (800d8dc <accept_function+0x174>)
 800d7ec:	f00c fb2a 	bl	8019e44 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	781a      	ldrb	r2, [r3, #0]
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4610      	mov	r0, r2
 800d7fc:	f000 f8f0 	bl	800d9e0 <netconn_alloc>
 800d800:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d11b      	bne.n	800d840 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	f103 0414 	add.w	r4, r3, #20
 800d80e:	f06f 000c 	mvn.w	r0, #12
 800d812:	f7ff fc7f 	bl	800d114 <lwip_netconn_err_to_msg>
 800d816:	4603      	mov	r3, r0
 800d818:	4619      	mov	r1, r3
 800d81a:	4620      	mov	r0, r4
 800d81c:	f00b ffb0 	bl	8019780 <sys_mbox_trypost>
 800d820:	4603      	mov	r3, r0
 800d822:	2b00      	cmp	r3, #0
 800d824:	d109      	bne.n	800d83a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d005      	beq.n	800d83a <accept_function+0xd2>
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d832:	2200      	movs	r2, #0
 800d834:	2100      	movs	r1, #0
 800d836:	69f8      	ldr	r0, [r7, #28]
 800d838:	4798      	blx	r3
    }
    return ERR_MEM;
 800d83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d83e:	e044      	b.n	800d8ca <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	68ba      	ldr	r2, [r7, #8]
 800d844:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d846:	69b8      	ldr	r0, [r7, #24]
 800d848:	f7ff ff66 	bl	800d718 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	3314      	adds	r3, #20
 800d850:	69b9      	ldr	r1, [r7, #24]
 800d852:	4618      	mov	r0, r3
 800d854:	f00b ff94 	bl	8019780 <sys_mbox_trypost>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d02a      	beq.n	800d8b4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d864:	2100      	movs	r1, #0
 800d866:	6978      	ldr	r0, [r7, #20]
 800d868:	f004 fbbe 	bl	8011fe8 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d86c:	2100      	movs	r1, #0
 800d86e:	6978      	ldr	r0, [r7, #20]
 800d870:	f004 fbcc 	bl	801200c <tcp_recv>
    tcp_sent(pcb, NULL);
 800d874:	2100      	movs	r1, #0
 800d876:	6978      	ldr	r0, [r7, #20]
 800d878:	f004 fbea 	bl	8012050 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d87c:	2200      	movs	r2, #0
 800d87e:	2100      	movs	r1, #0
 800d880:	6978      	ldr	r0, [r7, #20]
 800d882:	f004 fc41 	bl	8012108 <tcp_poll>
    tcp_err(pcb, NULL);
 800d886:	2100      	movs	r1, #0
 800d888:	6978      	ldr	r0, [r7, #20]
 800d88a:	f004 fc03 	bl	8012094 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2200      	movs	r2, #0
 800d892:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	3310      	adds	r3, #16
 800d898:	4618      	mov	r0, r3
 800d89a:	f00b ff5f 	bl	801975c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	3310      	adds	r3, #16
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f00b ffdf 	bl	8019866 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800d8a8:	69b8      	ldr	r0, [r7, #24]
 800d8aa:	f000 f907 	bl	800dabc <netconn_free>
    return ERR_MEM;
 800d8ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d8b2:	e00a      	b.n	800d8ca <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d005      	beq.n	800d8c8 <accept_function+0x160>
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	69f8      	ldr	r0, [r7, #28]
 800d8c6:	4798      	blx	r3
  }

  return ERR_OK;
 800d8c8:	2300      	movs	r3, #0
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3724      	adds	r7, #36	; 0x24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd90      	pop	{r4, r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0801b0b4 	.word	0x0801b0b4
 800d8d8:	0801b270 	.word	0x0801b270
 800d8dc:	0801b0f8 	.word	0x0801b0f8

0800d8e0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d8e0:	b590      	push	{r4, r7, lr}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d006      	beq.n	800d904 <pcb_new+0x24>
 800d8f6:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <pcb_new+0xc4>)
 800d8f8:	f240 2265 	movw	r2, #613	; 0x265
 800d8fc:	492a      	ldr	r1, [pc, #168]	; (800d9a8 <pcb_new+0xc8>)
 800d8fe:	482b      	ldr	r0, [pc, #172]	; (800d9ac <pcb_new+0xcc>)
 800d900:	f00c faa0 	bl	8019e44 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d90e:	2b10      	cmp	r3, #16
 800d910:	d022      	beq.n	800d958 <pcb_new+0x78>
 800d912:	2b20      	cmp	r3, #32
 800d914:	d133      	bne.n	800d97e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681c      	ldr	r4, [r3, #0]
 800d91a:	7bfb      	ldrb	r3, [r7, #15]
 800d91c:	4618      	mov	r0, r3
 800d91e:	f009 fc00 	bl	8017122 <udp_new_ip_type>
 800d922:	4603      	mov	r3, r0
 800d924:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d02a      	beq.n	800d986 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	2b22      	cmp	r3, #34	; 0x22
 800d938:	d104      	bne.n	800d944 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	2201      	movs	r2, #1
 800d942:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6858      	ldr	r0, [r3, #4]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	461a      	mov	r2, r3
 800d950:	4917      	ldr	r1, [pc, #92]	; (800d9b0 <pcb_new+0xd0>)
 800d952:	f009 fbaf 	bl	80170b4 <udp_recv>
      }
      break;
 800d956:	e016      	b.n	800d986 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681c      	ldr	r4, [r3, #0]
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	4618      	mov	r0, r3
 800d960:	f004 fb34 	bl	8011fcc <tcp_new_ip_type>
 800d964:	4603      	mov	r3, r0
 800d966:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00b      	beq.n	800d98a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4618      	mov	r0, r3
 800d978:	f7ff fece 	bl	800d718 <setup_tcp>
      }
      break;
 800d97c:	e005      	b.n	800d98a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	22fa      	movs	r2, #250	; 0xfa
 800d982:	711a      	strb	r2, [r3, #4]
      return;
 800d984:	e00a      	b.n	800d99c <pcb_new+0xbc>
      break;
 800d986:	bf00      	nop
 800d988:	e000      	b.n	800d98c <pcb_new+0xac>
      break;
 800d98a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d102      	bne.n	800d99c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	22ff      	movs	r2, #255	; 0xff
 800d99a:	711a      	strb	r2, [r3, #4]
  }
}
 800d99c:	3714      	adds	r7, #20
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd90      	pop	{r4, r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	0801b0b4 	.word	0x0801b0b4
 800d9a8:	0801b298 	.word	0x0801b298
 800d9ac:	0801b0f8 	.word	0x0801b0f8
 800d9b0:	0800d1f5 	.word	0x0800d1f5

0800d9b4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d102      	bne.n	800d9d6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7ff ff85 	bl	800d8e0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d9d6:	bf00      	nop
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b086      	sub	sp, #24
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	6039      	str	r1, [r7, #0]
 800d9ea:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d9f0:	2007      	movs	r0, #7
 800d9f2:	f001 fd61 	bl	800f4b8 <memp_malloc>
 800d9f6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <netconn_alloc+0x22>
    return NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	e052      	b.n	800daa8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2200      	movs	r2, #0
 800da06:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	79fa      	ldrb	r2, [r7, #7]
 800da0c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2200      	movs	r2, #0
 800da12:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800da14:	79fb      	ldrb	r3, [r7, #7]
 800da16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da1a:	2b10      	cmp	r3, #16
 800da1c:	d004      	beq.n	800da28 <netconn_alloc+0x48>
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d105      	bne.n	800da2e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800da22:	2306      	movs	r3, #6
 800da24:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800da26:	e00a      	b.n	800da3e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800da28:	2306      	movs	r3, #6
 800da2a:	617b      	str	r3, [r7, #20]
      break;
 800da2c:	e007      	b.n	800da3e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800da2e:	4b20      	ldr	r3, [pc, #128]	; (800dab0 <netconn_alloc+0xd0>)
 800da30:	f240 22e5 	movw	r2, #741	; 0x2e5
 800da34:	491f      	ldr	r1, [pc, #124]	; (800dab4 <netconn_alloc+0xd4>)
 800da36:	4820      	ldr	r0, [pc, #128]	; (800dab8 <netconn_alloc+0xd8>)
 800da38:	f00c fa04 	bl	8019e44 <iprintf>
      goto free_and_return;
 800da3c:	e02f      	b.n	800da9e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	3310      	adds	r3, #16
 800da42:	6979      	ldr	r1, [r7, #20]
 800da44:	4618      	mov	r0, r3
 800da46:	f00b fe6f 	bl	8019728 <sys_mbox_new>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d125      	bne.n	800da9c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	330c      	adds	r3, #12
 800da54:	2100      	movs	r1, #0
 800da56:	4618      	mov	r0, r3
 800da58:	f00b ff12 	bl	8019880 <sys_sem_new>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d005      	beq.n	800da6e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	3310      	adds	r3, #16
 800da66:	4618      	mov	r0, r3
 800da68:	f00b fe78 	bl	801975c <sys_mbox_free>
    goto free_and_return;
 800da6c:	e017      	b.n	800da9e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	3314      	adds	r3, #20
 800da72:	4618      	mov	r0, r3
 800da74:	f00b fef7 	bl	8019866 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2200      	movs	r2, #0
 800da7c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da84:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	683a      	ldr	r2, [r7, #0]
 800da8a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2200      	movs	r2, #0
 800da90:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	7cfa      	ldrb	r2, [r7, #19]
 800da96:	771a      	strb	r2, [r3, #28]
  return conn;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	e005      	b.n	800daa8 <netconn_alloc+0xc8>
    goto free_and_return;
 800da9c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800da9e:	68f9      	ldr	r1, [r7, #12]
 800daa0:	2007      	movs	r0, #7
 800daa2:	f001 fd7f 	bl	800f5a4 <memp_free>
  return NULL;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3718      	adds	r7, #24
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	0801b0b4 	.word	0x0801b0b4
 800dab4:	0801b2b8 	.word	0x0801b2b8
 800dab8:	0801b0f8 	.word	0x0801b0f8

0800dabc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d006      	beq.n	800dada <netconn_free+0x1e>
 800dacc:	4b1b      	ldr	r3, [pc, #108]	; (800db3c <netconn_free+0x80>)
 800dace:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dad2:	491b      	ldr	r1, [pc, #108]	; (800db40 <netconn_free+0x84>)
 800dad4:	481b      	ldr	r0, [pc, #108]	; (800db44 <netconn_free+0x88>)
 800dad6:	f00c f9b5 	bl	8019e44 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	3310      	adds	r3, #16
 800dade:	4618      	mov	r0, r3
 800dae0:	f00b feb0 	bl	8019844 <sys_mbox_valid>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <netconn_free+0x3c>
 800daea:	4b14      	ldr	r3, [pc, #80]	; (800db3c <netconn_free+0x80>)
 800daec:	f240 3223 	movw	r2, #803	; 0x323
 800daf0:	4915      	ldr	r1, [pc, #84]	; (800db48 <netconn_free+0x8c>)
 800daf2:	4814      	ldr	r0, [pc, #80]	; (800db44 <netconn_free+0x88>)
 800daf4:	f00c f9a6 	bl	8019e44 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	3314      	adds	r3, #20
 800dafc:	4618      	mov	r0, r3
 800dafe:	f00b fea1 	bl	8019844 <sys_mbox_valid>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d006      	beq.n	800db16 <netconn_free+0x5a>
 800db08:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <netconn_free+0x80>)
 800db0a:	f240 3226 	movw	r2, #806	; 0x326
 800db0e:	490f      	ldr	r1, [pc, #60]	; (800db4c <netconn_free+0x90>)
 800db10:	480c      	ldr	r0, [pc, #48]	; (800db44 <netconn_free+0x88>)
 800db12:	f00c f997 	bl	8019e44 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	330c      	adds	r3, #12
 800db1a:	4618      	mov	r0, r3
 800db1c:	f00b ff13 	bl	8019946 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	330c      	adds	r3, #12
 800db24:	4618      	mov	r0, r3
 800db26:	f00b ff2c 	bl	8019982 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800db2a:	6879      	ldr	r1, [r7, #4]
 800db2c:	2007      	movs	r0, #7
 800db2e:	f001 fd39 	bl	800f5a4 <memp_free>
}
 800db32:	bf00      	nop
 800db34:	3708      	adds	r7, #8
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	0801b0b4 	.word	0x0801b0b4
 800db40:	0801b2e0 	.word	0x0801b2e0
 800db44:	0801b0f8 	.word	0x0801b0f8
 800db48:	0801b310 	.word	0x0801b310
 800db4c:	0801b34c 	.word	0x0801b34c

0800db50 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	3310      	adds	r3, #16
 800db5c:	4618      	mov	r0, r3
 800db5e:	f00b fe71 	bl	8019844 <sys_mbox_valid>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d02f      	beq.n	800dbc8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800db68:	e018      	b.n	800db9c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db72:	2b10      	cmp	r3, #16
 800db74:	d10e      	bne.n	800db94 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f107 020f 	add.w	r2, r7, #15
 800db7c:	4611      	mov	r1, r2
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff fafe 	bl	800d180 <lwip_netconn_is_err_msg>
 800db84:	4603      	mov	r3, r0
 800db86:	2b00      	cmp	r3, #0
 800db88:	d108      	bne.n	800db9c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f002 fbad 	bl	80102ec <pbuf_free>
 800db92:	e003      	b.n	800db9c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	4618      	mov	r0, r3
 800db98:	f000 fdae 	bl	800e6f8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3310      	adds	r3, #16
 800dba0:	f107 0210 	add.w	r2, r7, #16
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f00b fe35 	bl	8019816 <sys_arch_mbox_tryfetch>
 800dbac:	4603      	mov	r3, r0
 800dbae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbb2:	d1da      	bne.n	800db6a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	3310      	adds	r3, #16
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f00b fdcf 	bl	801975c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	3310      	adds	r3, #16
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f00b fe4f 	bl	8019866 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	3314      	adds	r3, #20
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f00b fe39 	bl	8019844 <sys_mbox_valid>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d034      	beq.n	800dc42 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dbd8:	e01d      	b.n	800dc16 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	f107 020e 	add.w	r2, r7, #14
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7ff facc 	bl	800d180 <lwip_netconn_is_err_msg>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d113      	bne.n	800dc16 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800dbf2:	6978      	ldr	r0, [r7, #20]
 800dbf4:	f7ff ffac 	bl	800db50 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d007      	beq.n	800dc10 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f003 f961 	bl	8010ecc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800dc10:	6978      	ldr	r0, [r7, #20]
 800dc12:	f7ff ff53 	bl	800dabc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	3314      	adds	r3, #20
 800dc1a:	f107 0210 	add.w	r2, r7, #16
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f00b fdf8 	bl	8019816 <sys_arch_mbox_tryfetch>
 800dc26:	4603      	mov	r3, r0
 800dc28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc2c:	d1d5      	bne.n	800dbda <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	3314      	adds	r3, #20
 800dc32:	4618      	mov	r0, r3
 800dc34:	f00b fd92 	bl	801975c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3314      	adds	r3, #20
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f00b fe12 	bl	8019866 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800dc42:	bf00      	nop
 800dc44:	3718      	adds	r7, #24
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
	...

0800dc4c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	460b      	mov	r3, r1
 800dc56:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800dc58:	2300      	movs	r3, #0
 800dc5a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <lwip_netconn_do_close_internal+0x24>
 800dc62:	4b87      	ldr	r3, [pc, #540]	; (800de80 <lwip_netconn_do_close_internal+0x234>)
 800dc64:	f240 32a2 	movw	r2, #930	; 0x3a2
 800dc68:	4986      	ldr	r1, [pc, #536]	; (800de84 <lwip_netconn_do_close_internal+0x238>)
 800dc6a:	4887      	ldr	r0, [pc, #540]	; (800de88 <lwip_netconn_do_close_internal+0x23c>)
 800dc6c:	f00c f8ea 	bl	8019e44 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc78:	2b10      	cmp	r3, #16
 800dc7a:	d006      	beq.n	800dc8a <lwip_netconn_do_close_internal+0x3e>
 800dc7c:	4b80      	ldr	r3, [pc, #512]	; (800de80 <lwip_netconn_do_close_internal+0x234>)
 800dc7e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800dc82:	4982      	ldr	r1, [pc, #520]	; (800de8c <lwip_netconn_do_close_internal+0x240>)
 800dc84:	4880      	ldr	r0, [pc, #512]	; (800de88 <lwip_netconn_do_close_internal+0x23c>)
 800dc86:	f00c f8dd 	bl	8019e44 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	785b      	ldrb	r3, [r3, #1]
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	d006      	beq.n	800dca0 <lwip_netconn_do_close_internal+0x54>
 800dc92:	4b7b      	ldr	r3, [pc, #492]	; (800de80 <lwip_netconn_do_close_internal+0x234>)
 800dc94:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800dc98:	497d      	ldr	r1, [pc, #500]	; (800de90 <lwip_netconn_do_close_internal+0x244>)
 800dc9a:	487b      	ldr	r0, [pc, #492]	; (800de88 <lwip_netconn_do_close_internal+0x23c>)
 800dc9c:	f00c f8d2 	bl	8019e44 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d106      	bne.n	800dcb6 <lwip_netconn_do_close_internal+0x6a>
 800dca8:	4b75      	ldr	r3, [pc, #468]	; (800de80 <lwip_netconn_do_close_internal+0x234>)
 800dcaa:	f240 32a5 	movw	r2, #933	; 0x3a5
 800dcae:	4979      	ldr	r1, [pc, #484]	; (800de94 <lwip_netconn_do_close_internal+0x248>)
 800dcb0:	4875      	ldr	r0, [pc, #468]	; (800de88 <lwip_netconn_do_close_internal+0x23c>)
 800dcb2:	f00c f8c7 	bl	8019e44 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d106      	bne.n	800dccc <lwip_netconn_do_close_internal+0x80>
 800dcbe:	4b70      	ldr	r3, [pc, #448]	; (800de80 <lwip_netconn_do_close_internal+0x234>)
 800dcc0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dcc4:	4974      	ldr	r1, [pc, #464]	; (800de98 <lwip_netconn_do_close_internal+0x24c>)
 800dcc6:	4870      	ldr	r0, [pc, #448]	; (800de88 <lwip_netconn_do_close_internal+0x23c>)
 800dcc8:	f00c f8bc 	bl	8019e44 <iprintf>

  tpcb = conn->pcb.tcp;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6a1b      	ldr	r3, [r3, #32]
 800dcd6:	7a1b      	ldrb	r3, [r3, #8]
 800dcd8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
 800dce4:	f003 0302 	and.w	r3, r3, #2
 800dce8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800dcea:	7bfb      	ldrb	r3, [r7, #15]
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d102      	bne.n	800dcf6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	75bb      	strb	r3, [r7, #22]
 800dcf4:	e01f      	b.n	800dd36 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800dcf6:	7bbb      	ldrb	r3, [r7, #14]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00e      	beq.n	800dd1a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800dd00:	2b05      	cmp	r3, #5
 800dd02:	d007      	beq.n	800dd14 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800dd08:	2b06      	cmp	r3, #6
 800dd0a:	d003      	beq.n	800dd14 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800dd10:	2b08      	cmp	r3, #8
 800dd12:	d102      	bne.n	800dd1a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800dd14:	2301      	movs	r3, #1
 800dd16:	75bb      	strb	r3, [r7, #22]
 800dd18:	e00d      	b.n	800dd36 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800dd1a:	7b7b      	ldrb	r3, [r7, #13]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d008      	beq.n	800dd32 <lwip_netconn_do_close_internal+0xe6>
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	8b5b      	ldrh	r3, [r3, #26]
 800dd24:	f003 0310 	and.w	r3, r3, #16
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d002      	beq.n	800dd32 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	75bb      	strb	r3, [r7, #22]
 800dd30:	e001      	b.n	800dd36 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800dd32:	2300      	movs	r3, #0
 800dd34:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800dd36:	7dbb      	ldrb	r3, [r7, #22]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d003      	beq.n	800dd44 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800dd3c:	2100      	movs	r1, #0
 800dd3e:	6938      	ldr	r0, [r7, #16]
 800dd40:	f004 f952 	bl	8011fe8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	7d1b      	ldrb	r3, [r3, #20]
 800dd48:	2b01      	cmp	r3, #1
 800dd4a:	d104      	bne.n	800dd56 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	6938      	ldr	r0, [r7, #16]
 800dd50:	f004 f9c2 	bl	80120d8 <tcp_accept>
 800dd54:	e01d      	b.n	800dd92 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d007      	beq.n	800dd6c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	6938      	ldr	r0, [r7, #16]
 800dd60:	f004 f954 	bl	801200c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800dd64:	2100      	movs	r1, #0
 800dd66:	6938      	ldr	r0, [r7, #16]
 800dd68:	f004 f9b6 	bl	80120d8 <tcp_accept>
    }
    if (shut_tx) {
 800dd6c:	7b7b      	ldrb	r3, [r7, #13]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800dd72:	2100      	movs	r1, #0
 800dd74:	6938      	ldr	r0, [r7, #16]
 800dd76:	f004 f96b 	bl	8012050 <tcp_sent>
    }
    if (shut_close) {
 800dd7a:	7dbb      	ldrb	r3, [r7, #22]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d008      	beq.n	800dd92 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800dd80:	2200      	movs	r2, #0
 800dd82:	2100      	movs	r1, #0
 800dd84:	6938      	ldr	r0, [r7, #16]
 800dd86:	f004 f9bf 	bl	8012108 <tcp_poll>
      tcp_err(tpcb, NULL);
 800dd8a:	2100      	movs	r1, #0
 800dd8c:	6938      	ldr	r0, [r7, #16]
 800dd8e:	f004 f981 	bl	8012094 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800dd92:	7dbb      	ldrb	r3, [r7, #22]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d005      	beq.n	800dda4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800dd98:	6938      	ldr	r0, [r7, #16]
 800dd9a:	f002 ff51 	bl	8010c40 <tcp_close>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	75fb      	strb	r3, [r7, #23]
 800dda2:	e007      	b.n	800ddb4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	7b7a      	ldrb	r2, [r7, #13]
 800dda8:	4619      	mov	r1, r3
 800ddaa:	6938      	ldr	r0, [r7, #16]
 800ddac:	f002 ff74 	bl	8010c98 <tcp_shutdown>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ddb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d102      	bne.n	800ddc2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	757b      	strb	r3, [r7, #21]
 800ddc0:	e016      	b.n	800ddf0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ddc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddca:	d10f      	bne.n	800ddec <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a1b      	ldr	r3, [r3, #32]
 800ddd0:	7a5b      	ldrb	r3, [r3, #9]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d10c      	bne.n	800ddf0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ddda:	7dbb      	ldrb	r3, [r7, #22]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d007      	beq.n	800ddf0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800dde0:	6938      	ldr	r0, [r7, #16]
 800dde2:	f003 f873 	bl	8010ecc <tcp_abort>
          err = ERR_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	75fb      	strb	r3, [r7, #23]
 800ddea:	e001      	b.n	800ddf0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ddec:	2301      	movs	r3, #1
 800ddee:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ddf0:	7d7b      	ldrb	r3, [r7, #21]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d052      	beq.n	800de9c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a1b      	ldr	r3, [r3, #32]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	330c      	adds	r3, #12
 800ddfe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6a1b      	ldr	r3, [r3, #32]
 800de04:	7dfa      	ldrb	r2, [r7, #23]
 800de06:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800de14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d129      	bne.n	800de70 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800de1c:	7dbb      	ldrb	r3, [r7, #22]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00c      	beq.n	800de3c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2200      	movs	r2, #0
 800de26:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d005      	beq.n	800de3c <lwip_netconn_do_close_internal+0x1f0>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de34:	2200      	movs	r2, #0
 800de36:	2104      	movs	r1, #4
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	4798      	blx	r3
      }
      if (shut_rx) {
 800de3c:	7bbb      	ldrb	r3, [r7, #14]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d009      	beq.n	800de56 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de46:	2b00      	cmp	r3, #0
 800de48:	d005      	beq.n	800de56 <lwip_netconn_do_close_internal+0x20a>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de4e:	2200      	movs	r2, #0
 800de50:	2100      	movs	r1, #0
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
      }
      if (shut_tx) {
 800de56:	7b7b      	ldrb	r3, [r7, #13]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d009      	beq.n	800de70 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de60:	2b00      	cmp	r3, #0
 800de62:	d005      	beq.n	800de70 <lwip_netconn_do_close_internal+0x224>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de68:	2200      	movs	r2, #0
 800de6a:	2102      	movs	r1, #2
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800de76:	68b8      	ldr	r0, [r7, #8]
 800de78:	f00b fd58 	bl	801992c <sys_sem_signal>
    }
    return ERR_OK;
 800de7c:	2300      	movs	r3, #0
 800de7e:	e03c      	b.n	800defa <lwip_netconn_do_close_internal+0x2ae>
 800de80:	0801b0b4 	.word	0x0801b0b4
 800de84:	0801b388 	.word	0x0801b388
 800de88:	0801b0f8 	.word	0x0801b0f8
 800de8c:	0801b398 	.word	0x0801b398
 800de90:	0801b3b8 	.word	0x0801b3b8
 800de94:	0801b3dc 	.word	0x0801b3dc
 800de98:	0801b21c 	.word	0x0801b21c
  }
  if (!close_finished) {
 800de9c:	7d7b      	ldrb	r3, [r7, #21]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d11e      	bne.n	800dee0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	7d1b      	ldrb	r3, [r3, #20]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d106      	bne.n	800deb8 <lwip_netconn_do_close_internal+0x26c>
 800deaa:	4b16      	ldr	r3, [pc, #88]	; (800df04 <lwip_netconn_do_close_internal+0x2b8>)
 800deac:	f240 4241 	movw	r2, #1089	; 0x441
 800deb0:	4915      	ldr	r1, [pc, #84]	; (800df08 <lwip_netconn_do_close_internal+0x2bc>)
 800deb2:	4816      	ldr	r0, [pc, #88]	; (800df0c <lwip_netconn_do_close_internal+0x2c0>)
 800deb4:	f00b ffc6 	bl	8019e44 <iprintf>
    if (shut_tx) {
 800deb8:	7b7b      	ldrb	r3, [r7, #13]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800debe:	4914      	ldr	r1, [pc, #80]	; (800df10 <lwip_netconn_do_close_internal+0x2c4>)
 800dec0:	6938      	ldr	r0, [r7, #16]
 800dec2:	f004 f8c5 	bl	8012050 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800dec6:	2201      	movs	r2, #1
 800dec8:	4912      	ldr	r1, [pc, #72]	; (800df14 <lwip_netconn_do_close_internal+0x2c8>)
 800deca:	6938      	ldr	r0, [r7, #16]
 800decc:	f004 f91c 	bl	8012108 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ded0:	4911      	ldr	r1, [pc, #68]	; (800df18 <lwip_netconn_do_close_internal+0x2cc>)
 800ded2:	6938      	ldr	r0, [r7, #16]
 800ded4:	f004 f8de 	bl	8012094 <tcp_err>
    tcp_arg(tpcb, conn);
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	6938      	ldr	r0, [r7, #16]
 800dedc:	f004 f884 	bl	8011fe8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800dee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <lwip_netconn_do_close_internal+0x2aa>
 800dee8:	4b06      	ldr	r3, [pc, #24]	; (800df04 <lwip_netconn_do_close_internal+0x2b8>)
 800deea:	f240 424d 	movw	r2, #1101	; 0x44d
 800deee:	490b      	ldr	r1, [pc, #44]	; (800df1c <lwip_netconn_do_close_internal+0x2d0>)
 800def0:	4806      	ldr	r0, [pc, #24]	; (800df0c <lwip_netconn_do_close_internal+0x2c0>)
 800def2:	f00b ffa7 	bl	8019e44 <iprintf>
  return err;
 800def6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800defa:	4618      	mov	r0, r3
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	0801b0b4 	.word	0x0801b0b4
 800df08:	0801b3f0 	.word	0x0801b3f0
 800df0c:	0801b0f8 	.word	0x0801b0f8
 800df10:	0800d4c5 	.word	0x0800d4c5
 800df14:	0800d3fd 	.word	0x0800d3fd
 800df18:	0800d56d 	.word	0x0800d56d
 800df1c:	0801b414 	.word	0x0801b414

0800df20 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d025      	beq.n	800df82 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df40:	2b10      	cmp	r3, #16
 800df42:	d00e      	beq.n	800df62 <lwip_netconn_do_bind+0x42>
 800df44:	2b20      	cmp	r3, #32
 800df46:	d119      	bne.n	800df7c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	6858      	ldr	r0, [r3, #4]
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	6899      	ldr	r1, [r3, #8]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	899b      	ldrh	r3, [r3, #12]
 800df56:	461a      	mov	r2, r3
 800df58:	f009 f824 	bl	8016fa4 <udp_bind>
 800df5c:	4603      	mov	r3, r0
 800df5e:	73fb      	strb	r3, [r7, #15]
        break;
 800df60:	e011      	b.n	800df86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6858      	ldr	r0, [r3, #4]
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	6899      	ldr	r1, [r3, #8]
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	899b      	ldrh	r3, [r3, #12]
 800df70:	461a      	mov	r2, r3
 800df72:	f002 ffb7 	bl	8010ee4 <tcp_bind>
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
        break;
 800df7a:	e004      	b.n	800df86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800df7c:	23fa      	movs	r3, #250	; 0xfa
 800df7e:	73fb      	strb	r3, [r7, #15]
        break;
 800df80:	e001      	b.n	800df86 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800df82:	23fa      	movs	r3, #250	; 0xfa
 800df84:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	7bfa      	ldrb	r2, [r7, #15]
 800df8a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800df8c:	bf00      	nop
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d07f      	beq.n	800e0aa <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dfb4:	2b10      	cmp	r3, #16
 800dfb6:	d175      	bne.n	800e0a4 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	785b      	ldrb	r3, [r3, #1]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d165      	bne.n	800e08e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	7d1b      	ldrb	r3, [r3, #20]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d002      	beq.n	800dfd4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800dfce:	23fa      	movs	r3, #250	; 0xfa
 800dfd0:	72fb      	strb	r3, [r7, #11]
 800dfd2:	e06c      	b.n	800e0ae <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800dfd4:	23ff      	movs	r3, #255	; 0xff
 800dfd6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800dfd8:	697b      	ldr	r3, [r7, #20]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	685b      	ldr	r3, [r3, #4]
 800dfde:	f107 020b 	add.w	r2, r7, #11
 800dfe2:	7cf9      	ldrb	r1, [r7, #19]
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f003 f835 	bl	8011054 <tcp_listen_with_backlog_and_err>
 800dfea:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d05d      	beq.n	800e0ae <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3310      	adds	r3, #16
 800dff8:	4618      	mov	r0, r3
 800dffa:	f00b fc23 	bl	8019844 <sys_mbox_valid>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00b      	beq.n	800e01c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	3310      	adds	r3, #16
 800e00a:	4618      	mov	r0, r3
 800e00c:	f00b fba6 	bl	801975c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3310      	adds	r3, #16
 800e016:	4618      	mov	r0, r3
 800e018:	f00b fc25 	bl	8019866 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800e01c:	2300      	movs	r3, #0
 800e01e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3314      	adds	r3, #20
 800e026:	4618      	mov	r0, r3
 800e028:	f00b fc0c 	bl	8019844 <sys_mbox_valid>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d108      	bne.n	800e044 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e032:	697b      	ldr	r3, [r7, #20]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	3314      	adds	r3, #20
 800e038:	2106      	movs	r1, #6
 800e03a:	4618      	mov	r0, r3
 800e03c:	f00b fb74 	bl	8019728 <sys_mbox_new>
 800e040:	4603      	mov	r3, r0
 800e042:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800e044:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d118      	bne.n	800e07e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2202      	movs	r2, #2
 800e052:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	685a      	ldr	r2, [r3, #4]
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	4619      	mov	r1, r3
 800e068:	4610      	mov	r0, r2
 800e06a:	f003 ffbd 	bl	8011fe8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	4912      	ldr	r1, [pc, #72]	; (800e0c0 <lwip_netconn_do_listen+0x12c>)
 800e076:	4618      	mov	r0, r3
 800e078:	f004 f82e 	bl	80120d8 <tcp_accept>
 800e07c:	e017      	b.n	800e0ae <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f002 fdde 	bl	8010c40 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2200      	movs	r2, #0
 800e08a:	605a      	str	r2, [r3, #4]
 800e08c:	e00f      	b.n	800e0ae <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	2b02      	cmp	r3, #2
 800e096:	d102      	bne.n	800e09e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800e098:	2300      	movs	r3, #0
 800e09a:	72fb      	strb	r3, [r7, #11]
 800e09c:	e007      	b.n	800e0ae <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800e09e:	23f5      	movs	r3, #245	; 0xf5
 800e0a0:	72fb      	strb	r3, [r7, #11]
 800e0a2:	e004      	b.n	800e0ae <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800e0a4:	23f0      	movs	r3, #240	; 0xf0
 800e0a6:	72fb      	strb	r3, [r7, #11]
 800e0a8:	e001      	b.n	800e0ae <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800e0aa:	23f5      	movs	r3, #245	; 0xf5
 800e0ac:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800e0ae:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e0b6:	bf00      	nop
 800e0b8:	3718      	adds	r7, #24
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	0800d769 	.word	0x0800d769

0800e0c4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d022      	beq.n	800e126 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0ea:	2b10      	cmp	r3, #16
 800e0ec:	d11b      	bne.n	800e126 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0fa:	d202      	bcs.n	800e102 <lwip_netconn_do_recv+0x3e>
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	e001      	b.n	800e106 <lwip_netconn_do_recv+0x42>
 800e102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e106:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	89fa      	ldrh	r2, [r7, #14]
 800e110:	4611      	mov	r1, r2
 800e112:	4618      	mov	r0, r3
 800e114:	f003 f8a2 	bl	801125c <tcp_recved>
        remaining -= recved;
 800e118:	89fb      	ldrh	r3, [r7, #14]
 800e11a:	697a      	ldr	r2, [r7, #20]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d1e6      	bne.n	800e0f4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e126:	bf00      	nop
 800e128:	3718      	adds	r7, #24
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
	...

0800e130 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	460b      	mov	r3, r1
 800e13a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e13c:	2300      	movs	r3, #0
 800e13e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <lwip_netconn_do_writemore+0x24>
 800e146:	4b96      	ldr	r3, [pc, #600]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e148:	f240 6273 	movw	r2, #1651	; 0x673
 800e14c:	4995      	ldr	r1, [pc, #596]	; (800e3a4 <lwip_netconn_do_writemore+0x274>)
 800e14e:	4896      	ldr	r0, [pc, #600]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e150:	f00b fe78 	bl	8019e44 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	785b      	ldrb	r3, [r3, #1]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d006      	beq.n	800e16a <lwip_netconn_do_writemore+0x3a>
 800e15c:	4b90      	ldr	r3, [pc, #576]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e15e:	f240 6274 	movw	r2, #1652	; 0x674
 800e162:	4992      	ldr	r1, [pc, #584]	; (800e3ac <lwip_netconn_do_writemore+0x27c>)
 800e164:	4890      	ldr	r0, [pc, #576]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e166:	f00b fe6d 	bl	8019e44 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a1b      	ldr	r3, [r3, #32]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d106      	bne.n	800e180 <lwip_netconn_do_writemore+0x50>
 800e172:	4b8b      	ldr	r3, [pc, #556]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e174:	f240 6275 	movw	r2, #1653	; 0x675
 800e178:	498d      	ldr	r1, [pc, #564]	; (800e3b0 <lwip_netconn_do_writemore+0x280>)
 800e17a:	488b      	ldr	r0, [pc, #556]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e17c:	f00b fe62 	bl	8019e44 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <lwip_netconn_do_writemore+0x66>
 800e188:	4b85      	ldr	r3, [pc, #532]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e18a:	f240 6276 	movw	r2, #1654	; 0x676
 800e18e:	4989      	ldr	r1, [pc, #548]	; (800e3b4 <lwip_netconn_do_writemore+0x284>)
 800e190:	4885      	ldr	r0, [pc, #532]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e192:	f00b fe57 	bl	8019e44 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6a1b      	ldr	r3, [r3, #32]
 800e19a:	699a      	ldr	r2, [r3, #24]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6a1b      	ldr	r3, [r3, #32]
 800e1a0:	695b      	ldr	r3, [r3, #20]
 800e1a2:	429a      	cmp	r2, r3
 800e1a4:	d306      	bcc.n	800e1b4 <lwip_netconn_do_writemore+0x84>
 800e1a6:	4b7e      	ldr	r3, [pc, #504]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e1a8:	f240 6277 	movw	r2, #1655	; 0x677
 800e1ac:	4982      	ldr	r1, [pc, #520]	; (800e3b8 <lwip_netconn_do_writemore+0x288>)
 800e1ae:	487e      	ldr	r0, [pc, #504]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e1b0:	f00b fe48 	bl	8019e44 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a1b      	ldr	r3, [r3, #32]
 800e1b8:	899b      	ldrh	r3, [r3, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <lwip_netconn_do_writemore+0x9c>
 800e1be:	4b78      	ldr	r3, [pc, #480]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e1c0:	f240 6279 	movw	r2, #1657	; 0x679
 800e1c4:	497d      	ldr	r1, [pc, #500]	; (800e3bc <lwip_netconn_do_writemore+0x28c>)
 800e1c6:	4878      	ldr	r0, [pc, #480]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e1c8:	f00b fe3c 	bl	8019e44 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6a1b      	ldr	r3, [r3, #32]
 800e1d0:	7f1b      	ldrb	r3, [r3, #28]
 800e1d2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	7f1b      	ldrb	r3, [r3, #28]
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d104      	bne.n	800e1ea <lwip_netconn_do_writemore+0xba>
 800e1e0:	7ebb      	ldrb	r3, [r7, #26]
 800e1e2:	f003 0304 	and.w	r3, r3, #4
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <lwip_netconn_do_writemore+0xbe>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e000      	b.n	800e1f0 <lwip_netconn_do_writemore+0xc0>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6a1b      	ldr	r3, [r3, #32]
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6a1b      	ldr	r3, [r3, #32]
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	4413      	add	r3, r2
 800e202:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	685a      	ldr	r2, [r3, #4]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6a1b      	ldr	r3, [r3, #32]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	1ad3      	subs	r3, r2, r3
 800e214:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e21c:	d307      	bcc.n	800e22e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e21e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e222:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e224:	7ebb      	ldrb	r3, [r7, #26]
 800e226:	f043 0302 	orr.w	r3, r3, #2
 800e22a:	76bb      	strb	r3, [r7, #26]
 800e22c:	e001      	b.n	800e232 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e22e:	693b      	ldr	r3, [r7, #16]
 800e230:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e23a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e23c:	89fa      	ldrh	r2, [r7, #14]
 800e23e:	8bbb      	ldrh	r3, [r7, #28]
 800e240:	429a      	cmp	r2, r3
 800e242:	d216      	bcs.n	800e272 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e244:	89fb      	ldrh	r3, [r7, #14]
 800e246:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e248:	7e3b      	ldrb	r3, [r7, #24]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00d      	beq.n	800e26a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e24e:	8bbb      	ldrh	r3, [r7, #28]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d10e      	bne.n	800e272 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	699b      	ldr	r3, [r3, #24]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d102      	bne.n	800e264 <lwip_netconn_do_writemore+0x134>
 800e25e:	f06f 0306 	mvn.w	r3, #6
 800e262:	e000      	b.n	800e266 <lwip_netconn_do_writemore+0x136>
 800e264:	2300      	movs	r3, #0
 800e266:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e268:	e07d      	b.n	800e366 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e26a:	7ebb      	ldrb	r3, [r7, #26]
 800e26c:	f043 0302 	orr.w	r3, r3, #2
 800e270:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6a1b      	ldr	r3, [r3, #32]
 800e276:	691a      	ldr	r2, [r3, #16]
 800e278:	8bbb      	ldrh	r3, [r7, #28]
 800e27a:	441a      	add	r2, r3
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6a1b      	ldr	r3, [r3, #32]
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	429a      	cmp	r2, r3
 800e286:	d906      	bls.n	800e296 <lwip_netconn_do_writemore+0x166>
 800e288:	4b45      	ldr	r3, [pc, #276]	; (800e3a0 <lwip_netconn_do_writemore+0x270>)
 800e28a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e28e:	494c      	ldr	r1, [pc, #304]	; (800e3c0 <lwip_netconn_do_writemore+0x290>)
 800e290:	4845      	ldr	r0, [pc, #276]	; (800e3a8 <lwip_netconn_do_writemore+0x278>)
 800e292:	f00b fdd7 	bl	8019e44 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e296:	8bbb      	ldrh	r3, [r7, #28]
 800e298:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d103      	bne.n	800e2a8 <lwip_netconn_do_writemore+0x178>
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2a6:	d209      	bcs.n	800e2bc <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e2ac:	8bba      	ldrh	r2, [r7, #28]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d10b      	bne.n	800e2ca <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6a1b      	ldr	r3, [r3, #32]
 800e2b6:	899b      	ldrh	r3, [r3, #12]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d906      	bls.n	800e2ca <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e2c0:	7ebb      	ldrb	r3, [r7, #26]
 800e2c2:	f043 0302 	orr.w	r3, r3, #2
 800e2c6:	76bb      	strb	r3, [r7, #26]
 800e2c8:	e001      	b.n	800e2ce <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6858      	ldr	r0, [r3, #4]
 800e2d2:	7ebb      	ldrb	r3, [r7, #26]
 800e2d4:	8bba      	ldrh	r2, [r7, #28]
 800e2d6:	6979      	ldr	r1, [r7, #20]
 800e2d8:	f006 fdc8 	bl	8014e6c <tcp_write>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e2e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d12c      	bne.n	800e342 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6a1b      	ldr	r3, [r3, #32]
 800e2ec:	6999      	ldr	r1, [r3, #24]
 800e2ee:	8bba      	ldrh	r2, [r7, #28]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a1b      	ldr	r3, [r3, #32]
 800e2f4:	440a      	add	r2, r1
 800e2f6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6a1b      	ldr	r3, [r3, #32]
 800e2fc:	6919      	ldr	r1, [r3, #16]
 800e2fe:	8bba      	ldrh	r2, [r7, #28]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	440a      	add	r2, r1
 800e306:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a1b      	ldr	r3, [r3, #32]
 800e30c:	691a      	ldr	r2, [r3, #16]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6a1b      	ldr	r3, [r3, #32]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	429a      	cmp	r2, r3
 800e318:	d113      	bne.n	800e342 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a1b      	ldr	r3, [r3, #32]
 800e31e:	899a      	ldrh	r2, [r3, #12]
 800e320:	3a01      	subs	r2, #1
 800e322:	b292      	uxth	r2, r2
 800e324:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	899b      	ldrh	r3, [r3, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d008      	beq.n	800e342 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	689a      	ldr	r2, [r3, #8]
 800e336:	3208      	adds	r2, #8
 800e338:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6a1b      	ldr	r3, [r3, #32]
 800e33e:	2200      	movs	r2, #0
 800e340:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e342:	7e7b      	ldrb	r3, [r7, #25]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <lwip_netconn_do_writemore+0x222>
 800e348:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f43f af50 	beq.w	800e1f2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e352:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d004      	beq.n	800e364 <lwip_netconn_do_writemore+0x234>
 800e35a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e35e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e362:	d146      	bne.n	800e3f2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e364:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e366:	7e3b      	ldrb	r3, [r7, #24]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d02b      	beq.n	800e3c4 <lwip_netconn_do_writemore+0x294>
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a1b      	ldr	r3, [r3, #32]
 800e370:	699a      	ldr	r2, [r3, #24]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a1b      	ldr	r3, [r3, #32]
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d223      	bcs.n	800e3c4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2b00      	cmp	r3, #0
 800e382:	d005      	beq.n	800e390 <lwip_netconn_do_writemore+0x260>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e388:	2200      	movs	r2, #0
 800e38a:	2103      	movs	r1, #3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	7f1b      	ldrb	r3, [r3, #28]
 800e394:	f043 0310 	orr.w	r3, r3, #16
 800e398:	b2da      	uxtb	r2, r3
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	771a      	strb	r2, [r3, #28]
 800e39e:	e028      	b.n	800e3f2 <lwip_netconn_do_writemore+0x2c2>
 800e3a0:	0801b0b4 	.word	0x0801b0b4
 800e3a4:	0801b20c 	.word	0x0801b20c
 800e3a8:	0801b0f8 	.word	0x0801b0f8
 800e3ac:	0801b514 	.word	0x0801b514
 800e3b0:	0801b21c 	.word	0x0801b21c
 800e3b4:	0801b534 	.word	0x0801b534
 800e3b8:	0801b54c 	.word	0x0801b54c
 800e3bc:	0801b58c 	.word	0x0801b58c
 800e3c0:	0801b5b4 	.word	0x0801b5b4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e3cc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e3d0:	d305      	bcc.n	800e3de <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d909      	bls.n	800e3f2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d005      	beq.n	800e3f2 <lwip_netconn_do_writemore+0x2c2>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	2103      	movs	r1, #3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e3f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d11d      	bne.n	800e436 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6a1b      	ldr	r3, [r3, #32]
 800e3fe:	699a      	ldr	r2, [r3, #24]
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6a1b      	ldr	r3, [r3, #32]
 800e404:	695b      	ldr	r3, [r3, #20]
 800e406:	429a      	cmp	r2, r3
 800e408:	d002      	beq.n	800e410 <lwip_netconn_do_writemore+0x2e0>
 800e40a:	7e3b      	ldrb	r3, [r7, #24]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d001      	beq.n	800e414 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e410:	2301      	movs	r3, #1
 800e412:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	685b      	ldr	r3, [r3, #4]
 800e418:	4618      	mov	r0, r3
 800e41a:	f007 fb11 	bl	8015a40 <tcp_output>
 800e41e:	4603      	mov	r3, r0
 800e420:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e422:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e426:	f113 0f04 	cmn.w	r3, #4
 800e42a:	d12c      	bne.n	800e486 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e42c:	7b3b      	ldrb	r3, [r7, #12]
 800e42e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e430:	2301      	movs	r3, #1
 800e432:	76fb      	strb	r3, [r7, #27]
 800e434:	e027      	b.n	800e486 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e436:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e43a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e43e:	d120      	bne.n	800e482 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	4618      	mov	r0, r3
 800e446:	f007 fafb 	bl	8015a40 <tcp_output>
 800e44a:	4603      	mov	r3, r0
 800e44c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e44e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e452:	f113 0f04 	cmn.w	r3, #4
 800e456:	d104      	bne.n	800e462 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e458:	7b7b      	ldrb	r3, [r7, #13]
 800e45a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e45c:	2301      	movs	r3, #1
 800e45e:	76fb      	strb	r3, [r7, #27]
 800e460:	e011      	b.n	800e486 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e462:	7e3b      	ldrb	r3, [r7, #24]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00e      	beq.n	800e486 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a1b      	ldr	r3, [r3, #32]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d102      	bne.n	800e478 <lwip_netconn_do_writemore+0x348>
 800e472:	f06f 0306 	mvn.w	r3, #6
 800e476:	e000      	b.n	800e47a <lwip_netconn_do_writemore+0x34a>
 800e478:	2300      	movs	r3, #0
 800e47a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e47c:	2301      	movs	r3, #1
 800e47e:	76fb      	strb	r3, [r7, #27]
 800e480:	e001      	b.n	800e486 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e482:	2301      	movs	r3, #1
 800e484:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e486:	7efb      	ldrb	r3, [r7, #27]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d015      	beq.n	800e4b8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6a1b      	ldr	r3, [r3, #32]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	330c      	adds	r3, #12
 800e494:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6a1b      	ldr	r3, [r3, #32]
 800e49a:	7ffa      	ldrb	r2, [r7, #31]
 800e49c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e4aa:	78fb      	ldrb	r3, [r7, #3]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d006      	beq.n	800e4be <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e4b0:	68b8      	ldr	r0, [r7, #8]
 800e4b2:	f00b fa3b 	bl	801992c <sys_sem_signal>
 800e4b6:	e002      	b.n	800e4be <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e4b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4bc:	e000      	b.n	800e4c0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e4be:	2300      	movs	r3, #0
}
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	3720      	adds	r7, #32
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7fe fdff 	bl	800d0dc <netconn_err>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e4e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d166      	bne.n	800e5b8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e4f4:	2b10      	cmp	r3, #16
 800e4f6:	d15d      	bne.n	800e5b4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	785b      	ldrb	r3, [r3, #1]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d002      	beq.n	800e508 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e502:	23fb      	movs	r3, #251	; 0xfb
 800e504:	73fb      	strb	r3, [r7, #15]
 800e506:	e057      	b.n	800e5b8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d04d      	beq.n	800e5ae <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2201      	movs	r2, #1
 800e518:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d006      	beq.n	800e532 <lwip_netconn_do_write+0x6a>
 800e524:	4b28      	ldr	r3, [pc, #160]	; (800e5c8 <lwip_netconn_do_write+0x100>)
 800e526:	f240 7223 	movw	r2, #1827	; 0x723
 800e52a:	4928      	ldr	r1, [pc, #160]	; (800e5cc <lwip_netconn_do_write+0x104>)
 800e52c:	4828      	ldr	r0, [pc, #160]	; (800e5d0 <lwip_netconn_do_write+0x108>)
 800e52e:	f00b fc89 	bl	8019e44 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d106      	bne.n	800e548 <lwip_netconn_do_write+0x80>
 800e53a:	4b23      	ldr	r3, [pc, #140]	; (800e5c8 <lwip_netconn_do_write+0x100>)
 800e53c:	f240 7224 	movw	r2, #1828	; 0x724
 800e540:	4924      	ldr	r1, [pc, #144]	; (800e5d4 <lwip_netconn_do_write+0x10c>)
 800e542:	4823      	ldr	r0, [pc, #140]	; (800e5d0 <lwip_netconn_do_write+0x108>)
 800e544:	f00b fc7e 	bl	8019e44 <iprintf>
        msg->conn->current_msg = msg;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	68ba      	ldr	r2, [r7, #8]
 800e54e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	2100      	movs	r1, #0
 800e556:	4618      	mov	r0, r3
 800e558:	f7ff fdea 	bl	800e130 <lwip_netconn_do_writemore>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d02e      	beq.n	800e5c0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	785b      	ldrb	r3, [r3, #1]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d006      	beq.n	800e57a <lwip_netconn_do_write+0xb2>
 800e56c:	4b16      	ldr	r3, [pc, #88]	; (800e5c8 <lwip_netconn_do_write+0x100>)
 800e56e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800e572:	4919      	ldr	r1, [pc, #100]	; (800e5d8 <lwip_netconn_do_write+0x110>)
 800e574:	4816      	ldr	r0, [pc, #88]	; (800e5d0 <lwip_netconn_do_write+0x108>)
 800e576:	f00b fc65 	bl	8019e44 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e57a:	4818      	ldr	r0, [pc, #96]	; (800e5dc <lwip_netconn_do_write+0x114>)
 800e57c:	f00b fa3f 	bl	80199fe <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	330c      	adds	r3, #12
 800e586:	2100      	movs	r1, #0
 800e588:	4618      	mov	r0, r3
 800e58a:	f00b f99e 	bl	80198ca <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e58e:	4813      	ldr	r0, [pc, #76]	; (800e5dc <lwip_netconn_do_write+0x114>)
 800e590:	f00b fa26 	bl	80199e0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	785b      	ldrb	r3, [r3, #1]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d110      	bne.n	800e5c0 <lwip_netconn_do_write+0xf8>
 800e59e:	4b0a      	ldr	r3, [pc, #40]	; (800e5c8 <lwip_netconn_do_write+0x100>)
 800e5a0:	f240 722c 	movw	r2, #1836	; 0x72c
 800e5a4:	490c      	ldr	r1, [pc, #48]	; (800e5d8 <lwip_netconn_do_write+0x110>)
 800e5a6:	480a      	ldr	r0, [pc, #40]	; (800e5d0 <lwip_netconn_do_write+0x108>)
 800e5a8:	f00b fc4c 	bl	8019e44 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e5ac:	e008      	b.n	800e5c0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e5ae:	23f5      	movs	r3, #245	; 0xf5
 800e5b0:	73fb      	strb	r3, [r7, #15]
 800e5b2:	e001      	b.n	800e5b8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e5b4:	23fa      	movs	r3, #250	; 0xfa
 800e5b6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	7bfa      	ldrb	r2, [r7, #15]
 800e5bc:	711a      	strb	r2, [r3, #4]
 800e5be:	e000      	b.n	800e5c2 <lwip_netconn_do_write+0xfa>
        return;
 800e5c0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e5c2:	3710      	adds	r7, #16
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}
 800e5c8:	0801b0b4 	.word	0x0801b0b4
 800e5cc:	0801b458 	.word	0x0801b458
 800e5d0:	0801b0f8 	.word	0x0801b0f8
 800e5d4:	0801b5e0 	.word	0x0801b5e0
 800e5d8:	0801b474 	.word	0x0801b474
 800e5dc:	2004b06c 	.word	0x2004b06c

0800e5e0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	785b      	ldrb	r3, [r3, #1]
 800e5f2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d069      	beq.n	800e6d2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e608:	2b10      	cmp	r3, #16
 800e60a:	d162      	bne.n	800e6d2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e610:	2b03      	cmp	r3, #3
 800e612:	d002      	beq.n	800e61a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e614:	7afb      	ldrb	r3, [r7, #11]
 800e616:	2b02      	cmp	r3, #2
 800e618:	d05b      	beq.n	800e6d2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e61a:	7afb      	ldrb	r3, [r7, #11]
 800e61c:	2b03      	cmp	r3, #3
 800e61e:	d103      	bne.n	800e628 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	22f5      	movs	r2, #245	; 0xf5
 800e624:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e626:	e059      	b.n	800e6dc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e628:	7afb      	ldrb	r3, [r7, #11]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d103      	bne.n	800e636 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	22fb      	movs	r2, #251	; 0xfb
 800e632:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e634:	e052      	b.n	800e6dc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	7a1b      	ldrb	r3, [r3, #8]
 800e63a:	f003 0301 	and.w	r3, r3, #1
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d004      	beq.n	800e64c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff fa82 	bl	800db50 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d006      	beq.n	800e664 <lwip_netconn_do_close+0x84>
 800e656:	4b23      	ldr	r3, [pc, #140]	; (800e6e4 <lwip_netconn_do_close+0x104>)
 800e658:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e65c:	4922      	ldr	r1, [pc, #136]	; (800e6e8 <lwip_netconn_do_close+0x108>)
 800e65e:	4823      	ldr	r0, [pc, #140]	; (800e6ec <lwip_netconn_do_close+0x10c>)
 800e660:	f00b fbf0 	bl	8019e44 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2204      	movs	r2, #4
 800e66a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68fa      	ldr	r2, [r7, #12]
 800e672:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	2100      	movs	r1, #0
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff fae6 	bl	800dc4c <lwip_netconn_do_close_internal>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d029      	beq.n	800e6da <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	785b      	ldrb	r3, [r3, #1]
 800e68c:	2b04      	cmp	r3, #4
 800e68e:	d006      	beq.n	800e69e <lwip_netconn_do_close+0xbe>
 800e690:	4b14      	ldr	r3, [pc, #80]	; (800e6e4 <lwip_netconn_do_close+0x104>)
 800e692:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e696:	4916      	ldr	r1, [pc, #88]	; (800e6f0 <lwip_netconn_do_close+0x110>)
 800e698:	4814      	ldr	r0, [pc, #80]	; (800e6ec <lwip_netconn_do_close+0x10c>)
 800e69a:	f00b fbd3 	bl	8019e44 <iprintf>
        UNLOCK_TCPIP_CORE();
 800e69e:	4815      	ldr	r0, [pc, #84]	; (800e6f4 <lwip_netconn_do_close+0x114>)
 800e6a0:	f00b f9ad 	bl	80199fe <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	330c      	adds	r3, #12
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f00b f90c 	bl	80198ca <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e6b2:	4810      	ldr	r0, [pc, #64]	; (800e6f4 <lwip_netconn_do_close+0x114>)
 800e6b4:	f00b f994 	bl	80199e0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	785b      	ldrb	r3, [r3, #1]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d00b      	beq.n	800e6da <lwip_netconn_do_close+0xfa>
 800e6c2:	4b08      	ldr	r3, [pc, #32]	; (800e6e4 <lwip_netconn_do_close+0x104>)
 800e6c4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e6c8:	4909      	ldr	r1, [pc, #36]	; (800e6f0 <lwip_netconn_do_close+0x110>)
 800e6ca:	4808      	ldr	r0, [pc, #32]	; (800e6ec <lwip_netconn_do_close+0x10c>)
 800e6cc:	f00b fbba 	bl	8019e44 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e6d0:	e003      	b.n	800e6da <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	22f5      	movs	r2, #245	; 0xf5
 800e6d6:	711a      	strb	r2, [r3, #4]
 800e6d8:	e000      	b.n	800e6dc <lwip_netconn_do_close+0xfc>
      return;
 800e6da:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	0801b0b4 	.word	0x0801b0b4
 800e6e8:	0801b458 	.word	0x0801b458
 800e6ec:	0801b0f8 	.word	0x0801b0f8
 800e6f0:	0801b474 	.word	0x0801b474
 800e6f4:	2004b06c 	.word	0x2004b06c

0800e6f8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d013      	beq.n	800e72e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00b      	beq.n	800e726 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	4618      	mov	r0, r3
 800e714:	f001 fdea 	bl	80102ec <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	605a      	str	r2, [r3, #4]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685a      	ldr	r2, [r3, #4]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e726:	6879      	ldr	r1, [r7, #4]
 800e728:	2006      	movs	r0, #6
 800e72a:	f000 ff3b 	bl	800f5a4 <memp_free>
  }
}
 800e72e:	bf00      	nop
 800e730:	3708      	adds	r7, #8
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}
	...

0800e738 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d108      	bne.n	800e758 <netbuf_next+0x20>
 800e746:	4b11      	ldr	r3, [pc, #68]	; (800e78c <netbuf_next+0x54>)
 800e748:	22e0      	movs	r2, #224	; 0xe0
 800e74a:	4911      	ldr	r1, [pc, #68]	; (800e790 <netbuf_next+0x58>)
 800e74c:	4811      	ldr	r0, [pc, #68]	; (800e794 <netbuf_next+0x5c>)
 800e74e:	f00b fb79 	bl	8019e44 <iprintf>
 800e752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e756:	e014      	b.n	800e782 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <netbuf_next+0x30>
    return -1;
 800e762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e766:	e00c      	b.n	800e782 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	685b      	ldr	r3, [r3, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d101      	bne.n	800e780 <netbuf_next+0x48>
    return 1;
 800e77c:	2301      	movs	r3, #1
 800e77e:	e000      	b.n	800e782 <netbuf_next+0x4a>
  }
  return 0;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	0801b60c 	.word	0x0801b60c
 800e790:	0801b76c 	.word	0x0801b76c
 800e794:	0801b65c 	.word	0x0801b65c

0800e798 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e7a2:	f008 fa05 	bl	8016bb0 <sys_timeouts_sleeptime>
 800e7a6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7ae:	d10b      	bne.n	800e7c8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e7b0:	4813      	ldr	r0, [pc, #76]	; (800e800 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7b2:	f00b f924 	bl	80199fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f00a fffa 	bl	80197b4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e7c0:	480f      	ldr	r0, [pc, #60]	; (800e800 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7c2:	f00b f90d 	bl	80199e0 <sys_mutex_lock>
    return;
 800e7c6:	e018      	b.n	800e7fa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d102      	bne.n	800e7d4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e7ce:	f008 f9b5 	bl	8016b3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e7d2:	e7e6      	b.n	800e7a2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e7d4:	480a      	ldr	r0, [pc, #40]	; (800e800 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7d6:	f00b f912 	bl	80199fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	6839      	ldr	r1, [r7, #0]
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f00a ffe8 	bl	80197b4 <sys_arch_mbox_fetch>
 800e7e4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e7e6:	4806      	ldr	r0, [pc, #24]	; (800e800 <tcpip_timeouts_mbox_fetch+0x68>)
 800e7e8:	f00b f8fa 	bl	80199e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7f2:	d102      	bne.n	800e7fa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e7f4:	f008 f9a2 	bl	8016b3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e7f8:	e7d3      	b.n	800e7a2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}
 800e800:	2004b06c 	.word	0x2004b06c

0800e804 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e80c:	4810      	ldr	r0, [pc, #64]	; (800e850 <tcpip_thread+0x4c>)
 800e80e:	f00b f8e7 	bl	80199e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e812:	4b10      	ldr	r3, [pc, #64]	; (800e854 <tcpip_thread+0x50>)
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d005      	beq.n	800e826 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e81a:	4b0e      	ldr	r3, [pc, #56]	; (800e854 <tcpip_thread+0x50>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a0e      	ldr	r2, [pc, #56]	; (800e858 <tcpip_thread+0x54>)
 800e820:	6812      	ldr	r2, [r2, #0]
 800e822:	4610      	mov	r0, r2
 800e824:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e826:	f107 030c 	add.w	r3, r7, #12
 800e82a:	4619      	mov	r1, r3
 800e82c:	480b      	ldr	r0, [pc, #44]	; (800e85c <tcpip_thread+0x58>)
 800e82e:	f7ff ffb3 	bl	800e798 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d106      	bne.n	800e846 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e838:	4b09      	ldr	r3, [pc, #36]	; (800e860 <tcpip_thread+0x5c>)
 800e83a:	2291      	movs	r2, #145	; 0x91
 800e83c:	4909      	ldr	r1, [pc, #36]	; (800e864 <tcpip_thread+0x60>)
 800e83e:	480a      	ldr	r0, [pc, #40]	; (800e868 <tcpip_thread+0x64>)
 800e840:	f00b fb00 	bl	8019e44 <iprintf>
      continue;
 800e844:	e003      	b.n	800e84e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	4618      	mov	r0, r3
 800e84a:	f000 f80f 	bl	800e86c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e84e:	e7ea      	b.n	800e826 <tcpip_thread+0x22>
 800e850:	2004b06c 	.word	0x2004b06c
 800e854:	2004b060 	.word	0x2004b060
 800e858:	2004b064 	.word	0x2004b064
 800e85c:	2004b068 	.word	0x2004b068
 800e860:	0801b7a4 	.word	0x0801b7a4
 800e864:	0801b7d4 	.word	0x0801b7d4
 800e868:	0801b7f4 	.word	0x0801b7f4

0800e86c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b082      	sub	sp, #8
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d026      	beq.n	800e8ca <tcpip_thread_handle_msg+0x5e>
 800e87c:	2b02      	cmp	r3, #2
 800e87e:	dc2b      	bgt.n	800e8d8 <tcpip_thread_handle_msg+0x6c>
 800e880:	2b00      	cmp	r3, #0
 800e882:	d002      	beq.n	800e88a <tcpip_thread_handle_msg+0x1e>
 800e884:	2b01      	cmp	r3, #1
 800e886:	d015      	beq.n	800e8b4 <tcpip_thread_handle_msg+0x48>
 800e888:	e026      	b.n	800e8d8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	6850      	ldr	r0, [r2, #4]
 800e892:	687a      	ldr	r2, [r7, #4]
 800e894:	6892      	ldr	r2, [r2, #8]
 800e896:	4611      	mov	r1, r2
 800e898:	4798      	blx	r3
 800e89a:	4603      	mov	r3, r0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d004      	beq.n	800e8aa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f001 fd21 	bl	80102ec <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e8aa:	6879      	ldr	r1, [r7, #4]
 800e8ac:	2009      	movs	r0, #9
 800e8ae:	f000 fe79 	bl	800f5a4 <memp_free>
      break;
 800e8b2:	e018      	b.n	800e8e6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	685b      	ldr	r3, [r3, #4]
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	6892      	ldr	r2, [r2, #8]
 800e8bc:	4610      	mov	r0, r2
 800e8be:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e8c0:	6879      	ldr	r1, [r7, #4]
 800e8c2:	2008      	movs	r0, #8
 800e8c4:	f000 fe6e 	bl	800f5a4 <memp_free>
      break;
 800e8c8:	e00d      	b.n	800e8e6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	6892      	ldr	r2, [r2, #8]
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	4798      	blx	r3
      break;
 800e8d6:	e006      	b.n	800e8e6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e8d8:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <tcpip_thread_handle_msg+0x84>)
 800e8da:	22cf      	movs	r2, #207	; 0xcf
 800e8dc:	4905      	ldr	r1, [pc, #20]	; (800e8f4 <tcpip_thread_handle_msg+0x88>)
 800e8de:	4806      	ldr	r0, [pc, #24]	; (800e8f8 <tcpip_thread_handle_msg+0x8c>)
 800e8e0:	f00b fab0 	bl	8019e44 <iprintf>
      break;
 800e8e4:	bf00      	nop
  }
}
 800e8e6:	bf00      	nop
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	0801b7a4 	.word	0x0801b7a4
 800e8f4:	0801b7d4 	.word	0x0801b7d4
 800e8f8:	0801b7f4 	.word	0x0801b7f4

0800e8fc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b086      	sub	sp, #24
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e908:	481a      	ldr	r0, [pc, #104]	; (800e974 <tcpip_inpkt+0x78>)
 800e90a:	f00a ff9b 	bl	8019844 <sys_mbox_valid>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d105      	bne.n	800e920 <tcpip_inpkt+0x24>
 800e914:	4b18      	ldr	r3, [pc, #96]	; (800e978 <tcpip_inpkt+0x7c>)
 800e916:	22fc      	movs	r2, #252	; 0xfc
 800e918:	4918      	ldr	r1, [pc, #96]	; (800e97c <tcpip_inpkt+0x80>)
 800e91a:	4819      	ldr	r0, [pc, #100]	; (800e980 <tcpip_inpkt+0x84>)
 800e91c:	f00b fa92 	bl	8019e44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e920:	2009      	movs	r0, #9
 800e922:	f000 fdc9 	bl	800f4b8 <memp_malloc>
 800e926:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d102      	bne.n	800e934 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e92e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e932:	e01a      	b.n	800e96a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	2200      	movs	r2, #0
 800e938:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	68fa      	ldr	r2, [r7, #12]
 800e93e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e94c:	6979      	ldr	r1, [r7, #20]
 800e94e:	4809      	ldr	r0, [pc, #36]	; (800e974 <tcpip_inpkt+0x78>)
 800e950:	f00a ff16 	bl	8019780 <sys_mbox_trypost>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d006      	beq.n	800e968 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e95a:	6979      	ldr	r1, [r7, #20]
 800e95c:	2009      	movs	r0, #9
 800e95e:	f000 fe21 	bl	800f5a4 <memp_free>
    return ERR_MEM;
 800e962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e966:	e000      	b.n	800e96a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e968:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3718      	adds	r7, #24
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	2004b068 	.word	0x2004b068
 800e978:	0801b7a4 	.word	0x0801b7a4
 800e97c:	0801b81c 	.word	0x0801b81c
 800e980:	0801b7f4 	.word	0x0801b7f4

0800e984 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b082      	sub	sp, #8
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e994:	f003 0318 	and.w	r3, r3, #24
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d006      	beq.n	800e9aa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e99c:	4a08      	ldr	r2, [pc, #32]	; (800e9c0 <tcpip_input+0x3c>)
 800e99e:	6839      	ldr	r1, [r7, #0]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff ffab 	bl	800e8fc <tcpip_inpkt>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	e005      	b.n	800e9b6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e9aa:	4a06      	ldr	r2, [pc, #24]	; (800e9c4 <tcpip_input+0x40>)
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f7ff ffa4 	bl	800e8fc <tcpip_inpkt>
 800e9b4:	4603      	mov	r3, r0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	0801957d 	.word	0x0801957d
 800e9c4:	08018485 	.word	0x08018485

0800e9c8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e9d2:	4819      	ldr	r0, [pc, #100]	; (800ea38 <tcpip_try_callback+0x70>)
 800e9d4:	f00a ff36 	bl	8019844 <sys_mbox_valid>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d106      	bne.n	800e9ec <tcpip_try_callback+0x24>
 800e9de:	4b17      	ldr	r3, [pc, #92]	; (800ea3c <tcpip_try_callback+0x74>)
 800e9e0:	f240 125d 	movw	r2, #349	; 0x15d
 800e9e4:	4916      	ldr	r1, [pc, #88]	; (800ea40 <tcpip_try_callback+0x78>)
 800e9e6:	4817      	ldr	r0, [pc, #92]	; (800ea44 <tcpip_try_callback+0x7c>)
 800e9e8:	f00b fa2c 	bl	8019e44 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e9ec:	2008      	movs	r0, #8
 800e9ee:	f000 fd63 	bl	800f4b8 <memp_malloc>
 800e9f2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d102      	bne.n	800ea00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e9fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9fe:	e017      	b.n	800ea30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2201      	movs	r2, #1
 800ea04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ea12:	68f9      	ldr	r1, [r7, #12]
 800ea14:	4808      	ldr	r0, [pc, #32]	; (800ea38 <tcpip_try_callback+0x70>)
 800ea16:	f00a feb3 	bl	8019780 <sys_mbox_trypost>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d006      	beq.n	800ea2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ea20:	68f9      	ldr	r1, [r7, #12]
 800ea22:	2008      	movs	r0, #8
 800ea24:	f000 fdbe 	bl	800f5a4 <memp_free>
    return ERR_MEM;
 800ea28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea2c:	e000      	b.n	800ea30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ea2e:	2300      	movs	r3, #0
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	2004b068 	.word	0x2004b068
 800ea3c:	0801b7a4 	.word	0x0801b7a4
 800ea40:	0801b81c 	.word	0x0801b81c
 800ea44:	0801b7f4 	.word	0x0801b7f4

0800ea48 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	60f8      	str	r0, [r7, #12]
 800ea50:	60b9      	str	r1, [r7, #8]
 800ea52:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ea54:	4806      	ldr	r0, [pc, #24]	; (800ea70 <tcpip_send_msg_wait_sem+0x28>)
 800ea56:	f00a ffc3 	bl	80199e0 <sys_mutex_lock>
  fn(apimsg);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	68b8      	ldr	r0, [r7, #8]
 800ea5e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ea60:	4803      	ldr	r0, [pc, #12]	; (800ea70 <tcpip_send_msg_wait_sem+0x28>)
 800ea62:	f00a ffcc 	bl	80199fe <sys_mutex_unlock>
  return ERR_OK;
 800ea66:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}
 800ea70:	2004b06c 	.word	0x2004b06c

0800ea74 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af02      	add	r7, sp, #8
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ea7e:	f000 f871 	bl	800eb64 <lwip_init>

  tcpip_init_done = initfunc;
 800ea82:	4a17      	ldr	r2, [pc, #92]	; (800eae0 <tcpip_init+0x6c>)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ea88:	4a16      	ldr	r2, [pc, #88]	; (800eae4 <tcpip_init+0x70>)
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ea8e:	2106      	movs	r1, #6
 800ea90:	4815      	ldr	r0, [pc, #84]	; (800eae8 <tcpip_init+0x74>)
 800ea92:	f00a fe49 	bl	8019728 <sys_mbox_new>
 800ea96:	4603      	mov	r3, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d006      	beq.n	800eaaa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ea9c:	4b13      	ldr	r3, [pc, #76]	; (800eaec <tcpip_init+0x78>)
 800ea9e:	f240 2261 	movw	r2, #609	; 0x261
 800eaa2:	4913      	ldr	r1, [pc, #76]	; (800eaf0 <tcpip_init+0x7c>)
 800eaa4:	4813      	ldr	r0, [pc, #76]	; (800eaf4 <tcpip_init+0x80>)
 800eaa6:	f00b f9cd 	bl	8019e44 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eaaa:	4813      	ldr	r0, [pc, #76]	; (800eaf8 <tcpip_init+0x84>)
 800eaac:	f00a ff82 	bl	80199b4 <sys_mutex_new>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d006      	beq.n	800eac4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800eab6:	4b0d      	ldr	r3, [pc, #52]	; (800eaec <tcpip_init+0x78>)
 800eab8:	f240 2265 	movw	r2, #613	; 0x265
 800eabc:	490f      	ldr	r1, [pc, #60]	; (800eafc <tcpip_init+0x88>)
 800eabe:	480d      	ldr	r0, [pc, #52]	; (800eaf4 <tcpip_init+0x80>)
 800eac0:	f00b f9c0 	bl	8019e44 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eac4:	2318      	movs	r3, #24
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eacc:	2200      	movs	r2, #0
 800eace:	490c      	ldr	r1, [pc, #48]	; (800eb00 <tcpip_init+0x8c>)
 800ead0:	480c      	ldr	r0, [pc, #48]	; (800eb04 <tcpip_init+0x90>)
 800ead2:	f00a ffa1 	bl	8019a18 <sys_thread_new>
}
 800ead6:	bf00      	nop
 800ead8:	3708      	adds	r7, #8
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
 800eade:	bf00      	nop
 800eae0:	2004b060 	.word	0x2004b060
 800eae4:	2004b064 	.word	0x2004b064
 800eae8:	2004b068 	.word	0x2004b068
 800eaec:	0801b7a4 	.word	0x0801b7a4
 800eaf0:	0801b82c 	.word	0x0801b82c
 800eaf4:	0801b7f4 	.word	0x0801b7f4
 800eaf8:	2004b06c 	.word	0x2004b06c
 800eafc:	0801b850 	.word	0x0801b850
 800eb00:	0800e805 	.word	0x0800e805
 800eb04:	0801b874 	.word	0x0801b874

0800eb08 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	4603      	mov	r3, r0
 800eb10:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eb12:	88fb      	ldrh	r3, [r7, #6]
 800eb14:	021b      	lsls	r3, r3, #8
 800eb16:	b21a      	sxth	r2, r3
 800eb18:	88fb      	ldrh	r3, [r7, #6]
 800eb1a:	0a1b      	lsrs	r3, r3, #8
 800eb1c:	b29b      	uxth	r3, r3
 800eb1e:	b21b      	sxth	r3, r3
 800eb20:	4313      	orrs	r3, r2
 800eb22:	b21b      	sxth	r3, r3
 800eb24:	b29b      	uxth	r3, r3
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr

0800eb32 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eb32:	b480      	push	{r7}
 800eb34:	b083      	sub	sp, #12
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	061a      	lsls	r2, r3, #24
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	021b      	lsls	r3, r3, #8
 800eb42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb46:	431a      	orrs	r2, r3
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	0a1b      	lsrs	r3, r3, #8
 800eb4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eb50:	431a      	orrs	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	0e1b      	lsrs	r3, r3, #24
 800eb56:	4313      	orrs	r3, r2
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	370c      	adds	r7, #12
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb62:	4770      	bx	lr

0800eb64 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800eb6e:	f00a ff15 	bl	801999c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800eb72:	f000 f8d5 	bl	800ed20 <mem_init>
  memp_init();
 800eb76:	f000 fc31 	bl	800f3dc <memp_init>
  pbuf_init();
  netif_init();
 800eb7a:	f000 fd3d 	bl	800f5f8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800eb7e:	f008 f84f 	bl	8016c20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800eb82:	f001 fe4d 	bl	8010820 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800eb86:	f007 ff91 	bl	8016aac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
	...

0800eb94 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800eb9e:	4b05      	ldr	r3, [pc, #20]	; (800ebb4 <ptr_to_mem+0x20>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	88fb      	ldrh	r3, [r7, #6]
 800eba4:	4413      	add	r3, r2
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	2004c49c 	.word	0x2004c49c

0800ebb8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <mem_to_ptr+0x20>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	b29b      	uxth	r3, r3
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	370c      	adds	r7, #12
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr
 800ebd6:	bf00      	nop
 800ebd8:	2004c49c 	.word	0x2004c49c

0800ebdc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ebdc:	b590      	push	{r4, r7, lr}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ebe4:	4b45      	ldr	r3, [pc, #276]	; (800ecfc <plug_holes+0x120>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d206      	bcs.n	800ebfc <plug_holes+0x20>
 800ebee:	4b44      	ldr	r3, [pc, #272]	; (800ed00 <plug_holes+0x124>)
 800ebf0:	f240 12df 	movw	r2, #479	; 0x1df
 800ebf4:	4943      	ldr	r1, [pc, #268]	; (800ed04 <plug_holes+0x128>)
 800ebf6:	4844      	ldr	r0, [pc, #272]	; (800ed08 <plug_holes+0x12c>)
 800ebf8:	f00b f924 	bl	8019e44 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ebfc:	4b43      	ldr	r3, [pc, #268]	; (800ed0c <plug_holes+0x130>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d306      	bcc.n	800ec14 <plug_holes+0x38>
 800ec06:	4b3e      	ldr	r3, [pc, #248]	; (800ed00 <plug_holes+0x124>)
 800ec08:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ec0c:	4940      	ldr	r1, [pc, #256]	; (800ed10 <plug_holes+0x134>)
 800ec0e:	483e      	ldr	r0, [pc, #248]	; (800ed08 <plug_holes+0x12c>)
 800ec10:	f00b f918 	bl	8019e44 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	791b      	ldrb	r3, [r3, #4]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d006      	beq.n	800ec2a <plug_holes+0x4e>
 800ec1c:	4b38      	ldr	r3, [pc, #224]	; (800ed00 <plug_holes+0x124>)
 800ec1e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ec22:	493c      	ldr	r1, [pc, #240]	; (800ed14 <plug_holes+0x138>)
 800ec24:	4838      	ldr	r0, [pc, #224]	; (800ed08 <plug_holes+0x12c>)
 800ec26:	f00b f90d 	bl	8019e44 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	881b      	ldrh	r3, [r3, #0]
 800ec2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ec32:	d906      	bls.n	800ec42 <plug_holes+0x66>
 800ec34:	4b32      	ldr	r3, [pc, #200]	; (800ed00 <plug_holes+0x124>)
 800ec36:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ec3a:	4937      	ldr	r1, [pc, #220]	; (800ed18 <plug_holes+0x13c>)
 800ec3c:	4832      	ldr	r0, [pc, #200]	; (800ed08 <plug_holes+0x12c>)
 800ec3e:	f00b f901 	bl	8019e44 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	881b      	ldrh	r3, [r3, #0]
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7ff ffa4 	bl	800eb94 <ptr_to_mem>
 800ec4c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d024      	beq.n	800eca0 <plug_holes+0xc4>
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	791b      	ldrb	r3, [r3, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d120      	bne.n	800eca0 <plug_holes+0xc4>
 800ec5e:	4b2b      	ldr	r3, [pc, #172]	; (800ed0c <plug_holes+0x130>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d01b      	beq.n	800eca0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ec68:	4b2c      	ldr	r3, [pc, #176]	; (800ed1c <plug_holes+0x140>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d102      	bne.n	800ec78 <plug_holes+0x9c>
      lfree = mem;
 800ec72:	4a2a      	ldr	r2, [pc, #168]	; (800ed1c <plug_holes+0x140>)
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	881a      	ldrh	r2, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	881b      	ldrh	r3, [r3, #0]
 800ec84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ec88:	d00a      	beq.n	800eca0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	881b      	ldrh	r3, [r3, #0]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff ff80 	bl	800eb94 <ptr_to_mem>
 800ec94:	4604      	mov	r4, r0
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7ff ff8e 	bl	800ebb8 <mem_to_ptr>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	885b      	ldrh	r3, [r3, #2]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff ff75 	bl	800eb94 <ptr_to_mem>
 800ecaa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ecac:	68ba      	ldr	r2, [r7, #8]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d01f      	beq.n	800ecf4 <plug_holes+0x118>
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	791b      	ldrb	r3, [r3, #4]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d11b      	bne.n	800ecf4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ecbc:	4b17      	ldr	r3, [pc, #92]	; (800ed1c <plug_holes+0x140>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d102      	bne.n	800eccc <plug_holes+0xf0>
      lfree = pmem;
 800ecc6:	4a15      	ldr	r2, [pc, #84]	; (800ed1c <plug_holes+0x140>)
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	881a      	ldrh	r2, [r3, #0]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ecdc:	d00a      	beq.n	800ecf4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	881b      	ldrh	r3, [r3, #0]
 800ece2:	4618      	mov	r0, r3
 800ece4:	f7ff ff56 	bl	800eb94 <ptr_to_mem>
 800ece8:	4604      	mov	r4, r0
 800ecea:	68b8      	ldr	r0, [r7, #8]
 800ecec:	f7ff ff64 	bl	800ebb8 <mem_to_ptr>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ecf4:	bf00      	nop
 800ecf6:	3714      	adds	r7, #20
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd90      	pop	{r4, r7, pc}
 800ecfc:	2004c49c 	.word	0x2004c49c
 800ed00:	0801b884 	.word	0x0801b884
 800ed04:	0801b8b4 	.word	0x0801b8b4
 800ed08:	0801b8cc 	.word	0x0801b8cc
 800ed0c:	2004c4a0 	.word	0x2004c4a0
 800ed10:	0801b8f4 	.word	0x0801b8f4
 800ed14:	0801b910 	.word	0x0801b910
 800ed18:	0801b92c 	.word	0x0801b92c
 800ed1c:	2004c4a8 	.word	0x2004c4a8

0800ed20 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ed26:	4b1f      	ldr	r3, [pc, #124]	; (800eda4 <mem_init+0x84>)
 800ed28:	3303      	adds	r3, #3
 800ed2a:	f023 0303 	bic.w	r3, r3, #3
 800ed2e:	461a      	mov	r2, r3
 800ed30:	4b1d      	ldr	r3, [pc, #116]	; (800eda8 <mem_init+0x88>)
 800ed32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ed34:	4b1c      	ldr	r3, [pc, #112]	; (800eda8 <mem_init+0x88>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ed40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2200      	movs	r2, #0
 800ed46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ed4e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800ed52:	f7ff ff1f 	bl	800eb94 <ptr_to_mem>
 800ed56:	4603      	mov	r3, r0
 800ed58:	4a14      	ldr	r2, [pc, #80]	; (800edac <mem_init+0x8c>)
 800ed5a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ed5c:	4b13      	ldr	r3, [pc, #76]	; (800edac <mem_init+0x8c>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	2201      	movs	r2, #1
 800ed62:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ed64:	4b11      	ldr	r3, [pc, #68]	; (800edac <mem_init+0x8c>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ed6c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ed6e:	4b0f      	ldr	r3, [pc, #60]	; (800edac <mem_init+0x8c>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800ed76:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ed78:	4b0b      	ldr	r3, [pc, #44]	; (800eda8 <mem_init+0x88>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a0c      	ldr	r2, [pc, #48]	; (800edb0 <mem_init+0x90>)
 800ed7e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ed80:	480c      	ldr	r0, [pc, #48]	; (800edb4 <mem_init+0x94>)
 800ed82:	f00a fe17 	bl	80199b4 <sys_mutex_new>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d006      	beq.n	800ed9a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ed8c:	4b0a      	ldr	r3, [pc, #40]	; (800edb8 <mem_init+0x98>)
 800ed8e:	f240 221f 	movw	r2, #543	; 0x21f
 800ed92:	490a      	ldr	r1, [pc, #40]	; (800edbc <mem_init+0x9c>)
 800ed94:	480a      	ldr	r0, [pc, #40]	; (800edc0 <mem_init+0xa0>)
 800ed96:	f00b f855 	bl	8019e44 <iprintf>
  }
}
 800ed9a:	bf00      	nop
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	2004b088 	.word	0x2004b088
 800eda8:	2004c49c 	.word	0x2004c49c
 800edac:	2004c4a0 	.word	0x2004c4a0
 800edb0:	2004c4a8 	.word	0x2004c4a8
 800edb4:	2004c4a4 	.word	0x2004c4a4
 800edb8:	0801b884 	.word	0x0801b884
 800edbc:	0801b958 	.word	0x0801b958
 800edc0:	0801b8cc 	.word	0x0801b8cc

0800edc4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b086      	sub	sp, #24
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7ff fef3 	bl	800ebb8 <mem_to_ptr>
 800edd2:	4603      	mov	r3, r0
 800edd4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	881b      	ldrh	r3, [r3, #0]
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff feda 	bl	800eb94 <ptr_to_mem>
 800ede0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	885b      	ldrh	r3, [r3, #2]
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7ff fed4 	bl	800eb94 <ptr_to_mem>
 800edec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800edf6:	d818      	bhi.n	800ee2a <mem_link_valid+0x66>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	885b      	ldrh	r3, [r3, #2]
 800edfc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ee00:	d813      	bhi.n	800ee2a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ee06:	8afa      	ldrh	r2, [r7, #22]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d004      	beq.n	800ee16 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	881b      	ldrh	r3, [r3, #0]
 800ee10:	8afa      	ldrh	r2, [r7, #22]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d109      	bne.n	800ee2a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ee16:	4b08      	ldr	r3, [pc, #32]	; (800ee38 <mem_link_valid+0x74>)
 800ee18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d006      	beq.n	800ee2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	885b      	ldrh	r3, [r3, #2]
 800ee24:	8afa      	ldrh	r2, [r7, #22]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d001      	beq.n	800ee2e <mem_link_valid+0x6a>
    return 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	e000      	b.n	800ee30 <mem_link_valid+0x6c>
  }
  return 1;
 800ee2e:	2301      	movs	r3, #1
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	2004c4a0 	.word	0x2004c4a0

0800ee3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b088      	sub	sp, #32
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d070      	beq.n	800ef2c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f003 0303 	and.w	r3, r3, #3
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00d      	beq.n	800ee70 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ee54:	4b37      	ldr	r3, [pc, #220]	; (800ef34 <mem_free+0xf8>)
 800ee56:	f240 2273 	movw	r2, #627	; 0x273
 800ee5a:	4937      	ldr	r1, [pc, #220]	; (800ef38 <mem_free+0xfc>)
 800ee5c:	4837      	ldr	r0, [pc, #220]	; (800ef3c <mem_free+0x100>)
 800ee5e:	f00a fff1 	bl	8019e44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee62:	f00a fdf9 	bl	8019a58 <sys_arch_protect>
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	68f8      	ldr	r0, [r7, #12]
 800ee6a:	f00a fe03 	bl	8019a74 <sys_arch_unprotect>
    return;
 800ee6e:	e05e      	b.n	800ef2e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3b08      	subs	r3, #8
 800ee74:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ee76:	4b32      	ldr	r3, [pc, #200]	; (800ef40 <mem_free+0x104>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	69fa      	ldr	r2, [r7, #28]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d306      	bcc.n	800ee8e <mem_free+0x52>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f103 020c 	add.w	r2, r3, #12
 800ee86:	4b2f      	ldr	r3, [pc, #188]	; (800ef44 <mem_free+0x108>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d90d      	bls.n	800eeaa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ee8e:	4b29      	ldr	r3, [pc, #164]	; (800ef34 <mem_free+0xf8>)
 800ee90:	f240 227f 	movw	r2, #639	; 0x27f
 800ee94:	492c      	ldr	r1, [pc, #176]	; (800ef48 <mem_free+0x10c>)
 800ee96:	4829      	ldr	r0, [pc, #164]	; (800ef3c <mem_free+0x100>)
 800ee98:	f00a ffd4 	bl	8019e44 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee9c:	f00a fddc 	bl	8019a58 <sys_arch_protect>
 800eea0:	6138      	str	r0, [r7, #16]
 800eea2:	6938      	ldr	r0, [r7, #16]
 800eea4:	f00a fde6 	bl	8019a74 <sys_arch_unprotect>
    return;
 800eea8:	e041      	b.n	800ef2e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800eeaa:	4828      	ldr	r0, [pc, #160]	; (800ef4c <mem_free+0x110>)
 800eeac:	f00a fd98 	bl	80199e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	791b      	ldrb	r3, [r3, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d110      	bne.n	800eeda <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800eeb8:	4b1e      	ldr	r3, [pc, #120]	; (800ef34 <mem_free+0xf8>)
 800eeba:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800eebe:	4924      	ldr	r1, [pc, #144]	; (800ef50 <mem_free+0x114>)
 800eec0:	481e      	ldr	r0, [pc, #120]	; (800ef3c <mem_free+0x100>)
 800eec2:	f00a ffbf 	bl	8019e44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800eec6:	4821      	ldr	r0, [pc, #132]	; (800ef4c <mem_free+0x110>)
 800eec8:	f00a fd99 	bl	80199fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eecc:	f00a fdc4 	bl	8019a58 <sys_arch_protect>
 800eed0:	6178      	str	r0, [r7, #20]
 800eed2:	6978      	ldr	r0, [r7, #20]
 800eed4:	f00a fdce 	bl	8019a74 <sys_arch_unprotect>
    return;
 800eed8:	e029      	b.n	800ef2e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800eeda:	69f8      	ldr	r0, [r7, #28]
 800eedc:	f7ff ff72 	bl	800edc4 <mem_link_valid>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d110      	bne.n	800ef08 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800eee6:	4b13      	ldr	r3, [pc, #76]	; (800ef34 <mem_free+0xf8>)
 800eee8:	f240 2295 	movw	r2, #661	; 0x295
 800eeec:	4919      	ldr	r1, [pc, #100]	; (800ef54 <mem_free+0x118>)
 800eeee:	4813      	ldr	r0, [pc, #76]	; (800ef3c <mem_free+0x100>)
 800eef0:	f00a ffa8 	bl	8019e44 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800eef4:	4815      	ldr	r0, [pc, #84]	; (800ef4c <mem_free+0x110>)
 800eef6:	f00a fd82 	bl	80199fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800eefa:	f00a fdad 	bl	8019a58 <sys_arch_protect>
 800eefe:	61b8      	str	r0, [r7, #24]
 800ef00:	69b8      	ldr	r0, [r7, #24]
 800ef02:	f00a fdb7 	bl	8019a74 <sys_arch_unprotect>
    return;
 800ef06:	e012      	b.n	800ef2e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ef0e:	4b12      	ldr	r3, [pc, #72]	; (800ef58 <mem_free+0x11c>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	69fa      	ldr	r2, [r7, #28]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d202      	bcs.n	800ef1e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ef18:	4a0f      	ldr	r2, [pc, #60]	; (800ef58 <mem_free+0x11c>)
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ef1e:	69f8      	ldr	r0, [r7, #28]
 800ef20:	f7ff fe5c 	bl	800ebdc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ef24:	4809      	ldr	r0, [pc, #36]	; (800ef4c <mem_free+0x110>)
 800ef26:	f00a fd6a 	bl	80199fe <sys_mutex_unlock>
 800ef2a:	e000      	b.n	800ef2e <mem_free+0xf2>
    return;
 800ef2c:	bf00      	nop
}
 800ef2e:	3720      	adds	r7, #32
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	0801b884 	.word	0x0801b884
 800ef38:	0801b974 	.word	0x0801b974
 800ef3c:	0801b8cc 	.word	0x0801b8cc
 800ef40:	2004c49c 	.word	0x2004c49c
 800ef44:	2004c4a0 	.word	0x2004c4a0
 800ef48:	0801b998 	.word	0x0801b998
 800ef4c:	2004c4a4 	.word	0x2004c4a4
 800ef50:	0801b9b4 	.word	0x0801b9b4
 800ef54:	0801b9dc 	.word	0x0801b9dc
 800ef58:	2004c4a8 	.word	0x2004c4a8

0800ef5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b088      	sub	sp, #32
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	460b      	mov	r3, r1
 800ef66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ef68:	887b      	ldrh	r3, [r7, #2]
 800ef6a:	3303      	adds	r3, #3
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	f023 0303 	bic.w	r3, r3, #3
 800ef72:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ef74:	8bfb      	ldrh	r3, [r7, #30]
 800ef76:	2b0b      	cmp	r3, #11
 800ef78:	d801      	bhi.n	800ef7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ef7a:	230c      	movs	r3, #12
 800ef7c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ef7e:	8bfb      	ldrh	r3, [r7, #30]
 800ef80:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800ef84:	d803      	bhi.n	800ef8e <mem_trim+0x32>
 800ef86:	8bfa      	ldrh	r2, [r7, #30]
 800ef88:	887b      	ldrh	r3, [r7, #2]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d201      	bcs.n	800ef92 <mem_trim+0x36>
    return NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e0d8      	b.n	800f144 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ef92:	4b6e      	ldr	r3, [pc, #440]	; (800f14c <mem_trim+0x1f0>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d304      	bcc.n	800efa6 <mem_trim+0x4a>
 800ef9c:	4b6c      	ldr	r3, [pc, #432]	; (800f150 <mem_trim+0x1f4>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d306      	bcc.n	800efb4 <mem_trim+0x58>
 800efa6:	4b6b      	ldr	r3, [pc, #428]	; (800f154 <mem_trim+0x1f8>)
 800efa8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800efac:	496a      	ldr	r1, [pc, #424]	; (800f158 <mem_trim+0x1fc>)
 800efae:	486b      	ldr	r0, [pc, #428]	; (800f15c <mem_trim+0x200>)
 800efb0:	f00a ff48 	bl	8019e44 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800efb4:	4b65      	ldr	r3, [pc, #404]	; (800f14c <mem_trim+0x1f0>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d304      	bcc.n	800efc8 <mem_trim+0x6c>
 800efbe:	4b64      	ldr	r3, [pc, #400]	; (800f150 <mem_trim+0x1f4>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d307      	bcc.n	800efd8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800efc8:	f00a fd46 	bl	8019a58 <sys_arch_protect>
 800efcc:	60b8      	str	r0, [r7, #8]
 800efce:	68b8      	ldr	r0, [r7, #8]
 800efd0:	f00a fd50 	bl	8019a74 <sys_arch_unprotect>
    return rmem;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	e0b5      	b.n	800f144 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3b08      	subs	r3, #8
 800efdc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800efde:	69b8      	ldr	r0, [r7, #24]
 800efe0:	f7ff fdea 	bl	800ebb8 <mem_to_ptr>
 800efe4:	4603      	mov	r3, r0
 800efe6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800efe8:	69bb      	ldr	r3, [r7, #24]
 800efea:	881a      	ldrh	r2, [r3, #0]
 800efec:	8afb      	ldrh	r3, [r7, #22]
 800efee:	1ad3      	subs	r3, r2, r3
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	3b08      	subs	r3, #8
 800eff4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800eff6:	8bfa      	ldrh	r2, [r7, #30]
 800eff8:	8abb      	ldrh	r3, [r7, #20]
 800effa:	429a      	cmp	r2, r3
 800effc:	d906      	bls.n	800f00c <mem_trim+0xb0>
 800effe:	4b55      	ldr	r3, [pc, #340]	; (800f154 <mem_trim+0x1f8>)
 800f000:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f004:	4956      	ldr	r1, [pc, #344]	; (800f160 <mem_trim+0x204>)
 800f006:	4855      	ldr	r0, [pc, #340]	; (800f15c <mem_trim+0x200>)
 800f008:	f00a ff1c 	bl	8019e44 <iprintf>
  if (newsize > size) {
 800f00c:	8bfa      	ldrh	r2, [r7, #30]
 800f00e:	8abb      	ldrh	r3, [r7, #20]
 800f010:	429a      	cmp	r2, r3
 800f012:	d901      	bls.n	800f018 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f014:	2300      	movs	r3, #0
 800f016:	e095      	b.n	800f144 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f018:	8bfa      	ldrh	r2, [r7, #30]
 800f01a:	8abb      	ldrh	r3, [r7, #20]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d101      	bne.n	800f024 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	e08f      	b.n	800f144 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f024:	484f      	ldr	r0, [pc, #316]	; (800f164 <mem_trim+0x208>)
 800f026:	f00a fcdb 	bl	80199e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f02a:	69bb      	ldr	r3, [r7, #24]
 800f02c:	881b      	ldrh	r3, [r3, #0]
 800f02e:	4618      	mov	r0, r3
 800f030:	f7ff fdb0 	bl	800eb94 <ptr_to_mem>
 800f034:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	791b      	ldrb	r3, [r3, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d13f      	bne.n	800f0be <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f046:	d106      	bne.n	800f056 <mem_trim+0xfa>
 800f048:	4b42      	ldr	r3, [pc, #264]	; (800f154 <mem_trim+0x1f8>)
 800f04a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f04e:	4946      	ldr	r1, [pc, #280]	; (800f168 <mem_trim+0x20c>)
 800f050:	4842      	ldr	r0, [pc, #264]	; (800f15c <mem_trim+0x200>)
 800f052:	f00a fef7 	bl	8019e44 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	881b      	ldrh	r3, [r3, #0]
 800f05a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f05c:	8afa      	ldrh	r2, [r7, #22]
 800f05e:	8bfb      	ldrh	r3, [r7, #30]
 800f060:	4413      	add	r3, r2
 800f062:	b29b      	uxth	r3, r3
 800f064:	3308      	adds	r3, #8
 800f066:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f068:	4b40      	ldr	r3, [pc, #256]	; (800f16c <mem_trim+0x210>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	693a      	ldr	r2, [r7, #16]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d106      	bne.n	800f080 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f072:	89fb      	ldrh	r3, [r7, #14]
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff fd8d 	bl	800eb94 <ptr_to_mem>
 800f07a:	4603      	mov	r3, r0
 800f07c:	4a3b      	ldr	r2, [pc, #236]	; (800f16c <mem_trim+0x210>)
 800f07e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f080:	89fb      	ldrh	r3, [r7, #14]
 800f082:	4618      	mov	r0, r3
 800f084:	f7ff fd86 	bl	800eb94 <ptr_to_mem>
 800f088:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	2200      	movs	r2, #0
 800f08e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	89ba      	ldrh	r2, [r7, #12]
 800f094:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	8afa      	ldrh	r2, [r7, #22]
 800f09a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f09c:	69bb      	ldr	r3, [r7, #24]
 800f09e:	89fa      	ldrh	r2, [r7, #14]
 800f0a0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	881b      	ldrh	r3, [r3, #0]
 800f0a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f0aa:	d047      	beq.n	800f13c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	881b      	ldrh	r3, [r3, #0]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7ff fd6f 	bl	800eb94 <ptr_to_mem>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	89fb      	ldrh	r3, [r7, #14]
 800f0ba:	8053      	strh	r3, [r2, #2]
 800f0bc:	e03e      	b.n	800f13c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f0be:	8bfb      	ldrh	r3, [r7, #30]
 800f0c0:	f103 0214 	add.w	r2, r3, #20
 800f0c4:	8abb      	ldrh	r3, [r7, #20]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d838      	bhi.n	800f13c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f0ca:	8afa      	ldrh	r2, [r7, #22]
 800f0cc:	8bfb      	ldrh	r3, [r7, #30]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	3308      	adds	r3, #8
 800f0d4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f0d6:	69bb      	ldr	r3, [r7, #24]
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f0de:	d106      	bne.n	800f0ee <mem_trim+0x192>
 800f0e0:	4b1c      	ldr	r3, [pc, #112]	; (800f154 <mem_trim+0x1f8>)
 800f0e2:	f240 3216 	movw	r2, #790	; 0x316
 800f0e6:	4920      	ldr	r1, [pc, #128]	; (800f168 <mem_trim+0x20c>)
 800f0e8:	481c      	ldr	r0, [pc, #112]	; (800f15c <mem_trim+0x200>)
 800f0ea:	f00a feab 	bl	8019e44 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f0ee:	89fb      	ldrh	r3, [r7, #14]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7ff fd4f 	bl	800eb94 <ptr_to_mem>
 800f0f6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f0f8:	4b1c      	ldr	r3, [pc, #112]	; (800f16c <mem_trim+0x210>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d202      	bcs.n	800f108 <mem_trim+0x1ac>
      lfree = mem2;
 800f102:	4a1a      	ldr	r2, [pc, #104]	; (800f16c <mem_trim+0x210>)
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	2200      	movs	r2, #0
 800f10c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	881a      	ldrh	r2, [r3, #0]
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	8afa      	ldrh	r2, [r7, #22]
 800f11a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f11c:	69bb      	ldr	r3, [r7, #24]
 800f11e:	89fa      	ldrh	r2, [r7, #14]
 800f120:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	881b      	ldrh	r3, [r3, #0]
 800f126:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f12a:	d007      	beq.n	800f13c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	4618      	mov	r0, r3
 800f132:	f7ff fd2f 	bl	800eb94 <ptr_to_mem>
 800f136:	4602      	mov	r2, r0
 800f138:	89fb      	ldrh	r3, [r7, #14]
 800f13a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f13c:	4809      	ldr	r0, [pc, #36]	; (800f164 <mem_trim+0x208>)
 800f13e:	f00a fc5e 	bl	80199fe <sys_mutex_unlock>
  return rmem;
 800f142:	687b      	ldr	r3, [r7, #4]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3720      	adds	r7, #32
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}
 800f14c:	2004c49c 	.word	0x2004c49c
 800f150:	2004c4a0 	.word	0x2004c4a0
 800f154:	0801b884 	.word	0x0801b884
 800f158:	0801ba10 	.word	0x0801ba10
 800f15c:	0801b8cc 	.word	0x0801b8cc
 800f160:	0801ba28 	.word	0x0801ba28
 800f164:	2004c4a4 	.word	0x2004c4a4
 800f168:	0801ba48 	.word	0x0801ba48
 800f16c:	2004c4a8 	.word	0x2004c4a8

0800f170 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	4603      	mov	r3, r0
 800f178:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f17a:	88fb      	ldrh	r3, [r7, #6]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d101      	bne.n	800f184 <mem_malloc+0x14>
    return NULL;
 800f180:	2300      	movs	r3, #0
 800f182:	e0e2      	b.n	800f34a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f184:	88fb      	ldrh	r3, [r7, #6]
 800f186:	3303      	adds	r3, #3
 800f188:	b29b      	uxth	r3, r3
 800f18a:	f023 0303 	bic.w	r3, r3, #3
 800f18e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f190:	8bbb      	ldrh	r3, [r7, #28]
 800f192:	2b0b      	cmp	r3, #11
 800f194:	d801      	bhi.n	800f19a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f196:	230c      	movs	r3, #12
 800f198:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f19a:	8bbb      	ldrh	r3, [r7, #28]
 800f19c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f1a0:	d803      	bhi.n	800f1aa <mem_malloc+0x3a>
 800f1a2:	8bba      	ldrh	r2, [r7, #28]
 800f1a4:	88fb      	ldrh	r3, [r7, #6]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d201      	bcs.n	800f1ae <mem_malloc+0x3e>
    return NULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	e0cd      	b.n	800f34a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f1ae:	4869      	ldr	r0, [pc, #420]	; (800f354 <mem_malloc+0x1e4>)
 800f1b0:	f00a fc16 	bl	80199e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f1b4:	4b68      	ldr	r3, [pc, #416]	; (800f358 <mem_malloc+0x1e8>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7ff fcfd 	bl	800ebb8 <mem_to_ptr>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	83fb      	strh	r3, [r7, #30]
 800f1c2:	e0b7      	b.n	800f334 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f1c4:	8bfb      	ldrh	r3, [r7, #30]
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7ff fce4 	bl	800eb94 <ptr_to_mem>
 800f1cc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	791b      	ldrb	r3, [r3, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	f040 80a7 	bne.w	800f326 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	881b      	ldrh	r3, [r3, #0]
 800f1dc:	461a      	mov	r2, r3
 800f1de:	8bfb      	ldrh	r3, [r7, #30]
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	f1a3 0208 	sub.w	r2, r3, #8
 800f1e6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	f0c0 809c 	bcc.w	800f326 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	881b      	ldrh	r3, [r3, #0]
 800f1f2:	461a      	mov	r2, r3
 800f1f4:	8bfb      	ldrh	r3, [r7, #30]
 800f1f6:	1ad3      	subs	r3, r2, r3
 800f1f8:	f1a3 0208 	sub.w	r2, r3, #8
 800f1fc:	8bbb      	ldrh	r3, [r7, #28]
 800f1fe:	3314      	adds	r3, #20
 800f200:	429a      	cmp	r2, r3
 800f202:	d333      	bcc.n	800f26c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f204:	8bfa      	ldrh	r2, [r7, #30]
 800f206:	8bbb      	ldrh	r3, [r7, #28]
 800f208:	4413      	add	r3, r2
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	3308      	adds	r3, #8
 800f20e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f210:	8a7b      	ldrh	r3, [r7, #18]
 800f212:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f216:	d106      	bne.n	800f226 <mem_malloc+0xb6>
 800f218:	4b50      	ldr	r3, [pc, #320]	; (800f35c <mem_malloc+0x1ec>)
 800f21a:	f240 3287 	movw	r2, #903	; 0x387
 800f21e:	4950      	ldr	r1, [pc, #320]	; (800f360 <mem_malloc+0x1f0>)
 800f220:	4850      	ldr	r0, [pc, #320]	; (800f364 <mem_malloc+0x1f4>)
 800f222:	f00a fe0f 	bl	8019e44 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f226:	8a7b      	ldrh	r3, [r7, #18]
 800f228:	4618      	mov	r0, r3
 800f22a:	f7ff fcb3 	bl	800eb94 <ptr_to_mem>
 800f22e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	881a      	ldrh	r2, [r3, #0]
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	8bfa      	ldrh	r2, [r7, #30]
 800f242:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f244:	697b      	ldr	r3, [r7, #20]
 800f246:	8a7a      	ldrh	r2, [r7, #18]
 800f248:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	2201      	movs	r2, #1
 800f24e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	881b      	ldrh	r3, [r3, #0]
 800f254:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800f258:	d00b      	beq.n	800f272 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	881b      	ldrh	r3, [r3, #0]
 800f25e:	4618      	mov	r0, r3
 800f260:	f7ff fc98 	bl	800eb94 <ptr_to_mem>
 800f264:	4602      	mov	r2, r0
 800f266:	8a7b      	ldrh	r3, [r7, #18]
 800f268:	8053      	strh	r3, [r2, #2]
 800f26a:	e002      	b.n	800f272 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	2201      	movs	r2, #1
 800f270:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f272:	4b39      	ldr	r3, [pc, #228]	; (800f358 <mem_malloc+0x1e8>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	697a      	ldr	r2, [r7, #20]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d127      	bne.n	800f2cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f27c:	4b36      	ldr	r3, [pc, #216]	; (800f358 <mem_malloc+0x1e8>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f282:	e005      	b.n	800f290 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	881b      	ldrh	r3, [r3, #0]
 800f288:	4618      	mov	r0, r3
 800f28a:	f7ff fc83 	bl	800eb94 <ptr_to_mem>
 800f28e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	791b      	ldrb	r3, [r3, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d004      	beq.n	800f2a2 <mem_malloc+0x132>
 800f298:	4b33      	ldr	r3, [pc, #204]	; (800f368 <mem_malloc+0x1f8>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	69ba      	ldr	r2, [r7, #24]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d1f0      	bne.n	800f284 <mem_malloc+0x114>
          }
          lfree = cur;
 800f2a2:	4a2d      	ldr	r2, [pc, #180]	; (800f358 <mem_malloc+0x1e8>)
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f2a8:	4b2b      	ldr	r3, [pc, #172]	; (800f358 <mem_malloc+0x1e8>)
 800f2aa:	681a      	ldr	r2, [r3, #0]
 800f2ac:	4b2e      	ldr	r3, [pc, #184]	; (800f368 <mem_malloc+0x1f8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d00b      	beq.n	800f2cc <mem_malloc+0x15c>
 800f2b4:	4b28      	ldr	r3, [pc, #160]	; (800f358 <mem_malloc+0x1e8>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	791b      	ldrb	r3, [r3, #4]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d006      	beq.n	800f2cc <mem_malloc+0x15c>
 800f2be:	4b27      	ldr	r3, [pc, #156]	; (800f35c <mem_malloc+0x1ec>)
 800f2c0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f2c4:	4929      	ldr	r1, [pc, #164]	; (800f36c <mem_malloc+0x1fc>)
 800f2c6:	4827      	ldr	r0, [pc, #156]	; (800f364 <mem_malloc+0x1f4>)
 800f2c8:	f00a fdbc 	bl	8019e44 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f2cc:	4821      	ldr	r0, [pc, #132]	; (800f354 <mem_malloc+0x1e4>)
 800f2ce:	f00a fb96 	bl	80199fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f2d2:	8bba      	ldrh	r2, [r7, #28]
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	4413      	add	r3, r2
 800f2d8:	3308      	adds	r3, #8
 800f2da:	4a23      	ldr	r2, [pc, #140]	; (800f368 <mem_malloc+0x1f8>)
 800f2dc:	6812      	ldr	r2, [r2, #0]
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d906      	bls.n	800f2f0 <mem_malloc+0x180>
 800f2e2:	4b1e      	ldr	r3, [pc, #120]	; (800f35c <mem_malloc+0x1ec>)
 800f2e4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f2e8:	4921      	ldr	r1, [pc, #132]	; (800f370 <mem_malloc+0x200>)
 800f2ea:	481e      	ldr	r0, [pc, #120]	; (800f364 <mem_malloc+0x1f4>)
 800f2ec:	f00a fdaa 	bl	8019e44 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f003 0303 	and.w	r3, r3, #3
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d006      	beq.n	800f308 <mem_malloc+0x198>
 800f2fa:	4b18      	ldr	r3, [pc, #96]	; (800f35c <mem_malloc+0x1ec>)
 800f2fc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f300:	491c      	ldr	r1, [pc, #112]	; (800f374 <mem_malloc+0x204>)
 800f302:	4818      	ldr	r0, [pc, #96]	; (800f364 <mem_malloc+0x1f4>)
 800f304:	f00a fd9e 	bl	8019e44 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	f003 0303 	and.w	r3, r3, #3
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d006      	beq.n	800f320 <mem_malloc+0x1b0>
 800f312:	4b12      	ldr	r3, [pc, #72]	; (800f35c <mem_malloc+0x1ec>)
 800f314:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f318:	4917      	ldr	r1, [pc, #92]	; (800f378 <mem_malloc+0x208>)
 800f31a:	4812      	ldr	r0, [pc, #72]	; (800f364 <mem_malloc+0x1f4>)
 800f31c:	f00a fd92 	bl	8019e44 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f320:	697b      	ldr	r3, [r7, #20]
 800f322:	3308      	adds	r3, #8
 800f324:	e011      	b.n	800f34a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f326:	8bfb      	ldrh	r3, [r7, #30]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff fc33 	bl	800eb94 <ptr_to_mem>
 800f32e:	4603      	mov	r3, r0
 800f330:	881b      	ldrh	r3, [r3, #0]
 800f332:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f334:	8bfa      	ldrh	r2, [r7, #30]
 800f336:	8bbb      	ldrh	r3, [r7, #28]
 800f338:	f5c3 53a0 	rsb	r3, r3, #5120	; 0x1400
 800f33c:	429a      	cmp	r2, r3
 800f33e:	f4ff af41 	bcc.w	800f1c4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f342:	4804      	ldr	r0, [pc, #16]	; (800f354 <mem_malloc+0x1e4>)
 800f344:	f00a fb5b 	bl	80199fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3720      	adds	r7, #32
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}
 800f352:	bf00      	nop
 800f354:	2004c4a4 	.word	0x2004c4a4
 800f358:	2004c4a8 	.word	0x2004c4a8
 800f35c:	0801b884 	.word	0x0801b884
 800f360:	0801ba48 	.word	0x0801ba48
 800f364:	0801b8cc 	.word	0x0801b8cc
 800f368:	2004c4a0 	.word	0x2004c4a0
 800f36c:	0801ba5c 	.word	0x0801ba5c
 800f370:	0801ba78 	.word	0x0801ba78
 800f374:	0801baa8 	.word	0x0801baa8
 800f378:	0801bad8 	.word	0x0801bad8

0800f37c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	3303      	adds	r3, #3
 800f392:	f023 0303 	bic.w	r3, r3, #3
 800f396:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f398:	2300      	movs	r3, #0
 800f39a:	60fb      	str	r3, [r7, #12]
 800f39c:	e011      	b.n	800f3c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	689b      	ldr	r3, [r3, #8]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	68bb      	ldr	r3, [r7, #8]
 800f3a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	461a      	mov	r2, r3
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	4413      	add	r3, r2
 800f3ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	60fb      	str	r3, [r7, #12]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	885b      	ldrh	r3, [r3, #2]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	dbe7      	blt.n	800f39e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f3ce:	bf00      	nop
 800f3d0:	bf00      	nop
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	80fb      	strh	r3, [r7, #6]
 800f3e6:	e009      	b.n	800f3fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f3e8:	88fb      	ldrh	r3, [r7, #6]
 800f3ea:	4a08      	ldr	r2, [pc, #32]	; (800f40c <memp_init+0x30>)
 800f3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff ffc3 	bl	800f37c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f3f6:	88fb      	ldrh	r3, [r7, #6]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	80fb      	strh	r3, [r7, #6]
 800f3fc:	88fb      	ldrh	r3, [r7, #6]
 800f3fe:	2b0c      	cmp	r3, #12
 800f400:	d9f2      	bls.n	800f3e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f402:	bf00      	nop
 800f404:	bf00      	nop
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	0801e30c 	.word	0x0801e30c

0800f410 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f418:	f00a fb1e 	bl	8019a58 <sys_arch_protect>
 800f41c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d015      	beq.n	800f458 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	6812      	ldr	r2, [r2, #0]
 800f434:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	f003 0303 	and.w	r3, r3, #3
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d006      	beq.n	800f44e <do_memp_malloc_pool+0x3e>
 800f440:	4b09      	ldr	r3, [pc, #36]	; (800f468 <do_memp_malloc_pool+0x58>)
 800f442:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f446:	4909      	ldr	r1, [pc, #36]	; (800f46c <do_memp_malloc_pool+0x5c>)
 800f448:	4809      	ldr	r0, [pc, #36]	; (800f470 <do_memp_malloc_pool+0x60>)
 800f44a:	f00a fcfb 	bl	8019e44 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f00a fb10 	bl	8019a74 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	e003      	b.n	800f460 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f00a fb0b 	bl	8019a74 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	0801bafc 	.word	0x0801bafc
 800f46c:	0801bb2c 	.word	0x0801bb2c
 800f470:	0801bb50 	.word	0x0801bb50

0800f474 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d106      	bne.n	800f490 <memp_malloc_pool+0x1c>
 800f482:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <memp_malloc_pool+0x38>)
 800f484:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f488:	4909      	ldr	r1, [pc, #36]	; (800f4b0 <memp_malloc_pool+0x3c>)
 800f48a:	480a      	ldr	r0, [pc, #40]	; (800f4b4 <memp_malloc_pool+0x40>)
 800f48c:	f00a fcda 	bl	8019e44 <iprintf>
  if (desc == NULL) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <memp_malloc_pool+0x26>
    return NULL;
 800f496:	2300      	movs	r3, #0
 800f498:	e003      	b.n	800f4a2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff ffb8 	bl	800f410 <do_memp_malloc_pool>
 800f4a0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3708      	adds	r7, #8
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
 800f4aa:	bf00      	nop
 800f4ac:	0801bafc 	.word	0x0801bafc
 800f4b0:	0801bb78 	.word	0x0801bb78
 800f4b4:	0801bb50 	.word	0x0801bb50

0800f4b8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f4c2:	79fb      	ldrb	r3, [r7, #7]
 800f4c4:	2b0c      	cmp	r3, #12
 800f4c6:	d908      	bls.n	800f4da <memp_malloc+0x22>
 800f4c8:	4b0a      	ldr	r3, [pc, #40]	; (800f4f4 <memp_malloc+0x3c>)
 800f4ca:	f240 1257 	movw	r2, #343	; 0x157
 800f4ce:	490a      	ldr	r1, [pc, #40]	; (800f4f8 <memp_malloc+0x40>)
 800f4d0:	480a      	ldr	r0, [pc, #40]	; (800f4fc <memp_malloc+0x44>)
 800f4d2:	f00a fcb7 	bl	8019e44 <iprintf>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e008      	b.n	800f4ec <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f4da:	79fb      	ldrb	r3, [r7, #7]
 800f4dc:	4a08      	ldr	r2, [pc, #32]	; (800f500 <memp_malloc+0x48>)
 800f4de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7ff ff94 	bl	800f410 <do_memp_malloc_pool>
 800f4e8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3710      	adds	r7, #16
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	0801bafc 	.word	0x0801bafc
 800f4f8:	0801bb8c 	.word	0x0801bb8c
 800f4fc:	0801bb50 	.word	0x0801bb50
 800f500:	0801e30c 	.word	0x0801e30c

0800f504 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
 800f50c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	f003 0303 	and.w	r3, r3, #3
 800f514:	2b00      	cmp	r3, #0
 800f516:	d006      	beq.n	800f526 <do_memp_free_pool+0x22>
 800f518:	4b0d      	ldr	r3, [pc, #52]	; (800f550 <do_memp_free_pool+0x4c>)
 800f51a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f51e:	490d      	ldr	r1, [pc, #52]	; (800f554 <do_memp_free_pool+0x50>)
 800f520:	480d      	ldr	r0, [pc, #52]	; (800f558 <do_memp_free_pool+0x54>)
 800f522:	f00a fc8f 	bl	8019e44 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f52a:	f00a fa95 	bl	8019a58 <sys_arch_protect>
 800f52e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	689b      	ldr	r3, [r3, #8]
 800f534:	681a      	ldr	r2, [r3, #0]
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f542:	68b8      	ldr	r0, [r7, #8]
 800f544:	f00a fa96 	bl	8019a74 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f548:	bf00      	nop
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	0801bafc 	.word	0x0801bafc
 800f554:	0801bbac 	.word	0x0801bbac
 800f558:	0801bb50 	.word	0x0801bb50

0800f55c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d106      	bne.n	800f57a <memp_free_pool+0x1e>
 800f56c:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <memp_free_pool+0x3c>)
 800f56e:	f240 1295 	movw	r2, #405	; 0x195
 800f572:	490a      	ldr	r1, [pc, #40]	; (800f59c <memp_free_pool+0x40>)
 800f574:	480a      	ldr	r0, [pc, #40]	; (800f5a0 <memp_free_pool+0x44>)
 800f576:	f00a fc65 	bl	8019e44 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d007      	beq.n	800f590 <memp_free_pool+0x34>
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d004      	beq.n	800f590 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f586:	6839      	ldr	r1, [r7, #0]
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff ffbb 	bl	800f504 <do_memp_free_pool>
 800f58e:	e000      	b.n	800f592 <memp_free_pool+0x36>
    return;
 800f590:	bf00      	nop
}
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	0801bafc 	.word	0x0801bafc
 800f59c:	0801bb78 	.word	0x0801bb78
 800f5a0:	0801bb50 	.word	0x0801bb50

0800f5a4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	6039      	str	r1, [r7, #0]
 800f5ae:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f5b0:	79fb      	ldrb	r3, [r7, #7]
 800f5b2:	2b0c      	cmp	r3, #12
 800f5b4:	d907      	bls.n	800f5c6 <memp_free+0x22>
 800f5b6:	4b0c      	ldr	r3, [pc, #48]	; (800f5e8 <memp_free+0x44>)
 800f5b8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f5bc:	490b      	ldr	r1, [pc, #44]	; (800f5ec <memp_free+0x48>)
 800f5be:	480c      	ldr	r0, [pc, #48]	; (800f5f0 <memp_free+0x4c>)
 800f5c0:	f00a fc40 	bl	8019e44 <iprintf>
 800f5c4:	e00c      	b.n	800f5e0 <memp_free+0x3c>

  if (mem == NULL) {
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d008      	beq.n	800f5de <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f5cc:	79fb      	ldrb	r3, [r7, #7]
 800f5ce:	4a09      	ldr	r2, [pc, #36]	; (800f5f4 <memp_free+0x50>)
 800f5d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d4:	6839      	ldr	r1, [r7, #0]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7ff ff94 	bl	800f504 <do_memp_free_pool>
 800f5dc:	e000      	b.n	800f5e0 <memp_free+0x3c>
    return;
 800f5de:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	0801bafc 	.word	0x0801bafc
 800f5ec:	0801bbcc 	.word	0x0801bbcc
 800f5f0:	0801bb50 	.word	0x0801bb50
 800f5f4:	0801e30c 	.word	0x0801e30c

0800f5f8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f5f8:	b480      	push	{r7}
 800f5fa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f5fc:	bf00      	nop
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
	...

0800f608 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b086      	sub	sp, #24
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
 800f614:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d108      	bne.n	800f62e <netif_add+0x26>
 800f61c:	4b57      	ldr	r3, [pc, #348]	; (800f77c <netif_add+0x174>)
 800f61e:	f240 1227 	movw	r2, #295	; 0x127
 800f622:	4957      	ldr	r1, [pc, #348]	; (800f780 <netif_add+0x178>)
 800f624:	4857      	ldr	r0, [pc, #348]	; (800f784 <netif_add+0x17c>)
 800f626:	f00a fc0d 	bl	8019e44 <iprintf>
 800f62a:	2300      	movs	r3, #0
 800f62c:	e0a2      	b.n	800f774 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	2b00      	cmp	r3, #0
 800f632:	d108      	bne.n	800f646 <netif_add+0x3e>
 800f634:	4b51      	ldr	r3, [pc, #324]	; (800f77c <netif_add+0x174>)
 800f636:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f63a:	4953      	ldr	r1, [pc, #332]	; (800f788 <netif_add+0x180>)
 800f63c:	4851      	ldr	r0, [pc, #324]	; (800f784 <netif_add+0x17c>)
 800f63e:	f00a fc01 	bl	8019e44 <iprintf>
 800f642:	2300      	movs	r3, #0
 800f644:	e096      	b.n	800f774 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d101      	bne.n	800f650 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f64c:	4b4f      	ldr	r3, [pc, #316]	; (800f78c <netif_add+0x184>)
 800f64e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d101      	bne.n	800f65a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f656:	4b4d      	ldr	r3, [pc, #308]	; (800f78c <netif_add+0x184>)
 800f658:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d101      	bne.n	800f664 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f660:	4b4a      	ldr	r3, [pc, #296]	; (800f78c <netif_add+0x184>)
 800f662:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2200      	movs	r2, #0
 800f66e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	2200      	movs	r2, #0
 800f674:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	4a45      	ldr	r2, [pc, #276]	; (800f790 <netif_add+0x188>)
 800f67a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	2200      	movs	r2, #0
 800f680:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	6a3a      	ldr	r2, [r7, #32]
 800f694:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f696:	4b3f      	ldr	r3, [pc, #252]	; (800f794 <netif_add+0x18c>)
 800f698:	781a      	ldrb	r2, [r3, #0]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6a4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	68b9      	ldr	r1, [r7, #8]
 800f6ac:	68f8      	ldr	r0, [r7, #12]
 800f6ae:	f000 f913 	bl	800f8d8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	4798      	blx	r3
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <netif_add+0xba>
    return NULL;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	e058      	b.n	800f774 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6c8:	2bff      	cmp	r3, #255	; 0xff
 800f6ca:	d103      	bne.n	800f6d4 <netif_add+0xcc>
        netif->num = 0;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f6d8:	4b2f      	ldr	r3, [pc, #188]	; (800f798 <netif_add+0x190>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	617b      	str	r3, [r7, #20]
 800f6de:	e02b      	b.n	800f738 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f6e0:	697a      	ldr	r2, [r7, #20]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	d106      	bne.n	800f6f6 <netif_add+0xee>
 800f6e8:	4b24      	ldr	r3, [pc, #144]	; (800f77c <netif_add+0x174>)
 800f6ea:	f240 128b 	movw	r2, #395	; 0x18b
 800f6ee:	492b      	ldr	r1, [pc, #172]	; (800f79c <netif_add+0x194>)
 800f6f0:	4824      	ldr	r0, [pc, #144]	; (800f784 <netif_add+0x17c>)
 800f6f2:	f00a fba7 	bl	8019e44 <iprintf>
        num_netifs++;
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	2bff      	cmp	r3, #255	; 0xff
 800f700:	dd06      	ble.n	800f710 <netif_add+0x108>
 800f702:	4b1e      	ldr	r3, [pc, #120]	; (800f77c <netif_add+0x174>)
 800f704:	f240 128d 	movw	r2, #397	; 0x18d
 800f708:	4925      	ldr	r1, [pc, #148]	; (800f7a0 <netif_add+0x198>)
 800f70a:	481e      	ldr	r0, [pc, #120]	; (800f784 <netif_add+0x17c>)
 800f70c:	f00a fb9a 	bl	8019e44 <iprintf>
        if (netif2->num == netif->num) {
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d108      	bne.n	800f732 <netif_add+0x12a>
          netif->num++;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f726:	3301      	adds	r3, #1
 800f728:	b2da      	uxtb	r2, r3
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f730:	e005      	b.n	800f73e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1d0      	bne.n	800f6e0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d1be      	bne.n	800f6c2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f74a:	2bfe      	cmp	r3, #254	; 0xfe
 800f74c:	d103      	bne.n	800f756 <netif_add+0x14e>
    netif_num = 0;
 800f74e:	4b11      	ldr	r3, [pc, #68]	; (800f794 <netif_add+0x18c>)
 800f750:	2200      	movs	r2, #0
 800f752:	701a      	strb	r2, [r3, #0]
 800f754:	e006      	b.n	800f764 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f75c:	3301      	adds	r3, #1
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	4b0c      	ldr	r3, [pc, #48]	; (800f794 <netif_add+0x18c>)
 800f762:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f764:	4b0c      	ldr	r3, [pc, #48]	; (800f798 <netif_add+0x190>)
 800f766:	681a      	ldr	r2, [r3, #0]
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f76c:	4a0a      	ldr	r2, [pc, #40]	; (800f798 <netif_add+0x190>)
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f772:	68fb      	ldr	r3, [r7, #12]
}
 800f774:	4618      	mov	r0, r3
 800f776:	3718      	adds	r7, #24
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	0801bbe8 	.word	0x0801bbe8
 800f780:	0801bc7c 	.word	0x0801bc7c
 800f784:	0801bc38 	.word	0x0801bc38
 800f788:	0801bc98 	.word	0x0801bc98
 800f78c:	0801e380 	.word	0x0801e380
 800f790:	0800fbb3 	.word	0x0800fbb3
 800f794:	2004f580 	.word	0x2004f580
 800f798:	2004f578 	.word	0x2004f578
 800f79c:	0801bcbc 	.word	0x0801bcbc
 800f7a0:	0801bcd0 	.word	0x0801bcd0

0800f7a4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f7ae:	6839      	ldr	r1, [r7, #0]
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f002 fe4f 	bl	8012454 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f7b6:	6839      	ldr	r1, [r7, #0]
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f007 fcbf 	bl	801713c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f7be:	bf00      	nop
 800f7c0:	3708      	adds	r7, #8
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
	...

0800f7c8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b086      	sub	sp, #24
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d106      	bne.n	800f7e8 <netif_do_set_ipaddr+0x20>
 800f7da:	4b1d      	ldr	r3, [pc, #116]	; (800f850 <netif_do_set_ipaddr+0x88>)
 800f7dc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f7e0:	491c      	ldr	r1, [pc, #112]	; (800f854 <netif_do_set_ipaddr+0x8c>)
 800f7e2:	481d      	ldr	r0, [pc, #116]	; (800f858 <netif_do_set_ipaddr+0x90>)
 800f7e4:	f00a fb2e 	bl	8019e44 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <netif_do_set_ipaddr+0x34>
 800f7ee:	4b18      	ldr	r3, [pc, #96]	; (800f850 <netif_do_set_ipaddr+0x88>)
 800f7f0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f7f4:	4917      	ldr	r1, [pc, #92]	; (800f854 <netif_do_set_ipaddr+0x8c>)
 800f7f6:	4818      	ldr	r0, [pc, #96]	; (800f858 <netif_do_set_ipaddr+0x90>)
 800f7f8:	f00a fb24 	bl	8019e44 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	3304      	adds	r3, #4
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	429a      	cmp	r2, r3
 800f808:	d01c      	beq.n	800f844 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	3304      	adds	r3, #4
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f81a:	f107 0314 	add.w	r3, r7, #20
 800f81e:	4619      	mov	r1, r3
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7ff ffbf 	bl	800f7a4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <netif_do_set_ipaddr+0x6a>
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	e000      	b.n	800f834 <netif_do_set_ipaddr+0x6c>
 800f832:	2300      	movs	r3, #0
 800f834:	68fa      	ldr	r2, [r7, #12]
 800f836:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f838:	2101      	movs	r1, #1
 800f83a:	68f8      	ldr	r0, [r7, #12]
 800f83c:	f000 f8d2 	bl	800f9e4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f840:	2301      	movs	r3, #1
 800f842:	e000      	b.n	800f846 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f844:	2300      	movs	r3, #0
}
 800f846:	4618      	mov	r0, r3
 800f848:	3718      	adds	r7, #24
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	0801bbe8 	.word	0x0801bbe8
 800f854:	0801bd00 	.word	0x0801bd00
 800f858:	0801bc38 	.word	0x0801bc38

0800f85c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	3308      	adds	r3, #8
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	429a      	cmp	r2, r3
 800f874:	d00a      	beq.n	800f88c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <netif_do_set_netmask+0x26>
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	e000      	b.n	800f884 <netif_do_set_netmask+0x28>
 800f882:	2300      	movs	r3, #0
 800f884:	68fa      	ldr	r2, [r7, #12]
 800f886:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f888:	2301      	movs	r3, #1
 800f88a:	e000      	b.n	800f88e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f89a:	b480      	push	{r7}
 800f89c:	b085      	sub	sp, #20
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	60f8      	str	r0, [r7, #12]
 800f8a2:	60b9      	str	r1, [r7, #8]
 800f8a4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	330c      	adds	r3, #12
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d00a      	beq.n	800f8ca <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <netif_do_set_gw+0x26>
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	e000      	b.n	800f8c2 <netif_do_set_gw+0x28>
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e000      	b.n	800f8cc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3714      	adds	r7, #20
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr

0800f8d8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
 800f8e4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f8ee:	68bb      	ldr	r3, [r7, #8]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d101      	bne.n	800f8f8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f8f4:	4b1c      	ldr	r3, [pc, #112]	; (800f968 <netif_set_addr+0x90>)
 800f8f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f8fe:	4b1a      	ldr	r3, [pc, #104]	; (800f968 <netif_set_addr+0x90>)
 800f900:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d101      	bne.n	800f90c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f908:	4b17      	ldr	r3, [pc, #92]	; (800f968 <netif_set_addr+0x90>)
 800f90a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d003      	beq.n	800f91a <netif_set_addr+0x42>
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d101      	bne.n	800f91e <netif_set_addr+0x46>
 800f91a:	2301      	movs	r3, #1
 800f91c:	e000      	b.n	800f920 <netif_set_addr+0x48>
 800f91e:	2300      	movs	r3, #0
 800f920:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d006      	beq.n	800f936 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f928:	f107 0310 	add.w	r3, r7, #16
 800f92c:	461a      	mov	r2, r3
 800f92e:	68b9      	ldr	r1, [r7, #8]
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f7ff ff49 	bl	800f7c8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f936:	69fa      	ldr	r2, [r7, #28]
 800f938:	6879      	ldr	r1, [r7, #4]
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7ff ff8e 	bl	800f85c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f940:	69ba      	ldr	r2, [r7, #24]
 800f942:	6839      	ldr	r1, [r7, #0]
 800f944:	68f8      	ldr	r0, [r7, #12]
 800f946:	f7ff ffa8 	bl	800f89a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d106      	bne.n	800f95e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f950:	f107 0310 	add.w	r3, r7, #16
 800f954:	461a      	mov	r2, r3
 800f956:	68b9      	ldr	r1, [r7, #8]
 800f958:	68f8      	ldr	r0, [r7, #12]
 800f95a:	f7ff ff35 	bl	800f7c8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f95e:	bf00      	nop
 800f960:	3720      	adds	r7, #32
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	0801e380 	.word	0x0801e380

0800f96c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f974:	4a04      	ldr	r2, [pc, #16]	; (800f988 <netif_set_default+0x1c>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f97a:	bf00      	nop
 800f97c:	370c      	adds	r7, #12
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	2004f57c 	.word	0x2004f57c

0800f98c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d107      	bne.n	800f9aa <netif_set_up+0x1e>
 800f99a:	4b0f      	ldr	r3, [pc, #60]	; (800f9d8 <netif_set_up+0x4c>)
 800f99c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f9a0:	490e      	ldr	r1, [pc, #56]	; (800f9dc <netif_set_up+0x50>)
 800f9a2:	480f      	ldr	r0, [pc, #60]	; (800f9e0 <netif_set_up+0x54>)
 800f9a4:	f00a fa4e 	bl	8019e44 <iprintf>
 800f9a8:	e013      	b.n	800f9d2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9b0:	f003 0301 	and.w	r3, r3, #1
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d10c      	bne.n	800f9d2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9be:	f043 0301 	orr.w	r3, r3, #1
 800f9c2:	b2da      	uxtb	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f9ca:	2103      	movs	r1, #3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 f809 	bl	800f9e4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f9d2:	3708      	adds	r7, #8
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}
 800f9d8:	0801bbe8 	.word	0x0801bbe8
 800f9dc:	0801bd70 	.word	0x0801bd70
 800f9e0:	0801bc38 	.word	0x0801bc38

0800f9e4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b082      	sub	sp, #8
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	460b      	mov	r3, r1
 800f9ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d106      	bne.n	800fa04 <netif_issue_reports+0x20>
 800f9f6:	4b18      	ldr	r3, [pc, #96]	; (800fa58 <netif_issue_reports+0x74>)
 800f9f8:	f240 326d 	movw	r2, #877	; 0x36d
 800f9fc:	4917      	ldr	r1, [pc, #92]	; (800fa5c <netif_issue_reports+0x78>)
 800f9fe:	4818      	ldr	r0, [pc, #96]	; (800fa60 <netif_issue_reports+0x7c>)
 800fa00:	f00a fa20 	bl	8019e44 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa0a:	f003 0304 	and.w	r3, r3, #4
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d01e      	beq.n	800fa50 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa18:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d017      	beq.n	800fa50 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa20:	78fb      	ldrb	r3, [r7, #3]
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d013      	beq.n	800fa52 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	3304      	adds	r3, #4
 800fa2e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00e      	beq.n	800fa52 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa3a:	f003 0308 	and.w	r3, r3, #8
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d007      	beq.n	800fa52 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3304      	adds	r3, #4
 800fa46:	4619      	mov	r1, r3
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f008 fae1 	bl	8018010 <etharp_request>
 800fa4e:	e000      	b.n	800fa52 <netif_issue_reports+0x6e>
    return;
 800fa50:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	0801bbe8 	.word	0x0801bbe8
 800fa5c:	0801bd8c 	.word	0x0801bd8c
 800fa60:	0801bc38 	.word	0x0801bc38

0800fa64 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b082      	sub	sp, #8
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d107      	bne.n	800fa82 <netif_set_down+0x1e>
 800fa72:	4b12      	ldr	r3, [pc, #72]	; (800fabc <netif_set_down+0x58>)
 800fa74:	f240 329b 	movw	r2, #923	; 0x39b
 800fa78:	4911      	ldr	r1, [pc, #68]	; (800fac0 <netif_set_down+0x5c>)
 800fa7a:	4812      	ldr	r0, [pc, #72]	; (800fac4 <netif_set_down+0x60>)
 800fa7c:	f00a f9e2 	bl	8019e44 <iprintf>
 800fa80:	e019      	b.n	800fab6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa88:	f003 0301 	and.w	r3, r3, #1
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d012      	beq.n	800fab6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa96:	f023 0301 	bic.w	r3, r3, #1
 800fa9a:	b2da      	uxtb	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faa8:	f003 0308 	and.w	r3, r3, #8
 800faac:	2b00      	cmp	r3, #0
 800faae:	d002      	beq.n	800fab6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f007 fe6b 	bl	801778c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fab6:	3708      	adds	r7, #8
 800fab8:	46bd      	mov	sp, r7
 800faba:	bd80      	pop	{r7, pc}
 800fabc:	0801bbe8 	.word	0x0801bbe8
 800fac0:	0801bdb0 	.word	0x0801bdb0
 800fac4:	0801bc38 	.word	0x0801bc38

0800fac8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d107      	bne.n	800fae6 <netif_set_link_up+0x1e>
 800fad6:	4b13      	ldr	r3, [pc, #76]	; (800fb24 <netif_set_link_up+0x5c>)
 800fad8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fadc:	4912      	ldr	r1, [pc, #72]	; (800fb28 <netif_set_link_up+0x60>)
 800fade:	4813      	ldr	r0, [pc, #76]	; (800fb2c <netif_set_link_up+0x64>)
 800fae0:	f00a f9b0 	bl	8019e44 <iprintf>
 800fae4:	e01b      	b.n	800fb1e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800faec:	f003 0304 	and.w	r3, r3, #4
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d114      	bne.n	800fb1e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fafa:	f043 0304 	orr.w	r3, r3, #4
 800fafe:	b2da      	uxtb	r2, r3
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb06:	2103      	movs	r1, #3
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff ff6b 	bl	800f9e4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d003      	beq.n	800fb1e <netif_set_link_up+0x56>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	69db      	ldr	r3, [r3, #28]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	0801bbe8 	.word	0x0801bbe8
 800fb28:	0801bdd0 	.word	0x0801bdd0
 800fb2c:	0801bc38 	.word	0x0801bc38

0800fb30 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d107      	bne.n	800fb4e <netif_set_link_down+0x1e>
 800fb3e:	4b11      	ldr	r3, [pc, #68]	; (800fb84 <netif_set_link_down+0x54>)
 800fb40:	f240 4206 	movw	r2, #1030	; 0x406
 800fb44:	4910      	ldr	r1, [pc, #64]	; (800fb88 <netif_set_link_down+0x58>)
 800fb46:	4811      	ldr	r0, [pc, #68]	; (800fb8c <netif_set_link_down+0x5c>)
 800fb48:	f00a f97c 	bl	8019e44 <iprintf>
 800fb4c:	e017      	b.n	800fb7e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb54:	f003 0304 	and.w	r3, r3, #4
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d010      	beq.n	800fb7e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb62:	f023 0304 	bic.w	r3, r3, #4
 800fb66:	b2da      	uxtb	r2, r3
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	69db      	ldr	r3, [r3, #28]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d003      	beq.n	800fb7e <netif_set_link_down+0x4e>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	69db      	ldr	r3, [r3, #28]
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fb7e:	3708      	adds	r7, #8
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}
 800fb84:	0801bbe8 	.word	0x0801bbe8
 800fb88:	0801bdf4 	.word	0x0801bdf4
 800fb8c:	0801bc38 	.word	0x0801bc38

0800fb90 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	61da      	str	r2, [r3, #28]
  }
}
 800fba6:	bf00      	nop
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr

0800fbb2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fbb2:	b480      	push	{r7}
 800fbb4:	b085      	sub	sp, #20
 800fbb6:	af00      	add	r7, sp, #0
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	60b9      	str	r1, [r7, #8]
 800fbbc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fbbe:	f06f 030b 	mvn.w	r3, #11
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3714      	adds	r7, #20
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d013      	beq.n	800fc08 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fbe0:	4b0d      	ldr	r3, [pc, #52]	; (800fc18 <netif_get_by_index+0x48>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	e00c      	b.n	800fc02 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbee:	3301      	adds	r3, #1
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	79fa      	ldrb	r2, [r7, #7]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d101      	bne.n	800fbfc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	e006      	b.n	800fc0a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	60fb      	str	r3, [r7, #12]
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d1ef      	bne.n	800fbe8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fc08:	2300      	movs	r3, #0
}
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	3714      	adds	r7, #20
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	2004f578 	.word	0x2004f578

0800fc1c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b082      	sub	sp, #8
 800fc20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fc22:	f009 ff19 	bl	8019a58 <sys_arch_protect>
 800fc26:	6038      	str	r0, [r7, #0]
 800fc28:	4b0d      	ldr	r3, [pc, #52]	; (800fc60 <pbuf_free_ooseq+0x44>)
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	701a      	strb	r2, [r3, #0]
 800fc2e:	6838      	ldr	r0, [r7, #0]
 800fc30:	f009 ff20 	bl	8019a74 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc34:	4b0b      	ldr	r3, [pc, #44]	; (800fc64 <pbuf_free_ooseq+0x48>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	607b      	str	r3, [r7, #4]
 800fc3a:	e00a      	b.n	800fc52 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d003      	beq.n	800fc4c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f002 fc43 	bl	80124d0 <tcp_free_ooseq>
      return;
 800fc4a:	e005      	b.n	800fc58 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	607b      	str	r3, [r7, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1f1      	bne.n	800fc3c <pbuf_free_ooseq+0x20>
    }
  }
}
 800fc58:	3708      	adds	r7, #8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	2004f581 	.word	0x2004f581
 800fc64:	2004f590 	.word	0x2004f590

0800fc68 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fc70:	f7ff ffd4 	bl	800fc1c <pbuf_free_ooseq>
}
 800fc74:	bf00      	nop
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fc82:	f009 fee9 	bl	8019a58 <sys_arch_protect>
 800fc86:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fc88:	4b0f      	ldr	r3, [pc, #60]	; (800fcc8 <pbuf_pool_is_empty+0x4c>)
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fc8e:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <pbuf_pool_is_empty+0x4c>)
 800fc90:	2201      	movs	r2, #1
 800fc92:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f009 feed 	bl	8019a74 <sys_arch_unprotect>

  if (!queued) {
 800fc9a:	78fb      	ldrb	r3, [r7, #3]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d10f      	bne.n	800fcc0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fca0:	2100      	movs	r1, #0
 800fca2:	480a      	ldr	r0, [pc, #40]	; (800fccc <pbuf_pool_is_empty+0x50>)
 800fca4:	f7fe fe90 	bl	800e9c8 <tcpip_try_callback>
 800fca8:	4603      	mov	r3, r0
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d008      	beq.n	800fcc0 <pbuf_pool_is_empty+0x44>
 800fcae:	f009 fed3 	bl	8019a58 <sys_arch_protect>
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	4b04      	ldr	r3, [pc, #16]	; (800fcc8 <pbuf_pool_is_empty+0x4c>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	701a      	strb	r2, [r3, #0]
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f009 feda 	bl	8019a74 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fcc0:	bf00      	nop
 800fcc2:	3708      	adds	r7, #8
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	2004f581 	.word	0x2004f581
 800fccc:	0800fc69 	.word	0x0800fc69

0800fcd0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	4611      	mov	r1, r2
 800fcdc:	461a      	mov	r2, r3
 800fcde:	460b      	mov	r3, r1
 800fce0:	80fb      	strh	r3, [r7, #6]
 800fce2:	4613      	mov	r3, r2
 800fce4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	68ba      	ldr	r2, [r7, #8]
 800fcf0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	88fa      	ldrh	r2, [r7, #6]
 800fcf6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	88ba      	ldrh	r2, [r7, #4]
 800fcfc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fcfe:	8b3b      	ldrh	r3, [r7, #24]
 800fd00:	b2da      	uxtb	r2, r3
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	7f3a      	ldrb	r2, [r7, #28]
 800fd0a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2200      	movs	r2, #0
 800fd16:	73da      	strb	r2, [r3, #15]
}
 800fd18:	bf00      	nop
 800fd1a:	3714      	adds	r7, #20
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd22:	4770      	bx	lr

0800fd24 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b08c      	sub	sp, #48	; 0x30
 800fd28:	af02      	add	r7, sp, #8
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	71fb      	strb	r3, [r7, #7]
 800fd2e:	460b      	mov	r3, r1
 800fd30:	80bb      	strh	r3, [r7, #4]
 800fd32:	4613      	mov	r3, r2
 800fd34:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fd3a:	887b      	ldrh	r3, [r7, #2]
 800fd3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fd40:	d07f      	beq.n	800fe42 <pbuf_alloc+0x11e>
 800fd42:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fd46:	f300 80c8 	bgt.w	800feda <pbuf_alloc+0x1b6>
 800fd4a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fd4e:	d010      	beq.n	800fd72 <pbuf_alloc+0x4e>
 800fd50:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fd54:	f300 80c1 	bgt.w	800feda <pbuf_alloc+0x1b6>
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d002      	beq.n	800fd62 <pbuf_alloc+0x3e>
 800fd5c:	2b41      	cmp	r3, #65	; 0x41
 800fd5e:	f040 80bc 	bne.w	800feda <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fd62:	887a      	ldrh	r2, [r7, #2]
 800fd64:	88bb      	ldrh	r3, [r7, #4]
 800fd66:	4619      	mov	r1, r3
 800fd68:	2000      	movs	r0, #0
 800fd6a:	f000 f8d1 	bl	800ff10 <pbuf_alloc_reference>
 800fd6e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fd70:	e0bd      	b.n	800feee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fd76:	2300      	movs	r3, #0
 800fd78:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fd7a:	88bb      	ldrh	r3, [r7, #4]
 800fd7c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fd7e:	200c      	movs	r0, #12
 800fd80:	f7ff fb9a 	bl	800f4b8 <memp_malloc>
 800fd84:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d109      	bne.n	800fda0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800fd8c:	f7ff ff76 	bl	800fc7c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <pbuf_alloc+0x78>
            pbuf_free(p);
 800fd96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd98:	f000 faa8 	bl	80102ec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	e0a7      	b.n	800fef0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fda0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fda2:	3303      	adds	r3, #3
 800fda4:	b29b      	uxth	r3, r3
 800fda6:	f023 0303 	bic.w	r3, r3, #3
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	8b7a      	ldrh	r2, [r7, #26]
 800fdb4:	4293      	cmp	r3, r2
 800fdb6:	bf28      	it	cs
 800fdb8:	4613      	movcs	r3, r2
 800fdba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fdbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdbe:	3310      	adds	r3, #16
 800fdc0:	693a      	ldr	r2, [r7, #16]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	3303      	adds	r3, #3
 800fdc6:	f023 0303 	bic.w	r3, r3, #3
 800fdca:	4618      	mov	r0, r3
 800fdcc:	89f9      	ldrh	r1, [r7, #14]
 800fdce:	8b7a      	ldrh	r2, [r7, #26]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	9301      	str	r3, [sp, #4]
 800fdd4:	887b      	ldrh	r3, [r7, #2]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	460b      	mov	r3, r1
 800fdda:	4601      	mov	r1, r0
 800fddc:	6938      	ldr	r0, [r7, #16]
 800fdde:	f7ff ff77 	bl	800fcd0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	f003 0303 	and.w	r3, r3, #3
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d006      	beq.n	800fdfc <pbuf_alloc+0xd8>
 800fdee:	4b42      	ldr	r3, [pc, #264]	; (800fef8 <pbuf_alloc+0x1d4>)
 800fdf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdf4:	4941      	ldr	r1, [pc, #260]	; (800fefc <pbuf_alloc+0x1d8>)
 800fdf6:	4842      	ldr	r0, [pc, #264]	; (800ff00 <pbuf_alloc+0x1dc>)
 800fdf8:	f00a f824 	bl	8019e44 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fdfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdfe:	3303      	adds	r3, #3
 800fe00:	f023 0303 	bic.w	r3, r3, #3
 800fe04:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800fe08:	d106      	bne.n	800fe18 <pbuf_alloc+0xf4>
 800fe0a:	4b3b      	ldr	r3, [pc, #236]	; (800fef8 <pbuf_alloc+0x1d4>)
 800fe0c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fe10:	493c      	ldr	r1, [pc, #240]	; (800ff04 <pbuf_alloc+0x1e0>)
 800fe12:	483b      	ldr	r0, [pc, #236]	; (800ff00 <pbuf_alloc+0x1dc>)
 800fe14:	f00a f816 	bl	8019e44 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fe18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d102      	bne.n	800fe24 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	627b      	str	r3, [r7, #36]	; 0x24
 800fe22:	e002      	b.n	800fe2a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	693a      	ldr	r2, [r7, #16]
 800fe28:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fe2e:	8b7a      	ldrh	r2, [r7, #26]
 800fe30:	89fb      	ldrh	r3, [r7, #14]
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fe3a:	8b7b      	ldrh	r3, [r7, #26]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d19e      	bne.n	800fd7e <pbuf_alloc+0x5a>
      break;
 800fe40:	e055      	b.n	800feee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fe42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe44:	3303      	adds	r3, #3
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	f023 0303 	bic.w	r3, r3, #3
 800fe4c:	b29a      	uxth	r2, r3
 800fe4e:	88bb      	ldrh	r3, [r7, #4]
 800fe50:	3303      	adds	r3, #3
 800fe52:	b29b      	uxth	r3, r3
 800fe54:	f023 0303 	bic.w	r3, r3, #3
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	4413      	add	r3, r2
 800fe5c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fe5e:	8b3b      	ldrh	r3, [r7, #24]
 800fe60:	3310      	adds	r3, #16
 800fe62:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fe64:	8b3a      	ldrh	r2, [r7, #24]
 800fe66:	88bb      	ldrh	r3, [r7, #4]
 800fe68:	3303      	adds	r3, #3
 800fe6a:	f023 0303 	bic.w	r3, r3, #3
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d306      	bcc.n	800fe80 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fe72:	8afa      	ldrh	r2, [r7, #22]
 800fe74:	88bb      	ldrh	r3, [r7, #4]
 800fe76:	3303      	adds	r3, #3
 800fe78:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d201      	bcs.n	800fe84 <pbuf_alloc+0x160>
        return NULL;
 800fe80:	2300      	movs	r3, #0
 800fe82:	e035      	b.n	800fef0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fe84:	8afb      	ldrh	r3, [r7, #22]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7ff f972 	bl	800f170 <mem_malloc>
 800fe8c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fe8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <pbuf_alloc+0x174>
        return NULL;
 800fe94:	2300      	movs	r3, #0
 800fe96:	e02b      	b.n	800fef0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fe98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe9a:	3310      	adds	r3, #16
 800fe9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe9e:	4413      	add	r3, r2
 800fea0:	3303      	adds	r3, #3
 800fea2:	f023 0303 	bic.w	r3, r3, #3
 800fea6:	4618      	mov	r0, r3
 800fea8:	88b9      	ldrh	r1, [r7, #4]
 800feaa:	88ba      	ldrh	r2, [r7, #4]
 800feac:	2300      	movs	r3, #0
 800feae:	9301      	str	r3, [sp, #4]
 800feb0:	887b      	ldrh	r3, [r7, #2]
 800feb2:	9300      	str	r3, [sp, #0]
 800feb4:	460b      	mov	r3, r1
 800feb6:	4601      	mov	r1, r0
 800feb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800feba:	f7ff ff09 	bl	800fcd0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800febe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	f003 0303 	and.w	r3, r3, #3
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d010      	beq.n	800feec <pbuf_alloc+0x1c8>
 800feca:	4b0b      	ldr	r3, [pc, #44]	; (800fef8 <pbuf_alloc+0x1d4>)
 800fecc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fed0:	490d      	ldr	r1, [pc, #52]	; (800ff08 <pbuf_alloc+0x1e4>)
 800fed2:	480b      	ldr	r0, [pc, #44]	; (800ff00 <pbuf_alloc+0x1dc>)
 800fed4:	f009 ffb6 	bl	8019e44 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800fed8:	e008      	b.n	800feec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800feda:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <pbuf_alloc+0x1d4>)
 800fedc:	f240 1227 	movw	r2, #295	; 0x127
 800fee0:	490a      	ldr	r1, [pc, #40]	; (800ff0c <pbuf_alloc+0x1e8>)
 800fee2:	4807      	ldr	r0, [pc, #28]	; (800ff00 <pbuf_alloc+0x1dc>)
 800fee4:	f009 ffae 	bl	8019e44 <iprintf>
      return NULL;
 800fee8:	2300      	movs	r3, #0
 800feea:	e001      	b.n	800fef0 <pbuf_alloc+0x1cc>
      break;
 800feec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3728      	adds	r7, #40	; 0x28
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	0801be18 	.word	0x0801be18
 800fefc:	0801be48 	.word	0x0801be48
 800ff00:	0801be78 	.word	0x0801be78
 800ff04:	0801bea0 	.word	0x0801bea0
 800ff08:	0801bed4 	.word	0x0801bed4
 800ff0c:	0801bf00 	.word	0x0801bf00

0800ff10 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b086      	sub	sp, #24
 800ff14:	af02      	add	r7, sp, #8
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	460b      	mov	r3, r1
 800ff1a:	807b      	strh	r3, [r7, #2]
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ff20:	883b      	ldrh	r3, [r7, #0]
 800ff22:	2b41      	cmp	r3, #65	; 0x41
 800ff24:	d009      	beq.n	800ff3a <pbuf_alloc_reference+0x2a>
 800ff26:	883b      	ldrh	r3, [r7, #0]
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d006      	beq.n	800ff3a <pbuf_alloc_reference+0x2a>
 800ff2c:	4b0f      	ldr	r3, [pc, #60]	; (800ff6c <pbuf_alloc_reference+0x5c>)
 800ff2e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ff32:	490f      	ldr	r1, [pc, #60]	; (800ff70 <pbuf_alloc_reference+0x60>)
 800ff34:	480f      	ldr	r0, [pc, #60]	; (800ff74 <pbuf_alloc_reference+0x64>)
 800ff36:	f009 ff85 	bl	8019e44 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ff3a:	200b      	movs	r0, #11
 800ff3c:	f7ff fabc 	bl	800f4b8 <memp_malloc>
 800ff40:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d101      	bne.n	800ff4c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	e00b      	b.n	800ff64 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ff4c:	8879      	ldrh	r1, [r7, #2]
 800ff4e:	887a      	ldrh	r2, [r7, #2]
 800ff50:	2300      	movs	r3, #0
 800ff52:	9301      	str	r3, [sp, #4]
 800ff54:	883b      	ldrh	r3, [r7, #0]
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	6879      	ldr	r1, [r7, #4]
 800ff5c:	68f8      	ldr	r0, [r7, #12]
 800ff5e:	f7ff feb7 	bl	800fcd0 <pbuf_init_alloced_pbuf>
  return p;
 800ff62:	68fb      	ldr	r3, [r7, #12]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	0801be18 	.word	0x0801be18
 800ff70:	0801bf1c 	.word	0x0801bf1c
 800ff74:	0801be78 	.word	0x0801be78

0800ff78 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b088      	sub	sp, #32
 800ff7c:	af02      	add	r7, sp, #8
 800ff7e:	607b      	str	r3, [r7, #4]
 800ff80:	4603      	mov	r3, r0
 800ff82:	73fb      	strb	r3, [r7, #15]
 800ff84:	460b      	mov	r3, r1
 800ff86:	81bb      	strh	r3, [r7, #12]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ff8c:	7bfb      	ldrb	r3, [r7, #15]
 800ff8e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ff90:	8a7b      	ldrh	r3, [r7, #18]
 800ff92:	3303      	adds	r3, #3
 800ff94:	f023 0203 	bic.w	r2, r3, #3
 800ff98:	89bb      	ldrh	r3, [r7, #12]
 800ff9a:	441a      	add	r2, r3
 800ff9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d901      	bls.n	800ffa6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	e018      	b.n	800ffd8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d007      	beq.n	800ffbc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ffac:	8a7b      	ldrh	r3, [r7, #18]
 800ffae:	3303      	adds	r3, #3
 800ffb0:	f023 0303 	bic.w	r3, r3, #3
 800ffb4:	6a3a      	ldr	r2, [r7, #32]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	617b      	str	r3, [r7, #20]
 800ffba:	e001      	b.n	800ffc0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	89b9      	ldrh	r1, [r7, #12]
 800ffc4:	89ba      	ldrh	r2, [r7, #12]
 800ffc6:	2302      	movs	r3, #2
 800ffc8:	9301      	str	r3, [sp, #4]
 800ffca:	897b      	ldrh	r3, [r7, #10]
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	460b      	mov	r3, r1
 800ffd0:	6979      	ldr	r1, [r7, #20]
 800ffd2:	f7ff fe7d 	bl	800fcd0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ffd6:	687b      	ldr	r3, [r7, #4]
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3718      	adds	r7, #24
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	460b      	mov	r3, r1
 800ffea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d106      	bne.n	8010000 <pbuf_realloc+0x20>
 800fff2:	4b3a      	ldr	r3, [pc, #232]	; (80100dc <pbuf_realloc+0xfc>)
 800fff4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fff8:	4939      	ldr	r1, [pc, #228]	; (80100e0 <pbuf_realloc+0x100>)
 800fffa:	483a      	ldr	r0, [pc, #232]	; (80100e4 <pbuf_realloc+0x104>)
 800fffc:	f009 ff22 	bl	8019e44 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	891b      	ldrh	r3, [r3, #8]
 8010004:	887a      	ldrh	r2, [r7, #2]
 8010006:	429a      	cmp	r2, r3
 8010008:	d263      	bcs.n	80100d2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	891a      	ldrh	r2, [r3, #8]
 801000e:	887b      	ldrh	r3, [r7, #2]
 8010010:	1ad3      	subs	r3, r2, r3
 8010012:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010014:	887b      	ldrh	r3, [r7, #2]
 8010016:	817b      	strh	r3, [r7, #10]
  q = p;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801001c:	e018      	b.n	8010050 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	895b      	ldrh	r3, [r3, #10]
 8010022:	897a      	ldrh	r2, [r7, #10]
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	891a      	ldrh	r2, [r3, #8]
 801002c:	893b      	ldrh	r3, [r7, #8]
 801002e:	1ad3      	subs	r3, r2, r3
 8010030:	b29a      	uxth	r2, r3
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d106      	bne.n	8010050 <pbuf_realloc+0x70>
 8010042:	4b26      	ldr	r3, [pc, #152]	; (80100dc <pbuf_realloc+0xfc>)
 8010044:	f240 12af 	movw	r2, #431	; 0x1af
 8010048:	4927      	ldr	r1, [pc, #156]	; (80100e8 <pbuf_realloc+0x108>)
 801004a:	4826      	ldr	r0, [pc, #152]	; (80100e4 <pbuf_realloc+0x104>)
 801004c:	f009 fefa 	bl	8019e44 <iprintf>
  while (rem_len > q->len) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	895b      	ldrh	r3, [r3, #10]
 8010054:	897a      	ldrh	r2, [r7, #10]
 8010056:	429a      	cmp	r2, r3
 8010058:	d8e1      	bhi.n	801001e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7b1b      	ldrb	r3, [r3, #12]
 801005e:	f003 030f 	and.w	r3, r3, #15
 8010062:	2b00      	cmp	r3, #0
 8010064:	d121      	bne.n	80100aa <pbuf_realloc+0xca>
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	895b      	ldrh	r3, [r3, #10]
 801006a:	897a      	ldrh	r2, [r7, #10]
 801006c:	429a      	cmp	r2, r3
 801006e:	d01c      	beq.n	80100aa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	7b5b      	ldrb	r3, [r3, #13]
 8010074:	f003 0302 	and.w	r3, r3, #2
 8010078:	2b00      	cmp	r3, #0
 801007a:	d116      	bne.n	80100aa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	685a      	ldr	r2, [r3, #4]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	b29a      	uxth	r2, r3
 8010086:	897b      	ldrh	r3, [r7, #10]
 8010088:	4413      	add	r3, r2
 801008a:	b29b      	uxth	r3, r3
 801008c:	4619      	mov	r1, r3
 801008e:	68f8      	ldr	r0, [r7, #12]
 8010090:	f7fe ff64 	bl	800ef5c <mem_trim>
 8010094:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d106      	bne.n	80100aa <pbuf_realloc+0xca>
 801009c:	4b0f      	ldr	r3, [pc, #60]	; (80100dc <pbuf_realloc+0xfc>)
 801009e:	f240 12bd 	movw	r2, #445	; 0x1bd
 80100a2:	4912      	ldr	r1, [pc, #72]	; (80100ec <pbuf_realloc+0x10c>)
 80100a4:	480f      	ldr	r0, [pc, #60]	; (80100e4 <pbuf_realloc+0x104>)
 80100a6:	f009 fecd 	bl	8019e44 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	897a      	ldrh	r2, [r7, #10]
 80100ae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	895a      	ldrh	r2, [r3, #10]
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d004      	beq.n	80100ca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 f911 	bl	80102ec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2200      	movs	r2, #0
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	e000      	b.n	80100d4 <pbuf_realloc+0xf4>
    return;
 80100d2:	bf00      	nop

}
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	0801be18 	.word	0x0801be18
 80100e0:	0801bf30 	.word	0x0801bf30
 80100e4:	0801be78 	.word	0x0801be78
 80100e8:	0801bf48 	.word	0x0801bf48
 80100ec:	0801bf60 	.word	0x0801bf60

080100f0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	4613      	mov	r3, r2
 80100fc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d106      	bne.n	8010112 <pbuf_add_header_impl+0x22>
 8010104:	4b2b      	ldr	r3, [pc, #172]	; (80101b4 <pbuf_add_header_impl+0xc4>)
 8010106:	f240 12df 	movw	r2, #479	; 0x1df
 801010a:	492b      	ldr	r1, [pc, #172]	; (80101b8 <pbuf_add_header_impl+0xc8>)
 801010c:	482b      	ldr	r0, [pc, #172]	; (80101bc <pbuf_add_header_impl+0xcc>)
 801010e:	f009 fe99 	bl	8019e44 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d003      	beq.n	8010120 <pbuf_add_header_impl+0x30>
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801011e:	d301      	bcc.n	8010124 <pbuf_add_header_impl+0x34>
    return 1;
 8010120:	2301      	movs	r3, #1
 8010122:	e043      	b.n	80101ac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010124:	68bb      	ldr	r3, [r7, #8]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d101      	bne.n	801012e <pbuf_add_header_impl+0x3e>
    return 0;
 801012a:	2300      	movs	r3, #0
 801012c:	e03e      	b.n	80101ac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	891a      	ldrh	r2, [r3, #8]
 8010136:	8a7b      	ldrh	r3, [r7, #18]
 8010138:	4413      	add	r3, r2
 801013a:	b29b      	uxth	r3, r3
 801013c:	8a7a      	ldrh	r2, [r7, #18]
 801013e:	429a      	cmp	r2, r3
 8010140:	d901      	bls.n	8010146 <pbuf_add_header_impl+0x56>
    return 1;
 8010142:	2301      	movs	r3, #1
 8010144:	e032      	b.n	80101ac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	7b1b      	ldrb	r3, [r3, #12]
 801014a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801014c:	8a3b      	ldrh	r3, [r7, #16]
 801014e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00c      	beq.n	8010170 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	685a      	ldr	r2, [r3, #4]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	425b      	negs	r3, r3
 801015e:	4413      	add	r3, r2
 8010160:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	3310      	adds	r3, #16
 8010166:	697a      	ldr	r2, [r7, #20]
 8010168:	429a      	cmp	r2, r3
 801016a:	d20d      	bcs.n	8010188 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801016c:	2301      	movs	r3, #1
 801016e:	e01d      	b.n	80101ac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d006      	beq.n	8010184 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	685a      	ldr	r2, [r3, #4]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	425b      	negs	r3, r3
 801017e:	4413      	add	r3, r2
 8010180:	617b      	str	r3, [r7, #20]
 8010182:	e001      	b.n	8010188 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010184:	2301      	movs	r3, #1
 8010186:	e011      	b.n	80101ac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	697a      	ldr	r2, [r7, #20]
 801018c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	895a      	ldrh	r2, [r3, #10]
 8010192:	8a7b      	ldrh	r3, [r7, #18]
 8010194:	4413      	add	r3, r2
 8010196:	b29a      	uxth	r2, r3
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	891a      	ldrh	r2, [r3, #8]
 80101a0:	8a7b      	ldrh	r3, [r7, #18]
 80101a2:	4413      	add	r3, r2
 80101a4:	b29a      	uxth	r2, r3
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	811a      	strh	r2, [r3, #8]


  return 0;
 80101aa:	2300      	movs	r3, #0
}
 80101ac:	4618      	mov	r0, r3
 80101ae:	3718      	adds	r7, #24
 80101b0:	46bd      	mov	sp, r7
 80101b2:	bd80      	pop	{r7, pc}
 80101b4:	0801be18 	.word	0x0801be18
 80101b8:	0801bf7c 	.word	0x0801bf7c
 80101bc:	0801be78 	.word	0x0801be78

080101c0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b082      	sub	sp, #8
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	6078      	str	r0, [r7, #4]
 80101c8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80101ca:	2200      	movs	r2, #0
 80101cc:	6839      	ldr	r1, [r7, #0]
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7ff ff8e 	bl	80100f0 <pbuf_add_header_impl>
 80101d4:	4603      	mov	r3, r0
}
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
	...

080101e0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d106      	bne.n	80101fe <pbuf_remove_header+0x1e>
 80101f0:	4b20      	ldr	r3, [pc, #128]	; (8010274 <pbuf_remove_header+0x94>)
 80101f2:	f240 224b 	movw	r2, #587	; 0x24b
 80101f6:	4920      	ldr	r1, [pc, #128]	; (8010278 <pbuf_remove_header+0x98>)
 80101f8:	4820      	ldr	r0, [pc, #128]	; (801027c <pbuf_remove_header+0x9c>)
 80101fa:	f009 fe23 	bl	8019e44 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d003      	beq.n	801020c <pbuf_remove_header+0x2c>
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801020a:	d301      	bcc.n	8010210 <pbuf_remove_header+0x30>
    return 1;
 801020c:	2301      	movs	r3, #1
 801020e:	e02c      	b.n	801026a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <pbuf_remove_header+0x3a>
    return 0;
 8010216:	2300      	movs	r3, #0
 8010218:	e027      	b.n	801026a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	895b      	ldrh	r3, [r3, #10]
 8010222:	89fa      	ldrh	r2, [r7, #14]
 8010224:	429a      	cmp	r2, r3
 8010226:	d908      	bls.n	801023a <pbuf_remove_header+0x5a>
 8010228:	4b12      	ldr	r3, [pc, #72]	; (8010274 <pbuf_remove_header+0x94>)
 801022a:	f240 2255 	movw	r2, #597	; 0x255
 801022e:	4914      	ldr	r1, [pc, #80]	; (8010280 <pbuf_remove_header+0xa0>)
 8010230:	4812      	ldr	r0, [pc, #72]	; (801027c <pbuf_remove_header+0x9c>)
 8010232:	f009 fe07 	bl	8019e44 <iprintf>
 8010236:	2301      	movs	r3, #1
 8010238:	e017      	b.n	801026a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685a      	ldr	r2, [r3, #4]
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	441a      	add	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	895a      	ldrh	r2, [r3, #10]
 8010250:	89fb      	ldrh	r3, [r7, #14]
 8010252:	1ad3      	subs	r3, r2, r3
 8010254:	b29a      	uxth	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	891a      	ldrh	r2, [r3, #8]
 801025e:	89fb      	ldrh	r3, [r7, #14]
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	b29a      	uxth	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010268:	2300      	movs	r3, #0
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	0801be18 	.word	0x0801be18
 8010278:	0801bf7c 	.word	0x0801bf7c
 801027c:	0801be78 	.word	0x0801be78
 8010280:	0801bf88 	.word	0x0801bf88

08010284 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	460b      	mov	r3, r1
 801028e:	807b      	strh	r3, [r7, #2]
 8010290:	4613      	mov	r3, r2
 8010292:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010294:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010298:	2b00      	cmp	r3, #0
 801029a:	da08      	bge.n	80102ae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801029c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102a0:	425b      	negs	r3, r3
 80102a2:	4619      	mov	r1, r3
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7ff ff9b 	bl	80101e0 <pbuf_remove_header>
 80102aa:	4603      	mov	r3, r0
 80102ac:	e007      	b.n	80102be <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80102ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102b2:	787a      	ldrb	r2, [r7, #1]
 80102b4:	4619      	mov	r1, r3
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7ff ff1a 	bl	80100f0 <pbuf_add_header_impl>
 80102bc:	4603      	mov	r3, r0
  }
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b082      	sub	sp, #8
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
 80102ce:	460b      	mov	r3, r1
 80102d0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80102d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102d6:	2201      	movs	r2, #1
 80102d8:	4619      	mov	r1, r3
 80102da:	6878      	ldr	r0, [r7, #4]
 80102dc:	f7ff ffd2 	bl	8010284 <pbuf_header_impl>
 80102e0:	4603      	mov	r3, r0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
	...

080102ec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b088      	sub	sp, #32
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10b      	bne.n	8010312 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d106      	bne.n	801030e <pbuf_free+0x22>
 8010300:	4b3b      	ldr	r3, [pc, #236]	; (80103f0 <pbuf_free+0x104>)
 8010302:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8010306:	493b      	ldr	r1, [pc, #236]	; (80103f4 <pbuf_free+0x108>)
 8010308:	483b      	ldr	r0, [pc, #236]	; (80103f8 <pbuf_free+0x10c>)
 801030a:	f009 fd9b 	bl	8019e44 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801030e:	2300      	movs	r3, #0
 8010310:	e069      	b.n	80103e6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010312:	2300      	movs	r3, #0
 8010314:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010316:	e062      	b.n	80103de <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010318:	f009 fb9e 	bl	8019a58 <sys_arch_protect>
 801031c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	7b9b      	ldrb	r3, [r3, #14]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <pbuf_free+0x48>
 8010326:	4b32      	ldr	r3, [pc, #200]	; (80103f0 <pbuf_free+0x104>)
 8010328:	f240 22f1 	movw	r2, #753	; 0x2f1
 801032c:	4933      	ldr	r1, [pc, #204]	; (80103fc <pbuf_free+0x110>)
 801032e:	4832      	ldr	r0, [pc, #200]	; (80103f8 <pbuf_free+0x10c>)
 8010330:	f009 fd88 	bl	8019e44 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	7b9b      	ldrb	r3, [r3, #14]
 8010338:	3b01      	subs	r3, #1
 801033a:	b2da      	uxtb	r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	739a      	strb	r2, [r3, #14]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	7b9b      	ldrb	r3, [r3, #14]
 8010344:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010346:	69b8      	ldr	r0, [r7, #24]
 8010348:	f009 fb94 	bl	8019a74 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801034c:	7dfb      	ldrb	r3, [r7, #23]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d143      	bne.n	80103da <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	7b1b      	ldrb	r3, [r3, #12]
 801035c:	f003 030f 	and.w	r3, r3, #15
 8010360:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	7b5b      	ldrb	r3, [r3, #13]
 8010366:	f003 0302 	and.w	r3, r3, #2
 801036a:	2b00      	cmp	r3, #0
 801036c:	d011      	beq.n	8010392 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d106      	bne.n	8010388 <pbuf_free+0x9c>
 801037a:	4b1d      	ldr	r3, [pc, #116]	; (80103f0 <pbuf_free+0x104>)
 801037c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010380:	491f      	ldr	r1, [pc, #124]	; (8010400 <pbuf_free+0x114>)
 8010382:	481d      	ldr	r0, [pc, #116]	; (80103f8 <pbuf_free+0x10c>)
 8010384:	f009 fd5e 	bl	8019e44 <iprintf>
        pc->custom_free_function(p);
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	691b      	ldr	r3, [r3, #16]
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	4798      	blx	r3
 8010390:	e01d      	b.n	80103ce <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010392:	7bfb      	ldrb	r3, [r7, #15]
 8010394:	2b02      	cmp	r3, #2
 8010396:	d104      	bne.n	80103a2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010398:	6879      	ldr	r1, [r7, #4]
 801039a:	200c      	movs	r0, #12
 801039c:	f7ff f902 	bl	800f5a4 <memp_free>
 80103a0:	e015      	b.n	80103ce <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80103a2:	7bfb      	ldrb	r3, [r7, #15]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d104      	bne.n	80103b2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80103a8:	6879      	ldr	r1, [r7, #4]
 80103aa:	200b      	movs	r0, #11
 80103ac:	f7ff f8fa 	bl	800f5a4 <memp_free>
 80103b0:	e00d      	b.n	80103ce <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80103b2:	7bfb      	ldrb	r3, [r7, #15]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d103      	bne.n	80103c0 <pbuf_free+0xd4>
          mem_free(p);
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f7fe fd3f 	bl	800ee3c <mem_free>
 80103be:	e006      	b.n	80103ce <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80103c0:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <pbuf_free+0x104>)
 80103c2:	f240 320f 	movw	r2, #783	; 0x30f
 80103c6:	490f      	ldr	r1, [pc, #60]	; (8010404 <pbuf_free+0x118>)
 80103c8:	480b      	ldr	r0, [pc, #44]	; (80103f8 <pbuf_free+0x10c>)
 80103ca:	f009 fd3b 	bl	8019e44 <iprintf>
        }
      }
      count++;
 80103ce:	7ffb      	ldrb	r3, [r7, #31]
 80103d0:	3301      	adds	r3, #1
 80103d2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	607b      	str	r3, [r7, #4]
 80103d8:	e001      	b.n	80103de <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80103da:	2300      	movs	r3, #0
 80103dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d199      	bne.n	8010318 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80103e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80103e6:	4618      	mov	r0, r3
 80103e8:	3720      	adds	r7, #32
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	0801be18 	.word	0x0801be18
 80103f4:	0801bf7c 	.word	0x0801bf7c
 80103f8:	0801be78 	.word	0x0801be78
 80103fc:	0801bfa8 	.word	0x0801bfa8
 8010400:	0801bfc0 	.word	0x0801bfc0
 8010404:	0801bfe4 	.word	0x0801bfe4

08010408 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010410:	2300      	movs	r3, #0
 8010412:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010414:	e005      	b.n	8010422 <pbuf_clen+0x1a>
    ++len;
 8010416:	89fb      	ldrh	r3, [r7, #14]
 8010418:	3301      	adds	r3, #1
 801041a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d1f6      	bne.n	8010416 <pbuf_clen+0xe>
  }
  return len;
 8010428:	89fb      	ldrh	r3, [r7, #14]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3714      	adds	r7, #20
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
	...

08010438 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d016      	beq.n	8010474 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010446:	f009 fb07 	bl	8019a58 <sys_arch_protect>
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7b9b      	ldrb	r3, [r3, #14]
 8010450:	3301      	adds	r3, #1
 8010452:	b2da      	uxtb	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	739a      	strb	r2, [r3, #14]
 8010458:	68f8      	ldr	r0, [r7, #12]
 801045a:	f009 fb0b 	bl	8019a74 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	7b9b      	ldrb	r3, [r3, #14]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d106      	bne.n	8010474 <pbuf_ref+0x3c>
 8010466:	4b05      	ldr	r3, [pc, #20]	; (801047c <pbuf_ref+0x44>)
 8010468:	f240 3242 	movw	r2, #834	; 0x342
 801046c:	4904      	ldr	r1, [pc, #16]	; (8010480 <pbuf_ref+0x48>)
 801046e:	4805      	ldr	r0, [pc, #20]	; (8010484 <pbuf_ref+0x4c>)
 8010470:	f009 fce8 	bl	8019e44 <iprintf>
  }
}
 8010474:	bf00      	nop
 8010476:	3710      	adds	r7, #16
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	0801be18 	.word	0x0801be18
 8010480:	0801bff8 	.word	0x0801bff8
 8010484:	0801be78 	.word	0x0801be78

08010488 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d002      	beq.n	801049e <pbuf_cat+0x16>
 8010498:	683b      	ldr	r3, [r7, #0]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d107      	bne.n	80104ae <pbuf_cat+0x26>
 801049e:	4b20      	ldr	r3, [pc, #128]	; (8010520 <pbuf_cat+0x98>)
 80104a0:	f240 3259 	movw	r2, #857	; 0x359
 80104a4:	491f      	ldr	r1, [pc, #124]	; (8010524 <pbuf_cat+0x9c>)
 80104a6:	4820      	ldr	r0, [pc, #128]	; (8010528 <pbuf_cat+0xa0>)
 80104a8:	f009 fccc 	bl	8019e44 <iprintf>
 80104ac:	e034      	b.n	8010518 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	60fb      	str	r3, [r7, #12]
 80104b2:	e00a      	b.n	80104ca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	891a      	ldrh	r2, [r3, #8]
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	891b      	ldrh	r3, [r3, #8]
 80104bc:	4413      	add	r3, r2
 80104be:	b29a      	uxth	r2, r3
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1f0      	bne.n	80104b4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	891a      	ldrh	r2, [r3, #8]
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	895b      	ldrh	r3, [r3, #10]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d006      	beq.n	80104ec <pbuf_cat+0x64>
 80104de:	4b10      	ldr	r3, [pc, #64]	; (8010520 <pbuf_cat+0x98>)
 80104e0:	f240 3262 	movw	r2, #866	; 0x362
 80104e4:	4911      	ldr	r1, [pc, #68]	; (801052c <pbuf_cat+0xa4>)
 80104e6:	4810      	ldr	r0, [pc, #64]	; (8010528 <pbuf_cat+0xa0>)
 80104e8:	f009 fcac 	bl	8019e44 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d006      	beq.n	8010502 <pbuf_cat+0x7a>
 80104f4:	4b0a      	ldr	r3, [pc, #40]	; (8010520 <pbuf_cat+0x98>)
 80104f6:	f240 3263 	movw	r2, #867	; 0x363
 80104fa:	490d      	ldr	r1, [pc, #52]	; (8010530 <pbuf_cat+0xa8>)
 80104fc:	480a      	ldr	r0, [pc, #40]	; (8010528 <pbuf_cat+0xa0>)
 80104fe:	f009 fca1 	bl	8019e44 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	891a      	ldrh	r2, [r3, #8]
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	891b      	ldrh	r3, [r3, #8]
 801050a:	4413      	add	r3, r2
 801050c:	b29a      	uxth	r2, r3
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	0801be18 	.word	0x0801be18
 8010524:	0801c00c 	.word	0x0801c00c
 8010528:	0801be78 	.word	0x0801be78
 801052c:	0801c044 	.word	0x0801c044
 8010530:	0801c074 	.word	0x0801c074

08010534 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801053e:	2300      	movs	r3, #0
 8010540:	617b      	str	r3, [r7, #20]
 8010542:	2300      	movs	r3, #0
 8010544:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d008      	beq.n	801055e <pbuf_copy+0x2a>
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d005      	beq.n	801055e <pbuf_copy+0x2a>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	891a      	ldrh	r2, [r3, #8]
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	891b      	ldrh	r3, [r3, #8]
 801055a:	429a      	cmp	r2, r3
 801055c:	d209      	bcs.n	8010572 <pbuf_copy+0x3e>
 801055e:	4b57      	ldr	r3, [pc, #348]	; (80106bc <pbuf_copy+0x188>)
 8010560:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010564:	4956      	ldr	r1, [pc, #344]	; (80106c0 <pbuf_copy+0x18c>)
 8010566:	4857      	ldr	r0, [pc, #348]	; (80106c4 <pbuf_copy+0x190>)
 8010568:	f009 fc6c 	bl	8019e44 <iprintf>
 801056c:	f06f 030f 	mvn.w	r3, #15
 8010570:	e09f      	b.n	80106b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	895b      	ldrh	r3, [r3, #10]
 8010576:	461a      	mov	r2, r3
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	1ad2      	subs	r2, r2, r3
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	895b      	ldrh	r3, [r3, #10]
 8010580:	4619      	mov	r1, r3
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	1acb      	subs	r3, r1, r3
 8010586:	429a      	cmp	r2, r3
 8010588:	d306      	bcc.n	8010598 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	895b      	ldrh	r3, [r3, #10]
 801058e:	461a      	mov	r2, r3
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	1ad3      	subs	r3, r2, r3
 8010594:	60fb      	str	r3, [r7, #12]
 8010596:	e005      	b.n	80105a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	895b      	ldrh	r3, [r3, #10]
 801059c:	461a      	mov	r2, r3
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	1ad3      	subs	r3, r2, r3
 80105a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	685a      	ldr	r2, [r3, #4]
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	18d0      	adds	r0, r2, r3
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	685a      	ldr	r2, [r3, #4]
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	4413      	add	r3, r2
 80105b4:	68fa      	ldr	r2, [r7, #12]
 80105b6:	4619      	mov	r1, r3
 80105b8:	f009 fb99 	bl	8019cee <memcpy>
    offset_to += len;
 80105bc:	697a      	ldr	r2, [r7, #20]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	4413      	add	r3, r2
 80105c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80105c4:	693a      	ldr	r2, [r7, #16]
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	4413      	add	r3, r2
 80105ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	895b      	ldrh	r3, [r3, #10]
 80105d0:	461a      	mov	r2, r3
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	4293      	cmp	r3, r2
 80105d6:	d906      	bls.n	80105e6 <pbuf_copy+0xb2>
 80105d8:	4b38      	ldr	r3, [pc, #224]	; (80106bc <pbuf_copy+0x188>)
 80105da:	f240 32d9 	movw	r2, #985	; 0x3d9
 80105de:	493a      	ldr	r1, [pc, #232]	; (80106c8 <pbuf_copy+0x194>)
 80105e0:	4838      	ldr	r0, [pc, #224]	; (80106c4 <pbuf_copy+0x190>)
 80105e2:	f009 fc2f 	bl	8019e44 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	895b      	ldrh	r3, [r3, #10]
 80105ea:	461a      	mov	r2, r3
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	4293      	cmp	r3, r2
 80105f0:	d906      	bls.n	8010600 <pbuf_copy+0xcc>
 80105f2:	4b32      	ldr	r3, [pc, #200]	; (80106bc <pbuf_copy+0x188>)
 80105f4:	f240 32da 	movw	r2, #986	; 0x3da
 80105f8:	4934      	ldr	r1, [pc, #208]	; (80106cc <pbuf_copy+0x198>)
 80105fa:	4832      	ldr	r0, [pc, #200]	; (80106c4 <pbuf_copy+0x190>)
 80105fc:	f009 fc22 	bl	8019e44 <iprintf>
    if (offset_from >= p_from->len) {
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	895b      	ldrh	r3, [r3, #10]
 8010604:	461a      	mov	r2, r3
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	4293      	cmp	r3, r2
 801060a:	d304      	bcc.n	8010616 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801060c:	2300      	movs	r3, #0
 801060e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	895b      	ldrh	r3, [r3, #10]
 801061a:	461a      	mov	r2, r3
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	4293      	cmp	r3, r2
 8010620:	d114      	bne.n	801064c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d10c      	bne.n	801064c <pbuf_copy+0x118>
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d009      	beq.n	801064c <pbuf_copy+0x118>
 8010638:	4b20      	ldr	r3, [pc, #128]	; (80106bc <pbuf_copy+0x188>)
 801063a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801063e:	4924      	ldr	r1, [pc, #144]	; (80106d0 <pbuf_copy+0x19c>)
 8010640:	4820      	ldr	r0, [pc, #128]	; (80106c4 <pbuf_copy+0x190>)
 8010642:	f009 fbff 	bl	8019e44 <iprintf>
 8010646:	f06f 030f 	mvn.w	r3, #15
 801064a:	e032      	b.n	80106b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d013      	beq.n	801067a <pbuf_copy+0x146>
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	895a      	ldrh	r2, [r3, #10]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	891b      	ldrh	r3, [r3, #8]
 801065a:	429a      	cmp	r2, r3
 801065c:	d10d      	bne.n	801067a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d009      	beq.n	801067a <pbuf_copy+0x146>
 8010666:	4b15      	ldr	r3, [pc, #84]	; (80106bc <pbuf_copy+0x188>)
 8010668:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801066c:	4919      	ldr	r1, [pc, #100]	; (80106d4 <pbuf_copy+0x1a0>)
 801066e:	4815      	ldr	r0, [pc, #84]	; (80106c4 <pbuf_copy+0x190>)
 8010670:	f009 fbe8 	bl	8019e44 <iprintf>
 8010674:	f06f 0305 	mvn.w	r3, #5
 8010678:	e01b      	b.n	80106b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d013      	beq.n	80106a8 <pbuf_copy+0x174>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	895a      	ldrh	r2, [r3, #10]
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	891b      	ldrh	r3, [r3, #8]
 8010688:	429a      	cmp	r2, r3
 801068a:	d10d      	bne.n	80106a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d009      	beq.n	80106a8 <pbuf_copy+0x174>
 8010694:	4b09      	ldr	r3, [pc, #36]	; (80106bc <pbuf_copy+0x188>)
 8010696:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801069a:	490e      	ldr	r1, [pc, #56]	; (80106d4 <pbuf_copy+0x1a0>)
 801069c:	4809      	ldr	r0, [pc, #36]	; (80106c4 <pbuf_copy+0x190>)
 801069e:	f009 fbd1 	bl	8019e44 <iprintf>
 80106a2:	f06f 0305 	mvn.w	r3, #5
 80106a6:	e004      	b.n	80106b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f47f af61 	bne.w	8010572 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3718      	adds	r7, #24
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	0801be18 	.word	0x0801be18
 80106c0:	0801c0c0 	.word	0x0801c0c0
 80106c4:	0801be78 	.word	0x0801be78
 80106c8:	0801c0f0 	.word	0x0801c0f0
 80106cc:	0801c108 	.word	0x0801c108
 80106d0:	0801c124 	.word	0x0801c124
 80106d4:	0801c134 	.word	0x0801c134

080106d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b088      	sub	sp, #32
 80106dc:	af00      	add	r7, sp, #0
 80106de:	60f8      	str	r0, [r7, #12]
 80106e0:	60b9      	str	r1, [r7, #8]
 80106e2:	4611      	mov	r1, r2
 80106e4:	461a      	mov	r2, r3
 80106e6:	460b      	mov	r3, r1
 80106e8:	80fb      	strh	r3, [r7, #6]
 80106ea:	4613      	mov	r3, r2
 80106ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80106f2:	2300      	movs	r3, #0
 80106f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d108      	bne.n	801070e <pbuf_copy_partial+0x36>
 80106fc:	4b2b      	ldr	r3, [pc, #172]	; (80107ac <pbuf_copy_partial+0xd4>)
 80106fe:	f240 420a 	movw	r2, #1034	; 0x40a
 8010702:	492b      	ldr	r1, [pc, #172]	; (80107b0 <pbuf_copy_partial+0xd8>)
 8010704:	482b      	ldr	r0, [pc, #172]	; (80107b4 <pbuf_copy_partial+0xdc>)
 8010706:	f009 fb9d 	bl	8019e44 <iprintf>
 801070a:	2300      	movs	r3, #0
 801070c:	e04a      	b.n	80107a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d108      	bne.n	8010726 <pbuf_copy_partial+0x4e>
 8010714:	4b25      	ldr	r3, [pc, #148]	; (80107ac <pbuf_copy_partial+0xd4>)
 8010716:	f240 420b 	movw	r2, #1035	; 0x40b
 801071a:	4927      	ldr	r1, [pc, #156]	; (80107b8 <pbuf_copy_partial+0xe0>)
 801071c:	4825      	ldr	r0, [pc, #148]	; (80107b4 <pbuf_copy_partial+0xdc>)
 801071e:	f009 fb91 	bl	8019e44 <iprintf>
 8010722:	2300      	movs	r3, #0
 8010724:	e03e      	b.n	80107a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	61fb      	str	r3, [r7, #28]
 801072a:	e034      	b.n	8010796 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801072c:	88bb      	ldrh	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d00a      	beq.n	8010748 <pbuf_copy_partial+0x70>
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	895b      	ldrh	r3, [r3, #10]
 8010736:	88ba      	ldrh	r2, [r7, #4]
 8010738:	429a      	cmp	r2, r3
 801073a:	d305      	bcc.n	8010748 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	895b      	ldrh	r3, [r3, #10]
 8010740:	88ba      	ldrh	r2, [r7, #4]
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	80bb      	strh	r3, [r7, #4]
 8010746:	e023      	b.n	8010790 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	895a      	ldrh	r2, [r3, #10]
 801074c:	88bb      	ldrh	r3, [r7, #4]
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010752:	8b3a      	ldrh	r2, [r7, #24]
 8010754:	88fb      	ldrh	r3, [r7, #6]
 8010756:	429a      	cmp	r2, r3
 8010758:	d901      	bls.n	801075e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801075a:	88fb      	ldrh	r3, [r7, #6]
 801075c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801075e:	8b7b      	ldrh	r3, [r7, #26]
 8010760:	68ba      	ldr	r2, [r7, #8]
 8010762:	18d0      	adds	r0, r2, r3
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	685a      	ldr	r2, [r3, #4]
 8010768:	88bb      	ldrh	r3, [r7, #4]
 801076a:	4413      	add	r3, r2
 801076c:	8b3a      	ldrh	r2, [r7, #24]
 801076e:	4619      	mov	r1, r3
 8010770:	f009 fabd 	bl	8019cee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010774:	8afa      	ldrh	r2, [r7, #22]
 8010776:	8b3b      	ldrh	r3, [r7, #24]
 8010778:	4413      	add	r3, r2
 801077a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801077c:	8b7a      	ldrh	r2, [r7, #26]
 801077e:	8b3b      	ldrh	r3, [r7, #24]
 8010780:	4413      	add	r3, r2
 8010782:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010784:	88fa      	ldrh	r2, [r7, #6]
 8010786:	8b3b      	ldrh	r3, [r7, #24]
 8010788:	1ad3      	subs	r3, r2, r3
 801078a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801078c:	2300      	movs	r3, #0
 801078e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	61fb      	str	r3, [r7, #28]
 8010796:	88fb      	ldrh	r3, [r7, #6]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d002      	beq.n	80107a2 <pbuf_copy_partial+0xca>
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1c4      	bne.n	801072c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80107a2:	8afb      	ldrh	r3, [r7, #22]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3720      	adds	r7, #32
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	0801be18 	.word	0x0801be18
 80107b0:	0801c160 	.word	0x0801c160
 80107b4:	0801be78 	.word	0x0801be78
 80107b8:	0801c180 	.word	0x0801c180

080107bc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b084      	sub	sp, #16
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	4603      	mov	r3, r0
 80107c4:	603a      	str	r2, [r7, #0]
 80107c6:	71fb      	strb	r3, [r7, #7]
 80107c8:	460b      	mov	r3, r1
 80107ca:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	8919      	ldrh	r1, [r3, #8]
 80107d0:	88ba      	ldrh	r2, [r7, #4]
 80107d2:	79fb      	ldrb	r3, [r7, #7]
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7ff faa5 	bl	800fd24 <pbuf_alloc>
 80107da:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <pbuf_clone+0x2a>
    return NULL;
 80107e2:	2300      	movs	r3, #0
 80107e4:	e011      	b.n	801080a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80107e6:	6839      	ldr	r1, [r7, #0]
 80107e8:	68f8      	ldr	r0, [r7, #12]
 80107ea:	f7ff fea3 	bl	8010534 <pbuf_copy>
 80107ee:	4603      	mov	r3, r0
 80107f0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80107f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d006      	beq.n	8010808 <pbuf_clone+0x4c>
 80107fa:	4b06      	ldr	r3, [pc, #24]	; (8010814 <pbuf_clone+0x58>)
 80107fc:	f240 5224 	movw	r2, #1316	; 0x524
 8010800:	4905      	ldr	r1, [pc, #20]	; (8010818 <pbuf_clone+0x5c>)
 8010802:	4806      	ldr	r0, [pc, #24]	; (801081c <pbuf_clone+0x60>)
 8010804:	f009 fb1e 	bl	8019e44 <iprintf>
  return q;
 8010808:	68fb      	ldr	r3, [r7, #12]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	0801be18 	.word	0x0801be18
 8010818:	0801c28c 	.word	0x0801c28c
 801081c:	0801be78 	.word	0x0801be78

08010820 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010824:	f009 fb26 	bl	8019e74 <rand>
 8010828:	4603      	mov	r3, r0
 801082a:	b29b      	uxth	r3, r3
 801082c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010830:	b29b      	uxth	r3, r3
 8010832:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010836:	b29a      	uxth	r2, r3
 8010838:	4b01      	ldr	r3, [pc, #4]	; (8010840 <tcp_init+0x20>)
 801083a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801083c:	bf00      	nop
 801083e:	bd80      	pop	{r7, pc}
 8010840:	20001a50 	.word	0x20001a50

08010844 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
 8010850:	2b01      	cmp	r3, #1
 8010852:	d105      	bne.n	8010860 <tcp_free+0x1c>
 8010854:	4b06      	ldr	r3, [pc, #24]	; (8010870 <tcp_free+0x2c>)
 8010856:	22d4      	movs	r2, #212	; 0xd4
 8010858:	4906      	ldr	r1, [pc, #24]	; (8010874 <tcp_free+0x30>)
 801085a:	4807      	ldr	r0, [pc, #28]	; (8010878 <tcp_free+0x34>)
 801085c:	f009 faf2 	bl	8019e44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010860:	6879      	ldr	r1, [r7, #4]
 8010862:	2001      	movs	r0, #1
 8010864:	f7fe fe9e 	bl	800f5a4 <memp_free>
}
 8010868:	bf00      	nop
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}
 8010870:	0801c318 	.word	0x0801c318
 8010874:	0801c348 	.word	0x0801c348
 8010878:	0801c35c 	.word	0x0801c35c

0801087c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b082      	sub	sp, #8
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	7d1b      	ldrb	r3, [r3, #20]
 8010888:	2b01      	cmp	r3, #1
 801088a:	d105      	bne.n	8010898 <tcp_free_listen+0x1c>
 801088c:	4b06      	ldr	r3, [pc, #24]	; (80108a8 <tcp_free_listen+0x2c>)
 801088e:	22df      	movs	r2, #223	; 0xdf
 8010890:	4906      	ldr	r1, [pc, #24]	; (80108ac <tcp_free_listen+0x30>)
 8010892:	4807      	ldr	r0, [pc, #28]	; (80108b0 <tcp_free_listen+0x34>)
 8010894:	f009 fad6 	bl	8019e44 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	2002      	movs	r0, #2
 801089c:	f7fe fe82 	bl	800f5a4 <memp_free>
}
 80108a0:	bf00      	nop
 80108a2:	3708      	adds	r7, #8
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	0801c318 	.word	0x0801c318
 80108ac:	0801c384 	.word	0x0801c384
 80108b0:	0801c35c 	.word	0x0801c35c

080108b4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80108b8:	f001 f8a6 	bl	8011a08 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80108bc:	4b07      	ldr	r3, [pc, #28]	; (80108dc <tcp_tmr+0x28>)
 80108be:	781b      	ldrb	r3, [r3, #0]
 80108c0:	3301      	adds	r3, #1
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b05      	ldr	r3, [pc, #20]	; (80108dc <tcp_tmr+0x28>)
 80108c6:	701a      	strb	r2, [r3, #0]
 80108c8:	4b04      	ldr	r3, [pc, #16]	; (80108dc <tcp_tmr+0x28>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	f003 0301 	and.w	r3, r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d001      	beq.n	80108d8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80108d4:	f000 fd58 	bl	8011388 <tcp_slowtmr>
  }
}
 80108d8:	bf00      	nop
 80108da:	bd80      	pop	{r7, pc}
 80108dc:	2004f599 	.word	0x2004f599

080108e0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d105      	bne.n	80108fc <tcp_remove_listener+0x1c>
 80108f0:	4b0d      	ldr	r3, [pc, #52]	; (8010928 <tcp_remove_listener+0x48>)
 80108f2:	22ff      	movs	r2, #255	; 0xff
 80108f4:	490d      	ldr	r1, [pc, #52]	; (801092c <tcp_remove_listener+0x4c>)
 80108f6:	480e      	ldr	r0, [pc, #56]	; (8010930 <tcp_remove_listener+0x50>)
 80108f8:	f009 faa4 	bl	8019e44 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	60fb      	str	r3, [r7, #12]
 8010900:	e00a      	b.n	8010918 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	429a      	cmp	r2, r3
 801090a:	d102      	bne.n	8010912 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2200      	movs	r2, #0
 8010910:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	60fb      	str	r3, [r7, #12]
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1f1      	bne.n	8010902 <tcp_remove_listener+0x22>
    }
  }
}
 801091e:	bf00      	nop
 8010920:	bf00      	nop
 8010922:	3710      	adds	r7, #16
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	0801c318 	.word	0x0801c318
 801092c:	0801c3a0 	.word	0x0801c3a0
 8010930:	0801c35c 	.word	0x0801c35c

08010934 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b084      	sub	sp, #16
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d106      	bne.n	8010950 <tcp_listen_closed+0x1c>
 8010942:	4b14      	ldr	r3, [pc, #80]	; (8010994 <tcp_listen_closed+0x60>)
 8010944:	f240 1211 	movw	r2, #273	; 0x111
 8010948:	4913      	ldr	r1, [pc, #76]	; (8010998 <tcp_listen_closed+0x64>)
 801094a:	4814      	ldr	r0, [pc, #80]	; (801099c <tcp_listen_closed+0x68>)
 801094c:	f009 fa7a 	bl	8019e44 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	7d1b      	ldrb	r3, [r3, #20]
 8010954:	2b01      	cmp	r3, #1
 8010956:	d006      	beq.n	8010966 <tcp_listen_closed+0x32>
 8010958:	4b0e      	ldr	r3, [pc, #56]	; (8010994 <tcp_listen_closed+0x60>)
 801095a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801095e:	4910      	ldr	r1, [pc, #64]	; (80109a0 <tcp_listen_closed+0x6c>)
 8010960:	480e      	ldr	r0, [pc, #56]	; (801099c <tcp_listen_closed+0x68>)
 8010962:	f009 fa6f 	bl	8019e44 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010966:	2301      	movs	r3, #1
 8010968:	60fb      	str	r3, [r7, #12]
 801096a:	e00b      	b.n	8010984 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801096c:	4a0d      	ldr	r2, [pc, #52]	; (80109a4 <tcp_listen_closed+0x70>)
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6879      	ldr	r1, [r7, #4]
 8010978:	4618      	mov	r0, r3
 801097a:	f7ff ffb1 	bl	80108e0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	3301      	adds	r3, #1
 8010982:	60fb      	str	r3, [r7, #12]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2b03      	cmp	r3, #3
 8010988:	d9f0      	bls.n	801096c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801098a:	bf00      	nop
 801098c:	bf00      	nop
 801098e:	3710      	adds	r7, #16
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	0801c318 	.word	0x0801c318
 8010998:	0801c3c8 	.word	0x0801c3c8
 801099c:	0801c35c 	.word	0x0801c35c
 80109a0:	0801c3d4 	.word	0x0801c3d4
 80109a4:	0801e358 	.word	0x0801e358

080109a8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80109a8:	b5b0      	push	{r4, r5, r7, lr}
 80109aa:	b088      	sub	sp, #32
 80109ac:	af04      	add	r7, sp, #16
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	460b      	mov	r3, r1
 80109b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d106      	bne.n	80109c8 <tcp_close_shutdown+0x20>
 80109ba:	4b63      	ldr	r3, [pc, #396]	; (8010b48 <tcp_close_shutdown+0x1a0>)
 80109bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80109c0:	4962      	ldr	r1, [pc, #392]	; (8010b4c <tcp_close_shutdown+0x1a4>)
 80109c2:	4863      	ldr	r0, [pc, #396]	; (8010b50 <tcp_close_shutdown+0x1a8>)
 80109c4:	f009 fa3e 	bl	8019e44 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80109c8:	78fb      	ldrb	r3, [r7, #3]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d066      	beq.n	8010a9c <tcp_close_shutdown+0xf4>
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	7d1b      	ldrb	r3, [r3, #20]
 80109d2:	2b04      	cmp	r3, #4
 80109d4:	d003      	beq.n	80109de <tcp_close_shutdown+0x36>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	7d1b      	ldrb	r3, [r3, #20]
 80109da:	2b07      	cmp	r3, #7
 80109dc:	d15e      	bne.n	8010a9c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d104      	bne.n	80109f0 <tcp_close_shutdown+0x48>
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80109ea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80109ee:	d055      	beq.n	8010a9c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	8b5b      	ldrh	r3, [r3, #26]
 80109f4:	f003 0310 	and.w	r3, r3, #16
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d106      	bne.n	8010a0a <tcp_close_shutdown+0x62>
 80109fc:	4b52      	ldr	r3, [pc, #328]	; (8010b48 <tcp_close_shutdown+0x1a0>)
 80109fe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010a02:	4954      	ldr	r1, [pc, #336]	; (8010b54 <tcp_close_shutdown+0x1ac>)
 8010a04:	4852      	ldr	r0, [pc, #328]	; (8010b50 <tcp_close_shutdown+0x1a8>)
 8010a06:	f009 fa1d 	bl	8019e44 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010a12:	687d      	ldr	r5, [r7, #4]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	3304      	adds	r3, #4
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	8ad2      	ldrh	r2, [r2, #22]
 8010a1c:	6879      	ldr	r1, [r7, #4]
 8010a1e:	8b09      	ldrh	r1, [r1, #24]
 8010a20:	9102      	str	r1, [sp, #8]
 8010a22:	9201      	str	r2, [sp, #4]
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	462b      	mov	r3, r5
 8010a28:	4622      	mov	r2, r4
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f005 fdbb 	bl	80165a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f001 fb98 	bl	8012168 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010a38:	4b47      	ldr	r3, [pc, #284]	; (8010b58 <tcp_close_shutdown+0x1b0>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	687a      	ldr	r2, [r7, #4]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d105      	bne.n	8010a4e <tcp_close_shutdown+0xa6>
 8010a42:	4b45      	ldr	r3, [pc, #276]	; (8010b58 <tcp_close_shutdown+0x1b0>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	4a43      	ldr	r2, [pc, #268]	; (8010b58 <tcp_close_shutdown+0x1b0>)
 8010a4a:	6013      	str	r3, [r2, #0]
 8010a4c:	e013      	b.n	8010a76 <tcp_close_shutdown+0xce>
 8010a4e:	4b42      	ldr	r3, [pc, #264]	; (8010b58 <tcp_close_shutdown+0x1b0>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	60fb      	str	r3, [r7, #12]
 8010a54:	e00c      	b.n	8010a70 <tcp_close_shutdown+0xc8>
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	687a      	ldr	r2, [r7, #4]
 8010a5c:	429a      	cmp	r2, r3
 8010a5e:	d104      	bne.n	8010a6a <tcp_close_shutdown+0xc2>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	68da      	ldr	r2, [r3, #12]
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	60da      	str	r2, [r3, #12]
 8010a68:	e005      	b.n	8010a76 <tcp_close_shutdown+0xce>
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1ef      	bne.n	8010a56 <tcp_close_shutdown+0xae>
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	60da      	str	r2, [r3, #12]
 8010a7c:	4b37      	ldr	r3, [pc, #220]	; (8010b5c <tcp_close_shutdown+0x1b4>)
 8010a7e:	2201      	movs	r2, #1
 8010a80:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010a82:	4b37      	ldr	r3, [pc, #220]	; (8010b60 <tcp_close_shutdown+0x1b8>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d102      	bne.n	8010a92 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010a8c:	f004 f830 	bl	8014af0 <tcp_trigger_input_pcb_close>
 8010a90:	e002      	b.n	8010a98 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7ff fed6 	bl	8010844 <tcp_free>
      }
      return ERR_OK;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	e050      	b.n	8010b3e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	7d1b      	ldrb	r3, [r3, #20]
 8010aa0:	2b02      	cmp	r3, #2
 8010aa2:	d03b      	beq.n	8010b1c <tcp_close_shutdown+0x174>
 8010aa4:	2b02      	cmp	r3, #2
 8010aa6:	dc44      	bgt.n	8010b32 <tcp_close_shutdown+0x18a>
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d002      	beq.n	8010ab2 <tcp_close_shutdown+0x10a>
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d02a      	beq.n	8010b06 <tcp_close_shutdown+0x15e>
 8010ab0:	e03f      	b.n	8010b32 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	8adb      	ldrh	r3, [r3, #22]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d021      	beq.n	8010afe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010aba:	4b2a      	ldr	r3, [pc, #168]	; (8010b64 <tcp_close_shutdown+0x1bc>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	687a      	ldr	r2, [r7, #4]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d105      	bne.n	8010ad0 <tcp_close_shutdown+0x128>
 8010ac4:	4b27      	ldr	r3, [pc, #156]	; (8010b64 <tcp_close_shutdown+0x1bc>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	68db      	ldr	r3, [r3, #12]
 8010aca:	4a26      	ldr	r2, [pc, #152]	; (8010b64 <tcp_close_shutdown+0x1bc>)
 8010acc:	6013      	str	r3, [r2, #0]
 8010ace:	e013      	b.n	8010af8 <tcp_close_shutdown+0x150>
 8010ad0:	4b24      	ldr	r3, [pc, #144]	; (8010b64 <tcp_close_shutdown+0x1bc>)
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	60bb      	str	r3, [r7, #8]
 8010ad6:	e00c      	b.n	8010af2 <tcp_close_shutdown+0x14a>
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d104      	bne.n	8010aec <tcp_close_shutdown+0x144>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	68da      	ldr	r2, [r3, #12]
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	60da      	str	r2, [r3, #12]
 8010aea:	e005      	b.n	8010af8 <tcp_close_shutdown+0x150>
 8010aec:	68bb      	ldr	r3, [r7, #8]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	60bb      	str	r3, [r7, #8]
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d1ef      	bne.n	8010ad8 <tcp_close_shutdown+0x130>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f7ff fea0 	bl	8010844 <tcp_free>
      break;
 8010b04:	e01a      	b.n	8010b3c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7ff ff14 	bl	8010934 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010b0c:	6879      	ldr	r1, [r7, #4]
 8010b0e:	4816      	ldr	r0, [pc, #88]	; (8010b68 <tcp_close_shutdown+0x1c0>)
 8010b10:	f001 fb7a 	bl	8012208 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7ff feb1 	bl	801087c <tcp_free_listen>
      break;
 8010b1a:	e00f      	b.n	8010b3c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010b1c:	6879      	ldr	r1, [r7, #4]
 8010b1e:	480e      	ldr	r0, [pc, #56]	; (8010b58 <tcp_close_shutdown+0x1b0>)
 8010b20:	f001 fb72 	bl	8012208 <tcp_pcb_remove>
 8010b24:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <tcp_close_shutdown+0x1b4>)
 8010b26:	2201      	movs	r2, #1
 8010b28:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f7ff fe8a 	bl	8010844 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010b30:	e004      	b.n	8010b3c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f000 f81a 	bl	8010b6c <tcp_close_shutdown_fin>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	e000      	b.n	8010b3e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bdb0      	pop	{r4, r5, r7, pc}
 8010b46:	bf00      	nop
 8010b48:	0801c318 	.word	0x0801c318
 8010b4c:	0801c3ec 	.word	0x0801c3ec
 8010b50:	0801c35c 	.word	0x0801c35c
 8010b54:	0801c40c 	.word	0x0801c40c
 8010b58:	2004f590 	.word	0x2004f590
 8010b5c:	2004f598 	.word	0x2004f598
 8010b60:	2004f5d0 	.word	0x2004f5d0
 8010b64:	2004f588 	.word	0x2004f588
 8010b68:	2004f58c 	.word	0x2004f58c

08010b6c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b084      	sub	sp, #16
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <tcp_close_shutdown_fin+0x1c>
 8010b7a:	4b2e      	ldr	r3, [pc, #184]	; (8010c34 <tcp_close_shutdown_fin+0xc8>)
 8010b7c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010b80:	492d      	ldr	r1, [pc, #180]	; (8010c38 <tcp_close_shutdown_fin+0xcc>)
 8010b82:	482e      	ldr	r0, [pc, #184]	; (8010c3c <tcp_close_shutdown_fin+0xd0>)
 8010b84:	f009 f95e 	bl	8019e44 <iprintf>

  switch (pcb->state) {
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	7d1b      	ldrb	r3, [r3, #20]
 8010b8c:	2b07      	cmp	r3, #7
 8010b8e:	d020      	beq.n	8010bd2 <tcp_close_shutdown_fin+0x66>
 8010b90:	2b07      	cmp	r3, #7
 8010b92:	dc2b      	bgt.n	8010bec <tcp_close_shutdown_fin+0x80>
 8010b94:	2b03      	cmp	r3, #3
 8010b96:	d002      	beq.n	8010b9e <tcp_close_shutdown_fin+0x32>
 8010b98:	2b04      	cmp	r3, #4
 8010b9a:	d00d      	beq.n	8010bb8 <tcp_close_shutdown_fin+0x4c>
 8010b9c:	e026      	b.n	8010bec <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010b9e:	6878      	ldr	r0, [r7, #4]
 8010ba0:	f004 fe10 	bl	80157c4 <tcp_send_fin>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d11f      	bne.n	8010bf0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2205      	movs	r2, #5
 8010bb4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010bb6:	e01b      	b.n	8010bf0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010bb8:	6878      	ldr	r0, [r7, #4]
 8010bba:	f004 fe03 	bl	80157c4 <tcp_send_fin>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d114      	bne.n	8010bf4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2205      	movs	r2, #5
 8010bce:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010bd0:	e010      	b.n	8010bf4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f004 fdf6 	bl	80157c4 <tcp_send_fin>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d109      	bne.n	8010bf8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2209      	movs	r2, #9
 8010be8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010bea:	e005      	b.n	8010bf8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	e01c      	b.n	8010c2a <tcp_close_shutdown_fin+0xbe>
      break;
 8010bf0:	bf00      	nop
 8010bf2:	e002      	b.n	8010bfa <tcp_close_shutdown_fin+0x8e>
      break;
 8010bf4:	bf00      	nop
 8010bf6:	e000      	b.n	8010bfa <tcp_close_shutdown_fin+0x8e>
      break;
 8010bf8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d103      	bne.n	8010c0a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f004 ff1c 	bl	8015a40 <tcp_output>
 8010c08:	e00d      	b.n	8010c26 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c12:	d108      	bne.n	8010c26 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	8b5b      	ldrh	r3, [r3, #26]
 8010c18:	f043 0308 	orr.w	r3, r3, #8
 8010c1c:	b29a      	uxth	r2, r3
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	e001      	b.n	8010c2a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3710      	adds	r7, #16
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}
 8010c32:	bf00      	nop
 8010c34:	0801c318 	.word	0x0801c318
 8010c38:	0801c3c8 	.word	0x0801c3c8
 8010c3c:	0801c35c 	.word	0x0801c35c

08010c40 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d109      	bne.n	8010c62 <tcp_close+0x22>
 8010c4e:	4b0f      	ldr	r3, [pc, #60]	; (8010c8c <tcp_close+0x4c>)
 8010c50:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010c54:	490e      	ldr	r1, [pc, #56]	; (8010c90 <tcp_close+0x50>)
 8010c56:	480f      	ldr	r0, [pc, #60]	; (8010c94 <tcp_close+0x54>)
 8010c58:	f009 f8f4 	bl	8019e44 <iprintf>
 8010c5c:	f06f 030f 	mvn.w	r3, #15
 8010c60:	e00f      	b.n	8010c82 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	7d1b      	ldrb	r3, [r3, #20]
 8010c66:	2b01      	cmp	r3, #1
 8010c68:	d006      	beq.n	8010c78 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	8b5b      	ldrh	r3, [r3, #26]
 8010c6e:	f043 0310 	orr.w	r3, r3, #16
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010c78:	2101      	movs	r1, #1
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7ff fe94 	bl	80109a8 <tcp_close_shutdown>
 8010c80:	4603      	mov	r3, r0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	0801c318 	.word	0x0801c318
 8010c90:	0801c428 	.word	0x0801c428
 8010c94:	0801c35c 	.word	0x0801c35c

08010c98 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	60b9      	str	r1, [r7, #8]
 8010ca2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d109      	bne.n	8010cbe <tcp_shutdown+0x26>
 8010caa:	4b26      	ldr	r3, [pc, #152]	; (8010d44 <tcp_shutdown+0xac>)
 8010cac:	f240 2207 	movw	r2, #519	; 0x207
 8010cb0:	4925      	ldr	r1, [pc, #148]	; (8010d48 <tcp_shutdown+0xb0>)
 8010cb2:	4826      	ldr	r0, [pc, #152]	; (8010d4c <tcp_shutdown+0xb4>)
 8010cb4:	f009 f8c6 	bl	8019e44 <iprintf>
 8010cb8:	f06f 030f 	mvn.w	r3, #15
 8010cbc:	e03d      	b.n	8010d3a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	7d1b      	ldrb	r3, [r3, #20]
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d102      	bne.n	8010ccc <tcp_shutdown+0x34>
    return ERR_CONN;
 8010cc6:	f06f 030a 	mvn.w	r3, #10
 8010cca:	e036      	b.n	8010d3a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d01b      	beq.n	8010d0a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f043 0310 	orr.w	r3, r3, #16
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d005      	beq.n	8010cf2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8010ce6:	2101      	movs	r1, #1
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f7ff fe5d 	bl	80109a8 <tcp_close_shutdown>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	e023      	b.n	8010d3a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d007      	beq.n	8010d0a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7ff faf4 	bl	80102ec <pbuf_free>
      pcb->refused_data = NULL;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	2200      	movs	r2, #0
 8010d08:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d013      	beq.n	8010d38 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	7d1b      	ldrb	r3, [r3, #20]
 8010d14:	2b04      	cmp	r3, #4
 8010d16:	dc02      	bgt.n	8010d1e <tcp_shutdown+0x86>
 8010d18:	2b03      	cmp	r3, #3
 8010d1a:	da02      	bge.n	8010d22 <tcp_shutdown+0x8a>
 8010d1c:	e009      	b.n	8010d32 <tcp_shutdown+0x9a>
 8010d1e:	2b07      	cmp	r3, #7
 8010d20:	d107      	bne.n	8010d32 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	4619      	mov	r1, r3
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7ff fe3d 	bl	80109a8 <tcp_close_shutdown>
 8010d2e:	4603      	mov	r3, r0
 8010d30:	e003      	b.n	8010d3a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8010d32:	f06f 030a 	mvn.w	r3, #10
 8010d36:	e000      	b.n	8010d3a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8010d38:	2300      	movs	r3, #0
}
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	3710      	adds	r7, #16
 8010d3e:	46bd      	mov	sp, r7
 8010d40:	bd80      	pop	{r7, pc}
 8010d42:	bf00      	nop
 8010d44:	0801c318 	.word	0x0801c318
 8010d48:	0801c440 	.word	0x0801c440
 8010d4c:	0801c35c 	.word	0x0801c35c

08010d50 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b08e      	sub	sp, #56	; 0x38
 8010d54:	af04      	add	r7, sp, #16
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d107      	bne.n	8010d70 <tcp_abandon+0x20>
 8010d60:	4b52      	ldr	r3, [pc, #328]	; (8010eac <tcp_abandon+0x15c>)
 8010d62:	f240 223d 	movw	r2, #573	; 0x23d
 8010d66:	4952      	ldr	r1, [pc, #328]	; (8010eb0 <tcp_abandon+0x160>)
 8010d68:	4852      	ldr	r0, [pc, #328]	; (8010eb4 <tcp_abandon+0x164>)
 8010d6a:	f009 f86b 	bl	8019e44 <iprintf>
 8010d6e:	e099      	b.n	8010ea4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	7d1b      	ldrb	r3, [r3, #20]
 8010d74:	2b01      	cmp	r3, #1
 8010d76:	d106      	bne.n	8010d86 <tcp_abandon+0x36>
 8010d78:	4b4c      	ldr	r3, [pc, #304]	; (8010eac <tcp_abandon+0x15c>)
 8010d7a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010d7e:	494e      	ldr	r1, [pc, #312]	; (8010eb8 <tcp_abandon+0x168>)
 8010d80:	484c      	ldr	r0, [pc, #304]	; (8010eb4 <tcp_abandon+0x164>)
 8010d82:	f009 f85f 	bl	8019e44 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	7d1b      	ldrb	r3, [r3, #20]
 8010d8a:	2b0a      	cmp	r3, #10
 8010d8c:	d107      	bne.n	8010d9e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	484a      	ldr	r0, [pc, #296]	; (8010ebc <tcp_abandon+0x16c>)
 8010d92:	f001 fa39 	bl	8012208 <tcp_pcb_remove>
    tcp_free(pcb);
 8010d96:	6878      	ldr	r0, [r7, #4]
 8010d98:	f7ff fd54 	bl	8010844 <tcp_free>
 8010d9c:	e082      	b.n	8010ea4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010da2:	2300      	movs	r3, #0
 8010da4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010daa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010db0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010db8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	691b      	ldr	r3, [r3, #16]
 8010dbe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	7d1b      	ldrb	r3, [r3, #20]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d126      	bne.n	8010e16 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	8adb      	ldrh	r3, [r3, #22]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d02e      	beq.n	8010e2e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010dd0:	4b3b      	ldr	r3, [pc, #236]	; (8010ec0 <tcp_abandon+0x170>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d105      	bne.n	8010de6 <tcp_abandon+0x96>
 8010dda:	4b39      	ldr	r3, [pc, #228]	; (8010ec0 <tcp_abandon+0x170>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	4a37      	ldr	r2, [pc, #220]	; (8010ec0 <tcp_abandon+0x170>)
 8010de2:	6013      	str	r3, [r2, #0]
 8010de4:	e013      	b.n	8010e0e <tcp_abandon+0xbe>
 8010de6:	4b36      	ldr	r3, [pc, #216]	; (8010ec0 <tcp_abandon+0x170>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	61fb      	str	r3, [r7, #28]
 8010dec:	e00c      	b.n	8010e08 <tcp_abandon+0xb8>
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d104      	bne.n	8010e02 <tcp_abandon+0xb2>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	68da      	ldr	r2, [r3, #12]
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	60da      	str	r2, [r3, #12]
 8010e00:	e005      	b.n	8010e0e <tcp_abandon+0xbe>
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	68db      	ldr	r3, [r3, #12]
 8010e06:	61fb      	str	r3, [r7, #28]
 8010e08:	69fb      	ldr	r3, [r7, #28]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d1ef      	bne.n	8010dee <tcp_abandon+0x9e>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2200      	movs	r2, #0
 8010e12:	60da      	str	r2, [r3, #12]
 8010e14:	e00b      	b.n	8010e2e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	8adb      	ldrh	r3, [r3, #22]
 8010e1e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e20:	6879      	ldr	r1, [r7, #4]
 8010e22:	4828      	ldr	r0, [pc, #160]	; (8010ec4 <tcp_abandon+0x174>)
 8010e24:	f001 f9f0 	bl	8012208 <tcp_pcb_remove>
 8010e28:	4b27      	ldr	r3, [pc, #156]	; (8010ec8 <tcp_abandon+0x178>)
 8010e2a:	2201      	movs	r2, #1
 8010e2c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d004      	beq.n	8010e40 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 fec4 	bl	8011bc8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d004      	beq.n	8010e52 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 febb 	bl	8011bc8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d004      	beq.n	8010e64 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 feb2 	bl	8011bc8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d00e      	beq.n	8010e88 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010e6a:	6879      	ldr	r1, [r7, #4]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3304      	adds	r3, #4
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	8b12      	ldrh	r2, [r2, #24]
 8010e74:	9202      	str	r2, [sp, #8]
 8010e76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010e78:	9201      	str	r2, [sp, #4]
 8010e7a:	9300      	str	r3, [sp, #0]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	697a      	ldr	r2, [r7, #20]
 8010e80:	69b9      	ldr	r1, [r7, #24]
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f005 fb90 	bl	80165a8 <tcp_rst>
    }
    last_state = pcb->state;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	7d1b      	ldrb	r3, [r3, #20]
 8010e8c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f7ff fcd8 	bl	8010844 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d004      	beq.n	8010ea4 <tcp_abandon+0x154>
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	f06f 010c 	mvn.w	r1, #12
 8010ea0:	68f8      	ldr	r0, [r7, #12]
 8010ea2:	4798      	blx	r3
  }
}
 8010ea4:	3728      	adds	r7, #40	; 0x28
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	0801c318 	.word	0x0801c318
 8010eb0:	0801c45c 	.word	0x0801c45c
 8010eb4:	0801c35c 	.word	0x0801c35c
 8010eb8:	0801c478 	.word	0x0801c478
 8010ebc:	2004f594 	.word	0x2004f594
 8010ec0:	2004f588 	.word	0x2004f588
 8010ec4:	2004f590 	.word	0x2004f590
 8010ec8:	2004f598 	.word	0x2004f598

08010ecc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b082      	sub	sp, #8
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010ed4:	2101      	movs	r1, #1
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff ff3a 	bl	8010d50 <tcp_abandon>
}
 8010edc:	bf00      	nop
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b088      	sub	sp, #32
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	4613      	mov	r3, r2
 8010ef0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8010ef2:	2304      	movs	r3, #4
 8010ef4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d101      	bne.n	8010f00 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8010efc:	4b3e      	ldr	r3, [pc, #248]	; (8010ff8 <tcp_bind+0x114>)
 8010efe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d109      	bne.n	8010f1a <tcp_bind+0x36>
 8010f06:	4b3d      	ldr	r3, [pc, #244]	; (8010ffc <tcp_bind+0x118>)
 8010f08:	f240 22a9 	movw	r2, #681	; 0x2a9
 8010f0c:	493c      	ldr	r1, [pc, #240]	; (8011000 <tcp_bind+0x11c>)
 8010f0e:	483d      	ldr	r0, [pc, #244]	; (8011004 <tcp_bind+0x120>)
 8010f10:	f008 ff98 	bl	8019e44 <iprintf>
 8010f14:	f06f 030f 	mvn.w	r3, #15
 8010f18:	e06a      	b.n	8010ff0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	7d1b      	ldrb	r3, [r3, #20]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d009      	beq.n	8010f36 <tcp_bind+0x52>
 8010f22:	4b36      	ldr	r3, [pc, #216]	; (8010ffc <tcp_bind+0x118>)
 8010f24:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010f28:	4937      	ldr	r1, [pc, #220]	; (8011008 <tcp_bind+0x124>)
 8010f2a:	4836      	ldr	r0, [pc, #216]	; (8011004 <tcp_bind+0x120>)
 8010f2c:	f008 ff8a 	bl	8019e44 <iprintf>
 8010f30:	f06f 0305 	mvn.w	r3, #5
 8010f34:	e05c      	b.n	8010ff0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8010f36:	88fb      	ldrh	r3, [r7, #6]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d109      	bne.n	8010f50 <tcp_bind+0x6c>
    port = tcp_new_port();
 8010f3c:	f000 f9de 	bl	80112fc <tcp_new_port>
 8010f40:	4603      	mov	r3, r0
 8010f42:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010f44:	88fb      	ldrh	r3, [r7, #6]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d135      	bne.n	8010fb6 <tcp_bind+0xd2>
      return ERR_BUF;
 8010f4a:	f06f 0301 	mvn.w	r3, #1
 8010f4e:	e04f      	b.n	8010ff0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8010f50:	2300      	movs	r3, #0
 8010f52:	61fb      	str	r3, [r7, #28]
 8010f54:	e02b      	b.n	8010fae <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010f56:	4a2d      	ldr	r2, [pc, #180]	; (801100c <tcp_bind+0x128>)
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	61bb      	str	r3, [r7, #24]
 8010f62:	e01e      	b.n	8010fa2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8010f64:	69bb      	ldr	r3, [r7, #24]
 8010f66:	8adb      	ldrh	r3, [r3, #22]
 8010f68:	88fa      	ldrh	r2, [r7, #6]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d116      	bne.n	8010f9c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8010f6e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d010      	beq.n	8010f96 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8010f74:	69bb      	ldr	r3, [r7, #24]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d00c      	beq.n	8010f96 <tcp_bind+0xb2>
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d009      	beq.n	8010f96 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d005      	beq.n	8010f96 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	681a      	ldr	r2, [r3, #0]
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8010f92:	429a      	cmp	r2, r3
 8010f94:	d102      	bne.n	8010f9c <tcp_bind+0xb8>
              return ERR_USE;
 8010f96:	f06f 0307 	mvn.w	r3, #7
 8010f9a:	e029      	b.n	8010ff0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	68db      	ldr	r3, [r3, #12]
 8010fa0:	61bb      	str	r3, [r7, #24]
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d1dd      	bne.n	8010f64 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	3301      	adds	r3, #1
 8010fac:	61fb      	str	r3, [r7, #28]
 8010fae:	69fa      	ldr	r2, [r7, #28]
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	dbcf      	blt.n	8010f56 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00c      	beq.n	8010fd6 <tcp_bind+0xf2>
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d008      	beq.n	8010fd6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d002      	beq.n	8010fd0 <tcp_bind+0xec>
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	e000      	b.n	8010fd2 <tcp_bind+0xee>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	88fa      	ldrh	r2, [r7, #6]
 8010fda:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8010fdc:	4b0c      	ldr	r3, [pc, #48]	; (8011010 <tcp_bind+0x12c>)
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	60da      	str	r2, [r3, #12]
 8010fe4:	4a0a      	ldr	r2, [pc, #40]	; (8011010 <tcp_bind+0x12c>)
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	f005 fc9f 	bl	801692c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3720      	adds	r7, #32
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	0801e380 	.word	0x0801e380
 8010ffc:	0801c318 	.word	0x0801c318
 8011000:	0801c4ac 	.word	0x0801c4ac
 8011004:	0801c35c 	.word	0x0801c35c
 8011008:	0801c4c4 	.word	0x0801c4c4
 801100c:	0801e358 	.word	0x0801e358
 8011010:	2004f588 	.word	0x2004f588

08011014 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b084      	sub	sp, #16
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	4613      	mov	r3, r2
 8011020:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d106      	bne.n	8011036 <tcp_accept_null+0x22>
 8011028:	4b07      	ldr	r3, [pc, #28]	; (8011048 <tcp_accept_null+0x34>)
 801102a:	f240 320f 	movw	r2, #783	; 0x30f
 801102e:	4907      	ldr	r1, [pc, #28]	; (801104c <tcp_accept_null+0x38>)
 8011030:	4807      	ldr	r0, [pc, #28]	; (8011050 <tcp_accept_null+0x3c>)
 8011032:	f008 ff07 	bl	8019e44 <iprintf>

  tcp_abort(pcb);
 8011036:	68b8      	ldr	r0, [r7, #8]
 8011038:	f7ff ff48 	bl	8010ecc <tcp_abort>

  return ERR_ABRT;
 801103c:	f06f 030c 	mvn.w	r3, #12
}
 8011040:	4618      	mov	r0, r3
 8011042:	3710      	adds	r7, #16
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	0801c318 	.word	0x0801c318
 801104c:	0801c4ec 	.word	0x0801c4ec
 8011050:	0801c35c 	.word	0x0801c35c

08011054 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b088      	sub	sp, #32
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	460b      	mov	r3, r1
 801105e:	607a      	str	r2, [r7, #4]
 8011060:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8011062:	2300      	movs	r3, #0
 8011064:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d109      	bne.n	8011080 <tcp_listen_with_backlog_and_err+0x2c>
 801106c:	4b47      	ldr	r3, [pc, #284]	; (801118c <tcp_listen_with_backlog_and_err+0x138>)
 801106e:	f240 3259 	movw	r2, #857	; 0x359
 8011072:	4947      	ldr	r1, [pc, #284]	; (8011190 <tcp_listen_with_backlog_and_err+0x13c>)
 8011074:	4847      	ldr	r0, [pc, #284]	; (8011194 <tcp_listen_with_backlog_and_err+0x140>)
 8011076:	f008 fee5 	bl	8019e44 <iprintf>
 801107a:	23f0      	movs	r3, #240	; 0xf0
 801107c:	76fb      	strb	r3, [r7, #27]
 801107e:	e079      	b.n	8011174 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	7d1b      	ldrb	r3, [r3, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d009      	beq.n	801109c <tcp_listen_with_backlog_and_err+0x48>
 8011088:	4b40      	ldr	r3, [pc, #256]	; (801118c <tcp_listen_with_backlog_and_err+0x138>)
 801108a:	f240 325a 	movw	r2, #858	; 0x35a
 801108e:	4942      	ldr	r1, [pc, #264]	; (8011198 <tcp_listen_with_backlog_and_err+0x144>)
 8011090:	4840      	ldr	r0, [pc, #256]	; (8011194 <tcp_listen_with_backlog_and_err+0x140>)
 8011092:	f008 fed7 	bl	8019e44 <iprintf>
 8011096:	23f1      	movs	r3, #241	; 0xf1
 8011098:	76fb      	strb	r3, [r7, #27]
 801109a:	e06b      	b.n	8011174 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	7d1b      	ldrb	r3, [r3, #20]
 80110a0:	2b01      	cmp	r3, #1
 80110a2:	d104      	bne.n	80110ae <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80110a8:	23f7      	movs	r3, #247	; 0xf7
 80110aa:	76fb      	strb	r3, [r7, #27]
    goto done;
 80110ac:	e062      	b.n	8011174 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80110ae:	2002      	movs	r0, #2
 80110b0:	f7fe fa02 	bl	800f4b8 <memp_malloc>
 80110b4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80110b6:	69fb      	ldr	r3, [r7, #28]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d102      	bne.n	80110c2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 80110bc:	23ff      	movs	r3, #255	; 0xff
 80110be:	76fb      	strb	r3, [r7, #27]
    goto done;
 80110c0:	e058      	b.n	8011174 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	691a      	ldr	r2, [r3, #16]
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	8ada      	ldrh	r2, [r3, #22]
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80110d2:	69fb      	ldr	r3, [r7, #28]
 80110d4:	2201      	movs	r2, #1
 80110d6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	7d5a      	ldrb	r2, [r3, #21]
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	7a5a      	ldrb	r2, [r3, #9]
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	2200      	movs	r2, #0
 80110ec:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	7ada      	ldrb	r2, [r3, #11]
 80110f2:	69fb      	ldr	r3, [r7, #28]
 80110f4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	7a9a      	ldrb	r2, [r3, #10]
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	8adb      	ldrh	r3, [r3, #22]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d021      	beq.n	8011152 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801110e:	4b23      	ldr	r3, [pc, #140]	; (801119c <tcp_listen_with_backlog_and_err+0x148>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	68fa      	ldr	r2, [r7, #12]
 8011114:	429a      	cmp	r2, r3
 8011116:	d105      	bne.n	8011124 <tcp_listen_with_backlog_and_err+0xd0>
 8011118:	4b20      	ldr	r3, [pc, #128]	; (801119c <tcp_listen_with_backlog_and_err+0x148>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	4a1f      	ldr	r2, [pc, #124]	; (801119c <tcp_listen_with_backlog_and_err+0x148>)
 8011120:	6013      	str	r3, [r2, #0]
 8011122:	e013      	b.n	801114c <tcp_listen_with_backlog_and_err+0xf8>
 8011124:	4b1d      	ldr	r3, [pc, #116]	; (801119c <tcp_listen_with_backlog_and_err+0x148>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	617b      	str	r3, [r7, #20]
 801112a:	e00c      	b.n	8011146 <tcp_listen_with_backlog_and_err+0xf2>
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	429a      	cmp	r2, r3
 8011134:	d104      	bne.n	8011140 <tcp_listen_with_backlog_and_err+0xec>
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	68da      	ldr	r2, [r3, #12]
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	60da      	str	r2, [r3, #12]
 801113e:	e005      	b.n	801114c <tcp_listen_with_backlog_and_err+0xf8>
 8011140:	697b      	ldr	r3, [r7, #20]
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	617b      	str	r3, [r7, #20]
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d1ef      	bne.n	801112c <tcp_listen_with_backlog_and_err+0xd8>
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2200      	movs	r2, #0
 8011150:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f7ff fb76 	bl	8010844 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8011158:	69fb      	ldr	r3, [r7, #28]
 801115a:	4a11      	ldr	r2, [pc, #68]	; (80111a0 <tcp_listen_with_backlog_and_err+0x14c>)
 801115c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801115e:	4b11      	ldr	r3, [pc, #68]	; (80111a4 <tcp_listen_with_backlog_and_err+0x150>)
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	60da      	str	r2, [r3, #12]
 8011166:	4a0f      	ldr	r2, [pc, #60]	; (80111a4 <tcp_listen_with_backlog_and_err+0x150>)
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	6013      	str	r3, [r2, #0]
 801116c:	f005 fbde 	bl	801692c <tcp_timer_needed>
  res = ERR_OK;
 8011170:	2300      	movs	r3, #0
 8011172:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d002      	beq.n	8011180 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7efa      	ldrb	r2, [r7, #27]
 801117e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011180:	69fb      	ldr	r3, [r7, #28]
}
 8011182:	4618      	mov	r0, r3
 8011184:	3720      	adds	r7, #32
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	0801c318 	.word	0x0801c318
 8011190:	0801c50c 	.word	0x0801c50c
 8011194:	0801c35c 	.word	0x0801c35c
 8011198:	0801c53c 	.word	0x0801c53c
 801119c:	2004f588 	.word	0x2004f588
 80111a0:	08011015 	.word	0x08011015
 80111a4:	2004f58c 	.word	0x2004f58c

080111a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d106      	bne.n	80111c4 <tcp_update_rcv_ann_wnd+0x1c>
 80111b6:	4b25      	ldr	r3, [pc, #148]	; (801124c <tcp_update_rcv_ann_wnd+0xa4>)
 80111b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80111bc:	4924      	ldr	r1, [pc, #144]	; (8011250 <tcp_update_rcv_ann_wnd+0xa8>)
 80111be:	4825      	ldr	r0, [pc, #148]	; (8011254 <tcp_update_rcv_ann_wnd+0xac>)
 80111c0:	f008 fe40 	bl	8019e44 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80111cc:	4413      	add	r3, r2
 80111ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111d4:	687a      	ldr	r2, [r7, #4]
 80111d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80111d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80111dc:	bf28      	it	cs
 80111de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80111e2:	b292      	uxth	r2, r2
 80111e4:	4413      	add	r3, r2
 80111e6:	68fa      	ldr	r2, [r7, #12]
 80111e8:	1ad3      	subs	r3, r2, r3
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	db08      	blt.n	8011200 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fa:	68fa      	ldr	r2, [r7, #12]
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	e020      	b.n	8011242 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	dd03      	ble.n	8011216 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2200      	movs	r2, #0
 8011212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011214:	e014      	b.n	8011240 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011228:	d306      	bcc.n	8011238 <tcp_update_rcv_ann_wnd+0x90>
 801122a:	4b08      	ldr	r3, [pc, #32]	; (801124c <tcp_update_rcv_ann_wnd+0xa4>)
 801122c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011230:	4909      	ldr	r1, [pc, #36]	; (8011258 <tcp_update_rcv_ann_wnd+0xb0>)
 8011232:	4808      	ldr	r0, [pc, #32]	; (8011254 <tcp_update_rcv_ann_wnd+0xac>)
 8011234:	f008 fe06 	bl	8019e44 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	b29a      	uxth	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011240:	2300      	movs	r3, #0
  }
}
 8011242:	4618      	mov	r0, r3
 8011244:	3710      	adds	r7, #16
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	0801c318 	.word	0x0801c318
 8011250:	0801c574 	.word	0x0801c574
 8011254:	0801c35c 	.word	0x0801c35c
 8011258:	0801c598 	.word	0x0801c598

0801125c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b084      	sub	sp, #16
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	460b      	mov	r3, r1
 8011266:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d107      	bne.n	801127e <tcp_recved+0x22>
 801126e:	4b1f      	ldr	r3, [pc, #124]	; (80112ec <tcp_recved+0x90>)
 8011270:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011274:	491e      	ldr	r1, [pc, #120]	; (80112f0 <tcp_recved+0x94>)
 8011276:	481f      	ldr	r0, [pc, #124]	; (80112f4 <tcp_recved+0x98>)
 8011278:	f008 fde4 	bl	8019e44 <iprintf>
 801127c:	e032      	b.n	80112e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	7d1b      	ldrb	r3, [r3, #20]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d106      	bne.n	8011294 <tcp_recved+0x38>
 8011286:	4b19      	ldr	r3, [pc, #100]	; (80112ec <tcp_recved+0x90>)
 8011288:	f240 32d2 	movw	r2, #978	; 0x3d2
 801128c:	491a      	ldr	r1, [pc, #104]	; (80112f8 <tcp_recved+0x9c>)
 801128e:	4819      	ldr	r0, [pc, #100]	; (80112f4 <tcp_recved+0x98>)
 8011290:	f008 fdd8 	bl	8019e44 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011298:	887b      	ldrh	r3, [r7, #2]
 801129a:	4413      	add	r3, r2
 801129c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801129e:	89fb      	ldrh	r3, [r7, #14]
 80112a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80112a4:	d804      	bhi.n	80112b0 <tcp_recved+0x54>
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80112aa:	89fa      	ldrh	r2, [r7, #14]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d204      	bcs.n	80112ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80112b6:	851a      	strh	r2, [r3, #40]	; 0x28
 80112b8:	e002      	b.n	80112c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	89fa      	ldrh	r2, [r7, #14]
 80112be:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff ff71 	bl	80111a8 <tcp_update_rcv_ann_wnd>
 80112c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80112ce:	d309      	bcc.n	80112e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	8b5b      	ldrh	r3, [r3, #26]
 80112d4:	f043 0302 	orr.w	r3, r3, #2
 80112d8:	b29a      	uxth	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f004 fbae 	bl	8015a40 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop
 80112ec:	0801c318 	.word	0x0801c318
 80112f0:	0801c5b4 	.word	0x0801c5b4
 80112f4:	0801c35c 	.word	0x0801c35c
 80112f8:	0801c5cc 	.word	0x0801c5cc

080112fc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b083      	sub	sp, #12
 8011300:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8011306:	4b1e      	ldr	r3, [pc, #120]	; (8011380 <tcp_new_port+0x84>)
 8011308:	881b      	ldrh	r3, [r3, #0]
 801130a:	3301      	adds	r3, #1
 801130c:	b29a      	uxth	r2, r3
 801130e:	4b1c      	ldr	r3, [pc, #112]	; (8011380 <tcp_new_port+0x84>)
 8011310:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011312:	4b1b      	ldr	r3, [pc, #108]	; (8011380 <tcp_new_port+0x84>)
 8011314:	881b      	ldrh	r3, [r3, #0]
 8011316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801131a:	4293      	cmp	r3, r2
 801131c:	d103      	bne.n	8011326 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801131e:	4b18      	ldr	r3, [pc, #96]	; (8011380 <tcp_new_port+0x84>)
 8011320:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011324:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011326:	2300      	movs	r3, #0
 8011328:	71fb      	strb	r3, [r7, #7]
 801132a:	e01e      	b.n	801136a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801132c:	79fb      	ldrb	r3, [r7, #7]
 801132e:	4a15      	ldr	r2, [pc, #84]	; (8011384 <tcp_new_port+0x88>)
 8011330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	603b      	str	r3, [r7, #0]
 8011338:	e011      	b.n	801135e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	8ada      	ldrh	r2, [r3, #22]
 801133e:	4b10      	ldr	r3, [pc, #64]	; (8011380 <tcp_new_port+0x84>)
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	429a      	cmp	r2, r3
 8011344:	d108      	bne.n	8011358 <tcp_new_port+0x5c>
        n++;
 8011346:	88bb      	ldrh	r3, [r7, #4]
 8011348:	3301      	adds	r3, #1
 801134a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801134c:	88bb      	ldrh	r3, [r7, #4]
 801134e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011352:	d3d8      	bcc.n	8011306 <tcp_new_port+0xa>
          return 0;
 8011354:	2300      	movs	r3, #0
 8011356:	e00d      	b.n	8011374 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	603b      	str	r3, [r7, #0]
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d1ea      	bne.n	801133a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011364:	79fb      	ldrb	r3, [r7, #7]
 8011366:	3301      	adds	r3, #1
 8011368:	71fb      	strb	r3, [r7, #7]
 801136a:	79fb      	ldrb	r3, [r7, #7]
 801136c:	2b03      	cmp	r3, #3
 801136e:	d9dd      	bls.n	801132c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011370:	4b03      	ldr	r3, [pc, #12]	; (8011380 <tcp_new_port+0x84>)
 8011372:	881b      	ldrh	r3, [r3, #0]
}
 8011374:	4618      	mov	r0, r3
 8011376:	370c      	adds	r7, #12
 8011378:	46bd      	mov	sp, r7
 801137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137e:	4770      	bx	lr
 8011380:	20001a50 	.word	0x20001a50
 8011384:	0801e358 	.word	0x0801e358

08011388 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011388:	b5b0      	push	{r4, r5, r7, lr}
 801138a:	b090      	sub	sp, #64	; 0x40
 801138c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801138e:	2300      	movs	r3, #0
 8011390:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011394:	4b94      	ldr	r3, [pc, #592]	; (80115e8 <tcp_slowtmr+0x260>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	3301      	adds	r3, #1
 801139a:	4a93      	ldr	r2, [pc, #588]	; (80115e8 <tcp_slowtmr+0x260>)
 801139c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801139e:	4b93      	ldr	r3, [pc, #588]	; (80115ec <tcp_slowtmr+0x264>)
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	3301      	adds	r3, #1
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	4b91      	ldr	r3, [pc, #580]	; (80115ec <tcp_slowtmr+0x264>)
 80113a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80113ae:	4b90      	ldr	r3, [pc, #576]	; (80115f0 <tcp_slowtmr+0x268>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80113b4:	e29d      	b.n	80118f2 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80113b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113b8:	7d1b      	ldrb	r3, [r3, #20]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d106      	bne.n	80113cc <tcp_slowtmr+0x44>
 80113be:	4b8d      	ldr	r3, [pc, #564]	; (80115f4 <tcp_slowtmr+0x26c>)
 80113c0:	f240 42be 	movw	r2, #1214	; 0x4be
 80113c4:	498c      	ldr	r1, [pc, #560]	; (80115f8 <tcp_slowtmr+0x270>)
 80113c6:	488d      	ldr	r0, [pc, #564]	; (80115fc <tcp_slowtmr+0x274>)
 80113c8:	f008 fd3c 	bl	8019e44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80113cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ce:	7d1b      	ldrb	r3, [r3, #20]
 80113d0:	2b01      	cmp	r3, #1
 80113d2:	d106      	bne.n	80113e2 <tcp_slowtmr+0x5a>
 80113d4:	4b87      	ldr	r3, [pc, #540]	; (80115f4 <tcp_slowtmr+0x26c>)
 80113d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80113da:	4989      	ldr	r1, [pc, #548]	; (8011600 <tcp_slowtmr+0x278>)
 80113dc:	4887      	ldr	r0, [pc, #540]	; (80115fc <tcp_slowtmr+0x274>)
 80113de:	f008 fd31 	bl	8019e44 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80113e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e4:	7d1b      	ldrb	r3, [r3, #20]
 80113e6:	2b0a      	cmp	r3, #10
 80113e8:	d106      	bne.n	80113f8 <tcp_slowtmr+0x70>
 80113ea:	4b82      	ldr	r3, [pc, #520]	; (80115f4 <tcp_slowtmr+0x26c>)
 80113ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80113f0:	4984      	ldr	r1, [pc, #528]	; (8011604 <tcp_slowtmr+0x27c>)
 80113f2:	4882      	ldr	r0, [pc, #520]	; (80115fc <tcp_slowtmr+0x274>)
 80113f4:	f008 fd26 	bl	8019e44 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80113f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fa:	7f9a      	ldrb	r2, [r3, #30]
 80113fc:	4b7b      	ldr	r3, [pc, #492]	; (80115ec <tcp_slowtmr+0x264>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	429a      	cmp	r2, r3
 8011402:	d105      	bne.n	8011410 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011406:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801140e:	e270      	b.n	80118f2 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011410:	4b76      	ldr	r3, [pc, #472]	; (80115ec <tcp_slowtmr+0x264>)
 8011412:	781a      	ldrb	r2, [r3, #0]
 8011414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011416:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011418:	2300      	movs	r3, #0
 801141a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801141e:	2300      	movs	r3, #0
 8011420:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011426:	7d1b      	ldrb	r3, [r3, #20]
 8011428:	2b02      	cmp	r3, #2
 801142a:	d10a      	bne.n	8011442 <tcp_slowtmr+0xba>
 801142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801142e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011432:	2b05      	cmp	r3, #5
 8011434:	d905      	bls.n	8011442 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801143a:	3301      	adds	r3, #1
 801143c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011440:	e11e      	b.n	8011680 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011444:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011448:	2b0b      	cmp	r3, #11
 801144a:	d905      	bls.n	8011458 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801144c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011450:	3301      	adds	r3, #1
 8011452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011456:	e113      	b.n	8011680 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801145e:	2b00      	cmp	r3, #0
 8011460:	d075      	beq.n	801154e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011466:	2b00      	cmp	r3, #0
 8011468:	d006      	beq.n	8011478 <tcp_slowtmr+0xf0>
 801146a:	4b62      	ldr	r3, [pc, #392]	; (80115f4 <tcp_slowtmr+0x26c>)
 801146c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011470:	4965      	ldr	r1, [pc, #404]	; (8011608 <tcp_slowtmr+0x280>)
 8011472:	4862      	ldr	r0, [pc, #392]	; (80115fc <tcp_slowtmr+0x274>)
 8011474:	f008 fce6 	bl	8019e44 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801147c:	2b00      	cmp	r3, #0
 801147e:	d106      	bne.n	801148e <tcp_slowtmr+0x106>
 8011480:	4b5c      	ldr	r3, [pc, #368]	; (80115f4 <tcp_slowtmr+0x26c>)
 8011482:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011486:	4961      	ldr	r1, [pc, #388]	; (801160c <tcp_slowtmr+0x284>)
 8011488:	485c      	ldr	r0, [pc, #368]	; (80115fc <tcp_slowtmr+0x274>)
 801148a:	f008 fcdb 	bl	8019e44 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011490:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011494:	2b0b      	cmp	r3, #11
 8011496:	d905      	bls.n	80114a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801149c:	3301      	adds	r3, #1
 801149e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80114a2:	e0ed      	b.n	8011680 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80114a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80114aa:	3b01      	subs	r3, #1
 80114ac:	4a58      	ldr	r2, [pc, #352]	; (8011610 <tcp_slowtmr+0x288>)
 80114ae:	5cd3      	ldrb	r3, [r2, r3]
 80114b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80114b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80114b8:	7c7a      	ldrb	r2, [r7, #17]
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d907      	bls.n	80114ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80114be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80114c4:	3301      	adds	r3, #1
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80114ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80114d4:	7c7a      	ldrb	r2, [r7, #17]
 80114d6:	429a      	cmp	r2, r3
 80114d8:	f200 80d2 	bhi.w	8011680 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80114dc:	2301      	movs	r3, #1
 80114de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80114e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d108      	bne.n	80114fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80114ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114ec:	f005 f950 	bl	8016790 <tcp_zero_window_probe>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d014      	beq.n	8011520 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80114f6:	2300      	movs	r3, #0
 80114f8:	623b      	str	r3, [r7, #32]
 80114fa:	e011      	b.n	8011520 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80114fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011502:	4619      	mov	r1, r3
 8011504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011506:	f004 f815 	bl	8015534 <tcp_split_unsent_seg>
 801150a:	4603      	mov	r3, r0
 801150c:	2b00      	cmp	r3, #0
 801150e:	d107      	bne.n	8011520 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011510:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011512:	f004 fa95 	bl	8015a40 <tcp_output>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d101      	bne.n	8011520 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801151c:	2300      	movs	r3, #0
 801151e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011520:	6a3b      	ldr	r3, [r7, #32]
 8011522:	2b00      	cmp	r3, #0
 8011524:	f000 80ac 	beq.w	8011680 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152a:	2200      	movs	r2, #0
 801152c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011532:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011536:	2b06      	cmp	r3, #6
 8011538:	f200 80a2 	bhi.w	8011680 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801153c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011542:	3301      	adds	r3, #1
 8011544:	b2da      	uxtb	r2, r3
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801154c:	e098      	b.n	8011680 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011554:	2b00      	cmp	r3, #0
 8011556:	db0f      	blt.n	8011578 <tcp_slowtmr+0x1f0>
 8011558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801155e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011562:	4293      	cmp	r3, r2
 8011564:	d008      	beq.n	8011578 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011568:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801156c:	b29b      	uxth	r3, r3
 801156e:	3301      	adds	r3, #1
 8011570:	b29b      	uxth	r3, r3
 8011572:	b21a      	sxth	r2, r3
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011580:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011584:	429a      	cmp	r2, r3
 8011586:	db7b      	blt.n	8011680 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801158a:	f004 fd4b 	bl	8016024 <tcp_rexmit_rto_prepare>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d007      	beq.n	80115a4 <tcp_slowtmr+0x21c>
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011598:	2b00      	cmp	r3, #0
 801159a:	d171      	bne.n	8011680 <tcp_slowtmr+0x2f8>
 801159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801159e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d06d      	beq.n	8011680 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80115a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a6:	7d1b      	ldrb	r3, [r3, #20]
 80115a8:	2b02      	cmp	r3, #2
 80115aa:	d03a      	beq.n	8011622 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80115ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80115b2:	2b0c      	cmp	r3, #12
 80115b4:	bf28      	it	cs
 80115b6:	230c      	movcs	r3, #12
 80115b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80115ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80115c0:	10db      	asrs	r3, r3, #3
 80115c2:	b21b      	sxth	r3, r3
 80115c4:	461a      	mov	r2, r3
 80115c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80115cc:	4413      	add	r3, r2
 80115ce:	7efa      	ldrb	r2, [r7, #27]
 80115d0:	4910      	ldr	r1, [pc, #64]	; (8011614 <tcp_slowtmr+0x28c>)
 80115d2:	5c8a      	ldrb	r2, [r1, r2]
 80115d4:	4093      	lsls	r3, r2
 80115d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80115de:	4293      	cmp	r3, r2
 80115e0:	dc1a      	bgt.n	8011618 <tcp_slowtmr+0x290>
 80115e2:	697b      	ldr	r3, [r7, #20]
 80115e4:	b21a      	sxth	r2, r3
 80115e6:	e019      	b.n	801161c <tcp_slowtmr+0x294>
 80115e8:	2004f584 	.word	0x2004f584
 80115ec:	2004f59a 	.word	0x2004f59a
 80115f0:	2004f590 	.word	0x2004f590
 80115f4:	0801c318 	.word	0x0801c318
 80115f8:	0801c65c 	.word	0x0801c65c
 80115fc:	0801c35c 	.word	0x0801c35c
 8011600:	0801c688 	.word	0x0801c688
 8011604:	0801c6b4 	.word	0x0801c6b4
 8011608:	0801c6e4 	.word	0x0801c6e4
 801160c:	0801c718 	.word	0x0801c718
 8011610:	0801e350 	.word	0x0801e350
 8011614:	0801e340 	.word	0x0801e340
 8011618:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011624:	2200      	movs	r2, #0
 8011626:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011630:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011634:	4293      	cmp	r3, r2
 8011636:	bf28      	it	cs
 8011638:	4613      	movcs	r3, r2
 801163a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801163c:	8a7b      	ldrh	r3, [r7, #18]
 801163e:	085b      	lsrs	r3, r3, #1
 8011640:	b29a      	uxth	r2, r3
 8011642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011644:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011650:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011652:	005b      	lsls	r3, r3, #1
 8011654:	b29b      	uxth	r3, r3
 8011656:	429a      	cmp	r2, r3
 8011658:	d206      	bcs.n	8011668 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801165a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801165c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801165e:	005b      	lsls	r3, r3, #1
 8011660:	b29a      	uxth	r2, r3
 8011662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011664:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011674:	2200      	movs	r2, #0
 8011676:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801167a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801167c:	f004 fd42 	bl	8016104 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011682:	7d1b      	ldrb	r3, [r3, #20]
 8011684:	2b06      	cmp	r3, #6
 8011686:	d111      	bne.n	80116ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	8b5b      	ldrh	r3, [r3, #26]
 801168c:	f003 0310 	and.w	r3, r3, #16
 8011690:	2b00      	cmp	r3, #0
 8011692:	d00b      	beq.n	80116ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011694:	4b9c      	ldr	r3, [pc, #624]	; (8011908 <tcp_slowtmr+0x580>)
 8011696:	681a      	ldr	r2, [r3, #0]
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	6a1b      	ldr	r3, [r3, #32]
 801169c:	1ad3      	subs	r3, r2, r3
 801169e:	2b28      	cmp	r3, #40	; 0x28
 80116a0:	d904      	bls.n	80116ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80116a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116a6:	3301      	adds	r3, #1
 80116a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	7a5b      	ldrb	r3, [r3, #9]
 80116b0:	f003 0308 	and.w	r3, r3, #8
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d04a      	beq.n	801174e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80116b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80116bc:	2b04      	cmp	r3, #4
 80116be:	d003      	beq.n	80116c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80116c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80116c4:	2b07      	cmp	r3, #7
 80116c6:	d142      	bne.n	801174e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80116c8:	4b8f      	ldr	r3, [pc, #572]	; (8011908 <tcp_slowtmr+0x580>)
 80116ca:	681a      	ldr	r2, [r3, #0]
 80116cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ce:	6a1b      	ldr	r3, [r3, #32]
 80116d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80116d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80116d8:	4b8c      	ldr	r3, [pc, #560]	; (801190c <tcp_slowtmr+0x584>)
 80116da:	440b      	add	r3, r1
 80116dc:	498c      	ldr	r1, [pc, #560]	; (8011910 <tcp_slowtmr+0x588>)
 80116de:	fba1 1303 	umull	r1, r3, r1, r3
 80116e2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d90a      	bls.n	80116fe <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80116e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116ec:	3301      	adds	r3, #1
 80116ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80116f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80116f6:	3301      	adds	r3, #1
 80116f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80116fc:	e027      	b.n	801174e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80116fe:	4b82      	ldr	r3, [pc, #520]	; (8011908 <tcp_slowtmr+0x580>)
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011704:	6a1b      	ldr	r3, [r3, #32]
 8011706:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801170a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011710:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011714:	4618      	mov	r0, r3
 8011716:	4b7f      	ldr	r3, [pc, #508]	; (8011914 <tcp_slowtmr+0x58c>)
 8011718:	fb00 f303 	mul.w	r3, r0, r3
 801171c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801171e:	497c      	ldr	r1, [pc, #496]	; (8011910 <tcp_slowtmr+0x588>)
 8011720:	fba1 1303 	umull	r1, r3, r1, r3
 8011724:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011726:	429a      	cmp	r2, r3
 8011728:	d911      	bls.n	801174e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801172a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801172c:	f004 fff0 	bl	8016710 <tcp_keepalive>
 8011730:	4603      	mov	r3, r0
 8011732:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011736:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801173a:	2b00      	cmp	r3, #0
 801173c:	d107      	bne.n	801174e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011740:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011744:	3301      	adds	r3, #1
 8011746:	b2da      	uxtb	r2, r3
 8011748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011752:	2b00      	cmp	r3, #0
 8011754:	d011      	beq.n	801177a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011756:	4b6c      	ldr	r3, [pc, #432]	; (8011908 <tcp_slowtmr+0x580>)
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	1ad2      	subs	r2, r2, r3
 8011760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011762:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011766:	4619      	mov	r1, r3
 8011768:	460b      	mov	r3, r1
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	440b      	add	r3, r1
 801176e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011770:	429a      	cmp	r2, r3
 8011772:	d302      	bcc.n	801177a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011776:	f000 feab 	bl	80124d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177c:	7d1b      	ldrb	r3, [r3, #20]
 801177e:	2b03      	cmp	r3, #3
 8011780:	d10b      	bne.n	801179a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011782:	4b61      	ldr	r3, [pc, #388]	; (8011908 <tcp_slowtmr+0x580>)
 8011784:	681a      	ldr	r2, [r3, #0]
 8011786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011788:	6a1b      	ldr	r3, [r3, #32]
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	2b28      	cmp	r3, #40	; 0x28
 801178e:	d904      	bls.n	801179a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011794:	3301      	adds	r3, #1
 8011796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179c:	7d1b      	ldrb	r3, [r3, #20]
 801179e:	2b09      	cmp	r3, #9
 80117a0:	d10b      	bne.n	80117ba <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80117a2:	4b59      	ldr	r3, [pc, #356]	; (8011908 <tcp_slowtmr+0x580>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	1ad3      	subs	r3, r2, r3
 80117ac:	2bf0      	cmp	r3, #240	; 0xf0
 80117ae:	d904      	bls.n	80117ba <tcp_slowtmr+0x432>
        ++pcb_remove;
 80117b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117b4:	3301      	adds	r3, #1
 80117b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80117ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d060      	beq.n	8011884 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80117c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117c8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80117ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117cc:	f000 fccc 	bl	8012168 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80117d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d010      	beq.n	80117f8 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80117d6:	4b50      	ldr	r3, [pc, #320]	; (8011918 <tcp_slowtmr+0x590>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117dc:	429a      	cmp	r2, r3
 80117de:	d106      	bne.n	80117ee <tcp_slowtmr+0x466>
 80117e0:	4b4e      	ldr	r3, [pc, #312]	; (801191c <tcp_slowtmr+0x594>)
 80117e2:	f240 526d 	movw	r2, #1389	; 0x56d
 80117e6:	494e      	ldr	r1, [pc, #312]	; (8011920 <tcp_slowtmr+0x598>)
 80117e8:	484e      	ldr	r0, [pc, #312]	; (8011924 <tcp_slowtmr+0x59c>)
 80117ea:	f008 fb2b 	bl	8019e44 <iprintf>
        prev->next = pcb->next;
 80117ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f0:	68da      	ldr	r2, [r3, #12]
 80117f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f4:	60da      	str	r2, [r3, #12]
 80117f6:	e00f      	b.n	8011818 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80117f8:	4b47      	ldr	r3, [pc, #284]	; (8011918 <tcp_slowtmr+0x590>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117fe:	429a      	cmp	r2, r3
 8011800:	d006      	beq.n	8011810 <tcp_slowtmr+0x488>
 8011802:	4b46      	ldr	r3, [pc, #280]	; (801191c <tcp_slowtmr+0x594>)
 8011804:	f240 5271 	movw	r2, #1393	; 0x571
 8011808:	4947      	ldr	r1, [pc, #284]	; (8011928 <tcp_slowtmr+0x5a0>)
 801180a:	4846      	ldr	r0, [pc, #280]	; (8011924 <tcp_slowtmr+0x59c>)
 801180c:	f008 fb1a 	bl	8019e44 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	4a40      	ldr	r2, [pc, #256]	; (8011918 <tcp_slowtmr+0x590>)
 8011816:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011818:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801181c:	2b00      	cmp	r3, #0
 801181e:	d013      	beq.n	8011848 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011822:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011826:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011828:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182c:	3304      	adds	r3, #4
 801182e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011830:	8ad2      	ldrh	r2, [r2, #22]
 8011832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011834:	8b09      	ldrh	r1, [r1, #24]
 8011836:	9102      	str	r1, [sp, #8]
 8011838:	9201      	str	r2, [sp, #4]
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	462b      	mov	r3, r5
 801183e:	4622      	mov	r2, r4
 8011840:	4601      	mov	r1, r0
 8011842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011844:	f004 feb0 	bl	80165a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184a:	691b      	ldr	r3, [r3, #16]
 801184c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011850:	7d1b      	ldrb	r3, [r3, #20]
 8011852:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011856:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801185e:	6838      	ldr	r0, [r7, #0]
 8011860:	f7fe fff0 	bl	8010844 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011864:	4b31      	ldr	r3, [pc, #196]	; (801192c <tcp_slowtmr+0x5a4>)
 8011866:	2200      	movs	r2, #0
 8011868:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d004      	beq.n	801187a <tcp_slowtmr+0x4f2>
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f06f 010c 	mvn.w	r1, #12
 8011876:	68b8      	ldr	r0, [r7, #8]
 8011878:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801187a:	4b2c      	ldr	r3, [pc, #176]	; (801192c <tcp_slowtmr+0x5a4>)
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d037      	beq.n	80118f2 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011882:	e592      	b.n	80113aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011890:	7f1b      	ldrb	r3, [r3, #28]
 8011892:	3301      	adds	r3, #1
 8011894:	b2da      	uxtb	r2, r3
 8011896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011898:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801189a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801189c:	7f1a      	ldrb	r2, [r3, #28]
 801189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a0:	7f5b      	ldrb	r3, [r3, #29]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d325      	bcc.n	80118f2 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80118a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118a8:	2200      	movs	r2, #0
 80118aa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80118ac:	4b1f      	ldr	r3, [pc, #124]	; (801192c <tcp_slowtmr+0x5a4>)
 80118ae:	2200      	movs	r2, #0
 80118b0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80118b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d00b      	beq.n	80118d4 <tcp_slowtmr+0x54c>
 80118bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118c4:	6912      	ldr	r2, [r2, #16]
 80118c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118c8:	4610      	mov	r0, r2
 80118ca:	4798      	blx	r3
 80118cc:	4603      	mov	r3, r0
 80118ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80118d2:	e002      	b.n	80118da <tcp_slowtmr+0x552>
 80118d4:	2300      	movs	r3, #0
 80118d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80118da:	4b14      	ldr	r3, [pc, #80]	; (801192c <tcp_slowtmr+0x5a4>)
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d000      	beq.n	80118e4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80118e2:	e562      	b.n	80113aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80118e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d102      	bne.n	80118f2 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80118ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118ee:	f004 f8a7 	bl	8015a40 <tcp_output>
  while (pcb != NULL) {
 80118f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	f47f ad5e 	bne.w	80113b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80118fa:	2300      	movs	r3, #0
 80118fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80118fe:	4b0c      	ldr	r3, [pc, #48]	; (8011930 <tcp_slowtmr+0x5a8>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011904:	e069      	b.n	80119da <tcp_slowtmr+0x652>
 8011906:	bf00      	nop
 8011908:	2004f584 	.word	0x2004f584
 801190c:	000a4cb8 	.word	0x000a4cb8
 8011910:	10624dd3 	.word	0x10624dd3
 8011914:	000124f8 	.word	0x000124f8
 8011918:	2004f590 	.word	0x2004f590
 801191c:	0801c318 	.word	0x0801c318
 8011920:	0801c750 	.word	0x0801c750
 8011924:	0801c35c 	.word	0x0801c35c
 8011928:	0801c77c 	.word	0x0801c77c
 801192c:	2004f598 	.word	0x2004f598
 8011930:	2004f594 	.word	0x2004f594
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011936:	7d1b      	ldrb	r3, [r3, #20]
 8011938:	2b0a      	cmp	r3, #10
 801193a:	d006      	beq.n	801194a <tcp_slowtmr+0x5c2>
 801193c:	4b2b      	ldr	r3, [pc, #172]	; (80119ec <tcp_slowtmr+0x664>)
 801193e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011942:	492b      	ldr	r1, [pc, #172]	; (80119f0 <tcp_slowtmr+0x668>)
 8011944:	482b      	ldr	r0, [pc, #172]	; (80119f4 <tcp_slowtmr+0x66c>)
 8011946:	f008 fa7d 	bl	8019e44 <iprintf>
    pcb_remove = 0;
 801194a:	2300      	movs	r3, #0
 801194c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011950:	4b29      	ldr	r3, [pc, #164]	; (80119f8 <tcp_slowtmr+0x670>)
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011956:	6a1b      	ldr	r3, [r3, #32]
 8011958:	1ad3      	subs	r3, r2, r3
 801195a:	2bf0      	cmp	r3, #240	; 0xf0
 801195c:	d904      	bls.n	8011968 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801195e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011962:	3301      	adds	r3, #1
 8011964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801196c:	2b00      	cmp	r3, #0
 801196e:	d02f      	beq.n	80119d0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011970:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011972:	f000 fbf9 	bl	8012168 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011978:	2b00      	cmp	r3, #0
 801197a:	d010      	beq.n	801199e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801197c:	4b1f      	ldr	r3, [pc, #124]	; (80119fc <tcp_slowtmr+0x674>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011982:	429a      	cmp	r2, r3
 8011984:	d106      	bne.n	8011994 <tcp_slowtmr+0x60c>
 8011986:	4b19      	ldr	r3, [pc, #100]	; (80119ec <tcp_slowtmr+0x664>)
 8011988:	f240 52af 	movw	r2, #1455	; 0x5af
 801198c:	491c      	ldr	r1, [pc, #112]	; (8011a00 <tcp_slowtmr+0x678>)
 801198e:	4819      	ldr	r0, [pc, #100]	; (80119f4 <tcp_slowtmr+0x66c>)
 8011990:	f008 fa58 	bl	8019e44 <iprintf>
        prev->next = pcb->next;
 8011994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011996:	68da      	ldr	r2, [r3, #12]
 8011998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801199a:	60da      	str	r2, [r3, #12]
 801199c:	e00f      	b.n	80119be <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801199e:	4b17      	ldr	r3, [pc, #92]	; (80119fc <tcp_slowtmr+0x674>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d006      	beq.n	80119b6 <tcp_slowtmr+0x62e>
 80119a8:	4b10      	ldr	r3, [pc, #64]	; (80119ec <tcp_slowtmr+0x664>)
 80119aa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80119ae:	4915      	ldr	r1, [pc, #84]	; (8011a04 <tcp_slowtmr+0x67c>)
 80119b0:	4810      	ldr	r0, [pc, #64]	; (80119f4 <tcp_slowtmr+0x66c>)
 80119b2:	f008 fa47 	bl	8019e44 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80119b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b8:	68db      	ldr	r3, [r3, #12]
 80119ba:	4a10      	ldr	r2, [pc, #64]	; (80119fc <tcp_slowtmr+0x674>)
 80119bc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80119c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80119c8:	69f8      	ldr	r0, [r7, #28]
 80119ca:	f7fe ff3b 	bl	8010844 <tcp_free>
 80119ce:	e004      	b.n	80119da <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80119d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80119d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80119da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1a9      	bne.n	8011934 <tcp_slowtmr+0x5ac>
    }
  }
}
 80119e0:	bf00      	nop
 80119e2:	bf00      	nop
 80119e4:	3730      	adds	r7, #48	; 0x30
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bdb0      	pop	{r4, r5, r7, pc}
 80119ea:	bf00      	nop
 80119ec:	0801c318 	.word	0x0801c318
 80119f0:	0801c7a8 	.word	0x0801c7a8
 80119f4:	0801c35c 	.word	0x0801c35c
 80119f8:	2004f584 	.word	0x2004f584
 80119fc:	2004f594 	.word	0x2004f594
 8011a00:	0801c7d8 	.word	0x0801c7d8
 8011a04:	0801c800 	.word	0x0801c800

08011a08 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011a0e:	4b2d      	ldr	r3, [pc, #180]	; (8011ac4 <tcp_fasttmr+0xbc>)
 8011a10:	781b      	ldrb	r3, [r3, #0]
 8011a12:	3301      	adds	r3, #1
 8011a14:	b2da      	uxtb	r2, r3
 8011a16:	4b2b      	ldr	r3, [pc, #172]	; (8011ac4 <tcp_fasttmr+0xbc>)
 8011a18:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011a1a:	4b2b      	ldr	r3, [pc, #172]	; (8011ac8 <tcp_fasttmr+0xc0>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011a20:	e048      	b.n	8011ab4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	7f9a      	ldrb	r2, [r3, #30]
 8011a26:	4b27      	ldr	r3, [pc, #156]	; (8011ac4 <tcp_fasttmr+0xbc>)
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d03f      	beq.n	8011aae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011a2e:	4b25      	ldr	r3, [pc, #148]	; (8011ac4 <tcp_fasttmr+0xbc>)
 8011a30:	781a      	ldrb	r2, [r3, #0]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	8b5b      	ldrh	r3, [r3, #26]
 8011a3a:	f003 0301 	and.w	r3, r3, #1
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d010      	beq.n	8011a64 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	8b5b      	ldrh	r3, [r3, #26]
 8011a46:	f043 0302 	orr.w	r3, r3, #2
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f003 fff5 	bl	8015a40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8b5b      	ldrh	r3, [r3, #26]
 8011a5a:	f023 0303 	bic.w	r3, r3, #3
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	8b5b      	ldrh	r3, [r3, #26]
 8011a68:	f003 0308 	and.w	r3, r3, #8
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d009      	beq.n	8011a84 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	8b5b      	ldrh	r3, [r3, #26]
 8011a74:	f023 0308 	bic.w	r3, r3, #8
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f7ff f874 	bl	8010b6c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00a      	beq.n	8011aa8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011a92:	4b0e      	ldr	r3, [pc, #56]	; (8011acc <tcp_fasttmr+0xc4>)
 8011a94:	2200      	movs	r2, #0
 8011a96:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 f819 	bl	8011ad0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011a9e:	4b0b      	ldr	r3, [pc, #44]	; (8011acc <tcp_fasttmr+0xc4>)
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d000      	beq.n	8011aa8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011aa6:	e7b8      	b.n	8011a1a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	607b      	str	r3, [r7, #4]
 8011aac:	e002      	b.n	8011ab4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d1b3      	bne.n	8011a22 <tcp_fasttmr+0x1a>
    }
  }
}
 8011aba:	bf00      	nop
 8011abc:	bf00      	nop
 8011abe:	3708      	adds	r7, #8
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	2004f59a 	.word	0x2004f59a
 8011ac8:	2004f590 	.word	0x2004f590
 8011acc:	2004f598 	.word	0x2004f598

08011ad0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011ad0:	b590      	push	{r4, r7, lr}
 8011ad2:	b085      	sub	sp, #20
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d109      	bne.n	8011af2 <tcp_process_refused_data+0x22>
 8011ade:	4b37      	ldr	r3, [pc, #220]	; (8011bbc <tcp_process_refused_data+0xec>)
 8011ae0:	f240 6209 	movw	r2, #1545	; 0x609
 8011ae4:	4936      	ldr	r1, [pc, #216]	; (8011bc0 <tcp_process_refused_data+0xf0>)
 8011ae6:	4837      	ldr	r0, [pc, #220]	; (8011bc4 <tcp_process_refused_data+0xf4>)
 8011ae8:	f008 f9ac 	bl	8019e44 <iprintf>
 8011aec:	f06f 030f 	mvn.w	r3, #15
 8011af0:	e060      	b.n	8011bb4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011af6:	7b5b      	ldrb	r3, [r3, #13]
 8011af8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011afe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2200      	movs	r2, #0
 8011b04:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00b      	beq.n	8011b28 <tcp_process_refused_data+0x58>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6918      	ldr	r0, [r3, #16]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	6879      	ldr	r1, [r7, #4]
 8011b20:	47a0      	blx	r4
 8011b22:	4603      	mov	r3, r0
 8011b24:	73fb      	strb	r3, [r7, #15]
 8011b26:	e007      	b.n	8011b38 <tcp_process_refused_data+0x68>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	6879      	ldr	r1, [r7, #4]
 8011b2e:	2000      	movs	r0, #0
 8011b30:	f000 f8a4 	bl	8011c7c <tcp_recv_null>
 8011b34:	4603      	mov	r3, r0
 8011b36:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d12a      	bne.n	8011b96 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011b40:	7bbb      	ldrb	r3, [r7, #14]
 8011b42:	f003 0320 	and.w	r3, r3, #32
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d033      	beq.n	8011bb2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011b52:	d005      	beq.n	8011b60 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011b58:	3301      	adds	r3, #1
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d00b      	beq.n	8011b82 <tcp_process_refused_data+0xb2>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6918      	ldr	r0, [r3, #16]
 8011b74:	2300      	movs	r3, #0
 8011b76:	2200      	movs	r2, #0
 8011b78:	6879      	ldr	r1, [r7, #4]
 8011b7a:	47a0      	blx	r4
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	73fb      	strb	r3, [r7, #15]
 8011b80:	e001      	b.n	8011b86 <tcp_process_refused_data+0xb6>
 8011b82:	2300      	movs	r3, #0
 8011b84:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b8a:	f113 0f0d 	cmn.w	r3, #13
 8011b8e:	d110      	bne.n	8011bb2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011b90:	f06f 030c 	mvn.w	r3, #12
 8011b94:	e00e      	b.n	8011bb4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b9a:	f113 0f0d 	cmn.w	r3, #13
 8011b9e:	d102      	bne.n	8011ba6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011ba0:	f06f 030c 	mvn.w	r3, #12
 8011ba4:	e006      	b.n	8011bb4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68ba      	ldr	r2, [r7, #8]
 8011baa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011bac:	f06f 0304 	mvn.w	r3, #4
 8011bb0:	e000      	b.n	8011bb4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011bb2:	2300      	movs	r3, #0
}
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	3714      	adds	r7, #20
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd90      	pop	{r4, r7, pc}
 8011bbc:	0801c318 	.word	0x0801c318
 8011bc0:	0801c828 	.word	0x0801c828
 8011bc4:	0801c35c 	.word	0x0801c35c

08011bc8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011bd0:	e007      	b.n	8011be2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f000 f80a 	bl	8011bf2 <tcp_seg_free>
    seg = next;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d1f4      	bne.n	8011bd2 <tcp_segs_free+0xa>
  }
}
 8011be8:	bf00      	nop
 8011bea:	bf00      	nop
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}

08011bf2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b082      	sub	sp, #8
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00c      	beq.n	8011c1a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d004      	beq.n	8011c12 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fe fb6d 	bl	80102ec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011c12:	6879      	ldr	r1, [r7, #4]
 8011c14:	2003      	movs	r0, #3
 8011c16:	f7fd fcc5 	bl	800f5a4 <memp_free>
  }
}
 8011c1a:	bf00      	nop
 8011c1c:	3708      	adds	r7, #8
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
	...

08011c24 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d106      	bne.n	8011c40 <tcp_seg_copy+0x1c>
 8011c32:	4b0f      	ldr	r3, [pc, #60]	; (8011c70 <tcp_seg_copy+0x4c>)
 8011c34:	f240 6282 	movw	r2, #1666	; 0x682
 8011c38:	490e      	ldr	r1, [pc, #56]	; (8011c74 <tcp_seg_copy+0x50>)
 8011c3a:	480f      	ldr	r0, [pc, #60]	; (8011c78 <tcp_seg_copy+0x54>)
 8011c3c:	f008 f902 	bl	8019e44 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011c40:	2003      	movs	r0, #3
 8011c42:	f7fd fc39 	bl	800f4b8 <memp_malloc>
 8011c46:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d101      	bne.n	8011c52 <tcp_seg_copy+0x2e>
    return NULL;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	e00a      	b.n	8011c68 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011c52:	2210      	movs	r2, #16
 8011c54:	6879      	ldr	r1, [r7, #4]
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f008 f849 	bl	8019cee <memcpy>
  pbuf_ref(cseg->p);
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fe fbe9 	bl	8010438 <pbuf_ref>
  return cseg;
 8011c66:	68fb      	ldr	r3, [r7, #12]
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	0801c318 	.word	0x0801c318
 8011c74:	0801c86c 	.word	0x0801c86c
 8011c78:	0801c35c 	.word	0x0801c35c

08011c7c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	607a      	str	r2, [r7, #4]
 8011c88:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d109      	bne.n	8011ca4 <tcp_recv_null+0x28>
 8011c90:	4b12      	ldr	r3, [pc, #72]	; (8011cdc <tcp_recv_null+0x60>)
 8011c92:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011c96:	4912      	ldr	r1, [pc, #72]	; (8011ce0 <tcp_recv_null+0x64>)
 8011c98:	4812      	ldr	r0, [pc, #72]	; (8011ce4 <tcp_recv_null+0x68>)
 8011c9a:	f008 f8d3 	bl	8019e44 <iprintf>
 8011c9e:	f06f 030f 	mvn.w	r3, #15
 8011ca2:	e016      	b.n	8011cd2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d009      	beq.n	8011cbe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	891b      	ldrh	r3, [r3, #8]
 8011cae:	4619      	mov	r1, r3
 8011cb0:	68b8      	ldr	r0, [r7, #8]
 8011cb2:	f7ff fad3 	bl	801125c <tcp_recved>
    pbuf_free(p);
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7fe fb18 	bl	80102ec <pbuf_free>
 8011cbc:	e008      	b.n	8011cd0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d104      	bne.n	8011cd0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011cc6:	68b8      	ldr	r0, [r7, #8]
 8011cc8:	f7fe ffba 	bl	8010c40 <tcp_close>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	e000      	b.n	8011cd2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3710      	adds	r7, #16
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	0801c318 	.word	0x0801c318
 8011ce0:	0801c888 	.word	0x0801c888
 8011ce4:	0801c35c 	.word	0x0801c35c

08011ce8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	4603      	mov	r3, r0
 8011cf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	db01      	blt.n	8011cfe <tcp_kill_prio+0x16>
 8011cfa:	79fb      	ldrb	r3, [r7, #7]
 8011cfc:	e000      	b.n	8011d00 <tcp_kill_prio+0x18>
 8011cfe:	237f      	movs	r3, #127	; 0x7f
 8011d00:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011d02:	7afb      	ldrb	r3, [r7, #11]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d034      	beq.n	8011d72 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011d08:	7afb      	ldrb	r3, [r7, #11]
 8011d0a:	3b01      	subs	r3, #1
 8011d0c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011d0e:	2300      	movs	r3, #0
 8011d10:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011d12:	2300      	movs	r3, #0
 8011d14:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d16:	4b19      	ldr	r3, [pc, #100]	; (8011d7c <tcp_kill_prio+0x94>)
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	617b      	str	r3, [r7, #20]
 8011d1c:	e01f      	b.n	8011d5e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	7d5b      	ldrb	r3, [r3, #21]
 8011d22:	7afa      	ldrb	r2, [r7, #11]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d80c      	bhi.n	8011d42 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011d2c:	7afa      	ldrb	r2, [r7, #11]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d112      	bne.n	8011d58 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011d32:	4b13      	ldr	r3, [pc, #76]	; (8011d80 <tcp_kill_prio+0x98>)
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	6a1b      	ldr	r3, [r3, #32]
 8011d3a:	1ad3      	subs	r3, r2, r3
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d80a      	bhi.n	8011d58 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011d42:	4b0f      	ldr	r3, [pc, #60]	; (8011d80 <tcp_kill_prio+0x98>)
 8011d44:	681a      	ldr	r2, [r3, #0]
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	6a1b      	ldr	r3, [r3, #32]
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	7d5b      	ldrb	r3, [r3, #21]
 8011d56:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	617b      	str	r3, [r7, #20]
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1dc      	bne.n	8011d1e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d004      	beq.n	8011d74 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011d6a:	6938      	ldr	r0, [r7, #16]
 8011d6c:	f7ff f8ae 	bl	8010ecc <tcp_abort>
 8011d70:	e000      	b.n	8011d74 <tcp_kill_prio+0x8c>
    return;
 8011d72:	bf00      	nop
  }
}
 8011d74:	3718      	adds	r7, #24
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	2004f590 	.word	0x2004f590
 8011d80:	2004f584 	.word	0x2004f584

08011d84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011d8e:	79fb      	ldrb	r3, [r7, #7]
 8011d90:	2b08      	cmp	r3, #8
 8011d92:	d009      	beq.n	8011da8 <tcp_kill_state+0x24>
 8011d94:	79fb      	ldrb	r3, [r7, #7]
 8011d96:	2b09      	cmp	r3, #9
 8011d98:	d006      	beq.n	8011da8 <tcp_kill_state+0x24>
 8011d9a:	4b1a      	ldr	r3, [pc, #104]	; (8011e04 <tcp_kill_state+0x80>)
 8011d9c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011da0:	4919      	ldr	r1, [pc, #100]	; (8011e08 <tcp_kill_state+0x84>)
 8011da2:	481a      	ldr	r0, [pc, #104]	; (8011e0c <tcp_kill_state+0x88>)
 8011da4:	f008 f84e 	bl	8019e44 <iprintf>

  inactivity = 0;
 8011da8:	2300      	movs	r3, #0
 8011daa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011dac:	2300      	movs	r3, #0
 8011dae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011db0:	4b17      	ldr	r3, [pc, #92]	; (8011e10 <tcp_kill_state+0x8c>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	617b      	str	r3, [r7, #20]
 8011db6:	e017      	b.n	8011de8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	79fa      	ldrb	r2, [r7, #7]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d10f      	bne.n	8011de2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011dc2:	4b14      	ldr	r3, [pc, #80]	; (8011e14 <tcp_kill_state+0x90>)
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	6a1b      	ldr	r3, [r3, #32]
 8011dca:	1ad3      	subs	r3, r2, r3
 8011dcc:	68fa      	ldr	r2, [r7, #12]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d807      	bhi.n	8011de2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011dd2:	4b10      	ldr	r3, [pc, #64]	; (8011e14 <tcp_kill_state+0x90>)
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	6a1b      	ldr	r3, [r3, #32]
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	617b      	str	r3, [r7, #20]
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d1e4      	bne.n	8011db8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d003      	beq.n	8011dfc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011df4:	2100      	movs	r1, #0
 8011df6:	6938      	ldr	r0, [r7, #16]
 8011df8:	f7fe ffaa 	bl	8010d50 <tcp_abandon>
  }
}
 8011dfc:	bf00      	nop
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	0801c318 	.word	0x0801c318
 8011e08:	0801c8a4 	.word	0x0801c8a4
 8011e0c:	0801c35c 	.word	0x0801c35c
 8011e10:	2004f590 	.word	0x2004f590
 8011e14:	2004f584 	.word	0x2004f584

08011e18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011e22:	2300      	movs	r3, #0
 8011e24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e26:	4b12      	ldr	r3, [pc, #72]	; (8011e70 <tcp_kill_timewait+0x58>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	e012      	b.n	8011e54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011e2e:	4b11      	ldr	r3, [pc, #68]	; (8011e74 <tcp_kill_timewait+0x5c>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	6a1b      	ldr	r3, [r3, #32]
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d807      	bhi.n	8011e4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011e3e:	4b0d      	ldr	r3, [pc, #52]	; (8011e74 <tcp_kill_timewait+0x5c>)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	6a1b      	ldr	r3, [r3, #32]
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	60fb      	str	r3, [r7, #12]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1e9      	bne.n	8011e2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d002      	beq.n	8011e66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011e60:	68b8      	ldr	r0, [r7, #8]
 8011e62:	f7ff f833 	bl	8010ecc <tcp_abort>
  }
}
 8011e66:	bf00      	nop
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	2004f594 	.word	0x2004f594
 8011e74:	2004f584 	.word	0x2004f584

08011e78 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011e7e:	4b10      	ldr	r3, [pc, #64]	; (8011ec0 <tcp_handle_closepend+0x48>)
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011e84:	e014      	b.n	8011eb0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	8b5b      	ldrh	r3, [r3, #26]
 8011e90:	f003 0308 	and.w	r3, r3, #8
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d009      	beq.n	8011eac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	8b5b      	ldrh	r3, [r3, #26]
 8011e9c:	f023 0308 	bic.w	r3, r3, #8
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7fe fe60 	bl	8010b6c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1e7      	bne.n	8011e86 <tcp_handle_closepend+0xe>
  }
}
 8011eb6:	bf00      	nop
 8011eb8:	bf00      	nop
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	2004f590 	.word	0x2004f590

08011ec4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ece:	2001      	movs	r0, #1
 8011ed0:	f7fd faf2 	bl	800f4b8 <memp_malloc>
 8011ed4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d126      	bne.n	8011f2a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011edc:	f7ff ffcc 	bl	8011e78 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011ee0:	f7ff ff9a 	bl	8011e18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ee4:	2001      	movs	r0, #1
 8011ee6:	f7fd fae7 	bl	800f4b8 <memp_malloc>
 8011eea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d11b      	bne.n	8011f2a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011ef2:	2009      	movs	r0, #9
 8011ef4:	f7ff ff46 	bl	8011d84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011ef8:	2001      	movs	r0, #1
 8011efa:	f7fd fadd 	bl	800f4b8 <memp_malloc>
 8011efe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d111      	bne.n	8011f2a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011f06:	2008      	movs	r0, #8
 8011f08:	f7ff ff3c 	bl	8011d84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f0c:	2001      	movs	r0, #1
 8011f0e:	f7fd fad3 	bl	800f4b8 <memp_malloc>
 8011f12:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d107      	bne.n	8011f2a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011f1a:	79fb      	ldrb	r3, [r7, #7]
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f7ff fee3 	bl	8011ce8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f22:	2001      	movs	r0, #1
 8011f24:	f7fd fac8 	bl	800f4b8 <memp_malloc>
 8011f28:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d03f      	beq.n	8011fb0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011f30:	229c      	movs	r2, #156	; 0x9c
 8011f32:	2100      	movs	r1, #0
 8011f34:	68f8      	ldr	r0, [r7, #12]
 8011f36:	f007 fee8 	bl	8019d0a <memset>
    pcb->prio = prio;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	79fa      	ldrb	r2, [r7, #7]
 8011f3e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011f46:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8011f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	22ff      	movs	r2, #255	; 0xff
 8011f5e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011f66:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2206      	movs	r2, #6
 8011f6c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2206      	movs	r2, #6
 8011f74:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f7c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	2201      	movs	r2, #1
 8011f82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8011f86:	4b0d      	ldr	r3, [pc, #52]	; (8011fbc <tcp_alloc+0xf8>)
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011f8e:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <tcp_alloc+0xfc>)
 8011f90:	781a      	ldrb	r2, [r3, #0]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011f9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	4a08      	ldr	r2, [pc, #32]	; (8011fc4 <tcp_alloc+0x100>)
 8011fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	4a07      	ldr	r2, [pc, #28]	; (8011fc8 <tcp_alloc+0x104>)
 8011fac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011fb0:	68fb      	ldr	r3, [r7, #12]
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3710      	adds	r7, #16
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	bd80      	pop	{r7, pc}
 8011fba:	bf00      	nop
 8011fbc:	2004f584 	.word	0x2004f584
 8011fc0:	2004f59a 	.word	0x2004f59a
 8011fc4:	08011c7d 	.word	0x08011c7d
 8011fc8:	006ddd00 	.word	0x006ddd00

08011fcc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b084      	sub	sp, #16
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8011fd6:	2040      	movs	r0, #64	; 0x40
 8011fd8:	f7ff ff74 	bl	8011ec4 <tcp_alloc>
 8011fdc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011fde:	68fb      	ldr	r3, [r7, #12]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3710      	adds	r7, #16
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d002      	beq.n	8011ffe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	683a      	ldr	r2, [r7, #0]
 8011ffc:	611a      	str	r2, [r3, #16]
  }
}
 8011ffe:	bf00      	nop
 8012000:	370c      	adds	r7, #12
 8012002:	46bd      	mov	sp, r7
 8012004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012008:	4770      	bx	lr
	...

0801200c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	b082      	sub	sp, #8
 8012010:	af00      	add	r7, sp, #0
 8012012:	6078      	str	r0, [r7, #4]
 8012014:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00e      	beq.n	801203a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	7d1b      	ldrb	r3, [r3, #20]
 8012020:	2b01      	cmp	r3, #1
 8012022:	d106      	bne.n	8012032 <tcp_recv+0x26>
 8012024:	4b07      	ldr	r3, [pc, #28]	; (8012044 <tcp_recv+0x38>)
 8012026:	f240 72df 	movw	r2, #2015	; 0x7df
 801202a:	4907      	ldr	r1, [pc, #28]	; (8012048 <tcp_recv+0x3c>)
 801202c:	4807      	ldr	r0, [pc, #28]	; (801204c <tcp_recv+0x40>)
 801202e:	f007 ff09 	bl	8019e44 <iprintf>
    pcb->recv = recv;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	683a      	ldr	r2, [r7, #0]
 8012036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801203a:	bf00      	nop
 801203c:	3708      	adds	r7, #8
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	0801c318 	.word	0x0801c318
 8012048:	0801c8b4 	.word	0x0801c8b4
 801204c:	0801c35c 	.word	0x0801c35c

08012050 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00e      	beq.n	801207e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	7d1b      	ldrb	r3, [r3, #20]
 8012064:	2b01      	cmp	r3, #1
 8012066:	d106      	bne.n	8012076 <tcp_sent+0x26>
 8012068:	4b07      	ldr	r3, [pc, #28]	; (8012088 <tcp_sent+0x38>)
 801206a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801206e:	4907      	ldr	r1, [pc, #28]	; (801208c <tcp_sent+0x3c>)
 8012070:	4807      	ldr	r0, [pc, #28]	; (8012090 <tcp_sent+0x40>)
 8012072:	f007 fee7 	bl	8019e44 <iprintf>
    pcb->sent = sent;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	683a      	ldr	r2, [r7, #0]
 801207a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801207e:	bf00      	nop
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	0801c318 	.word	0x0801c318
 801208c:	0801c8dc 	.word	0x0801c8dc
 8012090:	0801c35c 	.word	0x0801c35c

08012094 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b082      	sub	sp, #8
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d00e      	beq.n	80120c2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	7d1b      	ldrb	r3, [r3, #20]
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	d106      	bne.n	80120ba <tcp_err+0x26>
 80120ac:	4b07      	ldr	r3, [pc, #28]	; (80120cc <tcp_err+0x38>)
 80120ae:	f640 020d 	movw	r2, #2061	; 0x80d
 80120b2:	4907      	ldr	r1, [pc, #28]	; (80120d0 <tcp_err+0x3c>)
 80120b4:	4807      	ldr	r0, [pc, #28]	; (80120d4 <tcp_err+0x40>)
 80120b6:	f007 fec5 	bl	8019e44 <iprintf>
    pcb->errf = err;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	683a      	ldr	r2, [r7, #0]
 80120be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80120c2:	bf00      	nop
 80120c4:	3708      	adds	r7, #8
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	0801c318 	.word	0x0801c318
 80120d0:	0801c904 	.word	0x0801c904
 80120d4:	0801c35c 	.word	0x0801c35c

080120d8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80120d8:	b480      	push	{r7}
 80120da:	b085      	sub	sp, #20
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d008      	beq.n	80120fa <tcp_accept+0x22>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	7d1b      	ldrb	r3, [r3, #20]
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d104      	bne.n	80120fa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	619a      	str	r2, [r3, #24]
  }
}
 80120fa:	bf00      	nop
 80120fc:	3714      	adds	r7, #20
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr
	...

08012108 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	60f8      	str	r0, [r7, #12]
 8012110:	60b9      	str	r1, [r7, #8]
 8012112:	4613      	mov	r3, r2
 8012114:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d107      	bne.n	801212c <tcp_poll+0x24>
 801211c:	4b0e      	ldr	r3, [pc, #56]	; (8012158 <tcp_poll+0x50>)
 801211e:	f640 023d 	movw	r2, #2109	; 0x83d
 8012122:	490e      	ldr	r1, [pc, #56]	; (801215c <tcp_poll+0x54>)
 8012124:	480e      	ldr	r0, [pc, #56]	; (8012160 <tcp_poll+0x58>)
 8012126:	f007 fe8d 	bl	8019e44 <iprintf>
 801212a:	e011      	b.n	8012150 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	7d1b      	ldrb	r3, [r3, #20]
 8012130:	2b01      	cmp	r3, #1
 8012132:	d106      	bne.n	8012142 <tcp_poll+0x3a>
 8012134:	4b08      	ldr	r3, [pc, #32]	; (8012158 <tcp_poll+0x50>)
 8012136:	f640 023e 	movw	r2, #2110	; 0x83e
 801213a:	490a      	ldr	r1, [pc, #40]	; (8012164 <tcp_poll+0x5c>)
 801213c:	4808      	ldr	r0, [pc, #32]	; (8012160 <tcp_poll+0x58>)
 801213e:	f007 fe81 	bl	8019e44 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	68ba      	ldr	r2, [r7, #8]
 8012146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	79fa      	ldrb	r2, [r7, #7]
 801214e:	775a      	strb	r2, [r3, #29]
}
 8012150:	3710      	adds	r7, #16
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}
 8012156:	bf00      	nop
 8012158:	0801c318 	.word	0x0801c318
 801215c:	0801c92c 	.word	0x0801c92c
 8012160:	0801c35c 	.word	0x0801c35c
 8012164:	0801c944 	.word	0x0801c944

08012168 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d107      	bne.n	8012186 <tcp_pcb_purge+0x1e>
 8012176:	4b21      	ldr	r3, [pc, #132]	; (80121fc <tcp_pcb_purge+0x94>)
 8012178:	f640 0251 	movw	r2, #2129	; 0x851
 801217c:	4920      	ldr	r1, [pc, #128]	; (8012200 <tcp_pcb_purge+0x98>)
 801217e:	4821      	ldr	r0, [pc, #132]	; (8012204 <tcp_pcb_purge+0x9c>)
 8012180:	f007 fe60 	bl	8019e44 <iprintf>
 8012184:	e037      	b.n	80121f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	7d1b      	ldrb	r3, [r3, #20]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d033      	beq.n	80121f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012192:	2b0a      	cmp	r3, #10
 8012194:	d02f      	beq.n	80121f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801219a:	2b01      	cmp	r3, #1
 801219c:	d02b      	beq.n	80121f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d007      	beq.n	80121b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80121aa:	4618      	mov	r0, r3
 80121ac:	f7fe f89e 	bl	80102ec <pbuf_free>
      pcb->refused_data = NULL;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	2200      	movs	r2, #0
 80121b4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80121be:	6878      	ldr	r0, [r7, #4]
 80121c0:	f000 f986 	bl	80124d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80121ca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7ff fcf9 	bl	8011bc8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121da:	4618      	mov	r0, r3
 80121dc:	f7ff fcf4 	bl	8011bc8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	2200      	movs	r2, #0
 80121e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80121f6:	3708      	adds	r7, #8
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd80      	pop	{r7, pc}
 80121fc:	0801c318 	.word	0x0801c318
 8012200:	0801c964 	.word	0x0801c964
 8012204:	0801c35c 	.word	0x0801c35c

08012208 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b084      	sub	sp, #16
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
 8012210:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d106      	bne.n	8012226 <tcp_pcb_remove+0x1e>
 8012218:	4b3e      	ldr	r3, [pc, #248]	; (8012314 <tcp_pcb_remove+0x10c>)
 801221a:	f640 0283 	movw	r2, #2179	; 0x883
 801221e:	493e      	ldr	r1, [pc, #248]	; (8012318 <tcp_pcb_remove+0x110>)
 8012220:	483e      	ldr	r0, [pc, #248]	; (801231c <tcp_pcb_remove+0x114>)
 8012222:	f007 fe0f 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d106      	bne.n	801223a <tcp_pcb_remove+0x32>
 801222c:	4b39      	ldr	r3, [pc, #228]	; (8012314 <tcp_pcb_remove+0x10c>)
 801222e:	f640 0284 	movw	r2, #2180	; 0x884
 8012232:	493b      	ldr	r1, [pc, #236]	; (8012320 <tcp_pcb_remove+0x118>)
 8012234:	4839      	ldr	r0, [pc, #228]	; (801231c <tcp_pcb_remove+0x114>)
 8012236:	f007 fe05 	bl	8019e44 <iprintf>

  TCP_RMV(pcblist, pcb);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	683a      	ldr	r2, [r7, #0]
 8012240:	429a      	cmp	r2, r3
 8012242:	d105      	bne.n	8012250 <tcp_pcb_remove+0x48>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68da      	ldr	r2, [r3, #12]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	e013      	b.n	8012278 <tcp_pcb_remove+0x70>
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	60fb      	str	r3, [r7, #12]
 8012256:	e00c      	b.n	8012272 <tcp_pcb_remove+0x6a>
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	683a      	ldr	r2, [r7, #0]
 801225e:	429a      	cmp	r2, r3
 8012260:	d104      	bne.n	801226c <tcp_pcb_remove+0x64>
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	68da      	ldr	r2, [r3, #12]
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	60da      	str	r2, [r3, #12]
 801226a:	e005      	b.n	8012278 <tcp_pcb_remove+0x70>
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	68db      	ldr	r3, [r3, #12]
 8012270:	60fb      	str	r3, [r7, #12]
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d1ef      	bne.n	8012258 <tcp_pcb_remove+0x50>
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	2200      	movs	r2, #0
 801227c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801227e:	6838      	ldr	r0, [r7, #0]
 8012280:	f7ff ff72 	bl	8012168 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	7d1b      	ldrb	r3, [r3, #20]
 8012288:	2b0a      	cmp	r3, #10
 801228a:	d013      	beq.n	80122b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801228c:	683b      	ldr	r3, [r7, #0]
 801228e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012290:	2b01      	cmp	r3, #1
 8012292:	d00f      	beq.n	80122b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	8b5b      	ldrh	r3, [r3, #26]
 8012298:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801229c:	2b00      	cmp	r3, #0
 801229e:	d009      	beq.n	80122b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	8b5b      	ldrh	r3, [r3, #26]
 80122a4:	f043 0302 	orr.w	r3, r3, #2
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80122ae:	6838      	ldr	r0, [r7, #0]
 80122b0:	f003 fbc6 	bl	8015a40 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	7d1b      	ldrb	r3, [r3, #20]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d020      	beq.n	80122fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80122bc:	683b      	ldr	r3, [r7, #0]
 80122be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d006      	beq.n	80122d2 <tcp_pcb_remove+0xca>
 80122c4:	4b13      	ldr	r3, [pc, #76]	; (8012314 <tcp_pcb_remove+0x10c>)
 80122c6:	f640 0293 	movw	r2, #2195	; 0x893
 80122ca:	4916      	ldr	r1, [pc, #88]	; (8012324 <tcp_pcb_remove+0x11c>)
 80122cc:	4813      	ldr	r0, [pc, #76]	; (801231c <tcp_pcb_remove+0x114>)
 80122ce:	f007 fdb9 	bl	8019e44 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d006      	beq.n	80122e8 <tcp_pcb_remove+0xe0>
 80122da:	4b0e      	ldr	r3, [pc, #56]	; (8012314 <tcp_pcb_remove+0x10c>)
 80122dc:	f640 0294 	movw	r2, #2196	; 0x894
 80122e0:	4911      	ldr	r1, [pc, #68]	; (8012328 <tcp_pcb_remove+0x120>)
 80122e2:	480e      	ldr	r0, [pc, #56]	; (801231c <tcp_pcb_remove+0x114>)
 80122e4:	f007 fdae 	bl	8019e44 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d006      	beq.n	80122fe <tcp_pcb_remove+0xf6>
 80122f0:	4b08      	ldr	r3, [pc, #32]	; (8012314 <tcp_pcb_remove+0x10c>)
 80122f2:	f640 0296 	movw	r2, #2198	; 0x896
 80122f6:	490d      	ldr	r1, [pc, #52]	; (801232c <tcp_pcb_remove+0x124>)
 80122f8:	4808      	ldr	r0, [pc, #32]	; (801231c <tcp_pcb_remove+0x114>)
 80122fa:	f007 fda3 	bl	8019e44 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	2200      	movs	r2, #0
 8012302:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2200      	movs	r2, #0
 8012308:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801230a:	bf00      	nop
 801230c:	3710      	adds	r7, #16
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	0801c318 	.word	0x0801c318
 8012318:	0801c980 	.word	0x0801c980
 801231c:	0801c35c 	.word	0x0801c35c
 8012320:	0801c99c 	.word	0x0801c99c
 8012324:	0801c9bc 	.word	0x0801c9bc
 8012328:	0801c9d4 	.word	0x0801c9d4
 801232c:	0801c9f0 	.word	0x0801c9f0

08012330 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_next_iss+0x1c>
 801233e:	4b0a      	ldr	r3, [pc, #40]	; (8012368 <tcp_next_iss+0x38>)
 8012340:	f640 02af 	movw	r2, #2223	; 0x8af
 8012344:	4909      	ldr	r1, [pc, #36]	; (801236c <tcp_next_iss+0x3c>)
 8012346:	480a      	ldr	r0, [pc, #40]	; (8012370 <tcp_next_iss+0x40>)
 8012348:	f007 fd7c 	bl	8019e44 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801234c:	4b09      	ldr	r3, [pc, #36]	; (8012374 <tcp_next_iss+0x44>)
 801234e:	681a      	ldr	r2, [r3, #0]
 8012350:	4b09      	ldr	r3, [pc, #36]	; (8012378 <tcp_next_iss+0x48>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4413      	add	r3, r2
 8012356:	4a07      	ldr	r2, [pc, #28]	; (8012374 <tcp_next_iss+0x44>)
 8012358:	6013      	str	r3, [r2, #0]
  return iss;
 801235a:	4b06      	ldr	r3, [pc, #24]	; (8012374 <tcp_next_iss+0x44>)
 801235c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801235e:	4618      	mov	r0, r3
 8012360:	3708      	adds	r7, #8
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}
 8012366:	bf00      	nop
 8012368:	0801c318 	.word	0x0801c318
 801236c:	0801ca08 	.word	0x0801ca08
 8012370:	0801c35c 	.word	0x0801c35c
 8012374:	20001a54 	.word	0x20001a54
 8012378:	2004f584 	.word	0x2004f584

0801237c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b086      	sub	sp, #24
 8012380:	af00      	add	r7, sp, #0
 8012382:	4603      	mov	r3, r0
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
 8012388:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d106      	bne.n	801239e <tcp_eff_send_mss_netif+0x22>
 8012390:	4b14      	ldr	r3, [pc, #80]	; (80123e4 <tcp_eff_send_mss_netif+0x68>)
 8012392:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012396:	4914      	ldr	r1, [pc, #80]	; (80123e8 <tcp_eff_send_mss_netif+0x6c>)
 8012398:	4814      	ldr	r0, [pc, #80]	; (80123ec <tcp_eff_send_mss_netif+0x70>)
 801239a:	f007 fd53 	bl	8019e44 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d101      	bne.n	80123a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80123a4:	89fb      	ldrh	r3, [r7, #14]
 80123a6:	e019      	b.n	80123dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80123ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80123ae:	8afb      	ldrh	r3, [r7, #22]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d012      	beq.n	80123da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80123b4:	2328      	movs	r3, #40	; 0x28
 80123b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80123b8:	8afa      	ldrh	r2, [r7, #22]
 80123ba:	8abb      	ldrh	r3, [r7, #20]
 80123bc:	429a      	cmp	r2, r3
 80123be:	d904      	bls.n	80123ca <tcp_eff_send_mss_netif+0x4e>
 80123c0:	8afa      	ldrh	r2, [r7, #22]
 80123c2:	8abb      	ldrh	r3, [r7, #20]
 80123c4:	1ad3      	subs	r3, r2, r3
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	e000      	b.n	80123cc <tcp_eff_send_mss_netif+0x50>
 80123ca:	2300      	movs	r3, #0
 80123cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80123ce:	8a7a      	ldrh	r2, [r7, #18]
 80123d0:	89fb      	ldrh	r3, [r7, #14]
 80123d2:	4293      	cmp	r3, r2
 80123d4:	bf28      	it	cs
 80123d6:	4613      	movcs	r3, r2
 80123d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80123da:	89fb      	ldrh	r3, [r7, #14]
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3718      	adds	r7, #24
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}
 80123e4:	0801c318 	.word	0x0801c318
 80123e8:	0801ca24 	.word	0x0801ca24
 80123ec:	0801c35c 	.word	0x0801c35c

080123f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b084      	sub	sp, #16
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d119      	bne.n	8012438 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012404:	4b10      	ldr	r3, [pc, #64]	; (8012448 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012406:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801240a:	4910      	ldr	r1, [pc, #64]	; (801244c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801240c:	4810      	ldr	r0, [pc, #64]	; (8012450 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801240e:	f007 fd19 	bl	8019e44 <iprintf>

  while (pcb != NULL) {
 8012412:	e011      	b.n	8012438 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681a      	ldr	r2, [r3, #0]
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	429a      	cmp	r2, r3
 801241e:	d108      	bne.n	8012432 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	68db      	ldr	r3, [r3, #12]
 8012424:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012426:	68f8      	ldr	r0, [r7, #12]
 8012428:	f7fe fd50 	bl	8010ecc <tcp_abort>
      pcb = next;
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	60fb      	str	r3, [r7, #12]
 8012430:	e002      	b.n	8012438 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d1ea      	bne.n	8012414 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801243e:	bf00      	nop
 8012440:	bf00      	nop
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}
 8012448:	0801c318 	.word	0x0801c318
 801244c:	0801ca4c 	.word	0x0801ca4c
 8012450:	0801c35c 	.word	0x0801c35c

08012454 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d02a      	beq.n	80124ba <tcp_netif_ip_addr_changed+0x66>
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d026      	beq.n	80124ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801246c:	4b15      	ldr	r3, [pc, #84]	; (80124c4 <tcp_netif_ip_addr_changed+0x70>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4619      	mov	r1, r3
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f7ff ffbc 	bl	80123f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012478:	4b13      	ldr	r3, [pc, #76]	; (80124c8 <tcp_netif_ip_addr_changed+0x74>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4619      	mov	r1, r3
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f7ff ffb6 	bl	80123f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012484:	683b      	ldr	r3, [r7, #0]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d017      	beq.n	80124ba <tcp_netif_ip_addr_changed+0x66>
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d013      	beq.n	80124ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012492:	4b0e      	ldr	r3, [pc, #56]	; (80124cc <tcp_netif_ip_addr_changed+0x78>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	60fb      	str	r3, [r7, #12]
 8012498:	e00c      	b.n	80124b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d103      	bne.n	80124ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	68db      	ldr	r3, [r3, #12]
 80124b2:	60fb      	str	r3, [r7, #12]
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1ef      	bne.n	801249a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80124ba:	bf00      	nop
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}
 80124c2:	bf00      	nop
 80124c4:	2004f590 	.word	0x2004f590
 80124c8:	2004f588 	.word	0x2004f588
 80124cc:	2004f58c 	.word	0x2004f58c

080124d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d007      	beq.n	80124f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7ff fb6f 	bl	8011bc8 <tcp_segs_free>
    pcb->ooseq = NULL;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2200      	movs	r2, #0
 80124ee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80124f0:	bf00      	nop
 80124f2:	3708      	adds	r7, #8
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80124f8:	b590      	push	{r4, r7, lr}
 80124fa:	b08d      	sub	sp, #52	; 0x34
 80124fc:	af04      	add	r7, sp, #16
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d105      	bne.n	8012514 <tcp_input+0x1c>
 8012508:	4b9b      	ldr	r3, [pc, #620]	; (8012778 <tcp_input+0x280>)
 801250a:	2283      	movs	r2, #131	; 0x83
 801250c:	499b      	ldr	r1, [pc, #620]	; (801277c <tcp_input+0x284>)
 801250e:	489c      	ldr	r0, [pc, #624]	; (8012780 <tcp_input+0x288>)
 8012510:	f007 fc98 	bl	8019e44 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	4a9a      	ldr	r2, [pc, #616]	; (8012784 <tcp_input+0x28c>)
 801251a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	895b      	ldrh	r3, [r3, #10]
 8012520:	2b13      	cmp	r3, #19
 8012522:	f240 83d1 	bls.w	8012cc8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012526:	4b98      	ldr	r3, [pc, #608]	; (8012788 <tcp_input+0x290>)
 8012528:	695b      	ldr	r3, [r3, #20]
 801252a:	4a97      	ldr	r2, [pc, #604]	; (8012788 <tcp_input+0x290>)
 801252c:	6812      	ldr	r2, [r2, #0]
 801252e:	4611      	mov	r1, r2
 8012530:	4618      	mov	r0, r3
 8012532:	f006 f9a3 	bl	801887c <ip4_addr_isbroadcast_u32>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	f040 83c7 	bne.w	8012ccc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801253e:	4b92      	ldr	r3, [pc, #584]	; (8012788 <tcp_input+0x290>)
 8012540:	695b      	ldr	r3, [r3, #20]
 8012542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012546:	2be0      	cmp	r3, #224	; 0xe0
 8012548:	f000 83c0 	beq.w	8012ccc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801254c:	4b8d      	ldr	r3, [pc, #564]	; (8012784 <tcp_input+0x28c>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	899b      	ldrh	r3, [r3, #12]
 8012552:	b29b      	uxth	r3, r3
 8012554:	4618      	mov	r0, r3
 8012556:	f7fc fad7 	bl	800eb08 <lwip_htons>
 801255a:	4603      	mov	r3, r0
 801255c:	0b1b      	lsrs	r3, r3, #12
 801255e:	b29b      	uxth	r3, r3
 8012560:	b2db      	uxtb	r3, r3
 8012562:	009b      	lsls	r3, r3, #2
 8012564:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012566:	7cbb      	ldrb	r3, [r7, #18]
 8012568:	2b13      	cmp	r3, #19
 801256a:	f240 83b1 	bls.w	8012cd0 <tcp_input+0x7d8>
 801256e:	7cbb      	ldrb	r3, [r7, #18]
 8012570:	b29a      	uxth	r2, r3
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	891b      	ldrh	r3, [r3, #8]
 8012576:	429a      	cmp	r2, r3
 8012578:	f200 83aa 	bhi.w	8012cd0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801257c:	7cbb      	ldrb	r3, [r7, #18]
 801257e:	b29b      	uxth	r3, r3
 8012580:	3b14      	subs	r3, #20
 8012582:	b29a      	uxth	r2, r3
 8012584:	4b81      	ldr	r3, [pc, #516]	; (801278c <tcp_input+0x294>)
 8012586:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012588:	4b81      	ldr	r3, [pc, #516]	; (8012790 <tcp_input+0x298>)
 801258a:	2200      	movs	r2, #0
 801258c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	895a      	ldrh	r2, [r3, #10]
 8012592:	7cbb      	ldrb	r3, [r7, #18]
 8012594:	b29b      	uxth	r3, r3
 8012596:	429a      	cmp	r2, r3
 8012598:	d309      	bcc.n	80125ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801259a:	4b7c      	ldr	r3, [pc, #496]	; (801278c <tcp_input+0x294>)
 801259c:	881a      	ldrh	r2, [r3, #0]
 801259e:	4b7d      	ldr	r3, [pc, #500]	; (8012794 <tcp_input+0x29c>)
 80125a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80125a2:	7cbb      	ldrb	r3, [r7, #18]
 80125a4:	4619      	mov	r1, r3
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7fd fe1a 	bl	80101e0 <pbuf_remove_header>
 80125ac:	e04e      	b.n	801264c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d105      	bne.n	80125c2 <tcp_input+0xca>
 80125b6:	4b70      	ldr	r3, [pc, #448]	; (8012778 <tcp_input+0x280>)
 80125b8:	22c2      	movs	r2, #194	; 0xc2
 80125ba:	4977      	ldr	r1, [pc, #476]	; (8012798 <tcp_input+0x2a0>)
 80125bc:	4870      	ldr	r0, [pc, #448]	; (8012780 <tcp_input+0x288>)
 80125be:	f007 fc41 	bl	8019e44 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80125c2:	2114      	movs	r1, #20
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7fd fe0b 	bl	80101e0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	895a      	ldrh	r2, [r3, #10]
 80125ce:	4b71      	ldr	r3, [pc, #452]	; (8012794 <tcp_input+0x29c>)
 80125d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80125d2:	4b6e      	ldr	r3, [pc, #440]	; (801278c <tcp_input+0x294>)
 80125d4:	881a      	ldrh	r2, [r3, #0]
 80125d6:	4b6f      	ldr	r3, [pc, #444]	; (8012794 <tcp_input+0x29c>)
 80125d8:	881b      	ldrh	r3, [r3, #0]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80125de:	4b6d      	ldr	r3, [pc, #436]	; (8012794 <tcp_input+0x29c>)
 80125e0:	881b      	ldrh	r3, [r3, #0]
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f7fd fdfb 	bl	80101e0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	895b      	ldrh	r3, [r3, #10]
 80125f0:	8a3a      	ldrh	r2, [r7, #16]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	f200 836e 	bhi.w	8012cd4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	4a64      	ldr	r2, [pc, #400]	; (8012790 <tcp_input+0x298>)
 8012600:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	8a3a      	ldrh	r2, [r7, #16]
 8012608:	4611      	mov	r1, r2
 801260a:	4618      	mov	r0, r3
 801260c:	f7fd fde8 	bl	80101e0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	891a      	ldrh	r2, [r3, #8]
 8012614:	8a3b      	ldrh	r3, [r7, #16]
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	b29a      	uxth	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	895b      	ldrh	r3, [r3, #10]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d005      	beq.n	8012632 <tcp_input+0x13a>
 8012626:	4b54      	ldr	r3, [pc, #336]	; (8012778 <tcp_input+0x280>)
 8012628:	22df      	movs	r2, #223	; 0xdf
 801262a:	495c      	ldr	r1, [pc, #368]	; (801279c <tcp_input+0x2a4>)
 801262c:	4854      	ldr	r0, [pc, #336]	; (8012780 <tcp_input+0x288>)
 801262e:	f007 fc09 	bl	8019e44 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	891a      	ldrh	r2, [r3, #8]
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	891b      	ldrh	r3, [r3, #8]
 801263c:	429a      	cmp	r2, r3
 801263e:	d005      	beq.n	801264c <tcp_input+0x154>
 8012640:	4b4d      	ldr	r3, [pc, #308]	; (8012778 <tcp_input+0x280>)
 8012642:	22e0      	movs	r2, #224	; 0xe0
 8012644:	4956      	ldr	r1, [pc, #344]	; (80127a0 <tcp_input+0x2a8>)
 8012646:	484e      	ldr	r0, [pc, #312]	; (8012780 <tcp_input+0x288>)
 8012648:	f007 fbfc 	bl	8019e44 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801264c:	4b4d      	ldr	r3, [pc, #308]	; (8012784 <tcp_input+0x28c>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	881b      	ldrh	r3, [r3, #0]
 8012652:	b29b      	uxth	r3, r3
 8012654:	4a4b      	ldr	r2, [pc, #300]	; (8012784 <tcp_input+0x28c>)
 8012656:	6814      	ldr	r4, [r2, #0]
 8012658:	4618      	mov	r0, r3
 801265a:	f7fc fa55 	bl	800eb08 <lwip_htons>
 801265e:	4603      	mov	r3, r0
 8012660:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012662:	4b48      	ldr	r3, [pc, #288]	; (8012784 <tcp_input+0x28c>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	885b      	ldrh	r3, [r3, #2]
 8012668:	b29b      	uxth	r3, r3
 801266a:	4a46      	ldr	r2, [pc, #280]	; (8012784 <tcp_input+0x28c>)
 801266c:	6814      	ldr	r4, [r2, #0]
 801266e:	4618      	mov	r0, r3
 8012670:	f7fc fa4a 	bl	800eb08 <lwip_htons>
 8012674:	4603      	mov	r3, r0
 8012676:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012678:	4b42      	ldr	r3, [pc, #264]	; (8012784 <tcp_input+0x28c>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	4a41      	ldr	r2, [pc, #260]	; (8012784 <tcp_input+0x28c>)
 8012680:	6814      	ldr	r4, [r2, #0]
 8012682:	4618      	mov	r0, r3
 8012684:	f7fc fa55 	bl	800eb32 <lwip_htonl>
 8012688:	4603      	mov	r3, r0
 801268a:	6063      	str	r3, [r4, #4]
 801268c:	6863      	ldr	r3, [r4, #4]
 801268e:	4a45      	ldr	r2, [pc, #276]	; (80127a4 <tcp_input+0x2ac>)
 8012690:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012692:	4b3c      	ldr	r3, [pc, #240]	; (8012784 <tcp_input+0x28c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	4a3a      	ldr	r2, [pc, #232]	; (8012784 <tcp_input+0x28c>)
 801269a:	6814      	ldr	r4, [r2, #0]
 801269c:	4618      	mov	r0, r3
 801269e:	f7fc fa48 	bl	800eb32 <lwip_htonl>
 80126a2:	4603      	mov	r3, r0
 80126a4:	60a3      	str	r3, [r4, #8]
 80126a6:	68a3      	ldr	r3, [r4, #8]
 80126a8:	4a3f      	ldr	r2, [pc, #252]	; (80127a8 <tcp_input+0x2b0>)
 80126aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80126ac:	4b35      	ldr	r3, [pc, #212]	; (8012784 <tcp_input+0x28c>)
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	89db      	ldrh	r3, [r3, #14]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	4a33      	ldr	r2, [pc, #204]	; (8012784 <tcp_input+0x28c>)
 80126b6:	6814      	ldr	r4, [r2, #0]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fc fa25 	bl	800eb08 <lwip_htons>
 80126be:	4603      	mov	r3, r0
 80126c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80126c2:	4b30      	ldr	r3, [pc, #192]	; (8012784 <tcp_input+0x28c>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	899b      	ldrh	r3, [r3, #12]
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fc fa1c 	bl	800eb08 <lwip_htons>
 80126d0:	4603      	mov	r3, r0
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126d8:	b2da      	uxtb	r2, r3
 80126da:	4b34      	ldr	r3, [pc, #208]	; (80127ac <tcp_input+0x2b4>)
 80126dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	891a      	ldrh	r2, [r3, #8]
 80126e2:	4b33      	ldr	r3, [pc, #204]	; (80127b0 <tcp_input+0x2b8>)
 80126e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80126e6:	4b31      	ldr	r3, [pc, #196]	; (80127ac <tcp_input+0x2b4>)
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f003 0303 	and.w	r3, r3, #3
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00c      	beq.n	801270c <tcp_input+0x214>
    tcplen++;
 80126f2:	4b2f      	ldr	r3, [pc, #188]	; (80127b0 <tcp_input+0x2b8>)
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	3301      	adds	r3, #1
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	4b2d      	ldr	r3, [pc, #180]	; (80127b0 <tcp_input+0x2b8>)
 80126fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	891a      	ldrh	r2, [r3, #8]
 8012702:	4b2b      	ldr	r3, [pc, #172]	; (80127b0 <tcp_input+0x2b8>)
 8012704:	881b      	ldrh	r3, [r3, #0]
 8012706:	429a      	cmp	r2, r3
 8012708:	f200 82e6 	bhi.w	8012cd8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801270c:	2300      	movs	r3, #0
 801270e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012710:	4b28      	ldr	r3, [pc, #160]	; (80127b4 <tcp_input+0x2bc>)
 8012712:	681b      	ldr	r3, [r3, #0]
 8012714:	61fb      	str	r3, [r7, #28]
 8012716:	e09d      	b.n	8012854 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012718:	69fb      	ldr	r3, [r7, #28]
 801271a:	7d1b      	ldrb	r3, [r3, #20]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d105      	bne.n	801272c <tcp_input+0x234>
 8012720:	4b15      	ldr	r3, [pc, #84]	; (8012778 <tcp_input+0x280>)
 8012722:	22fb      	movs	r2, #251	; 0xfb
 8012724:	4924      	ldr	r1, [pc, #144]	; (80127b8 <tcp_input+0x2c0>)
 8012726:	4816      	ldr	r0, [pc, #88]	; (8012780 <tcp_input+0x288>)
 8012728:	f007 fb8c 	bl	8019e44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	7d1b      	ldrb	r3, [r3, #20]
 8012730:	2b0a      	cmp	r3, #10
 8012732:	d105      	bne.n	8012740 <tcp_input+0x248>
 8012734:	4b10      	ldr	r3, [pc, #64]	; (8012778 <tcp_input+0x280>)
 8012736:	22fc      	movs	r2, #252	; 0xfc
 8012738:	4920      	ldr	r1, [pc, #128]	; (80127bc <tcp_input+0x2c4>)
 801273a:	4811      	ldr	r0, [pc, #68]	; (8012780 <tcp_input+0x288>)
 801273c:	f007 fb82 	bl	8019e44 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012740:	69fb      	ldr	r3, [r7, #28]
 8012742:	7d1b      	ldrb	r3, [r3, #20]
 8012744:	2b01      	cmp	r3, #1
 8012746:	d105      	bne.n	8012754 <tcp_input+0x25c>
 8012748:	4b0b      	ldr	r3, [pc, #44]	; (8012778 <tcp_input+0x280>)
 801274a:	22fd      	movs	r2, #253	; 0xfd
 801274c:	491c      	ldr	r1, [pc, #112]	; (80127c0 <tcp_input+0x2c8>)
 801274e:	480c      	ldr	r0, [pc, #48]	; (8012780 <tcp_input+0x288>)
 8012750:	f007 fb78 	bl	8019e44 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	7a1b      	ldrb	r3, [r3, #8]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d033      	beq.n	80127c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801275c:	69fb      	ldr	r3, [r7, #28]
 801275e:	7a1a      	ldrb	r2, [r3, #8]
 8012760:	4b09      	ldr	r3, [pc, #36]	; (8012788 <tcp_input+0x290>)
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012768:	3301      	adds	r3, #1
 801276a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801276c:	429a      	cmp	r2, r3
 801276e:	d029      	beq.n	80127c4 <tcp_input+0x2cc>
      prev = pcb;
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	61bb      	str	r3, [r7, #24]
      continue;
 8012774:	e06b      	b.n	801284e <tcp_input+0x356>
 8012776:	bf00      	nop
 8012778:	0801ca80 	.word	0x0801ca80
 801277c:	0801cab4 	.word	0x0801cab4
 8012780:	0801cacc 	.word	0x0801cacc
 8012784:	2004f5ac 	.word	0x2004f5ac
 8012788:	2004b070 	.word	0x2004b070
 801278c:	2004f5b0 	.word	0x2004f5b0
 8012790:	2004f5b4 	.word	0x2004f5b4
 8012794:	2004f5b2 	.word	0x2004f5b2
 8012798:	0801caf4 	.word	0x0801caf4
 801279c:	0801cb04 	.word	0x0801cb04
 80127a0:	0801cb10 	.word	0x0801cb10
 80127a4:	2004f5bc 	.word	0x2004f5bc
 80127a8:	2004f5c0 	.word	0x2004f5c0
 80127ac:	2004f5c8 	.word	0x2004f5c8
 80127b0:	2004f5c6 	.word	0x2004f5c6
 80127b4:	2004f590 	.word	0x2004f590
 80127b8:	0801cb30 	.word	0x0801cb30
 80127bc:	0801cb58 	.word	0x0801cb58
 80127c0:	0801cb84 	.word	0x0801cb84
    }

    if (pcb->remote_port == tcphdr->src &&
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	8b1a      	ldrh	r2, [r3, #24]
 80127c8:	4b72      	ldr	r3, [pc, #456]	; (8012994 <tcp_input+0x49c>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	881b      	ldrh	r3, [r3, #0]
 80127ce:	b29b      	uxth	r3, r3
 80127d0:	429a      	cmp	r2, r3
 80127d2:	d13a      	bne.n	801284a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	8ada      	ldrh	r2, [r3, #22]
 80127d8:	4b6e      	ldr	r3, [pc, #440]	; (8012994 <tcp_input+0x49c>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	885b      	ldrh	r3, [r3, #2]
 80127de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d132      	bne.n	801284a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	685a      	ldr	r2, [r3, #4]
 80127e8:	4b6b      	ldr	r3, [pc, #428]	; (8012998 <tcp_input+0x4a0>)
 80127ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80127ec:	429a      	cmp	r2, r3
 80127ee:	d12c      	bne.n	801284a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	4b68      	ldr	r3, [pc, #416]	; (8012998 <tcp_input+0x4a0>)
 80127f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d126      	bne.n	801284a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80127fc:	69fb      	ldr	r3, [r7, #28]
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	69fa      	ldr	r2, [r7, #28]
 8012802:	429a      	cmp	r2, r3
 8012804:	d106      	bne.n	8012814 <tcp_input+0x31c>
 8012806:	4b65      	ldr	r3, [pc, #404]	; (801299c <tcp_input+0x4a4>)
 8012808:	f240 120d 	movw	r2, #269	; 0x10d
 801280c:	4964      	ldr	r1, [pc, #400]	; (80129a0 <tcp_input+0x4a8>)
 801280e:	4865      	ldr	r0, [pc, #404]	; (80129a4 <tcp_input+0x4ac>)
 8012810:	f007 fb18 	bl	8019e44 <iprintf>
      if (prev != NULL) {
 8012814:	69bb      	ldr	r3, [r7, #24]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00a      	beq.n	8012830 <tcp_input+0x338>
        prev->next = pcb->next;
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	68da      	ldr	r2, [r3, #12]
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012822:	4b61      	ldr	r3, [pc, #388]	; (80129a8 <tcp_input+0x4b0>)
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801282a:	4a5f      	ldr	r2, [pc, #380]	; (80129a8 <tcp_input+0x4b0>)
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	68db      	ldr	r3, [r3, #12]
 8012834:	69fa      	ldr	r2, [r7, #28]
 8012836:	429a      	cmp	r2, r3
 8012838:	d111      	bne.n	801285e <tcp_input+0x366>
 801283a:	4b58      	ldr	r3, [pc, #352]	; (801299c <tcp_input+0x4a4>)
 801283c:	f240 1215 	movw	r2, #277	; 0x115
 8012840:	495a      	ldr	r1, [pc, #360]	; (80129ac <tcp_input+0x4b4>)
 8012842:	4858      	ldr	r0, [pc, #352]	; (80129a4 <tcp_input+0x4ac>)
 8012844:	f007 fafe 	bl	8019e44 <iprintf>
      break;
 8012848:	e009      	b.n	801285e <tcp_input+0x366>
    }
    prev = pcb;
 801284a:	69fb      	ldr	r3, [r7, #28]
 801284c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	61fb      	str	r3, [r7, #28]
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	2b00      	cmp	r3, #0
 8012858:	f47f af5e 	bne.w	8012718 <tcp_input+0x220>
 801285c:	e000      	b.n	8012860 <tcp_input+0x368>
      break;
 801285e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	2b00      	cmp	r3, #0
 8012864:	f040 80aa 	bne.w	80129bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012868:	4b51      	ldr	r3, [pc, #324]	; (80129b0 <tcp_input+0x4b8>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	61fb      	str	r3, [r7, #28]
 801286e:	e03f      	b.n	80128f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012870:	69fb      	ldr	r3, [r7, #28]
 8012872:	7d1b      	ldrb	r3, [r3, #20]
 8012874:	2b0a      	cmp	r3, #10
 8012876:	d006      	beq.n	8012886 <tcp_input+0x38e>
 8012878:	4b48      	ldr	r3, [pc, #288]	; (801299c <tcp_input+0x4a4>)
 801287a:	f240 121f 	movw	r2, #287	; 0x11f
 801287e:	494d      	ldr	r1, [pc, #308]	; (80129b4 <tcp_input+0x4bc>)
 8012880:	4848      	ldr	r0, [pc, #288]	; (80129a4 <tcp_input+0x4ac>)
 8012882:	f007 fadf 	bl	8019e44 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012886:	69fb      	ldr	r3, [r7, #28]
 8012888:	7a1b      	ldrb	r3, [r3, #8]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d009      	beq.n	80128a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	7a1a      	ldrb	r2, [r3, #8]
 8012892:	4b41      	ldr	r3, [pc, #260]	; (8012998 <tcp_input+0x4a0>)
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801289a:	3301      	adds	r3, #1
 801289c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801289e:	429a      	cmp	r2, r3
 80128a0:	d122      	bne.n	80128e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	8b1a      	ldrh	r2, [r3, #24]
 80128a6:	4b3b      	ldr	r3, [pc, #236]	; (8012994 <tcp_input+0x49c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	429a      	cmp	r2, r3
 80128b0:	d11b      	bne.n	80128ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80128b2:	69fb      	ldr	r3, [r7, #28]
 80128b4:	8ada      	ldrh	r2, [r3, #22]
 80128b6:	4b37      	ldr	r3, [pc, #220]	; (8012994 <tcp_input+0x49c>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	885b      	ldrh	r3, [r3, #2]
 80128bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80128be:	429a      	cmp	r2, r3
 80128c0:	d113      	bne.n	80128ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80128c2:	69fb      	ldr	r3, [r7, #28]
 80128c4:	685a      	ldr	r2, [r3, #4]
 80128c6:	4b34      	ldr	r3, [pc, #208]	; (8012998 <tcp_input+0x4a0>)
 80128c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80128ca:	429a      	cmp	r2, r3
 80128cc:	d10d      	bne.n	80128ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80128ce:	69fb      	ldr	r3, [r7, #28]
 80128d0:	681a      	ldr	r2, [r3, #0]
 80128d2:	4b31      	ldr	r3, [pc, #196]	; (8012998 <tcp_input+0x4a0>)
 80128d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d107      	bne.n	80128ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80128da:	69f8      	ldr	r0, [r7, #28]
 80128dc:	f000 fb56 	bl	8012f8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7fd fd03 	bl	80102ec <pbuf_free>
        return;
 80128e6:	e1fd      	b.n	8012ce4 <tcp_input+0x7ec>
        continue;
 80128e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80128ea:	69fb      	ldr	r3, [r7, #28]
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	61fb      	str	r3, [r7, #28]
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d1bc      	bne.n	8012870 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80128f6:	2300      	movs	r3, #0
 80128f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80128fa:	4b2f      	ldr	r3, [pc, #188]	; (80129b8 <tcp_input+0x4c0>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	617b      	str	r3, [r7, #20]
 8012900:	e02a      	b.n	8012958 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	7a1b      	ldrb	r3, [r3, #8]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00c      	beq.n	8012924 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	7a1a      	ldrb	r2, [r3, #8]
 801290e:	4b22      	ldr	r3, [pc, #136]	; (8012998 <tcp_input+0x4a0>)
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012916:	3301      	adds	r3, #1
 8012918:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801291a:	429a      	cmp	r2, r3
 801291c:	d002      	beq.n	8012924 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	61bb      	str	r3, [r7, #24]
        continue;
 8012922:	e016      	b.n	8012952 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	8ada      	ldrh	r2, [r3, #22]
 8012928:	4b1a      	ldr	r3, [pc, #104]	; (8012994 <tcp_input+0x49c>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	885b      	ldrh	r3, [r3, #2]
 801292e:	b29b      	uxth	r3, r3
 8012930:	429a      	cmp	r2, r3
 8012932:	d10c      	bne.n	801294e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	681a      	ldr	r2, [r3, #0]
 8012938:	4b17      	ldr	r3, [pc, #92]	; (8012998 <tcp_input+0x4a0>)
 801293a:	695b      	ldr	r3, [r3, #20]
 801293c:	429a      	cmp	r2, r3
 801293e:	d00f      	beq.n	8012960 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d00d      	beq.n	8012962 <tcp_input+0x46a>
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d009      	beq.n	8012962 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801294e:	697b      	ldr	r3, [r7, #20]
 8012950:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	617b      	str	r3, [r7, #20]
 8012958:	697b      	ldr	r3, [r7, #20]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d1d1      	bne.n	8012902 <tcp_input+0x40a>
 801295e:	e000      	b.n	8012962 <tcp_input+0x46a>
            break;
 8012960:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d029      	beq.n	80129bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012968:	69bb      	ldr	r3, [r7, #24]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d00a      	beq.n	8012984 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801296e:	697b      	ldr	r3, [r7, #20]
 8012970:	68da      	ldr	r2, [r3, #12]
 8012972:	69bb      	ldr	r3, [r7, #24]
 8012974:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012976:	4b10      	ldr	r3, [pc, #64]	; (80129b8 <tcp_input+0x4c0>)
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801297e:	4a0e      	ldr	r2, [pc, #56]	; (80129b8 <tcp_input+0x4c0>)
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012984:	6978      	ldr	r0, [r7, #20]
 8012986:	f000 fa03 	bl	8012d90 <tcp_listen_input>
      }
      pbuf_free(p);
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f7fd fcae 	bl	80102ec <pbuf_free>
      return;
 8012990:	e1a8      	b.n	8012ce4 <tcp_input+0x7ec>
 8012992:	bf00      	nop
 8012994:	2004f5ac 	.word	0x2004f5ac
 8012998:	2004b070 	.word	0x2004b070
 801299c:	0801ca80 	.word	0x0801ca80
 80129a0:	0801cbac 	.word	0x0801cbac
 80129a4:	0801cacc 	.word	0x0801cacc
 80129a8:	2004f590 	.word	0x2004f590
 80129ac:	0801cbd8 	.word	0x0801cbd8
 80129b0:	2004f594 	.word	0x2004f594
 80129b4:	0801cc04 	.word	0x0801cc04
 80129b8:	2004f58c 	.word	0x2004f58c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f000 8158 	beq.w	8012c74 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80129c4:	4b95      	ldr	r3, [pc, #596]	; (8012c1c <tcp_input+0x724>)
 80129c6:	2200      	movs	r2, #0
 80129c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	891a      	ldrh	r2, [r3, #8]
 80129ce:	4b93      	ldr	r3, [pc, #588]	; (8012c1c <tcp_input+0x724>)
 80129d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80129d2:	4a92      	ldr	r2, [pc, #584]	; (8012c1c <tcp_input+0x724>)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80129d8:	4b91      	ldr	r3, [pc, #580]	; (8012c20 <tcp_input+0x728>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	4a8f      	ldr	r2, [pc, #572]	; (8012c1c <tcp_input+0x724>)
 80129de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80129e0:	4b90      	ldr	r3, [pc, #576]	; (8012c24 <tcp_input+0x72c>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80129e6:	4b90      	ldr	r3, [pc, #576]	; (8012c28 <tcp_input+0x730>)
 80129e8:	2200      	movs	r2, #0
 80129ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80129ec:	4b8f      	ldr	r3, [pc, #572]	; (8012c2c <tcp_input+0x734>)
 80129ee:	2200      	movs	r2, #0
 80129f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80129f2:	4b8f      	ldr	r3, [pc, #572]	; (8012c30 <tcp_input+0x738>)
 80129f4:	781b      	ldrb	r3, [r3, #0]
 80129f6:	f003 0308 	and.w	r3, r3, #8
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d006      	beq.n	8012a0c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	7b5b      	ldrb	r3, [r3, #13]
 8012a02:	f043 0301 	orr.w	r3, r3, #1
 8012a06:	b2da      	uxtb	r2, r3
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d017      	beq.n	8012a44 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012a14:	69f8      	ldr	r0, [r7, #28]
 8012a16:	f7ff f85b 	bl	8011ad0 <tcp_process_refused_data>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	f113 0f0d 	cmn.w	r3, #13
 8012a20:	d007      	beq.n	8012a32 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012a22:	69fb      	ldr	r3, [r7, #28]
 8012a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d00c      	beq.n	8012a44 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012a2a:	4b82      	ldr	r3, [pc, #520]	; (8012c34 <tcp_input+0x73c>)
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d008      	beq.n	8012a44 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	f040 80e3 	bne.w	8012c02 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012a3c:	69f8      	ldr	r0, [r7, #28]
 8012a3e:	f003 fe05 	bl	801664c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012a42:	e0de      	b.n	8012c02 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012a44:	4a7c      	ldr	r2, [pc, #496]	; (8012c38 <tcp_input+0x740>)
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012a4a:	69f8      	ldr	r0, [r7, #28]
 8012a4c:	f000 fb18 	bl	8013080 <tcp_process>
 8012a50:	4603      	mov	r3, r0
 8012a52:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012a54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a58:	f113 0f0d 	cmn.w	r3, #13
 8012a5c:	f000 80d3 	beq.w	8012c06 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012a60:	4b71      	ldr	r3, [pc, #452]	; (8012c28 <tcp_input+0x730>)
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	f003 0308 	and.w	r3, r3, #8
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d015      	beq.n	8012a98 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012a6c:	69fb      	ldr	r3, [r7, #28]
 8012a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d008      	beq.n	8012a88 <tcp_input+0x590>
 8012a76:	69fb      	ldr	r3, [r7, #28]
 8012a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a7c:	69fa      	ldr	r2, [r7, #28]
 8012a7e:	6912      	ldr	r2, [r2, #16]
 8012a80:	f06f 010d 	mvn.w	r1, #13
 8012a84:	4610      	mov	r0, r2
 8012a86:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012a88:	69f9      	ldr	r1, [r7, #28]
 8012a8a:	486c      	ldr	r0, [pc, #432]	; (8012c3c <tcp_input+0x744>)
 8012a8c:	f7ff fbbc 	bl	8012208 <tcp_pcb_remove>
        tcp_free(pcb);
 8012a90:	69f8      	ldr	r0, [r7, #28]
 8012a92:	f7fd fed7 	bl	8010844 <tcp_free>
 8012a96:	e0da      	b.n	8012c4e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012a9c:	4b63      	ldr	r3, [pc, #396]	; (8012c2c <tcp_input+0x734>)
 8012a9e:	881b      	ldrh	r3, [r3, #0]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d01d      	beq.n	8012ae0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012aa4:	4b61      	ldr	r3, [pc, #388]	; (8012c2c <tcp_input+0x734>)
 8012aa6:	881b      	ldrh	r3, [r3, #0]
 8012aa8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012aaa:	69fb      	ldr	r3, [r7, #28]
 8012aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00a      	beq.n	8012aca <tcp_input+0x5d2>
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012aba:	69fa      	ldr	r2, [r7, #28]
 8012abc:	6910      	ldr	r0, [r2, #16]
 8012abe:	89fa      	ldrh	r2, [r7, #14]
 8012ac0:	69f9      	ldr	r1, [r7, #28]
 8012ac2:	4798      	blx	r3
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	74fb      	strb	r3, [r7, #19]
 8012ac8:	e001      	b.n	8012ace <tcp_input+0x5d6>
 8012aca:	2300      	movs	r3, #0
 8012acc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012ace:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ad2:	f113 0f0d 	cmn.w	r3, #13
 8012ad6:	f000 8098 	beq.w	8012c0a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012ada:	4b54      	ldr	r3, [pc, #336]	; (8012c2c <tcp_input+0x734>)
 8012adc:	2200      	movs	r2, #0
 8012ade:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012ae0:	69f8      	ldr	r0, [r7, #28]
 8012ae2:	f000 f915 	bl	8012d10 <tcp_input_delayed_close>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	f040 8090 	bne.w	8012c0e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012aee:	4b4d      	ldr	r3, [pc, #308]	; (8012c24 <tcp_input+0x72c>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d041      	beq.n	8012b7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012af6:	69fb      	ldr	r3, [r7, #28]
 8012af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d006      	beq.n	8012b0c <tcp_input+0x614>
 8012afe:	4b50      	ldr	r3, [pc, #320]	; (8012c40 <tcp_input+0x748>)
 8012b00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012b04:	494f      	ldr	r1, [pc, #316]	; (8012c44 <tcp_input+0x74c>)
 8012b06:	4850      	ldr	r0, [pc, #320]	; (8012c48 <tcp_input+0x750>)
 8012b08:	f007 f99c 	bl	8019e44 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	8b5b      	ldrh	r3, [r3, #26]
 8012b10:	f003 0310 	and.w	r3, r3, #16
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d008      	beq.n	8012b2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012b18:	4b42      	ldr	r3, [pc, #264]	; (8012c24 <tcp_input+0x72c>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	f7fd fbe5 	bl	80102ec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012b22:	69f8      	ldr	r0, [r7, #28]
 8012b24:	f7fe f9d2 	bl	8010ecc <tcp_abort>
            goto aborted;
 8012b28:	e091      	b.n	8012c4e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012b2a:	69fb      	ldr	r3, [r7, #28]
 8012b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d00c      	beq.n	8012b4e <tcp_input+0x656>
 8012b34:	69fb      	ldr	r3, [r7, #28]
 8012b36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	6918      	ldr	r0, [r3, #16]
 8012b3e:	4b39      	ldr	r3, [pc, #228]	; (8012c24 <tcp_input+0x72c>)
 8012b40:	681a      	ldr	r2, [r3, #0]
 8012b42:	2300      	movs	r3, #0
 8012b44:	69f9      	ldr	r1, [r7, #28]
 8012b46:	47a0      	blx	r4
 8012b48:	4603      	mov	r3, r0
 8012b4a:	74fb      	strb	r3, [r7, #19]
 8012b4c:	e008      	b.n	8012b60 <tcp_input+0x668>
 8012b4e:	4b35      	ldr	r3, [pc, #212]	; (8012c24 <tcp_input+0x72c>)
 8012b50:	681a      	ldr	r2, [r3, #0]
 8012b52:	2300      	movs	r3, #0
 8012b54:	69f9      	ldr	r1, [r7, #28]
 8012b56:	2000      	movs	r0, #0
 8012b58:	f7ff f890 	bl	8011c7c <tcp_recv_null>
 8012b5c:	4603      	mov	r3, r0
 8012b5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012b60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b64:	f113 0f0d 	cmn.w	r3, #13
 8012b68:	d053      	beq.n	8012c12 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012b6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d003      	beq.n	8012b7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012b72:	4b2c      	ldr	r3, [pc, #176]	; (8012c24 <tcp_input+0x72c>)
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012b7a:	4b2b      	ldr	r3, [pc, #172]	; (8012c28 <tcp_input+0x730>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	f003 0320 	and.w	r3, r3, #32
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d030      	beq.n	8012be8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012b86:	69fb      	ldr	r3, [r7, #28]
 8012b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d009      	beq.n	8012ba2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012b8e:	69fb      	ldr	r3, [r7, #28]
 8012b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b92:	7b5a      	ldrb	r2, [r3, #13]
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b98:	f042 0220 	orr.w	r2, r2, #32
 8012b9c:	b2d2      	uxtb	r2, r2
 8012b9e:	735a      	strb	r2, [r3, #13]
 8012ba0:	e022      	b.n	8012be8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012ba2:	69fb      	ldr	r3, [r7, #28]
 8012ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ba6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012baa:	d005      	beq.n	8012bb8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bb0:	3301      	adds	r3, #1
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d00b      	beq.n	8012bda <tcp_input+0x6e2>
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012bc8:	69fb      	ldr	r3, [r7, #28]
 8012bca:	6918      	ldr	r0, [r3, #16]
 8012bcc:	2300      	movs	r3, #0
 8012bce:	2200      	movs	r2, #0
 8012bd0:	69f9      	ldr	r1, [r7, #28]
 8012bd2:	47a0      	blx	r4
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	74fb      	strb	r3, [r7, #19]
 8012bd8:	e001      	b.n	8012bde <tcp_input+0x6e6>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012bde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012be2:	f113 0f0d 	cmn.w	r3, #13
 8012be6:	d016      	beq.n	8012c16 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012be8:	4b13      	ldr	r3, [pc, #76]	; (8012c38 <tcp_input+0x740>)
 8012bea:	2200      	movs	r2, #0
 8012bec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012bee:	69f8      	ldr	r0, [r7, #28]
 8012bf0:	f000 f88e 	bl	8012d10 <tcp_input_delayed_close>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d128      	bne.n	8012c4c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012bfa:	69f8      	ldr	r0, [r7, #28]
 8012bfc:	f002 ff20 	bl	8015a40 <tcp_output>
 8012c00:	e025      	b.n	8012c4e <tcp_input+0x756>
        goto aborted;
 8012c02:	bf00      	nop
 8012c04:	e023      	b.n	8012c4e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012c06:	bf00      	nop
 8012c08:	e021      	b.n	8012c4e <tcp_input+0x756>
              goto aborted;
 8012c0a:	bf00      	nop
 8012c0c:	e01f      	b.n	8012c4e <tcp_input+0x756>
          goto aborted;
 8012c0e:	bf00      	nop
 8012c10:	e01d      	b.n	8012c4e <tcp_input+0x756>
            goto aborted;
 8012c12:	bf00      	nop
 8012c14:	e01b      	b.n	8012c4e <tcp_input+0x756>
              goto aborted;
 8012c16:	bf00      	nop
 8012c18:	e019      	b.n	8012c4e <tcp_input+0x756>
 8012c1a:	bf00      	nop
 8012c1c:	2004f59c 	.word	0x2004f59c
 8012c20:	2004f5ac 	.word	0x2004f5ac
 8012c24:	2004f5cc 	.word	0x2004f5cc
 8012c28:	2004f5c9 	.word	0x2004f5c9
 8012c2c:	2004f5c4 	.word	0x2004f5c4
 8012c30:	2004f5c8 	.word	0x2004f5c8
 8012c34:	2004f5c6 	.word	0x2004f5c6
 8012c38:	2004f5d0 	.word	0x2004f5d0
 8012c3c:	2004f590 	.word	0x2004f590
 8012c40:	0801ca80 	.word	0x0801ca80
 8012c44:	0801cc34 	.word	0x0801cc34
 8012c48:	0801cacc 	.word	0x0801cacc
          goto aborted;
 8012c4c:	bf00      	nop
    tcp_input_pcb = NULL;
 8012c4e:	4b27      	ldr	r3, [pc, #156]	; (8012cec <tcp_input+0x7f4>)
 8012c50:	2200      	movs	r2, #0
 8012c52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012c54:	4b26      	ldr	r3, [pc, #152]	; (8012cf0 <tcp_input+0x7f8>)
 8012c56:	2200      	movs	r2, #0
 8012c58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012c5a:	4b26      	ldr	r3, [pc, #152]	; (8012cf4 <tcp_input+0x7fc>)
 8012c5c:	685b      	ldr	r3, [r3, #4]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d03f      	beq.n	8012ce2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012c62:	4b24      	ldr	r3, [pc, #144]	; (8012cf4 <tcp_input+0x7fc>)
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fd fb40 	bl	80102ec <pbuf_free>
      inseg.p = NULL;
 8012c6c:	4b21      	ldr	r3, [pc, #132]	; (8012cf4 <tcp_input+0x7fc>)
 8012c6e:	2200      	movs	r2, #0
 8012c70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012c72:	e036      	b.n	8012ce2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012c74:	4b20      	ldr	r3, [pc, #128]	; (8012cf8 <tcp_input+0x800>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	899b      	ldrh	r3, [r3, #12]
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7fb ff43 	bl	800eb08 <lwip_htons>
 8012c82:	4603      	mov	r3, r0
 8012c84:	b2db      	uxtb	r3, r3
 8012c86:	f003 0304 	and.w	r3, r3, #4
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d118      	bne.n	8012cc0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012c8e:	4b1b      	ldr	r3, [pc, #108]	; (8012cfc <tcp_input+0x804>)
 8012c90:	6819      	ldr	r1, [r3, #0]
 8012c92:	4b1b      	ldr	r3, [pc, #108]	; (8012d00 <tcp_input+0x808>)
 8012c94:	881b      	ldrh	r3, [r3, #0]
 8012c96:	461a      	mov	r2, r3
 8012c98:	4b1a      	ldr	r3, [pc, #104]	; (8012d04 <tcp_input+0x80c>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012c9e:	4b16      	ldr	r3, [pc, #88]	; (8012cf8 <tcp_input+0x800>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ca2:	885b      	ldrh	r3, [r3, #2]
 8012ca4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ca6:	4a14      	ldr	r2, [pc, #80]	; (8012cf8 <tcp_input+0x800>)
 8012ca8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012caa:	8812      	ldrh	r2, [r2, #0]
 8012cac:	b292      	uxth	r2, r2
 8012cae:	9202      	str	r2, [sp, #8]
 8012cb0:	9301      	str	r3, [sp, #4]
 8012cb2:	4b15      	ldr	r3, [pc, #84]	; (8012d08 <tcp_input+0x810>)
 8012cb4:	9300      	str	r3, [sp, #0]
 8012cb6:	4b15      	ldr	r3, [pc, #84]	; (8012d0c <tcp_input+0x814>)
 8012cb8:	4602      	mov	r2, r0
 8012cba:	2000      	movs	r0, #0
 8012cbc:	f003 fc74 	bl	80165a8 <tcp_rst>
    pbuf_free(p);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7fd fb13 	bl	80102ec <pbuf_free>
  return;
 8012cc6:	e00c      	b.n	8012ce2 <tcp_input+0x7ea>
    goto dropped;
 8012cc8:	bf00      	nop
 8012cca:	e006      	b.n	8012cda <tcp_input+0x7e2>
    goto dropped;
 8012ccc:	bf00      	nop
 8012cce:	e004      	b.n	8012cda <tcp_input+0x7e2>
    goto dropped;
 8012cd0:	bf00      	nop
 8012cd2:	e002      	b.n	8012cda <tcp_input+0x7e2>
      goto dropped;
 8012cd4:	bf00      	nop
 8012cd6:	e000      	b.n	8012cda <tcp_input+0x7e2>
      goto dropped;
 8012cd8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f7fd fb06 	bl	80102ec <pbuf_free>
 8012ce0:	e000      	b.n	8012ce4 <tcp_input+0x7ec>
  return;
 8012ce2:	bf00      	nop
}
 8012ce4:	3724      	adds	r7, #36	; 0x24
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd90      	pop	{r4, r7, pc}
 8012cea:	bf00      	nop
 8012cec:	2004f5d0 	.word	0x2004f5d0
 8012cf0:	2004f5cc 	.word	0x2004f5cc
 8012cf4:	2004f59c 	.word	0x2004f59c
 8012cf8:	2004f5ac 	.word	0x2004f5ac
 8012cfc:	2004f5c0 	.word	0x2004f5c0
 8012d00:	2004f5c6 	.word	0x2004f5c6
 8012d04:	2004f5bc 	.word	0x2004f5bc
 8012d08:	2004b080 	.word	0x2004b080
 8012d0c:	2004b084 	.word	0x2004b084

08012d10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d106      	bne.n	8012d2c <tcp_input_delayed_close+0x1c>
 8012d1e:	4b17      	ldr	r3, [pc, #92]	; (8012d7c <tcp_input_delayed_close+0x6c>)
 8012d20:	f240 225a 	movw	r2, #602	; 0x25a
 8012d24:	4916      	ldr	r1, [pc, #88]	; (8012d80 <tcp_input_delayed_close+0x70>)
 8012d26:	4817      	ldr	r0, [pc, #92]	; (8012d84 <tcp_input_delayed_close+0x74>)
 8012d28:	f007 f88c 	bl	8019e44 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012d2c:	4b16      	ldr	r3, [pc, #88]	; (8012d88 <tcp_input_delayed_close+0x78>)
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	f003 0310 	and.w	r3, r3, #16
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d01c      	beq.n	8012d72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	8b5b      	ldrh	r3, [r3, #26]
 8012d3c:	f003 0310 	and.w	r3, r3, #16
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d10d      	bne.n	8012d60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d008      	beq.n	8012d60 <tcp_input_delayed_close+0x50>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012d54:	687a      	ldr	r2, [r7, #4]
 8012d56:	6912      	ldr	r2, [r2, #16]
 8012d58:	f06f 010e 	mvn.w	r1, #14
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012d60:	6879      	ldr	r1, [r7, #4]
 8012d62:	480a      	ldr	r0, [pc, #40]	; (8012d8c <tcp_input_delayed_close+0x7c>)
 8012d64:	f7ff fa50 	bl	8012208 <tcp_pcb_remove>
    tcp_free(pcb);
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	f7fd fd6b 	bl	8010844 <tcp_free>
    return 1;
 8012d6e:	2301      	movs	r3, #1
 8012d70:	e000      	b.n	8012d74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012d72:	2300      	movs	r3, #0
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3708      	adds	r7, #8
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	0801ca80 	.word	0x0801ca80
 8012d80:	0801cc50 	.word	0x0801cc50
 8012d84:	0801cacc 	.word	0x0801cacc
 8012d88:	2004f5c9 	.word	0x2004f5c9
 8012d8c:	2004f590 	.word	0x2004f590

08012d90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012d90:	b590      	push	{r4, r7, lr}
 8012d92:	b08b      	sub	sp, #44	; 0x2c
 8012d94:	af04      	add	r7, sp, #16
 8012d96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012d98:	4b6f      	ldr	r3, [pc, #444]	; (8012f58 <tcp_listen_input+0x1c8>)
 8012d9a:	781b      	ldrb	r3, [r3, #0]
 8012d9c:	f003 0304 	and.w	r3, r3, #4
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	f040 80d2 	bne.w	8012f4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d106      	bne.n	8012dba <tcp_listen_input+0x2a>
 8012dac:	4b6b      	ldr	r3, [pc, #428]	; (8012f5c <tcp_listen_input+0x1cc>)
 8012dae:	f240 2281 	movw	r2, #641	; 0x281
 8012db2:	496b      	ldr	r1, [pc, #428]	; (8012f60 <tcp_listen_input+0x1d0>)
 8012db4:	486b      	ldr	r0, [pc, #428]	; (8012f64 <tcp_listen_input+0x1d4>)
 8012db6:	f007 f845 	bl	8019e44 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012dba:	4b67      	ldr	r3, [pc, #412]	; (8012f58 <tcp_listen_input+0x1c8>)
 8012dbc:	781b      	ldrb	r3, [r3, #0]
 8012dbe:	f003 0310 	and.w	r3, r3, #16
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d019      	beq.n	8012dfa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dc6:	4b68      	ldr	r3, [pc, #416]	; (8012f68 <tcp_listen_input+0x1d8>)
 8012dc8:	6819      	ldr	r1, [r3, #0]
 8012dca:	4b68      	ldr	r3, [pc, #416]	; (8012f6c <tcp_listen_input+0x1dc>)
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	461a      	mov	r2, r3
 8012dd0:	4b67      	ldr	r3, [pc, #412]	; (8012f70 <tcp_listen_input+0x1e0>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dd6:	4b67      	ldr	r3, [pc, #412]	; (8012f74 <tcp_listen_input+0x1e4>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012dda:	885b      	ldrh	r3, [r3, #2]
 8012ddc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012dde:	4a65      	ldr	r2, [pc, #404]	; (8012f74 <tcp_listen_input+0x1e4>)
 8012de0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012de2:	8812      	ldrh	r2, [r2, #0]
 8012de4:	b292      	uxth	r2, r2
 8012de6:	9202      	str	r2, [sp, #8]
 8012de8:	9301      	str	r3, [sp, #4]
 8012dea:	4b63      	ldr	r3, [pc, #396]	; (8012f78 <tcp_listen_input+0x1e8>)
 8012dec:	9300      	str	r3, [sp, #0]
 8012dee:	4b63      	ldr	r3, [pc, #396]	; (8012f7c <tcp_listen_input+0x1ec>)
 8012df0:	4602      	mov	r2, r0
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f003 fbd8 	bl	80165a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012df8:	e0a9      	b.n	8012f4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012dfa:	4b57      	ldr	r3, [pc, #348]	; (8012f58 <tcp_listen_input+0x1c8>)
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	f003 0302 	and.w	r3, r3, #2
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	f000 80a3 	beq.w	8012f4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	7d5b      	ldrb	r3, [r3, #21]
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7ff f859 	bl	8011ec4 <tcp_alloc>
 8012e12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d111      	bne.n	8012e3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	699b      	ldr	r3, [r3, #24]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d00a      	beq.n	8012e38 <tcp_listen_input+0xa8>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	699b      	ldr	r3, [r3, #24]
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	6910      	ldr	r0, [r2, #16]
 8012e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e2e:	2100      	movs	r1, #0
 8012e30:	4798      	blx	r3
 8012e32:	4603      	mov	r3, r0
 8012e34:	73bb      	strb	r3, [r7, #14]
      return;
 8012e36:	e08b      	b.n	8012f50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012e38:	23f0      	movs	r3, #240	; 0xf0
 8012e3a:	73bb      	strb	r3, [r7, #14]
      return;
 8012e3c:	e088      	b.n	8012f50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012e3e:	4b50      	ldr	r3, [pc, #320]	; (8012f80 <tcp_listen_input+0x1f0>)
 8012e40:	695a      	ldr	r2, [r3, #20]
 8012e42:	697b      	ldr	r3, [r7, #20]
 8012e44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012e46:	4b4e      	ldr	r3, [pc, #312]	; (8012f80 <tcp_listen_input+0x1f0>)
 8012e48:	691a      	ldr	r2, [r3, #16]
 8012e4a:	697b      	ldr	r3, [r7, #20]
 8012e4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	8ada      	ldrh	r2, [r3, #22]
 8012e52:	697b      	ldr	r3, [r7, #20]
 8012e54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012e56:	4b47      	ldr	r3, [pc, #284]	; (8012f74 <tcp_listen_input+0x1e4>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	b29a      	uxth	r2, r3
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	2203      	movs	r2, #3
 8012e66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012e68:	4b41      	ldr	r3, [pc, #260]	; (8012f70 <tcp_listen_input+0x1e0>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	1c5a      	adds	r2, r3, #1
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012e72:	697b      	ldr	r3, [r7, #20]
 8012e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012e7a:	6978      	ldr	r0, [r7, #20]
 8012e7c:	f7ff fa58 	bl	8012330 <tcp_next_iss>
 8012e80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	693a      	ldr	r2, [r7, #16]
 8012e86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	693a      	ldr	r2, [r7, #16]
 8012e8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	693a      	ldr	r2, [r7, #16]
 8012e92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	693a      	ldr	r2, [r7, #16]
 8012e98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012e9a:	4b35      	ldr	r3, [pc, #212]	; (8012f70 <tcp_listen_input+0x1e0>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	1e5a      	subs	r2, r3, #1
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	691a      	ldr	r2, [r3, #16]
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	687a      	ldr	r2, [r7, #4]
 8012eb0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	7a5b      	ldrb	r3, [r3, #9]
 8012eb6:	f003 030c 	and.w	r3, r3, #12
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	7a1a      	ldrb	r2, [r3, #8]
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012ec8:	4b2e      	ldr	r3, [pc, #184]	; (8012f84 <tcp_listen_input+0x1f4>)
 8012eca:	681a      	ldr	r2, [r3, #0]
 8012ecc:	697b      	ldr	r3, [r7, #20]
 8012ece:	60da      	str	r2, [r3, #12]
 8012ed0:	4a2c      	ldr	r2, [pc, #176]	; (8012f84 <tcp_listen_input+0x1f4>)
 8012ed2:	697b      	ldr	r3, [r7, #20]
 8012ed4:	6013      	str	r3, [r2, #0]
 8012ed6:	f003 fd29 	bl	801692c <tcp_timer_needed>
 8012eda:	4b2b      	ldr	r3, [pc, #172]	; (8012f88 <tcp_listen_input+0x1f8>)
 8012edc:	2201      	movs	r2, #1
 8012ede:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012ee0:	6978      	ldr	r0, [r7, #20]
 8012ee2:	f001 fd8f 	bl	8014a04 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012ee6:	4b23      	ldr	r3, [pc, #140]	; (8012f74 <tcp_listen_input+0x1e4>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	89db      	ldrh	r3, [r3, #14]
 8012eec:	b29a      	uxth	r2, r3
 8012eee:	697b      	ldr	r3, [r7, #20]
 8012ef0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	3304      	adds	r3, #4
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f005 fa21 	bl	8018350 <ip4_route>
 8012f0e:	4601      	mov	r1, r0
 8012f10:	697b      	ldr	r3, [r7, #20]
 8012f12:	3304      	adds	r3, #4
 8012f14:	461a      	mov	r2, r3
 8012f16:	4620      	mov	r0, r4
 8012f18:	f7ff fa30 	bl	801237c <tcp_eff_send_mss_netif>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	461a      	mov	r2, r3
 8012f20:	697b      	ldr	r3, [r7, #20]
 8012f22:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012f24:	2112      	movs	r1, #18
 8012f26:	6978      	ldr	r0, [r7, #20]
 8012f28:	f002 fc9c 	bl	8015864 <tcp_enqueue_flags>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d004      	beq.n	8012f42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012f38:	2100      	movs	r1, #0
 8012f3a:	6978      	ldr	r0, [r7, #20]
 8012f3c:	f7fd ff08 	bl	8010d50 <tcp_abandon>
      return;
 8012f40:	e006      	b.n	8012f50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012f42:	6978      	ldr	r0, [r7, #20]
 8012f44:	f002 fd7c 	bl	8015a40 <tcp_output>
  return;
 8012f48:	e001      	b.n	8012f4e <tcp_listen_input+0x1be>
    return;
 8012f4a:	bf00      	nop
 8012f4c:	e000      	b.n	8012f50 <tcp_listen_input+0x1c0>
  return;
 8012f4e:	bf00      	nop
}
 8012f50:	371c      	adds	r7, #28
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd90      	pop	{r4, r7, pc}
 8012f56:	bf00      	nop
 8012f58:	2004f5c8 	.word	0x2004f5c8
 8012f5c:	0801ca80 	.word	0x0801ca80
 8012f60:	0801cc78 	.word	0x0801cc78
 8012f64:	0801cacc 	.word	0x0801cacc
 8012f68:	2004f5c0 	.word	0x2004f5c0
 8012f6c:	2004f5c6 	.word	0x2004f5c6
 8012f70:	2004f5bc 	.word	0x2004f5bc
 8012f74:	2004f5ac 	.word	0x2004f5ac
 8012f78:	2004b080 	.word	0x2004b080
 8012f7c:	2004b084 	.word	0x2004b084
 8012f80:	2004b070 	.word	0x2004b070
 8012f84:	2004f590 	.word	0x2004f590
 8012f88:	2004f598 	.word	0x2004f598

08012f8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af04      	add	r7, sp, #16
 8012f92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012f94:	4b2f      	ldr	r3, [pc, #188]	; (8013054 <tcp_timewait_input+0xc8>)
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	f003 0304 	and.w	r3, r3, #4
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d153      	bne.n	8013048 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d106      	bne.n	8012fb4 <tcp_timewait_input+0x28>
 8012fa6:	4b2c      	ldr	r3, [pc, #176]	; (8013058 <tcp_timewait_input+0xcc>)
 8012fa8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012fac:	492b      	ldr	r1, [pc, #172]	; (801305c <tcp_timewait_input+0xd0>)
 8012fae:	482c      	ldr	r0, [pc, #176]	; (8013060 <tcp_timewait_input+0xd4>)
 8012fb0:	f006 ff48 	bl	8019e44 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012fb4:	4b27      	ldr	r3, [pc, #156]	; (8013054 <tcp_timewait_input+0xc8>)
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	f003 0302 	and.w	r3, r3, #2
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d02a      	beq.n	8013016 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012fc0:	4b28      	ldr	r3, [pc, #160]	; (8013064 <tcp_timewait_input+0xd8>)
 8012fc2:	681a      	ldr	r2, [r3, #0]
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc8:	1ad3      	subs	r3, r2, r3
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	db2d      	blt.n	801302a <tcp_timewait_input+0x9e>
 8012fce:	4b25      	ldr	r3, [pc, #148]	; (8013064 <tcp_timewait_input+0xd8>)
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fda:	440b      	add	r3, r1
 8012fdc:	1ad3      	subs	r3, r2, r3
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	dc23      	bgt.n	801302a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fe2:	4b21      	ldr	r3, [pc, #132]	; (8013068 <tcp_timewait_input+0xdc>)
 8012fe4:	6819      	ldr	r1, [r3, #0]
 8012fe6:	4b21      	ldr	r3, [pc, #132]	; (801306c <tcp_timewait_input+0xe0>)
 8012fe8:	881b      	ldrh	r3, [r3, #0]
 8012fea:	461a      	mov	r2, r3
 8012fec:	4b1d      	ldr	r3, [pc, #116]	; (8013064 <tcp_timewait_input+0xd8>)
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ff2:	4b1f      	ldr	r3, [pc, #124]	; (8013070 <tcp_timewait_input+0xe4>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ff6:	885b      	ldrh	r3, [r3, #2]
 8012ff8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ffa:	4a1d      	ldr	r2, [pc, #116]	; (8013070 <tcp_timewait_input+0xe4>)
 8012ffc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ffe:	8812      	ldrh	r2, [r2, #0]
 8013000:	b292      	uxth	r2, r2
 8013002:	9202      	str	r2, [sp, #8]
 8013004:	9301      	str	r3, [sp, #4]
 8013006:	4b1b      	ldr	r3, [pc, #108]	; (8013074 <tcp_timewait_input+0xe8>)
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	4b1b      	ldr	r3, [pc, #108]	; (8013078 <tcp_timewait_input+0xec>)
 801300c:	4602      	mov	r2, r0
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f003 faca 	bl	80165a8 <tcp_rst>
      return;
 8013014:	e01b      	b.n	801304e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013016:	4b0f      	ldr	r3, [pc, #60]	; (8013054 <tcp_timewait_input+0xc8>)
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f003 0301 	and.w	r3, r3, #1
 801301e:	2b00      	cmp	r3, #0
 8013020:	d003      	beq.n	801302a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013022:	4b16      	ldr	r3, [pc, #88]	; (801307c <tcp_timewait_input+0xf0>)
 8013024:	681a      	ldr	r2, [r3, #0]
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801302a:	4b10      	ldr	r3, [pc, #64]	; (801306c <tcp_timewait_input+0xe0>)
 801302c:	881b      	ldrh	r3, [r3, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d00c      	beq.n	801304c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	8b5b      	ldrh	r3, [r3, #26]
 8013036:	f043 0302 	orr.w	r3, r3, #2
 801303a:	b29a      	uxth	r2, r3
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f002 fcfd 	bl	8015a40 <tcp_output>
  }
  return;
 8013046:	e001      	b.n	801304c <tcp_timewait_input+0xc0>
    return;
 8013048:	bf00      	nop
 801304a:	e000      	b.n	801304e <tcp_timewait_input+0xc2>
  return;
 801304c:	bf00      	nop
}
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	2004f5c8 	.word	0x2004f5c8
 8013058:	0801ca80 	.word	0x0801ca80
 801305c:	0801cc98 	.word	0x0801cc98
 8013060:	0801cacc 	.word	0x0801cacc
 8013064:	2004f5bc 	.word	0x2004f5bc
 8013068:	2004f5c0 	.word	0x2004f5c0
 801306c:	2004f5c6 	.word	0x2004f5c6
 8013070:	2004f5ac 	.word	0x2004f5ac
 8013074:	2004b080 	.word	0x2004b080
 8013078:	2004b084 	.word	0x2004b084
 801307c:	2004f584 	.word	0x2004f584

08013080 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013080:	b590      	push	{r4, r7, lr}
 8013082:	b08d      	sub	sp, #52	; 0x34
 8013084:	af04      	add	r7, sp, #16
 8013086:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013088:	2300      	movs	r3, #0
 801308a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801308c:	2300      	movs	r3, #0
 801308e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2b00      	cmp	r3, #0
 8013094:	d106      	bne.n	80130a4 <tcp_process+0x24>
 8013096:	4b9d      	ldr	r3, [pc, #628]	; (801330c <tcp_process+0x28c>)
 8013098:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801309c:	499c      	ldr	r1, [pc, #624]	; (8013310 <tcp_process+0x290>)
 801309e:	489d      	ldr	r0, [pc, #628]	; (8013314 <tcp_process+0x294>)
 80130a0:	f006 fed0 	bl	8019e44 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80130a4:	4b9c      	ldr	r3, [pc, #624]	; (8013318 <tcp_process+0x298>)
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	f003 0304 	and.w	r3, r3, #4
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d04e      	beq.n	801314e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	7d1b      	ldrb	r3, [r3, #20]
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	d108      	bne.n	80130ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130bc:	4b97      	ldr	r3, [pc, #604]	; (801331c <tcp_process+0x29c>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d123      	bne.n	801310c <tcp_process+0x8c>
        acceptable = 1;
 80130c4:	2301      	movs	r3, #1
 80130c6:	76fb      	strb	r3, [r7, #27]
 80130c8:	e020      	b.n	801310c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130ce:	4b94      	ldr	r3, [pc, #592]	; (8013320 <tcp_process+0x2a0>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d102      	bne.n	80130dc <tcp_process+0x5c>
        acceptable = 1;
 80130d6:	2301      	movs	r3, #1
 80130d8:	76fb      	strb	r3, [r7, #27]
 80130da:	e017      	b.n	801310c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80130dc:	4b90      	ldr	r3, [pc, #576]	; (8013320 <tcp_process+0x2a0>)
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e4:	1ad3      	subs	r3, r2, r3
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	db10      	blt.n	801310c <tcp_process+0x8c>
 80130ea:	4b8d      	ldr	r3, [pc, #564]	; (8013320 <tcp_process+0x2a0>)
 80130ec:	681a      	ldr	r2, [r3, #0]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130f2:	6879      	ldr	r1, [r7, #4]
 80130f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80130f6:	440b      	add	r3, r1
 80130f8:	1ad3      	subs	r3, r2, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	dc06      	bgt.n	801310c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	8b5b      	ldrh	r3, [r3, #26]
 8013102:	f043 0302 	orr.w	r3, r3, #2
 8013106:	b29a      	uxth	r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801310c:	7efb      	ldrb	r3, [r7, #27]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d01b      	beq.n	801314a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	7d1b      	ldrb	r3, [r3, #20]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d106      	bne.n	8013128 <tcp_process+0xa8>
 801311a:	4b7c      	ldr	r3, [pc, #496]	; (801330c <tcp_process+0x28c>)
 801311c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013120:	4980      	ldr	r1, [pc, #512]	; (8013324 <tcp_process+0x2a4>)
 8013122:	487c      	ldr	r0, [pc, #496]	; (8013314 <tcp_process+0x294>)
 8013124:	f006 fe8e 	bl	8019e44 <iprintf>
      recv_flags |= TF_RESET;
 8013128:	4b7f      	ldr	r3, [pc, #508]	; (8013328 <tcp_process+0x2a8>)
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	f043 0308 	orr.w	r3, r3, #8
 8013130:	b2da      	uxtb	r2, r3
 8013132:	4b7d      	ldr	r3, [pc, #500]	; (8013328 <tcp_process+0x2a8>)
 8013134:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	8b5b      	ldrh	r3, [r3, #26]
 801313a:	f023 0301 	bic.w	r3, r3, #1
 801313e:	b29a      	uxth	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013144:	f06f 030d 	mvn.w	r3, #13
 8013148:	e37a      	b.n	8013840 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801314a:	2300      	movs	r3, #0
 801314c:	e378      	b.n	8013840 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801314e:	4b72      	ldr	r3, [pc, #456]	; (8013318 <tcp_process+0x298>)
 8013150:	781b      	ldrb	r3, [r3, #0]
 8013152:	f003 0302 	and.w	r3, r3, #2
 8013156:	2b00      	cmp	r3, #0
 8013158:	d010      	beq.n	801317c <tcp_process+0xfc>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	7d1b      	ldrb	r3, [r3, #20]
 801315e:	2b02      	cmp	r3, #2
 8013160:	d00c      	beq.n	801317c <tcp_process+0xfc>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	7d1b      	ldrb	r3, [r3, #20]
 8013166:	2b03      	cmp	r3, #3
 8013168:	d008      	beq.n	801317c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	8b5b      	ldrh	r3, [r3, #26]
 801316e:	f043 0302 	orr.w	r3, r3, #2
 8013172:	b29a      	uxth	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013178:	2300      	movs	r3, #0
 801317a:	e361      	b.n	8013840 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	8b5b      	ldrh	r3, [r3, #26]
 8013180:	f003 0310 	and.w	r3, r3, #16
 8013184:	2b00      	cmp	r3, #0
 8013186:	d103      	bne.n	8013190 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013188:	4b68      	ldr	r3, [pc, #416]	; (801332c <tcp_process+0x2ac>)
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2200      	movs	r2, #0
 8013194:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f001 fc2f 	bl	8014a04 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	7d1b      	ldrb	r3, [r3, #20]
 80131aa:	3b02      	subs	r3, #2
 80131ac:	2b07      	cmp	r3, #7
 80131ae:	f200 8337 	bhi.w	8013820 <tcp_process+0x7a0>
 80131b2:	a201      	add	r2, pc, #4	; (adr r2, 80131b8 <tcp_process+0x138>)
 80131b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b8:	080131d9 	.word	0x080131d9
 80131bc:	08013409 	.word	0x08013409
 80131c0:	08013581 	.word	0x08013581
 80131c4:	080135ab 	.word	0x080135ab
 80131c8:	080136cf 	.word	0x080136cf
 80131cc:	08013581 	.word	0x08013581
 80131d0:	0801375b 	.word	0x0801375b
 80131d4:	080137eb 	.word	0x080137eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80131d8:	4b4f      	ldr	r3, [pc, #316]	; (8013318 <tcp_process+0x298>)
 80131da:	781b      	ldrb	r3, [r3, #0]
 80131dc:	f003 0310 	and.w	r3, r3, #16
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	f000 80e4 	beq.w	80133ae <tcp_process+0x32e>
 80131e6:	4b4c      	ldr	r3, [pc, #304]	; (8013318 <tcp_process+0x298>)
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	f003 0302 	and.w	r3, r3, #2
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	f000 80dd 	beq.w	80133ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131f8:	1c5a      	adds	r2, r3, #1
 80131fa:	4b48      	ldr	r3, [pc, #288]	; (801331c <tcp_process+0x29c>)
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	429a      	cmp	r2, r3
 8013200:	f040 80d5 	bne.w	80133ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013204:	4b46      	ldr	r3, [pc, #280]	; (8013320 <tcp_process+0x2a0>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	1c5a      	adds	r2, r3, #1
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013216:	4b41      	ldr	r3, [pc, #260]	; (801331c <tcp_process+0x29c>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801321e:	4b44      	ldr	r3, [pc, #272]	; (8013330 <tcp_process+0x2b0>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	89db      	ldrh	r3, [r3, #14]
 8013224:	b29a      	uxth	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013238:	4b39      	ldr	r3, [pc, #228]	; (8013320 <tcp_process+0x2a0>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	1e5a      	subs	r2, r3, #1
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2204      	movs	r2, #4
 8013246:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	3304      	adds	r3, #4
 8013250:	4618      	mov	r0, r3
 8013252:	f005 f87d 	bl	8018350 <ip4_route>
 8013256:	4601      	mov	r1, r0
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	3304      	adds	r3, #4
 801325c:	461a      	mov	r2, r3
 801325e:	4620      	mov	r0, r4
 8013260:	f7ff f88c 	bl	801237c <tcp_eff_send_mss_netif>
 8013264:	4603      	mov	r3, r0
 8013266:	461a      	mov	r2, r3
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013270:	009a      	lsls	r2, r3, #2
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013276:	005b      	lsls	r3, r3, #1
 8013278:	f241 111c 	movw	r1, #4380	; 0x111c
 801327c:	428b      	cmp	r3, r1
 801327e:	bf38      	it	cc
 8013280:	460b      	movcc	r3, r1
 8013282:	429a      	cmp	r2, r3
 8013284:	d204      	bcs.n	8013290 <tcp_process+0x210>
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801328a:	009b      	lsls	r3, r3, #2
 801328c:	b29b      	uxth	r3, r3
 801328e:	e00d      	b.n	80132ac <tcp_process+0x22c>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013294:	005b      	lsls	r3, r3, #1
 8013296:	f241 121c 	movw	r2, #4380	; 0x111c
 801329a:	4293      	cmp	r3, r2
 801329c:	d904      	bls.n	80132a8 <tcp_process+0x228>
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	b29b      	uxth	r3, r3
 80132a6:	e001      	b.n	80132ac <tcp_process+0x22c>
 80132a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d106      	bne.n	80132ca <tcp_process+0x24a>
 80132bc:	4b13      	ldr	r3, [pc, #76]	; (801330c <tcp_process+0x28c>)
 80132be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80132c2:	491c      	ldr	r1, [pc, #112]	; (8013334 <tcp_process+0x2b4>)
 80132c4:	4813      	ldr	r0, [pc, #76]	; (8013314 <tcp_process+0x294>)
 80132c6:	f006 fdbd 	bl	8019e44 <iprintf>
        --pcb->snd_queuelen;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80132d0:	3b01      	subs	r3, #1
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d12a      	bne.n	801333c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d106      	bne.n	8013300 <tcp_process+0x280>
 80132f2:	4b06      	ldr	r3, [pc, #24]	; (801330c <tcp_process+0x28c>)
 80132f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80132f8:	490f      	ldr	r1, [pc, #60]	; (8013338 <tcp_process+0x2b8>)
 80132fa:	4806      	ldr	r0, [pc, #24]	; (8013314 <tcp_process+0x294>)
 80132fc:	f006 fda2 	bl	8019e44 <iprintf>
          pcb->unsent = rseg->next;
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	681a      	ldr	r2, [r3, #0]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	66da      	str	r2, [r3, #108]	; 0x6c
 8013308:	e01c      	b.n	8013344 <tcp_process+0x2c4>
 801330a:	bf00      	nop
 801330c:	0801ca80 	.word	0x0801ca80
 8013310:	0801ccb8 	.word	0x0801ccb8
 8013314:	0801cacc 	.word	0x0801cacc
 8013318:	2004f5c8 	.word	0x2004f5c8
 801331c:	2004f5c0 	.word	0x2004f5c0
 8013320:	2004f5bc 	.word	0x2004f5bc
 8013324:	0801ccd4 	.word	0x0801ccd4
 8013328:	2004f5c9 	.word	0x2004f5c9
 801332c:	2004f584 	.word	0x2004f584
 8013330:	2004f5ac 	.word	0x2004f5ac
 8013334:	0801ccf4 	.word	0x0801ccf4
 8013338:	0801cd0c 	.word	0x0801cd0c
        } else {
          pcb->unacked = rseg->next;
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013344:	69f8      	ldr	r0, [r7, #28]
 8013346:	f7fe fc54 	bl	8011bf2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801334e:	2b00      	cmp	r3, #0
 8013350:	d104      	bne.n	801335c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013358:	861a      	strh	r2, [r3, #48]	; 0x30
 801335a:	e006      	b.n	801336a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2200      	movs	r2, #0
 8013366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00a      	beq.n	801338a <tcp_process+0x30a>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801337a:	687a      	ldr	r2, [r7, #4]
 801337c:	6910      	ldr	r0, [r2, #16]
 801337e:	2200      	movs	r2, #0
 8013380:	6879      	ldr	r1, [r7, #4]
 8013382:	4798      	blx	r3
 8013384:	4603      	mov	r3, r0
 8013386:	76bb      	strb	r3, [r7, #26]
 8013388:	e001      	b.n	801338e <tcp_process+0x30e>
 801338a:	2300      	movs	r3, #0
 801338c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801338e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013392:	f113 0f0d 	cmn.w	r3, #13
 8013396:	d102      	bne.n	801339e <tcp_process+0x31e>
          return ERR_ABRT;
 8013398:	f06f 030c 	mvn.w	r3, #12
 801339c:	e250      	b.n	8013840 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	8b5b      	ldrh	r3, [r3, #26]
 80133a2:	f043 0302 	orr.w	r3, r3, #2
 80133a6:	b29a      	uxth	r2, r3
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80133ac:	e23a      	b.n	8013824 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80133ae:	4b98      	ldr	r3, [pc, #608]	; (8013610 <tcp_process+0x590>)
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	f003 0310 	and.w	r3, r3, #16
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f000 8234 	beq.w	8013824 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133bc:	4b95      	ldr	r3, [pc, #596]	; (8013614 <tcp_process+0x594>)
 80133be:	6819      	ldr	r1, [r3, #0]
 80133c0:	4b95      	ldr	r3, [pc, #596]	; (8013618 <tcp_process+0x598>)
 80133c2:	881b      	ldrh	r3, [r3, #0]
 80133c4:	461a      	mov	r2, r3
 80133c6:	4b95      	ldr	r3, [pc, #596]	; (801361c <tcp_process+0x59c>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133cc:	4b94      	ldr	r3, [pc, #592]	; (8013620 <tcp_process+0x5a0>)
 80133ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133d0:	885b      	ldrh	r3, [r3, #2]
 80133d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80133d4:	4a92      	ldr	r2, [pc, #584]	; (8013620 <tcp_process+0x5a0>)
 80133d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80133d8:	8812      	ldrh	r2, [r2, #0]
 80133da:	b292      	uxth	r2, r2
 80133dc:	9202      	str	r2, [sp, #8]
 80133de:	9301      	str	r3, [sp, #4]
 80133e0:	4b90      	ldr	r3, [pc, #576]	; (8013624 <tcp_process+0x5a4>)
 80133e2:	9300      	str	r3, [sp, #0]
 80133e4:	4b90      	ldr	r3, [pc, #576]	; (8013628 <tcp_process+0x5a8>)
 80133e6:	4602      	mov	r2, r0
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f003 f8dd 	bl	80165a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80133f4:	2b05      	cmp	r3, #5
 80133f6:	f200 8215 	bhi.w	8013824 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2200      	movs	r2, #0
 80133fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f002 fea7 	bl	8016154 <tcp_rexmit_rto>
      break;
 8013406:	e20d      	b.n	8013824 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013408:	4b81      	ldr	r3, [pc, #516]	; (8013610 <tcp_process+0x590>)
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	f003 0310 	and.w	r3, r3, #16
 8013410:	2b00      	cmp	r3, #0
 8013412:	f000 80a1 	beq.w	8013558 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013416:	4b7f      	ldr	r3, [pc, #508]	; (8013614 <tcp_process+0x594>)
 8013418:	681a      	ldr	r2, [r3, #0]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	3b01      	subs	r3, #1
 8013422:	2b00      	cmp	r3, #0
 8013424:	db7e      	blt.n	8013524 <tcp_process+0x4a4>
 8013426:	4b7b      	ldr	r3, [pc, #492]	; (8013614 <tcp_process+0x594>)
 8013428:	681a      	ldr	r2, [r3, #0]
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801342e:	1ad3      	subs	r3, r2, r3
 8013430:	2b00      	cmp	r3, #0
 8013432:	dc77      	bgt.n	8013524 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2204      	movs	r2, #4
 8013438:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801343e:	2b00      	cmp	r3, #0
 8013440:	d102      	bne.n	8013448 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013442:	23fa      	movs	r3, #250	; 0xfa
 8013444:	76bb      	strb	r3, [r7, #26]
 8013446:	e01d      	b.n	8013484 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801344c:	699b      	ldr	r3, [r3, #24]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d106      	bne.n	8013460 <tcp_process+0x3e0>
 8013452:	4b76      	ldr	r3, [pc, #472]	; (801362c <tcp_process+0x5ac>)
 8013454:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013458:	4975      	ldr	r1, [pc, #468]	; (8013630 <tcp_process+0x5b0>)
 801345a:	4876      	ldr	r0, [pc, #472]	; (8013634 <tcp_process+0x5b4>)
 801345c:	f006 fcf2 	bl	8019e44 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013464:	699b      	ldr	r3, [r3, #24]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d00a      	beq.n	8013480 <tcp_process+0x400>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801346e:	699b      	ldr	r3, [r3, #24]
 8013470:	687a      	ldr	r2, [r7, #4]
 8013472:	6910      	ldr	r0, [r2, #16]
 8013474:	2200      	movs	r2, #0
 8013476:	6879      	ldr	r1, [r7, #4]
 8013478:	4798      	blx	r3
 801347a:	4603      	mov	r3, r0
 801347c:	76bb      	strb	r3, [r7, #26]
 801347e:	e001      	b.n	8013484 <tcp_process+0x404>
 8013480:	23f0      	movs	r3, #240	; 0xf0
 8013482:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013484:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00a      	beq.n	80134a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801348c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013490:	f113 0f0d 	cmn.w	r3, #13
 8013494:	d002      	beq.n	801349c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013496:	6878      	ldr	r0, [r7, #4]
 8013498:	f7fd fd18 	bl	8010ecc <tcp_abort>
            }
            return ERR_ABRT;
 801349c:	f06f 030c 	mvn.w	r3, #12
 80134a0:	e1ce      	b.n	8013840 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f000 fae0 	bl	8013a68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80134a8:	4b63      	ldr	r3, [pc, #396]	; (8013638 <tcp_process+0x5b8>)
 80134aa:	881b      	ldrh	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d005      	beq.n	80134bc <tcp_process+0x43c>
            recv_acked--;
 80134b0:	4b61      	ldr	r3, [pc, #388]	; (8013638 <tcp_process+0x5b8>)
 80134b2:	881b      	ldrh	r3, [r3, #0]
 80134b4:	3b01      	subs	r3, #1
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	4b5f      	ldr	r3, [pc, #380]	; (8013638 <tcp_process+0x5b8>)
 80134ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134c0:	009a      	lsls	r2, r3, #2
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134c6:	005b      	lsls	r3, r3, #1
 80134c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80134cc:	428b      	cmp	r3, r1
 80134ce:	bf38      	it	cc
 80134d0:	460b      	movcc	r3, r1
 80134d2:	429a      	cmp	r2, r3
 80134d4:	d204      	bcs.n	80134e0 <tcp_process+0x460>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134da:	009b      	lsls	r3, r3, #2
 80134dc:	b29b      	uxth	r3, r3
 80134de:	e00d      	b.n	80134fc <tcp_process+0x47c>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80134ea:	4293      	cmp	r3, r2
 80134ec:	d904      	bls.n	80134f8 <tcp_process+0x478>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134f2:	005b      	lsls	r3, r3, #1
 80134f4:	b29b      	uxth	r3, r3
 80134f6:	e001      	b.n	80134fc <tcp_process+0x47c>
 80134f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013502:	4b4e      	ldr	r3, [pc, #312]	; (801363c <tcp_process+0x5bc>)
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	f003 0320 	and.w	r3, r3, #32
 801350a:	2b00      	cmp	r3, #0
 801350c:	d037      	beq.n	801357e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	8b5b      	ldrh	r3, [r3, #26]
 8013512:	f043 0302 	orr.w	r3, r3, #2
 8013516:	b29a      	uxth	r2, r3
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2207      	movs	r2, #7
 8013520:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013522:	e02c      	b.n	801357e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013524:	4b3b      	ldr	r3, [pc, #236]	; (8013614 <tcp_process+0x594>)
 8013526:	6819      	ldr	r1, [r3, #0]
 8013528:	4b3b      	ldr	r3, [pc, #236]	; (8013618 <tcp_process+0x598>)
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	461a      	mov	r2, r3
 801352e:	4b3b      	ldr	r3, [pc, #236]	; (801361c <tcp_process+0x59c>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013534:	4b3a      	ldr	r3, [pc, #232]	; (8013620 <tcp_process+0x5a0>)
 8013536:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013538:	885b      	ldrh	r3, [r3, #2]
 801353a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801353c:	4a38      	ldr	r2, [pc, #224]	; (8013620 <tcp_process+0x5a0>)
 801353e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013540:	8812      	ldrh	r2, [r2, #0]
 8013542:	b292      	uxth	r2, r2
 8013544:	9202      	str	r2, [sp, #8]
 8013546:	9301      	str	r3, [sp, #4]
 8013548:	4b36      	ldr	r3, [pc, #216]	; (8013624 <tcp_process+0x5a4>)
 801354a:	9300      	str	r3, [sp, #0]
 801354c:	4b36      	ldr	r3, [pc, #216]	; (8013628 <tcp_process+0x5a8>)
 801354e:	4602      	mov	r2, r0
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f003 f829 	bl	80165a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013556:	e167      	b.n	8013828 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013558:	4b2d      	ldr	r3, [pc, #180]	; (8013610 <tcp_process+0x590>)
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	f003 0302 	and.w	r3, r3, #2
 8013560:	2b00      	cmp	r3, #0
 8013562:	f000 8161 	beq.w	8013828 <tcp_process+0x7a8>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801356a:	1e5a      	subs	r2, r3, #1
 801356c:	4b2b      	ldr	r3, [pc, #172]	; (801361c <tcp_process+0x59c>)
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	429a      	cmp	r2, r3
 8013572:	f040 8159 	bne.w	8013828 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f002 fe0e 	bl	8016198 <tcp_rexmit>
      break;
 801357c:	e154      	b.n	8013828 <tcp_process+0x7a8>
 801357e:	e153      	b.n	8013828 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f000 fa71 	bl	8013a68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013586:	4b2d      	ldr	r3, [pc, #180]	; (801363c <tcp_process+0x5bc>)
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	f003 0320 	and.w	r3, r3, #32
 801358e:	2b00      	cmp	r3, #0
 8013590:	f000 814c 	beq.w	801382c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	8b5b      	ldrh	r3, [r3, #26]
 8013598:	f043 0302 	orr.w	r3, r3, #2
 801359c:	b29a      	uxth	r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2207      	movs	r2, #7
 80135a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80135a8:	e140      	b.n	801382c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 fa5c 	bl	8013a68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80135b0:	4b22      	ldr	r3, [pc, #136]	; (801363c <tcp_process+0x5bc>)
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	f003 0320 	and.w	r3, r3, #32
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d071      	beq.n	80136a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135bc:	4b14      	ldr	r3, [pc, #80]	; (8013610 <tcp_process+0x590>)
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	f003 0310 	and.w	r3, r3, #16
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d060      	beq.n	801368a <tcp_process+0x60a>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80135cc:	4b11      	ldr	r3, [pc, #68]	; (8013614 <tcp_process+0x594>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d15a      	bne.n	801368a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d156      	bne.n	801368a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	8b5b      	ldrh	r3, [r3, #26]
 80135e0:	f043 0302 	orr.w	r3, r3, #2
 80135e4:	b29a      	uxth	r2, r3
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f7fe fdbc 	bl	8012168 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80135f0:	4b13      	ldr	r3, [pc, #76]	; (8013640 <tcp_process+0x5c0>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	d105      	bne.n	8013606 <tcp_process+0x586>
 80135fa:	4b11      	ldr	r3, [pc, #68]	; (8013640 <tcp_process+0x5c0>)
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	4a0f      	ldr	r2, [pc, #60]	; (8013640 <tcp_process+0x5c0>)
 8013602:	6013      	str	r3, [r2, #0]
 8013604:	e02e      	b.n	8013664 <tcp_process+0x5e4>
 8013606:	4b0e      	ldr	r3, [pc, #56]	; (8013640 <tcp_process+0x5c0>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	617b      	str	r3, [r7, #20]
 801360c:	e027      	b.n	801365e <tcp_process+0x5de>
 801360e:	bf00      	nop
 8013610:	2004f5c8 	.word	0x2004f5c8
 8013614:	2004f5c0 	.word	0x2004f5c0
 8013618:	2004f5c6 	.word	0x2004f5c6
 801361c:	2004f5bc 	.word	0x2004f5bc
 8013620:	2004f5ac 	.word	0x2004f5ac
 8013624:	2004b080 	.word	0x2004b080
 8013628:	2004b084 	.word	0x2004b084
 801362c:	0801ca80 	.word	0x0801ca80
 8013630:	0801cd20 	.word	0x0801cd20
 8013634:	0801cacc 	.word	0x0801cacc
 8013638:	2004f5c4 	.word	0x2004f5c4
 801363c:	2004f5c9 	.word	0x2004f5c9
 8013640:	2004f590 	.word	0x2004f590
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	68db      	ldr	r3, [r3, #12]
 8013648:	687a      	ldr	r2, [r7, #4]
 801364a:	429a      	cmp	r2, r3
 801364c:	d104      	bne.n	8013658 <tcp_process+0x5d8>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	68da      	ldr	r2, [r3, #12]
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	60da      	str	r2, [r3, #12]
 8013656:	e005      	b.n	8013664 <tcp_process+0x5e4>
 8013658:	697b      	ldr	r3, [r7, #20]
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	617b      	str	r3, [r7, #20]
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1ef      	bne.n	8013644 <tcp_process+0x5c4>
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	60da      	str	r2, [r3, #12]
 801366a:	4b77      	ldr	r3, [pc, #476]	; (8013848 <tcp_process+0x7c8>)
 801366c:	2201      	movs	r2, #1
 801366e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	220a      	movs	r2, #10
 8013674:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013676:	4b75      	ldr	r3, [pc, #468]	; (801384c <tcp_process+0x7cc>)
 8013678:	681a      	ldr	r2, [r3, #0]
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	60da      	str	r2, [r3, #12]
 801367e:	4a73      	ldr	r2, [pc, #460]	; (801384c <tcp_process+0x7cc>)
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6013      	str	r3, [r2, #0]
 8013684:	f003 f952 	bl	801692c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013688:	e0d2      	b.n	8013830 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	8b5b      	ldrh	r3, [r3, #26]
 801368e:	f043 0302 	orr.w	r3, r3, #2
 8013692:	b29a      	uxth	r2, r3
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2208      	movs	r2, #8
 801369c:	751a      	strb	r2, [r3, #20]
      break;
 801369e:	e0c7      	b.n	8013830 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80136a0:	4b6b      	ldr	r3, [pc, #428]	; (8013850 <tcp_process+0x7d0>)
 80136a2:	781b      	ldrb	r3, [r3, #0]
 80136a4:	f003 0310 	and.w	r3, r3, #16
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f000 80c1 	beq.w	8013830 <tcp_process+0x7b0>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80136b2:	4b68      	ldr	r3, [pc, #416]	; (8013854 <tcp_process+0x7d4>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	f040 80ba 	bne.w	8013830 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	f040 80b5 	bne.w	8013830 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	2206      	movs	r2, #6
 80136ca:	751a      	strb	r2, [r3, #20]
      break;
 80136cc:	e0b0      	b.n	8013830 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80136ce:	6878      	ldr	r0, [r7, #4]
 80136d0:	f000 f9ca 	bl	8013a68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80136d4:	4b60      	ldr	r3, [pc, #384]	; (8013858 <tcp_process+0x7d8>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	f003 0320 	and.w	r3, r3, #32
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f000 80a9 	beq.w	8013834 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	8b5b      	ldrh	r3, [r3, #26]
 80136e6:	f043 0302 	orr.w	r3, r3, #2
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	f7fe fd39 	bl	8012168 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80136f6:	4b59      	ldr	r3, [pc, #356]	; (801385c <tcp_process+0x7dc>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d105      	bne.n	801370c <tcp_process+0x68c>
 8013700:	4b56      	ldr	r3, [pc, #344]	; (801385c <tcp_process+0x7dc>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	68db      	ldr	r3, [r3, #12]
 8013706:	4a55      	ldr	r2, [pc, #340]	; (801385c <tcp_process+0x7dc>)
 8013708:	6013      	str	r3, [r2, #0]
 801370a:	e013      	b.n	8013734 <tcp_process+0x6b4>
 801370c:	4b53      	ldr	r3, [pc, #332]	; (801385c <tcp_process+0x7dc>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	613b      	str	r3, [r7, #16]
 8013712:	e00c      	b.n	801372e <tcp_process+0x6ae>
 8013714:	693b      	ldr	r3, [r7, #16]
 8013716:	68db      	ldr	r3, [r3, #12]
 8013718:	687a      	ldr	r2, [r7, #4]
 801371a:	429a      	cmp	r2, r3
 801371c:	d104      	bne.n	8013728 <tcp_process+0x6a8>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	68da      	ldr	r2, [r3, #12]
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	60da      	str	r2, [r3, #12]
 8013726:	e005      	b.n	8013734 <tcp_process+0x6b4>
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	613b      	str	r3, [r7, #16]
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d1ef      	bne.n	8013714 <tcp_process+0x694>
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2200      	movs	r2, #0
 8013738:	60da      	str	r2, [r3, #12]
 801373a:	4b43      	ldr	r3, [pc, #268]	; (8013848 <tcp_process+0x7c8>)
 801373c:	2201      	movs	r2, #1
 801373e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	220a      	movs	r2, #10
 8013744:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013746:	4b41      	ldr	r3, [pc, #260]	; (801384c <tcp_process+0x7cc>)
 8013748:	681a      	ldr	r2, [r3, #0]
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	60da      	str	r2, [r3, #12]
 801374e:	4a3f      	ldr	r2, [pc, #252]	; (801384c <tcp_process+0x7cc>)
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6013      	str	r3, [r2, #0]
 8013754:	f003 f8ea 	bl	801692c <tcp_timer_needed>
      }
      break;
 8013758:	e06c      	b.n	8013834 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f000 f984 	bl	8013a68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013760:	4b3b      	ldr	r3, [pc, #236]	; (8013850 <tcp_process+0x7d0>)
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	f003 0310 	and.w	r3, r3, #16
 8013768:	2b00      	cmp	r3, #0
 801376a:	d065      	beq.n	8013838 <tcp_process+0x7b8>
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013770:	4b38      	ldr	r3, [pc, #224]	; (8013854 <tcp_process+0x7d4>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	429a      	cmp	r2, r3
 8013776:	d15f      	bne.n	8013838 <tcp_process+0x7b8>
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801377c:	2b00      	cmp	r3, #0
 801377e:	d15b      	bne.n	8013838 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7fe fcf1 	bl	8012168 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013786:	4b35      	ldr	r3, [pc, #212]	; (801385c <tcp_process+0x7dc>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	429a      	cmp	r2, r3
 801378e:	d105      	bne.n	801379c <tcp_process+0x71c>
 8013790:	4b32      	ldr	r3, [pc, #200]	; (801385c <tcp_process+0x7dc>)
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	4a31      	ldr	r2, [pc, #196]	; (801385c <tcp_process+0x7dc>)
 8013798:	6013      	str	r3, [r2, #0]
 801379a:	e013      	b.n	80137c4 <tcp_process+0x744>
 801379c:	4b2f      	ldr	r3, [pc, #188]	; (801385c <tcp_process+0x7dc>)
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	60fb      	str	r3, [r7, #12]
 80137a2:	e00c      	b.n	80137be <tcp_process+0x73e>
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d104      	bne.n	80137b8 <tcp_process+0x738>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	68da      	ldr	r2, [r3, #12]
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	60da      	str	r2, [r3, #12]
 80137b6:	e005      	b.n	80137c4 <tcp_process+0x744>
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	68db      	ldr	r3, [r3, #12]
 80137bc:	60fb      	str	r3, [r7, #12]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d1ef      	bne.n	80137a4 <tcp_process+0x724>
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2200      	movs	r2, #0
 80137c8:	60da      	str	r2, [r3, #12]
 80137ca:	4b1f      	ldr	r3, [pc, #124]	; (8013848 <tcp_process+0x7c8>)
 80137cc:	2201      	movs	r2, #1
 80137ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	220a      	movs	r2, #10
 80137d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80137d6:	4b1d      	ldr	r3, [pc, #116]	; (801384c <tcp_process+0x7cc>)
 80137d8:	681a      	ldr	r2, [r3, #0]
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	60da      	str	r2, [r3, #12]
 80137de:	4a1b      	ldr	r2, [pc, #108]	; (801384c <tcp_process+0x7cc>)
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6013      	str	r3, [r2, #0]
 80137e4:	f003 f8a2 	bl	801692c <tcp_timer_needed>
      }
      break;
 80137e8:	e026      	b.n	8013838 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f000 f93c 	bl	8013a68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80137f0:	4b17      	ldr	r3, [pc, #92]	; (8013850 <tcp_process+0x7d0>)
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	f003 0310 	and.w	r3, r3, #16
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d01f      	beq.n	801383c <tcp_process+0x7bc>
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013800:	4b14      	ldr	r3, [pc, #80]	; (8013854 <tcp_process+0x7d4>)
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	429a      	cmp	r2, r3
 8013806:	d119      	bne.n	801383c <tcp_process+0x7bc>
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801380c:	2b00      	cmp	r3, #0
 801380e:	d115      	bne.n	801383c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013810:	4b11      	ldr	r3, [pc, #68]	; (8013858 <tcp_process+0x7d8>)
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	f043 0310 	orr.w	r3, r3, #16
 8013818:	b2da      	uxtb	r2, r3
 801381a:	4b0f      	ldr	r3, [pc, #60]	; (8013858 <tcp_process+0x7d8>)
 801381c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801381e:	e00d      	b.n	801383c <tcp_process+0x7bc>
    default:
      break;
 8013820:	bf00      	nop
 8013822:	e00c      	b.n	801383e <tcp_process+0x7be>
      break;
 8013824:	bf00      	nop
 8013826:	e00a      	b.n	801383e <tcp_process+0x7be>
      break;
 8013828:	bf00      	nop
 801382a:	e008      	b.n	801383e <tcp_process+0x7be>
      break;
 801382c:	bf00      	nop
 801382e:	e006      	b.n	801383e <tcp_process+0x7be>
      break;
 8013830:	bf00      	nop
 8013832:	e004      	b.n	801383e <tcp_process+0x7be>
      break;
 8013834:	bf00      	nop
 8013836:	e002      	b.n	801383e <tcp_process+0x7be>
      break;
 8013838:	bf00      	nop
 801383a:	e000      	b.n	801383e <tcp_process+0x7be>
      break;
 801383c:	bf00      	nop
  }
  return ERR_OK;
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3724      	adds	r7, #36	; 0x24
 8013844:	46bd      	mov	sp, r7
 8013846:	bd90      	pop	{r4, r7, pc}
 8013848:	2004f598 	.word	0x2004f598
 801384c:	2004f594 	.word	0x2004f594
 8013850:	2004f5c8 	.word	0x2004f5c8
 8013854:	2004f5c0 	.word	0x2004f5c0
 8013858:	2004f5c9 	.word	0x2004f5c9
 801385c:	2004f590 	.word	0x2004f590

08013860 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b085      	sub	sp, #20
 8013864:	af00      	add	r7, sp, #0
 8013866:	6078      	str	r0, [r7, #4]
 8013868:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	2b00      	cmp	r3, #0
 801386e:	d106      	bne.n	801387e <tcp_oos_insert_segment+0x1e>
 8013870:	4b3b      	ldr	r3, [pc, #236]	; (8013960 <tcp_oos_insert_segment+0x100>)
 8013872:	f240 421f 	movw	r2, #1055	; 0x41f
 8013876:	493b      	ldr	r1, [pc, #236]	; (8013964 <tcp_oos_insert_segment+0x104>)
 8013878:	483b      	ldr	r0, [pc, #236]	; (8013968 <tcp_oos_insert_segment+0x108>)
 801387a:	f006 fae3 	bl	8019e44 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	68db      	ldr	r3, [r3, #12]
 8013882:	899b      	ldrh	r3, [r3, #12]
 8013884:	b29b      	uxth	r3, r3
 8013886:	4618      	mov	r0, r3
 8013888:	f7fb f93e 	bl	800eb08 <lwip_htons>
 801388c:	4603      	mov	r3, r0
 801388e:	b2db      	uxtb	r3, r3
 8013890:	f003 0301 	and.w	r3, r3, #1
 8013894:	2b00      	cmp	r3, #0
 8013896:	d028      	beq.n	80138ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013898:	6838      	ldr	r0, [r7, #0]
 801389a:	f7fe f995 	bl	8011bc8 <tcp_segs_free>
    next = NULL;
 801389e:	2300      	movs	r3, #0
 80138a0:	603b      	str	r3, [r7, #0]
 80138a2:	e056      	b.n	8013952 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	68db      	ldr	r3, [r3, #12]
 80138a8:	899b      	ldrh	r3, [r3, #12]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7fb f92b 	bl	800eb08 <lwip_htons>
 80138b2:	4603      	mov	r3, r0
 80138b4:	b2db      	uxtb	r3, r3
 80138b6:	f003 0301 	and.w	r3, r3, #1
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00d      	beq.n	80138da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	68db      	ldr	r3, [r3, #12]
 80138c2:	899b      	ldrh	r3, [r3, #12]
 80138c4:	b29c      	uxth	r4, r3
 80138c6:	2001      	movs	r0, #1
 80138c8:	f7fb f91e 	bl	800eb08 <lwip_htons>
 80138cc:	4603      	mov	r3, r0
 80138ce:	461a      	mov	r2, r3
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	4322      	orrs	r2, r4
 80138d6:	b292      	uxth	r2, r2
 80138d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80138e4:	68f8      	ldr	r0, [r7, #12]
 80138e6:	f7fe f984 	bl	8011bf2 <tcp_seg_free>
    while (next &&
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d00e      	beq.n	801390e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	891b      	ldrh	r3, [r3, #8]
 80138f4:	461a      	mov	r2, r3
 80138f6:	4b1d      	ldr	r3, [pc, #116]	; (801396c <tcp_oos_insert_segment+0x10c>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	441a      	add	r2, r3
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	68db      	ldr	r3, [r3, #12]
 8013900:	685b      	ldr	r3, [r3, #4]
 8013902:	6839      	ldr	r1, [r7, #0]
 8013904:	8909      	ldrh	r1, [r1, #8]
 8013906:	440b      	add	r3, r1
 8013908:	1ad3      	subs	r3, r2, r3
    while (next &&
 801390a:	2b00      	cmp	r3, #0
 801390c:	daca      	bge.n	80138a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d01e      	beq.n	8013952 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	891b      	ldrh	r3, [r3, #8]
 8013918:	461a      	mov	r2, r3
 801391a:	4b14      	ldr	r3, [pc, #80]	; (801396c <tcp_oos_insert_segment+0x10c>)
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	441a      	add	r2, r3
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	685b      	ldr	r3, [r3, #4]
 8013926:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013928:	2b00      	cmp	r3, #0
 801392a:	dd12      	ble.n	8013952 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801392c:	683b      	ldr	r3, [r7, #0]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	b29a      	uxth	r2, r3
 8013934:	4b0d      	ldr	r3, [pc, #52]	; (801396c <tcp_oos_insert_segment+0x10c>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	b29b      	uxth	r3, r3
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	b29a      	uxth	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	685a      	ldr	r2, [r3, #4]
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	891b      	ldrh	r3, [r3, #8]
 801394a:	4619      	mov	r1, r3
 801394c:	4610      	mov	r0, r2
 801394e:	f7fc fb47 	bl	800ffe0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	683a      	ldr	r2, [r7, #0]
 8013956:	601a      	str	r2, [r3, #0]
}
 8013958:	bf00      	nop
 801395a:	3714      	adds	r7, #20
 801395c:	46bd      	mov	sp, r7
 801395e:	bd90      	pop	{r4, r7, pc}
 8013960:	0801ca80 	.word	0x0801ca80
 8013964:	0801cd40 	.word	0x0801cd40
 8013968:	0801cacc 	.word	0x0801cacc
 801396c:	2004f5bc 	.word	0x2004f5bc

08013970 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013970:	b5b0      	push	{r4, r5, r7, lr}
 8013972:	b086      	sub	sp, #24
 8013974:	af00      	add	r7, sp, #0
 8013976:	60f8      	str	r0, [r7, #12]
 8013978:	60b9      	str	r1, [r7, #8]
 801397a:	607a      	str	r2, [r7, #4]
 801397c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801397e:	e03e      	b.n	80139fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013980:	68bb      	ldr	r3, [r7, #8]
 8013982:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013984:	68bb      	ldr	r3, [r7, #8]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	4618      	mov	r0, r3
 8013990:	f7fc fd3a 	bl	8010408 <pbuf_clen>
 8013994:	4603      	mov	r3, r0
 8013996:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801399e:	8a7a      	ldrh	r2, [r7, #18]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	d906      	bls.n	80139b2 <tcp_free_acked_segments+0x42>
 80139a4:	4b2a      	ldr	r3, [pc, #168]	; (8013a50 <tcp_free_acked_segments+0xe0>)
 80139a6:	f240 4257 	movw	r2, #1111	; 0x457
 80139aa:	492a      	ldr	r1, [pc, #168]	; (8013a54 <tcp_free_acked_segments+0xe4>)
 80139ac:	482a      	ldr	r0, [pc, #168]	; (8013a58 <tcp_free_acked_segments+0xe8>)
 80139ae:	f006 fa49 	bl	8019e44 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80139b8:	8a7b      	ldrh	r3, [r7, #18]
 80139ba:	1ad3      	subs	r3, r2, r3
 80139bc:	b29a      	uxth	r2, r3
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	891a      	ldrh	r2, [r3, #8]
 80139c8:	4b24      	ldr	r3, [pc, #144]	; (8013a5c <tcp_free_acked_segments+0xec>)
 80139ca:	881b      	ldrh	r3, [r3, #0]
 80139cc:	4413      	add	r3, r2
 80139ce:	b29a      	uxth	r2, r3
 80139d0:	4b22      	ldr	r3, [pc, #136]	; (8013a5c <tcp_free_acked_segments+0xec>)
 80139d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80139d4:	6978      	ldr	r0, [r7, #20]
 80139d6:	f7fe f90c 	bl	8011bf2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d00c      	beq.n	80139fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d109      	bne.n	80139fe <tcp_free_acked_segments+0x8e>
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d106      	bne.n	80139fe <tcp_free_acked_segments+0x8e>
 80139f0:	4b17      	ldr	r3, [pc, #92]	; (8013a50 <tcp_free_acked_segments+0xe0>)
 80139f2:	f240 4261 	movw	r2, #1121	; 0x461
 80139f6:	491a      	ldr	r1, [pc, #104]	; (8013a60 <tcp_free_acked_segments+0xf0>)
 80139f8:	4817      	ldr	r0, [pc, #92]	; (8013a58 <tcp_free_acked_segments+0xe8>)
 80139fa:	f006 fa23 	bl	8019e44 <iprintf>
  while (seg_list != NULL &&
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d020      	beq.n	8013a46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	68db      	ldr	r3, [r3, #12]
 8013a08:	685b      	ldr	r3, [r3, #4]
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fb f891 	bl	800eb32 <lwip_htonl>
 8013a10:	4604      	mov	r4, r0
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	891b      	ldrh	r3, [r3, #8]
 8013a16:	461d      	mov	r5, r3
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	68db      	ldr	r3, [r3, #12]
 8013a1c:	899b      	ldrh	r3, [r3, #12]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7fb f871 	bl	800eb08 <lwip_htons>
 8013a26:	4603      	mov	r3, r0
 8013a28:	b2db      	uxtb	r3, r3
 8013a2a:	f003 0303 	and.w	r3, r3, #3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d001      	beq.n	8013a36 <tcp_free_acked_segments+0xc6>
 8013a32:	2301      	movs	r3, #1
 8013a34:	e000      	b.n	8013a38 <tcp_free_acked_segments+0xc8>
 8013a36:	2300      	movs	r3, #0
 8013a38:	442b      	add	r3, r5
 8013a3a:	18e2      	adds	r2, r4, r3
 8013a3c:	4b09      	ldr	r3, [pc, #36]	; (8013a64 <tcp_free_acked_segments+0xf4>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	dd9c      	ble.n	8013980 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013a46:	68bb      	ldr	r3, [r7, #8]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3718      	adds	r7, #24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8013a50:	0801ca80 	.word	0x0801ca80
 8013a54:	0801cd68 	.word	0x0801cd68
 8013a58:	0801cacc 	.word	0x0801cacc
 8013a5c:	2004f5c4 	.word	0x2004f5c4
 8013a60:	0801cd90 	.word	0x0801cd90
 8013a64:	2004f5c0 	.word	0x2004f5c0

08013a68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013a68:	b5b0      	push	{r4, r5, r7, lr}
 8013a6a:	b094      	sub	sp, #80	; 0x50
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013a70:	2300      	movs	r3, #0
 8013a72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d106      	bne.n	8013a88 <tcp_receive+0x20>
 8013a7a:	4b91      	ldr	r3, [pc, #580]	; (8013cc0 <tcp_receive+0x258>)
 8013a7c:	f240 427b 	movw	r2, #1147	; 0x47b
 8013a80:	4990      	ldr	r1, [pc, #576]	; (8013cc4 <tcp_receive+0x25c>)
 8013a82:	4891      	ldr	r0, [pc, #580]	; (8013cc8 <tcp_receive+0x260>)
 8013a84:	f006 f9de 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	7d1b      	ldrb	r3, [r3, #20]
 8013a8c:	2b03      	cmp	r3, #3
 8013a8e:	d806      	bhi.n	8013a9e <tcp_receive+0x36>
 8013a90:	4b8b      	ldr	r3, [pc, #556]	; (8013cc0 <tcp_receive+0x258>)
 8013a92:	f240 427c 	movw	r2, #1148	; 0x47c
 8013a96:	498d      	ldr	r1, [pc, #564]	; (8013ccc <tcp_receive+0x264>)
 8013a98:	488b      	ldr	r0, [pc, #556]	; (8013cc8 <tcp_receive+0x260>)
 8013a9a:	f006 f9d3 	bl	8019e44 <iprintf>

  if (flags & TCP_ACK) {
 8013a9e:	4b8c      	ldr	r3, [pc, #560]	; (8013cd0 <tcp_receive+0x268>)
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	f003 0310 	and.w	r3, r3, #16
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 8264 	beq.w	8013f74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ab8:	4413      	add	r3, r2
 8013aba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ac0:	4b84      	ldr	r3, [pc, #528]	; (8013cd4 <tcp_receive+0x26c>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	1ad3      	subs	r3, r2, r3
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	db1b      	blt.n	8013b02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013ace:	4b81      	ldr	r3, [pc, #516]	; (8013cd4 <tcp_receive+0x26c>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d106      	bne.n	8013ae4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013ada:	4b7f      	ldr	r3, [pc, #508]	; (8013cd8 <tcp_receive+0x270>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	1ad3      	subs	r3, r2, r3
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	db0e      	blt.n	8013b02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013ae8:	4b7b      	ldr	r3, [pc, #492]	; (8013cd8 <tcp_receive+0x270>)
 8013aea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d125      	bne.n	8013b3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013af0:	4b7a      	ldr	r3, [pc, #488]	; (8013cdc <tcp_receive+0x274>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	89db      	ldrh	r3, [r3, #14]
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d91c      	bls.n	8013b3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013b02:	4b76      	ldr	r3, [pc, #472]	; (8013cdc <tcp_receive+0x274>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	89db      	ldrh	r3, [r3, #14]
 8013b08:	b29a      	uxth	r2, r3
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d205      	bcs.n	8013b2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013b2c:	4b69      	ldr	r3, [pc, #420]	; (8013cd4 <tcp_receive+0x26c>)
 8013b2e:	681a      	ldr	r2, [r3, #0]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013b34:	4b68      	ldr	r3, [pc, #416]	; (8013cd8 <tcp_receive+0x270>)
 8013b36:	681a      	ldr	r2, [r3, #0]
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013b3c:	4b66      	ldr	r3, [pc, #408]	; (8013cd8 <tcp_receive+0x270>)
 8013b3e:	681a      	ldr	r2, [r3, #0]
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013b44:	1ad3      	subs	r3, r2, r3
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	dc58      	bgt.n	8013bfc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013b4a:	4b65      	ldr	r3, [pc, #404]	; (8013ce0 <tcp_receive+0x278>)
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d14b      	bne.n	8013bea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b56:	687a      	ldr	r2, [r7, #4]
 8013b58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013b5c:	4413      	add	r3, r2
 8013b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d142      	bne.n	8013bea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	db3d      	blt.n	8013bea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013b72:	4b59      	ldr	r3, [pc, #356]	; (8013cd8 <tcp_receive+0x270>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	429a      	cmp	r2, r3
 8013b78:	d137      	bne.n	8013bea <tcp_receive+0x182>
              found_dupack = 1;
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013b84:	2bff      	cmp	r3, #255	; 0xff
 8013b86:	d007      	beq.n	8013b98 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013b8e:	3301      	adds	r3, #1
 8013b90:	b2da      	uxtb	r2, r3
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013b9e:	2b03      	cmp	r3, #3
 8013ba0:	d91b      	bls.n	8013bda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bac:	4413      	add	r3, r2
 8013bae:	b29a      	uxth	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d30a      	bcc.n	8013bd0 <tcp_receive+0x168>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013bc4:	4413      	add	r3, r2
 8013bc6:	b29a      	uxth	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013bce:	e004      	b.n	8013bda <tcp_receive+0x172>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d902      	bls.n	8013bea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f002 fb43 	bl	8016270 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	f040 8161 	bne.w	8013eb4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013bfa:	e15b      	b.n	8013eb4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013bfc:	4b36      	ldr	r3, [pc, #216]	; (8013cd8 <tcp_receive+0x270>)
 8013bfe:	681a      	ldr	r2, [r3, #0]
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c04:	1ad3      	subs	r3, r2, r3
 8013c06:	3b01      	subs	r3, #1
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f2c0 814e 	blt.w	8013eaa <tcp_receive+0x442>
 8013c0e:	4b32      	ldr	r3, [pc, #200]	; (8013cd8 <tcp_receive+0x270>)
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c16:	1ad3      	subs	r3, r2, r3
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f300 8146 	bgt.w	8013eaa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	8b5b      	ldrh	r3, [r3, #26]
 8013c22:	f003 0304 	and.w	r3, r3, #4
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d010      	beq.n	8013c4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	8b5b      	ldrh	r3, [r3, #26]
 8013c2e:	f023 0304 	bic.w	r3, r3, #4
 8013c32:	b29a      	uxth	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	2200      	movs	r2, #0
 8013c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2200      	movs	r2, #0
 8013c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013c5a:	10db      	asrs	r3, r3, #3
 8013c5c:	b21b      	sxth	r3, r3
 8013c5e:	b29a      	uxth	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013c66:	b29b      	uxth	r3, r3
 8013c68:	4413      	add	r3, r2
 8013c6a:	b29b      	uxth	r3, r3
 8013c6c:	b21a      	sxth	r2, r3
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013c74:	4b18      	ldr	r3, [pc, #96]	; (8013cd8 <tcp_receive+0x270>)
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	b29a      	uxth	r2, r3
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2200      	movs	r2, #0
 8013c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013c8c:	4b12      	ldr	r3, [pc, #72]	; (8013cd8 <tcp_receive+0x270>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	7d1b      	ldrb	r3, [r3, #20]
 8013c98:	2b03      	cmp	r3, #3
 8013c9a:	f240 8097 	bls.w	8013dcc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013caa:	429a      	cmp	r2, r3
 8013cac:	d245      	bcs.n	8013d3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	8b5b      	ldrh	r3, [r3, #26]
 8013cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d014      	beq.n	8013ce4 <tcp_receive+0x27c>
 8013cba:	2301      	movs	r3, #1
 8013cbc:	e013      	b.n	8013ce6 <tcp_receive+0x27e>
 8013cbe:	bf00      	nop
 8013cc0:	0801ca80 	.word	0x0801ca80
 8013cc4:	0801cdb0 	.word	0x0801cdb0
 8013cc8:	0801cacc 	.word	0x0801cacc
 8013ccc:	0801cdcc 	.word	0x0801cdcc
 8013cd0:	2004f5c8 	.word	0x2004f5c8
 8013cd4:	2004f5bc 	.word	0x2004f5bc
 8013cd8:	2004f5c0 	.word	0x2004f5c0
 8013cdc:	2004f5ac 	.word	0x2004f5ac
 8013ce0:	2004f5c6 	.word	0x2004f5c6
 8013ce4:	2302      	movs	r3, #2
 8013ce6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013cea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013cee:	b29a      	uxth	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013cf4:	fb12 f303 	smulbb	r3, r2, r3
 8013cf8:	b29b      	uxth	r3, r3
 8013cfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	bf28      	it	cs
 8013d00:	4613      	movcs	r3, r2
 8013d02:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d0c:	4413      	add	r3, r2
 8013d0e:	b29a      	uxth	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d309      	bcc.n	8013d2e <tcp_receive+0x2c6>
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d22:	4413      	add	r3, r2
 8013d24:	b29a      	uxth	r2, r3
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d2c:	e04e      	b.n	8013dcc <tcp_receive+0x364>
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d38:	e048      	b.n	8013dcc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013d40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013d42:	4413      	add	r3, r2
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d309      	bcc.n	8013d64 <tcp_receive+0x2fc>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013d56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013d58:	4413      	add	r3, r2
 8013d5a:	b29a      	uxth	r2, r3
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013d62:	e004      	b.n	8013d6e <tcp_receive+0x306>
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d326      	bcc.n	8013dcc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d8a:	1ad3      	subs	r3, r2, r3
 8013d8c:	b29a      	uxth	r2, r3
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d9e:	4413      	add	r3, r2
 8013da0:	b29a      	uxth	r2, r3
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d30a      	bcc.n	8013dc2 <tcp_receive+0x35a>
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013db6:	4413      	add	r3, r2
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013dc0:	e004      	b.n	8013dcc <tcp_receive+0x364>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013dc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dd4:	4a98      	ldr	r2, [pc, #608]	; (8014038 <tcp_receive+0x5d0>)
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7ff fdca 	bl	8013970 <tcp_free_acked_segments>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dea:	4a94      	ldr	r2, [pc, #592]	; (801403c <tcp_receive+0x5d4>)
 8013dec:	6878      	ldr	r0, [r7, #4]
 8013dee:	f7ff fdbf 	bl	8013970 <tcp_free_acked_segments>
 8013df2:	4602      	mov	r2, r0
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d104      	bne.n	8013e0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e06:	861a      	strh	r2, [r3, #48]	; 0x30
 8013e08:	e002      	b.n	8013e10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	2200      	movs	r2, #0
 8013e0e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	2200      	movs	r2, #0
 8013e14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d103      	bne.n	8013e26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013e2c:	4b84      	ldr	r3, [pc, #528]	; (8014040 <tcp_receive+0x5d8>)
 8013e2e:	881b      	ldrh	r3, [r3, #0]
 8013e30:	4413      	add	r3, r2
 8013e32:	b29a      	uxth	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	8b5b      	ldrh	r3, [r3, #26]
 8013e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d035      	beq.n	8013eb2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d118      	bne.n	8013e80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d00c      	beq.n	8013e70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7fa fe65 	bl	800eb32 <lwip_htonl>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	dc20      	bgt.n	8013eb2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	8b5b      	ldrh	r3, [r3, #26]
 8013e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013e7e:	e018      	b.n	8013eb2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e88:	68db      	ldr	r3, [r3, #12]
 8013e8a:	685b      	ldr	r3, [r3, #4]
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fa fe50 	bl	800eb32 <lwip_htonl>
 8013e92:	4603      	mov	r3, r0
 8013e94:	1ae3      	subs	r3, r4, r3
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	dc0b      	bgt.n	8013eb2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	8b5b      	ldrh	r3, [r3, #26]
 8013e9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013ea2:	b29a      	uxth	r2, r3
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ea8:	e003      	b.n	8013eb2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f002 fbce 	bl	801664c <tcp_send_empty_ack>
 8013eb0:	e000      	b.n	8013eb4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013eb2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d05b      	beq.n	8013f74 <tcp_receive+0x50c>
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ec0:	4b60      	ldr	r3, [pc, #384]	; (8014044 <tcp_receive+0x5dc>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	1ad3      	subs	r3, r2, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	da54      	bge.n	8013f74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013eca:	4b5f      	ldr	r3, [pc, #380]	; (8014048 <tcp_receive+0x5e0>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	b29a      	uxth	r2, r3
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ed4:	b29b      	uxth	r3, r3
 8013ed6:	1ad3      	subs	r3, r2, r3
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013ede:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ee8:	10db      	asrs	r3, r3, #3
 8013eea:	b21b      	sxth	r3, r3
 8013eec:	b29b      	uxth	r3, r3
 8013eee:	1ad3      	subs	r3, r2, r3
 8013ef0:	b29b      	uxth	r3, r3
 8013ef2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013efc:	b29a      	uxth	r2, r3
 8013efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013f02:	4413      	add	r3, r2
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	b21a      	sxth	r2, r3
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013f0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	da05      	bge.n	8013f20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013f14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013f18:	425b      	negs	r3, r3
 8013f1a:	b29b      	uxth	r3, r3
 8013f1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013f20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013f2a:	109b      	asrs	r3, r3, #2
 8013f2c:	b21b      	sxth	r3, r3
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	1ad3      	subs	r3, r2, r3
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013f44:	4413      	add	r3, r2
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	b21a      	sxth	r2, r3
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f54:	10db      	asrs	r3, r3, #3
 8013f56:	b21b      	sxth	r3, r3
 8013f58:	b29a      	uxth	r2, r3
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013f60:	b29b      	uxth	r3, r3
 8013f62:	4413      	add	r3, r2
 8013f64:	b29b      	uxth	r3, r3
 8013f66:	b21a      	sxth	r2, r3
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2200      	movs	r2, #0
 8013f72:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013f74:	4b35      	ldr	r3, [pc, #212]	; (801404c <tcp_receive+0x5e4>)
 8013f76:	881b      	ldrh	r3, [r3, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	f000 84e2 	beq.w	8014942 <tcp_receive+0xeda>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	7d1b      	ldrb	r3, [r3, #20]
 8013f82:	2b06      	cmp	r3, #6
 8013f84:	f200 84dd 	bhi.w	8014942 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f8c:	4b30      	ldr	r3, [pc, #192]	; (8014050 <tcp_receive+0x5e8>)
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	1ad3      	subs	r3, r2, r3
 8013f92:	3b01      	subs	r3, #1
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f2c0 808f 	blt.w	80140b8 <tcp_receive+0x650>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f9e:	4b2b      	ldr	r3, [pc, #172]	; (801404c <tcp_receive+0x5e4>)
 8013fa0:	881b      	ldrh	r3, [r3, #0]
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	4b2a      	ldr	r3, [pc, #168]	; (8014050 <tcp_receive+0x5e8>)
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	440b      	add	r3, r1
 8013faa:	1ad3      	subs	r3, r2, r3
 8013fac:	3301      	adds	r3, #1
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	f300 8082 	bgt.w	80140b8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013fb4:	4b27      	ldr	r3, [pc, #156]	; (8014054 <tcp_receive+0x5ec>)
 8013fb6:	685b      	ldr	r3, [r3, #4]
 8013fb8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013fbe:	4b24      	ldr	r3, [pc, #144]	; (8014050 <tcp_receive+0x5e8>)
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	1ad3      	subs	r3, r2, r3
 8013fc4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013fc6:	4b23      	ldr	r3, [pc, #140]	; (8014054 <tcp_receive+0x5ec>)
 8013fc8:	685b      	ldr	r3, [r3, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d106      	bne.n	8013fdc <tcp_receive+0x574>
 8013fce:	4b22      	ldr	r3, [pc, #136]	; (8014058 <tcp_receive+0x5f0>)
 8013fd0:	f240 5294 	movw	r2, #1428	; 0x594
 8013fd4:	4921      	ldr	r1, [pc, #132]	; (801405c <tcp_receive+0x5f4>)
 8013fd6:	4822      	ldr	r0, [pc, #136]	; (8014060 <tcp_receive+0x5f8>)
 8013fd8:	f005 ff34 	bl	8019e44 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013fe2:	4293      	cmp	r3, r2
 8013fe4:	d906      	bls.n	8013ff4 <tcp_receive+0x58c>
 8013fe6:	4b1c      	ldr	r3, [pc, #112]	; (8014058 <tcp_receive+0x5f0>)
 8013fe8:	f240 5295 	movw	r2, #1429	; 0x595
 8013fec:	491d      	ldr	r1, [pc, #116]	; (8014064 <tcp_receive+0x5fc>)
 8013fee:	481c      	ldr	r0, [pc, #112]	; (8014060 <tcp_receive+0x5f8>)
 8013ff0:	f005 ff28 	bl	8019e44 <iprintf>
      off = (u16_t)off32;
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013ffa:	4b16      	ldr	r3, [pc, #88]	; (8014054 <tcp_receive+0x5ec>)
 8013ffc:	685b      	ldr	r3, [r3, #4]
 8013ffe:	891b      	ldrh	r3, [r3, #8]
 8014000:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014004:	429a      	cmp	r2, r3
 8014006:	d906      	bls.n	8014016 <tcp_receive+0x5ae>
 8014008:	4b13      	ldr	r3, [pc, #76]	; (8014058 <tcp_receive+0x5f0>)
 801400a:	f240 5297 	movw	r2, #1431	; 0x597
 801400e:	4916      	ldr	r1, [pc, #88]	; (8014068 <tcp_receive+0x600>)
 8014010:	4813      	ldr	r0, [pc, #76]	; (8014060 <tcp_receive+0x5f8>)
 8014012:	f005 ff17 	bl	8019e44 <iprintf>
      inseg.len -= off;
 8014016:	4b0f      	ldr	r3, [pc, #60]	; (8014054 <tcp_receive+0x5ec>)
 8014018:	891a      	ldrh	r2, [r3, #8]
 801401a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801401e:	1ad3      	subs	r3, r2, r3
 8014020:	b29a      	uxth	r2, r3
 8014022:	4b0c      	ldr	r3, [pc, #48]	; (8014054 <tcp_receive+0x5ec>)
 8014024:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014026:	4b0b      	ldr	r3, [pc, #44]	; (8014054 <tcp_receive+0x5ec>)
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	891a      	ldrh	r2, [r3, #8]
 801402c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014030:	1ad3      	subs	r3, r2, r3
 8014032:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014034:	e02a      	b.n	801408c <tcp_receive+0x624>
 8014036:	bf00      	nop
 8014038:	0801cde8 	.word	0x0801cde8
 801403c:	0801cdf0 	.word	0x0801cdf0
 8014040:	2004f5c4 	.word	0x2004f5c4
 8014044:	2004f5c0 	.word	0x2004f5c0
 8014048:	2004f584 	.word	0x2004f584
 801404c:	2004f5c6 	.word	0x2004f5c6
 8014050:	2004f5bc 	.word	0x2004f5bc
 8014054:	2004f59c 	.word	0x2004f59c
 8014058:	0801ca80 	.word	0x0801ca80
 801405c:	0801cdf8 	.word	0x0801cdf8
 8014060:	0801cacc 	.word	0x0801cacc
 8014064:	0801ce08 	.word	0x0801ce08
 8014068:	0801ce18 	.word	0x0801ce18
        off -= p->len;
 801406c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801406e:	895b      	ldrh	r3, [r3, #10]
 8014070:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014074:	1ad3      	subs	r3, r2, r3
 8014076:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801407a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801407c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801407e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014082:	2200      	movs	r2, #0
 8014084:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801408c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801408e:	895b      	ldrh	r3, [r3, #10]
 8014090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014094:	429a      	cmp	r2, r3
 8014096:	d8e9      	bhi.n	801406c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014098:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801409c:	4619      	mov	r1, r3
 801409e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80140a0:	f7fc f89e 	bl	80101e0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a8:	4a91      	ldr	r2, [pc, #580]	; (80142f0 <tcp_receive+0x888>)
 80140aa:	6013      	str	r3, [r2, #0]
 80140ac:	4b91      	ldr	r3, [pc, #580]	; (80142f4 <tcp_receive+0x88c>)
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	4a8f      	ldr	r2, [pc, #572]	; (80142f0 <tcp_receive+0x888>)
 80140b2:	6812      	ldr	r2, [r2, #0]
 80140b4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80140b6:	e00d      	b.n	80140d4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80140b8:	4b8d      	ldr	r3, [pc, #564]	; (80142f0 <tcp_receive+0x888>)
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c0:	1ad3      	subs	r3, r2, r3
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	da06      	bge.n	80140d4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	8b5b      	ldrh	r3, [r3, #26]
 80140ca:	f043 0302 	orr.w	r3, r3, #2
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80140d4:	4b86      	ldr	r3, [pc, #536]	; (80142f0 <tcp_receive+0x888>)
 80140d6:	681a      	ldr	r2, [r3, #0]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	f2c0 842a 	blt.w	8014938 <tcp_receive+0xed0>
 80140e4:	4b82      	ldr	r3, [pc, #520]	; (80142f0 <tcp_receive+0x888>)
 80140e6:	681a      	ldr	r2, [r3, #0]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140ec:	6879      	ldr	r1, [r7, #4]
 80140ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80140f0:	440b      	add	r3, r1
 80140f2:	1ad3      	subs	r3, r2, r3
 80140f4:	3301      	adds	r3, #1
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f300 841e 	bgt.w	8014938 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014100:	4b7b      	ldr	r3, [pc, #492]	; (80142f0 <tcp_receive+0x888>)
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	429a      	cmp	r2, r3
 8014106:	f040 829a 	bne.w	801463e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801410a:	4b7a      	ldr	r3, [pc, #488]	; (80142f4 <tcp_receive+0x88c>)
 801410c:	891c      	ldrh	r4, [r3, #8]
 801410e:	4b79      	ldr	r3, [pc, #484]	; (80142f4 <tcp_receive+0x88c>)
 8014110:	68db      	ldr	r3, [r3, #12]
 8014112:	899b      	ldrh	r3, [r3, #12]
 8014114:	b29b      	uxth	r3, r3
 8014116:	4618      	mov	r0, r3
 8014118:	f7fa fcf6 	bl	800eb08 <lwip_htons>
 801411c:	4603      	mov	r3, r0
 801411e:	b2db      	uxtb	r3, r3
 8014120:	f003 0303 	and.w	r3, r3, #3
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <tcp_receive+0x6c4>
 8014128:	2301      	movs	r3, #1
 801412a:	e000      	b.n	801412e <tcp_receive+0x6c6>
 801412c:	2300      	movs	r3, #0
 801412e:	4423      	add	r3, r4
 8014130:	b29a      	uxth	r2, r3
 8014132:	4b71      	ldr	r3, [pc, #452]	; (80142f8 <tcp_receive+0x890>)
 8014134:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801413a:	4b6f      	ldr	r3, [pc, #444]	; (80142f8 <tcp_receive+0x890>)
 801413c:	881b      	ldrh	r3, [r3, #0]
 801413e:	429a      	cmp	r2, r3
 8014140:	d275      	bcs.n	801422e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014142:	4b6c      	ldr	r3, [pc, #432]	; (80142f4 <tcp_receive+0x88c>)
 8014144:	68db      	ldr	r3, [r3, #12]
 8014146:	899b      	ldrh	r3, [r3, #12]
 8014148:	b29b      	uxth	r3, r3
 801414a:	4618      	mov	r0, r3
 801414c:	f7fa fcdc 	bl	800eb08 <lwip_htons>
 8014150:	4603      	mov	r3, r0
 8014152:	b2db      	uxtb	r3, r3
 8014154:	f003 0301 	and.w	r3, r3, #1
 8014158:	2b00      	cmp	r3, #0
 801415a:	d01f      	beq.n	801419c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801415c:	4b65      	ldr	r3, [pc, #404]	; (80142f4 <tcp_receive+0x88c>)
 801415e:	68db      	ldr	r3, [r3, #12]
 8014160:	899b      	ldrh	r3, [r3, #12]
 8014162:	b29b      	uxth	r3, r3
 8014164:	b21b      	sxth	r3, r3
 8014166:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801416a:	b21c      	sxth	r4, r3
 801416c:	4b61      	ldr	r3, [pc, #388]	; (80142f4 <tcp_receive+0x88c>)
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	899b      	ldrh	r3, [r3, #12]
 8014172:	b29b      	uxth	r3, r3
 8014174:	4618      	mov	r0, r3
 8014176:	f7fa fcc7 	bl	800eb08 <lwip_htons>
 801417a:	4603      	mov	r3, r0
 801417c:	b2db      	uxtb	r3, r3
 801417e:	b29b      	uxth	r3, r3
 8014180:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014184:	b29b      	uxth	r3, r3
 8014186:	4618      	mov	r0, r3
 8014188:	f7fa fcbe 	bl	800eb08 <lwip_htons>
 801418c:	4603      	mov	r3, r0
 801418e:	b21b      	sxth	r3, r3
 8014190:	4323      	orrs	r3, r4
 8014192:	b21a      	sxth	r2, r3
 8014194:	4b57      	ldr	r3, [pc, #348]	; (80142f4 <tcp_receive+0x88c>)
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	b292      	uxth	r2, r2
 801419a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80141a0:	4b54      	ldr	r3, [pc, #336]	; (80142f4 <tcp_receive+0x88c>)
 80141a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80141a4:	4b53      	ldr	r3, [pc, #332]	; (80142f4 <tcp_receive+0x88c>)
 80141a6:	68db      	ldr	r3, [r3, #12]
 80141a8:	899b      	ldrh	r3, [r3, #12]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	4618      	mov	r0, r3
 80141ae:	f7fa fcab 	bl	800eb08 <lwip_htons>
 80141b2:	4603      	mov	r3, r0
 80141b4:	b2db      	uxtb	r3, r3
 80141b6:	f003 0302 	and.w	r3, r3, #2
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d005      	beq.n	80141ca <tcp_receive+0x762>
            inseg.len -= 1;
 80141be:	4b4d      	ldr	r3, [pc, #308]	; (80142f4 <tcp_receive+0x88c>)
 80141c0:	891b      	ldrh	r3, [r3, #8]
 80141c2:	3b01      	subs	r3, #1
 80141c4:	b29a      	uxth	r2, r3
 80141c6:	4b4b      	ldr	r3, [pc, #300]	; (80142f4 <tcp_receive+0x88c>)
 80141c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80141ca:	4b4a      	ldr	r3, [pc, #296]	; (80142f4 <tcp_receive+0x88c>)
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	4a49      	ldr	r2, [pc, #292]	; (80142f4 <tcp_receive+0x88c>)
 80141d0:	8912      	ldrh	r2, [r2, #8]
 80141d2:	4611      	mov	r1, r2
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7fb ff03 	bl	800ffe0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80141da:	4b46      	ldr	r3, [pc, #280]	; (80142f4 <tcp_receive+0x88c>)
 80141dc:	891c      	ldrh	r4, [r3, #8]
 80141de:	4b45      	ldr	r3, [pc, #276]	; (80142f4 <tcp_receive+0x88c>)
 80141e0:	68db      	ldr	r3, [r3, #12]
 80141e2:	899b      	ldrh	r3, [r3, #12]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7fa fc8e 	bl	800eb08 <lwip_htons>
 80141ec:	4603      	mov	r3, r0
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	f003 0303 	and.w	r3, r3, #3
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d001      	beq.n	80141fc <tcp_receive+0x794>
 80141f8:	2301      	movs	r3, #1
 80141fa:	e000      	b.n	80141fe <tcp_receive+0x796>
 80141fc:	2300      	movs	r3, #0
 80141fe:	4423      	add	r3, r4
 8014200:	b29a      	uxth	r2, r3
 8014202:	4b3d      	ldr	r3, [pc, #244]	; (80142f8 <tcp_receive+0x890>)
 8014204:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014206:	4b3c      	ldr	r3, [pc, #240]	; (80142f8 <tcp_receive+0x890>)
 8014208:	881b      	ldrh	r3, [r3, #0]
 801420a:	461a      	mov	r2, r3
 801420c:	4b38      	ldr	r3, [pc, #224]	; (80142f0 <tcp_receive+0x888>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	441a      	add	r2, r3
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014216:	6879      	ldr	r1, [r7, #4]
 8014218:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801421a:	440b      	add	r3, r1
 801421c:	429a      	cmp	r2, r3
 801421e:	d006      	beq.n	801422e <tcp_receive+0x7c6>
 8014220:	4b36      	ldr	r3, [pc, #216]	; (80142fc <tcp_receive+0x894>)
 8014222:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014226:	4936      	ldr	r1, [pc, #216]	; (8014300 <tcp_receive+0x898>)
 8014228:	4836      	ldr	r0, [pc, #216]	; (8014304 <tcp_receive+0x89c>)
 801422a:	f005 fe0b 	bl	8019e44 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 80e7 	beq.w	8014406 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014238:	4b2e      	ldr	r3, [pc, #184]	; (80142f4 <tcp_receive+0x88c>)
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	899b      	ldrh	r3, [r3, #12]
 801423e:	b29b      	uxth	r3, r3
 8014240:	4618      	mov	r0, r3
 8014242:	f7fa fc61 	bl	800eb08 <lwip_htons>
 8014246:	4603      	mov	r3, r0
 8014248:	b2db      	uxtb	r3, r3
 801424a:	f003 0301 	and.w	r3, r3, #1
 801424e:	2b00      	cmp	r3, #0
 8014250:	d010      	beq.n	8014274 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014252:	e00a      	b.n	801426a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014258:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f7fd fcc4 	bl	8011bf2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1f0      	bne.n	8014254 <tcp_receive+0x7ec>
 8014272:	e0c8      	b.n	8014406 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014278:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801427a:	e052      	b.n	8014322 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801427c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	899b      	ldrh	r3, [r3, #12]
 8014282:	b29b      	uxth	r3, r3
 8014284:	4618      	mov	r0, r3
 8014286:	f7fa fc3f 	bl	800eb08 <lwip_htons>
 801428a:	4603      	mov	r3, r0
 801428c:	b2db      	uxtb	r3, r3
 801428e:	f003 0301 	and.w	r3, r3, #1
 8014292:	2b00      	cmp	r3, #0
 8014294:	d03d      	beq.n	8014312 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014296:	4b17      	ldr	r3, [pc, #92]	; (80142f4 <tcp_receive+0x88c>)
 8014298:	68db      	ldr	r3, [r3, #12]
 801429a:	899b      	ldrh	r3, [r3, #12]
 801429c:	b29b      	uxth	r3, r3
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fa fc32 	bl	800eb08 <lwip_htons>
 80142a4:	4603      	mov	r3, r0
 80142a6:	b2db      	uxtb	r3, r3
 80142a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d130      	bne.n	8014312 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80142b0:	4b10      	ldr	r3, [pc, #64]	; (80142f4 <tcp_receive+0x88c>)
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	899b      	ldrh	r3, [r3, #12]
 80142b6:	b29c      	uxth	r4, r3
 80142b8:	2001      	movs	r0, #1
 80142ba:	f7fa fc25 	bl	800eb08 <lwip_htons>
 80142be:	4603      	mov	r3, r0
 80142c0:	461a      	mov	r2, r3
 80142c2:	4b0c      	ldr	r3, [pc, #48]	; (80142f4 <tcp_receive+0x88c>)
 80142c4:	68db      	ldr	r3, [r3, #12]
 80142c6:	4322      	orrs	r2, r4
 80142c8:	b292      	uxth	r2, r2
 80142ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80142cc:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <tcp_receive+0x88c>)
 80142ce:	891c      	ldrh	r4, [r3, #8]
 80142d0:	4b08      	ldr	r3, [pc, #32]	; (80142f4 <tcp_receive+0x88c>)
 80142d2:	68db      	ldr	r3, [r3, #12]
 80142d4:	899b      	ldrh	r3, [r3, #12]
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4618      	mov	r0, r3
 80142da:	f7fa fc15 	bl	800eb08 <lwip_htons>
 80142de:	4603      	mov	r3, r0
 80142e0:	b2db      	uxtb	r3, r3
 80142e2:	f003 0303 	and.w	r3, r3, #3
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d00e      	beq.n	8014308 <tcp_receive+0x8a0>
 80142ea:	2301      	movs	r3, #1
 80142ec:	e00d      	b.n	801430a <tcp_receive+0x8a2>
 80142ee:	bf00      	nop
 80142f0:	2004f5bc 	.word	0x2004f5bc
 80142f4:	2004f59c 	.word	0x2004f59c
 80142f8:	2004f5c6 	.word	0x2004f5c6
 80142fc:	0801ca80 	.word	0x0801ca80
 8014300:	0801ce28 	.word	0x0801ce28
 8014304:	0801cacc 	.word	0x0801cacc
 8014308:	2300      	movs	r3, #0
 801430a:	4423      	add	r3, r4
 801430c:	b29a      	uxth	r2, r3
 801430e:	4b98      	ldr	r3, [pc, #608]	; (8014570 <tcp_receive+0xb08>)
 8014310:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014314:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801431c:	6938      	ldr	r0, [r7, #16]
 801431e:	f7fd fc68 	bl	8011bf2 <tcp_seg_free>
            while (next &&
 8014322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014324:	2b00      	cmp	r3, #0
 8014326:	d00e      	beq.n	8014346 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014328:	4b91      	ldr	r3, [pc, #580]	; (8014570 <tcp_receive+0xb08>)
 801432a:	881b      	ldrh	r3, [r3, #0]
 801432c:	461a      	mov	r2, r3
 801432e:	4b91      	ldr	r3, [pc, #580]	; (8014574 <tcp_receive+0xb0c>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	441a      	add	r2, r3
 8014334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	685b      	ldr	r3, [r3, #4]
 801433a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801433c:	8909      	ldrh	r1, [r1, #8]
 801433e:	440b      	add	r3, r1
 8014340:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014342:	2b00      	cmp	r3, #0
 8014344:	da9a      	bge.n	801427c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014348:	2b00      	cmp	r3, #0
 801434a:	d059      	beq.n	8014400 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801434c:	4b88      	ldr	r3, [pc, #544]	; (8014570 <tcp_receive+0xb08>)
 801434e:	881b      	ldrh	r3, [r3, #0]
 8014350:	461a      	mov	r2, r3
 8014352:	4b88      	ldr	r3, [pc, #544]	; (8014574 <tcp_receive+0xb0c>)
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	441a      	add	r2, r3
 8014358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801435a:	68db      	ldr	r3, [r3, #12]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014360:	2b00      	cmp	r3, #0
 8014362:	dd4d      	ble.n	8014400 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	b29a      	uxth	r2, r3
 801436c:	4b81      	ldr	r3, [pc, #516]	; (8014574 <tcp_receive+0xb0c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	b29b      	uxth	r3, r3
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	b29a      	uxth	r2, r3
 8014376:	4b80      	ldr	r3, [pc, #512]	; (8014578 <tcp_receive+0xb10>)
 8014378:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801437a:	4b7f      	ldr	r3, [pc, #508]	; (8014578 <tcp_receive+0xb10>)
 801437c:	68db      	ldr	r3, [r3, #12]
 801437e:	899b      	ldrh	r3, [r3, #12]
 8014380:	b29b      	uxth	r3, r3
 8014382:	4618      	mov	r0, r3
 8014384:	f7fa fbc0 	bl	800eb08 <lwip_htons>
 8014388:	4603      	mov	r3, r0
 801438a:	b2db      	uxtb	r3, r3
 801438c:	f003 0302 	and.w	r3, r3, #2
 8014390:	2b00      	cmp	r3, #0
 8014392:	d005      	beq.n	80143a0 <tcp_receive+0x938>
                inseg.len -= 1;
 8014394:	4b78      	ldr	r3, [pc, #480]	; (8014578 <tcp_receive+0xb10>)
 8014396:	891b      	ldrh	r3, [r3, #8]
 8014398:	3b01      	subs	r3, #1
 801439a:	b29a      	uxth	r2, r3
 801439c:	4b76      	ldr	r3, [pc, #472]	; (8014578 <tcp_receive+0xb10>)
 801439e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80143a0:	4b75      	ldr	r3, [pc, #468]	; (8014578 <tcp_receive+0xb10>)
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	4a74      	ldr	r2, [pc, #464]	; (8014578 <tcp_receive+0xb10>)
 80143a6:	8912      	ldrh	r2, [r2, #8]
 80143a8:	4611      	mov	r1, r2
 80143aa:	4618      	mov	r0, r3
 80143ac:	f7fb fe18 	bl	800ffe0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80143b0:	4b71      	ldr	r3, [pc, #452]	; (8014578 <tcp_receive+0xb10>)
 80143b2:	891c      	ldrh	r4, [r3, #8]
 80143b4:	4b70      	ldr	r3, [pc, #448]	; (8014578 <tcp_receive+0xb10>)
 80143b6:	68db      	ldr	r3, [r3, #12]
 80143b8:	899b      	ldrh	r3, [r3, #12]
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fa fba3 	bl	800eb08 <lwip_htons>
 80143c2:	4603      	mov	r3, r0
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	f003 0303 	and.w	r3, r3, #3
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d001      	beq.n	80143d2 <tcp_receive+0x96a>
 80143ce:	2301      	movs	r3, #1
 80143d0:	e000      	b.n	80143d4 <tcp_receive+0x96c>
 80143d2:	2300      	movs	r3, #0
 80143d4:	4423      	add	r3, r4
 80143d6:	b29a      	uxth	r2, r3
 80143d8:	4b65      	ldr	r3, [pc, #404]	; (8014570 <tcp_receive+0xb08>)
 80143da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80143dc:	4b64      	ldr	r3, [pc, #400]	; (8014570 <tcp_receive+0xb08>)
 80143de:	881b      	ldrh	r3, [r3, #0]
 80143e0:	461a      	mov	r2, r3
 80143e2:	4b64      	ldr	r3, [pc, #400]	; (8014574 <tcp_receive+0xb0c>)
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	441a      	add	r2, r3
 80143e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143ea:	68db      	ldr	r3, [r3, #12]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	429a      	cmp	r2, r3
 80143f0:	d006      	beq.n	8014400 <tcp_receive+0x998>
 80143f2:	4b62      	ldr	r3, [pc, #392]	; (801457c <tcp_receive+0xb14>)
 80143f4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80143f8:	4961      	ldr	r1, [pc, #388]	; (8014580 <tcp_receive+0xb18>)
 80143fa:	4862      	ldr	r0, [pc, #392]	; (8014584 <tcp_receive+0xb1c>)
 80143fc:	f005 fd22 	bl	8019e44 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014404:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014406:	4b5a      	ldr	r3, [pc, #360]	; (8014570 <tcp_receive+0xb08>)
 8014408:	881b      	ldrh	r3, [r3, #0]
 801440a:	461a      	mov	r2, r3
 801440c:	4b59      	ldr	r3, [pc, #356]	; (8014574 <tcp_receive+0xb0c>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	441a      	add	r2, r3
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801441a:	4b55      	ldr	r3, [pc, #340]	; (8014570 <tcp_receive+0xb08>)
 801441c:	881b      	ldrh	r3, [r3, #0]
 801441e:	429a      	cmp	r2, r3
 8014420:	d206      	bcs.n	8014430 <tcp_receive+0x9c8>
 8014422:	4b56      	ldr	r3, [pc, #344]	; (801457c <tcp_receive+0xb14>)
 8014424:	f240 6207 	movw	r2, #1543	; 0x607
 8014428:	4957      	ldr	r1, [pc, #348]	; (8014588 <tcp_receive+0xb20>)
 801442a:	4856      	ldr	r0, [pc, #344]	; (8014584 <tcp_receive+0xb1c>)
 801442c:	f005 fd0a 	bl	8019e44 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014434:	4b4e      	ldr	r3, [pc, #312]	; (8014570 <tcp_receive+0xb08>)
 8014436:	881b      	ldrh	r3, [r3, #0]
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	b29a      	uxth	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f7fc feb1 	bl	80111a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014446:	4b4c      	ldr	r3, [pc, #304]	; (8014578 <tcp_receive+0xb10>)
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	891b      	ldrh	r3, [r3, #8]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d006      	beq.n	801445e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014450:	4b49      	ldr	r3, [pc, #292]	; (8014578 <tcp_receive+0xb10>)
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	4a4d      	ldr	r2, [pc, #308]	; (801458c <tcp_receive+0xb24>)
 8014456:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014458:	4b47      	ldr	r3, [pc, #284]	; (8014578 <tcp_receive+0xb10>)
 801445a:	2200      	movs	r2, #0
 801445c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801445e:	4b46      	ldr	r3, [pc, #280]	; (8014578 <tcp_receive+0xb10>)
 8014460:	68db      	ldr	r3, [r3, #12]
 8014462:	899b      	ldrh	r3, [r3, #12]
 8014464:	b29b      	uxth	r3, r3
 8014466:	4618      	mov	r0, r3
 8014468:	f7fa fb4e 	bl	800eb08 <lwip_htons>
 801446c:	4603      	mov	r3, r0
 801446e:	b2db      	uxtb	r3, r3
 8014470:	f003 0301 	and.w	r3, r3, #1
 8014474:	2b00      	cmp	r3, #0
 8014476:	f000 80b8 	beq.w	80145ea <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801447a:	4b45      	ldr	r3, [pc, #276]	; (8014590 <tcp_receive+0xb28>)
 801447c:	781b      	ldrb	r3, [r3, #0]
 801447e:	f043 0320 	orr.w	r3, r3, #32
 8014482:	b2da      	uxtb	r2, r3
 8014484:	4b42      	ldr	r3, [pc, #264]	; (8014590 <tcp_receive+0xb28>)
 8014486:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014488:	e0af      	b.n	80145ea <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801448e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014494:	68db      	ldr	r3, [r3, #12]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	4a36      	ldr	r2, [pc, #216]	; (8014574 <tcp_receive+0xb0c>)
 801449a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	891b      	ldrh	r3, [r3, #8]
 80144a0:	461c      	mov	r4, r3
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	68db      	ldr	r3, [r3, #12]
 80144a6:	899b      	ldrh	r3, [r3, #12]
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fa fb2c 	bl	800eb08 <lwip_htons>
 80144b0:	4603      	mov	r3, r0
 80144b2:	b2db      	uxtb	r3, r3
 80144b4:	f003 0303 	and.w	r3, r3, #3
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d001      	beq.n	80144c0 <tcp_receive+0xa58>
 80144bc:	2301      	movs	r3, #1
 80144be:	e000      	b.n	80144c2 <tcp_receive+0xa5a>
 80144c0:	2300      	movs	r3, #0
 80144c2:	191a      	adds	r2, r3, r4
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c8:	441a      	add	r2, r3
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144d2:	461c      	mov	r4, r3
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	891b      	ldrh	r3, [r3, #8]
 80144d8:	461d      	mov	r5, r3
 80144da:	68bb      	ldr	r3, [r7, #8]
 80144dc:	68db      	ldr	r3, [r3, #12]
 80144de:	899b      	ldrh	r3, [r3, #12]
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	4618      	mov	r0, r3
 80144e4:	f7fa fb10 	bl	800eb08 <lwip_htons>
 80144e8:	4603      	mov	r3, r0
 80144ea:	b2db      	uxtb	r3, r3
 80144ec:	f003 0303 	and.w	r3, r3, #3
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d001      	beq.n	80144f8 <tcp_receive+0xa90>
 80144f4:	2301      	movs	r3, #1
 80144f6:	e000      	b.n	80144fa <tcp_receive+0xa92>
 80144f8:	2300      	movs	r3, #0
 80144fa:	442b      	add	r3, r5
 80144fc:	429c      	cmp	r4, r3
 80144fe:	d206      	bcs.n	801450e <tcp_receive+0xaa6>
 8014500:	4b1e      	ldr	r3, [pc, #120]	; (801457c <tcp_receive+0xb14>)
 8014502:	f240 622b 	movw	r2, #1579	; 0x62b
 8014506:	4923      	ldr	r1, [pc, #140]	; (8014594 <tcp_receive+0xb2c>)
 8014508:	481e      	ldr	r0, [pc, #120]	; (8014584 <tcp_receive+0xb1c>)
 801450a:	f005 fc9b 	bl	8019e44 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	891b      	ldrh	r3, [r3, #8]
 8014512:	461c      	mov	r4, r3
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	68db      	ldr	r3, [r3, #12]
 8014518:	899b      	ldrh	r3, [r3, #12]
 801451a:	b29b      	uxth	r3, r3
 801451c:	4618      	mov	r0, r3
 801451e:	f7fa faf3 	bl	800eb08 <lwip_htons>
 8014522:	4603      	mov	r3, r0
 8014524:	b2db      	uxtb	r3, r3
 8014526:	f003 0303 	and.w	r3, r3, #3
 801452a:	2b00      	cmp	r3, #0
 801452c:	d001      	beq.n	8014532 <tcp_receive+0xaca>
 801452e:	2301      	movs	r3, #1
 8014530:	e000      	b.n	8014534 <tcp_receive+0xacc>
 8014532:	2300      	movs	r3, #0
 8014534:	1919      	adds	r1, r3, r4
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801453a:	b28b      	uxth	r3, r1
 801453c:	1ad3      	subs	r3, r2, r3
 801453e:	b29a      	uxth	r2, r3
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014544:	6878      	ldr	r0, [r7, #4]
 8014546:	f7fc fe2f 	bl	80111a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	891b      	ldrh	r3, [r3, #8]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d028      	beq.n	80145a6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014554:	4b0d      	ldr	r3, [pc, #52]	; (801458c <tcp_receive+0xb24>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d01d      	beq.n	8014598 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801455c:	4b0b      	ldr	r3, [pc, #44]	; (801458c <tcp_receive+0xb24>)
 801455e:	681a      	ldr	r2, [r3, #0]
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	4619      	mov	r1, r3
 8014566:	4610      	mov	r0, r2
 8014568:	f7fb ff8e 	bl	8010488 <pbuf_cat>
 801456c:	e018      	b.n	80145a0 <tcp_receive+0xb38>
 801456e:	bf00      	nop
 8014570:	2004f5c6 	.word	0x2004f5c6
 8014574:	2004f5bc 	.word	0x2004f5bc
 8014578:	2004f59c 	.word	0x2004f59c
 801457c:	0801ca80 	.word	0x0801ca80
 8014580:	0801ce60 	.word	0x0801ce60
 8014584:	0801cacc 	.word	0x0801cacc
 8014588:	0801ce9c 	.word	0x0801ce9c
 801458c:	2004f5cc 	.word	0x2004f5cc
 8014590:	2004f5c9 	.word	0x2004f5c9
 8014594:	0801cebc 	.word	0x0801cebc
            } else {
              recv_data = cseg->p;
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	685b      	ldr	r3, [r3, #4]
 801459c:	4a70      	ldr	r2, [pc, #448]	; (8014760 <tcp_receive+0xcf8>)
 801459e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	2200      	movs	r2, #0
 80145a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	899b      	ldrh	r3, [r3, #12]
 80145ac:	b29b      	uxth	r3, r3
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7fa faaa 	bl	800eb08 <lwip_htons>
 80145b4:	4603      	mov	r3, r0
 80145b6:	b2db      	uxtb	r3, r3
 80145b8:	f003 0301 	and.w	r3, r3, #1
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d00d      	beq.n	80145dc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80145c0:	4b68      	ldr	r3, [pc, #416]	; (8014764 <tcp_receive+0xcfc>)
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	f043 0320 	orr.w	r3, r3, #32
 80145c8:	b2da      	uxtb	r2, r3
 80145ca:	4b66      	ldr	r3, [pc, #408]	; (8014764 <tcp_receive+0xcfc>)
 80145cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	7d1b      	ldrb	r3, [r3, #20]
 80145d2:	2b04      	cmp	r3, #4
 80145d4:	d102      	bne.n	80145dc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2207      	movs	r2, #7
 80145da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80145e4:	68b8      	ldr	r0, [r7, #8]
 80145e6:	f7fd fb04 	bl	8011bf2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d008      	beq.n	8014604 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145f6:	68db      	ldr	r3, [r3, #12]
 80145f8:	685a      	ldr	r2, [r3, #4]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80145fe:	429a      	cmp	r2, r3
 8014600:	f43f af43 	beq.w	801448a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	8b5b      	ldrh	r3, [r3, #26]
 8014608:	f003 0301 	and.w	r3, r3, #1
 801460c:	2b00      	cmp	r3, #0
 801460e:	d00e      	beq.n	801462e <tcp_receive+0xbc6>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	8b5b      	ldrh	r3, [r3, #26]
 8014614:	f023 0301 	bic.w	r3, r3, #1
 8014618:	b29a      	uxth	r2, r3
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	835a      	strh	r2, [r3, #26]
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8b5b      	ldrh	r3, [r3, #26]
 8014622:	f043 0302 	orr.w	r3, r3, #2
 8014626:	b29a      	uxth	r2, r3
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801462c:	e188      	b.n	8014940 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	8b5b      	ldrh	r3, [r3, #26]
 8014632:	f043 0301 	orr.w	r3, r3, #1
 8014636:	b29a      	uxth	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801463c:	e180      	b.n	8014940 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014642:	2b00      	cmp	r3, #0
 8014644:	d106      	bne.n	8014654 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014646:	4848      	ldr	r0, [pc, #288]	; (8014768 <tcp_receive+0xd00>)
 8014648:	f7fd faec 	bl	8011c24 <tcp_seg_copy>
 801464c:	4602      	mov	r2, r0
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	675a      	str	r2, [r3, #116]	; 0x74
 8014652:	e16d      	b.n	8014930 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014654:	2300      	movs	r3, #0
 8014656:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801465c:	63bb      	str	r3, [r7, #56]	; 0x38
 801465e:	e157      	b.n	8014910 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	685a      	ldr	r2, [r3, #4]
 8014666:	4b41      	ldr	r3, [pc, #260]	; (801476c <tcp_receive+0xd04>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	429a      	cmp	r2, r3
 801466c:	d11d      	bne.n	80146aa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801466e:	4b3e      	ldr	r3, [pc, #248]	; (8014768 <tcp_receive+0xd00>)
 8014670:	891a      	ldrh	r2, [r3, #8]
 8014672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014674:	891b      	ldrh	r3, [r3, #8]
 8014676:	429a      	cmp	r2, r3
 8014678:	f240 814f 	bls.w	801491a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801467c:	483a      	ldr	r0, [pc, #232]	; (8014768 <tcp_receive+0xd00>)
 801467e:	f7fd fad1 	bl	8011c24 <tcp_seg_copy>
 8014682:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	2b00      	cmp	r3, #0
 8014688:	f000 8149 	beq.w	801491e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801468c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801468e:	2b00      	cmp	r3, #0
 8014690:	d003      	beq.n	801469a <tcp_receive+0xc32>
                    prev->next = cseg;
 8014692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014694:	697a      	ldr	r2, [r7, #20]
 8014696:	601a      	str	r2, [r3, #0]
 8014698:	e002      	b.n	80146a0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	697a      	ldr	r2, [r7, #20]
 801469e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80146a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80146a2:	6978      	ldr	r0, [r7, #20]
 80146a4:	f7ff f8dc 	bl	8013860 <tcp_oos_insert_segment>
                }
                break;
 80146a8:	e139      	b.n	801491e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80146aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d117      	bne.n	80146e0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80146b0:	4b2e      	ldr	r3, [pc, #184]	; (801476c <tcp_receive+0xd04>)
 80146b2:	681a      	ldr	r2, [r3, #0]
 80146b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b6:	68db      	ldr	r3, [r3, #12]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	2b00      	cmp	r3, #0
 80146be:	da57      	bge.n	8014770 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80146c0:	4829      	ldr	r0, [pc, #164]	; (8014768 <tcp_receive+0xd00>)
 80146c2:	f7fd faaf 	bl	8011c24 <tcp_seg_copy>
 80146c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	f000 8129 	beq.w	8014922 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	69ba      	ldr	r2, [r7, #24]
 80146d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80146d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80146d8:	69b8      	ldr	r0, [r7, #24]
 80146da:	f7ff f8c1 	bl	8013860 <tcp_oos_insert_segment>
                  }
                  break;
 80146de:	e120      	b.n	8014922 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80146e0:	4b22      	ldr	r3, [pc, #136]	; (801476c <tcp_receive+0xd04>)
 80146e2:	681a      	ldr	r2, [r3, #0]
 80146e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146e6:	68db      	ldr	r3, [r3, #12]
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	1ad3      	subs	r3, r2, r3
 80146ec:	3b01      	subs	r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	db3e      	blt.n	8014770 <tcp_receive+0xd08>
 80146f2:	4b1e      	ldr	r3, [pc, #120]	; (801476c <tcp_receive+0xd04>)
 80146f4:	681a      	ldr	r2, [r3, #0]
 80146f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	685b      	ldr	r3, [r3, #4]
 80146fc:	1ad3      	subs	r3, r2, r3
 80146fe:	3301      	adds	r3, #1
 8014700:	2b00      	cmp	r3, #0
 8014702:	dc35      	bgt.n	8014770 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014704:	4818      	ldr	r0, [pc, #96]	; (8014768 <tcp_receive+0xd00>)
 8014706:	f7fd fa8d 	bl	8011c24 <tcp_seg_copy>
 801470a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801470c:	69fb      	ldr	r3, [r7, #28]
 801470e:	2b00      	cmp	r3, #0
 8014710:	f000 8109 	beq.w	8014926 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014716:	68db      	ldr	r3, [r3, #12]
 8014718:	685b      	ldr	r3, [r3, #4]
 801471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801471c:	8912      	ldrh	r2, [r2, #8]
 801471e:	441a      	add	r2, r3
 8014720:	4b12      	ldr	r3, [pc, #72]	; (801476c <tcp_receive+0xd04>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	2b00      	cmp	r3, #0
 8014728:	dd12      	ble.n	8014750 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801472a:	4b10      	ldr	r3, [pc, #64]	; (801476c <tcp_receive+0xd04>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	b29a      	uxth	r2, r3
 8014730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	b29b      	uxth	r3, r3
 8014738:	1ad3      	subs	r3, r2, r3
 801473a:	b29a      	uxth	r2, r3
 801473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801473e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014742:	685a      	ldr	r2, [r3, #4]
 8014744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014746:	891b      	ldrh	r3, [r3, #8]
 8014748:	4619      	mov	r1, r3
 801474a:	4610      	mov	r0, r2
 801474c:	f7fb fc48 	bl	800ffe0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014752:	69fa      	ldr	r2, [r7, #28]
 8014754:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014756:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014758:	69f8      	ldr	r0, [r7, #28]
 801475a:	f7ff f881 	bl	8013860 <tcp_oos_insert_segment>
                  }
                  break;
 801475e:	e0e2      	b.n	8014926 <tcp_receive+0xebe>
 8014760:	2004f5cc 	.word	0x2004f5cc
 8014764:	2004f5c9 	.word	0x2004f5c9
 8014768:	2004f59c 	.word	0x2004f59c
 801476c:	2004f5bc 	.word	0x2004f5bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014772:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	f040 80c6 	bne.w	801490a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801477e:	4b80      	ldr	r3, [pc, #512]	; (8014980 <tcp_receive+0xf18>)
 8014780:	681a      	ldr	r2, [r3, #0]
 8014782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801478a:	2b00      	cmp	r3, #0
 801478c:	f340 80bd 	ble.w	801490a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	899b      	ldrh	r3, [r3, #12]
 8014796:	b29b      	uxth	r3, r3
 8014798:	4618      	mov	r0, r3
 801479a:	f7fa f9b5 	bl	800eb08 <lwip_htons>
 801479e:	4603      	mov	r3, r0
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	f003 0301 	and.w	r3, r3, #1
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	f040 80bf 	bne.w	801492a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80147ac:	4875      	ldr	r0, [pc, #468]	; (8014984 <tcp_receive+0xf1c>)
 80147ae:	f7fd fa39 	bl	8011c24 <tcp_seg_copy>
 80147b2:	4602      	mov	r2, r0
 80147b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80147b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	f000 80b6 	beq.w	801492e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80147c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c4:	68db      	ldr	r3, [r3, #12]
 80147c6:	685b      	ldr	r3, [r3, #4]
 80147c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147ca:	8912      	ldrh	r2, [r2, #8]
 80147cc:	441a      	add	r2, r3
 80147ce:	4b6c      	ldr	r3, [pc, #432]	; (8014980 <tcp_receive+0xf18>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	1ad3      	subs	r3, r2, r3
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	dd12      	ble.n	80147fe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80147d8:	4b69      	ldr	r3, [pc, #420]	; (8014980 <tcp_receive+0xf18>)
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	b29a      	uxth	r2, r3
 80147de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	1ad3      	subs	r3, r2, r3
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80147ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f0:	685a      	ldr	r2, [r3, #4]
 80147f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f4:	891b      	ldrh	r3, [r3, #8]
 80147f6:	4619      	mov	r1, r3
 80147f8:	4610      	mov	r0, r2
 80147fa:	f7fb fbf1 	bl	800ffe0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80147fe:	4b62      	ldr	r3, [pc, #392]	; (8014988 <tcp_receive+0xf20>)
 8014800:	881b      	ldrh	r3, [r3, #0]
 8014802:	461a      	mov	r2, r3
 8014804:	4b5e      	ldr	r3, [pc, #376]	; (8014980 <tcp_receive+0xf18>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	441a      	add	r2, r3
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801480e:	6879      	ldr	r1, [r7, #4]
 8014810:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014812:	440b      	add	r3, r1
 8014814:	1ad3      	subs	r3, r2, r3
 8014816:	2b00      	cmp	r3, #0
 8014818:	f340 8089 	ble.w	801492e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	899b      	ldrh	r3, [r3, #12]
 8014824:	b29b      	uxth	r3, r3
 8014826:	4618      	mov	r0, r3
 8014828:	f7fa f96e 	bl	800eb08 <lwip_htons>
 801482c:	4603      	mov	r3, r0
 801482e:	b2db      	uxtb	r3, r3
 8014830:	f003 0301 	and.w	r3, r3, #1
 8014834:	2b00      	cmp	r3, #0
 8014836:	d022      	beq.n	801487e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	68db      	ldr	r3, [r3, #12]
 801483e:	899b      	ldrh	r3, [r3, #12]
 8014840:	b29b      	uxth	r3, r3
 8014842:	b21b      	sxth	r3, r3
 8014844:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014848:	b21c      	sxth	r4, r3
 801484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	899b      	ldrh	r3, [r3, #12]
 8014852:	b29b      	uxth	r3, r3
 8014854:	4618      	mov	r0, r3
 8014856:	f7fa f957 	bl	800eb08 <lwip_htons>
 801485a:	4603      	mov	r3, r0
 801485c:	b2db      	uxtb	r3, r3
 801485e:	b29b      	uxth	r3, r3
 8014860:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014864:	b29b      	uxth	r3, r3
 8014866:	4618      	mov	r0, r3
 8014868:	f7fa f94e 	bl	800eb08 <lwip_htons>
 801486c:	4603      	mov	r3, r0
 801486e:	b21b      	sxth	r3, r3
 8014870:	4323      	orrs	r3, r4
 8014872:	b21a      	sxth	r2, r3
 8014874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68db      	ldr	r3, [r3, #12]
 801487a:	b292      	uxth	r2, r2
 801487c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014882:	b29a      	uxth	r2, r3
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014888:	4413      	add	r3, r2
 801488a:	b299      	uxth	r1, r3
 801488c:	4b3c      	ldr	r3, [pc, #240]	; (8014980 <tcp_receive+0xf18>)
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	b29a      	uxth	r2, r3
 8014892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	1a8a      	subs	r2, r1, r2
 8014898:	b292      	uxth	r2, r2
 801489a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	685a      	ldr	r2, [r3, #4]
 80148a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a4:	681b      	ldr	r3, [r3, #0]
 80148a6:	891b      	ldrh	r3, [r3, #8]
 80148a8:	4619      	mov	r1, r3
 80148aa:	4610      	mov	r0, r2
 80148ac:	f7fb fb98 	bl	800ffe0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80148b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	891c      	ldrh	r4, [r3, #8]
 80148b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	899b      	ldrh	r3, [r3, #12]
 80148be:	b29b      	uxth	r3, r3
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fa f921 	bl	800eb08 <lwip_htons>
 80148c6:	4603      	mov	r3, r0
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	f003 0303 	and.w	r3, r3, #3
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d001      	beq.n	80148d6 <tcp_receive+0xe6e>
 80148d2:	2301      	movs	r3, #1
 80148d4:	e000      	b.n	80148d8 <tcp_receive+0xe70>
 80148d6:	2300      	movs	r3, #0
 80148d8:	4423      	add	r3, r4
 80148da:	b29a      	uxth	r2, r3
 80148dc:	4b2a      	ldr	r3, [pc, #168]	; (8014988 <tcp_receive+0xf20>)
 80148de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80148e0:	4b29      	ldr	r3, [pc, #164]	; (8014988 <tcp_receive+0xf20>)
 80148e2:	881b      	ldrh	r3, [r3, #0]
 80148e4:	461a      	mov	r2, r3
 80148e6:	4b26      	ldr	r3, [pc, #152]	; (8014980 <tcp_receive+0xf18>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	441a      	add	r2, r3
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148f0:	6879      	ldr	r1, [r7, #4]
 80148f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80148f4:	440b      	add	r3, r1
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d019      	beq.n	801492e <tcp_receive+0xec6>
 80148fa:	4b24      	ldr	r3, [pc, #144]	; (801498c <tcp_receive+0xf24>)
 80148fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014900:	4923      	ldr	r1, [pc, #140]	; (8014990 <tcp_receive+0xf28>)
 8014902:	4824      	ldr	r0, [pc, #144]	; (8014994 <tcp_receive+0xf2c>)
 8014904:	f005 fa9e 	bl	8019e44 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014908:	e011      	b.n	801492e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014912:	2b00      	cmp	r3, #0
 8014914:	f47f aea4 	bne.w	8014660 <tcp_receive+0xbf8>
 8014918:	e00a      	b.n	8014930 <tcp_receive+0xec8>
                break;
 801491a:	bf00      	nop
 801491c:	e008      	b.n	8014930 <tcp_receive+0xec8>
                break;
 801491e:	bf00      	nop
 8014920:	e006      	b.n	8014930 <tcp_receive+0xec8>
                  break;
 8014922:	bf00      	nop
 8014924:	e004      	b.n	8014930 <tcp_receive+0xec8>
                  break;
 8014926:	bf00      	nop
 8014928:	e002      	b.n	8014930 <tcp_receive+0xec8>
                  break;
 801492a:	bf00      	nop
 801492c:	e000      	b.n	8014930 <tcp_receive+0xec8>
                break;
 801492e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014930:	6878      	ldr	r0, [r7, #4]
 8014932:	f001 fe8b 	bl	801664c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014936:	e003      	b.n	8014940 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f001 fe87 	bl	801664c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801493e:	e01a      	b.n	8014976 <tcp_receive+0xf0e>
 8014940:	e019      	b.n	8014976 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014942:	4b0f      	ldr	r3, [pc, #60]	; (8014980 <tcp_receive+0xf18>)
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494a:	1ad3      	subs	r3, r2, r3
 801494c:	2b00      	cmp	r3, #0
 801494e:	db0a      	blt.n	8014966 <tcp_receive+0xefe>
 8014950:	4b0b      	ldr	r3, [pc, #44]	; (8014980 <tcp_receive+0xf18>)
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014958:	6879      	ldr	r1, [r7, #4]
 801495a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801495c:	440b      	add	r3, r1
 801495e:	1ad3      	subs	r3, r2, r3
 8014960:	3301      	adds	r3, #1
 8014962:	2b00      	cmp	r3, #0
 8014964:	dd07      	ble.n	8014976 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	8b5b      	ldrh	r3, [r3, #26]
 801496a:	f043 0302 	orr.w	r3, r3, #2
 801496e:	b29a      	uxth	r2, r3
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014974:	e7ff      	b.n	8014976 <tcp_receive+0xf0e>
 8014976:	bf00      	nop
 8014978:	3750      	adds	r7, #80	; 0x50
 801497a:	46bd      	mov	sp, r7
 801497c:	bdb0      	pop	{r4, r5, r7, pc}
 801497e:	bf00      	nop
 8014980:	2004f5bc 	.word	0x2004f5bc
 8014984:	2004f59c 	.word	0x2004f59c
 8014988:	2004f5c6 	.word	0x2004f5c6
 801498c:	0801ca80 	.word	0x0801ca80
 8014990:	0801ce28 	.word	0x0801ce28
 8014994:	0801cacc 	.word	0x0801cacc

08014998 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014998:	b480      	push	{r7}
 801499a:	b083      	sub	sp, #12
 801499c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801499e:	4b15      	ldr	r3, [pc, #84]	; (80149f4 <tcp_get_next_optbyte+0x5c>)
 80149a0:	881b      	ldrh	r3, [r3, #0]
 80149a2:	1c5a      	adds	r2, r3, #1
 80149a4:	b291      	uxth	r1, r2
 80149a6:	4a13      	ldr	r2, [pc, #76]	; (80149f4 <tcp_get_next_optbyte+0x5c>)
 80149a8:	8011      	strh	r1, [r2, #0]
 80149aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80149ac:	4b12      	ldr	r3, [pc, #72]	; (80149f8 <tcp_get_next_optbyte+0x60>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d004      	beq.n	80149be <tcp_get_next_optbyte+0x26>
 80149b4:	4b11      	ldr	r3, [pc, #68]	; (80149fc <tcp_get_next_optbyte+0x64>)
 80149b6:	881b      	ldrh	r3, [r3, #0]
 80149b8:	88fa      	ldrh	r2, [r7, #6]
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d208      	bcs.n	80149d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80149be:	4b10      	ldr	r3, [pc, #64]	; (8014a00 <tcp_get_next_optbyte+0x68>)
 80149c0:	681b      	ldr	r3, [r3, #0]
 80149c2:	3314      	adds	r3, #20
 80149c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80149c6:	88fb      	ldrh	r3, [r7, #6]
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	4413      	add	r3, r2
 80149cc:	781b      	ldrb	r3, [r3, #0]
 80149ce:	e00b      	b.n	80149e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80149d0:	88fb      	ldrh	r3, [r7, #6]
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	4b09      	ldr	r3, [pc, #36]	; (80149fc <tcp_get_next_optbyte+0x64>)
 80149d6:	881b      	ldrh	r3, [r3, #0]
 80149d8:	b2db      	uxtb	r3, r3
 80149da:	1ad3      	subs	r3, r2, r3
 80149dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80149de:	4b06      	ldr	r3, [pc, #24]	; (80149f8 <tcp_get_next_optbyte+0x60>)
 80149e0:	681a      	ldr	r2, [r3, #0]
 80149e2:	797b      	ldrb	r3, [r7, #5]
 80149e4:	4413      	add	r3, r2
 80149e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80149e8:	4618      	mov	r0, r3
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr
 80149f4:	2004f5b8 	.word	0x2004f5b8
 80149f8:	2004f5b4 	.word	0x2004f5b4
 80149fc:	2004f5b2 	.word	0x2004f5b2
 8014a00:	2004f5ac 	.word	0x2004f5ac

08014a04 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b084      	sub	sp, #16
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d106      	bne.n	8014a20 <tcp_parseopt+0x1c>
 8014a12:	4b32      	ldr	r3, [pc, #200]	; (8014adc <tcp_parseopt+0xd8>)
 8014a14:	f240 727d 	movw	r2, #1917	; 0x77d
 8014a18:	4931      	ldr	r1, [pc, #196]	; (8014ae0 <tcp_parseopt+0xdc>)
 8014a1a:	4832      	ldr	r0, [pc, #200]	; (8014ae4 <tcp_parseopt+0xe0>)
 8014a1c:	f005 fa12 	bl	8019e44 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014a20:	4b31      	ldr	r3, [pc, #196]	; (8014ae8 <tcp_parseopt+0xe4>)
 8014a22:	881b      	ldrh	r3, [r3, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d055      	beq.n	8014ad4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014a28:	4b30      	ldr	r3, [pc, #192]	; (8014aec <tcp_parseopt+0xe8>)
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	801a      	strh	r2, [r3, #0]
 8014a2e:	e045      	b.n	8014abc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014a30:	f7ff ffb2 	bl	8014998 <tcp_get_next_optbyte>
 8014a34:	4603      	mov	r3, r0
 8014a36:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014a38:	7bfb      	ldrb	r3, [r7, #15]
 8014a3a:	2b02      	cmp	r3, #2
 8014a3c:	d006      	beq.n	8014a4c <tcp_parseopt+0x48>
 8014a3e:	2b02      	cmp	r3, #2
 8014a40:	dc2b      	bgt.n	8014a9a <tcp_parseopt+0x96>
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d041      	beq.n	8014aca <tcp_parseopt+0xc6>
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d127      	bne.n	8014a9a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014a4a:	e037      	b.n	8014abc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014a4c:	f7ff ffa4 	bl	8014998 <tcp_get_next_optbyte>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b04      	cmp	r3, #4
 8014a54:	d13b      	bne.n	8014ace <tcp_parseopt+0xca>
 8014a56:	4b25      	ldr	r3, [pc, #148]	; (8014aec <tcp_parseopt+0xe8>)
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	4a22      	ldr	r2, [pc, #136]	; (8014ae8 <tcp_parseopt+0xe4>)
 8014a5e:	8812      	ldrh	r2, [r2, #0]
 8014a60:	4293      	cmp	r3, r2
 8014a62:	da34      	bge.n	8014ace <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014a64:	f7ff ff98 	bl	8014998 <tcp_get_next_optbyte>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	b29b      	uxth	r3, r3
 8014a6c:	021b      	lsls	r3, r3, #8
 8014a6e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014a70:	f7ff ff92 	bl	8014998 <tcp_get_next_optbyte>
 8014a74:	4603      	mov	r3, r0
 8014a76:	b29a      	uxth	r2, r3
 8014a78:	89bb      	ldrh	r3, [r7, #12]
 8014a7a:	4313      	orrs	r3, r2
 8014a7c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014a7e:	89bb      	ldrh	r3, [r7, #12]
 8014a80:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014a84:	d804      	bhi.n	8014a90 <tcp_parseopt+0x8c>
 8014a86:	89bb      	ldrh	r3, [r7, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d001      	beq.n	8014a90 <tcp_parseopt+0x8c>
 8014a8c:	89ba      	ldrh	r2, [r7, #12]
 8014a8e:	e001      	b.n	8014a94 <tcp_parseopt+0x90>
 8014a90:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014a98:	e010      	b.n	8014abc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014a9a:	f7ff ff7d 	bl	8014998 <tcp_get_next_optbyte>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014aa2:	7afb      	ldrb	r3, [r7, #11]
 8014aa4:	2b01      	cmp	r3, #1
 8014aa6:	d914      	bls.n	8014ad2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014aa8:	7afb      	ldrb	r3, [r7, #11]
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	4b0f      	ldr	r3, [pc, #60]	; (8014aec <tcp_parseopt+0xe8>)
 8014aae:	881b      	ldrh	r3, [r3, #0]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	3b02      	subs	r3, #2
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	4b0c      	ldr	r3, [pc, #48]	; (8014aec <tcp_parseopt+0xe8>)
 8014aba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014abc:	4b0b      	ldr	r3, [pc, #44]	; (8014aec <tcp_parseopt+0xe8>)
 8014abe:	881a      	ldrh	r2, [r3, #0]
 8014ac0:	4b09      	ldr	r3, [pc, #36]	; (8014ae8 <tcp_parseopt+0xe4>)
 8014ac2:	881b      	ldrh	r3, [r3, #0]
 8014ac4:	429a      	cmp	r2, r3
 8014ac6:	d3b3      	bcc.n	8014a30 <tcp_parseopt+0x2c>
 8014ac8:	e004      	b.n	8014ad4 <tcp_parseopt+0xd0>
          return;
 8014aca:	bf00      	nop
 8014acc:	e002      	b.n	8014ad4 <tcp_parseopt+0xd0>
            return;
 8014ace:	bf00      	nop
 8014ad0:	e000      	b.n	8014ad4 <tcp_parseopt+0xd0>
            return;
 8014ad2:	bf00      	nop
      }
    }
  }
}
 8014ad4:	3710      	adds	r7, #16
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	0801ca80 	.word	0x0801ca80
 8014ae0:	0801cee4 	.word	0x0801cee4
 8014ae4:	0801cacc 	.word	0x0801cacc
 8014ae8:	2004f5b0 	.word	0x2004f5b0
 8014aec:	2004f5b8 	.word	0x2004f5b8

08014af0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014af0:	b480      	push	{r7}
 8014af2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014af4:	4b05      	ldr	r3, [pc, #20]	; (8014b0c <tcp_trigger_input_pcb_close+0x1c>)
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	f043 0310 	orr.w	r3, r3, #16
 8014afc:	b2da      	uxtb	r2, r3
 8014afe:	4b03      	ldr	r3, [pc, #12]	; (8014b0c <tcp_trigger_input_pcb_close+0x1c>)
 8014b00:	701a      	strb	r2, [r3, #0]
}
 8014b02:	bf00      	nop
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr
 8014b0c:	2004f5c9 	.word	0x2004f5c9

08014b10 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b084      	sub	sp, #16
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d00a      	beq.n	8014b38 <tcp_route+0x28>
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	7a1b      	ldrb	r3, [r3, #8]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d006      	beq.n	8014b38 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	7a1b      	ldrb	r3, [r3, #8]
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fb f84e 	bl	800fbd0 <netif_get_by_index>
 8014b34:	4603      	mov	r3, r0
 8014b36:	e003      	b.n	8014b40 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f003 fc09 	bl	8018350 <ip4_route>
 8014b3e:	4603      	mov	r3, r0
  }
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3710      	adds	r7, #16
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014b48:	b590      	push	{r4, r7, lr}
 8014b4a:	b087      	sub	sp, #28
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	60f8      	str	r0, [r7, #12]
 8014b50:	60b9      	str	r1, [r7, #8]
 8014b52:	603b      	str	r3, [r7, #0]
 8014b54:	4613      	mov	r3, r2
 8014b56:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d105      	bne.n	8014b6a <tcp_create_segment+0x22>
 8014b5e:	4b44      	ldr	r3, [pc, #272]	; (8014c70 <tcp_create_segment+0x128>)
 8014b60:	22a3      	movs	r2, #163	; 0xa3
 8014b62:	4944      	ldr	r1, [pc, #272]	; (8014c74 <tcp_create_segment+0x12c>)
 8014b64:	4844      	ldr	r0, [pc, #272]	; (8014c78 <tcp_create_segment+0x130>)
 8014b66:	f005 f96d 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d105      	bne.n	8014b7c <tcp_create_segment+0x34>
 8014b70:	4b3f      	ldr	r3, [pc, #252]	; (8014c70 <tcp_create_segment+0x128>)
 8014b72:	22a4      	movs	r2, #164	; 0xa4
 8014b74:	4941      	ldr	r1, [pc, #260]	; (8014c7c <tcp_create_segment+0x134>)
 8014b76:	4840      	ldr	r0, [pc, #256]	; (8014c78 <tcp_create_segment+0x130>)
 8014b78:	f005 f964 	bl	8019e44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b80:	009b      	lsls	r3, r3, #2
 8014b82:	b2db      	uxtb	r3, r3
 8014b84:	f003 0304 	and.w	r3, r3, #4
 8014b88:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014b8a:	2003      	movs	r0, #3
 8014b8c:	f7fa fc94 	bl	800f4b8 <memp_malloc>
 8014b90:	6138      	str	r0, [r7, #16]
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d104      	bne.n	8014ba2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014b98:	68b8      	ldr	r0, [r7, #8]
 8014b9a:	f7fb fba7 	bl	80102ec <pbuf_free>
    return NULL;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	e061      	b.n	8014c66 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014ba8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	2200      	movs	r2, #0
 8014bae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	68ba      	ldr	r2, [r7, #8]
 8014bb4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	891a      	ldrh	r2, [r3, #8]
 8014bba:	7dfb      	ldrb	r3, [r7, #23]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	429a      	cmp	r2, r3
 8014bc0:	d205      	bcs.n	8014bce <tcp_create_segment+0x86>
 8014bc2:	4b2b      	ldr	r3, [pc, #172]	; (8014c70 <tcp_create_segment+0x128>)
 8014bc4:	22b0      	movs	r2, #176	; 0xb0
 8014bc6:	492e      	ldr	r1, [pc, #184]	; (8014c80 <tcp_create_segment+0x138>)
 8014bc8:	482b      	ldr	r0, [pc, #172]	; (8014c78 <tcp_create_segment+0x130>)
 8014bca:	f005 f93b 	bl	8019e44 <iprintf>
  seg->len = p->tot_len - optlen;
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	891a      	ldrh	r2, [r3, #8]
 8014bd2:	7dfb      	ldrb	r3, [r7, #23]
 8014bd4:	b29b      	uxth	r3, r3
 8014bd6:	1ad3      	subs	r3, r2, r3
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	693b      	ldr	r3, [r7, #16]
 8014bdc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014bde:	2114      	movs	r1, #20
 8014be0:	68b8      	ldr	r0, [r7, #8]
 8014be2:	f7fb faed 	bl	80101c0 <pbuf_add_header>
 8014be6:	4603      	mov	r3, r0
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d004      	beq.n	8014bf6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014bec:	6938      	ldr	r0, [r7, #16]
 8014bee:	f7fd f800 	bl	8011bf2 <tcp_seg_free>
    return NULL;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	e037      	b.n	8014c66 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014bf6:	693b      	ldr	r3, [r7, #16]
 8014bf8:	685b      	ldr	r3, [r3, #4]
 8014bfa:	685a      	ldr	r2, [r3, #4]
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	8ada      	ldrh	r2, [r3, #22]
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	68dc      	ldr	r4, [r3, #12]
 8014c08:	4610      	mov	r0, r2
 8014c0a:	f7f9 ff7d 	bl	800eb08 <lwip_htons>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	8b1a      	ldrh	r2, [r3, #24]
 8014c16:	693b      	ldr	r3, [r7, #16]
 8014c18:	68dc      	ldr	r4, [r3, #12]
 8014c1a:	4610      	mov	r0, r2
 8014c1c:	f7f9 ff74 	bl	800eb08 <lwip_htons>
 8014c20:	4603      	mov	r3, r0
 8014c22:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	68dc      	ldr	r4, [r3, #12]
 8014c28:	6838      	ldr	r0, [r7, #0]
 8014c2a:	f7f9 ff82 	bl	800eb32 <lwip_htonl>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014c32:	7dfb      	ldrb	r3, [r7, #23]
 8014c34:	089b      	lsrs	r3, r3, #2
 8014c36:	b2db      	uxtb	r3, r3
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	3305      	adds	r3, #5
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	031b      	lsls	r3, r3, #12
 8014c40:	b29a      	uxth	r2, r3
 8014c42:	79fb      	ldrb	r3, [r7, #7]
 8014c44:	b29b      	uxth	r3, r3
 8014c46:	4313      	orrs	r3, r2
 8014c48:	b29a      	uxth	r2, r3
 8014c4a:	693b      	ldr	r3, [r7, #16]
 8014c4c:	68dc      	ldr	r4, [r3, #12]
 8014c4e:	4610      	mov	r0, r2
 8014c50:	f7f9 ff5a 	bl	800eb08 <lwip_htons>
 8014c54:	4603      	mov	r3, r0
 8014c56:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	68db      	ldr	r3, [r3, #12]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	749a      	strb	r2, [r3, #18]
 8014c60:	2200      	movs	r2, #0
 8014c62:	74da      	strb	r2, [r3, #19]
  return seg;
 8014c64:	693b      	ldr	r3, [r7, #16]
}
 8014c66:	4618      	mov	r0, r3
 8014c68:	371c      	adds	r7, #28
 8014c6a:	46bd      	mov	sp, r7
 8014c6c:	bd90      	pop	{r4, r7, pc}
 8014c6e:	bf00      	nop
 8014c70:	0801cf00 	.word	0x0801cf00
 8014c74:	0801cf34 	.word	0x0801cf34
 8014c78:	0801cf54 	.word	0x0801cf54
 8014c7c:	0801cf7c 	.word	0x0801cf7c
 8014c80:	0801cfa0 	.word	0x0801cfa0

08014c84 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b086      	sub	sp, #24
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	607b      	str	r3, [r7, #4]
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	73fb      	strb	r3, [r7, #15]
 8014c90:	460b      	mov	r3, r1
 8014c92:	81bb      	strh	r3, [r7, #12]
 8014c94:	4613      	mov	r3, r2
 8014c96:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014c98:	89bb      	ldrh	r3, [r7, #12]
 8014c9a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d105      	bne.n	8014cae <tcp_pbuf_prealloc+0x2a>
 8014ca2:	4b30      	ldr	r3, [pc, #192]	; (8014d64 <tcp_pbuf_prealloc+0xe0>)
 8014ca4:	22e8      	movs	r2, #232	; 0xe8
 8014ca6:	4930      	ldr	r1, [pc, #192]	; (8014d68 <tcp_pbuf_prealloc+0xe4>)
 8014ca8:	4830      	ldr	r0, [pc, #192]	; (8014d6c <tcp_pbuf_prealloc+0xe8>)
 8014caa:	f005 f8cb 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014cae:	6a3b      	ldr	r3, [r7, #32]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d105      	bne.n	8014cc0 <tcp_pbuf_prealloc+0x3c>
 8014cb4:	4b2b      	ldr	r3, [pc, #172]	; (8014d64 <tcp_pbuf_prealloc+0xe0>)
 8014cb6:	22e9      	movs	r2, #233	; 0xe9
 8014cb8:	492d      	ldr	r1, [pc, #180]	; (8014d70 <tcp_pbuf_prealloc+0xec>)
 8014cba:	482c      	ldr	r0, [pc, #176]	; (8014d6c <tcp_pbuf_prealloc+0xe8>)
 8014cbc:	f005 f8c2 	bl	8019e44 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014cc0:	89ba      	ldrh	r2, [r7, #12]
 8014cc2:	897b      	ldrh	r3, [r7, #10]
 8014cc4:	429a      	cmp	r2, r3
 8014cc6:	d221      	bcs.n	8014d0c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014ccc:	f003 0302 	and.w	r3, r3, #2
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	d111      	bne.n	8014cf8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014cd4:	6a3b      	ldr	r3, [r7, #32]
 8014cd6:	8b5b      	ldrh	r3, [r3, #26]
 8014cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d115      	bne.n	8014d0c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014ce0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d007      	beq.n	8014cf8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014ce8:	6a3b      	ldr	r3, [r7, #32]
 8014cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d103      	bne.n	8014cf8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014cf0:	6a3b      	ldr	r3, [r7, #32]
 8014cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d009      	beq.n	8014d0c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014cf8:	89bb      	ldrh	r3, [r7, #12]
 8014cfa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014cfe:	f023 0203 	bic.w	r2, r3, #3
 8014d02:	897b      	ldrh	r3, [r7, #10]
 8014d04:	4293      	cmp	r3, r2
 8014d06:	bf28      	it	cs
 8014d08:	4613      	movcs	r3, r2
 8014d0a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014d0c:	8af9      	ldrh	r1, [r7, #22]
 8014d0e:	7bfb      	ldrb	r3, [r7, #15]
 8014d10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d14:	4618      	mov	r0, r3
 8014d16:	f7fb f805 	bl	800fd24 <pbuf_alloc>
 8014d1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d101      	bne.n	8014d26 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014d22:	2300      	movs	r3, #0
 8014d24:	e019      	b.n	8014d5a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d006      	beq.n	8014d3c <tcp_pbuf_prealloc+0xb8>
 8014d2e:	4b0d      	ldr	r3, [pc, #52]	; (8014d64 <tcp_pbuf_prealloc+0xe0>)
 8014d30:	f240 120b 	movw	r2, #267	; 0x10b
 8014d34:	490f      	ldr	r1, [pc, #60]	; (8014d74 <tcp_pbuf_prealloc+0xf0>)
 8014d36:	480d      	ldr	r0, [pc, #52]	; (8014d6c <tcp_pbuf_prealloc+0xe8>)
 8014d38:	f005 f884 	bl	8019e44 <iprintf>
  *oversize = p->len - length;
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	895a      	ldrh	r2, [r3, #10]
 8014d40:	89bb      	ldrh	r3, [r7, #12]
 8014d42:	1ad3      	subs	r3, r2, r3
 8014d44:	b29a      	uxth	r2, r3
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	89ba      	ldrh	r2, [r7, #12]
 8014d4e:	811a      	strh	r2, [r3, #8]
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	891a      	ldrh	r2, [r3, #8]
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	815a      	strh	r2, [r3, #10]
  return p;
 8014d58:	693b      	ldr	r3, [r7, #16]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3718      	adds	r7, #24
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	0801cf00 	.word	0x0801cf00
 8014d68:	0801cfb8 	.word	0x0801cfb8
 8014d6c:	0801cf54 	.word	0x0801cf54
 8014d70:	0801cfdc 	.word	0x0801cfdc
 8014d74:	0801cffc 	.word	0x0801cffc

08014d78 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
 8014d80:	460b      	mov	r3, r1
 8014d82:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d106      	bne.n	8014d98 <tcp_write_checks+0x20>
 8014d8a:	4b33      	ldr	r3, [pc, #204]	; (8014e58 <tcp_write_checks+0xe0>)
 8014d8c:	f240 1233 	movw	r2, #307	; 0x133
 8014d90:	4932      	ldr	r1, [pc, #200]	; (8014e5c <tcp_write_checks+0xe4>)
 8014d92:	4833      	ldr	r0, [pc, #204]	; (8014e60 <tcp_write_checks+0xe8>)
 8014d94:	f005 f856 	bl	8019e44 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	7d1b      	ldrb	r3, [r3, #20]
 8014d9c:	2b04      	cmp	r3, #4
 8014d9e:	d00e      	beq.n	8014dbe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014da4:	2b07      	cmp	r3, #7
 8014da6:	d00a      	beq.n	8014dbe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014dac:	2b02      	cmp	r3, #2
 8014dae:	d006      	beq.n	8014dbe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014db4:	2b03      	cmp	r3, #3
 8014db6:	d002      	beq.n	8014dbe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014db8:	f06f 030a 	mvn.w	r3, #10
 8014dbc:	e048      	b.n	8014e50 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014dbe:	887b      	ldrh	r3, [r7, #2]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d101      	bne.n	8014dc8 <tcp_write_checks+0x50>
    return ERR_OK;
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	e043      	b.n	8014e50 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014dce:	887a      	ldrh	r2, [r7, #2]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d909      	bls.n	8014de8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8b5b      	ldrh	r3, [r3, #26]
 8014dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ddc:	b29a      	uxth	r2, r3
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014de6:	e033      	b.n	8014e50 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014dee:	2b08      	cmp	r3, #8
 8014df0:	d909      	bls.n	8014e06 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	8b5b      	ldrh	r3, [r3, #26]
 8014df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e04:	e024      	b.n	8014e50 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d00f      	beq.n	8014e30 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d11a      	bne.n	8014e4e <tcp_write_checks+0xd6>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d116      	bne.n	8014e4e <tcp_write_checks+0xd6>
 8014e20:	4b0d      	ldr	r3, [pc, #52]	; (8014e58 <tcp_write_checks+0xe0>)
 8014e22:	f240 1255 	movw	r2, #341	; 0x155
 8014e26:	490f      	ldr	r1, [pc, #60]	; (8014e64 <tcp_write_checks+0xec>)
 8014e28:	480d      	ldr	r0, [pc, #52]	; (8014e60 <tcp_write_checks+0xe8>)
 8014e2a:	f005 f80b 	bl	8019e44 <iprintf>
 8014e2e:	e00e      	b.n	8014e4e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d103      	bne.n	8014e40 <tcp_write_checks+0xc8>
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d006      	beq.n	8014e4e <tcp_write_checks+0xd6>
 8014e40:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <tcp_write_checks+0xe0>)
 8014e42:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014e46:	4908      	ldr	r1, [pc, #32]	; (8014e68 <tcp_write_checks+0xf0>)
 8014e48:	4805      	ldr	r0, [pc, #20]	; (8014e60 <tcp_write_checks+0xe8>)
 8014e4a:	f004 fffb 	bl	8019e44 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014e4e:	2300      	movs	r3, #0
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	0801cf00 	.word	0x0801cf00
 8014e5c:	0801d010 	.word	0x0801d010
 8014e60:	0801cf54 	.word	0x0801cf54
 8014e64:	0801d030 	.word	0x0801d030
 8014e68:	0801d06c 	.word	0x0801d06c

08014e6c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014e6c:	b590      	push	{r4, r7, lr}
 8014e6e:	b09b      	sub	sp, #108	; 0x6c
 8014e70:	af04      	add	r7, sp, #16
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	60b9      	str	r1, [r7, #8]
 8014e76:	4611      	mov	r1, r2
 8014e78:	461a      	mov	r2, r3
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	80fb      	strh	r3, [r7, #6]
 8014e7e:	4613      	mov	r3, r2
 8014e80:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014e82:	2300      	movs	r3, #0
 8014e84:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8014e86:	2300      	movs	r3, #0
 8014e88:	653b      	str	r3, [r7, #80]	; 0x50
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e8e:	2300      	movs	r3, #0
 8014e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8014e92:	2300      	movs	r3, #0
 8014e94:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8014e96:	2300      	movs	r3, #0
 8014e98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d109      	bne.n	8014ec8 <tcp_write+0x5c>
 8014eb4:	4ba4      	ldr	r3, [pc, #656]	; (8015148 <tcp_write+0x2dc>)
 8014eb6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8014eba:	49a4      	ldr	r1, [pc, #656]	; (801514c <tcp_write+0x2e0>)
 8014ebc:	48a4      	ldr	r0, [pc, #656]	; (8015150 <tcp_write+0x2e4>)
 8014ebe:	f004 ffc1 	bl	8019e44 <iprintf>
 8014ec2:	f06f 030f 	mvn.w	r3, #15
 8014ec6:	e32a      	b.n	801551e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ece:	085b      	lsrs	r3, r3, #1
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	bf28      	it	cs
 8014eda:	4613      	movcs	r3, r2
 8014edc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8014ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d102      	bne.n	8014eea <tcp_write+0x7e>
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ee8:	e000      	b.n	8014eec <tcp_write+0x80>
 8014eea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014eec:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d109      	bne.n	8014f08 <tcp_write+0x9c>
 8014ef4:	4b94      	ldr	r3, [pc, #592]	; (8015148 <tcp_write+0x2dc>)
 8014ef6:	f240 12ad 	movw	r2, #429	; 0x1ad
 8014efa:	4996      	ldr	r1, [pc, #600]	; (8015154 <tcp_write+0x2e8>)
 8014efc:	4894      	ldr	r0, [pc, #592]	; (8015150 <tcp_write+0x2e4>)
 8014efe:	f004 ffa1 	bl	8019e44 <iprintf>
 8014f02:	f06f 030f 	mvn.w	r3, #15
 8014f06:	e30a      	b.n	801551e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8014f08:	88fb      	ldrh	r3, [r7, #6]
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	68f8      	ldr	r0, [r7, #12]
 8014f0e:	f7ff ff33 	bl	8014d78 <tcp_write_checks>
 8014f12:	4603      	mov	r3, r0
 8014f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8014f18:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d002      	beq.n	8014f26 <tcp_write+0xba>
    return err;
 8014f20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8014f24:	e2fb      	b.n	801551e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014f30:	2300      	movs	r3, #0
 8014f32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	f000 80f6 	beq.w	801512c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f44:	653b      	str	r3, [r7, #80]	; 0x50
 8014f46:	e002      	b.n	8014f4e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8014f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d1f8      	bne.n	8014f48 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8014f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f58:	7a9b      	ldrb	r3, [r3, #10]
 8014f5a:	009b      	lsls	r3, r3, #2
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	f003 0304 	and.w	r3, r3, #4
 8014f62:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8014f64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f68:	891b      	ldrh	r3, [r3, #8]
 8014f6a:	4619      	mov	r1, r3
 8014f6c:	8c3b      	ldrh	r3, [r7, #32]
 8014f6e:	440b      	add	r3, r1
 8014f70:	429a      	cmp	r2, r3
 8014f72:	da06      	bge.n	8014f82 <tcp_write+0x116>
 8014f74:	4b74      	ldr	r3, [pc, #464]	; (8015148 <tcp_write+0x2dc>)
 8014f76:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014f7a:	4977      	ldr	r1, [pc, #476]	; (8015158 <tcp_write+0x2ec>)
 8014f7c:	4874      	ldr	r0, [pc, #464]	; (8015150 <tcp_write+0x2e4>)
 8014f7e:	f004 ff61 	bl	8019e44 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8014f82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014f84:	891a      	ldrh	r2, [r3, #8]
 8014f86:	8c3b      	ldrh	r3, [r7, #32]
 8014f88:	4413      	add	r3, r2
 8014f8a:	b29b      	uxth	r3, r3
 8014f8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014f8e:	1ad3      	subs	r3, r2, r3
 8014f90:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014f98:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8014f9a:	8a7b      	ldrh	r3, [r7, #18]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d026      	beq.n	8014fee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8014fa0:	8a7b      	ldrh	r3, [r7, #18]
 8014fa2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d206      	bcs.n	8014fb6 <tcp_write+0x14a>
 8014fa8:	4b67      	ldr	r3, [pc, #412]	; (8015148 <tcp_write+0x2dc>)
 8014faa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8014fae:	496b      	ldr	r1, [pc, #428]	; (801515c <tcp_write+0x2f0>)
 8014fb0:	4867      	ldr	r0, [pc, #412]	; (8015150 <tcp_write+0x2e4>)
 8014fb2:	f004 ff47 	bl	8019e44 <iprintf>
      seg = last_unsent;
 8014fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8014fba:	8a7b      	ldrh	r3, [r7, #18]
 8014fbc:	88fa      	ldrh	r2, [r7, #6]
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	bf28      	it	cs
 8014fc2:	4613      	movcs	r3, r2
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	bf28      	it	cs
 8014fcc:	4613      	movcs	r3, r2
 8014fce:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8014fd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014fd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014fd6:	4413      	add	r3, r2
 8014fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8014fdc:	8a7a      	ldrh	r2, [r7, #18]
 8014fde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014fe0:	1ad3      	subs	r3, r2, r3
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8014fe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014fe8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014fea:	1ad3      	subs	r3, r2, r3
 8014fec:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8014fee:	8a7b      	ldrh	r3, [r7, #18]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d00b      	beq.n	801500c <tcp_write+0x1a0>
 8014ff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ff8:	88fb      	ldrh	r3, [r7, #6]
 8014ffa:	429a      	cmp	r2, r3
 8014ffc:	d006      	beq.n	801500c <tcp_write+0x1a0>
 8014ffe:	4b52      	ldr	r3, [pc, #328]	; (8015148 <tcp_write+0x2dc>)
 8015000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015004:	4956      	ldr	r1, [pc, #344]	; (8015160 <tcp_write+0x2f4>)
 8015006:	4852      	ldr	r0, [pc, #328]	; (8015150 <tcp_write+0x2e4>)
 8015008:	f004 ff1c 	bl	8019e44 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801500c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015010:	88fb      	ldrh	r3, [r7, #6]
 8015012:	429a      	cmp	r2, r3
 8015014:	f080 8167 	bcs.w	80152e6 <tcp_write+0x47a>
 8015018:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801501a:	2b00      	cmp	r3, #0
 801501c:	f000 8163 	beq.w	80152e6 <tcp_write+0x47a>
 8015020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015022:	891b      	ldrh	r3, [r3, #8]
 8015024:	2b00      	cmp	r3, #0
 8015026:	f000 815e 	beq.w	80152e6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801502a:	88fa      	ldrh	r2, [r7, #6]
 801502c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015030:	1ad2      	subs	r2, r2, r3
 8015032:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015034:	4293      	cmp	r3, r2
 8015036:	bfa8      	it	ge
 8015038:	4613      	movge	r3, r2
 801503a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801503c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801503e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015040:	797b      	ldrb	r3, [r7, #5]
 8015042:	f003 0301 	and.w	r3, r3, #1
 8015046:	2b00      	cmp	r3, #0
 8015048:	d027      	beq.n	801509a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801504a:	f107 0012 	add.w	r0, r7, #18
 801504e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015050:	8bf9      	ldrh	r1, [r7, #30]
 8015052:	2301      	movs	r3, #1
 8015054:	9302      	str	r3, [sp, #8]
 8015056:	797b      	ldrb	r3, [r7, #5]
 8015058:	9301      	str	r3, [sp, #4]
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	9300      	str	r3, [sp, #0]
 801505e:	4603      	mov	r3, r0
 8015060:	2000      	movs	r0, #0
 8015062:	f7ff fe0f 	bl	8014c84 <tcp_pbuf_prealloc>
 8015066:	6578      	str	r0, [r7, #84]	; 0x54
 8015068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801506a:	2b00      	cmp	r3, #0
 801506c:	f000 8225 	beq.w	80154ba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015072:	6858      	ldr	r0, [r3, #4]
 8015074:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015078:	68ba      	ldr	r2, [r7, #8]
 801507a:	4413      	add	r3, r2
 801507c:	8bfa      	ldrh	r2, [r7, #30]
 801507e:	4619      	mov	r1, r3
 8015080:	f004 fe35 	bl	8019cee <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015084:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015086:	f7fb f9bf 	bl	8010408 <pbuf_clen>
 801508a:	4603      	mov	r3, r0
 801508c:	461a      	mov	r2, r3
 801508e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015092:	4413      	add	r3, r2
 8015094:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015098:	e041      	b.n	801511e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801509a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	637b      	str	r3, [r7, #52]	; 0x34
 80150a0:	e002      	b.n	80150a8 <tcp_write+0x23c>
 80150a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	637b      	str	r3, [r7, #52]	; 0x34
 80150a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d1f8      	bne.n	80150a2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80150b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150b2:	7b1b      	ldrb	r3, [r3, #12]
 80150b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d115      	bne.n	80150e8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80150bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150be:	685b      	ldr	r3, [r3, #4]
 80150c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80150c2:	8952      	ldrh	r2, [r2, #10]
 80150c4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80150c6:	68ba      	ldr	r2, [r7, #8]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d10d      	bne.n	80150e8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80150cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d006      	beq.n	80150e2 <tcp_write+0x276>
 80150d4:	4b1c      	ldr	r3, [pc, #112]	; (8015148 <tcp_write+0x2dc>)
 80150d6:	f240 2231 	movw	r2, #561	; 0x231
 80150da:	4922      	ldr	r1, [pc, #136]	; (8015164 <tcp_write+0x2f8>)
 80150dc:	481c      	ldr	r0, [pc, #112]	; (8015150 <tcp_write+0x2e4>)
 80150de:	f004 feb1 	bl	8019e44 <iprintf>
          extendlen = seglen;
 80150e2:	8bfb      	ldrh	r3, [r7, #30]
 80150e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80150e6:	e01a      	b.n	801511e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80150e8:	8bfb      	ldrh	r3, [r7, #30]
 80150ea:	2201      	movs	r2, #1
 80150ec:	4619      	mov	r1, r3
 80150ee:	2000      	movs	r0, #0
 80150f0:	f7fa fe18 	bl	800fd24 <pbuf_alloc>
 80150f4:	6578      	str	r0, [r7, #84]	; 0x54
 80150f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f000 81e0 	beq.w	80154be <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80150fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015102:	68ba      	ldr	r2, [r7, #8]
 8015104:	441a      	add	r2, r3
 8015106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015108:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801510a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801510c:	f7fb f97c 	bl	8010408 <pbuf_clen>
 8015110:	4603      	mov	r3, r0
 8015112:	461a      	mov	r2, r3
 8015114:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015118:	4413      	add	r3, r2
 801511a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801511e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015122:	8bfb      	ldrh	r3, [r7, #30]
 8015124:	4413      	add	r3, r2
 8015126:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801512a:	e0dc      	b.n	80152e6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015132:	2b00      	cmp	r3, #0
 8015134:	f000 80d7 	beq.w	80152e6 <tcp_write+0x47a>
 8015138:	4b03      	ldr	r3, [pc, #12]	; (8015148 <tcp_write+0x2dc>)
 801513a:	f240 224a 	movw	r2, #586	; 0x24a
 801513e:	490a      	ldr	r1, [pc, #40]	; (8015168 <tcp_write+0x2fc>)
 8015140:	4803      	ldr	r0, [pc, #12]	; (8015150 <tcp_write+0x2e4>)
 8015142:	f004 fe7f 	bl	8019e44 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015146:	e0ce      	b.n	80152e6 <tcp_write+0x47a>
 8015148:	0801cf00 	.word	0x0801cf00
 801514c:	0801d0a0 	.word	0x0801d0a0
 8015150:	0801cf54 	.word	0x0801cf54
 8015154:	0801d0b8 	.word	0x0801d0b8
 8015158:	0801d0ec 	.word	0x0801d0ec
 801515c:	0801d104 	.word	0x0801d104
 8015160:	0801d124 	.word	0x0801d124
 8015164:	0801d144 	.word	0x0801d144
 8015168:	0801d170 	.word	0x0801d170
    struct pbuf *p;
    u16_t left = len - pos;
 801516c:	88fa      	ldrh	r2, [r7, #6]
 801516e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015172:	1ad3      	subs	r3, r2, r3
 8015174:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015176:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801517a:	b29b      	uxth	r3, r3
 801517c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015182:	8b7a      	ldrh	r2, [r7, #26]
 8015184:	8bbb      	ldrh	r3, [r7, #28]
 8015186:	4293      	cmp	r3, r2
 8015188:	bf28      	it	cs
 801518a:	4613      	movcs	r3, r2
 801518c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801518e:	797b      	ldrb	r3, [r7, #5]
 8015190:	f003 0301 	and.w	r3, r3, #1
 8015194:	2b00      	cmp	r3, #0
 8015196:	d036      	beq.n	8015206 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015198:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801519c:	b29a      	uxth	r2, r3
 801519e:	8b3b      	ldrh	r3, [r7, #24]
 80151a0:	4413      	add	r3, r2
 80151a2:	b299      	uxth	r1, r3
 80151a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	bf0c      	ite	eq
 80151aa:	2301      	moveq	r3, #1
 80151ac:	2300      	movne	r3, #0
 80151ae:	b2db      	uxtb	r3, r3
 80151b0:	f107 0012 	add.w	r0, r7, #18
 80151b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80151b6:	9302      	str	r3, [sp, #8]
 80151b8:	797b      	ldrb	r3, [r7, #5]
 80151ba:	9301      	str	r3, [sp, #4]
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	9300      	str	r3, [sp, #0]
 80151c0:	4603      	mov	r3, r0
 80151c2:	2036      	movs	r0, #54	; 0x36
 80151c4:	f7ff fd5e 	bl	8014c84 <tcp_pbuf_prealloc>
 80151c8:	6338      	str	r0, [r7, #48]	; 0x30
 80151ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f000 8178 	beq.w	80154c2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80151d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d4:	895b      	ldrh	r3, [r3, #10]
 80151d6:	8b3a      	ldrh	r2, [r7, #24]
 80151d8:	429a      	cmp	r2, r3
 80151da:	d906      	bls.n	80151ea <tcp_write+0x37e>
 80151dc:	4b8c      	ldr	r3, [pc, #560]	; (8015410 <tcp_write+0x5a4>)
 80151de:	f240 2266 	movw	r2, #614	; 0x266
 80151e2:	498c      	ldr	r1, [pc, #560]	; (8015414 <tcp_write+0x5a8>)
 80151e4:	488c      	ldr	r0, [pc, #560]	; (8015418 <tcp_write+0x5ac>)
 80151e6:	f004 fe2d 	bl	8019e44 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80151ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ec:	685a      	ldr	r2, [r3, #4]
 80151ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80151f2:	18d0      	adds	r0, r2, r3
 80151f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151f8:	68ba      	ldr	r2, [r7, #8]
 80151fa:	4413      	add	r3, r2
 80151fc:	8b3a      	ldrh	r2, [r7, #24]
 80151fe:	4619      	mov	r1, r3
 8015200:	f004 fd75 	bl	8019cee <memcpy>
 8015204:	e02f      	b.n	8015266 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015206:	8a7b      	ldrh	r3, [r7, #18]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d006      	beq.n	801521a <tcp_write+0x3ae>
 801520c:	4b80      	ldr	r3, [pc, #512]	; (8015410 <tcp_write+0x5a4>)
 801520e:	f240 2271 	movw	r2, #625	; 0x271
 8015212:	4982      	ldr	r1, [pc, #520]	; (801541c <tcp_write+0x5b0>)
 8015214:	4880      	ldr	r0, [pc, #512]	; (8015418 <tcp_write+0x5ac>)
 8015216:	f004 fe15 	bl	8019e44 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801521a:	8b3b      	ldrh	r3, [r7, #24]
 801521c:	2201      	movs	r2, #1
 801521e:	4619      	mov	r1, r3
 8015220:	2036      	movs	r0, #54	; 0x36
 8015222:	f7fa fd7f 	bl	800fd24 <pbuf_alloc>
 8015226:	6178      	str	r0, [r7, #20]
 8015228:	697b      	ldr	r3, [r7, #20]
 801522a:	2b00      	cmp	r3, #0
 801522c:	f000 814b 	beq.w	80154c6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015230:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015234:	68ba      	ldr	r2, [r7, #8]
 8015236:	441a      	add	r2, r3
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801523c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015240:	b29b      	uxth	r3, r3
 8015242:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015246:	4619      	mov	r1, r3
 8015248:	2036      	movs	r0, #54	; 0x36
 801524a:	f7fa fd6b 	bl	800fd24 <pbuf_alloc>
 801524e:	6338      	str	r0, [r7, #48]	; 0x30
 8015250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015252:	2b00      	cmp	r3, #0
 8015254:	d103      	bne.n	801525e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015256:	6978      	ldr	r0, [r7, #20]
 8015258:	f7fb f848 	bl	80102ec <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801525c:	e136      	b.n	80154cc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801525e:	6979      	ldr	r1, [r7, #20]
 8015260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015262:	f7fb f911 	bl	8010488 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015268:	f7fb f8ce 	bl	8010408 <pbuf_clen>
 801526c:	4603      	mov	r3, r0
 801526e:	461a      	mov	r2, r3
 8015270:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015274:	4413      	add	r3, r2
 8015276:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801527a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801527e:	2b09      	cmp	r3, #9
 8015280:	d903      	bls.n	801528a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015284:	f7fb f832 	bl	80102ec <pbuf_free>
      goto memerr;
 8015288:	e120      	b.n	80154cc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801528e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015292:	441a      	add	r2, r3
 8015294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015298:	9300      	str	r3, [sp, #0]
 801529a:	4613      	mov	r3, r2
 801529c:	2200      	movs	r2, #0
 801529e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80152a0:	68f8      	ldr	r0, [r7, #12]
 80152a2:	f7ff fc51 	bl	8014b48 <tcp_create_segment>
 80152a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80152a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	f000 810d 	beq.w	80154ca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80152b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d102      	bne.n	80152bc <tcp_write+0x450>
      queue = seg;
 80152b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152b8:	647b      	str	r3, [r7, #68]	; 0x44
 80152ba:	e00c      	b.n	80152d6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80152bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d106      	bne.n	80152d0 <tcp_write+0x464>
 80152c2:	4b53      	ldr	r3, [pc, #332]	; (8015410 <tcp_write+0x5a4>)
 80152c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80152c8:	4955      	ldr	r1, [pc, #340]	; (8015420 <tcp_write+0x5b4>)
 80152ca:	4853      	ldr	r0, [pc, #332]	; (8015418 <tcp_write+0x5ac>)
 80152cc:	f004 fdba 	bl	8019e44 <iprintf>
      prev_seg->next = seg;
 80152d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80152d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80152d4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80152d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80152d8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80152da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152de:	8b3b      	ldrh	r3, [r7, #24]
 80152e0:	4413      	add	r3, r2
 80152e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80152e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152ea:	88fb      	ldrh	r3, [r7, #6]
 80152ec:	429a      	cmp	r2, r3
 80152ee:	f4ff af3d 	bcc.w	801516c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80152f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d02c      	beq.n	8015352 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80152f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80152fe:	e01e      	b.n	801533e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015302:	891a      	ldrh	r2, [r3, #8]
 8015304:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015306:	4413      	add	r3, r2
 8015308:	b29a      	uxth	r2, r3
 801530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801530c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d110      	bne.n	8015338 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801531c:	8952      	ldrh	r2, [r2, #10]
 801531e:	4413      	add	r3, r2
 8015320:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015322:	68b9      	ldr	r1, [r7, #8]
 8015324:	4618      	mov	r0, r3
 8015326:	f004 fce2 	bl	8019cee <memcpy>
        p->len += oversize_used;
 801532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801532c:	895a      	ldrh	r2, [r3, #10]
 801532e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015330:	4413      	add	r3, r2
 8015332:	b29a      	uxth	r2, r3
 8015334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015336:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801533e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015340:	2b00      	cmp	r3, #0
 8015342:	d1dd      	bne.n	8015300 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015346:	891a      	ldrh	r2, [r3, #8]
 8015348:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801534a:	4413      	add	r3, r2
 801534c:	b29a      	uxth	r2, r3
 801534e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015350:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015352:	8a7a      	ldrh	r2, [r7, #18]
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801535a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801535c:	2b00      	cmp	r3, #0
 801535e:	d018      	beq.n	8015392 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015362:	2b00      	cmp	r3, #0
 8015364:	d106      	bne.n	8015374 <tcp_write+0x508>
 8015366:	4b2a      	ldr	r3, [pc, #168]	; (8015410 <tcp_write+0x5a4>)
 8015368:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801536c:	492d      	ldr	r1, [pc, #180]	; (8015424 <tcp_write+0x5b8>)
 801536e:	482a      	ldr	r0, [pc, #168]	; (8015418 <tcp_write+0x5ac>)
 8015370:	f004 fd68 	bl	8019e44 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801537a:	4618      	mov	r0, r3
 801537c:	f7fb f884 	bl	8010488 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015382:	891a      	ldrh	r2, [r3, #8]
 8015384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015386:	891b      	ldrh	r3, [r3, #8]
 8015388:	4413      	add	r3, r2
 801538a:	b29a      	uxth	r2, r3
 801538c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801538e:	811a      	strh	r2, [r3, #8]
 8015390:	e037      	b.n	8015402 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8015392:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015394:	2b00      	cmp	r3, #0
 8015396:	d034      	beq.n	8015402 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801539a:	2b00      	cmp	r3, #0
 801539c:	d003      	beq.n	80153a6 <tcp_write+0x53a>
 801539e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d106      	bne.n	80153b4 <tcp_write+0x548>
 80153a6:	4b1a      	ldr	r3, [pc, #104]	; (8015410 <tcp_write+0x5a4>)
 80153a8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80153ac:	491e      	ldr	r1, [pc, #120]	; (8015428 <tcp_write+0x5bc>)
 80153ae:	481a      	ldr	r0, [pc, #104]	; (8015418 <tcp_write+0x5ac>)
 80153b0:	f004 fd48 	bl	8019e44 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80153b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80153ba:	e009      	b.n	80153d0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80153bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153be:	891a      	ldrh	r2, [r3, #8]
 80153c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153c2:	4413      	add	r3, r2
 80153c4:	b29a      	uxth	r2, r3
 80153c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80153ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80153d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d1f1      	bne.n	80153bc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80153d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153da:	891a      	ldrh	r2, [r3, #8]
 80153dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153de:	4413      	add	r3, r2
 80153e0:	b29a      	uxth	r2, r3
 80153e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80153e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e8:	895a      	ldrh	r2, [r3, #10]
 80153ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153ec:	4413      	add	r3, r2
 80153ee:	b29a      	uxth	r2, r3
 80153f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80153f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153f6:	891a      	ldrh	r2, [r3, #8]
 80153f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80153fa:	4413      	add	r3, r2
 80153fc:	b29a      	uxth	r2, r3
 80153fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015400:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015404:	2b00      	cmp	r3, #0
 8015406:	d111      	bne.n	801542c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801540c:	66da      	str	r2, [r3, #108]	; 0x6c
 801540e:	e010      	b.n	8015432 <tcp_write+0x5c6>
 8015410:	0801cf00 	.word	0x0801cf00
 8015414:	0801d1a0 	.word	0x0801d1a0
 8015418:	0801cf54 	.word	0x0801cf54
 801541c:	0801d1e0 	.word	0x0801d1e0
 8015420:	0801d1f0 	.word	0x0801d1f0
 8015424:	0801d204 	.word	0x0801d204
 8015428:	0801d23c 	.word	0x0801d23c
  } else {
    last_unsent->next = queue;
 801542c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801542e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015430:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015436:	88fb      	ldrh	r3, [r7, #6]
 8015438:	441a      	add	r2, r3
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015444:	88fb      	ldrh	r3, [r7, #6]
 8015446:	1ad3      	subs	r3, r2, r3
 8015448:	b29a      	uxth	r2, r3
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015456:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015460:	2b00      	cmp	r3, #0
 8015462:	d00e      	beq.n	8015482 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015468:	2b00      	cmp	r3, #0
 801546a:	d10a      	bne.n	8015482 <tcp_write+0x616>
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015470:	2b00      	cmp	r3, #0
 8015472:	d106      	bne.n	8015482 <tcp_write+0x616>
 8015474:	4b2c      	ldr	r3, [pc, #176]	; (8015528 <tcp_write+0x6bc>)
 8015476:	f240 3212 	movw	r2, #786	; 0x312
 801547a:	492c      	ldr	r1, [pc, #176]	; (801552c <tcp_write+0x6c0>)
 801547c:	482c      	ldr	r0, [pc, #176]	; (8015530 <tcp_write+0x6c4>)
 801547e:	f004 fce1 	bl	8019e44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8015482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015484:	2b00      	cmp	r3, #0
 8015486:	d016      	beq.n	80154b6 <tcp_write+0x64a>
 8015488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d012      	beq.n	80154b6 <tcp_write+0x64a>
 8015490:	797b      	ldrb	r3, [r7, #5]
 8015492:	f003 0302 	and.w	r3, r3, #2
 8015496:	2b00      	cmp	r3, #0
 8015498:	d10d      	bne.n	80154b6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801549a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801549c:	68db      	ldr	r3, [r3, #12]
 801549e:	899b      	ldrh	r3, [r3, #12]
 80154a0:	b29c      	uxth	r4, r3
 80154a2:	2008      	movs	r0, #8
 80154a4:	f7f9 fb30 	bl	800eb08 <lwip_htons>
 80154a8:	4603      	mov	r3, r0
 80154aa:	461a      	mov	r2, r3
 80154ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	4322      	orrs	r2, r4
 80154b2:	b292      	uxth	r2, r2
 80154b4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80154b6:	2300      	movs	r3, #0
 80154b8:	e031      	b.n	801551e <tcp_write+0x6b2>
          goto memerr;
 80154ba:	bf00      	nop
 80154bc:	e006      	b.n	80154cc <tcp_write+0x660>
            goto memerr;
 80154be:	bf00      	nop
 80154c0:	e004      	b.n	80154cc <tcp_write+0x660>
        goto memerr;
 80154c2:	bf00      	nop
 80154c4:	e002      	b.n	80154cc <tcp_write+0x660>
        goto memerr;
 80154c6:	bf00      	nop
 80154c8:	e000      	b.n	80154cc <tcp_write+0x660>
      goto memerr;
 80154ca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	8b5b      	ldrh	r3, [r3, #26]
 80154d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80154da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d002      	beq.n	80154e6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80154e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80154e2:	f7fa ff03 	bl	80102ec <pbuf_free>
  }
  if (queue != NULL) {
 80154e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d002      	beq.n	80154f2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80154ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80154ee:	f7fc fb6b 	bl	8011bc8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d00e      	beq.n	801551a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015500:	2b00      	cmp	r3, #0
 8015502:	d10a      	bne.n	801551a <tcp_write+0x6ae>
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015508:	2b00      	cmp	r3, #0
 801550a:	d106      	bne.n	801551a <tcp_write+0x6ae>
 801550c:	4b06      	ldr	r3, [pc, #24]	; (8015528 <tcp_write+0x6bc>)
 801550e:	f240 3227 	movw	r2, #807	; 0x327
 8015512:	4906      	ldr	r1, [pc, #24]	; (801552c <tcp_write+0x6c0>)
 8015514:	4806      	ldr	r0, [pc, #24]	; (8015530 <tcp_write+0x6c4>)
 8015516:	f004 fc95 	bl	8019e44 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801551a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801551e:	4618      	mov	r0, r3
 8015520:	375c      	adds	r7, #92	; 0x5c
 8015522:	46bd      	mov	sp, r7
 8015524:	bd90      	pop	{r4, r7, pc}
 8015526:	bf00      	nop
 8015528:	0801cf00 	.word	0x0801cf00
 801552c:	0801d274 	.word	0x0801d274
 8015530:	0801cf54 	.word	0x0801cf54

08015534 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015534:	b590      	push	{r4, r7, lr}
 8015536:	b08b      	sub	sp, #44	; 0x2c
 8015538:	af02      	add	r7, sp, #8
 801553a:	6078      	str	r0, [r7, #4]
 801553c:	460b      	mov	r3, r1
 801553e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015540:	2300      	movs	r3, #0
 8015542:	61fb      	str	r3, [r7, #28]
 8015544:	2300      	movs	r3, #0
 8015546:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015548:	2300      	movs	r3, #0
 801554a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d106      	bne.n	8015560 <tcp_split_unsent_seg+0x2c>
 8015552:	4b95      	ldr	r3, [pc, #596]	; (80157a8 <tcp_split_unsent_seg+0x274>)
 8015554:	f240 324b 	movw	r2, #843	; 0x34b
 8015558:	4994      	ldr	r1, [pc, #592]	; (80157ac <tcp_split_unsent_seg+0x278>)
 801555a:	4895      	ldr	r0, [pc, #596]	; (80157b0 <tcp_split_unsent_seg+0x27c>)
 801555c:	f004 fc72 	bl	8019e44 <iprintf>

  useg = pcb->unsent;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015564:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d102      	bne.n	8015572 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801556c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015570:	e116      	b.n	80157a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015572:	887b      	ldrh	r3, [r7, #2]
 8015574:	2b00      	cmp	r3, #0
 8015576:	d109      	bne.n	801558c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015578:	4b8b      	ldr	r3, [pc, #556]	; (80157a8 <tcp_split_unsent_seg+0x274>)
 801557a:	f240 3253 	movw	r2, #851	; 0x353
 801557e:	498d      	ldr	r1, [pc, #564]	; (80157b4 <tcp_split_unsent_seg+0x280>)
 8015580:	488b      	ldr	r0, [pc, #556]	; (80157b0 <tcp_split_unsent_seg+0x27c>)
 8015582:	f004 fc5f 	bl	8019e44 <iprintf>
    return ERR_VAL;
 8015586:	f06f 0305 	mvn.w	r3, #5
 801558a:	e109      	b.n	80157a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	891b      	ldrh	r3, [r3, #8]
 8015590:	887a      	ldrh	r2, [r7, #2]
 8015592:	429a      	cmp	r2, r3
 8015594:	d301      	bcc.n	801559a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015596:	2300      	movs	r3, #0
 8015598:	e102      	b.n	80157a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801559e:	887a      	ldrh	r2, [r7, #2]
 80155a0:	429a      	cmp	r2, r3
 80155a2:	d906      	bls.n	80155b2 <tcp_split_unsent_seg+0x7e>
 80155a4:	4b80      	ldr	r3, [pc, #512]	; (80157a8 <tcp_split_unsent_seg+0x274>)
 80155a6:	f240 325b 	movw	r2, #859	; 0x35b
 80155aa:	4983      	ldr	r1, [pc, #524]	; (80157b8 <tcp_split_unsent_seg+0x284>)
 80155ac:	4880      	ldr	r0, [pc, #512]	; (80157b0 <tcp_split_unsent_seg+0x27c>)
 80155ae:	f004 fc49 	bl	8019e44 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	891b      	ldrh	r3, [r3, #8]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d106      	bne.n	80155c8 <tcp_split_unsent_seg+0x94>
 80155ba:	4b7b      	ldr	r3, [pc, #492]	; (80157a8 <tcp_split_unsent_seg+0x274>)
 80155bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80155c0:	497e      	ldr	r1, [pc, #504]	; (80157bc <tcp_split_unsent_seg+0x288>)
 80155c2:	487b      	ldr	r0, [pc, #492]	; (80157b0 <tcp_split_unsent_seg+0x27c>)
 80155c4:	f004 fc3e 	bl	8019e44 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	7a9b      	ldrb	r3, [r3, #10]
 80155cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80155ce:	7bfb      	ldrb	r3, [r7, #15]
 80155d0:	009b      	lsls	r3, r3, #2
 80155d2:	b2db      	uxtb	r3, r3
 80155d4:	f003 0304 	and.w	r3, r3, #4
 80155d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	891a      	ldrh	r2, [r3, #8]
 80155de:	887b      	ldrh	r3, [r7, #2]
 80155e0:	1ad3      	subs	r3, r2, r3
 80155e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80155e4:	7bbb      	ldrb	r3, [r7, #14]
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	89bb      	ldrh	r3, [r7, #12]
 80155ea:	4413      	add	r3, r2
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155f2:	4619      	mov	r1, r3
 80155f4:	2036      	movs	r0, #54	; 0x36
 80155f6:	f7fa fb95 	bl	800fd24 <pbuf_alloc>
 80155fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	f000 80b7 	beq.w	8015772 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	891a      	ldrh	r2, [r3, #8]
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	891b      	ldrh	r3, [r3, #8]
 801560e:	1ad3      	subs	r3, r2, r3
 8015610:	b29a      	uxth	r2, r3
 8015612:	887b      	ldrh	r3, [r7, #2]
 8015614:	4413      	add	r3, r2
 8015616:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	6858      	ldr	r0, [r3, #4]
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	685a      	ldr	r2, [r3, #4]
 8015620:	7bbb      	ldrb	r3, [r7, #14]
 8015622:	18d1      	adds	r1, r2, r3
 8015624:	897b      	ldrh	r3, [r7, #10]
 8015626:	89ba      	ldrh	r2, [r7, #12]
 8015628:	f7fb f856 	bl	80106d8 <pbuf_copy_partial>
 801562c:	4603      	mov	r3, r0
 801562e:	461a      	mov	r2, r3
 8015630:	89bb      	ldrh	r3, [r7, #12]
 8015632:	4293      	cmp	r3, r2
 8015634:	f040 809f 	bne.w	8015776 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015638:	697b      	ldr	r3, [r7, #20]
 801563a:	68db      	ldr	r3, [r3, #12]
 801563c:	899b      	ldrh	r3, [r3, #12]
 801563e:	b29b      	uxth	r3, r3
 8015640:	4618      	mov	r0, r3
 8015642:	f7f9 fa61 	bl	800eb08 <lwip_htons>
 8015646:	4603      	mov	r3, r0
 8015648:	b2db      	uxtb	r3, r3
 801564a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801564e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015650:	2300      	movs	r3, #0
 8015652:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015654:	7efb      	ldrb	r3, [r7, #27]
 8015656:	f003 0308 	and.w	r3, r3, #8
 801565a:	2b00      	cmp	r3, #0
 801565c:	d007      	beq.n	801566e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801565e:	7efb      	ldrb	r3, [r7, #27]
 8015660:	f023 0308 	bic.w	r3, r3, #8
 8015664:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015666:	7ebb      	ldrb	r3, [r7, #26]
 8015668:	f043 0308 	orr.w	r3, r3, #8
 801566c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801566e:	7efb      	ldrb	r3, [r7, #27]
 8015670:	f003 0301 	and.w	r3, r3, #1
 8015674:	2b00      	cmp	r3, #0
 8015676:	d007      	beq.n	8015688 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015678:	7efb      	ldrb	r3, [r7, #27]
 801567a:	f023 0301 	bic.w	r3, r3, #1
 801567e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015680:	7ebb      	ldrb	r3, [r7, #26]
 8015682:	f043 0301 	orr.w	r3, r3, #1
 8015686:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	4618      	mov	r0, r3
 8015690:	f7f9 fa4f 	bl	800eb32 <lwip_htonl>
 8015694:	4602      	mov	r2, r0
 8015696:	887b      	ldrh	r3, [r7, #2]
 8015698:	18d1      	adds	r1, r2, r3
 801569a:	7eba      	ldrb	r2, [r7, #26]
 801569c:	7bfb      	ldrb	r3, [r7, #15]
 801569e:	9300      	str	r3, [sp, #0]
 80156a0:	460b      	mov	r3, r1
 80156a2:	6939      	ldr	r1, [r7, #16]
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f7ff fa4f 	bl	8014b48 <tcp_create_segment>
 80156aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d063      	beq.n	801577a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80156b2:	697b      	ldr	r3, [r7, #20]
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	4618      	mov	r0, r3
 80156b8:	f7fa fea6 	bl	8010408 <pbuf_clen>
 80156bc:	4603      	mov	r3, r0
 80156be:	461a      	mov	r2, r3
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80156c6:	1a9b      	subs	r3, r3, r2
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	6858      	ldr	r0, [r3, #4]
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	891a      	ldrh	r2, [r3, #8]
 80156da:	89bb      	ldrh	r3, [r7, #12]
 80156dc:	1ad3      	subs	r3, r2, r3
 80156de:	b29b      	uxth	r3, r3
 80156e0:	4619      	mov	r1, r3
 80156e2:	f7fa fc7d 	bl	800ffe0 <pbuf_realloc>
  useg->len -= remainder;
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	891a      	ldrh	r2, [r3, #8]
 80156ea:	89bb      	ldrh	r3, [r7, #12]
 80156ec:	1ad3      	subs	r3, r2, r3
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	68db      	ldr	r3, [r3, #12]
 80156f8:	899b      	ldrh	r3, [r3, #12]
 80156fa:	b29c      	uxth	r4, r3
 80156fc:	7efb      	ldrb	r3, [r7, #27]
 80156fe:	b29b      	uxth	r3, r3
 8015700:	4618      	mov	r0, r3
 8015702:	f7f9 fa01 	bl	800eb08 <lwip_htons>
 8015706:	4603      	mov	r3, r0
 8015708:	461a      	mov	r2, r3
 801570a:	697b      	ldr	r3, [r7, #20]
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	4322      	orrs	r2, r4
 8015710:	b292      	uxth	r2, r2
 8015712:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	4618      	mov	r0, r3
 801571a:	f7fa fe75 	bl	8010408 <pbuf_clen>
 801571e:	4603      	mov	r3, r0
 8015720:	461a      	mov	r2, r3
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015728:	4413      	add	r3, r2
 801572a:	b29a      	uxth	r2, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015732:	69fb      	ldr	r3, [r7, #28]
 8015734:	685b      	ldr	r3, [r3, #4]
 8015736:	4618      	mov	r0, r3
 8015738:	f7fa fe66 	bl	8010408 <pbuf_clen>
 801573c:	4603      	mov	r3, r0
 801573e:	461a      	mov	r2, r3
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015746:	4413      	add	r3, r2
 8015748:	b29a      	uxth	r2, r3
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	681a      	ldr	r2, [r3, #0]
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015758:	697b      	ldr	r3, [r7, #20]
 801575a:	69fa      	ldr	r2, [r7, #28]
 801575c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801575e:	69fb      	ldr	r3, [r7, #28]
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d103      	bne.n	801576e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2200      	movs	r2, #0
 801576a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801576e:	2300      	movs	r3, #0
 8015770:	e016      	b.n	80157a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015772:	bf00      	nop
 8015774:	e002      	b.n	801577c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015776:	bf00      	nop
 8015778:	e000      	b.n	801577c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801577a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d006      	beq.n	8015790 <tcp_split_unsent_seg+0x25c>
 8015782:	4b09      	ldr	r3, [pc, #36]	; (80157a8 <tcp_split_unsent_seg+0x274>)
 8015784:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015788:	490d      	ldr	r1, [pc, #52]	; (80157c0 <tcp_split_unsent_seg+0x28c>)
 801578a:	4809      	ldr	r0, [pc, #36]	; (80157b0 <tcp_split_unsent_seg+0x27c>)
 801578c:	f004 fb5a 	bl	8019e44 <iprintf>
  if (p != NULL) {
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d002      	beq.n	801579c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015796:	6938      	ldr	r0, [r7, #16]
 8015798:	f7fa fda8 	bl	80102ec <pbuf_free>
  }

  return ERR_MEM;
 801579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3724      	adds	r7, #36	; 0x24
 80157a4:	46bd      	mov	sp, r7
 80157a6:	bd90      	pop	{r4, r7, pc}
 80157a8:	0801cf00 	.word	0x0801cf00
 80157ac:	0801d294 	.word	0x0801d294
 80157b0:	0801cf54 	.word	0x0801cf54
 80157b4:	0801d2b8 	.word	0x0801d2b8
 80157b8:	0801d2dc 	.word	0x0801d2dc
 80157bc:	0801d2ec 	.word	0x0801d2ec
 80157c0:	0801d2fc 	.word	0x0801d2fc

080157c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80157c4:	b590      	push	{r4, r7, lr}
 80157c6:	b085      	sub	sp, #20
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d106      	bne.n	80157e0 <tcp_send_fin+0x1c>
 80157d2:	4b21      	ldr	r3, [pc, #132]	; (8015858 <tcp_send_fin+0x94>)
 80157d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80157d8:	4920      	ldr	r1, [pc, #128]	; (801585c <tcp_send_fin+0x98>)
 80157da:	4821      	ldr	r0, [pc, #132]	; (8015860 <tcp_send_fin+0x9c>)
 80157dc:	f004 fb32 	bl	8019e44 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d02e      	beq.n	8015846 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157ec:	60fb      	str	r3, [r7, #12]
 80157ee:	e002      	b.n	80157f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d1f8      	bne.n	80157f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	899b      	ldrh	r3, [r3, #12]
 8015804:	b29b      	uxth	r3, r3
 8015806:	4618      	mov	r0, r3
 8015808:	f7f9 f97e 	bl	800eb08 <lwip_htons>
 801580c:	4603      	mov	r3, r0
 801580e:	b2db      	uxtb	r3, r3
 8015810:	f003 0307 	and.w	r3, r3, #7
 8015814:	2b00      	cmp	r3, #0
 8015816:	d116      	bne.n	8015846 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	68db      	ldr	r3, [r3, #12]
 801581c:	899b      	ldrh	r3, [r3, #12]
 801581e:	b29c      	uxth	r4, r3
 8015820:	2001      	movs	r0, #1
 8015822:	f7f9 f971 	bl	800eb08 <lwip_htons>
 8015826:	4603      	mov	r3, r0
 8015828:	461a      	mov	r2, r3
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	4322      	orrs	r2, r4
 8015830:	b292      	uxth	r2, r2
 8015832:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	8b5b      	ldrh	r3, [r3, #26]
 8015838:	f043 0320 	orr.w	r3, r3, #32
 801583c:	b29a      	uxth	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015842:	2300      	movs	r3, #0
 8015844:	e004      	b.n	8015850 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015846:	2101      	movs	r1, #1
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f000 f80b 	bl	8015864 <tcp_enqueue_flags>
 801584e:	4603      	mov	r3, r0
}
 8015850:	4618      	mov	r0, r3
 8015852:	3714      	adds	r7, #20
 8015854:	46bd      	mov	sp, r7
 8015856:	bd90      	pop	{r4, r7, pc}
 8015858:	0801cf00 	.word	0x0801cf00
 801585c:	0801d308 	.word	0x0801d308
 8015860:	0801cf54 	.word	0x0801cf54

08015864 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b08a      	sub	sp, #40	; 0x28
 8015868:	af02      	add	r7, sp, #8
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	460b      	mov	r3, r1
 801586e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015870:	2300      	movs	r3, #0
 8015872:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015874:	2300      	movs	r3, #0
 8015876:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015878:	78fb      	ldrb	r3, [r7, #3]
 801587a:	f003 0303 	and.w	r3, r3, #3
 801587e:	2b00      	cmp	r3, #0
 8015880:	d106      	bne.n	8015890 <tcp_enqueue_flags+0x2c>
 8015882:	4b67      	ldr	r3, [pc, #412]	; (8015a20 <tcp_enqueue_flags+0x1bc>)
 8015884:	f240 4211 	movw	r2, #1041	; 0x411
 8015888:	4966      	ldr	r1, [pc, #408]	; (8015a24 <tcp_enqueue_flags+0x1c0>)
 801588a:	4867      	ldr	r0, [pc, #412]	; (8015a28 <tcp_enqueue_flags+0x1c4>)
 801588c:	f004 fada 	bl	8019e44 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d106      	bne.n	80158a4 <tcp_enqueue_flags+0x40>
 8015896:	4b62      	ldr	r3, [pc, #392]	; (8015a20 <tcp_enqueue_flags+0x1bc>)
 8015898:	f240 4213 	movw	r2, #1043	; 0x413
 801589c:	4963      	ldr	r1, [pc, #396]	; (8015a2c <tcp_enqueue_flags+0x1c8>)
 801589e:	4862      	ldr	r0, [pc, #392]	; (8015a28 <tcp_enqueue_flags+0x1c4>)
 80158a0:	f004 fad0 	bl	8019e44 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80158a4:	78fb      	ldrb	r3, [r7, #3]
 80158a6:	f003 0302 	and.w	r3, r3, #2
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d001      	beq.n	80158b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80158ae:	2301      	movs	r3, #1
 80158b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80158b2:	7ffb      	ldrb	r3, [r7, #31]
 80158b4:	009b      	lsls	r3, r3, #2
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	f003 0304 	and.w	r3, r3, #4
 80158bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80158be:	7dfb      	ldrb	r3, [r7, #23]
 80158c0:	b29b      	uxth	r3, r3
 80158c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158c6:	4619      	mov	r1, r3
 80158c8:	2036      	movs	r0, #54	; 0x36
 80158ca:	f7fa fa2b 	bl	800fd24 <pbuf_alloc>
 80158ce:	6138      	str	r0, [r7, #16]
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d109      	bne.n	80158ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	8b5b      	ldrh	r3, [r3, #26]
 80158da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158de:	b29a      	uxth	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80158e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80158e8:	e095      	b.n	8015a16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	895a      	ldrh	r2, [r3, #10]
 80158ee:	7dfb      	ldrb	r3, [r7, #23]
 80158f0:	b29b      	uxth	r3, r3
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d206      	bcs.n	8015904 <tcp_enqueue_flags+0xa0>
 80158f6:	4b4a      	ldr	r3, [pc, #296]	; (8015a20 <tcp_enqueue_flags+0x1bc>)
 80158f8:	f240 4239 	movw	r2, #1081	; 0x439
 80158fc:	494c      	ldr	r1, [pc, #304]	; (8015a30 <tcp_enqueue_flags+0x1cc>)
 80158fe:	484a      	ldr	r0, [pc, #296]	; (8015a28 <tcp_enqueue_flags+0x1c4>)
 8015900:	f004 faa0 	bl	8019e44 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015908:	78fa      	ldrb	r2, [r7, #3]
 801590a:	7ffb      	ldrb	r3, [r7, #31]
 801590c:	9300      	str	r3, [sp, #0]
 801590e:	460b      	mov	r3, r1
 8015910:	6939      	ldr	r1, [r7, #16]
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f7ff f918 	bl	8014b48 <tcp_create_segment>
 8015918:	60f8      	str	r0, [r7, #12]
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d109      	bne.n	8015934 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	8b5b      	ldrh	r3, [r3, #26]
 8015924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015928:	b29a      	uxth	r2, r3
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801592e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015932:	e070      	b.n	8015a16 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	68db      	ldr	r3, [r3, #12]
 8015938:	f003 0303 	and.w	r3, r3, #3
 801593c:	2b00      	cmp	r3, #0
 801593e:	d006      	beq.n	801594e <tcp_enqueue_flags+0xea>
 8015940:	4b37      	ldr	r3, [pc, #220]	; (8015a20 <tcp_enqueue_flags+0x1bc>)
 8015942:	f240 4242 	movw	r2, #1090	; 0x442
 8015946:	493b      	ldr	r1, [pc, #236]	; (8015a34 <tcp_enqueue_flags+0x1d0>)
 8015948:	4837      	ldr	r0, [pc, #220]	; (8015a28 <tcp_enqueue_flags+0x1c4>)
 801594a:	f004 fa7b 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	891b      	ldrh	r3, [r3, #8]
 8015952:	2b00      	cmp	r3, #0
 8015954:	d006      	beq.n	8015964 <tcp_enqueue_flags+0x100>
 8015956:	4b32      	ldr	r3, [pc, #200]	; (8015a20 <tcp_enqueue_flags+0x1bc>)
 8015958:	f240 4243 	movw	r2, #1091	; 0x443
 801595c:	4936      	ldr	r1, [pc, #216]	; (8015a38 <tcp_enqueue_flags+0x1d4>)
 801595e:	4832      	ldr	r0, [pc, #200]	; (8015a28 <tcp_enqueue_flags+0x1c4>)
 8015960:	f004 fa70 	bl	8019e44 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015968:	2b00      	cmp	r3, #0
 801596a:	d103      	bne.n	8015974 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	68fa      	ldr	r2, [r7, #12]
 8015970:	66da      	str	r2, [r3, #108]	; 0x6c
 8015972:	e00d      	b.n	8015990 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015978:	61bb      	str	r3, [r7, #24]
 801597a:	e002      	b.n	8015982 <tcp_enqueue_flags+0x11e>
 801597c:	69bb      	ldr	r3, [r7, #24]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	61bb      	str	r3, [r7, #24]
 8015982:	69bb      	ldr	r3, [r7, #24]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1f8      	bne.n	801597c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801598a:	69bb      	ldr	r3, [r7, #24]
 801598c:	68fa      	ldr	r2, [r7, #12]
 801598e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	2200      	movs	r2, #0
 8015994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015998:	78fb      	ldrb	r3, [r7, #3]
 801599a:	f003 0302 	and.w	r3, r3, #2
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d104      	bne.n	80159ac <tcp_enqueue_flags+0x148>
 80159a2:	78fb      	ldrb	r3, [r7, #3]
 80159a4:	f003 0301 	and.w	r3, r3, #1
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d004      	beq.n	80159b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159b0:	1c5a      	adds	r2, r3, #1
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80159b6:	78fb      	ldrb	r3, [r7, #3]
 80159b8:	f003 0301 	and.w	r3, r3, #1
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d006      	beq.n	80159ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	8b5b      	ldrh	r3, [r3, #26]
 80159c4:	f043 0320 	orr.w	r3, r3, #32
 80159c8:	b29a      	uxth	r2, r3
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fa fd18 	bl	8010408 <pbuf_clen>
 80159d8:	4603      	mov	r3, r0
 80159da:	461a      	mov	r2, r3
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159e2:	4413      	add	r3, r2
 80159e4:	b29a      	uxth	r2, r3
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00e      	beq.n	8015a14 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d10a      	bne.n	8015a14 <tcp_enqueue_flags+0x1b0>
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d106      	bne.n	8015a14 <tcp_enqueue_flags+0x1b0>
 8015a06:	4b06      	ldr	r3, [pc, #24]	; (8015a20 <tcp_enqueue_flags+0x1bc>)
 8015a08:	f240 4265 	movw	r2, #1125	; 0x465
 8015a0c:	490b      	ldr	r1, [pc, #44]	; (8015a3c <tcp_enqueue_flags+0x1d8>)
 8015a0e:	4806      	ldr	r0, [pc, #24]	; (8015a28 <tcp_enqueue_flags+0x1c4>)
 8015a10:	f004 fa18 	bl	8019e44 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3720      	adds	r7, #32
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	0801cf00 	.word	0x0801cf00
 8015a24:	0801d324 	.word	0x0801d324
 8015a28:	0801cf54 	.word	0x0801cf54
 8015a2c:	0801d37c 	.word	0x0801d37c
 8015a30:	0801d39c 	.word	0x0801d39c
 8015a34:	0801d3d8 	.word	0x0801d3d8
 8015a38:	0801d3f0 	.word	0x0801d3f0
 8015a3c:	0801d41c 	.word	0x0801d41c

08015a40 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015a40:	b5b0      	push	{r4, r5, r7, lr}
 8015a42:	b08a      	sub	sp, #40	; 0x28
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <tcp_output+0x1c>
 8015a4e:	4b8a      	ldr	r3, [pc, #552]	; (8015c78 <tcp_output+0x238>)
 8015a50:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015a54:	4989      	ldr	r1, [pc, #548]	; (8015c7c <tcp_output+0x23c>)
 8015a56:	488a      	ldr	r0, [pc, #552]	; (8015c80 <tcp_output+0x240>)
 8015a58:	f004 f9f4 	bl	8019e44 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	7d1b      	ldrb	r3, [r3, #20]
 8015a60:	2b01      	cmp	r3, #1
 8015a62:	d106      	bne.n	8015a72 <tcp_output+0x32>
 8015a64:	4b84      	ldr	r3, [pc, #528]	; (8015c78 <tcp_output+0x238>)
 8015a66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015a6a:	4986      	ldr	r1, [pc, #536]	; (8015c84 <tcp_output+0x244>)
 8015a6c:	4884      	ldr	r0, [pc, #528]	; (8015c80 <tcp_output+0x240>)
 8015a6e:	f004 f9e9 	bl	8019e44 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015a72:	4b85      	ldr	r3, [pc, #532]	; (8015c88 <tcp_output+0x248>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	687a      	ldr	r2, [r7, #4]
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d101      	bne.n	8015a80 <tcp_output+0x40>
    return ERR_OK;
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	e1ce      	b.n	8015e1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015a8c:	4293      	cmp	r3, r2
 8015a8e:	bf28      	it	cs
 8015a90:	4613      	movcs	r3, r2
 8015a92:	b29b      	uxth	r3, r3
 8015a94:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10b      	bne.n	8015aba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	8b5b      	ldrh	r3, [r3, #26]
 8015aa6:	f003 0302 	and.w	r3, r3, #2
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	f000 81aa 	beq.w	8015e04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f000 fdcb 	bl	801664c <tcp_send_empty_ack>
 8015ab6:	4603      	mov	r3, r0
 8015ab8:	e1b1      	b.n	8015e1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015aba:	6879      	ldr	r1, [r7, #4]
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	3304      	adds	r3, #4
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f7ff f824 	bl	8014b10 <tcp_route>
 8015ac8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d102      	bne.n	8015ad6 <tcp_output+0x96>
    return ERR_RTE;
 8015ad0:	f06f 0303 	mvn.w	r3, #3
 8015ad4:	e1a3      	b.n	8015e1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d003      	beq.n	8015ae4 <tcp_output+0xa4>
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	681b      	ldr	r3, [r3, #0]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d111      	bne.n	8015b08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015ae4:	697b      	ldr	r3, [r7, #20]
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d002      	beq.n	8015af0 <tcp_output+0xb0>
 8015aea:	697b      	ldr	r3, [r7, #20]
 8015aec:	3304      	adds	r3, #4
 8015aee:	e000      	b.n	8015af2 <tcp_output+0xb2>
 8015af0:	2300      	movs	r3, #0
 8015af2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d102      	bne.n	8015b00 <tcp_output+0xc0>
      return ERR_RTE;
 8015afa:	f06f 0303 	mvn.w	r3, #3
 8015afe:	e18e      	b.n	8015e1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015b00:	693b      	ldr	r3, [r7, #16]
 8015b02:	681a      	ldr	r2, [r3, #0]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7f9 f80f 	bl	800eb32 <lwip_htonl>
 8015b14:	4602      	mov	r2, r0
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b1a:	1ad3      	subs	r3, r2, r3
 8015b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b1e:	8912      	ldrh	r2, [r2, #8]
 8015b20:	4413      	add	r3, r2
 8015b22:	69ba      	ldr	r2, [r7, #24]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d227      	bcs.n	8015b78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015b2e:	461a      	mov	r2, r3
 8015b30:	69bb      	ldr	r3, [r7, #24]
 8015b32:	4293      	cmp	r3, r2
 8015b34:	d114      	bne.n	8015b60 <tcp_output+0x120>
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d110      	bne.n	8015b60 <tcp_output+0x120>
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d10b      	bne.n	8015b60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2201      	movs	r2, #1
 8015b54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	8b5b      	ldrh	r3, [r3, #26]
 8015b64:	f003 0302 	and.w	r3, r3, #2
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	f000 814d 	beq.w	8015e08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015b6e:	6878      	ldr	r0, [r7, #4]
 8015b70:	f000 fd6c 	bl	801664c <tcp_send_empty_ack>
 8015b74:	4603      	mov	r3, r0
 8015b76:	e152      	b.n	8015e1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	2200      	movs	r2, #0
 8015b7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015b86:	6a3b      	ldr	r3, [r7, #32]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f000 811c 	beq.w	8015dc6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015b8e:	e002      	b.n	8015b96 <tcp_output+0x156>
 8015b90:	6a3b      	ldr	r3, [r7, #32]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	623b      	str	r3, [r7, #32]
 8015b96:	6a3b      	ldr	r3, [r7, #32]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d1f8      	bne.n	8015b90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015b9e:	e112      	b.n	8015dc6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba2:	68db      	ldr	r3, [r3, #12]
 8015ba4:	899b      	ldrh	r3, [r3, #12]
 8015ba6:	b29b      	uxth	r3, r3
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7f8 ffad 	bl	800eb08 <lwip_htons>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	f003 0304 	and.w	r3, r3, #4
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d006      	beq.n	8015bc8 <tcp_output+0x188>
 8015bba:	4b2f      	ldr	r3, [pc, #188]	; (8015c78 <tcp_output+0x238>)
 8015bbc:	f240 5236 	movw	r2, #1334	; 0x536
 8015bc0:	4932      	ldr	r1, [pc, #200]	; (8015c8c <tcp_output+0x24c>)
 8015bc2:	482f      	ldr	r0, [pc, #188]	; (8015c80 <tcp_output+0x240>)
 8015bc4:	f004 f93e 	bl	8019e44 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bcc:	2b00      	cmp	r3, #0
 8015bce:	d01f      	beq.n	8015c10 <tcp_output+0x1d0>
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	8b5b      	ldrh	r3, [r3, #26]
 8015bd4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d119      	bne.n	8015c10 <tcp_output+0x1d0>
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d00b      	beq.n	8015bfc <tcp_output+0x1bc>
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d110      	bne.n	8015c10 <tcp_output+0x1d0>
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bf2:	891a      	ldrh	r2, [r3, #8]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bf8:	429a      	cmp	r2, r3
 8015bfa:	d209      	bcs.n	8015c10 <tcp_output+0x1d0>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d004      	beq.n	8015c10 <tcp_output+0x1d0>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c0c:	2b08      	cmp	r3, #8
 8015c0e:	d901      	bls.n	8015c14 <tcp_output+0x1d4>
 8015c10:	2301      	movs	r3, #1
 8015c12:	e000      	b.n	8015c16 <tcp_output+0x1d6>
 8015c14:	2300      	movs	r3, #0
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d106      	bne.n	8015c28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	8b5b      	ldrh	r3, [r3, #26]
 8015c1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f000 80e4 	beq.w	8015df0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	7d1b      	ldrb	r3, [r3, #20]
 8015c2c:	2b02      	cmp	r3, #2
 8015c2e:	d00d      	beq.n	8015c4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c32:	68db      	ldr	r3, [r3, #12]
 8015c34:	899b      	ldrh	r3, [r3, #12]
 8015c36:	b29c      	uxth	r4, r3
 8015c38:	2010      	movs	r0, #16
 8015c3a:	f7f8 ff65 	bl	800eb08 <lwip_htons>
 8015c3e:	4603      	mov	r3, r0
 8015c40:	461a      	mov	r2, r3
 8015c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c44:	68db      	ldr	r3, [r3, #12]
 8015c46:	4322      	orrs	r2, r4
 8015c48:	b292      	uxth	r2, r2
 8015c4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015c4c:	697a      	ldr	r2, [r7, #20]
 8015c4e:	6879      	ldr	r1, [r7, #4]
 8015c50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c52:	f000 f909 	bl	8015e68 <tcp_output_segment>
 8015c56:	4603      	mov	r3, r0
 8015c58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d016      	beq.n	8015c90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	8b5b      	ldrh	r3, [r3, #26]
 8015c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c6a:	b29a      	uxth	r2, r3
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	835a      	strh	r2, [r3, #26]
      return err;
 8015c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c74:	e0d3      	b.n	8015e1e <tcp_output+0x3de>
 8015c76:	bf00      	nop
 8015c78:	0801cf00 	.word	0x0801cf00
 8015c7c:	0801d444 	.word	0x0801d444
 8015c80:	0801cf54 	.word	0x0801cf54
 8015c84:	0801d45c 	.word	0x0801d45c
 8015c88:	2004f5d0 	.word	0x2004f5d0
 8015c8c:	0801d484 	.word	0x0801d484
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	7d1b      	ldrb	r3, [r3, #20]
 8015c9c:	2b02      	cmp	r3, #2
 8015c9e:	d006      	beq.n	8015cae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	8b5b      	ldrh	r3, [r3, #26]
 8015ca4:	f023 0303 	bic.w	r3, r3, #3
 8015ca8:	b29a      	uxth	r2, r3
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7f8 ff3c 	bl	800eb32 <lwip_htonl>
 8015cba:	4604      	mov	r4, r0
 8015cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cbe:	891b      	ldrh	r3, [r3, #8]
 8015cc0:	461d      	mov	r5, r3
 8015cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc4:	68db      	ldr	r3, [r3, #12]
 8015cc6:	899b      	ldrh	r3, [r3, #12]
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7f8 ff1c 	bl	800eb08 <lwip_htons>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	b2db      	uxtb	r3, r3
 8015cd4:	f003 0303 	and.w	r3, r3, #3
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d001      	beq.n	8015ce0 <tcp_output+0x2a0>
 8015cdc:	2301      	movs	r3, #1
 8015cde:	e000      	b.n	8015ce2 <tcp_output+0x2a2>
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	442b      	add	r3, r5
 8015ce4:	4423      	add	r3, r4
 8015ce6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	1ad3      	subs	r3, r2, r3
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	da02      	bge.n	8015cfa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	68ba      	ldr	r2, [r7, #8]
 8015cf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfc:	891b      	ldrh	r3, [r3, #8]
 8015cfe:	461c      	mov	r4, r3
 8015d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d02:	68db      	ldr	r3, [r3, #12]
 8015d04:	899b      	ldrh	r3, [r3, #12]
 8015d06:	b29b      	uxth	r3, r3
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7f8 fefd 	bl	800eb08 <lwip_htons>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	b2db      	uxtb	r3, r3
 8015d12:	f003 0303 	and.w	r3, r3, #3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d001      	beq.n	8015d1e <tcp_output+0x2de>
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	e000      	b.n	8015d20 <tcp_output+0x2e0>
 8015d1e:	2300      	movs	r3, #0
 8015d20:	4423      	add	r3, r4
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d049      	beq.n	8015dba <tcp_output+0x37a>
      seg->next = NULL;
 8015d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d28:	2200      	movs	r2, #0
 8015d2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d105      	bne.n	8015d40 <tcp_output+0x300>
        pcb->unacked = seg;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3c:	623b      	str	r3, [r7, #32]
 8015d3e:	e03f      	b.n	8015dc0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d42:	68db      	ldr	r3, [r3, #12]
 8015d44:	685b      	ldr	r3, [r3, #4]
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7f8 fef3 	bl	800eb32 <lwip_htonl>
 8015d4c:	4604      	mov	r4, r0
 8015d4e:	6a3b      	ldr	r3, [r7, #32]
 8015d50:	68db      	ldr	r3, [r3, #12]
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7f8 feec 	bl	800eb32 <lwip_htonl>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	1ae3      	subs	r3, r4, r3
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	da24      	bge.n	8015dac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	3370      	adds	r3, #112	; 0x70
 8015d66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015d68:	e002      	b.n	8015d70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015d6a:	69fb      	ldr	r3, [r7, #28]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d011      	beq.n	8015d9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015d78:	69fb      	ldr	r3, [r7, #28]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	68db      	ldr	r3, [r3, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7f8 fed6 	bl	800eb32 <lwip_htonl>
 8015d86:	4604      	mov	r4, r0
 8015d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f7f8 fecf 	bl	800eb32 <lwip_htonl>
 8015d94:	4603      	mov	r3, r0
 8015d96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dbe6      	blt.n	8015d6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015d9c:	69fb      	ldr	r3, [r7, #28]
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015da4:	69fb      	ldr	r3, [r7, #28]
 8015da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015da8:	601a      	str	r2, [r3, #0]
 8015daa:	e009      	b.n	8015dc0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015db0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015db2:	6a3b      	ldr	r3, [r7, #32]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	623b      	str	r3, [r7, #32]
 8015db8:	e002      	b.n	8015dc0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015dbc:	f7fb ff19 	bl	8011bf2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d012      	beq.n	8015df2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dce:	68db      	ldr	r3, [r3, #12]
 8015dd0:	685b      	ldr	r3, [r3, #4]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7f8 fead 	bl	800eb32 <lwip_htonl>
 8015dd8:	4602      	mov	r2, r0
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dde:	1ad3      	subs	r3, r2, r3
 8015de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015de2:	8912      	ldrh	r2, [r2, #8]
 8015de4:	4413      	add	r3, r2
  while (seg != NULL &&
 8015de6:	69ba      	ldr	r2, [r7, #24]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	f4bf aed9 	bcs.w	8015ba0 <tcp_output+0x160>
 8015dee:	e000      	b.n	8015df2 <tcp_output+0x3b2>
      break;
 8015df0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d108      	bne.n	8015e0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015e02:	e004      	b.n	8015e0e <tcp_output+0x3ce>
    goto output_done;
 8015e04:	bf00      	nop
 8015e06:	e002      	b.n	8015e0e <tcp_output+0x3ce>
    goto output_done;
 8015e08:	bf00      	nop
 8015e0a:	e000      	b.n	8015e0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015e0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	8b5b      	ldrh	r3, [r3, #26]
 8015e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015e1c:	2300      	movs	r3, #0
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3728      	adds	r7, #40	; 0x28
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bdb0      	pop	{r4, r5, r7, pc}
 8015e26:	bf00      	nop

08015e28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d106      	bne.n	8015e44 <tcp_output_segment_busy+0x1c>
 8015e36:	4b09      	ldr	r3, [pc, #36]	; (8015e5c <tcp_output_segment_busy+0x34>)
 8015e38:	f240 529a 	movw	r2, #1434	; 0x59a
 8015e3c:	4908      	ldr	r1, [pc, #32]	; (8015e60 <tcp_output_segment_busy+0x38>)
 8015e3e:	4809      	ldr	r0, [pc, #36]	; (8015e64 <tcp_output_segment_busy+0x3c>)
 8015e40:	f004 f800 	bl	8019e44 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	685b      	ldr	r3, [r3, #4]
 8015e48:	7b9b      	ldrb	r3, [r3, #14]
 8015e4a:	2b01      	cmp	r3, #1
 8015e4c:	d001      	beq.n	8015e52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015e4e:	2301      	movs	r3, #1
 8015e50:	e000      	b.n	8015e54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015e52:	2300      	movs	r3, #0
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	3708      	adds	r7, #8
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	bd80      	pop	{r7, pc}
 8015e5c:	0801cf00 	.word	0x0801cf00
 8015e60:	0801d49c 	.word	0x0801d49c
 8015e64:	0801cf54 	.word	0x0801cf54

08015e68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015e68:	b5b0      	push	{r4, r5, r7, lr}
 8015e6a:	b08c      	sub	sp, #48	; 0x30
 8015e6c:	af04      	add	r7, sp, #16
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d106      	bne.n	8015e88 <tcp_output_segment+0x20>
 8015e7a:	4b63      	ldr	r3, [pc, #396]	; (8016008 <tcp_output_segment+0x1a0>)
 8015e7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015e80:	4962      	ldr	r1, [pc, #392]	; (801600c <tcp_output_segment+0x1a4>)
 8015e82:	4863      	ldr	r0, [pc, #396]	; (8016010 <tcp_output_segment+0x1a8>)
 8015e84:	f003 ffde 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015e88:	68bb      	ldr	r3, [r7, #8]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d106      	bne.n	8015e9c <tcp_output_segment+0x34>
 8015e8e:	4b5e      	ldr	r3, [pc, #376]	; (8016008 <tcp_output_segment+0x1a0>)
 8015e90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015e94:	495f      	ldr	r1, [pc, #380]	; (8016014 <tcp_output_segment+0x1ac>)
 8015e96:	485e      	ldr	r0, [pc, #376]	; (8016010 <tcp_output_segment+0x1a8>)
 8015e98:	f003 ffd4 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d106      	bne.n	8015eb0 <tcp_output_segment+0x48>
 8015ea2:	4b59      	ldr	r3, [pc, #356]	; (8016008 <tcp_output_segment+0x1a0>)
 8015ea4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015ea8:	495b      	ldr	r1, [pc, #364]	; (8016018 <tcp_output_segment+0x1b0>)
 8015eaa:	4859      	ldr	r0, [pc, #356]	; (8016010 <tcp_output_segment+0x1a8>)
 8015eac:	f003 ffca 	bl	8019e44 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015eb0:	68f8      	ldr	r0, [r7, #12]
 8015eb2:	f7ff ffb9 	bl	8015e28 <tcp_output_segment_busy>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d001      	beq.n	8015ec0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	e09f      	b.n	8016000 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	68dc      	ldr	r4, [r3, #12]
 8015ec8:	4610      	mov	r0, r2
 8015eca:	f7f8 fe32 	bl	800eb32 <lwip_htonl>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	68dc      	ldr	r4, [r3, #12]
 8015eda:	4610      	mov	r0, r2
 8015edc:	f7f8 fe14 	bl	800eb08 <lwip_htons>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ee4:	68bb      	ldr	r3, [r7, #8]
 8015ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee8:	68ba      	ldr	r2, [r7, #8]
 8015eea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015eec:	441a      	add	r2, r3
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	68db      	ldr	r3, [r3, #12]
 8015ef6:	3314      	adds	r3, #20
 8015ef8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	7a9b      	ldrb	r3, [r3, #10]
 8015efe:	f003 0301 	and.w	r3, r3, #1
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d015      	beq.n	8015f32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015f06:	68bb      	ldr	r3, [r7, #8]
 8015f08:	3304      	adds	r3, #4
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	6879      	ldr	r1, [r7, #4]
 8015f0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8015f12:	f7fc fa33 	bl	801237c <tcp_eff_send_mss_netif>
 8015f16:	4603      	mov	r3, r0
 8015f18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015f1a:	8b7b      	ldrh	r3, [r7, #26]
 8015f1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7f8 fe06 	bl	800eb32 <lwip_htonl>
 8015f26:	4602      	mov	r2, r0
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015f2c:	69fb      	ldr	r3, [r7, #28]
 8015f2e:	3304      	adds	r3, #4
 8015f30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015f32:	68bb      	ldr	r3, [r7, #8]
 8015f34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	da02      	bge.n	8015f42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015f3c:	68bb      	ldr	r3, [r7, #8]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d10c      	bne.n	8015f64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015f4a:	4b34      	ldr	r3, [pc, #208]	; (801601c <tcp_output_segment+0x1b4>)
 8015f4c:	681a      	ldr	r2, [r3, #0]
 8015f4e:	68bb      	ldr	r3, [r7, #8]
 8015f50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	68db      	ldr	r3, [r3, #12]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f8 fdea 	bl	800eb32 <lwip_htonl>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	68bb      	ldr	r3, [r7, #8]
 8015f62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	68da      	ldr	r2, [r3, #12]
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	1ad3      	subs	r3, r2, r3
 8015f70:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015f72:	68fb      	ldr	r3, [r7, #12]
 8015f74:	685b      	ldr	r3, [r3, #4]
 8015f76:	8959      	ldrh	r1, [r3, #10]
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	685b      	ldr	r3, [r3, #4]
 8015f7c:	8b3a      	ldrh	r2, [r7, #24]
 8015f7e:	1a8a      	subs	r2, r1, r2
 8015f80:	b292      	uxth	r2, r2
 8015f82:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	8919      	ldrh	r1, [r3, #8]
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	8b3a      	ldrh	r2, [r7, #24]
 8015f90:	1a8a      	subs	r2, r1, r2
 8015f92:	b292      	uxth	r2, r2
 8015f94:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	68fa      	ldr	r2, [r7, #12]
 8015f9c:	68d2      	ldr	r2, [r2, #12]
 8015f9e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	68db      	ldr	r3, [r3, #12]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	741a      	strb	r2, [r3, #16]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	f103 0214 	add.w	r2, r3, #20
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	7a9b      	ldrb	r3, [r3, #10]
 8015fb8:	009b      	lsls	r3, r3, #2
 8015fba:	f003 0304 	and.w	r3, r3, #4
 8015fbe:	4413      	add	r3, r2
 8015fc0:	69fa      	ldr	r2, [r7, #28]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d006      	beq.n	8015fd4 <tcp_output_segment+0x16c>
 8015fc6:	4b10      	ldr	r3, [pc, #64]	; (8016008 <tcp_output_segment+0x1a0>)
 8015fc8:	f240 621c 	movw	r2, #1564	; 0x61c
 8015fcc:	4914      	ldr	r1, [pc, #80]	; (8016020 <tcp_output_segment+0x1b8>)
 8015fce:	4810      	ldr	r0, [pc, #64]	; (8016010 <tcp_output_segment+0x1a8>)
 8015fd0:	f003 ff38 	bl	8019e44 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	6858      	ldr	r0, [r3, #4]
 8015fd8:	68b9      	ldr	r1, [r7, #8]
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	1d1c      	adds	r4, r3, #4
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	7add      	ldrb	r5, [r3, #11]
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	7a9b      	ldrb	r3, [r3, #10]
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	9202      	str	r2, [sp, #8]
 8015fea:	2206      	movs	r2, #6
 8015fec:	9201      	str	r2, [sp, #4]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	462b      	mov	r3, r5
 8015ff2:	4622      	mov	r2, r4
 8015ff4:	f002 fb6a 	bl	80186cc <ip4_output_if>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016000:	4618      	mov	r0, r3
 8016002:	3720      	adds	r7, #32
 8016004:	46bd      	mov	sp, r7
 8016006:	bdb0      	pop	{r4, r5, r7, pc}
 8016008:	0801cf00 	.word	0x0801cf00
 801600c:	0801d4c4 	.word	0x0801d4c4
 8016010:	0801cf54 	.word	0x0801cf54
 8016014:	0801d4e4 	.word	0x0801d4e4
 8016018:	0801d504 	.word	0x0801d504
 801601c:	2004f584 	.word	0x2004f584
 8016020:	0801d528 	.word	0x0801d528

08016024 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016024:	b5b0      	push	{r4, r5, r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d106      	bne.n	8016040 <tcp_rexmit_rto_prepare+0x1c>
 8016032:	4b31      	ldr	r3, [pc, #196]	; (80160f8 <tcp_rexmit_rto_prepare+0xd4>)
 8016034:	f240 6263 	movw	r2, #1635	; 0x663
 8016038:	4930      	ldr	r1, [pc, #192]	; (80160fc <tcp_rexmit_rto_prepare+0xd8>)
 801603a:	4831      	ldr	r0, [pc, #196]	; (8016100 <tcp_rexmit_rto_prepare+0xdc>)
 801603c:	f003 ff02 	bl	8019e44 <iprintf>

  if (pcb->unacked == NULL) {
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016044:	2b00      	cmp	r3, #0
 8016046:	d102      	bne.n	801604e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016048:	f06f 0305 	mvn.w	r3, #5
 801604c:	e050      	b.n	80160f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016052:	60fb      	str	r3, [r7, #12]
 8016054:	e00b      	b.n	801606e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016056:	68f8      	ldr	r0, [r7, #12]
 8016058:	f7ff fee6 	bl	8015e28 <tcp_output_segment_busy>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d002      	beq.n	8016068 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016062:	f06f 0305 	mvn.w	r3, #5
 8016066:	e043      	b.n	80160f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	60fb      	str	r3, [r7, #12]
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1ef      	bne.n	8016056 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	f7ff fed6 	bl	8015e28 <tcp_output_segment_busy>
 801607c:	4603      	mov	r3, r0
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016082:	f06f 0305 	mvn.w	r3, #5
 8016086:	e033      	b.n	80160f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2200      	movs	r2, #0
 801609c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	8b5b      	ldrh	r3, [r3, #26]
 80160a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80160a6:	b29a      	uxth	r2, r3
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	685b      	ldr	r3, [r3, #4]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7f8 fd3d 	bl	800eb32 <lwip_htonl>
 80160b8:	4604      	mov	r4, r0
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	891b      	ldrh	r3, [r3, #8]
 80160be:	461d      	mov	r5, r3
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	899b      	ldrh	r3, [r3, #12]
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f8 fd1d 	bl	800eb08 <lwip_htons>
 80160ce:	4603      	mov	r3, r0
 80160d0:	b2db      	uxtb	r3, r3
 80160d2:	f003 0303 	and.w	r3, r3, #3
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d001      	beq.n	80160de <tcp_rexmit_rto_prepare+0xba>
 80160da:	2301      	movs	r3, #1
 80160dc:	e000      	b.n	80160e0 <tcp_rexmit_rto_prepare+0xbc>
 80160de:	2300      	movs	r3, #0
 80160e0:	442b      	add	r3, r5
 80160e2:	18e2      	adds	r2, r4, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2200      	movs	r2, #0
 80160ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80160ee:	2300      	movs	r3, #0
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3710      	adds	r7, #16
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bdb0      	pop	{r4, r5, r7, pc}
 80160f8:	0801cf00 	.word	0x0801cf00
 80160fc:	0801d53c 	.word	0x0801d53c
 8016100:	0801cf54 	.word	0x0801cf54

08016104 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d106      	bne.n	8016120 <tcp_rexmit_rto_commit+0x1c>
 8016112:	4b0d      	ldr	r3, [pc, #52]	; (8016148 <tcp_rexmit_rto_commit+0x44>)
 8016114:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016118:	490c      	ldr	r1, [pc, #48]	; (801614c <tcp_rexmit_rto_commit+0x48>)
 801611a:	480d      	ldr	r0, [pc, #52]	; (8016150 <tcp_rexmit_rto_commit+0x4c>)
 801611c:	f003 fe92 	bl	8019e44 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016126:	2bff      	cmp	r3, #255	; 0xff
 8016128:	d007      	beq.n	801613a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016130:	3301      	adds	r3, #1
 8016132:	b2da      	uxtb	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f7ff fc80 	bl	8015a40 <tcp_output>
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}
 8016148:	0801cf00 	.word	0x0801cf00
 801614c:	0801d560 	.word	0x0801d560
 8016150:	0801cf54 	.word	0x0801cf54

08016154 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d106      	bne.n	8016170 <tcp_rexmit_rto+0x1c>
 8016162:	4b0a      	ldr	r3, [pc, #40]	; (801618c <tcp_rexmit_rto+0x38>)
 8016164:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016168:	4909      	ldr	r1, [pc, #36]	; (8016190 <tcp_rexmit_rto+0x3c>)
 801616a:	480a      	ldr	r0, [pc, #40]	; (8016194 <tcp_rexmit_rto+0x40>)
 801616c:	f003 fe6a 	bl	8019e44 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f7ff ff57 	bl	8016024 <tcp_rexmit_rto_prepare>
 8016176:	4603      	mov	r3, r0
 8016178:	2b00      	cmp	r3, #0
 801617a:	d102      	bne.n	8016182 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7ff ffc1 	bl	8016104 <tcp_rexmit_rto_commit>
  }
}
 8016182:	bf00      	nop
 8016184:	3708      	adds	r7, #8
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	0801cf00 	.word	0x0801cf00
 8016190:	0801d584 	.word	0x0801d584
 8016194:	0801cf54 	.word	0x0801cf54

08016198 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016198:	b590      	push	{r4, r7, lr}
 801619a:	b085      	sub	sp, #20
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d106      	bne.n	80161b4 <tcp_rexmit+0x1c>
 80161a6:	4b2f      	ldr	r3, [pc, #188]	; (8016264 <tcp_rexmit+0xcc>)
 80161a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80161ac:	492e      	ldr	r1, [pc, #184]	; (8016268 <tcp_rexmit+0xd0>)
 80161ae:	482f      	ldr	r0, [pc, #188]	; (801626c <tcp_rexmit+0xd4>)
 80161b0:	f003 fe48 	bl	8019e44 <iprintf>

  if (pcb->unacked == NULL) {
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d102      	bne.n	80161c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80161bc:	f06f 0305 	mvn.w	r3, #5
 80161c0:	e04c      	b.n	801625c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80161c8:	68b8      	ldr	r0, [r7, #8]
 80161ca:	f7ff fe2d 	bl	8015e28 <tcp_output_segment_busy>
 80161ce:	4603      	mov	r3, r0
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d002      	beq.n	80161da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80161d4:	f06f 0305 	mvn.w	r3, #5
 80161d8:	e040      	b.n	801625c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	681a      	ldr	r2, [r3, #0]
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	336c      	adds	r3, #108	; 0x6c
 80161e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80161e8:	e002      	b.n	80161f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d011      	beq.n	801621c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	4618      	mov	r0, r3
 8016202:	f7f8 fc96 	bl	800eb32 <lwip_htonl>
 8016206:	4604      	mov	r4, r0
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	4618      	mov	r0, r3
 8016210:	f7f8 fc8f 	bl	800eb32 <lwip_htonl>
 8016214:	4603      	mov	r3, r0
 8016216:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016218:	2b00      	cmp	r3, #0
 801621a:	dbe6      	blt.n	80161ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d103      	bne.n	801623a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016240:	2bff      	cmp	r3, #255	; 0xff
 8016242:	d007      	beq.n	8016254 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801624a:	3301      	adds	r3, #1
 801624c:	b2da      	uxtb	r2, r3
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2200      	movs	r2, #0
 8016258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801625a:	2300      	movs	r3, #0
}
 801625c:	4618      	mov	r0, r3
 801625e:	3714      	adds	r7, #20
 8016260:	46bd      	mov	sp, r7
 8016262:	bd90      	pop	{r4, r7, pc}
 8016264:	0801cf00 	.word	0x0801cf00
 8016268:	0801d5a0 	.word	0x0801d5a0
 801626c:	0801cf54 	.word	0x0801cf54

08016270 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b082      	sub	sp, #8
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d106      	bne.n	801628c <tcp_rexmit_fast+0x1c>
 801627e:	4b2a      	ldr	r3, [pc, #168]	; (8016328 <tcp_rexmit_fast+0xb8>)
 8016280:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016284:	4929      	ldr	r1, [pc, #164]	; (801632c <tcp_rexmit_fast+0xbc>)
 8016286:	482a      	ldr	r0, [pc, #168]	; (8016330 <tcp_rexmit_fast+0xc0>)
 8016288:	f003 fddc 	bl	8019e44 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016290:	2b00      	cmp	r3, #0
 8016292:	d045      	beq.n	8016320 <tcp_rexmit_fast+0xb0>
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	8b5b      	ldrh	r3, [r3, #26]
 8016298:	f003 0304 	and.w	r3, r3, #4
 801629c:	2b00      	cmp	r3, #0
 801629e:	d13f      	bne.n	8016320 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7ff ff79 	bl	8016198 <tcp_rexmit>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d139      	bne.n	8016320 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80162b8:	4293      	cmp	r3, r2
 80162ba:	bf28      	it	cs
 80162bc:	4613      	movcs	r3, r2
 80162be:	b29b      	uxth	r3, r3
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da00      	bge.n	80162c6 <tcp_rexmit_fast+0x56>
 80162c4:	3301      	adds	r3, #1
 80162c6:	105b      	asrs	r3, r3, #1
 80162c8:	b29a      	uxth	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80162d6:	461a      	mov	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	429a      	cmp	r2, r3
 80162e0:	d206      	bcs.n	80162f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162e6:	005b      	lsls	r3, r3, #1
 80162e8:	b29a      	uxth	r2, r3
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162fa:	4619      	mov	r1, r3
 80162fc:	0049      	lsls	r1, r1, #1
 80162fe:	440b      	add	r3, r1
 8016300:	b29b      	uxth	r3, r3
 8016302:	4413      	add	r3, r2
 8016304:	b29a      	uxth	r2, r3
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	8b5b      	ldrh	r3, [r3, #26]
 8016310:	f043 0304 	orr.w	r3, r3, #4
 8016314:	b29a      	uxth	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2200      	movs	r2, #0
 801631e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016320:	bf00      	nop
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	0801cf00 	.word	0x0801cf00
 801632c:	0801d5b8 	.word	0x0801d5b8
 8016330:	0801cf54 	.word	0x0801cf54

08016334 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b086      	sub	sp, #24
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	607b      	str	r3, [r7, #4]
 801633e:	460b      	mov	r3, r1
 8016340:	817b      	strh	r3, [r7, #10]
 8016342:	4613      	mov	r3, r2
 8016344:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016346:	897a      	ldrh	r2, [r7, #10]
 8016348:	893b      	ldrh	r3, [r7, #8]
 801634a:	4413      	add	r3, r2
 801634c:	b29b      	uxth	r3, r3
 801634e:	3314      	adds	r3, #20
 8016350:	b29b      	uxth	r3, r3
 8016352:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016356:	4619      	mov	r1, r3
 8016358:	2022      	movs	r0, #34	; 0x22
 801635a:	f7f9 fce3 	bl	800fd24 <pbuf_alloc>
 801635e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d04d      	beq.n	8016402 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016366:	897b      	ldrh	r3, [r7, #10]
 8016368:	3313      	adds	r3, #19
 801636a:	697a      	ldr	r2, [r7, #20]
 801636c:	8952      	ldrh	r2, [r2, #10]
 801636e:	4293      	cmp	r3, r2
 8016370:	db06      	blt.n	8016380 <tcp_output_alloc_header_common+0x4c>
 8016372:	4b26      	ldr	r3, [pc, #152]	; (801640c <tcp_output_alloc_header_common+0xd8>)
 8016374:	f240 7223 	movw	r2, #1827	; 0x723
 8016378:	4925      	ldr	r1, [pc, #148]	; (8016410 <tcp_output_alloc_header_common+0xdc>)
 801637a:	4826      	ldr	r0, [pc, #152]	; (8016414 <tcp_output_alloc_header_common+0xe0>)
 801637c:	f003 fd62 	bl	8019e44 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016386:	8c3b      	ldrh	r3, [r7, #32]
 8016388:	4618      	mov	r0, r3
 801638a:	f7f8 fbbd 	bl	800eb08 <lwip_htons>
 801638e:	4603      	mov	r3, r0
 8016390:	461a      	mov	r2, r3
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016398:	4618      	mov	r0, r3
 801639a:	f7f8 fbb5 	bl	800eb08 <lwip_htons>
 801639e:	4603      	mov	r3, r0
 80163a0:	461a      	mov	r2, r3
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80163ac:	68f8      	ldr	r0, [r7, #12]
 80163ae:	f7f8 fbc0 	bl	800eb32 <lwip_htonl>
 80163b2:	4602      	mov	r2, r0
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80163b8:	897b      	ldrh	r3, [r7, #10]
 80163ba:	089b      	lsrs	r3, r3, #2
 80163bc:	b29b      	uxth	r3, r3
 80163be:	3305      	adds	r3, #5
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	031b      	lsls	r3, r3, #12
 80163c4:	b29a      	uxth	r2, r3
 80163c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	4313      	orrs	r3, r2
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7f8 fb99 	bl	800eb08 <lwip_htons>
 80163d6:	4603      	mov	r3, r0
 80163d8:	461a      	mov	r2, r3
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80163de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7f8 fb91 	bl	800eb08 <lwip_htons>
 80163e6:	4603      	mov	r3, r0
 80163e8:	461a      	mov	r2, r3
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	2200      	movs	r2, #0
 80163f2:	741a      	strb	r2, [r3, #16]
 80163f4:	2200      	movs	r2, #0
 80163f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	2200      	movs	r2, #0
 80163fc:	749a      	strb	r2, [r3, #18]
 80163fe:	2200      	movs	r2, #0
 8016400:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016402:	697b      	ldr	r3, [r7, #20]
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	0801cf00 	.word	0x0801cf00
 8016410:	0801d5d8 	.word	0x0801d5d8
 8016414:	0801cf54 	.word	0x0801cf54

08016418 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016418:	b5b0      	push	{r4, r5, r7, lr}
 801641a:	b08a      	sub	sp, #40	; 0x28
 801641c:	af04      	add	r7, sp, #16
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	607b      	str	r3, [r7, #4]
 8016422:	460b      	mov	r3, r1
 8016424:	817b      	strh	r3, [r7, #10]
 8016426:	4613      	mov	r3, r2
 8016428:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d106      	bne.n	801643e <tcp_output_alloc_header+0x26>
 8016430:	4b15      	ldr	r3, [pc, #84]	; (8016488 <tcp_output_alloc_header+0x70>)
 8016432:	f240 7242 	movw	r2, #1858	; 0x742
 8016436:	4915      	ldr	r1, [pc, #84]	; (801648c <tcp_output_alloc_header+0x74>)
 8016438:	4815      	ldr	r0, [pc, #84]	; (8016490 <tcp_output_alloc_header+0x78>)
 801643a:	f003 fd03 	bl	8019e44 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	8adb      	ldrh	r3, [r3, #22]
 8016446:	68fa      	ldr	r2, [r7, #12]
 8016448:	8b12      	ldrh	r2, [r2, #24]
 801644a:	68f9      	ldr	r1, [r7, #12]
 801644c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801644e:	893d      	ldrh	r5, [r7, #8]
 8016450:	897c      	ldrh	r4, [r7, #10]
 8016452:	9103      	str	r1, [sp, #12]
 8016454:	2110      	movs	r1, #16
 8016456:	9102      	str	r1, [sp, #8]
 8016458:	9201      	str	r2, [sp, #4]
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	462a      	mov	r2, r5
 8016460:	4621      	mov	r1, r4
 8016462:	f7ff ff67 	bl	8016334 <tcp_output_alloc_header_common>
 8016466:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d006      	beq.n	801647c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016472:	68fa      	ldr	r2, [r7, #12]
 8016474:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016476:	441a      	add	r2, r3
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801647c:	697b      	ldr	r3, [r7, #20]
}
 801647e:	4618      	mov	r0, r3
 8016480:	3718      	adds	r7, #24
 8016482:	46bd      	mov	sp, r7
 8016484:	bdb0      	pop	{r4, r5, r7, pc}
 8016486:	bf00      	nop
 8016488:	0801cf00 	.word	0x0801cf00
 801648c:	0801d608 	.word	0x0801d608
 8016490:	0801cf54 	.word	0x0801cf54

08016494 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b088      	sub	sp, #32
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	4611      	mov	r1, r2
 80164a0:	461a      	mov	r2, r3
 80164a2:	460b      	mov	r3, r1
 80164a4:	71fb      	strb	r3, [r7, #7]
 80164a6:	4613      	mov	r3, r2
 80164a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80164aa:	2300      	movs	r3, #0
 80164ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d106      	bne.n	80164c2 <tcp_output_fill_options+0x2e>
 80164b4:	4b13      	ldr	r3, [pc, #76]	; (8016504 <tcp_output_fill_options+0x70>)
 80164b6:	f240 7256 	movw	r2, #1878	; 0x756
 80164ba:	4913      	ldr	r1, [pc, #76]	; (8016508 <tcp_output_fill_options+0x74>)
 80164bc:	4813      	ldr	r0, [pc, #76]	; (801650c <tcp_output_fill_options+0x78>)
 80164be:	f003 fcc1 	bl	8019e44 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	3314      	adds	r3, #20
 80164cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80164ce:	69bb      	ldr	r3, [r7, #24]
 80164d0:	f103 0214 	add.w	r2, r3, #20
 80164d4:	8bfb      	ldrh	r3, [r7, #30]
 80164d6:	009b      	lsls	r3, r3, #2
 80164d8:	4619      	mov	r1, r3
 80164da:	79fb      	ldrb	r3, [r7, #7]
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	f003 0304 	and.w	r3, r3, #4
 80164e2:	440b      	add	r3, r1
 80164e4:	4413      	add	r3, r2
 80164e6:	697a      	ldr	r2, [r7, #20]
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d006      	beq.n	80164fa <tcp_output_fill_options+0x66>
 80164ec:	4b05      	ldr	r3, [pc, #20]	; (8016504 <tcp_output_fill_options+0x70>)
 80164ee:	f240 7275 	movw	r2, #1909	; 0x775
 80164f2:	4907      	ldr	r1, [pc, #28]	; (8016510 <tcp_output_fill_options+0x7c>)
 80164f4:	4805      	ldr	r0, [pc, #20]	; (801650c <tcp_output_fill_options+0x78>)
 80164f6:	f003 fca5 	bl	8019e44 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80164fa:	bf00      	nop
 80164fc:	3720      	adds	r7, #32
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	0801cf00 	.word	0x0801cf00
 8016508:	0801d630 	.word	0x0801d630
 801650c:	0801cf54 	.word	0x0801cf54
 8016510:	0801d528 	.word	0x0801d528

08016514 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b08a      	sub	sp, #40	; 0x28
 8016518:	af04      	add	r7, sp, #16
 801651a:	60f8      	str	r0, [r7, #12]
 801651c:	60b9      	str	r1, [r7, #8]
 801651e:	607a      	str	r2, [r7, #4]
 8016520:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d106      	bne.n	8016536 <tcp_output_control_segment+0x22>
 8016528:	4b1c      	ldr	r3, [pc, #112]	; (801659c <tcp_output_control_segment+0x88>)
 801652a:	f240 7287 	movw	r2, #1927	; 0x787
 801652e:	491c      	ldr	r1, [pc, #112]	; (80165a0 <tcp_output_control_segment+0x8c>)
 8016530:	481c      	ldr	r0, [pc, #112]	; (80165a4 <tcp_output_control_segment+0x90>)
 8016532:	f003 fc87 	bl	8019e44 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016536:	683a      	ldr	r2, [r7, #0]
 8016538:	6879      	ldr	r1, [r7, #4]
 801653a:	68f8      	ldr	r0, [r7, #12]
 801653c:	f7fe fae8 	bl	8014b10 <tcp_route>
 8016540:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d102      	bne.n	801654e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016548:	23fc      	movs	r3, #252	; 0xfc
 801654a:	75fb      	strb	r3, [r7, #23]
 801654c:	e01c      	b.n	8016588 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d006      	beq.n	8016562 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	7adb      	ldrb	r3, [r3, #11]
 8016558:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	7a9b      	ldrb	r3, [r3, #10]
 801655e:	757b      	strb	r3, [r7, #21]
 8016560:	e003      	b.n	801656a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016562:	23ff      	movs	r3, #255	; 0xff
 8016564:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016566:	2300      	movs	r3, #0
 8016568:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801656a:	7dba      	ldrb	r2, [r7, #22]
 801656c:	693b      	ldr	r3, [r7, #16]
 801656e:	9302      	str	r3, [sp, #8]
 8016570:	2306      	movs	r3, #6
 8016572:	9301      	str	r3, [sp, #4]
 8016574:	7d7b      	ldrb	r3, [r7, #21]
 8016576:	9300      	str	r3, [sp, #0]
 8016578:	4613      	mov	r3, r2
 801657a:	683a      	ldr	r2, [r7, #0]
 801657c:	6879      	ldr	r1, [r7, #4]
 801657e:	68b8      	ldr	r0, [r7, #8]
 8016580:	f002 f8a4 	bl	80186cc <ip4_output_if>
 8016584:	4603      	mov	r3, r0
 8016586:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016588:	68b8      	ldr	r0, [r7, #8]
 801658a:	f7f9 feaf 	bl	80102ec <pbuf_free>
  return err;
 801658e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016592:	4618      	mov	r0, r3
 8016594:	3718      	adds	r7, #24
 8016596:	46bd      	mov	sp, r7
 8016598:	bd80      	pop	{r7, pc}
 801659a:	bf00      	nop
 801659c:	0801cf00 	.word	0x0801cf00
 80165a0:	0801d658 	.word	0x0801d658
 80165a4:	0801cf54 	.word	0x0801cf54

080165a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80165a8:	b590      	push	{r4, r7, lr}
 80165aa:	b08b      	sub	sp, #44	; 0x2c
 80165ac:	af04      	add	r7, sp, #16
 80165ae:	60f8      	str	r0, [r7, #12]
 80165b0:	60b9      	str	r1, [r7, #8]
 80165b2:	607a      	str	r2, [r7, #4]
 80165b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80165b6:	683b      	ldr	r3, [r7, #0]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d106      	bne.n	80165ca <tcp_rst+0x22>
 80165bc:	4b1f      	ldr	r3, [pc, #124]	; (801663c <tcp_rst+0x94>)
 80165be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80165c2:	491f      	ldr	r1, [pc, #124]	; (8016640 <tcp_rst+0x98>)
 80165c4:	481f      	ldr	r0, [pc, #124]	; (8016644 <tcp_rst+0x9c>)
 80165c6:	f003 fc3d 	bl	8019e44 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80165ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d106      	bne.n	80165de <tcp_rst+0x36>
 80165d0:	4b1a      	ldr	r3, [pc, #104]	; (801663c <tcp_rst+0x94>)
 80165d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80165d6:	491c      	ldr	r1, [pc, #112]	; (8016648 <tcp_rst+0xa0>)
 80165d8:	481a      	ldr	r0, [pc, #104]	; (8016644 <tcp_rst+0x9c>)
 80165da:	f003 fc33 	bl	8019e44 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80165de:	2300      	movs	r3, #0
 80165e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80165e2:	f246 0308 	movw	r3, #24584	; 0x6008
 80165e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80165e8:	7dfb      	ldrb	r3, [r7, #23]
 80165ea:	b29c      	uxth	r4, r3
 80165ec:	68b8      	ldr	r0, [r7, #8]
 80165ee:	f7f8 faa0 	bl	800eb32 <lwip_htonl>
 80165f2:	4602      	mov	r2, r0
 80165f4:	8abb      	ldrh	r3, [r7, #20]
 80165f6:	9303      	str	r3, [sp, #12]
 80165f8:	2314      	movs	r3, #20
 80165fa:	9302      	str	r3, [sp, #8]
 80165fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80165fe:	9301      	str	r3, [sp, #4]
 8016600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016602:	9300      	str	r3, [sp, #0]
 8016604:	4613      	mov	r3, r2
 8016606:	2200      	movs	r2, #0
 8016608:	4621      	mov	r1, r4
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f7ff fe92 	bl	8016334 <tcp_output_alloc_header_common>
 8016610:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d00c      	beq.n	8016632 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016618:	7dfb      	ldrb	r3, [r7, #23]
 801661a:	2200      	movs	r2, #0
 801661c:	6939      	ldr	r1, [r7, #16]
 801661e:	68f8      	ldr	r0, [r7, #12]
 8016620:	f7ff ff38 	bl	8016494 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016626:	683a      	ldr	r2, [r7, #0]
 8016628:	6939      	ldr	r1, [r7, #16]
 801662a:	68f8      	ldr	r0, [r7, #12]
 801662c:	f7ff ff72 	bl	8016514 <tcp_output_control_segment>
 8016630:	e000      	b.n	8016634 <tcp_rst+0x8c>
    return;
 8016632:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016634:	371c      	adds	r7, #28
 8016636:	46bd      	mov	sp, r7
 8016638:	bd90      	pop	{r4, r7, pc}
 801663a:	bf00      	nop
 801663c:	0801cf00 	.word	0x0801cf00
 8016640:	0801d684 	.word	0x0801d684
 8016644:	0801cf54 	.word	0x0801cf54
 8016648:	0801d6a0 	.word	0x0801d6a0

0801664c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801664c:	b590      	push	{r4, r7, lr}
 801664e:	b087      	sub	sp, #28
 8016650:	af00      	add	r7, sp, #0
 8016652:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016654:	2300      	movs	r3, #0
 8016656:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016658:	2300      	movs	r3, #0
 801665a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d106      	bne.n	8016670 <tcp_send_empty_ack+0x24>
 8016662:	4b28      	ldr	r3, [pc, #160]	; (8016704 <tcp_send_empty_ack+0xb8>)
 8016664:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016668:	4927      	ldr	r1, [pc, #156]	; (8016708 <tcp_send_empty_ack+0xbc>)
 801666a:	4828      	ldr	r0, [pc, #160]	; (801670c <tcp_send_empty_ack+0xc0>)
 801666c:	f003 fbea 	bl	8019e44 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016670:	7dfb      	ldrb	r3, [r7, #23]
 8016672:	009b      	lsls	r3, r3, #2
 8016674:	b2db      	uxtb	r3, r3
 8016676:	f003 0304 	and.w	r3, r3, #4
 801667a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801667c:	7d7b      	ldrb	r3, [r7, #21]
 801667e:	b29c      	uxth	r4, r3
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016684:	4618      	mov	r0, r3
 8016686:	f7f8 fa54 	bl	800eb32 <lwip_htonl>
 801668a:	4603      	mov	r3, r0
 801668c:	2200      	movs	r2, #0
 801668e:	4621      	mov	r1, r4
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f7ff fec1 	bl	8016418 <tcp_output_alloc_header>
 8016696:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d109      	bne.n	80166b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	8b5b      	ldrh	r3, [r3, #26]
 80166a2:	f043 0303 	orr.w	r3, r3, #3
 80166a6:	b29a      	uxth	r2, r3
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80166ac:	f06f 0301 	mvn.w	r3, #1
 80166b0:	e023      	b.n	80166fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80166b2:	7dbb      	ldrb	r3, [r7, #22]
 80166b4:	7dfa      	ldrb	r2, [r7, #23]
 80166b6:	6939      	ldr	r1, [r7, #16]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f7ff feeb 	bl	8016494 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	3304      	adds	r3, #4
 80166c4:	6939      	ldr	r1, [r7, #16]
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f7ff ff24 	bl	8016514 <tcp_output_control_segment>
 80166cc:	4603      	mov	r3, r0
 80166ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80166d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d007      	beq.n	80166e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	8b5b      	ldrh	r3, [r3, #26]
 80166dc:	f043 0303 	orr.w	r3, r3, #3
 80166e0:	b29a      	uxth	r2, r3
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	835a      	strh	r2, [r3, #26]
 80166e6:	e006      	b.n	80166f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	8b5b      	ldrh	r3, [r3, #26]
 80166ec:	f023 0303 	bic.w	r3, r3, #3
 80166f0:	b29a      	uxth	r2, r3
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80166f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	371c      	adds	r7, #28
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd90      	pop	{r4, r7, pc}
 8016702:	bf00      	nop
 8016704:	0801cf00 	.word	0x0801cf00
 8016708:	0801d6bc 	.word	0x0801d6bc
 801670c:	0801cf54 	.word	0x0801cf54

08016710 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016710:	b590      	push	{r4, r7, lr}
 8016712:	b087      	sub	sp, #28
 8016714:	af00      	add	r7, sp, #0
 8016716:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016718:	2300      	movs	r3, #0
 801671a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d106      	bne.n	8016730 <tcp_keepalive+0x20>
 8016722:	4b18      	ldr	r3, [pc, #96]	; (8016784 <tcp_keepalive+0x74>)
 8016724:	f640 0224 	movw	r2, #2084	; 0x824
 8016728:	4917      	ldr	r1, [pc, #92]	; (8016788 <tcp_keepalive+0x78>)
 801672a:	4818      	ldr	r0, [pc, #96]	; (801678c <tcp_keepalive+0x7c>)
 801672c:	f003 fb8a 	bl	8019e44 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016730:	7dfb      	ldrb	r3, [r7, #23]
 8016732:	b29c      	uxth	r4, r3
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016738:	3b01      	subs	r3, #1
 801673a:	4618      	mov	r0, r3
 801673c:	f7f8 f9f9 	bl	800eb32 <lwip_htonl>
 8016740:	4603      	mov	r3, r0
 8016742:	2200      	movs	r2, #0
 8016744:	4621      	mov	r1, r4
 8016746:	6878      	ldr	r0, [r7, #4]
 8016748:	f7ff fe66 	bl	8016418 <tcp_output_alloc_header>
 801674c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d102      	bne.n	801675a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016758:	e010      	b.n	801677c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801675a:	7dfb      	ldrb	r3, [r7, #23]
 801675c:	2200      	movs	r2, #0
 801675e:	6939      	ldr	r1, [r7, #16]
 8016760:	6878      	ldr	r0, [r7, #4]
 8016762:	f7ff fe97 	bl	8016494 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016766:	687a      	ldr	r2, [r7, #4]
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	3304      	adds	r3, #4
 801676c:	6939      	ldr	r1, [r7, #16]
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	f7ff fed0 	bl	8016514 <tcp_output_control_segment>
 8016774:	4603      	mov	r3, r0
 8016776:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016778:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801677c:	4618      	mov	r0, r3
 801677e:	371c      	adds	r7, #28
 8016780:	46bd      	mov	sp, r7
 8016782:	bd90      	pop	{r4, r7, pc}
 8016784:	0801cf00 	.word	0x0801cf00
 8016788:	0801d6dc 	.word	0x0801d6dc
 801678c:	0801cf54 	.word	0x0801cf54

08016790 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016790:	b590      	push	{r4, r7, lr}
 8016792:	b08b      	sub	sp, #44	; 0x2c
 8016794:	af00      	add	r7, sp, #0
 8016796:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016798:	2300      	movs	r3, #0
 801679a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d106      	bne.n	80167b2 <tcp_zero_window_probe+0x22>
 80167a4:	4b4c      	ldr	r3, [pc, #304]	; (80168d8 <tcp_zero_window_probe+0x148>)
 80167a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80167aa:	494c      	ldr	r1, [pc, #304]	; (80168dc <tcp_zero_window_probe+0x14c>)
 80167ac:	484c      	ldr	r0, [pc, #304]	; (80168e0 <tcp_zero_window_probe+0x150>)
 80167ae:	f003 fb49 	bl	8019e44 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80167b8:	6a3b      	ldr	r3, [r7, #32]
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d101      	bne.n	80167c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80167be:	2300      	movs	r3, #0
 80167c0:	e086      	b.n	80168d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80167c8:	2bff      	cmp	r3, #255	; 0xff
 80167ca:	d007      	beq.n	80167dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80167d2:	3301      	adds	r3, #1
 80167d4:	b2da      	uxtb	r2, r3
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80167dc:	6a3b      	ldr	r3, [r7, #32]
 80167de:	68db      	ldr	r3, [r3, #12]
 80167e0:	899b      	ldrh	r3, [r3, #12]
 80167e2:	b29b      	uxth	r3, r3
 80167e4:	4618      	mov	r0, r3
 80167e6:	f7f8 f98f 	bl	800eb08 <lwip_htons>
 80167ea:	4603      	mov	r3, r0
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	f003 0301 	and.w	r3, r3, #1
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d005      	beq.n	8016802 <tcp_zero_window_probe+0x72>
 80167f6:	6a3b      	ldr	r3, [r7, #32]
 80167f8:	891b      	ldrh	r3, [r3, #8]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d101      	bne.n	8016802 <tcp_zero_window_probe+0x72>
 80167fe:	2301      	movs	r3, #1
 8016800:	e000      	b.n	8016804 <tcp_zero_window_probe+0x74>
 8016802:	2300      	movs	r3, #0
 8016804:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016806:	7ffb      	ldrb	r3, [r7, #31]
 8016808:	2b00      	cmp	r3, #0
 801680a:	bf0c      	ite	eq
 801680c:	2301      	moveq	r3, #1
 801680e:	2300      	movne	r3, #0
 8016810:	b2db      	uxtb	r3, r3
 8016812:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016818:	b299      	uxth	r1, r3
 801681a:	6a3b      	ldr	r3, [r7, #32]
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	685b      	ldr	r3, [r3, #4]
 8016820:	8bba      	ldrh	r2, [r7, #28]
 8016822:	6878      	ldr	r0, [r7, #4]
 8016824:	f7ff fdf8 	bl	8016418 <tcp_output_alloc_header>
 8016828:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801682a:	69bb      	ldr	r3, [r7, #24]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d102      	bne.n	8016836 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016834:	e04c      	b.n	80168d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	685b      	ldr	r3, [r3, #4]
 801683a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801683c:	7ffb      	ldrb	r3, [r7, #31]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d011      	beq.n	8016866 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	899b      	ldrh	r3, [r3, #12]
 8016846:	b29b      	uxth	r3, r3
 8016848:	b21b      	sxth	r3, r3
 801684a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801684e:	b21c      	sxth	r4, r3
 8016850:	2011      	movs	r0, #17
 8016852:	f7f8 f959 	bl	800eb08 <lwip_htons>
 8016856:	4603      	mov	r3, r0
 8016858:	b21b      	sxth	r3, r3
 801685a:	4323      	orrs	r3, r4
 801685c:	b21b      	sxth	r3, r3
 801685e:	b29a      	uxth	r2, r3
 8016860:	697b      	ldr	r3, [r7, #20]
 8016862:	819a      	strh	r2, [r3, #12]
 8016864:	e010      	b.n	8016888 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016866:	69bb      	ldr	r3, [r7, #24]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	3314      	adds	r3, #20
 801686c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801686e:	6a3b      	ldr	r3, [r7, #32]
 8016870:	6858      	ldr	r0, [r3, #4]
 8016872:	6a3b      	ldr	r3, [r7, #32]
 8016874:	685b      	ldr	r3, [r3, #4]
 8016876:	891a      	ldrh	r2, [r3, #8]
 8016878:	6a3b      	ldr	r3, [r7, #32]
 801687a:	891b      	ldrh	r3, [r3, #8]
 801687c:	1ad3      	subs	r3, r2, r3
 801687e:	b29b      	uxth	r3, r3
 8016880:	2201      	movs	r2, #1
 8016882:	6939      	ldr	r1, [r7, #16]
 8016884:	f7f9 ff28 	bl	80106d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016888:	6a3b      	ldr	r3, [r7, #32]
 801688a:	68db      	ldr	r3, [r3, #12]
 801688c:	685b      	ldr	r3, [r3, #4]
 801688e:	4618      	mov	r0, r3
 8016890:	f7f8 f94f 	bl	800eb32 <lwip_htonl>
 8016894:	4603      	mov	r3, r0
 8016896:	3301      	adds	r3, #1
 8016898:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	da02      	bge.n	80168ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	68fa      	ldr	r2, [r7, #12]
 80168aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80168ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168b0:	2200      	movs	r2, #0
 80168b2:	69b9      	ldr	r1, [r7, #24]
 80168b4:	6878      	ldr	r0, [r7, #4]
 80168b6:	f7ff fded 	bl	8016494 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80168ba:	687a      	ldr	r2, [r7, #4]
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	3304      	adds	r3, #4
 80168c0:	69b9      	ldr	r1, [r7, #24]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f7ff fe26 	bl	8016514 <tcp_output_control_segment>
 80168c8:	4603      	mov	r3, r0
 80168ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80168cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80168d0:	4618      	mov	r0, r3
 80168d2:	372c      	adds	r7, #44	; 0x2c
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd90      	pop	{r4, r7, pc}
 80168d8:	0801cf00 	.word	0x0801cf00
 80168dc:	0801d6f8 	.word	0x0801d6f8
 80168e0:	0801cf54 	.word	0x0801cf54

080168e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80168ec:	f7f9 ffe2 	bl	80108b4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80168f0:	4b0a      	ldr	r3, [pc, #40]	; (801691c <tcpip_tcp_timer+0x38>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d103      	bne.n	8016900 <tcpip_tcp_timer+0x1c>
 80168f8:	4b09      	ldr	r3, [pc, #36]	; (8016920 <tcpip_tcp_timer+0x3c>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d005      	beq.n	801690c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016900:	2200      	movs	r2, #0
 8016902:	4908      	ldr	r1, [pc, #32]	; (8016924 <tcpip_tcp_timer+0x40>)
 8016904:	20fa      	movs	r0, #250	; 0xfa
 8016906:	f000 f8f3 	bl	8016af0 <sys_timeout>
 801690a:	e003      	b.n	8016914 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801690c:	4b06      	ldr	r3, [pc, #24]	; (8016928 <tcpip_tcp_timer+0x44>)
 801690e:	2200      	movs	r2, #0
 8016910:	601a      	str	r2, [r3, #0]
  }
}
 8016912:	bf00      	nop
 8016914:	bf00      	nop
 8016916:	3708      	adds	r7, #8
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}
 801691c:	2004f590 	.word	0x2004f590
 8016920:	2004f594 	.word	0x2004f594
 8016924:	080168e5 	.word	0x080168e5
 8016928:	2004f5dc 	.word	0x2004f5dc

0801692c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016930:	4b0a      	ldr	r3, [pc, #40]	; (801695c <tcp_timer_needed+0x30>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d10f      	bne.n	8016958 <tcp_timer_needed+0x2c>
 8016938:	4b09      	ldr	r3, [pc, #36]	; (8016960 <tcp_timer_needed+0x34>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d103      	bne.n	8016948 <tcp_timer_needed+0x1c>
 8016940:	4b08      	ldr	r3, [pc, #32]	; (8016964 <tcp_timer_needed+0x38>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d007      	beq.n	8016958 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016948:	4b04      	ldr	r3, [pc, #16]	; (801695c <tcp_timer_needed+0x30>)
 801694a:	2201      	movs	r2, #1
 801694c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801694e:	2200      	movs	r2, #0
 8016950:	4905      	ldr	r1, [pc, #20]	; (8016968 <tcp_timer_needed+0x3c>)
 8016952:	20fa      	movs	r0, #250	; 0xfa
 8016954:	f000 f8cc 	bl	8016af0 <sys_timeout>
  }
}
 8016958:	bf00      	nop
 801695a:	bd80      	pop	{r7, pc}
 801695c:	2004f5dc 	.word	0x2004f5dc
 8016960:	2004f590 	.word	0x2004f590
 8016964:	2004f594 	.word	0x2004f594
 8016968:	080168e5 	.word	0x080168e5

0801696c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b086      	sub	sp, #24
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016978:	200a      	movs	r0, #10
 801697a:	f7f8 fd9d 	bl	800f4b8 <memp_malloc>
 801697e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016980:	693b      	ldr	r3, [r7, #16]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d109      	bne.n	801699a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d151      	bne.n	8016a30 <sys_timeout_abs+0xc4>
 801698c:	4b2a      	ldr	r3, [pc, #168]	; (8016a38 <sys_timeout_abs+0xcc>)
 801698e:	22be      	movs	r2, #190	; 0xbe
 8016990:	492a      	ldr	r1, [pc, #168]	; (8016a3c <sys_timeout_abs+0xd0>)
 8016992:	482b      	ldr	r0, [pc, #172]	; (8016a40 <sys_timeout_abs+0xd4>)
 8016994:	f003 fa56 	bl	8019e44 <iprintf>
    return;
 8016998:	e04a      	b.n	8016a30 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801699a:	693b      	ldr	r3, [r7, #16]
 801699c:	2200      	movs	r2, #0
 801699e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80169a0:	693b      	ldr	r3, [r7, #16]
 80169a2:	68ba      	ldr	r2, [r7, #8]
 80169a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80169a6:	693b      	ldr	r3, [r7, #16]
 80169a8:	687a      	ldr	r2, [r7, #4]
 80169aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	68fa      	ldr	r2, [r7, #12]
 80169b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80169b2:	4b24      	ldr	r3, [pc, #144]	; (8016a44 <sys_timeout_abs+0xd8>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d103      	bne.n	80169c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80169ba:	4a22      	ldr	r2, [pc, #136]	; (8016a44 <sys_timeout_abs+0xd8>)
 80169bc:	693b      	ldr	r3, [r7, #16]
 80169be:	6013      	str	r3, [r2, #0]
    return;
 80169c0:	e037      	b.n	8016a32 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80169c2:	693b      	ldr	r3, [r7, #16]
 80169c4:	685a      	ldr	r2, [r3, #4]
 80169c6:	4b1f      	ldr	r3, [pc, #124]	; (8016a44 <sys_timeout_abs+0xd8>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	1ad3      	subs	r3, r2, r3
 80169ce:	0fdb      	lsrs	r3, r3, #31
 80169d0:	f003 0301 	and.w	r3, r3, #1
 80169d4:	b2db      	uxtb	r3, r3
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d007      	beq.n	80169ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80169da:	4b1a      	ldr	r3, [pc, #104]	; (8016a44 <sys_timeout_abs+0xd8>)
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80169e2:	4a18      	ldr	r2, [pc, #96]	; (8016a44 <sys_timeout_abs+0xd8>)
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	e023      	b.n	8016a32 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80169ea:	4b16      	ldr	r3, [pc, #88]	; (8016a44 <sys_timeout_abs+0xd8>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	617b      	str	r3, [r7, #20]
 80169f0:	e01a      	b.n	8016a28 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80169f2:	697b      	ldr	r3, [r7, #20]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d00b      	beq.n	8016a12 <sys_timeout_abs+0xa6>
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	685a      	ldr	r2, [r3, #4]
 80169fe:	697b      	ldr	r3, [r7, #20]
 8016a00:	681b      	ldr	r3, [r3, #0]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	0fdb      	lsrs	r3, r3, #31
 8016a08:	f003 0301 	and.w	r3, r3, #1
 8016a0c:	b2db      	uxtb	r3, r3
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d007      	beq.n	8016a22 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	681a      	ldr	r2, [r3, #0]
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016a1a:	697b      	ldr	r3, [r7, #20]
 8016a1c:	693a      	ldr	r2, [r7, #16]
 8016a1e:	601a      	str	r2, [r3, #0]
        break;
 8016a20:	e007      	b.n	8016a32 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016a22:	697b      	ldr	r3, [r7, #20]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	617b      	str	r3, [r7, #20]
 8016a28:	697b      	ldr	r3, [r7, #20]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d1e1      	bne.n	80169f2 <sys_timeout_abs+0x86>
 8016a2e:	e000      	b.n	8016a32 <sys_timeout_abs+0xc6>
    return;
 8016a30:	bf00      	nop
      }
    }
  }
}
 8016a32:	3718      	adds	r7, #24
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	0801d71c 	.word	0x0801d71c
 8016a3c:	0801d750 	.word	0x0801d750
 8016a40:	0801d790 	.word	0x0801d790
 8016a44:	2004f5d4 	.word	0x2004f5d4

08016a48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b086      	sub	sp, #24
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016a54:	697b      	ldr	r3, [r7, #20]
 8016a56:	685b      	ldr	r3, [r3, #4]
 8016a58:	4798      	blx	r3

  now = sys_now();
 8016a5a:	f7f1 fc75 	bl	8008348 <sys_now>
 8016a5e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016a60:	697b      	ldr	r3, [r7, #20]
 8016a62:	681a      	ldr	r2, [r3, #0]
 8016a64:	4b0f      	ldr	r3, [pc, #60]	; (8016aa4 <lwip_cyclic_timer+0x5c>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	4413      	add	r3, r2
 8016a6a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016a6c:	68fa      	ldr	r2, [r7, #12]
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	1ad3      	subs	r3, r2, r3
 8016a72:	0fdb      	lsrs	r3, r3, #31
 8016a74:	f003 0301 	and.w	r3, r3, #1
 8016a78:	b2db      	uxtb	r3, r3
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d009      	beq.n	8016a92 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	681a      	ldr	r2, [r3, #0]
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	4413      	add	r3, r2
 8016a86:	687a      	ldr	r2, [r7, #4]
 8016a88:	4907      	ldr	r1, [pc, #28]	; (8016aa8 <lwip_cyclic_timer+0x60>)
 8016a8a:	4618      	mov	r0, r3
 8016a8c:	f7ff ff6e 	bl	801696c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016a90:	e004      	b.n	8016a9c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	4904      	ldr	r1, [pc, #16]	; (8016aa8 <lwip_cyclic_timer+0x60>)
 8016a96:	68f8      	ldr	r0, [r7, #12]
 8016a98:	f7ff ff68 	bl	801696c <sys_timeout_abs>
}
 8016a9c:	bf00      	nop
 8016a9e:	3718      	adds	r7, #24
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bd80      	pop	{r7, pc}
 8016aa4:	2004f5d8 	.word	0x2004f5d8
 8016aa8:	08016a49 	.word	0x08016a49

08016aac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	607b      	str	r3, [r7, #4]
 8016ab6:	e00e      	b.n	8016ad6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016ab8:	4a0b      	ldr	r2, [pc, #44]	; (8016ae8 <sys_timeouts_init+0x3c>)
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	00db      	lsls	r3, r3, #3
 8016ac4:	4a08      	ldr	r2, [pc, #32]	; (8016ae8 <sys_timeouts_init+0x3c>)
 8016ac6:	4413      	add	r3, r2
 8016ac8:	461a      	mov	r2, r3
 8016aca:	4908      	ldr	r1, [pc, #32]	; (8016aec <sys_timeouts_init+0x40>)
 8016acc:	f000 f810 	bl	8016af0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	3301      	adds	r3, #1
 8016ad4:	607b      	str	r3, [r7, #4]
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	2b02      	cmp	r3, #2
 8016ada:	d9ed      	bls.n	8016ab8 <sys_timeouts_init+0xc>
  }
}
 8016adc:	bf00      	nop
 8016ade:	bf00      	nop
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}
 8016ae6:	bf00      	nop
 8016ae8:	0801e368 	.word	0x0801e368
 8016aec:	08016a49 	.word	0x08016a49

08016af0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b086      	sub	sp, #24
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	60f8      	str	r0, [r7, #12]
 8016af8:	60b9      	str	r1, [r7, #8]
 8016afa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016b02:	d306      	bcc.n	8016b12 <sys_timeout+0x22>
 8016b04:	4b0a      	ldr	r3, [pc, #40]	; (8016b30 <sys_timeout+0x40>)
 8016b06:	f240 1229 	movw	r2, #297	; 0x129
 8016b0a:	490a      	ldr	r1, [pc, #40]	; (8016b34 <sys_timeout+0x44>)
 8016b0c:	480a      	ldr	r0, [pc, #40]	; (8016b38 <sys_timeout+0x48>)
 8016b0e:	f003 f999 	bl	8019e44 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016b12:	f7f1 fc19 	bl	8008348 <sys_now>
 8016b16:	4602      	mov	r2, r0
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	4413      	add	r3, r2
 8016b1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016b1e:	687a      	ldr	r2, [r7, #4]
 8016b20:	68b9      	ldr	r1, [r7, #8]
 8016b22:	6978      	ldr	r0, [r7, #20]
 8016b24:	f7ff ff22 	bl	801696c <sys_timeout_abs>
#endif
}
 8016b28:	bf00      	nop
 8016b2a:	3718      	adds	r7, #24
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	0801d71c 	.word	0x0801d71c
 8016b34:	0801d7b8 	.word	0x0801d7b8
 8016b38:	0801d790 	.word	0x0801d790

08016b3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016b42:	f7f1 fc01 	bl	8008348 <sys_now>
 8016b46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016b48:	4b17      	ldr	r3, [pc, #92]	; (8016ba8 <sys_check_timeouts+0x6c>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d022      	beq.n	8016b9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016b54:	68bb      	ldr	r3, [r7, #8]
 8016b56:	685b      	ldr	r3, [r3, #4]
 8016b58:	68fa      	ldr	r2, [r7, #12]
 8016b5a:	1ad3      	subs	r3, r2, r3
 8016b5c:	0fdb      	lsrs	r3, r3, #31
 8016b5e:	f003 0301 	and.w	r3, r3, #1
 8016b62:	b2db      	uxtb	r3, r3
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d11a      	bne.n	8016b9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	4a0e      	ldr	r2, [pc, #56]	; (8016ba8 <sys_check_timeouts+0x6c>)
 8016b6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016b70:	68bb      	ldr	r3, [r7, #8]
 8016b72:	689b      	ldr	r3, [r3, #8]
 8016b74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	68db      	ldr	r3, [r3, #12]
 8016b7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	4a0a      	ldr	r2, [pc, #40]	; (8016bac <sys_check_timeouts+0x70>)
 8016b82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016b84:	68b9      	ldr	r1, [r7, #8]
 8016b86:	200a      	movs	r0, #10
 8016b88:	f7f8 fd0c 	bl	800f5a4 <memp_free>
    if (handler != NULL) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d0da      	beq.n	8016b48 <sys_check_timeouts+0xc>
      handler(arg);
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	6838      	ldr	r0, [r7, #0]
 8016b96:	4798      	blx	r3
  do {
 8016b98:	e7d6      	b.n	8016b48 <sys_check_timeouts+0xc>
      return;
 8016b9a:	bf00      	nop
 8016b9c:	e000      	b.n	8016ba0 <sys_check_timeouts+0x64>
      return;
 8016b9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016ba0:	3710      	adds	r7, #16
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	2004f5d4 	.word	0x2004f5d4
 8016bac:	2004f5d8 	.word	0x2004f5d8

08016bb0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016bb6:	4b16      	ldr	r3, [pc, #88]	; (8016c10 <sys_timeouts_sleeptime+0x60>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d102      	bne.n	8016bc4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bc2:	e020      	b.n	8016c06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016bc4:	f7f1 fbc0 	bl	8008348 <sys_now>
 8016bc8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016bca:	4b11      	ldr	r3, [pc, #68]	; (8016c10 <sys_timeouts_sleeptime+0x60>)
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	685a      	ldr	r2, [r3, #4]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	1ad3      	subs	r3, r2, r3
 8016bd4:	0fdb      	lsrs	r3, r3, #31
 8016bd6:	f003 0301 	and.w	r3, r3, #1
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d001      	beq.n	8016be4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016be0:	2300      	movs	r3, #0
 8016be2:	e010      	b.n	8016c06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016be4:	4b0a      	ldr	r3, [pc, #40]	; (8016c10 <sys_timeouts_sleeptime+0x60>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	685a      	ldr	r2, [r3, #4]
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	1ad3      	subs	r3, r2, r3
 8016bee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016bf0:	683b      	ldr	r3, [r7, #0]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	da06      	bge.n	8016c04 <sys_timeouts_sleeptime+0x54>
 8016bf6:	4b07      	ldr	r3, [pc, #28]	; (8016c14 <sys_timeouts_sleeptime+0x64>)
 8016bf8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016bfc:	4906      	ldr	r1, [pc, #24]	; (8016c18 <sys_timeouts_sleeptime+0x68>)
 8016bfe:	4807      	ldr	r0, [pc, #28]	; (8016c1c <sys_timeouts_sleeptime+0x6c>)
 8016c00:	f003 f920 	bl	8019e44 <iprintf>
    return ret;
 8016c04:	683b      	ldr	r3, [r7, #0]
  }
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	2004f5d4 	.word	0x2004f5d4
 8016c14:	0801d71c 	.word	0x0801d71c
 8016c18:	0801d7f0 	.word	0x0801d7f0
 8016c1c:	0801d790 	.word	0x0801d790

08016c20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016c24:	f003 f926 	bl	8019e74 <rand>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	b29b      	uxth	r3, r3
 8016c2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016c30:	b29b      	uxth	r3, r3
 8016c32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016c36:	b29a      	uxth	r2, r3
 8016c38:	4b01      	ldr	r3, [pc, #4]	; (8016c40 <udp_init+0x20>)
 8016c3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016c3c:	bf00      	nop
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	20001a58 	.word	0x20001a58

08016c44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016c44:	b480      	push	{r7}
 8016c46:	b083      	sub	sp, #12
 8016c48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016c4e:	4b17      	ldr	r3, [pc, #92]	; (8016cac <udp_new_port+0x68>)
 8016c50:	881b      	ldrh	r3, [r3, #0]
 8016c52:	1c5a      	adds	r2, r3, #1
 8016c54:	b291      	uxth	r1, r2
 8016c56:	4a15      	ldr	r2, [pc, #84]	; (8016cac <udp_new_port+0x68>)
 8016c58:	8011      	strh	r1, [r2, #0]
 8016c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c5e:	4293      	cmp	r3, r2
 8016c60:	d103      	bne.n	8016c6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016c62:	4b12      	ldr	r3, [pc, #72]	; (8016cac <udp_new_port+0x68>)
 8016c64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016c68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c6a:	4b11      	ldr	r3, [pc, #68]	; (8016cb0 <udp_new_port+0x6c>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	603b      	str	r3, [r7, #0]
 8016c70:	e011      	b.n	8016c96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	8a5a      	ldrh	r2, [r3, #18]
 8016c76:	4b0d      	ldr	r3, [pc, #52]	; (8016cac <udp_new_port+0x68>)
 8016c78:	881b      	ldrh	r3, [r3, #0]
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	d108      	bne.n	8016c90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016c7e:	88fb      	ldrh	r3, [r7, #6]
 8016c80:	3301      	adds	r3, #1
 8016c82:	80fb      	strh	r3, [r7, #6]
 8016c84:	88fb      	ldrh	r3, [r7, #6]
 8016c86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016c8a:	d3e0      	bcc.n	8016c4e <udp_new_port+0xa>
        return 0;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	e007      	b.n	8016ca0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	603b      	str	r3, [r7, #0]
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d1ea      	bne.n	8016c72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016c9c:	4b03      	ldr	r3, [pc, #12]	; (8016cac <udp_new_port+0x68>)
 8016c9e:	881b      	ldrh	r3, [r3, #0]
}
 8016ca0:	4618      	mov	r0, r3
 8016ca2:	370c      	adds	r7, #12
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016caa:	4770      	bx	lr
 8016cac:	20001a58 	.word	0x20001a58
 8016cb0:	2004f5e0 	.word	0x2004f5e0

08016cb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016cc2:	68fb      	ldr	r3, [r7, #12]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d105      	bne.n	8016cd4 <udp_input_local_match+0x20>
 8016cc8:	4b27      	ldr	r3, [pc, #156]	; (8016d68 <udp_input_local_match+0xb4>)
 8016cca:	2287      	movs	r2, #135	; 0x87
 8016ccc:	4927      	ldr	r1, [pc, #156]	; (8016d6c <udp_input_local_match+0xb8>)
 8016cce:	4828      	ldr	r0, [pc, #160]	; (8016d70 <udp_input_local_match+0xbc>)
 8016cd0:	f003 f8b8 	bl	8019e44 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d105      	bne.n	8016ce6 <udp_input_local_match+0x32>
 8016cda:	4b23      	ldr	r3, [pc, #140]	; (8016d68 <udp_input_local_match+0xb4>)
 8016cdc:	2288      	movs	r2, #136	; 0x88
 8016cde:	4925      	ldr	r1, [pc, #148]	; (8016d74 <udp_input_local_match+0xc0>)
 8016ce0:	4823      	ldr	r0, [pc, #140]	; (8016d70 <udp_input_local_match+0xbc>)
 8016ce2:	f003 f8af 	bl	8019e44 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	7a1b      	ldrb	r3, [r3, #8]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d00b      	beq.n	8016d06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	7a1a      	ldrb	r2, [r3, #8]
 8016cf2:	4b21      	ldr	r3, [pc, #132]	; (8016d78 <udp_input_local_match+0xc4>)
 8016cf4:	685b      	ldr	r3, [r3, #4]
 8016cf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016cfe:	429a      	cmp	r2, r3
 8016d00:	d001      	beq.n	8016d06 <udp_input_local_match+0x52>
    return 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	e02b      	b.n	8016d5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016d06:	79fb      	ldrb	r3, [r7, #7]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d018      	beq.n	8016d3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d013      	beq.n	8016d3a <udp_input_local_match+0x86>
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d00f      	beq.n	8016d3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016d1a:	4b17      	ldr	r3, [pc, #92]	; (8016d78 <udp_input_local_match+0xc4>)
 8016d1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d22:	d00a      	beq.n	8016d3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	4b13      	ldr	r3, [pc, #76]	; (8016d78 <udp_input_local_match+0xc4>)
 8016d2a:	695b      	ldr	r3, [r3, #20]
 8016d2c:	405a      	eors	r2, r3
 8016d2e:	68bb      	ldr	r3, [r7, #8]
 8016d30:	3308      	adds	r3, #8
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d110      	bne.n	8016d5c <udp_input_local_match+0xa8>
          return 1;
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	e00f      	b.n	8016d5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d009      	beq.n	8016d58 <udp_input_local_match+0xa4>
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d005      	beq.n	8016d58 <udp_input_local_match+0xa4>
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	4b09      	ldr	r3, [pc, #36]	; (8016d78 <udp_input_local_match+0xc4>)
 8016d52:	695b      	ldr	r3, [r3, #20]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d101      	bne.n	8016d5c <udp_input_local_match+0xa8>
        return 1;
 8016d58:	2301      	movs	r3, #1
 8016d5a:	e000      	b.n	8016d5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016d5c:	2300      	movs	r3, #0
}
 8016d5e:	4618      	mov	r0, r3
 8016d60:	3710      	adds	r7, #16
 8016d62:	46bd      	mov	sp, r7
 8016d64:	bd80      	pop	{r7, pc}
 8016d66:	bf00      	nop
 8016d68:	0801d804 	.word	0x0801d804
 8016d6c:	0801d834 	.word	0x0801d834
 8016d70:	0801d858 	.word	0x0801d858
 8016d74:	0801d880 	.word	0x0801d880
 8016d78:	2004b070 	.word	0x2004b070

08016d7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016d7c:	b590      	push	{r4, r7, lr}
 8016d7e:	b08d      	sub	sp, #52	; 0x34
 8016d80:	af02      	add	r7, sp, #8
 8016d82:	6078      	str	r0, [r7, #4]
 8016d84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016d86:	2300      	movs	r3, #0
 8016d88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d105      	bne.n	8016d9c <udp_input+0x20>
 8016d90:	4b7c      	ldr	r3, [pc, #496]	; (8016f84 <udp_input+0x208>)
 8016d92:	22cf      	movs	r2, #207	; 0xcf
 8016d94:	497c      	ldr	r1, [pc, #496]	; (8016f88 <udp_input+0x20c>)
 8016d96:	487d      	ldr	r0, [pc, #500]	; (8016f8c <udp_input+0x210>)
 8016d98:	f003 f854 	bl	8019e44 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d105      	bne.n	8016dae <udp_input+0x32>
 8016da2:	4b78      	ldr	r3, [pc, #480]	; (8016f84 <udp_input+0x208>)
 8016da4:	22d0      	movs	r2, #208	; 0xd0
 8016da6:	497a      	ldr	r1, [pc, #488]	; (8016f90 <udp_input+0x214>)
 8016da8:	4878      	ldr	r0, [pc, #480]	; (8016f8c <udp_input+0x210>)
 8016daa:	f003 f84b 	bl	8019e44 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	895b      	ldrh	r3, [r3, #10]
 8016db2:	2b07      	cmp	r3, #7
 8016db4:	d803      	bhi.n	8016dbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f7f9 fa98 	bl	80102ec <pbuf_free>
    goto end;
 8016dbc:	e0de      	b.n	8016f7c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	685b      	ldr	r3, [r3, #4]
 8016dc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016dc4:	4b73      	ldr	r3, [pc, #460]	; (8016f94 <udp_input+0x218>)
 8016dc6:	695b      	ldr	r3, [r3, #20]
 8016dc8:	4a72      	ldr	r2, [pc, #456]	; (8016f94 <udp_input+0x218>)
 8016dca:	6812      	ldr	r2, [r2, #0]
 8016dcc:	4611      	mov	r1, r2
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f001 fd54 	bl	801887c <ip4_addr_isbroadcast_u32>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016dd8:	697b      	ldr	r3, [r7, #20]
 8016dda:	881b      	ldrh	r3, [r3, #0]
 8016ddc:	b29b      	uxth	r3, r3
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7f7 fe92 	bl	800eb08 <lwip_htons>
 8016de4:	4603      	mov	r3, r0
 8016de6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016de8:	697b      	ldr	r3, [r7, #20]
 8016dea:	885b      	ldrh	r3, [r3, #2]
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7f7 fe8a 	bl	800eb08 <lwip_htons>
 8016df4:	4603      	mov	r3, r0
 8016df6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016df8:	2300      	movs	r3, #0
 8016dfa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016e00:	2300      	movs	r3, #0
 8016e02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016e04:	4b64      	ldr	r3, [pc, #400]	; (8016f98 <udp_input+0x21c>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	627b      	str	r3, [r7, #36]	; 0x24
 8016e0a:	e054      	b.n	8016eb6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0e:	8a5b      	ldrh	r3, [r3, #18]
 8016e10:	89fa      	ldrh	r2, [r7, #14]
 8016e12:	429a      	cmp	r2, r3
 8016e14:	d14a      	bne.n	8016eac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016e16:	7cfb      	ldrb	r3, [r7, #19]
 8016e18:	461a      	mov	r2, r3
 8016e1a:	6839      	ldr	r1, [r7, #0]
 8016e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e1e:	f7ff ff49 	bl	8016cb4 <udp_input_local_match>
 8016e22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d041      	beq.n	8016eac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2a:	7c1b      	ldrb	r3, [r3, #16]
 8016e2c:	f003 0304 	and.w	r3, r3, #4
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d11d      	bne.n	8016e70 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016e34:	69fb      	ldr	r3, [r7, #28]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d102      	bne.n	8016e40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e3c:	61fb      	str	r3, [r7, #28]
 8016e3e:	e017      	b.n	8016e70 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016e40:	7cfb      	ldrb	r3, [r7, #19]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d014      	beq.n	8016e70 <udp_input+0xf4>
 8016e46:	4b53      	ldr	r3, [pc, #332]	; (8016f94 <udp_input+0x218>)
 8016e48:	695b      	ldr	r3, [r3, #20]
 8016e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e4e:	d10f      	bne.n	8016e70 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016e50:	69fb      	ldr	r3, [r7, #28]
 8016e52:	681a      	ldr	r2, [r3, #0]
 8016e54:	683b      	ldr	r3, [r7, #0]
 8016e56:	3304      	adds	r3, #4
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	d008      	beq.n	8016e70 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e60:	681a      	ldr	r2, [r3, #0]
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	3304      	adds	r3, #4
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	d101      	bne.n	8016e70 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e6e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e72:	8a9b      	ldrh	r3, [r3, #20]
 8016e74:	8a3a      	ldrh	r2, [r7, #16]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d118      	bne.n	8016eac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e7c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d005      	beq.n	8016e8e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e84:	685a      	ldr	r2, [r3, #4]
 8016e86:	4b43      	ldr	r3, [pc, #268]	; (8016f94 <udp_input+0x218>)
 8016e88:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016e8a:	429a      	cmp	r2, r3
 8016e8c:	d10e      	bne.n	8016eac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016e8e:	6a3b      	ldr	r3, [r7, #32]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d014      	beq.n	8016ebe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e96:	68da      	ldr	r2, [r3, #12]
 8016e98:	6a3b      	ldr	r3, [r7, #32]
 8016e9a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016e9c:	4b3e      	ldr	r3, [pc, #248]	; (8016f98 <udp_input+0x21c>)
 8016e9e:	681a      	ldr	r2, [r3, #0]
 8016ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016ea4:	4a3c      	ldr	r2, [pc, #240]	; (8016f98 <udp_input+0x21c>)
 8016ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016eaa:	e008      	b.n	8016ebe <udp_input+0x142>
      }
    }

    prev = pcb;
 8016eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8016eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d1a7      	bne.n	8016e0c <udp_input+0x90>
 8016ebc:	e000      	b.n	8016ec0 <udp_input+0x144>
        break;
 8016ebe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d101      	bne.n	8016eca <udp_input+0x14e>
    pcb = uncon_pcb;
 8016ec6:	69fb      	ldr	r3, [r7, #28]
 8016ec8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d002      	beq.n	8016ed6 <udp_input+0x15a>
    for_us = 1;
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	76fb      	strb	r3, [r7, #27]
 8016ed4:	e00a      	b.n	8016eec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	3304      	adds	r3, #4
 8016eda:	681a      	ldr	r2, [r3, #0]
 8016edc:	4b2d      	ldr	r3, [pc, #180]	; (8016f94 <udp_input+0x218>)
 8016ede:	695b      	ldr	r3, [r3, #20]
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	bf0c      	ite	eq
 8016ee4:	2301      	moveq	r3, #1
 8016ee6:	2300      	movne	r3, #0
 8016ee8:	b2db      	uxtb	r3, r3
 8016eea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016eec:	7efb      	ldrb	r3, [r7, #27]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d041      	beq.n	8016f76 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016ef2:	2108      	movs	r1, #8
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f7f9 f973 	bl	80101e0 <pbuf_remove_header>
 8016efa:	4603      	mov	r3, r0
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d00a      	beq.n	8016f16 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016f00:	4b20      	ldr	r3, [pc, #128]	; (8016f84 <udp_input+0x208>)
 8016f02:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016f06:	4925      	ldr	r1, [pc, #148]	; (8016f9c <udp_input+0x220>)
 8016f08:	4820      	ldr	r0, [pc, #128]	; (8016f8c <udp_input+0x210>)
 8016f0a:	f002 ff9b 	bl	8019e44 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f7f9 f9ec 	bl	80102ec <pbuf_free>
      goto end;
 8016f14:	e032      	b.n	8016f7c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d012      	beq.n	8016f42 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1e:	699b      	ldr	r3, [r3, #24]
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d00a      	beq.n	8016f3a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f26:	699c      	ldr	r4, [r3, #24]
 8016f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f2a:	69d8      	ldr	r0, [r3, #28]
 8016f2c:	8a3b      	ldrh	r3, [r7, #16]
 8016f2e:	9300      	str	r3, [sp, #0]
 8016f30:	4b1b      	ldr	r3, [pc, #108]	; (8016fa0 <udp_input+0x224>)
 8016f32:	687a      	ldr	r2, [r7, #4]
 8016f34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f36:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016f38:	e021      	b.n	8016f7e <udp_input+0x202>
        pbuf_free(p);
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f7f9 f9d6 	bl	80102ec <pbuf_free>
        goto end;
 8016f40:	e01c      	b.n	8016f7c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016f42:	7cfb      	ldrb	r3, [r7, #19]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d112      	bne.n	8016f6e <udp_input+0x1f2>
 8016f48:	4b12      	ldr	r3, [pc, #72]	; (8016f94 <udp_input+0x218>)
 8016f4a:	695b      	ldr	r3, [r3, #20]
 8016f4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f50:	2be0      	cmp	r3, #224	; 0xe0
 8016f52:	d00c      	beq.n	8016f6e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016f54:	4b0f      	ldr	r3, [pc, #60]	; (8016f94 <udp_input+0x218>)
 8016f56:	899b      	ldrh	r3, [r3, #12]
 8016f58:	3308      	adds	r3, #8
 8016f5a:	b29b      	uxth	r3, r3
 8016f5c:	b21b      	sxth	r3, r3
 8016f5e:	4619      	mov	r1, r3
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f7f9 f9b0 	bl	80102c6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016f66:	2103      	movs	r1, #3
 8016f68:	6878      	ldr	r0, [r7, #4]
 8016f6a:	f001 f967 	bl	801823c <icmp_dest_unreach>
      pbuf_free(p);
 8016f6e:	6878      	ldr	r0, [r7, #4]
 8016f70:	f7f9 f9bc 	bl	80102ec <pbuf_free>
  return;
 8016f74:	e003      	b.n	8016f7e <udp_input+0x202>
    pbuf_free(p);
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	f7f9 f9b8 	bl	80102ec <pbuf_free>
  return;
 8016f7c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016f7e:	372c      	adds	r7, #44	; 0x2c
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd90      	pop	{r4, r7, pc}
 8016f84:	0801d804 	.word	0x0801d804
 8016f88:	0801d8a8 	.word	0x0801d8a8
 8016f8c:	0801d858 	.word	0x0801d858
 8016f90:	0801d8c0 	.word	0x0801d8c0
 8016f94:	2004b070 	.word	0x2004b070
 8016f98:	2004f5e0 	.word	0x2004f5e0
 8016f9c:	0801d8dc 	.word	0x0801d8dc
 8016fa0:	2004b080 	.word	0x2004b080

08016fa4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b086      	sub	sp, #24
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	60f8      	str	r0, [r7, #12]
 8016fac:	60b9      	str	r1, [r7, #8]
 8016fae:	4613      	mov	r3, r2
 8016fb0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016fb2:	68bb      	ldr	r3, [r7, #8]
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d101      	bne.n	8016fbc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016fb8:	4b39      	ldr	r3, [pc, #228]	; (80170a0 <udp_bind+0xfc>)
 8016fba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d109      	bne.n	8016fd6 <udp_bind+0x32>
 8016fc2:	4b38      	ldr	r3, [pc, #224]	; (80170a4 <udp_bind+0x100>)
 8016fc4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8016fc8:	4937      	ldr	r1, [pc, #220]	; (80170a8 <udp_bind+0x104>)
 8016fca:	4838      	ldr	r0, [pc, #224]	; (80170ac <udp_bind+0x108>)
 8016fcc:	f002 ff3a 	bl	8019e44 <iprintf>
 8016fd0:	f06f 030f 	mvn.w	r3, #15
 8016fd4:	e060      	b.n	8017098 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016fda:	4b35      	ldr	r3, [pc, #212]	; (80170b0 <udp_bind+0x10c>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	617b      	str	r3, [r7, #20]
 8016fe0:	e009      	b.n	8016ff6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016fe2:	68fa      	ldr	r2, [r7, #12]
 8016fe4:	697b      	ldr	r3, [r7, #20]
 8016fe6:	429a      	cmp	r2, r3
 8016fe8:	d102      	bne.n	8016ff0 <udp_bind+0x4c>
      rebind = 1;
 8016fea:	2301      	movs	r3, #1
 8016fec:	74fb      	strb	r3, [r7, #19]
      break;
 8016fee:	e005      	b.n	8016ffc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016ff0:	697b      	ldr	r3, [r7, #20]
 8016ff2:	68db      	ldr	r3, [r3, #12]
 8016ff4:	617b      	str	r3, [r7, #20]
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d1f2      	bne.n	8016fe2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016ffc:	88fb      	ldrh	r3, [r7, #6]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d109      	bne.n	8017016 <udp_bind+0x72>
    port = udp_new_port();
 8017002:	f7ff fe1f 	bl	8016c44 <udp_new_port>
 8017006:	4603      	mov	r3, r0
 8017008:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801700a:	88fb      	ldrh	r3, [r7, #6]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d12c      	bne.n	801706a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017010:	f06f 0307 	mvn.w	r3, #7
 8017014:	e040      	b.n	8017098 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017016:	4b26      	ldr	r3, [pc, #152]	; (80170b0 <udp_bind+0x10c>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	617b      	str	r3, [r7, #20]
 801701c:	e022      	b.n	8017064 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801701e:	68fa      	ldr	r2, [r7, #12]
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	429a      	cmp	r2, r3
 8017024:	d01b      	beq.n	801705e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	8a5b      	ldrh	r3, [r3, #18]
 801702a:	88fa      	ldrh	r2, [r7, #6]
 801702c:	429a      	cmp	r2, r3
 801702e:	d116      	bne.n	801705e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017030:	697b      	ldr	r3, [r7, #20]
 8017032:	681a      	ldr	r2, [r3, #0]
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017038:	429a      	cmp	r2, r3
 801703a:	d00d      	beq.n	8017058 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d00a      	beq.n	8017058 <udp_bind+0xb4>
 8017042:	68bb      	ldr	r3, [r7, #8]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d006      	beq.n	8017058 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801704a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801704c:	2b00      	cmp	r3, #0
 801704e:	d003      	beq.n	8017058 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017050:	697b      	ldr	r3, [r7, #20]
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d102      	bne.n	801705e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017058:	f06f 0307 	mvn.w	r3, #7
 801705c:	e01c      	b.n	8017098 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	68db      	ldr	r3, [r3, #12]
 8017062:	617b      	str	r3, [r7, #20]
 8017064:	697b      	ldr	r3, [r7, #20]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d1d9      	bne.n	801701e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801706a:	68bb      	ldr	r3, [r7, #8]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d002      	beq.n	8017076 <udp_bind+0xd2>
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	e000      	b.n	8017078 <udp_bind+0xd4>
 8017076:	2300      	movs	r3, #0
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	88fa      	ldrh	r2, [r7, #6]
 8017080:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017082:	7cfb      	ldrb	r3, [r7, #19]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d106      	bne.n	8017096 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017088:	4b09      	ldr	r3, [pc, #36]	; (80170b0 <udp_bind+0x10c>)
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8017090:	4a07      	ldr	r2, [pc, #28]	; (80170b0 <udp_bind+0x10c>)
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8017096:	2300      	movs	r3, #0
}
 8017098:	4618      	mov	r0, r3
 801709a:	3718      	adds	r7, #24
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	0801e380 	.word	0x0801e380
 80170a4:	0801d804 	.word	0x0801d804
 80170a8:	0801dacc 	.word	0x0801dacc
 80170ac:	0801d858 	.word	0x0801d858
 80170b0:	2004f5e0 	.word	0x2004f5e0

080170b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b084      	sub	sp, #16
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	60f8      	str	r0, [r7, #12]
 80170bc:	60b9      	str	r1, [r7, #8]
 80170be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d107      	bne.n	80170d6 <udp_recv+0x22>
 80170c6:	4b08      	ldr	r3, [pc, #32]	; (80170e8 <udp_recv+0x34>)
 80170c8:	f240 428a 	movw	r2, #1162	; 0x48a
 80170cc:	4907      	ldr	r1, [pc, #28]	; (80170ec <udp_recv+0x38>)
 80170ce:	4808      	ldr	r0, [pc, #32]	; (80170f0 <udp_recv+0x3c>)
 80170d0:	f002 feb8 	bl	8019e44 <iprintf>
 80170d4:	e005      	b.n	80170e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	68ba      	ldr	r2, [r7, #8]
 80170da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	687a      	ldr	r2, [r7, #4]
 80170e0:	61da      	str	r2, [r3, #28]
}
 80170e2:	3710      	adds	r7, #16
 80170e4:	46bd      	mov	sp, r7
 80170e6:	bd80      	pop	{r7, pc}
 80170e8:	0801d804 	.word	0x0801d804
 80170ec:	0801db38 	.word	0x0801db38
 80170f0:	0801d858 	.word	0x0801d858

080170f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b082      	sub	sp, #8
 80170f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80170fa:	2000      	movs	r0, #0
 80170fc:	f7f8 f9dc 	bl	800f4b8 <memp_malloc>
 8017100:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d007      	beq.n	8017118 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8017108:	2220      	movs	r2, #32
 801710a:	2100      	movs	r1, #0
 801710c:	6878      	ldr	r0, [r7, #4]
 801710e:	f002 fdfc 	bl	8019d0a <memset>
    pcb->ttl = UDP_TTL;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	22ff      	movs	r2, #255	; 0xff
 8017116:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8017118:	687b      	ldr	r3, [r7, #4]
}
 801711a:	4618      	mov	r0, r3
 801711c:	3708      	adds	r7, #8
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}

08017122 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8017122:	b580      	push	{r7, lr}
 8017124:	b084      	sub	sp, #16
 8017126:	af00      	add	r7, sp, #0
 8017128:	4603      	mov	r3, r0
 801712a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801712c:	f7ff ffe2 	bl	80170f4 <udp_new>
 8017130:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017132:	68fb      	ldr	r3, [r7, #12]
}
 8017134:	4618      	mov	r0, r3
 8017136:	3710      	adds	r7, #16
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801713c:	b480      	push	{r7}
 801713e:	b085      	sub	sp, #20
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
 8017144:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d01e      	beq.n	801718a <udp_netif_ip_addr_changed+0x4e>
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d01a      	beq.n	801718a <udp_netif_ip_addr_changed+0x4e>
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d017      	beq.n	801718a <udp_netif_ip_addr_changed+0x4e>
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d013      	beq.n	801718a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017162:	4b0d      	ldr	r3, [pc, #52]	; (8017198 <udp_netif_ip_addr_changed+0x5c>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	60fb      	str	r3, [r7, #12]
 8017168:	e00c      	b.n	8017184 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	681a      	ldr	r2, [r3, #0]
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	429a      	cmp	r2, r3
 8017174:	d103      	bne.n	801717e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	681a      	ldr	r2, [r3, #0]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	68db      	ldr	r3, [r3, #12]
 8017182:	60fb      	str	r3, [r7, #12]
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d1ef      	bne.n	801716a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801718a:	bf00      	nop
 801718c:	3714      	adds	r7, #20
 801718e:	46bd      	mov	sp, r7
 8017190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017194:	4770      	bx	lr
 8017196:	bf00      	nop
 8017198:	2004f5e0 	.word	0x2004f5e0

0801719c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80171a4:	4915      	ldr	r1, [pc, #84]	; (80171fc <etharp_free_entry+0x60>)
 80171a6:	687a      	ldr	r2, [r7, #4]
 80171a8:	4613      	mov	r3, r2
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	4413      	add	r3, r2
 80171ae:	00db      	lsls	r3, r3, #3
 80171b0:	440b      	add	r3, r1
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d013      	beq.n	80171e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80171b8:	4910      	ldr	r1, [pc, #64]	; (80171fc <etharp_free_entry+0x60>)
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	4613      	mov	r3, r2
 80171be:	005b      	lsls	r3, r3, #1
 80171c0:	4413      	add	r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	440b      	add	r3, r1
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7f9 f88f 	bl	80102ec <pbuf_free>
    arp_table[i].q = NULL;
 80171ce:	490b      	ldr	r1, [pc, #44]	; (80171fc <etharp_free_entry+0x60>)
 80171d0:	687a      	ldr	r2, [r7, #4]
 80171d2:	4613      	mov	r3, r2
 80171d4:	005b      	lsls	r3, r3, #1
 80171d6:	4413      	add	r3, r2
 80171d8:	00db      	lsls	r3, r3, #3
 80171da:	440b      	add	r3, r1
 80171dc:	2200      	movs	r2, #0
 80171de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80171e0:	4906      	ldr	r1, [pc, #24]	; (80171fc <etharp_free_entry+0x60>)
 80171e2:	687a      	ldr	r2, [r7, #4]
 80171e4:	4613      	mov	r3, r2
 80171e6:	005b      	lsls	r3, r3, #1
 80171e8:	4413      	add	r3, r2
 80171ea:	00db      	lsls	r3, r3, #3
 80171ec:	440b      	add	r3, r1
 80171ee:	3314      	adds	r3, #20
 80171f0:	2200      	movs	r2, #0
 80171f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80171f4:	bf00      	nop
 80171f6:	3708      	adds	r7, #8
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	2004f5e4 	.word	0x2004f5e4

08017200 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017206:	2300      	movs	r3, #0
 8017208:	607b      	str	r3, [r7, #4]
 801720a:	e096      	b.n	801733a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801720c:	494f      	ldr	r1, [pc, #316]	; (801734c <etharp_tmr+0x14c>)
 801720e:	687a      	ldr	r2, [r7, #4]
 8017210:	4613      	mov	r3, r2
 8017212:	005b      	lsls	r3, r3, #1
 8017214:	4413      	add	r3, r2
 8017216:	00db      	lsls	r3, r3, #3
 8017218:	440b      	add	r3, r1
 801721a:	3314      	adds	r3, #20
 801721c:	781b      	ldrb	r3, [r3, #0]
 801721e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017220:	78fb      	ldrb	r3, [r7, #3]
 8017222:	2b00      	cmp	r3, #0
 8017224:	f000 8086 	beq.w	8017334 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017228:	4948      	ldr	r1, [pc, #288]	; (801734c <etharp_tmr+0x14c>)
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	4613      	mov	r3, r2
 801722e:	005b      	lsls	r3, r3, #1
 8017230:	4413      	add	r3, r2
 8017232:	00db      	lsls	r3, r3, #3
 8017234:	440b      	add	r3, r1
 8017236:	3312      	adds	r3, #18
 8017238:	881b      	ldrh	r3, [r3, #0]
 801723a:	3301      	adds	r3, #1
 801723c:	b298      	uxth	r0, r3
 801723e:	4943      	ldr	r1, [pc, #268]	; (801734c <etharp_tmr+0x14c>)
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	4613      	mov	r3, r2
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4413      	add	r3, r2
 8017248:	00db      	lsls	r3, r3, #3
 801724a:	440b      	add	r3, r1
 801724c:	3312      	adds	r3, #18
 801724e:	4602      	mov	r2, r0
 8017250:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017252:	493e      	ldr	r1, [pc, #248]	; (801734c <etharp_tmr+0x14c>)
 8017254:	687a      	ldr	r2, [r7, #4]
 8017256:	4613      	mov	r3, r2
 8017258:	005b      	lsls	r3, r3, #1
 801725a:	4413      	add	r3, r2
 801725c:	00db      	lsls	r3, r3, #3
 801725e:	440b      	add	r3, r1
 8017260:	3312      	adds	r3, #18
 8017262:	881b      	ldrh	r3, [r3, #0]
 8017264:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017268:	d215      	bcs.n	8017296 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801726a:	4938      	ldr	r1, [pc, #224]	; (801734c <etharp_tmr+0x14c>)
 801726c:	687a      	ldr	r2, [r7, #4]
 801726e:	4613      	mov	r3, r2
 8017270:	005b      	lsls	r3, r3, #1
 8017272:	4413      	add	r3, r2
 8017274:	00db      	lsls	r3, r3, #3
 8017276:	440b      	add	r3, r1
 8017278:	3314      	adds	r3, #20
 801727a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801727c:	2b01      	cmp	r3, #1
 801727e:	d10e      	bne.n	801729e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017280:	4932      	ldr	r1, [pc, #200]	; (801734c <etharp_tmr+0x14c>)
 8017282:	687a      	ldr	r2, [r7, #4]
 8017284:	4613      	mov	r3, r2
 8017286:	005b      	lsls	r3, r3, #1
 8017288:	4413      	add	r3, r2
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	440b      	add	r3, r1
 801728e:	3312      	adds	r3, #18
 8017290:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017292:	2b04      	cmp	r3, #4
 8017294:	d903      	bls.n	801729e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017296:	6878      	ldr	r0, [r7, #4]
 8017298:	f7ff ff80 	bl	801719c <etharp_free_entry>
 801729c:	e04a      	b.n	8017334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801729e:	492b      	ldr	r1, [pc, #172]	; (801734c <etharp_tmr+0x14c>)
 80172a0:	687a      	ldr	r2, [r7, #4]
 80172a2:	4613      	mov	r3, r2
 80172a4:	005b      	lsls	r3, r3, #1
 80172a6:	4413      	add	r3, r2
 80172a8:	00db      	lsls	r3, r3, #3
 80172aa:	440b      	add	r3, r1
 80172ac:	3314      	adds	r3, #20
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	2b03      	cmp	r3, #3
 80172b2:	d10a      	bne.n	80172ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80172b4:	4925      	ldr	r1, [pc, #148]	; (801734c <etharp_tmr+0x14c>)
 80172b6:	687a      	ldr	r2, [r7, #4]
 80172b8:	4613      	mov	r3, r2
 80172ba:	005b      	lsls	r3, r3, #1
 80172bc:	4413      	add	r3, r2
 80172be:	00db      	lsls	r3, r3, #3
 80172c0:	440b      	add	r3, r1
 80172c2:	3314      	adds	r3, #20
 80172c4:	2204      	movs	r2, #4
 80172c6:	701a      	strb	r2, [r3, #0]
 80172c8:	e034      	b.n	8017334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80172ca:	4920      	ldr	r1, [pc, #128]	; (801734c <etharp_tmr+0x14c>)
 80172cc:	687a      	ldr	r2, [r7, #4]
 80172ce:	4613      	mov	r3, r2
 80172d0:	005b      	lsls	r3, r3, #1
 80172d2:	4413      	add	r3, r2
 80172d4:	00db      	lsls	r3, r3, #3
 80172d6:	440b      	add	r3, r1
 80172d8:	3314      	adds	r3, #20
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	2b04      	cmp	r3, #4
 80172de:	d10a      	bne.n	80172f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80172e0:	491a      	ldr	r1, [pc, #104]	; (801734c <etharp_tmr+0x14c>)
 80172e2:	687a      	ldr	r2, [r7, #4]
 80172e4:	4613      	mov	r3, r2
 80172e6:	005b      	lsls	r3, r3, #1
 80172e8:	4413      	add	r3, r2
 80172ea:	00db      	lsls	r3, r3, #3
 80172ec:	440b      	add	r3, r1
 80172ee:	3314      	adds	r3, #20
 80172f0:	2202      	movs	r2, #2
 80172f2:	701a      	strb	r2, [r3, #0]
 80172f4:	e01e      	b.n	8017334 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80172f6:	4915      	ldr	r1, [pc, #84]	; (801734c <etharp_tmr+0x14c>)
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	4613      	mov	r3, r2
 80172fc:	005b      	lsls	r3, r3, #1
 80172fe:	4413      	add	r3, r2
 8017300:	00db      	lsls	r3, r3, #3
 8017302:	440b      	add	r3, r1
 8017304:	3314      	adds	r3, #20
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	2b01      	cmp	r3, #1
 801730a:	d113      	bne.n	8017334 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801730c:	490f      	ldr	r1, [pc, #60]	; (801734c <etharp_tmr+0x14c>)
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	4613      	mov	r3, r2
 8017312:	005b      	lsls	r3, r3, #1
 8017314:	4413      	add	r3, r2
 8017316:	00db      	lsls	r3, r3, #3
 8017318:	440b      	add	r3, r1
 801731a:	3308      	adds	r3, #8
 801731c:	6818      	ldr	r0, [r3, #0]
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	4613      	mov	r3, r2
 8017322:	005b      	lsls	r3, r3, #1
 8017324:	4413      	add	r3, r2
 8017326:	00db      	lsls	r3, r3, #3
 8017328:	4a08      	ldr	r2, [pc, #32]	; (801734c <etharp_tmr+0x14c>)
 801732a:	4413      	add	r3, r2
 801732c:	3304      	adds	r3, #4
 801732e:	4619      	mov	r1, r3
 8017330:	f000 fe6e 	bl	8018010 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	3301      	adds	r3, #1
 8017338:	607b      	str	r3, [r7, #4]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2b09      	cmp	r3, #9
 801733e:	f77f af65 	ble.w	801720c <etharp_tmr+0xc>
      }
    }
  }
}
 8017342:	bf00      	nop
 8017344:	bf00      	nop
 8017346:	3708      	adds	r7, #8
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}
 801734c:	2004f5e4 	.word	0x2004f5e4

08017350 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b08a      	sub	sp, #40	; 0x28
 8017354:	af00      	add	r7, sp, #0
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	460b      	mov	r3, r1
 801735a:	607a      	str	r2, [r7, #4]
 801735c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801735e:	230a      	movs	r3, #10
 8017360:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017362:	230a      	movs	r3, #10
 8017364:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017366:	230a      	movs	r3, #10
 8017368:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801736a:	2300      	movs	r3, #0
 801736c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801736e:	230a      	movs	r3, #10
 8017370:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017372:	2300      	movs	r3, #0
 8017374:	83bb      	strh	r3, [r7, #28]
 8017376:	2300      	movs	r3, #0
 8017378:	837b      	strh	r3, [r7, #26]
 801737a:	2300      	movs	r3, #0
 801737c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801737e:	2300      	movs	r3, #0
 8017380:	843b      	strh	r3, [r7, #32]
 8017382:	e0ae      	b.n	80174e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017388:	49a6      	ldr	r1, [pc, #664]	; (8017624 <etharp_find_entry+0x2d4>)
 801738a:	4613      	mov	r3, r2
 801738c:	005b      	lsls	r3, r3, #1
 801738e:	4413      	add	r3, r2
 8017390:	00db      	lsls	r3, r3, #3
 8017392:	440b      	add	r3, r1
 8017394:	3314      	adds	r3, #20
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801739a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801739e:	2b0a      	cmp	r3, #10
 80173a0:	d105      	bne.n	80173ae <etharp_find_entry+0x5e>
 80173a2:	7dfb      	ldrb	r3, [r7, #23]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d102      	bne.n	80173ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80173a8:	8c3b      	ldrh	r3, [r7, #32]
 80173aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80173ac:	e095      	b.n	80174da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80173ae:	7dfb      	ldrb	r3, [r7, #23]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	f000 8092 	beq.w	80174da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80173b6:	7dfb      	ldrb	r3, [r7, #23]
 80173b8:	2b01      	cmp	r3, #1
 80173ba:	d009      	beq.n	80173d0 <etharp_find_entry+0x80>
 80173bc:	7dfb      	ldrb	r3, [r7, #23]
 80173be:	2b01      	cmp	r3, #1
 80173c0:	d806      	bhi.n	80173d0 <etharp_find_entry+0x80>
 80173c2:	4b99      	ldr	r3, [pc, #612]	; (8017628 <etharp_find_entry+0x2d8>)
 80173c4:	f240 1223 	movw	r2, #291	; 0x123
 80173c8:	4998      	ldr	r1, [pc, #608]	; (801762c <etharp_find_entry+0x2dc>)
 80173ca:	4899      	ldr	r0, [pc, #612]	; (8017630 <etharp_find_entry+0x2e0>)
 80173cc:	f002 fd3a 	bl	8019e44 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d020      	beq.n	8017418 <etharp_find_entry+0xc8>
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	6819      	ldr	r1, [r3, #0]
 80173da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173de:	4891      	ldr	r0, [pc, #580]	; (8017624 <etharp_find_entry+0x2d4>)
 80173e0:	4613      	mov	r3, r2
 80173e2:	005b      	lsls	r3, r3, #1
 80173e4:	4413      	add	r3, r2
 80173e6:	00db      	lsls	r3, r3, #3
 80173e8:	4403      	add	r3, r0
 80173ea:	3304      	adds	r3, #4
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	4299      	cmp	r1, r3
 80173f0:	d112      	bne.n	8017418 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d00c      	beq.n	8017412 <etharp_find_entry+0xc2>
 80173f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173fc:	4989      	ldr	r1, [pc, #548]	; (8017624 <etharp_find_entry+0x2d4>)
 80173fe:	4613      	mov	r3, r2
 8017400:	005b      	lsls	r3, r3, #1
 8017402:	4413      	add	r3, r2
 8017404:	00db      	lsls	r3, r3, #3
 8017406:	440b      	add	r3, r1
 8017408:	3308      	adds	r3, #8
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	687a      	ldr	r2, [r7, #4]
 801740e:	429a      	cmp	r2, r3
 8017410:	d102      	bne.n	8017418 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017412:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017416:	e100      	b.n	801761a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017418:	7dfb      	ldrb	r3, [r7, #23]
 801741a:	2b01      	cmp	r3, #1
 801741c:	d140      	bne.n	80174a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801741e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017422:	4980      	ldr	r1, [pc, #512]	; (8017624 <etharp_find_entry+0x2d4>)
 8017424:	4613      	mov	r3, r2
 8017426:	005b      	lsls	r3, r3, #1
 8017428:	4413      	add	r3, r2
 801742a:	00db      	lsls	r3, r3, #3
 801742c:	440b      	add	r3, r1
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d01a      	beq.n	801746a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017438:	497a      	ldr	r1, [pc, #488]	; (8017624 <etharp_find_entry+0x2d4>)
 801743a:	4613      	mov	r3, r2
 801743c:	005b      	lsls	r3, r3, #1
 801743e:	4413      	add	r3, r2
 8017440:	00db      	lsls	r3, r3, #3
 8017442:	440b      	add	r3, r1
 8017444:	3312      	adds	r3, #18
 8017446:	881b      	ldrh	r3, [r3, #0]
 8017448:	8bba      	ldrh	r2, [r7, #28]
 801744a:	429a      	cmp	r2, r3
 801744c:	d845      	bhi.n	80174da <etharp_find_entry+0x18a>
            old_queue = i;
 801744e:	8c3b      	ldrh	r3, [r7, #32]
 8017450:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017456:	4973      	ldr	r1, [pc, #460]	; (8017624 <etharp_find_entry+0x2d4>)
 8017458:	4613      	mov	r3, r2
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	4413      	add	r3, r2
 801745e:	00db      	lsls	r3, r3, #3
 8017460:	440b      	add	r3, r1
 8017462:	3312      	adds	r3, #18
 8017464:	881b      	ldrh	r3, [r3, #0]
 8017466:	83bb      	strh	r3, [r7, #28]
 8017468:	e037      	b.n	80174da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801746a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801746e:	496d      	ldr	r1, [pc, #436]	; (8017624 <etharp_find_entry+0x2d4>)
 8017470:	4613      	mov	r3, r2
 8017472:	005b      	lsls	r3, r3, #1
 8017474:	4413      	add	r3, r2
 8017476:	00db      	lsls	r3, r3, #3
 8017478:	440b      	add	r3, r1
 801747a:	3312      	adds	r3, #18
 801747c:	881b      	ldrh	r3, [r3, #0]
 801747e:	8b7a      	ldrh	r2, [r7, #26]
 8017480:	429a      	cmp	r2, r3
 8017482:	d82a      	bhi.n	80174da <etharp_find_entry+0x18a>
            old_pending = i;
 8017484:	8c3b      	ldrh	r3, [r7, #32]
 8017486:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801748c:	4965      	ldr	r1, [pc, #404]	; (8017624 <etharp_find_entry+0x2d4>)
 801748e:	4613      	mov	r3, r2
 8017490:	005b      	lsls	r3, r3, #1
 8017492:	4413      	add	r3, r2
 8017494:	00db      	lsls	r3, r3, #3
 8017496:	440b      	add	r3, r1
 8017498:	3312      	adds	r3, #18
 801749a:	881b      	ldrh	r3, [r3, #0]
 801749c:	837b      	strh	r3, [r7, #26]
 801749e:	e01c      	b.n	80174da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80174a0:	7dfb      	ldrb	r3, [r7, #23]
 80174a2:	2b01      	cmp	r3, #1
 80174a4:	d919      	bls.n	80174da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80174a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80174aa:	495e      	ldr	r1, [pc, #376]	; (8017624 <etharp_find_entry+0x2d4>)
 80174ac:	4613      	mov	r3, r2
 80174ae:	005b      	lsls	r3, r3, #1
 80174b0:	4413      	add	r3, r2
 80174b2:	00db      	lsls	r3, r3, #3
 80174b4:	440b      	add	r3, r1
 80174b6:	3312      	adds	r3, #18
 80174b8:	881b      	ldrh	r3, [r3, #0]
 80174ba:	8b3a      	ldrh	r2, [r7, #24]
 80174bc:	429a      	cmp	r2, r3
 80174be:	d80c      	bhi.n	80174da <etharp_find_entry+0x18a>
            old_stable = i;
 80174c0:	8c3b      	ldrh	r3, [r7, #32]
 80174c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80174c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80174c8:	4956      	ldr	r1, [pc, #344]	; (8017624 <etharp_find_entry+0x2d4>)
 80174ca:	4613      	mov	r3, r2
 80174cc:	005b      	lsls	r3, r3, #1
 80174ce:	4413      	add	r3, r2
 80174d0:	00db      	lsls	r3, r3, #3
 80174d2:	440b      	add	r3, r1
 80174d4:	3312      	adds	r3, #18
 80174d6:	881b      	ldrh	r3, [r3, #0]
 80174d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80174da:	8c3b      	ldrh	r3, [r7, #32]
 80174dc:	3301      	adds	r3, #1
 80174de:	b29b      	uxth	r3, r3
 80174e0:	843b      	strh	r3, [r7, #32]
 80174e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80174e6:	2b09      	cmp	r3, #9
 80174e8:	f77f af4c 	ble.w	8017384 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80174ec:	7afb      	ldrb	r3, [r7, #11]
 80174ee:	f003 0302 	and.w	r3, r3, #2
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d108      	bne.n	8017508 <etharp_find_entry+0x1b8>
 80174f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80174fa:	2b0a      	cmp	r3, #10
 80174fc:	d107      	bne.n	801750e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80174fe:	7afb      	ldrb	r3, [r7, #11]
 8017500:	f003 0301 	and.w	r3, r3, #1
 8017504:	2b00      	cmp	r3, #0
 8017506:	d102      	bne.n	801750e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801750c:	e085      	b.n	801761a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801750e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017512:	2b09      	cmp	r3, #9
 8017514:	dc02      	bgt.n	801751c <etharp_find_entry+0x1cc>
    i = empty;
 8017516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017518:	843b      	strh	r3, [r7, #32]
 801751a:	e039      	b.n	8017590 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801751c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017520:	2b09      	cmp	r3, #9
 8017522:	dc14      	bgt.n	801754e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017524:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017526:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017528:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801752c:	493d      	ldr	r1, [pc, #244]	; (8017624 <etharp_find_entry+0x2d4>)
 801752e:	4613      	mov	r3, r2
 8017530:	005b      	lsls	r3, r3, #1
 8017532:	4413      	add	r3, r2
 8017534:	00db      	lsls	r3, r3, #3
 8017536:	440b      	add	r3, r1
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d018      	beq.n	8017570 <etharp_find_entry+0x220>
 801753e:	4b3a      	ldr	r3, [pc, #232]	; (8017628 <etharp_find_entry+0x2d8>)
 8017540:	f240 126d 	movw	r2, #365	; 0x16d
 8017544:	493b      	ldr	r1, [pc, #236]	; (8017634 <etharp_find_entry+0x2e4>)
 8017546:	483a      	ldr	r0, [pc, #232]	; (8017630 <etharp_find_entry+0x2e0>)
 8017548:	f002 fc7c 	bl	8019e44 <iprintf>
 801754c:	e010      	b.n	8017570 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801754e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017552:	2b09      	cmp	r3, #9
 8017554:	dc02      	bgt.n	801755c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017558:	843b      	strh	r3, [r7, #32]
 801755a:	e009      	b.n	8017570 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801755c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017560:	2b09      	cmp	r3, #9
 8017562:	dc02      	bgt.n	801756a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017564:	8bfb      	ldrh	r3, [r7, #30]
 8017566:	843b      	strh	r3, [r7, #32]
 8017568:	e002      	b.n	8017570 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801756a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801756e:	e054      	b.n	801761a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017570:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017574:	2b09      	cmp	r3, #9
 8017576:	dd06      	ble.n	8017586 <etharp_find_entry+0x236>
 8017578:	4b2b      	ldr	r3, [pc, #172]	; (8017628 <etharp_find_entry+0x2d8>)
 801757a:	f240 127f 	movw	r2, #383	; 0x17f
 801757e:	492e      	ldr	r1, [pc, #184]	; (8017638 <etharp_find_entry+0x2e8>)
 8017580:	482b      	ldr	r0, [pc, #172]	; (8017630 <etharp_find_entry+0x2e0>)
 8017582:	f002 fc5f 	bl	8019e44 <iprintf>
    etharp_free_entry(i);
 8017586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801758a:	4618      	mov	r0, r3
 801758c:	f7ff fe06 	bl	801719c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017594:	2b09      	cmp	r3, #9
 8017596:	dd06      	ble.n	80175a6 <etharp_find_entry+0x256>
 8017598:	4b23      	ldr	r3, [pc, #140]	; (8017628 <etharp_find_entry+0x2d8>)
 801759a:	f240 1283 	movw	r2, #387	; 0x183
 801759e:	4926      	ldr	r1, [pc, #152]	; (8017638 <etharp_find_entry+0x2e8>)
 80175a0:	4823      	ldr	r0, [pc, #140]	; (8017630 <etharp_find_entry+0x2e0>)
 80175a2:	f002 fc4f 	bl	8019e44 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80175a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80175aa:	491e      	ldr	r1, [pc, #120]	; (8017624 <etharp_find_entry+0x2d4>)
 80175ac:	4613      	mov	r3, r2
 80175ae:	005b      	lsls	r3, r3, #1
 80175b0:	4413      	add	r3, r2
 80175b2:	00db      	lsls	r3, r3, #3
 80175b4:	440b      	add	r3, r1
 80175b6:	3314      	adds	r3, #20
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d006      	beq.n	80175cc <etharp_find_entry+0x27c>
 80175be:	4b1a      	ldr	r3, [pc, #104]	; (8017628 <etharp_find_entry+0x2d8>)
 80175c0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80175c4:	491d      	ldr	r1, [pc, #116]	; (801763c <etharp_find_entry+0x2ec>)
 80175c6:	481a      	ldr	r0, [pc, #104]	; (8017630 <etharp_find_entry+0x2e0>)
 80175c8:	f002 fc3c 	bl	8019e44 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d00b      	beq.n	80175ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80175d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80175d6:	68fb      	ldr	r3, [r7, #12]
 80175d8:	6819      	ldr	r1, [r3, #0]
 80175da:	4812      	ldr	r0, [pc, #72]	; (8017624 <etharp_find_entry+0x2d4>)
 80175dc:	4613      	mov	r3, r2
 80175de:	005b      	lsls	r3, r3, #1
 80175e0:	4413      	add	r3, r2
 80175e2:	00db      	lsls	r3, r3, #3
 80175e4:	4403      	add	r3, r0
 80175e6:	3304      	adds	r3, #4
 80175e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80175ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80175ee:	490d      	ldr	r1, [pc, #52]	; (8017624 <etharp_find_entry+0x2d4>)
 80175f0:	4613      	mov	r3, r2
 80175f2:	005b      	lsls	r3, r3, #1
 80175f4:	4413      	add	r3, r2
 80175f6:	00db      	lsls	r3, r3, #3
 80175f8:	440b      	add	r3, r1
 80175fa:	3312      	adds	r3, #18
 80175fc:	2200      	movs	r2, #0
 80175fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017600:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017604:	4907      	ldr	r1, [pc, #28]	; (8017624 <etharp_find_entry+0x2d4>)
 8017606:	4613      	mov	r3, r2
 8017608:	005b      	lsls	r3, r3, #1
 801760a:	4413      	add	r3, r2
 801760c:	00db      	lsls	r3, r3, #3
 801760e:	440b      	add	r3, r1
 8017610:	3308      	adds	r3, #8
 8017612:	687a      	ldr	r2, [r7, #4]
 8017614:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801761a:	4618      	mov	r0, r3
 801761c:	3728      	adds	r7, #40	; 0x28
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
 8017622:	bf00      	nop
 8017624:	2004f5e4 	.word	0x2004f5e4
 8017628:	0801db68 	.word	0x0801db68
 801762c:	0801dba0 	.word	0x0801dba0
 8017630:	0801dbe0 	.word	0x0801dbe0
 8017634:	0801dc08 	.word	0x0801dc08
 8017638:	0801dc20 	.word	0x0801dc20
 801763c:	0801dc34 	.word	0x0801dc34

08017640 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b088      	sub	sp, #32
 8017644:	af02      	add	r7, sp, #8
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
 801764c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801764e:	68fb      	ldr	r3, [r7, #12]
 8017650:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017654:	2b06      	cmp	r3, #6
 8017656:	d006      	beq.n	8017666 <etharp_update_arp_entry+0x26>
 8017658:	4b48      	ldr	r3, [pc, #288]	; (801777c <etharp_update_arp_entry+0x13c>)
 801765a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801765e:	4948      	ldr	r1, [pc, #288]	; (8017780 <etharp_update_arp_entry+0x140>)
 8017660:	4848      	ldr	r0, [pc, #288]	; (8017784 <etharp_update_arp_entry+0x144>)
 8017662:	f002 fbef 	bl	8019e44 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d012      	beq.n	8017692 <etharp_update_arp_entry+0x52>
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d00e      	beq.n	8017692 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	68f9      	ldr	r1, [r7, #12]
 801767a:	4618      	mov	r0, r3
 801767c:	f001 f8fe 	bl	801887c <ip4_addr_isbroadcast_u32>
 8017680:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017682:	2b00      	cmp	r3, #0
 8017684:	d105      	bne.n	8017692 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801768e:	2be0      	cmp	r3, #224	; 0xe0
 8017690:	d102      	bne.n	8017698 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017692:	f06f 030f 	mvn.w	r3, #15
 8017696:	e06c      	b.n	8017772 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017698:	78fb      	ldrb	r3, [r7, #3]
 801769a:	68fa      	ldr	r2, [r7, #12]
 801769c:	4619      	mov	r1, r3
 801769e:	68b8      	ldr	r0, [r7, #8]
 80176a0:	f7ff fe56 	bl	8017350 <etharp_find_entry>
 80176a4:	4603      	mov	r3, r0
 80176a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80176a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	da02      	bge.n	80176b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80176b0:	8afb      	ldrh	r3, [r7, #22]
 80176b2:	b25b      	sxtb	r3, r3
 80176b4:	e05d      	b.n	8017772 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80176b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80176ba:	4933      	ldr	r1, [pc, #204]	; (8017788 <etharp_update_arp_entry+0x148>)
 80176bc:	4613      	mov	r3, r2
 80176be:	005b      	lsls	r3, r3, #1
 80176c0:	4413      	add	r3, r2
 80176c2:	00db      	lsls	r3, r3, #3
 80176c4:	440b      	add	r3, r1
 80176c6:	3314      	adds	r3, #20
 80176c8:	2202      	movs	r2, #2
 80176ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80176cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80176d0:	492d      	ldr	r1, [pc, #180]	; (8017788 <etharp_update_arp_entry+0x148>)
 80176d2:	4613      	mov	r3, r2
 80176d4:	005b      	lsls	r3, r3, #1
 80176d6:	4413      	add	r3, r2
 80176d8:	00db      	lsls	r3, r3, #3
 80176da:	440b      	add	r3, r1
 80176dc:	3308      	adds	r3, #8
 80176de:	68fa      	ldr	r2, [r7, #12]
 80176e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80176e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80176e6:	4613      	mov	r3, r2
 80176e8:	005b      	lsls	r3, r3, #1
 80176ea:	4413      	add	r3, r2
 80176ec:	00db      	lsls	r3, r3, #3
 80176ee:	3308      	adds	r3, #8
 80176f0:	4a25      	ldr	r2, [pc, #148]	; (8017788 <etharp_update_arp_entry+0x148>)
 80176f2:	4413      	add	r3, r2
 80176f4:	3304      	adds	r3, #4
 80176f6:	2206      	movs	r2, #6
 80176f8:	6879      	ldr	r1, [r7, #4]
 80176fa:	4618      	mov	r0, r3
 80176fc:	f002 faf7 	bl	8019cee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017700:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017704:	4920      	ldr	r1, [pc, #128]	; (8017788 <etharp_update_arp_entry+0x148>)
 8017706:	4613      	mov	r3, r2
 8017708:	005b      	lsls	r3, r3, #1
 801770a:	4413      	add	r3, r2
 801770c:	00db      	lsls	r3, r3, #3
 801770e:	440b      	add	r3, r1
 8017710:	3312      	adds	r3, #18
 8017712:	2200      	movs	r2, #0
 8017714:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801771a:	491b      	ldr	r1, [pc, #108]	; (8017788 <etharp_update_arp_entry+0x148>)
 801771c:	4613      	mov	r3, r2
 801771e:	005b      	lsls	r3, r3, #1
 8017720:	4413      	add	r3, r2
 8017722:	00db      	lsls	r3, r3, #3
 8017724:	440b      	add	r3, r1
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d021      	beq.n	8017770 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801772c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017730:	4915      	ldr	r1, [pc, #84]	; (8017788 <etharp_update_arp_entry+0x148>)
 8017732:	4613      	mov	r3, r2
 8017734:	005b      	lsls	r3, r3, #1
 8017736:	4413      	add	r3, r2
 8017738:	00db      	lsls	r3, r3, #3
 801773a:	440b      	add	r3, r1
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017740:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017744:	4910      	ldr	r1, [pc, #64]	; (8017788 <etharp_update_arp_entry+0x148>)
 8017746:	4613      	mov	r3, r2
 8017748:	005b      	lsls	r3, r3, #1
 801774a:	4413      	add	r3, r2
 801774c:	00db      	lsls	r3, r3, #3
 801774e:	440b      	add	r3, r1
 8017750:	2200      	movs	r2, #0
 8017752:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801775a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801775e:	9300      	str	r3, [sp, #0]
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	6939      	ldr	r1, [r7, #16]
 8017764:	68f8      	ldr	r0, [r7, #12]
 8017766:	f001 ff97 	bl	8019698 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801776a:	6938      	ldr	r0, [r7, #16]
 801776c:	f7f8 fdbe 	bl	80102ec <pbuf_free>
  }
  return ERR_OK;
 8017770:	2300      	movs	r3, #0
}
 8017772:	4618      	mov	r0, r3
 8017774:	3718      	adds	r7, #24
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	0801db68 	.word	0x0801db68
 8017780:	0801dc60 	.word	0x0801dc60
 8017784:	0801dbe0 	.word	0x0801dbe0
 8017788:	2004f5e4 	.word	0x2004f5e4

0801778c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b084      	sub	sp, #16
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017794:	2300      	movs	r3, #0
 8017796:	60fb      	str	r3, [r7, #12]
 8017798:	e01e      	b.n	80177d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801779a:	4913      	ldr	r1, [pc, #76]	; (80177e8 <etharp_cleanup_netif+0x5c>)
 801779c:	68fa      	ldr	r2, [r7, #12]
 801779e:	4613      	mov	r3, r2
 80177a0:	005b      	lsls	r3, r3, #1
 80177a2:	4413      	add	r3, r2
 80177a4:	00db      	lsls	r3, r3, #3
 80177a6:	440b      	add	r3, r1
 80177a8:	3314      	adds	r3, #20
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80177ae:	7afb      	ldrb	r3, [r7, #11]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d00e      	beq.n	80177d2 <etharp_cleanup_netif+0x46>
 80177b4:	490c      	ldr	r1, [pc, #48]	; (80177e8 <etharp_cleanup_netif+0x5c>)
 80177b6:	68fa      	ldr	r2, [r7, #12]
 80177b8:	4613      	mov	r3, r2
 80177ba:	005b      	lsls	r3, r3, #1
 80177bc:	4413      	add	r3, r2
 80177be:	00db      	lsls	r3, r3, #3
 80177c0:	440b      	add	r3, r1
 80177c2:	3308      	adds	r3, #8
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d102      	bne.n	80177d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80177cc:	68f8      	ldr	r0, [r7, #12]
 80177ce:	f7ff fce5 	bl	801719c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	3301      	adds	r3, #1
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b09      	cmp	r3, #9
 80177dc:	dddd      	ble.n	801779a <etharp_cleanup_netif+0xe>
    }
  }
}
 80177de:	bf00      	nop
 80177e0:	bf00      	nop
 80177e2:	3710      	adds	r7, #16
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	2004f5e4 	.word	0x2004f5e4

080177ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80177ec:	b5b0      	push	{r4, r5, r7, lr}
 80177ee:	b08a      	sub	sp, #40	; 0x28
 80177f0:	af04      	add	r7, sp, #16
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d107      	bne.n	801780c <etharp_input+0x20>
 80177fc:	4b3d      	ldr	r3, [pc, #244]	; (80178f4 <etharp_input+0x108>)
 80177fe:	f240 228a 	movw	r2, #650	; 0x28a
 8017802:	493d      	ldr	r1, [pc, #244]	; (80178f8 <etharp_input+0x10c>)
 8017804:	483d      	ldr	r0, [pc, #244]	; (80178fc <etharp_input+0x110>)
 8017806:	f002 fb1d 	bl	8019e44 <iprintf>
 801780a:	e06f      	b.n	80178ec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	685b      	ldr	r3, [r3, #4]
 8017810:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	881b      	ldrh	r3, [r3, #0]
 8017816:	b29b      	uxth	r3, r3
 8017818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801781c:	d10c      	bne.n	8017838 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801781e:	693b      	ldr	r3, [r7, #16]
 8017820:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017822:	2b06      	cmp	r3, #6
 8017824:	d108      	bne.n	8017838 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801782a:	2b04      	cmp	r3, #4
 801782c:	d104      	bne.n	8017838 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	885b      	ldrh	r3, [r3, #2]
 8017832:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017834:	2b08      	cmp	r3, #8
 8017836:	d003      	beq.n	8017840 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f7f8 fd57 	bl	80102ec <pbuf_free>
    return;
 801783e:	e055      	b.n	80178ec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017840:	693b      	ldr	r3, [r7, #16]
 8017842:	330e      	adds	r3, #14
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017848:	693b      	ldr	r3, [r7, #16]
 801784a:	3318      	adds	r3, #24
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	3304      	adds	r3, #4
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	2b00      	cmp	r3, #0
 8017858:	d102      	bne.n	8017860 <etharp_input+0x74>
    for_us = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	75fb      	strb	r3, [r7, #23]
 801785e:	e009      	b.n	8017874 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017860:	68ba      	ldr	r2, [r7, #8]
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	3304      	adds	r3, #4
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	429a      	cmp	r2, r3
 801786a:	bf0c      	ite	eq
 801786c:	2301      	moveq	r3, #1
 801786e:	2300      	movne	r3, #0
 8017870:	b2db      	uxtb	r3, r3
 8017872:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	f103 0208 	add.w	r2, r3, #8
 801787a:	7dfb      	ldrb	r3, [r7, #23]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d001      	beq.n	8017884 <etharp_input+0x98>
 8017880:	2301      	movs	r3, #1
 8017882:	e000      	b.n	8017886 <etharp_input+0x9a>
 8017884:	2302      	movs	r3, #2
 8017886:	f107 010c 	add.w	r1, r7, #12
 801788a:	6838      	ldr	r0, [r7, #0]
 801788c:	f7ff fed8 	bl	8017640 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017890:	693b      	ldr	r3, [r7, #16]
 8017892:	88db      	ldrh	r3, [r3, #6]
 8017894:	b29b      	uxth	r3, r3
 8017896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801789a:	d003      	beq.n	80178a4 <etharp_input+0xb8>
 801789c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80178a0:	d01e      	beq.n	80178e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80178a2:	e020      	b.n	80178e6 <etharp_input+0xfa>
      if (for_us) {
 80178a4:	7dfb      	ldrb	r3, [r7, #23]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d01c      	beq.n	80178e4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80178b6:	683b      	ldr	r3, [r7, #0]
 80178b8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80178c0:	693a      	ldr	r2, [r7, #16]
 80178c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80178c4:	2102      	movs	r1, #2
 80178c6:	9103      	str	r1, [sp, #12]
 80178c8:	f107 010c 	add.w	r1, r7, #12
 80178cc:	9102      	str	r1, [sp, #8]
 80178ce:	9201      	str	r2, [sp, #4]
 80178d0:	9300      	str	r3, [sp, #0]
 80178d2:	462b      	mov	r3, r5
 80178d4:	4622      	mov	r2, r4
 80178d6:	4601      	mov	r1, r0
 80178d8:	6838      	ldr	r0, [r7, #0]
 80178da:	f000 faeb 	bl	8017eb4 <etharp_raw>
      break;
 80178de:	e001      	b.n	80178e4 <etharp_input+0xf8>
      break;
 80178e0:	bf00      	nop
 80178e2:	e000      	b.n	80178e6 <etharp_input+0xfa>
      break;
 80178e4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f7f8 fd00 	bl	80102ec <pbuf_free>
}
 80178ec:	3718      	adds	r7, #24
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bdb0      	pop	{r4, r5, r7, pc}
 80178f2:	bf00      	nop
 80178f4:	0801db68 	.word	0x0801db68
 80178f8:	0801dcb8 	.word	0x0801dcb8
 80178fc:	0801dbe0 	.word	0x0801dbe0

08017900 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b086      	sub	sp, #24
 8017904:	af02      	add	r7, sp, #8
 8017906:	60f8      	str	r0, [r7, #12]
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	4613      	mov	r3, r2
 801790c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801790e:	79fa      	ldrb	r2, [r7, #7]
 8017910:	4944      	ldr	r1, [pc, #272]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 8017912:	4613      	mov	r3, r2
 8017914:	005b      	lsls	r3, r3, #1
 8017916:	4413      	add	r3, r2
 8017918:	00db      	lsls	r3, r3, #3
 801791a:	440b      	add	r3, r1
 801791c:	3314      	adds	r3, #20
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	2b01      	cmp	r3, #1
 8017922:	d806      	bhi.n	8017932 <etharp_output_to_arp_index+0x32>
 8017924:	4b40      	ldr	r3, [pc, #256]	; (8017a28 <etharp_output_to_arp_index+0x128>)
 8017926:	f240 22ee 	movw	r2, #750	; 0x2ee
 801792a:	4940      	ldr	r1, [pc, #256]	; (8017a2c <etharp_output_to_arp_index+0x12c>)
 801792c:	4840      	ldr	r0, [pc, #256]	; (8017a30 <etharp_output_to_arp_index+0x130>)
 801792e:	f002 fa89 	bl	8019e44 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017932:	79fa      	ldrb	r2, [r7, #7]
 8017934:	493b      	ldr	r1, [pc, #236]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 8017936:	4613      	mov	r3, r2
 8017938:	005b      	lsls	r3, r3, #1
 801793a:	4413      	add	r3, r2
 801793c:	00db      	lsls	r3, r3, #3
 801793e:	440b      	add	r3, r1
 8017940:	3314      	adds	r3, #20
 8017942:	781b      	ldrb	r3, [r3, #0]
 8017944:	2b02      	cmp	r3, #2
 8017946:	d153      	bne.n	80179f0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017948:	79fa      	ldrb	r2, [r7, #7]
 801794a:	4936      	ldr	r1, [pc, #216]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 801794c:	4613      	mov	r3, r2
 801794e:	005b      	lsls	r3, r3, #1
 8017950:	4413      	add	r3, r2
 8017952:	00db      	lsls	r3, r3, #3
 8017954:	440b      	add	r3, r1
 8017956:	3312      	adds	r3, #18
 8017958:	881b      	ldrh	r3, [r3, #0]
 801795a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801795e:	d919      	bls.n	8017994 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017960:	79fa      	ldrb	r2, [r7, #7]
 8017962:	4613      	mov	r3, r2
 8017964:	005b      	lsls	r3, r3, #1
 8017966:	4413      	add	r3, r2
 8017968:	00db      	lsls	r3, r3, #3
 801796a:	4a2e      	ldr	r2, [pc, #184]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 801796c:	4413      	add	r3, r2
 801796e:	3304      	adds	r3, #4
 8017970:	4619      	mov	r1, r3
 8017972:	68f8      	ldr	r0, [r7, #12]
 8017974:	f000 fb4c 	bl	8018010 <etharp_request>
 8017978:	4603      	mov	r3, r0
 801797a:	2b00      	cmp	r3, #0
 801797c:	d138      	bne.n	80179f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801797e:	79fa      	ldrb	r2, [r7, #7]
 8017980:	4928      	ldr	r1, [pc, #160]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 8017982:	4613      	mov	r3, r2
 8017984:	005b      	lsls	r3, r3, #1
 8017986:	4413      	add	r3, r2
 8017988:	00db      	lsls	r3, r3, #3
 801798a:	440b      	add	r3, r1
 801798c:	3314      	adds	r3, #20
 801798e:	2203      	movs	r2, #3
 8017990:	701a      	strb	r2, [r3, #0]
 8017992:	e02d      	b.n	80179f0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017994:	79fa      	ldrb	r2, [r7, #7]
 8017996:	4923      	ldr	r1, [pc, #140]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 8017998:	4613      	mov	r3, r2
 801799a:	005b      	lsls	r3, r3, #1
 801799c:	4413      	add	r3, r2
 801799e:	00db      	lsls	r3, r3, #3
 80179a0:	440b      	add	r3, r1
 80179a2:	3312      	adds	r3, #18
 80179a4:	881b      	ldrh	r3, [r3, #0]
 80179a6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80179aa:	d321      	bcc.n	80179f0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80179ac:	79fa      	ldrb	r2, [r7, #7]
 80179ae:	4613      	mov	r3, r2
 80179b0:	005b      	lsls	r3, r3, #1
 80179b2:	4413      	add	r3, r2
 80179b4:	00db      	lsls	r3, r3, #3
 80179b6:	4a1b      	ldr	r2, [pc, #108]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 80179b8:	4413      	add	r3, r2
 80179ba:	1d19      	adds	r1, r3, #4
 80179bc:	79fa      	ldrb	r2, [r7, #7]
 80179be:	4613      	mov	r3, r2
 80179c0:	005b      	lsls	r3, r3, #1
 80179c2:	4413      	add	r3, r2
 80179c4:	00db      	lsls	r3, r3, #3
 80179c6:	3308      	adds	r3, #8
 80179c8:	4a16      	ldr	r2, [pc, #88]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 80179ca:	4413      	add	r3, r2
 80179cc:	3304      	adds	r3, #4
 80179ce:	461a      	mov	r2, r3
 80179d0:	68f8      	ldr	r0, [r7, #12]
 80179d2:	f000 fafb 	bl	8017fcc <etharp_request_dst>
 80179d6:	4603      	mov	r3, r0
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d109      	bne.n	80179f0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80179dc:	79fa      	ldrb	r2, [r7, #7]
 80179de:	4911      	ldr	r1, [pc, #68]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 80179e0:	4613      	mov	r3, r2
 80179e2:	005b      	lsls	r3, r3, #1
 80179e4:	4413      	add	r3, r2
 80179e6:	00db      	lsls	r3, r3, #3
 80179e8:	440b      	add	r3, r1
 80179ea:	3314      	adds	r3, #20
 80179ec:	2203      	movs	r2, #3
 80179ee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80179f6:	79fa      	ldrb	r2, [r7, #7]
 80179f8:	4613      	mov	r3, r2
 80179fa:	005b      	lsls	r3, r3, #1
 80179fc:	4413      	add	r3, r2
 80179fe:	00db      	lsls	r3, r3, #3
 8017a00:	3308      	adds	r3, #8
 8017a02:	4a08      	ldr	r2, [pc, #32]	; (8017a24 <etharp_output_to_arp_index+0x124>)
 8017a04:	4413      	add	r3, r2
 8017a06:	3304      	adds	r3, #4
 8017a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017a0c:	9200      	str	r2, [sp, #0]
 8017a0e:	460a      	mov	r2, r1
 8017a10:	68b9      	ldr	r1, [r7, #8]
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f001 fe40 	bl	8019698 <ethernet_output>
 8017a18:	4603      	mov	r3, r0
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3710      	adds	r7, #16
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	2004f5e4 	.word	0x2004f5e4
 8017a28:	0801db68 	.word	0x0801db68
 8017a2c:	0801dcd8 	.word	0x0801dcd8
 8017a30:	0801dbe0 	.word	0x0801dbe0

08017a34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017a34:	b580      	push	{r7, lr}
 8017a36:	b08a      	sub	sp, #40	; 0x28
 8017a38:	af02      	add	r7, sp, #8
 8017a3a:	60f8      	str	r0, [r7, #12]
 8017a3c:	60b9      	str	r1, [r7, #8]
 8017a3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d106      	bne.n	8017a58 <etharp_output+0x24>
 8017a4a:	4b73      	ldr	r3, [pc, #460]	; (8017c18 <etharp_output+0x1e4>)
 8017a4c:	f240 321e 	movw	r2, #798	; 0x31e
 8017a50:	4972      	ldr	r1, [pc, #456]	; (8017c1c <etharp_output+0x1e8>)
 8017a52:	4873      	ldr	r0, [pc, #460]	; (8017c20 <etharp_output+0x1ec>)
 8017a54:	f002 f9f6 	bl	8019e44 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017a58:	68bb      	ldr	r3, [r7, #8]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d106      	bne.n	8017a6c <etharp_output+0x38>
 8017a5e:	4b6e      	ldr	r3, [pc, #440]	; (8017c18 <etharp_output+0x1e4>)
 8017a60:	f240 321f 	movw	r2, #799	; 0x31f
 8017a64:	496f      	ldr	r1, [pc, #444]	; (8017c24 <etharp_output+0x1f0>)
 8017a66:	486e      	ldr	r0, [pc, #440]	; (8017c20 <etharp_output+0x1ec>)
 8017a68:	f002 f9ec 	bl	8019e44 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d106      	bne.n	8017a80 <etharp_output+0x4c>
 8017a72:	4b69      	ldr	r3, [pc, #420]	; (8017c18 <etharp_output+0x1e4>)
 8017a74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017a78:	496b      	ldr	r1, [pc, #428]	; (8017c28 <etharp_output+0x1f4>)
 8017a7a:	4869      	ldr	r0, [pc, #420]	; (8017c20 <etharp_output+0x1ec>)
 8017a7c:	f002 f9e2 	bl	8019e44 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	68f9      	ldr	r1, [r7, #12]
 8017a86:	4618      	mov	r0, r3
 8017a88:	f000 fef8 	bl	801887c <ip4_addr_isbroadcast_u32>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d002      	beq.n	8017a98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017a92:	4b66      	ldr	r3, [pc, #408]	; (8017c2c <etharp_output+0x1f8>)
 8017a94:	61fb      	str	r3, [r7, #28]
 8017a96:	e0af      	b.n	8017bf8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017aa0:	2be0      	cmp	r3, #224	; 0xe0
 8017aa2:	d118      	bne.n	8017ad6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017aac:	235e      	movs	r3, #94	; 0x5e
 8017aae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	3301      	adds	r3, #1
 8017ab4:	781b      	ldrb	r3, [r3, #0]
 8017ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017aba:	b2db      	uxtb	r3, r3
 8017abc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	3302      	adds	r3, #2
 8017ac2:	781b      	ldrb	r3, [r3, #0]
 8017ac4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	3303      	adds	r3, #3
 8017aca:	781b      	ldrb	r3, [r3, #0]
 8017acc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017ace:	f107 0310 	add.w	r3, r7, #16
 8017ad2:	61fb      	str	r3, [r7, #28]
 8017ad4:	e090      	b.n	8017bf8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	681a      	ldr	r2, [r3, #0]
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	3304      	adds	r3, #4
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	405a      	eors	r2, r3
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	3308      	adds	r3, #8
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	4013      	ands	r3, r2
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d012      	beq.n	8017b14 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	681b      	ldr	r3, [r3, #0]
 8017af2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017af4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d00b      	beq.n	8017b14 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	330c      	adds	r3, #12
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d003      	beq.n	8017b0e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017b06:	68fb      	ldr	r3, [r7, #12]
 8017b08:	330c      	adds	r3, #12
 8017b0a:	61bb      	str	r3, [r7, #24]
 8017b0c:	e002      	b.n	8017b14 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017b0e:	f06f 0303 	mvn.w	r3, #3
 8017b12:	e07d      	b.n	8017c10 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017b14:	4b46      	ldr	r3, [pc, #280]	; (8017c30 <etharp_output+0x1fc>)
 8017b16:	781b      	ldrb	r3, [r3, #0]
 8017b18:	4619      	mov	r1, r3
 8017b1a:	4a46      	ldr	r2, [pc, #280]	; (8017c34 <etharp_output+0x200>)
 8017b1c:	460b      	mov	r3, r1
 8017b1e:	005b      	lsls	r3, r3, #1
 8017b20:	440b      	add	r3, r1
 8017b22:	00db      	lsls	r3, r3, #3
 8017b24:	4413      	add	r3, r2
 8017b26:	3314      	adds	r3, #20
 8017b28:	781b      	ldrb	r3, [r3, #0]
 8017b2a:	2b01      	cmp	r3, #1
 8017b2c:	d925      	bls.n	8017b7a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017b2e:	4b40      	ldr	r3, [pc, #256]	; (8017c30 <etharp_output+0x1fc>)
 8017b30:	781b      	ldrb	r3, [r3, #0]
 8017b32:	4619      	mov	r1, r3
 8017b34:	4a3f      	ldr	r2, [pc, #252]	; (8017c34 <etharp_output+0x200>)
 8017b36:	460b      	mov	r3, r1
 8017b38:	005b      	lsls	r3, r3, #1
 8017b3a:	440b      	add	r3, r1
 8017b3c:	00db      	lsls	r3, r3, #3
 8017b3e:	4413      	add	r3, r2
 8017b40:	3308      	adds	r3, #8
 8017b42:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017b44:	68fa      	ldr	r2, [r7, #12]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d117      	bne.n	8017b7a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017b4a:	69bb      	ldr	r3, [r7, #24]
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	4b38      	ldr	r3, [pc, #224]	; (8017c30 <etharp_output+0x1fc>)
 8017b50:	781b      	ldrb	r3, [r3, #0]
 8017b52:	4618      	mov	r0, r3
 8017b54:	4937      	ldr	r1, [pc, #220]	; (8017c34 <etharp_output+0x200>)
 8017b56:	4603      	mov	r3, r0
 8017b58:	005b      	lsls	r3, r3, #1
 8017b5a:	4403      	add	r3, r0
 8017b5c:	00db      	lsls	r3, r3, #3
 8017b5e:	440b      	add	r3, r1
 8017b60:	3304      	adds	r3, #4
 8017b62:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d108      	bne.n	8017b7a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017b68:	4b31      	ldr	r3, [pc, #196]	; (8017c30 <etharp_output+0x1fc>)
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	461a      	mov	r2, r3
 8017b6e:	68b9      	ldr	r1, [r7, #8]
 8017b70:	68f8      	ldr	r0, [r7, #12]
 8017b72:	f7ff fec5 	bl	8017900 <etharp_output_to_arp_index>
 8017b76:	4603      	mov	r3, r0
 8017b78:	e04a      	b.n	8017c10 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	75fb      	strb	r3, [r7, #23]
 8017b7e:	e031      	b.n	8017be4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017b80:	7dfa      	ldrb	r2, [r7, #23]
 8017b82:	492c      	ldr	r1, [pc, #176]	; (8017c34 <etharp_output+0x200>)
 8017b84:	4613      	mov	r3, r2
 8017b86:	005b      	lsls	r3, r3, #1
 8017b88:	4413      	add	r3, r2
 8017b8a:	00db      	lsls	r3, r3, #3
 8017b8c:	440b      	add	r3, r1
 8017b8e:	3314      	adds	r3, #20
 8017b90:	781b      	ldrb	r3, [r3, #0]
 8017b92:	2b01      	cmp	r3, #1
 8017b94:	d923      	bls.n	8017bde <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017b96:	7dfa      	ldrb	r2, [r7, #23]
 8017b98:	4926      	ldr	r1, [pc, #152]	; (8017c34 <etharp_output+0x200>)
 8017b9a:	4613      	mov	r3, r2
 8017b9c:	005b      	lsls	r3, r3, #1
 8017b9e:	4413      	add	r3, r2
 8017ba0:	00db      	lsls	r3, r3, #3
 8017ba2:	440b      	add	r3, r1
 8017ba4:	3308      	adds	r3, #8
 8017ba6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017ba8:	68fa      	ldr	r2, [r7, #12]
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d117      	bne.n	8017bde <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017bae:	69bb      	ldr	r3, [r7, #24]
 8017bb0:	6819      	ldr	r1, [r3, #0]
 8017bb2:	7dfa      	ldrb	r2, [r7, #23]
 8017bb4:	481f      	ldr	r0, [pc, #124]	; (8017c34 <etharp_output+0x200>)
 8017bb6:	4613      	mov	r3, r2
 8017bb8:	005b      	lsls	r3, r3, #1
 8017bba:	4413      	add	r3, r2
 8017bbc:	00db      	lsls	r3, r3, #3
 8017bbe:	4403      	add	r3, r0
 8017bc0:	3304      	adds	r3, #4
 8017bc2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017bc4:	4299      	cmp	r1, r3
 8017bc6:	d10a      	bne.n	8017bde <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017bc8:	4a19      	ldr	r2, [pc, #100]	; (8017c30 <etharp_output+0x1fc>)
 8017bca:	7dfb      	ldrb	r3, [r7, #23]
 8017bcc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017bce:	7dfb      	ldrb	r3, [r7, #23]
 8017bd0:	461a      	mov	r2, r3
 8017bd2:	68b9      	ldr	r1, [r7, #8]
 8017bd4:	68f8      	ldr	r0, [r7, #12]
 8017bd6:	f7ff fe93 	bl	8017900 <etharp_output_to_arp_index>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	e018      	b.n	8017c10 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017bde:	7dfb      	ldrb	r3, [r7, #23]
 8017be0:	3301      	adds	r3, #1
 8017be2:	75fb      	strb	r3, [r7, #23]
 8017be4:	7dfb      	ldrb	r3, [r7, #23]
 8017be6:	2b09      	cmp	r3, #9
 8017be8:	d9ca      	bls.n	8017b80 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017bea:	68ba      	ldr	r2, [r7, #8]
 8017bec:	69b9      	ldr	r1, [r7, #24]
 8017bee:	68f8      	ldr	r0, [r7, #12]
 8017bf0:	f000 f822 	bl	8017c38 <etharp_query>
 8017bf4:	4603      	mov	r3, r0
 8017bf6:	e00b      	b.n	8017c10 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017bfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017c02:	9300      	str	r3, [sp, #0]
 8017c04:	69fb      	ldr	r3, [r7, #28]
 8017c06:	68b9      	ldr	r1, [r7, #8]
 8017c08:	68f8      	ldr	r0, [r7, #12]
 8017c0a:	f001 fd45 	bl	8019698 <ethernet_output>
 8017c0e:	4603      	mov	r3, r0
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3720      	adds	r7, #32
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	0801db68 	.word	0x0801db68
 8017c1c:	0801dcb8 	.word	0x0801dcb8
 8017c20:	0801dbe0 	.word	0x0801dbe0
 8017c24:	0801dd08 	.word	0x0801dd08
 8017c28:	0801dca8 	.word	0x0801dca8
 8017c2c:	0801e384 	.word	0x0801e384
 8017c30:	2004f6d4 	.word	0x2004f6d4
 8017c34:	2004f5e4 	.word	0x2004f5e4

08017c38 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b08c      	sub	sp, #48	; 0x30
 8017c3c:	af02      	add	r7, sp, #8
 8017c3e:	60f8      	str	r0, [r7, #12]
 8017c40:	60b9      	str	r1, [r7, #8]
 8017c42:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	3326      	adds	r3, #38	; 0x26
 8017c48:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017c4a:	23ff      	movs	r3, #255	; 0xff
 8017c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017c50:	2300      	movs	r3, #0
 8017c52:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c54:	68bb      	ldr	r3, [r7, #8]
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	68f9      	ldr	r1, [r7, #12]
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f000 fe0e 	bl	801887c <ip4_addr_isbroadcast_u32>
 8017c60:	4603      	mov	r3, r0
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d10c      	bne.n	8017c80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017c66:	68bb      	ldr	r3, [r7, #8]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017c6e:	2be0      	cmp	r3, #224	; 0xe0
 8017c70:	d006      	beq.n	8017c80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d003      	beq.n	8017c80 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d102      	bne.n	8017c86 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017c80:	f06f 030f 	mvn.w	r3, #15
 8017c84:	e101      	b.n	8017e8a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017c86:	68fa      	ldr	r2, [r7, #12]
 8017c88:	2101      	movs	r1, #1
 8017c8a:	68b8      	ldr	r0, [r7, #8]
 8017c8c:	f7ff fb60 	bl	8017350 <etharp_find_entry>
 8017c90:	4603      	mov	r3, r0
 8017c92:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017c94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	da02      	bge.n	8017ca2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017c9c:	8a7b      	ldrh	r3, [r7, #18]
 8017c9e:	b25b      	sxtb	r3, r3
 8017ca0:	e0f3      	b.n	8017e8a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017ca2:	8a7b      	ldrh	r3, [r7, #18]
 8017ca4:	2b7e      	cmp	r3, #126	; 0x7e
 8017ca6:	d906      	bls.n	8017cb6 <etharp_query+0x7e>
 8017ca8:	4b7a      	ldr	r3, [pc, #488]	; (8017e94 <etharp_query+0x25c>)
 8017caa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017cae:	497a      	ldr	r1, [pc, #488]	; (8017e98 <etharp_query+0x260>)
 8017cb0:	487a      	ldr	r0, [pc, #488]	; (8017e9c <etharp_query+0x264>)
 8017cb2:	f002 f8c7 	bl	8019e44 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017cb6:	8a7b      	ldrh	r3, [r7, #18]
 8017cb8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017cba:	7c7a      	ldrb	r2, [r7, #17]
 8017cbc:	4978      	ldr	r1, [pc, #480]	; (8017ea0 <etharp_query+0x268>)
 8017cbe:	4613      	mov	r3, r2
 8017cc0:	005b      	lsls	r3, r3, #1
 8017cc2:	4413      	add	r3, r2
 8017cc4:	00db      	lsls	r3, r3, #3
 8017cc6:	440b      	add	r3, r1
 8017cc8:	3314      	adds	r3, #20
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d115      	bne.n	8017cfc <etharp_query+0xc4>
    is_new_entry = 1;
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017cd4:	7c7a      	ldrb	r2, [r7, #17]
 8017cd6:	4972      	ldr	r1, [pc, #456]	; (8017ea0 <etharp_query+0x268>)
 8017cd8:	4613      	mov	r3, r2
 8017cda:	005b      	lsls	r3, r3, #1
 8017cdc:	4413      	add	r3, r2
 8017cde:	00db      	lsls	r3, r3, #3
 8017ce0:	440b      	add	r3, r1
 8017ce2:	3314      	adds	r3, #20
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017ce8:	7c7a      	ldrb	r2, [r7, #17]
 8017cea:	496d      	ldr	r1, [pc, #436]	; (8017ea0 <etharp_query+0x268>)
 8017cec:	4613      	mov	r3, r2
 8017cee:	005b      	lsls	r3, r3, #1
 8017cf0:	4413      	add	r3, r2
 8017cf2:	00db      	lsls	r3, r3, #3
 8017cf4:	440b      	add	r3, r1
 8017cf6:	3308      	adds	r3, #8
 8017cf8:	68fa      	ldr	r2, [r7, #12]
 8017cfa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017cfc:	7c7a      	ldrb	r2, [r7, #17]
 8017cfe:	4968      	ldr	r1, [pc, #416]	; (8017ea0 <etharp_query+0x268>)
 8017d00:	4613      	mov	r3, r2
 8017d02:	005b      	lsls	r3, r3, #1
 8017d04:	4413      	add	r3, r2
 8017d06:	00db      	lsls	r3, r3, #3
 8017d08:	440b      	add	r3, r1
 8017d0a:	3314      	adds	r3, #20
 8017d0c:	781b      	ldrb	r3, [r3, #0]
 8017d0e:	2b01      	cmp	r3, #1
 8017d10:	d011      	beq.n	8017d36 <etharp_query+0xfe>
 8017d12:	7c7a      	ldrb	r2, [r7, #17]
 8017d14:	4962      	ldr	r1, [pc, #392]	; (8017ea0 <etharp_query+0x268>)
 8017d16:	4613      	mov	r3, r2
 8017d18:	005b      	lsls	r3, r3, #1
 8017d1a:	4413      	add	r3, r2
 8017d1c:	00db      	lsls	r3, r3, #3
 8017d1e:	440b      	add	r3, r1
 8017d20:	3314      	adds	r3, #20
 8017d22:	781b      	ldrb	r3, [r3, #0]
 8017d24:	2b01      	cmp	r3, #1
 8017d26:	d806      	bhi.n	8017d36 <etharp_query+0xfe>
 8017d28:	4b5a      	ldr	r3, [pc, #360]	; (8017e94 <etharp_query+0x25c>)
 8017d2a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017d2e:	495d      	ldr	r1, [pc, #372]	; (8017ea4 <etharp_query+0x26c>)
 8017d30:	485a      	ldr	r0, [pc, #360]	; (8017e9c <etharp_query+0x264>)
 8017d32:	f002 f887 	bl	8019e44 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017d36:	6a3b      	ldr	r3, [r7, #32]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d102      	bne.n	8017d42 <etharp_query+0x10a>
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d10c      	bne.n	8017d5c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017d42:	68b9      	ldr	r1, [r7, #8]
 8017d44:	68f8      	ldr	r0, [r7, #12]
 8017d46:	f000 f963 	bl	8018010 <etharp_request>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d102      	bne.n	8017d5c <etharp_query+0x124>
      return result;
 8017d56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017d5a:	e096      	b.n	8017e8a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d106      	bne.n	8017d70 <etharp_query+0x138>
 8017d62:	4b4c      	ldr	r3, [pc, #304]	; (8017e94 <etharp_query+0x25c>)
 8017d64:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017d68:	494f      	ldr	r1, [pc, #316]	; (8017ea8 <etharp_query+0x270>)
 8017d6a:	484c      	ldr	r0, [pc, #304]	; (8017e9c <etharp_query+0x264>)
 8017d6c:	f002 f86a 	bl	8019e44 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017d70:	7c7a      	ldrb	r2, [r7, #17]
 8017d72:	494b      	ldr	r1, [pc, #300]	; (8017ea0 <etharp_query+0x268>)
 8017d74:	4613      	mov	r3, r2
 8017d76:	005b      	lsls	r3, r3, #1
 8017d78:	4413      	add	r3, r2
 8017d7a:	00db      	lsls	r3, r3, #3
 8017d7c:	440b      	add	r3, r1
 8017d7e:	3314      	adds	r3, #20
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	2b01      	cmp	r3, #1
 8017d84:	d917      	bls.n	8017db6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017d86:	4a49      	ldr	r2, [pc, #292]	; (8017eac <etharp_query+0x274>)
 8017d88:	7c7b      	ldrb	r3, [r7, #17]
 8017d8a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017d8c:	7c7a      	ldrb	r2, [r7, #17]
 8017d8e:	4613      	mov	r3, r2
 8017d90:	005b      	lsls	r3, r3, #1
 8017d92:	4413      	add	r3, r2
 8017d94:	00db      	lsls	r3, r3, #3
 8017d96:	3308      	adds	r3, #8
 8017d98:	4a41      	ldr	r2, [pc, #260]	; (8017ea0 <etharp_query+0x268>)
 8017d9a:	4413      	add	r3, r2
 8017d9c:	3304      	adds	r3, #4
 8017d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017da2:	9200      	str	r2, [sp, #0]
 8017da4:	697a      	ldr	r2, [r7, #20]
 8017da6:	6879      	ldr	r1, [r7, #4]
 8017da8:	68f8      	ldr	r0, [r7, #12]
 8017daa:	f001 fc75 	bl	8019698 <ethernet_output>
 8017dae:	4603      	mov	r3, r0
 8017db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017db4:	e067      	b.n	8017e86 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017db6:	7c7a      	ldrb	r2, [r7, #17]
 8017db8:	4939      	ldr	r1, [pc, #228]	; (8017ea0 <etharp_query+0x268>)
 8017dba:	4613      	mov	r3, r2
 8017dbc:	005b      	lsls	r3, r3, #1
 8017dbe:	4413      	add	r3, r2
 8017dc0:	00db      	lsls	r3, r3, #3
 8017dc2:	440b      	add	r3, r1
 8017dc4:	3314      	adds	r3, #20
 8017dc6:	781b      	ldrb	r3, [r3, #0]
 8017dc8:	2b01      	cmp	r3, #1
 8017dca:	d15c      	bne.n	8017e86 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017dd4:	e01c      	b.n	8017e10 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017dd6:	69fb      	ldr	r3, [r7, #28]
 8017dd8:	895a      	ldrh	r2, [r3, #10]
 8017dda:	69fb      	ldr	r3, [r7, #28]
 8017ddc:	891b      	ldrh	r3, [r3, #8]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d10a      	bne.n	8017df8 <etharp_query+0x1c0>
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d006      	beq.n	8017df8 <etharp_query+0x1c0>
 8017dea:	4b2a      	ldr	r3, [pc, #168]	; (8017e94 <etharp_query+0x25c>)
 8017dec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017df0:	492f      	ldr	r1, [pc, #188]	; (8017eb0 <etharp_query+0x278>)
 8017df2:	482a      	ldr	r0, [pc, #168]	; (8017e9c <etharp_query+0x264>)
 8017df4:	f002 f826 	bl	8019e44 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017df8:	69fb      	ldr	r3, [r7, #28]
 8017dfa:	7b1b      	ldrb	r3, [r3, #12]
 8017dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d002      	beq.n	8017e0a <etharp_query+0x1d2>
        copy_needed = 1;
 8017e04:	2301      	movs	r3, #1
 8017e06:	61bb      	str	r3, [r7, #24]
        break;
 8017e08:	e005      	b.n	8017e16 <etharp_query+0x1de>
      }
      p = p->next;
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d1df      	bne.n	8017dd6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017e16:	69bb      	ldr	r3, [r7, #24]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d007      	beq.n	8017e2c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017e1c:	687a      	ldr	r2, [r7, #4]
 8017e1e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017e22:	200e      	movs	r0, #14
 8017e24:	f7f8 fcca 	bl	80107bc <pbuf_clone>
 8017e28:	61f8      	str	r0, [r7, #28]
 8017e2a:	e004      	b.n	8017e36 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017e30:	69f8      	ldr	r0, [r7, #28]
 8017e32:	f7f8 fb01 	bl	8010438 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017e36:	69fb      	ldr	r3, [r7, #28]
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d021      	beq.n	8017e80 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017e3c:	7c7a      	ldrb	r2, [r7, #17]
 8017e3e:	4918      	ldr	r1, [pc, #96]	; (8017ea0 <etharp_query+0x268>)
 8017e40:	4613      	mov	r3, r2
 8017e42:	005b      	lsls	r3, r3, #1
 8017e44:	4413      	add	r3, r2
 8017e46:	00db      	lsls	r3, r3, #3
 8017e48:	440b      	add	r3, r1
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d00a      	beq.n	8017e66 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017e50:	7c7a      	ldrb	r2, [r7, #17]
 8017e52:	4913      	ldr	r1, [pc, #76]	; (8017ea0 <etharp_query+0x268>)
 8017e54:	4613      	mov	r3, r2
 8017e56:	005b      	lsls	r3, r3, #1
 8017e58:	4413      	add	r3, r2
 8017e5a:	00db      	lsls	r3, r3, #3
 8017e5c:	440b      	add	r3, r1
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7f8 fa43 	bl	80102ec <pbuf_free>
      }
      arp_table[i].q = p;
 8017e66:	7c7a      	ldrb	r2, [r7, #17]
 8017e68:	490d      	ldr	r1, [pc, #52]	; (8017ea0 <etharp_query+0x268>)
 8017e6a:	4613      	mov	r3, r2
 8017e6c:	005b      	lsls	r3, r3, #1
 8017e6e:	4413      	add	r3, r2
 8017e70:	00db      	lsls	r3, r3, #3
 8017e72:	440b      	add	r3, r1
 8017e74:	69fa      	ldr	r2, [r7, #28]
 8017e76:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e7e:	e002      	b.n	8017e86 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017e80:	23ff      	movs	r3, #255	; 0xff
 8017e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017e86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3728      	adds	r7, #40	; 0x28
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}
 8017e92:	bf00      	nop
 8017e94:	0801db68 	.word	0x0801db68
 8017e98:	0801dd14 	.word	0x0801dd14
 8017e9c:	0801dbe0 	.word	0x0801dbe0
 8017ea0:	2004f5e4 	.word	0x2004f5e4
 8017ea4:	0801dd24 	.word	0x0801dd24
 8017ea8:	0801dd08 	.word	0x0801dd08
 8017eac:	2004f6d4 	.word	0x2004f6d4
 8017eb0:	0801dd4c 	.word	0x0801dd4c

08017eb4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b08a      	sub	sp, #40	; 0x28
 8017eb8:	af02      	add	r7, sp, #8
 8017eba:	60f8      	str	r0, [r7, #12]
 8017ebc:	60b9      	str	r1, [r7, #8]
 8017ebe:	607a      	str	r2, [r7, #4]
 8017ec0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d106      	bne.n	8017eda <etharp_raw+0x26>
 8017ecc:	4b3a      	ldr	r3, [pc, #232]	; (8017fb8 <etharp_raw+0x104>)
 8017ece:	f240 4257 	movw	r2, #1111	; 0x457
 8017ed2:	493a      	ldr	r1, [pc, #232]	; (8017fbc <etharp_raw+0x108>)
 8017ed4:	483a      	ldr	r0, [pc, #232]	; (8017fc0 <etharp_raw+0x10c>)
 8017ed6:	f001 ffb5 	bl	8019e44 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017eda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017ede:	211c      	movs	r1, #28
 8017ee0:	200e      	movs	r0, #14
 8017ee2:	f7f7 ff1f 	bl	800fd24 <pbuf_alloc>
 8017ee6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017ee8:	69bb      	ldr	r3, [r7, #24]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d102      	bne.n	8017ef4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017eee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ef2:	e05d      	b.n	8017fb0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017ef4:	69bb      	ldr	r3, [r7, #24]
 8017ef6:	895b      	ldrh	r3, [r3, #10]
 8017ef8:	2b1b      	cmp	r3, #27
 8017efa:	d806      	bhi.n	8017f0a <etharp_raw+0x56>
 8017efc:	4b2e      	ldr	r3, [pc, #184]	; (8017fb8 <etharp_raw+0x104>)
 8017efe:	f240 4262 	movw	r2, #1122	; 0x462
 8017f02:	4930      	ldr	r1, [pc, #192]	; (8017fc4 <etharp_raw+0x110>)
 8017f04:	482e      	ldr	r0, [pc, #184]	; (8017fc0 <etharp_raw+0x10c>)
 8017f06:	f001 ff9d 	bl	8019e44 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017f0a:	69bb      	ldr	r3, [r7, #24]
 8017f0c:	685b      	ldr	r3, [r3, #4]
 8017f0e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017f10:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7f6 fdf8 	bl	800eb08 <lwip_htons>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	461a      	mov	r2, r3
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017f26:	2b06      	cmp	r3, #6
 8017f28:	d006      	beq.n	8017f38 <etharp_raw+0x84>
 8017f2a:	4b23      	ldr	r3, [pc, #140]	; (8017fb8 <etharp_raw+0x104>)
 8017f2c:	f240 4269 	movw	r2, #1129	; 0x469
 8017f30:	4925      	ldr	r1, [pc, #148]	; (8017fc8 <etharp_raw+0x114>)
 8017f32:	4823      	ldr	r0, [pc, #140]	; (8017fc0 <etharp_raw+0x10c>)
 8017f34:	f001 ff86 	bl	8019e44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	3308      	adds	r3, #8
 8017f3c:	2206      	movs	r2, #6
 8017f3e:	6839      	ldr	r1, [r7, #0]
 8017f40:	4618      	mov	r0, r3
 8017f42:	f001 fed4 	bl	8019cee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	3312      	adds	r3, #18
 8017f4a:	2206      	movs	r2, #6
 8017f4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017f4e:	4618      	mov	r0, r3
 8017f50:	f001 fecd 	bl	8019cee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	330e      	adds	r3, #14
 8017f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f5a:	6812      	ldr	r2, [r2, #0]
 8017f5c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017f5e:	697b      	ldr	r3, [r7, #20]
 8017f60:	3318      	adds	r3, #24
 8017f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f64:	6812      	ldr	r2, [r2, #0]
 8017f66:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017f68:	697b      	ldr	r3, [r7, #20]
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	701a      	strb	r2, [r3, #0]
 8017f6e:	2200      	movs	r2, #0
 8017f70:	f042 0201 	orr.w	r2, r2, #1
 8017f74:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017f76:	697b      	ldr	r3, [r7, #20]
 8017f78:	2200      	movs	r2, #0
 8017f7a:	f042 0208 	orr.w	r2, r2, #8
 8017f7e:	709a      	strb	r2, [r3, #2]
 8017f80:	2200      	movs	r2, #0
 8017f82:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017f84:	697b      	ldr	r3, [r7, #20]
 8017f86:	2206      	movs	r2, #6
 8017f88:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017f8a:	697b      	ldr	r3, [r7, #20]
 8017f8c:	2204      	movs	r2, #4
 8017f8e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017f90:	f640 0306 	movw	r3, #2054	; 0x806
 8017f94:	9300      	str	r3, [sp, #0]
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	68ba      	ldr	r2, [r7, #8]
 8017f9a:	69b9      	ldr	r1, [r7, #24]
 8017f9c:	68f8      	ldr	r0, [r7, #12]
 8017f9e:	f001 fb7b 	bl	8019698 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017fa2:	69b8      	ldr	r0, [r7, #24]
 8017fa4:	f7f8 f9a2 	bl	80102ec <pbuf_free>
  p = NULL;
 8017fa8:	2300      	movs	r3, #0
 8017faa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017fac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	3720      	adds	r7, #32
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}
 8017fb8:	0801db68 	.word	0x0801db68
 8017fbc:	0801dcb8 	.word	0x0801dcb8
 8017fc0:	0801dbe0 	.word	0x0801dbe0
 8017fc4:	0801dd68 	.word	0x0801dd68
 8017fc8:	0801dd9c 	.word	0x0801dd9c

08017fcc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b088      	sub	sp, #32
 8017fd0:	af04      	add	r7, sp, #16
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017fe8:	2201      	movs	r2, #1
 8017fea:	9203      	str	r2, [sp, #12]
 8017fec:	68ba      	ldr	r2, [r7, #8]
 8017fee:	9202      	str	r2, [sp, #8]
 8017ff0:	4a06      	ldr	r2, [pc, #24]	; (801800c <etharp_request_dst+0x40>)
 8017ff2:	9201      	str	r2, [sp, #4]
 8017ff4:	9300      	str	r3, [sp, #0]
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	687a      	ldr	r2, [r7, #4]
 8017ffa:	68f8      	ldr	r0, [r7, #12]
 8017ffc:	f7ff ff5a 	bl	8017eb4 <etharp_raw>
 8018000:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018002:	4618      	mov	r0, r3
 8018004:	3710      	adds	r7, #16
 8018006:	46bd      	mov	sp, r7
 8018008:	bd80      	pop	{r7, pc}
 801800a:	bf00      	nop
 801800c:	0801e38c 	.word	0x0801e38c

08018010 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b082      	sub	sp, #8
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801801a:	4a05      	ldr	r2, [pc, #20]	; (8018030 <etharp_request+0x20>)
 801801c:	6839      	ldr	r1, [r7, #0]
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	f7ff ffd4 	bl	8017fcc <etharp_request_dst>
 8018024:	4603      	mov	r3, r0
}
 8018026:	4618      	mov	r0, r3
 8018028:	3708      	adds	r7, #8
 801802a:	46bd      	mov	sp, r7
 801802c:	bd80      	pop	{r7, pc}
 801802e:	bf00      	nop
 8018030:	0801e384 	.word	0x0801e384

08018034 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b08e      	sub	sp, #56	; 0x38
 8018038:	af04      	add	r7, sp, #16
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801803e:	4b79      	ldr	r3, [pc, #484]	; (8018224 <icmp_input+0x1f0>)
 8018040:	689b      	ldr	r3, [r3, #8]
 8018042:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	f003 030f 	and.w	r3, r3, #15
 801804c:	b2db      	uxtb	r3, r3
 801804e:	009b      	lsls	r3, r3, #2
 8018050:	b2db      	uxtb	r3, r3
 8018052:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018056:	2b13      	cmp	r3, #19
 8018058:	f240 80cd 	bls.w	80181f6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	895b      	ldrh	r3, [r3, #10]
 8018060:	2b03      	cmp	r3, #3
 8018062:	f240 80ca 	bls.w	80181fa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018070:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018074:	2b00      	cmp	r3, #0
 8018076:	f000 80b7 	beq.w	80181e8 <icmp_input+0x1b4>
 801807a:	2b08      	cmp	r3, #8
 801807c:	f040 80b7 	bne.w	80181ee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018080:	4b69      	ldr	r3, [pc, #420]	; (8018228 <icmp_input+0x1f4>)
 8018082:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018084:	4b67      	ldr	r3, [pc, #412]	; (8018224 <icmp_input+0x1f0>)
 8018086:	695b      	ldr	r3, [r3, #20]
 8018088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801808c:	2be0      	cmp	r3, #224	; 0xe0
 801808e:	f000 80bb 	beq.w	8018208 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018092:	4b64      	ldr	r3, [pc, #400]	; (8018224 <icmp_input+0x1f0>)
 8018094:	695b      	ldr	r3, [r3, #20]
 8018096:	4a63      	ldr	r2, [pc, #396]	; (8018224 <icmp_input+0x1f0>)
 8018098:	6812      	ldr	r2, [r2, #0]
 801809a:	4611      	mov	r1, r2
 801809c:	4618      	mov	r0, r3
 801809e:	f000 fbed 	bl	801887c <ip4_addr_isbroadcast_u32>
 80180a2:	4603      	mov	r3, r0
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	f040 80b1 	bne.w	801820c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	891b      	ldrh	r3, [r3, #8]
 80180ae:	2b07      	cmp	r3, #7
 80180b0:	f240 80a5 	bls.w	80181fe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80180b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180b6:	330e      	adds	r3, #14
 80180b8:	4619      	mov	r1, r3
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7f8 f880 	bl	80101c0 <pbuf_add_header>
 80180c0:	4603      	mov	r3, r0
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d04b      	beq.n	801815e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	891a      	ldrh	r2, [r3, #8]
 80180ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180cc:	4413      	add	r3, r2
 80180ce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	891b      	ldrh	r3, [r3, #8]
 80180d4:	8b7a      	ldrh	r2, [r7, #26]
 80180d6:	429a      	cmp	r2, r3
 80180d8:	f0c0 809a 	bcc.w	8018210 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80180dc:	8b7b      	ldrh	r3, [r7, #26]
 80180de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80180e2:	4619      	mov	r1, r3
 80180e4:	200e      	movs	r0, #14
 80180e6:	f7f7 fe1d 	bl	800fd24 <pbuf_alloc>
 80180ea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80180ec:	697b      	ldr	r3, [r7, #20]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	f000 8090 	beq.w	8018214 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80180f4:	697b      	ldr	r3, [r7, #20]
 80180f6:	895b      	ldrh	r3, [r3, #10]
 80180f8:	461a      	mov	r2, r3
 80180fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180fc:	3308      	adds	r3, #8
 80180fe:	429a      	cmp	r2, r3
 8018100:	d203      	bcs.n	801810a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8018102:	6978      	ldr	r0, [r7, #20]
 8018104:	f7f8 f8f2 	bl	80102ec <pbuf_free>
          goto icmperr;
 8018108:	e085      	b.n	8018216 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801810a:	697b      	ldr	r3, [r7, #20]
 801810c:	685b      	ldr	r3, [r3, #4]
 801810e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018112:	4618      	mov	r0, r3
 8018114:	f001 fdeb 	bl	8019cee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8018118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801811a:	4619      	mov	r1, r3
 801811c:	6978      	ldr	r0, [r7, #20]
 801811e:	f7f8 f85f 	bl	80101e0 <pbuf_remove_header>
 8018122:	4603      	mov	r3, r0
 8018124:	2b00      	cmp	r3, #0
 8018126:	d009      	beq.n	801813c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8018128:	4b40      	ldr	r3, [pc, #256]	; (801822c <icmp_input+0x1f8>)
 801812a:	22b6      	movs	r2, #182	; 0xb6
 801812c:	4940      	ldr	r1, [pc, #256]	; (8018230 <icmp_input+0x1fc>)
 801812e:	4841      	ldr	r0, [pc, #260]	; (8018234 <icmp_input+0x200>)
 8018130:	f001 fe88 	bl	8019e44 <iprintf>
          pbuf_free(r);
 8018134:	6978      	ldr	r0, [r7, #20]
 8018136:	f7f8 f8d9 	bl	80102ec <pbuf_free>
          goto icmperr;
 801813a:	e06c      	b.n	8018216 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801813c:	6879      	ldr	r1, [r7, #4]
 801813e:	6978      	ldr	r0, [r7, #20]
 8018140:	f7f8 f9f8 	bl	8010534 <pbuf_copy>
 8018144:	4603      	mov	r3, r0
 8018146:	2b00      	cmp	r3, #0
 8018148:	d003      	beq.n	8018152 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801814a:	6978      	ldr	r0, [r7, #20]
 801814c:	f7f8 f8ce 	bl	80102ec <pbuf_free>
          goto icmperr;
 8018150:	e061      	b.n	8018216 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f7f8 f8ca 	bl	80102ec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018158:	697b      	ldr	r3, [r7, #20]
 801815a:	607b      	str	r3, [r7, #4]
 801815c:	e00f      	b.n	801817e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801815e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018160:	330e      	adds	r3, #14
 8018162:	4619      	mov	r1, r3
 8018164:	6878      	ldr	r0, [r7, #4]
 8018166:	f7f8 f83b 	bl	80101e0 <pbuf_remove_header>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d006      	beq.n	801817e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018170:	4b2e      	ldr	r3, [pc, #184]	; (801822c <icmp_input+0x1f8>)
 8018172:	22c7      	movs	r2, #199	; 0xc7
 8018174:	4930      	ldr	r1, [pc, #192]	; (8018238 <icmp_input+0x204>)
 8018176:	482f      	ldr	r0, [pc, #188]	; (8018234 <icmp_input+0x200>)
 8018178:	f001 fe64 	bl	8019e44 <iprintf>
          goto icmperr;
 801817c:	e04b      	b.n	8018216 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	685b      	ldr	r3, [r3, #4]
 8018182:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018186:	4619      	mov	r1, r3
 8018188:	6878      	ldr	r0, [r7, #4]
 801818a:	f7f8 f819 	bl	80101c0 <pbuf_add_header>
 801818e:	4603      	mov	r3, r0
 8018190:	2b00      	cmp	r3, #0
 8018192:	d12b      	bne.n	80181ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	681a      	ldr	r2, [r3, #0]
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80181a2:	4b20      	ldr	r3, [pc, #128]	; (8018224 <icmp_input+0x1f0>)
 80181a4:	691a      	ldr	r2, [r3, #16]
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80181aa:	693b      	ldr	r3, [r7, #16]
 80181ac:	2200      	movs	r2, #0
 80181ae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	2200      	movs	r2, #0
 80181b4:	709a      	strb	r2, [r3, #2]
 80181b6:	2200      	movs	r2, #0
 80181b8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	22ff      	movs	r2, #255	; 0xff
 80181be:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	2200      	movs	r2, #0
 80181c4:	729a      	strb	r2, [r3, #10]
 80181c6:	2200      	movs	r2, #0
 80181c8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80181ca:	683b      	ldr	r3, [r7, #0]
 80181cc:	9302      	str	r3, [sp, #8]
 80181ce:	2301      	movs	r3, #1
 80181d0:	9301      	str	r3, [sp, #4]
 80181d2:	2300      	movs	r3, #0
 80181d4:	9300      	str	r3, [sp, #0]
 80181d6:	23ff      	movs	r3, #255	; 0xff
 80181d8:	2200      	movs	r2, #0
 80181da:	69f9      	ldr	r1, [r7, #28]
 80181dc:	6878      	ldr	r0, [r7, #4]
 80181de:	f000 fa75 	bl	80186cc <ip4_output_if>
 80181e2:	4603      	mov	r3, r0
 80181e4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80181e6:	e001      	b.n	80181ec <icmp_input+0x1b8>
      break;
 80181e8:	bf00      	nop
 80181ea:	e000      	b.n	80181ee <icmp_input+0x1ba>
      break;
 80181ec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7f8 f87c 	bl	80102ec <pbuf_free>
  return;
 80181f4:	e013      	b.n	801821e <icmp_input+0x1ea>
    goto lenerr;
 80181f6:	bf00      	nop
 80181f8:	e002      	b.n	8018200 <icmp_input+0x1cc>
    goto lenerr;
 80181fa:	bf00      	nop
 80181fc:	e000      	b.n	8018200 <icmp_input+0x1cc>
        goto lenerr;
 80181fe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018200:	6878      	ldr	r0, [r7, #4]
 8018202:	f7f8 f873 	bl	80102ec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018206:	e00a      	b.n	801821e <icmp_input+0x1ea>
        goto icmperr;
 8018208:	bf00      	nop
 801820a:	e004      	b.n	8018216 <icmp_input+0x1e2>
        goto icmperr;
 801820c:	bf00      	nop
 801820e:	e002      	b.n	8018216 <icmp_input+0x1e2>
          goto icmperr;
 8018210:	bf00      	nop
 8018212:	e000      	b.n	8018216 <icmp_input+0x1e2>
          goto icmperr;
 8018214:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f7f8 f868 	bl	80102ec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801821c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801821e:	3728      	adds	r7, #40	; 0x28
 8018220:	46bd      	mov	sp, r7
 8018222:	bd80      	pop	{r7, pc}
 8018224:	2004b070 	.word	0x2004b070
 8018228:	2004b084 	.word	0x2004b084
 801822c:	0801dde0 	.word	0x0801dde0
 8018230:	0801de18 	.word	0x0801de18
 8018234:	0801de50 	.word	0x0801de50
 8018238:	0801de78 	.word	0x0801de78

0801823c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b082      	sub	sp, #8
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
 8018244:	460b      	mov	r3, r1
 8018246:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018248:	78fb      	ldrb	r3, [r7, #3]
 801824a:	461a      	mov	r2, r3
 801824c:	2103      	movs	r1, #3
 801824e:	6878      	ldr	r0, [r7, #4]
 8018250:	f000 f814 	bl	801827c <icmp_send_response>
}
 8018254:	bf00      	nop
 8018256:	3708      	adds	r7, #8
 8018258:	46bd      	mov	sp, r7
 801825a:	bd80      	pop	{r7, pc}

0801825c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b082      	sub	sp, #8
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
 8018264:	460b      	mov	r3, r1
 8018266:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018268:	78fb      	ldrb	r3, [r7, #3]
 801826a:	461a      	mov	r2, r3
 801826c:	210b      	movs	r1, #11
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f000 f804 	bl	801827c <icmp_send_response>
}
 8018274:	bf00      	nop
 8018276:	3708      	adds	r7, #8
 8018278:	46bd      	mov	sp, r7
 801827a:	bd80      	pop	{r7, pc}

0801827c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b08c      	sub	sp, #48	; 0x30
 8018280:	af04      	add	r7, sp, #16
 8018282:	6078      	str	r0, [r7, #4]
 8018284:	460b      	mov	r3, r1
 8018286:	70fb      	strb	r3, [r7, #3]
 8018288:	4613      	mov	r3, r2
 801828a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801828c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018290:	2124      	movs	r1, #36	; 0x24
 8018292:	2022      	movs	r0, #34	; 0x22
 8018294:	f7f7 fd46 	bl	800fd24 <pbuf_alloc>
 8018298:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801829a:	69fb      	ldr	r3, [r7, #28]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d04c      	beq.n	801833a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80182a0:	69fb      	ldr	r3, [r7, #28]
 80182a2:	895b      	ldrh	r3, [r3, #10]
 80182a4:	2b23      	cmp	r3, #35	; 0x23
 80182a6:	d806      	bhi.n	80182b6 <icmp_send_response+0x3a>
 80182a8:	4b26      	ldr	r3, [pc, #152]	; (8018344 <icmp_send_response+0xc8>)
 80182aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80182ae:	4926      	ldr	r1, [pc, #152]	; (8018348 <icmp_send_response+0xcc>)
 80182b0:	4826      	ldr	r0, [pc, #152]	; (801834c <icmp_send_response+0xd0>)
 80182b2:	f001 fdc7 	bl	8019e44 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	685b      	ldr	r3, [r3, #4]
 80182ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80182bc:	69fb      	ldr	r3, [r7, #28]
 80182be:	685b      	ldr	r3, [r3, #4]
 80182c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	78fa      	ldrb	r2, [r7, #3]
 80182c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	78ba      	ldrb	r2, [r7, #2]
 80182cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80182ce:	697b      	ldr	r3, [r7, #20]
 80182d0:	2200      	movs	r2, #0
 80182d2:	711a      	strb	r2, [r3, #4]
 80182d4:	2200      	movs	r2, #0
 80182d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	2200      	movs	r2, #0
 80182dc:	719a      	strb	r2, [r3, #6]
 80182de:	2200      	movs	r2, #0
 80182e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80182e2:	69fb      	ldr	r3, [r7, #28]
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	f103 0008 	add.w	r0, r3, #8
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	685b      	ldr	r3, [r3, #4]
 80182ee:	221c      	movs	r2, #28
 80182f0:	4619      	mov	r1, r3
 80182f2:	f001 fcfc 	bl	8019cee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80182f6:	69bb      	ldr	r3, [r7, #24]
 80182f8:	68db      	ldr	r3, [r3, #12]
 80182fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80182fc:	f107 030c 	add.w	r3, r7, #12
 8018300:	4618      	mov	r0, r3
 8018302:	f000 f825 	bl	8018350 <ip4_route>
 8018306:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d011      	beq.n	8018332 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801830e:	697b      	ldr	r3, [r7, #20]
 8018310:	2200      	movs	r2, #0
 8018312:	709a      	strb	r2, [r3, #2]
 8018314:	2200      	movs	r2, #0
 8018316:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018318:	f107 020c 	add.w	r2, r7, #12
 801831c:	693b      	ldr	r3, [r7, #16]
 801831e:	9302      	str	r3, [sp, #8]
 8018320:	2301      	movs	r3, #1
 8018322:	9301      	str	r3, [sp, #4]
 8018324:	2300      	movs	r3, #0
 8018326:	9300      	str	r3, [sp, #0]
 8018328:	23ff      	movs	r3, #255	; 0xff
 801832a:	2100      	movs	r1, #0
 801832c:	69f8      	ldr	r0, [r7, #28]
 801832e:	f000 f9cd 	bl	80186cc <ip4_output_if>
  }
  pbuf_free(q);
 8018332:	69f8      	ldr	r0, [r7, #28]
 8018334:	f7f7 ffda 	bl	80102ec <pbuf_free>
 8018338:	e000      	b.n	801833c <icmp_send_response+0xc0>
    return;
 801833a:	bf00      	nop
}
 801833c:	3720      	adds	r7, #32
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}
 8018342:	bf00      	nop
 8018344:	0801dde0 	.word	0x0801dde0
 8018348:	0801deac 	.word	0x0801deac
 801834c:	0801de50 	.word	0x0801de50

08018350 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018350:	b480      	push	{r7}
 8018352:	b085      	sub	sp, #20
 8018354:	af00      	add	r7, sp, #0
 8018356:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018358:	4b33      	ldr	r3, [pc, #204]	; (8018428 <ip4_route+0xd8>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	60fb      	str	r3, [r7, #12]
 801835e:	e036      	b.n	80183ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018366:	f003 0301 	and.w	r3, r3, #1
 801836a:	b2db      	uxtb	r3, r3
 801836c:	2b00      	cmp	r3, #0
 801836e:	d02b      	beq.n	80183c8 <ip4_route+0x78>
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018376:	089b      	lsrs	r3, r3, #2
 8018378:	f003 0301 	and.w	r3, r3, #1
 801837c:	b2db      	uxtb	r3, r3
 801837e:	2b00      	cmp	r3, #0
 8018380:	d022      	beq.n	80183c8 <ip4_route+0x78>
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	3304      	adds	r3, #4
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d01d      	beq.n	80183c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681a      	ldr	r2, [r3, #0]
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	3304      	adds	r3, #4
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	405a      	eors	r2, r3
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	3308      	adds	r3, #8
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	4013      	ands	r3, r2
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d101      	bne.n	80183a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	e038      	b.n	801841a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183ae:	f003 0302 	and.w	r3, r3, #2
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d108      	bne.n	80183c8 <ip4_route+0x78>
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	681a      	ldr	r2, [r3, #0]
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	330c      	adds	r3, #12
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d101      	bne.n	80183c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	e028      	b.n	801841a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	60fb      	str	r3, [r7, #12]
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d1c5      	bne.n	8018360 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80183d4:	4b15      	ldr	r3, [pc, #84]	; (801842c <ip4_route+0xdc>)
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d01a      	beq.n	8018412 <ip4_route+0xc2>
 80183dc:	4b13      	ldr	r3, [pc, #76]	; (801842c <ip4_route+0xdc>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183e4:	f003 0301 	and.w	r3, r3, #1
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d012      	beq.n	8018412 <ip4_route+0xc2>
 80183ec:	4b0f      	ldr	r3, [pc, #60]	; (801842c <ip4_route+0xdc>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183f4:	f003 0304 	and.w	r3, r3, #4
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d00a      	beq.n	8018412 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80183fc:	4b0b      	ldr	r3, [pc, #44]	; (801842c <ip4_route+0xdc>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	3304      	adds	r3, #4
 8018402:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018404:	2b00      	cmp	r3, #0
 8018406:	d004      	beq.n	8018412 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	b2db      	uxtb	r3, r3
 801840e:	2b7f      	cmp	r3, #127	; 0x7f
 8018410:	d101      	bne.n	8018416 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018412:	2300      	movs	r3, #0
 8018414:	e001      	b.n	801841a <ip4_route+0xca>
  }

  return netif_default;
 8018416:	4b05      	ldr	r3, [pc, #20]	; (801842c <ip4_route+0xdc>)
 8018418:	681b      	ldr	r3, [r3, #0]
}
 801841a:	4618      	mov	r0, r3
 801841c:	3714      	adds	r7, #20
 801841e:	46bd      	mov	sp, r7
 8018420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018424:	4770      	bx	lr
 8018426:	bf00      	nop
 8018428:	2004f578 	.word	0x2004f578
 801842c:	2004f57c 	.word	0x2004f57c

08018430 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018430:	b580      	push	{r7, lr}
 8018432:	b082      	sub	sp, #8
 8018434:	af00      	add	r7, sp, #0
 8018436:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801843e:	f003 0301 	and.w	r3, r3, #1
 8018442:	b2db      	uxtb	r3, r3
 8018444:	2b00      	cmp	r3, #0
 8018446:	d016      	beq.n	8018476 <ip4_input_accept+0x46>
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	3304      	adds	r3, #4
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d011      	beq.n	8018476 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018452:	4b0b      	ldr	r3, [pc, #44]	; (8018480 <ip4_input_accept+0x50>)
 8018454:	695a      	ldr	r2, [r3, #20]
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	3304      	adds	r3, #4
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	429a      	cmp	r2, r3
 801845e:	d008      	beq.n	8018472 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018460:	4b07      	ldr	r3, [pc, #28]	; (8018480 <ip4_input_accept+0x50>)
 8018462:	695b      	ldr	r3, [r3, #20]
 8018464:	6879      	ldr	r1, [r7, #4]
 8018466:	4618      	mov	r0, r3
 8018468:	f000 fa08 	bl	801887c <ip4_addr_isbroadcast_u32>
 801846c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801846e:	2b00      	cmp	r3, #0
 8018470:	d001      	beq.n	8018476 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018472:	2301      	movs	r3, #1
 8018474:	e000      	b.n	8018478 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018476:	2300      	movs	r3, #0
}
 8018478:	4618      	mov	r0, r3
 801847a:	3708      	adds	r7, #8
 801847c:	46bd      	mov	sp, r7
 801847e:	bd80      	pop	{r7, pc}
 8018480:	2004b070 	.word	0x2004b070

08018484 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b086      	sub	sp, #24
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
 801848c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	685b      	ldr	r3, [r3, #4]
 8018492:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018494:	697b      	ldr	r3, [r7, #20]
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	091b      	lsrs	r3, r3, #4
 801849a:	b2db      	uxtb	r3, r3
 801849c:	2b04      	cmp	r3, #4
 801849e:	d004      	beq.n	80184aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f7f7 ff23 	bl	80102ec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80184a6:	2300      	movs	r3, #0
 80184a8:	e107      	b.n	80186ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80184aa:	697b      	ldr	r3, [r7, #20]
 80184ac:	781b      	ldrb	r3, [r3, #0]
 80184ae:	f003 030f 	and.w	r3, r3, #15
 80184b2:	b2db      	uxtb	r3, r3
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80184ba:	697b      	ldr	r3, [r7, #20]
 80184bc:	885b      	ldrh	r3, [r3, #2]
 80184be:	b29b      	uxth	r3, r3
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7f6 fb21 	bl	800eb08 <lwip_htons>
 80184c6:	4603      	mov	r3, r0
 80184c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	891b      	ldrh	r3, [r3, #8]
 80184ce:	89ba      	ldrh	r2, [r7, #12]
 80184d0:	429a      	cmp	r2, r3
 80184d2:	d204      	bcs.n	80184de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80184d4:	89bb      	ldrh	r3, [r7, #12]
 80184d6:	4619      	mov	r1, r3
 80184d8:	6878      	ldr	r0, [r7, #4]
 80184da:	f7f7 fd81 	bl	800ffe0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	895b      	ldrh	r3, [r3, #10]
 80184e2:	89fa      	ldrh	r2, [r7, #14]
 80184e4:	429a      	cmp	r2, r3
 80184e6:	d807      	bhi.n	80184f8 <ip4_input+0x74>
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	891b      	ldrh	r3, [r3, #8]
 80184ec:	89ba      	ldrh	r2, [r7, #12]
 80184ee:	429a      	cmp	r2, r3
 80184f0:	d802      	bhi.n	80184f8 <ip4_input+0x74>
 80184f2:	89fb      	ldrh	r3, [r7, #14]
 80184f4:	2b13      	cmp	r3, #19
 80184f6:	d804      	bhi.n	8018502 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80184f8:	6878      	ldr	r0, [r7, #4]
 80184fa:	f7f7 fef7 	bl	80102ec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80184fe:	2300      	movs	r3, #0
 8018500:	e0db      	b.n	80186ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018502:	697b      	ldr	r3, [r7, #20]
 8018504:	691b      	ldr	r3, [r3, #16]
 8018506:	4a6f      	ldr	r2, [pc, #444]	; (80186c4 <ip4_input+0x240>)
 8018508:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	68db      	ldr	r3, [r3, #12]
 801850e:	4a6d      	ldr	r2, [pc, #436]	; (80186c4 <ip4_input+0x240>)
 8018510:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018512:	4b6c      	ldr	r3, [pc, #432]	; (80186c4 <ip4_input+0x240>)
 8018514:	695b      	ldr	r3, [r3, #20]
 8018516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801851a:	2be0      	cmp	r3, #224	; 0xe0
 801851c:	d112      	bne.n	8018544 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018524:	f003 0301 	and.w	r3, r3, #1
 8018528:	b2db      	uxtb	r3, r3
 801852a:	2b00      	cmp	r3, #0
 801852c:	d007      	beq.n	801853e <ip4_input+0xba>
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	3304      	adds	r3, #4
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d002      	beq.n	801853e <ip4_input+0xba>
      netif = inp;
 8018538:	683b      	ldr	r3, [r7, #0]
 801853a:	613b      	str	r3, [r7, #16]
 801853c:	e02a      	b.n	8018594 <ip4_input+0x110>
    } else {
      netif = NULL;
 801853e:	2300      	movs	r3, #0
 8018540:	613b      	str	r3, [r7, #16]
 8018542:	e027      	b.n	8018594 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018544:	6838      	ldr	r0, [r7, #0]
 8018546:	f7ff ff73 	bl	8018430 <ip4_input_accept>
 801854a:	4603      	mov	r3, r0
 801854c:	2b00      	cmp	r3, #0
 801854e:	d002      	beq.n	8018556 <ip4_input+0xd2>
      netif = inp;
 8018550:	683b      	ldr	r3, [r7, #0]
 8018552:	613b      	str	r3, [r7, #16]
 8018554:	e01e      	b.n	8018594 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018556:	2300      	movs	r3, #0
 8018558:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801855a:	4b5a      	ldr	r3, [pc, #360]	; (80186c4 <ip4_input+0x240>)
 801855c:	695b      	ldr	r3, [r3, #20]
 801855e:	b2db      	uxtb	r3, r3
 8018560:	2b7f      	cmp	r3, #127	; 0x7f
 8018562:	d017      	beq.n	8018594 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018564:	4b58      	ldr	r3, [pc, #352]	; (80186c8 <ip4_input+0x244>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	613b      	str	r3, [r7, #16]
 801856a:	e00e      	b.n	801858a <ip4_input+0x106>
          if (netif == inp) {
 801856c:	693a      	ldr	r2, [r7, #16]
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	429a      	cmp	r2, r3
 8018572:	d006      	beq.n	8018582 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018574:	6938      	ldr	r0, [r7, #16]
 8018576:	f7ff ff5b 	bl	8018430 <ip4_input_accept>
 801857a:	4603      	mov	r3, r0
 801857c:	2b00      	cmp	r3, #0
 801857e:	d108      	bne.n	8018592 <ip4_input+0x10e>
 8018580:	e000      	b.n	8018584 <ip4_input+0x100>
            continue;
 8018582:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	681b      	ldr	r3, [r3, #0]
 8018588:	613b      	str	r3, [r7, #16]
 801858a:	693b      	ldr	r3, [r7, #16]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d1ed      	bne.n	801856c <ip4_input+0xe8>
 8018590:	e000      	b.n	8018594 <ip4_input+0x110>
            break;
 8018592:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018594:	4b4b      	ldr	r3, [pc, #300]	; (80186c4 <ip4_input+0x240>)
 8018596:	691b      	ldr	r3, [r3, #16]
 8018598:	6839      	ldr	r1, [r7, #0]
 801859a:	4618      	mov	r0, r3
 801859c:	f000 f96e 	bl	801887c <ip4_addr_isbroadcast_u32>
 80185a0:	4603      	mov	r3, r0
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d105      	bne.n	80185b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80185a6:	4b47      	ldr	r3, [pc, #284]	; (80186c4 <ip4_input+0x240>)
 80185a8:	691b      	ldr	r3, [r3, #16]
 80185aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80185ae:	2be0      	cmp	r3, #224	; 0xe0
 80185b0:	d104      	bne.n	80185bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f7f7 fe9a 	bl	80102ec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80185b8:	2300      	movs	r3, #0
 80185ba:	e07e      	b.n	80186ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d104      	bne.n	80185cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80185c2:	6878      	ldr	r0, [r7, #4]
 80185c4:	f7f7 fe92 	bl	80102ec <pbuf_free>
    return ERR_OK;
 80185c8:	2300      	movs	r3, #0
 80185ca:	e076      	b.n	80186ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80185cc:	697b      	ldr	r3, [r7, #20]
 80185ce:	88db      	ldrh	r3, [r3, #6]
 80185d0:	b29b      	uxth	r3, r3
 80185d2:	461a      	mov	r2, r3
 80185d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80185d8:	4013      	ands	r3, r2
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d00b      	beq.n	80185f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80185de:	6878      	ldr	r0, [r7, #4]
 80185e0:	f000 fc92 	bl	8018f08 <ip4_reass>
 80185e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d101      	bne.n	80185f0 <ip4_input+0x16c>
      return ERR_OK;
 80185ec:	2300      	movs	r3, #0
 80185ee:	e064      	b.n	80186ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	685b      	ldr	r3, [r3, #4]
 80185f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80185f6:	4a33      	ldr	r2, [pc, #204]	; (80186c4 <ip4_input+0x240>)
 80185f8:	693b      	ldr	r3, [r7, #16]
 80185fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80185fc:	4a31      	ldr	r2, [pc, #196]	; (80186c4 <ip4_input+0x240>)
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018602:	4a30      	ldr	r2, [pc, #192]	; (80186c4 <ip4_input+0x240>)
 8018604:	697b      	ldr	r3, [r7, #20]
 8018606:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	781b      	ldrb	r3, [r3, #0]
 801860c:	f003 030f 	and.w	r3, r3, #15
 8018610:	b2db      	uxtb	r3, r3
 8018612:	009b      	lsls	r3, r3, #2
 8018614:	b2db      	uxtb	r3, r3
 8018616:	b29a      	uxth	r2, r3
 8018618:	4b2a      	ldr	r3, [pc, #168]	; (80186c4 <ip4_input+0x240>)
 801861a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801861c:	89fb      	ldrh	r3, [r7, #14]
 801861e:	4619      	mov	r1, r3
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7f7 fddd 	bl	80101e0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018626:	697b      	ldr	r3, [r7, #20]
 8018628:	7a5b      	ldrb	r3, [r3, #9]
 801862a:	2b11      	cmp	r3, #17
 801862c:	d006      	beq.n	801863c <ip4_input+0x1b8>
 801862e:	2b11      	cmp	r3, #17
 8018630:	dc13      	bgt.n	801865a <ip4_input+0x1d6>
 8018632:	2b01      	cmp	r3, #1
 8018634:	d00c      	beq.n	8018650 <ip4_input+0x1cc>
 8018636:	2b06      	cmp	r3, #6
 8018638:	d005      	beq.n	8018646 <ip4_input+0x1c2>
 801863a:	e00e      	b.n	801865a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801863c:	6839      	ldr	r1, [r7, #0]
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	f7fe fb9c 	bl	8016d7c <udp_input>
        break;
 8018644:	e026      	b.n	8018694 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018646:	6839      	ldr	r1, [r7, #0]
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	f7f9 ff55 	bl	80124f8 <tcp_input>
        break;
 801864e:	e021      	b.n	8018694 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018650:	6839      	ldr	r1, [r7, #0]
 8018652:	6878      	ldr	r0, [r7, #4]
 8018654:	f7ff fcee 	bl	8018034 <icmp_input>
        break;
 8018658:	e01c      	b.n	8018694 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801865a:	4b1a      	ldr	r3, [pc, #104]	; (80186c4 <ip4_input+0x240>)
 801865c:	695b      	ldr	r3, [r3, #20]
 801865e:	6939      	ldr	r1, [r7, #16]
 8018660:	4618      	mov	r0, r3
 8018662:	f000 f90b 	bl	801887c <ip4_addr_isbroadcast_u32>
 8018666:	4603      	mov	r3, r0
 8018668:	2b00      	cmp	r3, #0
 801866a:	d10f      	bne.n	801868c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801866c:	4b15      	ldr	r3, [pc, #84]	; (80186c4 <ip4_input+0x240>)
 801866e:	695b      	ldr	r3, [r3, #20]
 8018670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018674:	2be0      	cmp	r3, #224	; 0xe0
 8018676:	d009      	beq.n	801868c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018678:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801867c:	4619      	mov	r1, r3
 801867e:	6878      	ldr	r0, [r7, #4]
 8018680:	f7f7 fe21 	bl	80102c6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018684:	2102      	movs	r1, #2
 8018686:	6878      	ldr	r0, [r7, #4]
 8018688:	f7ff fdd8 	bl	801823c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f7f7 fe2d 	bl	80102ec <pbuf_free>
        break;
 8018692:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018694:	4b0b      	ldr	r3, [pc, #44]	; (80186c4 <ip4_input+0x240>)
 8018696:	2200      	movs	r2, #0
 8018698:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801869a:	4b0a      	ldr	r3, [pc, #40]	; (80186c4 <ip4_input+0x240>)
 801869c:	2200      	movs	r2, #0
 801869e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80186a0:	4b08      	ldr	r3, [pc, #32]	; (80186c4 <ip4_input+0x240>)
 80186a2:	2200      	movs	r2, #0
 80186a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80186a6:	4b07      	ldr	r3, [pc, #28]	; (80186c4 <ip4_input+0x240>)
 80186a8:	2200      	movs	r2, #0
 80186aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80186ac:	4b05      	ldr	r3, [pc, #20]	; (80186c4 <ip4_input+0x240>)
 80186ae:	2200      	movs	r2, #0
 80186b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80186b2:	4b04      	ldr	r3, [pc, #16]	; (80186c4 <ip4_input+0x240>)
 80186b4:	2200      	movs	r2, #0
 80186b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80186b8:	2300      	movs	r3, #0
}
 80186ba:	4618      	mov	r0, r3
 80186bc:	3718      	adds	r7, #24
 80186be:	46bd      	mov	sp, r7
 80186c0:	bd80      	pop	{r7, pc}
 80186c2:	bf00      	nop
 80186c4:	2004b070 	.word	0x2004b070
 80186c8:	2004f578 	.word	0x2004f578

080186cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b08a      	sub	sp, #40	; 0x28
 80186d0:	af04      	add	r7, sp, #16
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	607a      	str	r2, [r7, #4]
 80186d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80186da:	68bb      	ldr	r3, [r7, #8]
 80186dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d009      	beq.n	80186f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d003      	beq.n	80186f2 <ip4_output_if+0x26>
 80186ea:	68bb      	ldr	r3, [r7, #8]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d102      	bne.n	80186f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80186f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186f4:	3304      	adds	r3, #4
 80186f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80186f8:	78fa      	ldrb	r2, [r7, #3]
 80186fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186fc:	9302      	str	r3, [sp, #8]
 80186fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018702:	9301      	str	r3, [sp, #4]
 8018704:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018708:	9300      	str	r3, [sp, #0]
 801870a:	4613      	mov	r3, r2
 801870c:	687a      	ldr	r2, [r7, #4]
 801870e:	6979      	ldr	r1, [r7, #20]
 8018710:	68f8      	ldr	r0, [r7, #12]
 8018712:	f000 f805 	bl	8018720 <ip4_output_if_src>
 8018716:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018718:	4618      	mov	r0, r3
 801871a:	3718      	adds	r7, #24
 801871c:	46bd      	mov	sp, r7
 801871e:	bd80      	pop	{r7, pc}

08018720 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018720:	b580      	push	{r7, lr}
 8018722:	b088      	sub	sp, #32
 8018724:	af00      	add	r7, sp, #0
 8018726:	60f8      	str	r0, [r7, #12]
 8018728:	60b9      	str	r1, [r7, #8]
 801872a:	607a      	str	r2, [r7, #4]
 801872c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	7b9b      	ldrb	r3, [r3, #14]
 8018732:	2b01      	cmp	r3, #1
 8018734:	d006      	beq.n	8018744 <ip4_output_if_src+0x24>
 8018736:	4b4b      	ldr	r3, [pc, #300]	; (8018864 <ip4_output_if_src+0x144>)
 8018738:	f44f 7255 	mov.w	r2, #852	; 0x354
 801873c:	494a      	ldr	r1, [pc, #296]	; (8018868 <ip4_output_if_src+0x148>)
 801873e:	484b      	ldr	r0, [pc, #300]	; (801886c <ip4_output_if_src+0x14c>)
 8018740:	f001 fb80 	bl	8019e44 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	2b00      	cmp	r3, #0
 8018748:	d060      	beq.n	801880c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801874a:	2314      	movs	r3, #20
 801874c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801874e:	2114      	movs	r1, #20
 8018750:	68f8      	ldr	r0, [r7, #12]
 8018752:	f7f7 fd35 	bl	80101c0 <pbuf_add_header>
 8018756:	4603      	mov	r3, r0
 8018758:	2b00      	cmp	r3, #0
 801875a:	d002      	beq.n	8018762 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801875c:	f06f 0301 	mvn.w	r3, #1
 8018760:	e07c      	b.n	801885c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	895b      	ldrh	r3, [r3, #10]
 801876c:	2b13      	cmp	r3, #19
 801876e:	d806      	bhi.n	801877e <ip4_output_if_src+0x5e>
 8018770:	4b3c      	ldr	r3, [pc, #240]	; (8018864 <ip4_output_if_src+0x144>)
 8018772:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018776:	493e      	ldr	r1, [pc, #248]	; (8018870 <ip4_output_if_src+0x150>)
 8018778:	483c      	ldr	r0, [pc, #240]	; (801886c <ip4_output_if_src+0x14c>)
 801877a:	f001 fb63 	bl	8019e44 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801877e:	69fb      	ldr	r3, [r7, #28]
 8018780:	78fa      	ldrb	r2, [r7, #3]
 8018782:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018784:	69fb      	ldr	r3, [r7, #28]
 8018786:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801878a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	681a      	ldr	r2, [r3, #0]
 8018790:	69fb      	ldr	r3, [r7, #28]
 8018792:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018794:	8b7b      	ldrh	r3, [r7, #26]
 8018796:	089b      	lsrs	r3, r3, #2
 8018798:	b29b      	uxth	r3, r3
 801879a:	b2db      	uxtb	r3, r3
 801879c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187a0:	b2da      	uxtb	r2, r3
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80187a6:	69fb      	ldr	r3, [r7, #28]
 80187a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80187ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	891b      	ldrh	r3, [r3, #8]
 80187b2:	4618      	mov	r0, r3
 80187b4:	f7f6 f9a8 	bl	800eb08 <lwip_htons>
 80187b8:	4603      	mov	r3, r0
 80187ba:	461a      	mov	r2, r3
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80187c0:	69fb      	ldr	r3, [r7, #28]
 80187c2:	2200      	movs	r2, #0
 80187c4:	719a      	strb	r2, [r3, #6]
 80187c6:	2200      	movs	r2, #0
 80187c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80187ca:	4b2a      	ldr	r3, [pc, #168]	; (8018874 <ip4_output_if_src+0x154>)
 80187cc:	881b      	ldrh	r3, [r3, #0]
 80187ce:	4618      	mov	r0, r3
 80187d0:	f7f6 f99a 	bl	800eb08 <lwip_htons>
 80187d4:	4603      	mov	r3, r0
 80187d6:	461a      	mov	r2, r3
 80187d8:	69fb      	ldr	r3, [r7, #28]
 80187da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80187dc:	4b25      	ldr	r3, [pc, #148]	; (8018874 <ip4_output_if_src+0x154>)
 80187de:	881b      	ldrh	r3, [r3, #0]
 80187e0:	3301      	adds	r3, #1
 80187e2:	b29a      	uxth	r2, r3
 80187e4:	4b23      	ldr	r3, [pc, #140]	; (8018874 <ip4_output_if_src+0x154>)
 80187e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80187e8:	68bb      	ldr	r3, [r7, #8]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d104      	bne.n	80187f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80187ee:	4b22      	ldr	r3, [pc, #136]	; (8018878 <ip4_output_if_src+0x158>)
 80187f0:	681a      	ldr	r2, [r3, #0]
 80187f2:	69fb      	ldr	r3, [r7, #28]
 80187f4:	60da      	str	r2, [r3, #12]
 80187f6:	e003      	b.n	8018800 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	681a      	ldr	r2, [r3, #0]
 80187fc:	69fb      	ldr	r3, [r7, #28]
 80187fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	2200      	movs	r2, #0
 8018804:	729a      	strb	r2, [r3, #10]
 8018806:	2200      	movs	r2, #0
 8018808:	72da      	strb	r2, [r3, #11]
 801880a:	e00f      	b.n	801882c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	895b      	ldrh	r3, [r3, #10]
 8018810:	2b13      	cmp	r3, #19
 8018812:	d802      	bhi.n	801881a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018814:	f06f 0301 	mvn.w	r3, #1
 8018818:	e020      	b.n	801885c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	685b      	ldr	r3, [r3, #4]
 801881e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018820:	69fb      	ldr	r3, [r7, #28]
 8018822:	691b      	ldr	r3, [r3, #16]
 8018824:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018826:	f107 0314 	add.w	r3, r7, #20
 801882a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801882c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801882e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018830:	2b00      	cmp	r3, #0
 8018832:	d00c      	beq.n	801884e <ip4_output_if_src+0x12e>
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	891a      	ldrh	r2, [r3, #8]
 8018838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801883a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801883c:	429a      	cmp	r2, r3
 801883e:	d906      	bls.n	801884e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018844:	68f8      	ldr	r0, [r7, #12]
 8018846:	f000 fd53 	bl	80192f0 <ip4_frag>
 801884a:	4603      	mov	r3, r0
 801884c:	e006      	b.n	801885c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801884e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018850:	695b      	ldr	r3, [r3, #20]
 8018852:	687a      	ldr	r2, [r7, #4]
 8018854:	68f9      	ldr	r1, [r7, #12]
 8018856:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018858:	4798      	blx	r3
 801885a:	4603      	mov	r3, r0
}
 801885c:	4618      	mov	r0, r3
 801885e:	3720      	adds	r7, #32
 8018860:	46bd      	mov	sp, r7
 8018862:	bd80      	pop	{r7, pc}
 8018864:	0801ded8 	.word	0x0801ded8
 8018868:	0801df0c 	.word	0x0801df0c
 801886c:	0801df18 	.word	0x0801df18
 8018870:	0801df40 	.word	0x0801df40
 8018874:	2004f6d6 	.word	0x2004f6d6
 8018878:	0801e380 	.word	0x0801e380

0801887c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801887c:	b480      	push	{r7}
 801887e:	b085      	sub	sp, #20
 8018880:	af00      	add	r7, sp, #0
 8018882:	6078      	str	r0, [r7, #4]
 8018884:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018890:	d002      	beq.n	8018898 <ip4_addr_isbroadcast_u32+0x1c>
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d101      	bne.n	801889c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018898:	2301      	movs	r3, #1
 801889a:	e02a      	b.n	80188f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188a2:	f003 0302 	and.w	r3, r3, #2
 80188a6:	2b00      	cmp	r3, #0
 80188a8:	d101      	bne.n	80188ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80188aa:	2300      	movs	r3, #0
 80188ac:	e021      	b.n	80188f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80188ae:	683b      	ldr	r3, [r7, #0]
 80188b0:	3304      	adds	r3, #4
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	687a      	ldr	r2, [r7, #4]
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d101      	bne.n	80188be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80188ba:	2300      	movs	r3, #0
 80188bc:	e019      	b.n	80188f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80188be:	68fa      	ldr	r2, [r7, #12]
 80188c0:	683b      	ldr	r3, [r7, #0]
 80188c2:	3304      	adds	r3, #4
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	405a      	eors	r2, r3
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	3308      	adds	r3, #8
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	4013      	ands	r3, r2
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d10d      	bne.n	80188f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80188d4:	683b      	ldr	r3, [r7, #0]
 80188d6:	3308      	adds	r3, #8
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	43da      	mvns	r2, r3
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80188e0:	683b      	ldr	r3, [r7, #0]
 80188e2:	3308      	adds	r3, #8
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80188e8:	429a      	cmp	r2, r3
 80188ea:	d101      	bne.n	80188f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80188ec:	2301      	movs	r3, #1
 80188ee:	e000      	b.n	80188f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80188f0:	2300      	movs	r3, #0
  }
}
 80188f2:	4618      	mov	r0, r3
 80188f4:	3714      	adds	r7, #20
 80188f6:	46bd      	mov	sp, r7
 80188f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188fc:	4770      	bx	lr
	...

08018900 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b084      	sub	sp, #16
 8018904:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018906:	2300      	movs	r3, #0
 8018908:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801890a:	4b12      	ldr	r3, [pc, #72]	; (8018954 <ip_reass_tmr+0x54>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018910:	e018      	b.n	8018944 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	7fdb      	ldrb	r3, [r3, #31]
 8018916:	2b00      	cmp	r3, #0
 8018918:	d00b      	beq.n	8018932 <ip_reass_tmr+0x32>
      r->timer--;
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	7fdb      	ldrb	r3, [r3, #31]
 801891e:	3b01      	subs	r3, #1
 8018920:	b2da      	uxtb	r2, r3
 8018922:	68fb      	ldr	r3, [r7, #12]
 8018924:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	60fb      	str	r3, [r7, #12]
 8018930:	e008      	b.n	8018944 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801893c:	68b9      	ldr	r1, [r7, #8]
 801893e:	6878      	ldr	r0, [r7, #4]
 8018940:	f000 f80a 	bl	8018958 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d1e3      	bne.n	8018912 <ip_reass_tmr+0x12>
    }
  }
}
 801894a:	bf00      	nop
 801894c:	bf00      	nop
 801894e:	3710      	adds	r7, #16
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	2004f6d8 	.word	0x2004f6d8

08018958 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b088      	sub	sp, #32
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
 8018960:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018962:	2300      	movs	r3, #0
 8018964:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018966:	683a      	ldr	r2, [r7, #0]
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	429a      	cmp	r2, r3
 801896c:	d105      	bne.n	801897a <ip_reass_free_complete_datagram+0x22>
 801896e:	4b45      	ldr	r3, [pc, #276]	; (8018a84 <ip_reass_free_complete_datagram+0x12c>)
 8018970:	22ab      	movs	r2, #171	; 0xab
 8018972:	4945      	ldr	r1, [pc, #276]	; (8018a88 <ip_reass_free_complete_datagram+0x130>)
 8018974:	4845      	ldr	r0, [pc, #276]	; (8018a8c <ip_reass_free_complete_datagram+0x134>)
 8018976:	f001 fa65 	bl	8019e44 <iprintf>
  if (prev != NULL) {
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d00a      	beq.n	8018996 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018980:	683b      	ldr	r3, [r7, #0]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	687a      	ldr	r2, [r7, #4]
 8018986:	429a      	cmp	r2, r3
 8018988:	d005      	beq.n	8018996 <ip_reass_free_complete_datagram+0x3e>
 801898a:	4b3e      	ldr	r3, [pc, #248]	; (8018a84 <ip_reass_free_complete_datagram+0x12c>)
 801898c:	22ad      	movs	r2, #173	; 0xad
 801898e:	4940      	ldr	r1, [pc, #256]	; (8018a90 <ip_reass_free_complete_datagram+0x138>)
 8018990:	483e      	ldr	r0, [pc, #248]	; (8018a8c <ip_reass_free_complete_datagram+0x134>)
 8018992:	f001 fa57 	bl	8019e44 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	889b      	ldrh	r3, [r3, #4]
 80189a2:	b29b      	uxth	r3, r3
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d12a      	bne.n	80189fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	685b      	ldr	r3, [r3, #4]
 80189ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	681a      	ldr	r2, [r3, #0]
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80189b6:	69bb      	ldr	r3, [r7, #24]
 80189b8:	6858      	ldr	r0, [r3, #4]
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	3308      	adds	r3, #8
 80189be:	2214      	movs	r2, #20
 80189c0:	4619      	mov	r1, r3
 80189c2:	f001 f994 	bl	8019cee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80189c6:	2101      	movs	r1, #1
 80189c8:	69b8      	ldr	r0, [r7, #24]
 80189ca:	f7ff fc47 	bl	801825c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80189ce:	69b8      	ldr	r0, [r7, #24]
 80189d0:	f7f7 fd1a 	bl	8010408 <pbuf_clen>
 80189d4:	4603      	mov	r3, r0
 80189d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80189d8:	8bfa      	ldrh	r2, [r7, #30]
 80189da:	8a7b      	ldrh	r3, [r7, #18]
 80189dc:	4413      	add	r3, r2
 80189de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189e2:	db05      	blt.n	80189f0 <ip_reass_free_complete_datagram+0x98>
 80189e4:	4b27      	ldr	r3, [pc, #156]	; (8018a84 <ip_reass_free_complete_datagram+0x12c>)
 80189e6:	22bc      	movs	r2, #188	; 0xbc
 80189e8:	492a      	ldr	r1, [pc, #168]	; (8018a94 <ip_reass_free_complete_datagram+0x13c>)
 80189ea:	4828      	ldr	r0, [pc, #160]	; (8018a8c <ip_reass_free_complete_datagram+0x134>)
 80189ec:	f001 fa2a 	bl	8019e44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80189f0:	8bfa      	ldrh	r2, [r7, #30]
 80189f2:	8a7b      	ldrh	r3, [r7, #18]
 80189f4:	4413      	add	r3, r2
 80189f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80189f8:	69b8      	ldr	r0, [r7, #24]
 80189fa:	f7f7 fc77 	bl	80102ec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018a04:	e01f      	b.n	8018a46 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018a06:	69bb      	ldr	r3, [r7, #24]
 8018a08:	685b      	ldr	r3, [r3, #4]
 8018a0a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018a0c:	69bb      	ldr	r3, [r7, #24]
 8018a0e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018a16:	68f8      	ldr	r0, [r7, #12]
 8018a18:	f7f7 fcf6 	bl	8010408 <pbuf_clen>
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018a20:	8bfa      	ldrh	r2, [r7, #30]
 8018a22:	8a7b      	ldrh	r3, [r7, #18]
 8018a24:	4413      	add	r3, r2
 8018a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018a2a:	db05      	blt.n	8018a38 <ip_reass_free_complete_datagram+0xe0>
 8018a2c:	4b15      	ldr	r3, [pc, #84]	; (8018a84 <ip_reass_free_complete_datagram+0x12c>)
 8018a2e:	22cc      	movs	r2, #204	; 0xcc
 8018a30:	4918      	ldr	r1, [pc, #96]	; (8018a94 <ip_reass_free_complete_datagram+0x13c>)
 8018a32:	4816      	ldr	r0, [pc, #88]	; (8018a8c <ip_reass_free_complete_datagram+0x134>)
 8018a34:	f001 fa06 	bl	8019e44 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018a38:	8bfa      	ldrh	r2, [r7, #30]
 8018a3a:	8a7b      	ldrh	r3, [r7, #18]
 8018a3c:	4413      	add	r3, r2
 8018a3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018a40:	68f8      	ldr	r0, [r7, #12]
 8018a42:	f7f7 fc53 	bl	80102ec <pbuf_free>
  while (p != NULL) {
 8018a46:	69bb      	ldr	r3, [r7, #24]
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	d1dc      	bne.n	8018a06 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018a4c:	6839      	ldr	r1, [r7, #0]
 8018a4e:	6878      	ldr	r0, [r7, #4]
 8018a50:	f000 f8c2 	bl	8018bd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018a54:	4b10      	ldr	r3, [pc, #64]	; (8018a98 <ip_reass_free_complete_datagram+0x140>)
 8018a56:	881b      	ldrh	r3, [r3, #0]
 8018a58:	8bfa      	ldrh	r2, [r7, #30]
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d905      	bls.n	8018a6a <ip_reass_free_complete_datagram+0x112>
 8018a5e:	4b09      	ldr	r3, [pc, #36]	; (8018a84 <ip_reass_free_complete_datagram+0x12c>)
 8018a60:	22d2      	movs	r2, #210	; 0xd2
 8018a62:	490e      	ldr	r1, [pc, #56]	; (8018a9c <ip_reass_free_complete_datagram+0x144>)
 8018a64:	4809      	ldr	r0, [pc, #36]	; (8018a8c <ip_reass_free_complete_datagram+0x134>)
 8018a66:	f001 f9ed 	bl	8019e44 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018a6a:	4b0b      	ldr	r3, [pc, #44]	; (8018a98 <ip_reass_free_complete_datagram+0x140>)
 8018a6c:	881a      	ldrh	r2, [r3, #0]
 8018a6e:	8bfb      	ldrh	r3, [r7, #30]
 8018a70:	1ad3      	subs	r3, r2, r3
 8018a72:	b29a      	uxth	r2, r3
 8018a74:	4b08      	ldr	r3, [pc, #32]	; (8018a98 <ip_reass_free_complete_datagram+0x140>)
 8018a76:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018a78:	8bfb      	ldrh	r3, [r7, #30]
}
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	3720      	adds	r7, #32
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	bd80      	pop	{r7, pc}
 8018a82:	bf00      	nop
 8018a84:	0801df70 	.word	0x0801df70
 8018a88:	0801dfac 	.word	0x0801dfac
 8018a8c:	0801dfb8 	.word	0x0801dfb8
 8018a90:	0801dfe0 	.word	0x0801dfe0
 8018a94:	0801dff4 	.word	0x0801dff4
 8018a98:	2004f6dc 	.word	0x2004f6dc
 8018a9c:	0801e014 	.word	0x0801e014

08018aa0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b08a      	sub	sp, #40	; 0x28
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
 8018aa8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018aaa:	2300      	movs	r3, #0
 8018aac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018aae:	2300      	movs	r3, #0
 8018ab0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018aba:	2300      	movs	r3, #0
 8018abc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018abe:	4b28      	ldr	r3, [pc, #160]	; (8018b60 <ip_reass_remove_oldest_datagram+0xc0>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ac4:	e030      	b.n	8018b28 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ac8:	695a      	ldr	r2, [r3, #20]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	68db      	ldr	r3, [r3, #12]
 8018ace:	429a      	cmp	r2, r3
 8018ad0:	d10c      	bne.n	8018aec <ip_reass_remove_oldest_datagram+0x4c>
 8018ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ad4:	699a      	ldr	r2, [r3, #24]
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	691b      	ldr	r3, [r3, #16]
 8018ada:	429a      	cmp	r2, r3
 8018adc:	d106      	bne.n	8018aec <ip_reass_remove_oldest_datagram+0x4c>
 8018ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ae0:	899a      	ldrh	r2, [r3, #12]
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	889b      	ldrh	r3, [r3, #4]
 8018ae6:	b29b      	uxth	r3, r3
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	d014      	beq.n	8018b16 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018aec:	693b      	ldr	r3, [r7, #16]
 8018aee:	3301      	adds	r3, #1
 8018af0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018af2:	6a3b      	ldr	r3, [r7, #32]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d104      	bne.n	8018b02 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018afa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018afc:	69fb      	ldr	r3, [r7, #28]
 8018afe:	61bb      	str	r3, [r7, #24]
 8018b00:	e009      	b.n	8018b16 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b04:	7fda      	ldrb	r2, [r3, #31]
 8018b06:	6a3b      	ldr	r3, [r7, #32]
 8018b08:	7fdb      	ldrb	r3, [r3, #31]
 8018b0a:	429a      	cmp	r2, r3
 8018b0c:	d803      	bhi.n	8018b16 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b10:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018b12:	69fb      	ldr	r3, [r7, #28]
 8018b14:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d001      	beq.n	8018b22 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b20:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d1cb      	bne.n	8018ac6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018b2e:	6a3b      	ldr	r3, [r7, #32]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d008      	beq.n	8018b46 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018b34:	69b9      	ldr	r1, [r7, #24]
 8018b36:	6a38      	ldr	r0, [r7, #32]
 8018b38:	f7ff ff0e 	bl	8018958 <ip_reass_free_complete_datagram>
 8018b3c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018b3e:	697a      	ldr	r2, [r7, #20]
 8018b40:	68fb      	ldr	r3, [r7, #12]
 8018b42:	4413      	add	r3, r2
 8018b44:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018b46:	697a      	ldr	r2, [r7, #20]
 8018b48:	683b      	ldr	r3, [r7, #0]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	da02      	bge.n	8018b54 <ip_reass_remove_oldest_datagram+0xb4>
 8018b4e:	693b      	ldr	r3, [r7, #16]
 8018b50:	2b01      	cmp	r3, #1
 8018b52:	dcac      	bgt.n	8018aae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018b54:	697b      	ldr	r3, [r7, #20]
}
 8018b56:	4618      	mov	r0, r3
 8018b58:	3728      	adds	r7, #40	; 0x28
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	bd80      	pop	{r7, pc}
 8018b5e:	bf00      	nop
 8018b60:	2004f6d8 	.word	0x2004f6d8

08018b64 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b084      	sub	sp, #16
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
 8018b6c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018b6e:	2004      	movs	r0, #4
 8018b70:	f7f6 fca2 	bl	800f4b8 <memp_malloc>
 8018b74:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d110      	bne.n	8018b9e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018b7c:	6839      	ldr	r1, [r7, #0]
 8018b7e:	6878      	ldr	r0, [r7, #4]
 8018b80:	f7ff ff8e 	bl	8018aa0 <ip_reass_remove_oldest_datagram>
 8018b84:	4602      	mov	r2, r0
 8018b86:	683b      	ldr	r3, [r7, #0]
 8018b88:	4293      	cmp	r3, r2
 8018b8a:	dc03      	bgt.n	8018b94 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018b8c:	2004      	movs	r0, #4
 8018b8e:	f7f6 fc93 	bl	800f4b8 <memp_malloc>
 8018b92:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d101      	bne.n	8018b9e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	e016      	b.n	8018bcc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018b9e:	2220      	movs	r2, #32
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	68f8      	ldr	r0, [r7, #12]
 8018ba4:	f001 f8b1 	bl	8019d0a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	220f      	movs	r2, #15
 8018bac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018bae:	4b09      	ldr	r3, [pc, #36]	; (8018bd4 <ip_reass_enqueue_new_datagram+0x70>)
 8018bb0:	681a      	ldr	r2, [r3, #0]
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018bb6:	4a07      	ldr	r2, [pc, #28]	; (8018bd4 <ip_reass_enqueue_new_datagram+0x70>)
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	3308      	adds	r3, #8
 8018bc0:	2214      	movs	r2, #20
 8018bc2:	6879      	ldr	r1, [r7, #4]
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	f001 f892 	bl	8019cee <memcpy>
  return ipr;
 8018bca:	68fb      	ldr	r3, [r7, #12]
}
 8018bcc:	4618      	mov	r0, r3
 8018bce:	3710      	adds	r7, #16
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd80      	pop	{r7, pc}
 8018bd4:	2004f6d8 	.word	0x2004f6d8

08018bd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b082      	sub	sp, #8
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018be2:	4b10      	ldr	r3, [pc, #64]	; (8018c24 <ip_reass_dequeue_datagram+0x4c>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	429a      	cmp	r2, r3
 8018bea:	d104      	bne.n	8018bf6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	4a0c      	ldr	r2, [pc, #48]	; (8018c24 <ip_reass_dequeue_datagram+0x4c>)
 8018bf2:	6013      	str	r3, [r2, #0]
 8018bf4:	e00d      	b.n	8018c12 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018bf6:	683b      	ldr	r3, [r7, #0]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d106      	bne.n	8018c0a <ip_reass_dequeue_datagram+0x32>
 8018bfc:	4b0a      	ldr	r3, [pc, #40]	; (8018c28 <ip_reass_dequeue_datagram+0x50>)
 8018bfe:	f240 1245 	movw	r2, #325	; 0x145
 8018c02:	490a      	ldr	r1, [pc, #40]	; (8018c2c <ip_reass_dequeue_datagram+0x54>)
 8018c04:	480a      	ldr	r0, [pc, #40]	; (8018c30 <ip_reass_dequeue_datagram+0x58>)
 8018c06:	f001 f91d 	bl	8019e44 <iprintf>
    prev->next = ipr->next;
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	681a      	ldr	r2, [r3, #0]
 8018c0e:	683b      	ldr	r3, [r7, #0]
 8018c10:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018c12:	6879      	ldr	r1, [r7, #4]
 8018c14:	2004      	movs	r0, #4
 8018c16:	f7f6 fcc5 	bl	800f5a4 <memp_free>
}
 8018c1a:	bf00      	nop
 8018c1c:	3708      	adds	r7, #8
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}
 8018c22:	bf00      	nop
 8018c24:	2004f6d8 	.word	0x2004f6d8
 8018c28:	0801df70 	.word	0x0801df70
 8018c2c:	0801e038 	.word	0x0801e038
 8018c30:	0801dfb8 	.word	0x0801dfb8

08018c34 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b08c      	sub	sp, #48	; 0x30
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	60f8      	str	r0, [r7, #12]
 8018c3c:	60b9      	str	r1, [r7, #8]
 8018c3e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018c40:	2300      	movs	r3, #0
 8018c42:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018c44:	2301      	movs	r3, #1
 8018c46:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	685b      	ldr	r3, [r3, #4]
 8018c4c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018c4e:	69fb      	ldr	r3, [r7, #28]
 8018c50:	885b      	ldrh	r3, [r3, #2]
 8018c52:	b29b      	uxth	r3, r3
 8018c54:	4618      	mov	r0, r3
 8018c56:	f7f5 ff57 	bl	800eb08 <lwip_htons>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018c5e:	69fb      	ldr	r3, [r7, #28]
 8018c60:	781b      	ldrb	r3, [r3, #0]
 8018c62:	f003 030f 	and.w	r3, r3, #15
 8018c66:	b2db      	uxtb	r3, r3
 8018c68:	009b      	lsls	r3, r3, #2
 8018c6a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018c6c:	7e7b      	ldrb	r3, [r7, #25]
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	8b7a      	ldrh	r2, [r7, #26]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d202      	bcs.n	8018c7c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c7a:	e135      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018c7c:	7e7b      	ldrb	r3, [r7, #25]
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	8b7a      	ldrh	r2, [r7, #26]
 8018c82:	1ad3      	subs	r3, r2, r3
 8018c84:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018c86:	69fb      	ldr	r3, [r7, #28]
 8018c88:	88db      	ldrh	r3, [r3, #6]
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7f5 ff3b 	bl	800eb08 <lwip_htons>
 8018c92:	4603      	mov	r3, r0
 8018c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c98:	b29b      	uxth	r3, r3
 8018c9a:	00db      	lsls	r3, r3, #3
 8018c9c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018c9e:	68bb      	ldr	r3, [r7, #8]
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	701a      	strb	r2, [r3, #0]
 8018caa:	2200      	movs	r2, #0
 8018cac:	705a      	strb	r2, [r3, #1]
 8018cae:	2200      	movs	r2, #0
 8018cb0:	709a      	strb	r2, [r3, #2]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb8:	8afa      	ldrh	r2, [r7, #22]
 8018cba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018cbc:	8afa      	ldrh	r2, [r7, #22]
 8018cbe:	8b7b      	ldrh	r3, [r7, #26]
 8018cc0:	4413      	add	r3, r2
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cc6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cca:	88db      	ldrh	r3, [r3, #6]
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	8afa      	ldrh	r2, [r7, #22]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d902      	bls.n	8018cda <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018cd8:	e106      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	627b      	str	r3, [r7, #36]	; 0x24
 8018ce0:	e068      	b.n	8018db4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ce4:	685b      	ldr	r3, [r3, #4]
 8018ce6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cea:	889b      	ldrh	r3, [r3, #4]
 8018cec:	b29a      	uxth	r2, r3
 8018cee:	693b      	ldr	r3, [r7, #16]
 8018cf0:	889b      	ldrh	r3, [r3, #4]
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	429a      	cmp	r2, r3
 8018cf6:	d235      	bcs.n	8018d64 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cfc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d020      	beq.n	8018d46 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d06:	889b      	ldrh	r3, [r3, #4]
 8018d08:	b29a      	uxth	r2, r3
 8018d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d0c:	88db      	ldrh	r3, [r3, #6]
 8018d0e:	b29b      	uxth	r3, r3
 8018d10:	429a      	cmp	r2, r3
 8018d12:	d307      	bcc.n	8018d24 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d16:	88db      	ldrh	r3, [r3, #6]
 8018d18:	b29a      	uxth	r2, r3
 8018d1a:	693b      	ldr	r3, [r7, #16]
 8018d1c:	889b      	ldrh	r3, [r3, #4]
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	429a      	cmp	r2, r3
 8018d22:	d902      	bls.n	8018d2a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d28:	e0de      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2c:	68ba      	ldr	r2, [r7, #8]
 8018d2e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d32:	88db      	ldrh	r3, [r3, #6]
 8018d34:	b29a      	uxth	r2, r3
 8018d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d38:	889b      	ldrh	r3, [r3, #4]
 8018d3a:	b29b      	uxth	r3, r3
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d03d      	beq.n	8018dbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018d40:	2300      	movs	r3, #0
 8018d42:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018d44:	e03a      	b.n	8018dbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d48:	88db      	ldrh	r3, [r3, #6]
 8018d4a:	b29a      	uxth	r2, r3
 8018d4c:	693b      	ldr	r3, [r7, #16]
 8018d4e:	889b      	ldrh	r3, [r3, #4]
 8018d50:	b29b      	uxth	r3, r3
 8018d52:	429a      	cmp	r2, r3
 8018d54:	d902      	bls.n	8018d5c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d5a:	e0c5      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018d5c:	68fb      	ldr	r3, [r7, #12]
 8018d5e:	68ba      	ldr	r2, [r7, #8]
 8018d60:	605a      	str	r2, [r3, #4]
      break;
 8018d62:	e02b      	b.n	8018dbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d66:	889b      	ldrh	r3, [r3, #4]
 8018d68:	b29a      	uxth	r2, r3
 8018d6a:	693b      	ldr	r3, [r7, #16]
 8018d6c:	889b      	ldrh	r3, [r3, #4]
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d102      	bne.n	8018d7a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d78:	e0b6      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d7c:	889b      	ldrh	r3, [r3, #4]
 8018d7e:	b29a      	uxth	r2, r3
 8018d80:	693b      	ldr	r3, [r7, #16]
 8018d82:	88db      	ldrh	r3, [r3, #6]
 8018d84:	b29b      	uxth	r3, r3
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d202      	bcs.n	8018d90 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d8e:	e0ab      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d009      	beq.n	8018daa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d98:	88db      	ldrh	r3, [r3, #6]
 8018d9a:	b29a      	uxth	r2, r3
 8018d9c:	693b      	ldr	r3, [r7, #16]
 8018d9e:	889b      	ldrh	r3, [r3, #4]
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d001      	beq.n	8018daa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018da6:	2300      	movs	r3, #0
 8018da8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018daa:	693b      	ldr	r3, [r7, #16]
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018db0:	693b      	ldr	r3, [r7, #16]
 8018db2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d193      	bne.n	8018ce2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018dba:	e000      	b.n	8018dbe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018dbc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d12d      	bne.n	8018e20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d01c      	beq.n	8018e04 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dcc:	88db      	ldrh	r3, [r3, #6]
 8018dce:	b29a      	uxth	r2, r3
 8018dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dd2:	889b      	ldrh	r3, [r3, #4]
 8018dd4:	b29b      	uxth	r3, r3
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d906      	bls.n	8018de8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018dda:	4b45      	ldr	r3, [pc, #276]	; (8018ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ddc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018de0:	4944      	ldr	r1, [pc, #272]	; (8018ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018de2:	4845      	ldr	r0, [pc, #276]	; (8018ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018de4:	f001 f82e 	bl	8019e44 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dea:	68ba      	ldr	r2, [r7, #8]
 8018dec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df0:	88db      	ldrh	r3, [r3, #6]
 8018df2:	b29a      	uxth	r2, r3
 8018df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018df6:	889b      	ldrh	r3, [r3, #4]
 8018df8:	b29b      	uxth	r3, r3
 8018dfa:	429a      	cmp	r2, r3
 8018dfc:	d010      	beq.n	8018e20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	623b      	str	r3, [r7, #32]
 8018e02:	e00d      	b.n	8018e20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	685b      	ldr	r3, [r3, #4]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d006      	beq.n	8018e1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018e0c:	4b38      	ldr	r3, [pc, #224]	; (8018ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018e0e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018e12:	493a      	ldr	r1, [pc, #232]	; (8018efc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018e14:	4838      	ldr	r0, [pc, #224]	; (8018ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018e16:	f001 f815 	bl	8019e44 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	68ba      	ldr	r2, [r7, #8]
 8018e1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d105      	bne.n	8018e32 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	7f9b      	ldrb	r3, [r3, #30]
 8018e2a:	f003 0301 	and.w	r3, r3, #1
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d059      	beq.n	8018ee6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018e32:	6a3b      	ldr	r3, [r7, #32]
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d04f      	beq.n	8018ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	685b      	ldr	r3, [r3, #4]
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d006      	beq.n	8018e4e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	685b      	ldr	r3, [r3, #4]
 8018e44:	685b      	ldr	r3, [r3, #4]
 8018e46:	889b      	ldrh	r3, [r3, #4]
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d002      	beq.n	8018e54 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018e4e:	2300      	movs	r3, #0
 8018e50:	623b      	str	r3, [r7, #32]
 8018e52:	e041      	b.n	8018ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e56:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018e5e:	e012      	b.n	8018e86 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e62:	685b      	ldr	r3, [r3, #4]
 8018e64:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e68:	88db      	ldrh	r3, [r3, #6]
 8018e6a:	b29a      	uxth	r2, r3
 8018e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e6e:	889b      	ldrh	r3, [r3, #4]
 8018e70:	b29b      	uxth	r3, r3
 8018e72:	429a      	cmp	r2, r3
 8018e74:	d002      	beq.n	8018e7c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018e76:	2300      	movs	r3, #0
 8018e78:	623b      	str	r3, [r7, #32]
            break;
 8018e7a:	e007      	b.n	8018e8c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e7e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d1e9      	bne.n	8018e60 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018e8c:	6a3b      	ldr	r3, [r7, #32]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d022      	beq.n	8018ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	685b      	ldr	r3, [r3, #4]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d106      	bne.n	8018ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018e9a:	4b15      	ldr	r3, [pc, #84]	; (8018ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018e9c:	f240 12df 	movw	r2, #479	; 0x1df
 8018ea0:	4917      	ldr	r1, [pc, #92]	; (8018f00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018ea2:	4815      	ldr	r0, [pc, #84]	; (8018ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ea4:	f000 ffce 	bl	8019e44 <iprintf>
          LWIP_ASSERT("sanity check",
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	685b      	ldr	r3, [r3, #4]
 8018eac:	685b      	ldr	r3, [r3, #4]
 8018eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018eb0:	429a      	cmp	r2, r3
 8018eb2:	d106      	bne.n	8018ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018eb4:	4b0e      	ldr	r3, [pc, #56]	; (8018ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018eb6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018eba:	4911      	ldr	r1, [pc, #68]	; (8018f00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018ebc:	480e      	ldr	r0, [pc, #56]	; (8018ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ebe:	f000 ffc1 	bl	8019e44 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d006      	beq.n	8018ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018eca:	4b09      	ldr	r3, [pc, #36]	; (8018ef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ecc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018ed0:	490c      	ldr	r1, [pc, #48]	; (8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018ed2:	4809      	ldr	r0, [pc, #36]	; (8018ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ed4:	f000 ffb6 	bl	8019e44 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018ed8:	6a3b      	ldr	r3, [r7, #32]
 8018eda:	2b00      	cmp	r3, #0
 8018edc:	bf14      	ite	ne
 8018ede:	2301      	movne	r3, #1
 8018ee0:	2300      	moveq	r3, #0
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	e000      	b.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018ee6:	2300      	movs	r3, #0
}
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3730      	adds	r7, #48	; 0x30
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}
 8018ef0:	0801df70 	.word	0x0801df70
 8018ef4:	0801e054 	.word	0x0801e054
 8018ef8:	0801dfb8 	.word	0x0801dfb8
 8018efc:	0801e074 	.word	0x0801e074
 8018f00:	0801e0ac 	.word	0x0801e0ac
 8018f04:	0801e0bc 	.word	0x0801e0bc

08018f08 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b08e      	sub	sp, #56	; 0x38
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	685b      	ldr	r3, [r3, #4]
 8018f14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f18:	781b      	ldrb	r3, [r3, #0]
 8018f1a:	f003 030f 	and.w	r3, r3, #15
 8018f1e:	b2db      	uxtb	r3, r3
 8018f20:	009b      	lsls	r3, r3, #2
 8018f22:	b2db      	uxtb	r3, r3
 8018f24:	2b14      	cmp	r3, #20
 8018f26:	f040 8171 	bne.w	801920c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f2c:	88db      	ldrh	r3, [r3, #6]
 8018f2e:	b29b      	uxth	r3, r3
 8018f30:	4618      	mov	r0, r3
 8018f32:	f7f5 fde9 	bl	800eb08 <lwip_htons>
 8018f36:	4603      	mov	r3, r0
 8018f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f3c:	b29b      	uxth	r3, r3
 8018f3e:	00db      	lsls	r3, r3, #3
 8018f40:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f44:	885b      	ldrh	r3, [r3, #2]
 8018f46:	b29b      	uxth	r3, r3
 8018f48:	4618      	mov	r0, r3
 8018f4a:	f7f5 fddd 	bl	800eb08 <lwip_htons>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f54:	781b      	ldrb	r3, [r3, #0]
 8018f56:	f003 030f 	and.w	r3, r3, #15
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	009b      	lsls	r3, r3, #2
 8018f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018f62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f6a:	429a      	cmp	r2, r3
 8018f6c:	f0c0 8150 	bcc.w	8019210 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018f74:	b29b      	uxth	r3, r3
 8018f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018f78:	1ad3      	subs	r3, r2, r3
 8018f7a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	f7f7 fa43 	bl	8010408 <pbuf_clen>
 8018f82:	4603      	mov	r3, r0
 8018f84:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018f86:	4b8c      	ldr	r3, [pc, #560]	; (80191b8 <ip4_reass+0x2b0>)
 8018f88:	881b      	ldrh	r3, [r3, #0]
 8018f8a:	461a      	mov	r2, r3
 8018f8c:	8c3b      	ldrh	r3, [r7, #32]
 8018f8e:	4413      	add	r3, r2
 8018f90:	2b0a      	cmp	r3, #10
 8018f92:	dd10      	ble.n	8018fb6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018f94:	8c3b      	ldrh	r3, [r7, #32]
 8018f96:	4619      	mov	r1, r3
 8018f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018f9a:	f7ff fd81 	bl	8018aa0 <ip_reass_remove_oldest_datagram>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	f000 8137 	beq.w	8019214 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018fa6:	4b84      	ldr	r3, [pc, #528]	; (80191b8 <ip4_reass+0x2b0>)
 8018fa8:	881b      	ldrh	r3, [r3, #0]
 8018faa:	461a      	mov	r2, r3
 8018fac:	8c3b      	ldrh	r3, [r7, #32]
 8018fae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018fb0:	2b0a      	cmp	r3, #10
 8018fb2:	f300 812f 	bgt.w	8019214 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018fb6:	4b81      	ldr	r3, [pc, #516]	; (80191bc <ip4_reass+0x2b4>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	633b      	str	r3, [r7, #48]	; 0x30
 8018fbc:	e015      	b.n	8018fea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fc0:	695a      	ldr	r2, [r3, #20]
 8018fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fc4:	68db      	ldr	r3, [r3, #12]
 8018fc6:	429a      	cmp	r2, r3
 8018fc8:	d10c      	bne.n	8018fe4 <ip4_reass+0xdc>
 8018fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fcc:	699a      	ldr	r2, [r3, #24]
 8018fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fd0:	691b      	ldr	r3, [r3, #16]
 8018fd2:	429a      	cmp	r2, r3
 8018fd4:	d106      	bne.n	8018fe4 <ip4_reass+0xdc>
 8018fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fd8:	899a      	ldrh	r2, [r3, #12]
 8018fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fdc:	889b      	ldrh	r3, [r3, #4]
 8018fde:	b29b      	uxth	r3, r3
 8018fe0:	429a      	cmp	r2, r3
 8018fe2:	d006      	beq.n	8018ff2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	633b      	str	r3, [r7, #48]	; 0x30
 8018fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d1e6      	bne.n	8018fbe <ip4_reass+0xb6>
 8018ff0:	e000      	b.n	8018ff4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018ff2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d109      	bne.n	801900e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018ffa:	8c3b      	ldrh	r3, [r7, #32]
 8018ffc:	4619      	mov	r1, r3
 8018ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019000:	f7ff fdb0 	bl	8018b64 <ip_reass_enqueue_new_datagram>
 8019004:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8019006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019008:	2b00      	cmp	r3, #0
 801900a:	d11c      	bne.n	8019046 <ip4_reass+0x13e>
      goto nullreturn;
 801900c:	e105      	b.n	801921a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019010:	88db      	ldrh	r3, [r3, #6]
 8019012:	b29b      	uxth	r3, r3
 8019014:	4618      	mov	r0, r3
 8019016:	f7f5 fd77 	bl	800eb08 <lwip_htons>
 801901a:	4603      	mov	r3, r0
 801901c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019020:	2b00      	cmp	r3, #0
 8019022:	d110      	bne.n	8019046 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019026:	89db      	ldrh	r3, [r3, #14]
 8019028:	4618      	mov	r0, r3
 801902a:	f7f5 fd6d 	bl	800eb08 <lwip_htons>
 801902e:	4603      	mov	r3, r0
 8019030:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019034:	2b00      	cmp	r3, #0
 8019036:	d006      	beq.n	8019046 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801903a:	3308      	adds	r3, #8
 801903c:	2214      	movs	r2, #20
 801903e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019040:	4618      	mov	r0, r3
 8019042:	f000 fe54 	bl	8019cee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8019046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019048:	88db      	ldrh	r3, [r3, #6]
 801904a:	b29b      	uxth	r3, r3
 801904c:	f003 0320 	and.w	r3, r3, #32
 8019050:	2b00      	cmp	r3, #0
 8019052:	bf0c      	ite	eq
 8019054:	2301      	moveq	r3, #1
 8019056:	2300      	movne	r3, #0
 8019058:	b2db      	uxtb	r3, r3
 801905a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801905c:	69fb      	ldr	r3, [r7, #28]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d00e      	beq.n	8019080 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019062:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019066:	4413      	add	r3, r2
 8019068:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801906a:	8b7a      	ldrh	r2, [r7, #26]
 801906c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801906e:	429a      	cmp	r2, r3
 8019070:	f0c0 80a0 	bcc.w	80191b4 <ip4_reass+0x2ac>
 8019074:	8b7b      	ldrh	r3, [r7, #26]
 8019076:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801907a:	4293      	cmp	r3, r2
 801907c:	f200 809a 	bhi.w	80191b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019080:	69fa      	ldr	r2, [r7, #28]
 8019082:	6879      	ldr	r1, [r7, #4]
 8019084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019086:	f7ff fdd5 	bl	8018c34 <ip_reass_chain_frag_into_datagram_and_validate>
 801908a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019092:	f000 809b 	beq.w	80191cc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8019096:	4b48      	ldr	r3, [pc, #288]	; (80191b8 <ip4_reass+0x2b0>)
 8019098:	881a      	ldrh	r2, [r3, #0]
 801909a:	8c3b      	ldrh	r3, [r7, #32]
 801909c:	4413      	add	r3, r2
 801909e:	b29a      	uxth	r2, r3
 80190a0:	4b45      	ldr	r3, [pc, #276]	; (80191b8 <ip4_reass+0x2b0>)
 80190a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80190a4:	69fb      	ldr	r3, [r7, #28]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d00d      	beq.n	80190c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80190aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80190ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80190ae:	4413      	add	r3, r2
 80190b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80190b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b4:	8a7a      	ldrh	r2, [r7, #18]
 80190b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80190b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ba:	7f9b      	ldrb	r3, [r3, #30]
 80190bc:	f043 0301 	orr.w	r3, r3, #1
 80190c0:	b2da      	uxtb	r2, r3
 80190c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	2b01      	cmp	r3, #1
 80190ca:	d171      	bne.n	80191b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80190cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ce:	8b9b      	ldrh	r3, [r3, #28]
 80190d0:	3314      	adds	r3, #20
 80190d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80190d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80190de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	685b      	ldr	r3, [r3, #4]
 80190e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80190e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190e8:	3308      	adds	r3, #8
 80190ea:	2214      	movs	r2, #20
 80190ec:	4619      	mov	r1, r3
 80190ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190f0:	f000 fdfd 	bl	8019cee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80190f4:	8a3b      	ldrh	r3, [r7, #16]
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7f5 fd06 	bl	800eb08 <lwip_htons>
 80190fc:	4603      	mov	r3, r0
 80190fe:	461a      	mov	r2, r3
 8019100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019102:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8019104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019106:	2200      	movs	r2, #0
 8019108:	719a      	strb	r2, [r3, #6]
 801910a:	2200      	movs	r2, #0
 801910c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801910e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019110:	2200      	movs	r2, #0
 8019112:	729a      	strb	r2, [r3, #10]
 8019114:	2200      	movs	r2, #0
 8019116:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801911a:	685b      	ldr	r3, [r3, #4]
 801911c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801911e:	e00d      	b.n	801913c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019122:	685b      	ldr	r3, [r3, #4]
 8019124:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8019126:	2114      	movs	r1, #20
 8019128:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801912a:	f7f7 f859 	bl	80101e0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801912e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019130:	6878      	ldr	r0, [r7, #4]
 8019132:	f7f7 f9a9 	bl	8010488 <pbuf_cat>
      r = iprh->next_pbuf;
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801913c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801913e:	2b00      	cmp	r3, #0
 8019140:	d1ee      	bne.n	8019120 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019142:	4b1e      	ldr	r3, [pc, #120]	; (80191bc <ip4_reass+0x2b4>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019148:	429a      	cmp	r2, r3
 801914a:	d102      	bne.n	8019152 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801914c:	2300      	movs	r3, #0
 801914e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019150:	e010      	b.n	8019174 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019152:	4b1a      	ldr	r3, [pc, #104]	; (80191bc <ip4_reass+0x2b4>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019158:	e007      	b.n	801916a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801915c:	681b      	ldr	r3, [r3, #0]
 801915e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019160:	429a      	cmp	r2, r3
 8019162:	d006      	beq.n	8019172 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	62fb      	str	r3, [r7, #44]	; 0x2c
 801916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801916c:	2b00      	cmp	r3, #0
 801916e:	d1f4      	bne.n	801915a <ip4_reass+0x252>
 8019170:	e000      	b.n	8019174 <ip4_reass+0x26c>
          break;
 8019172:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019178:	f7ff fd2e 	bl	8018bd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801917c:	6878      	ldr	r0, [r7, #4]
 801917e:	f7f7 f943 	bl	8010408 <pbuf_clen>
 8019182:	4603      	mov	r3, r0
 8019184:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8019186:	4b0c      	ldr	r3, [pc, #48]	; (80191b8 <ip4_reass+0x2b0>)
 8019188:	881b      	ldrh	r3, [r3, #0]
 801918a:	8c3a      	ldrh	r2, [r7, #32]
 801918c:	429a      	cmp	r2, r3
 801918e:	d906      	bls.n	801919e <ip4_reass+0x296>
 8019190:	4b0b      	ldr	r3, [pc, #44]	; (80191c0 <ip4_reass+0x2b8>)
 8019192:	f240 229b 	movw	r2, #667	; 0x29b
 8019196:	490b      	ldr	r1, [pc, #44]	; (80191c4 <ip4_reass+0x2bc>)
 8019198:	480b      	ldr	r0, [pc, #44]	; (80191c8 <ip4_reass+0x2c0>)
 801919a:	f000 fe53 	bl	8019e44 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801919e:	4b06      	ldr	r3, [pc, #24]	; (80191b8 <ip4_reass+0x2b0>)
 80191a0:	881a      	ldrh	r2, [r3, #0]
 80191a2:	8c3b      	ldrh	r3, [r7, #32]
 80191a4:	1ad3      	subs	r3, r2, r3
 80191a6:	b29a      	uxth	r2, r3
 80191a8:	4b03      	ldr	r3, [pc, #12]	; (80191b8 <ip4_reass+0x2b0>)
 80191aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	e038      	b.n	8019222 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80191b0:	2300      	movs	r3, #0
 80191b2:	e036      	b.n	8019222 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80191b4:	bf00      	nop
 80191b6:	e00a      	b.n	80191ce <ip4_reass+0x2c6>
 80191b8:	2004f6dc 	.word	0x2004f6dc
 80191bc:	2004f6d8 	.word	0x2004f6d8
 80191c0:	0801df70 	.word	0x0801df70
 80191c4:	0801e0e0 	.word	0x0801e0e0
 80191c8:	0801dfb8 	.word	0x0801dfb8
    goto nullreturn_ipr;
 80191cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80191ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d106      	bne.n	80191e2 <ip4_reass+0x2da>
 80191d4:	4b15      	ldr	r3, [pc, #84]	; (801922c <ip4_reass+0x324>)
 80191d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80191da:	4915      	ldr	r1, [pc, #84]	; (8019230 <ip4_reass+0x328>)
 80191dc:	4815      	ldr	r0, [pc, #84]	; (8019234 <ip4_reass+0x32c>)
 80191de:	f000 fe31 	bl	8019e44 <iprintf>
  if (ipr->p == NULL) {
 80191e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191e4:	685b      	ldr	r3, [r3, #4]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d116      	bne.n	8019218 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80191ea:	4b13      	ldr	r3, [pc, #76]	; (8019238 <ip4_reass+0x330>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80191f0:	429a      	cmp	r2, r3
 80191f2:	d006      	beq.n	8019202 <ip4_reass+0x2fa>
 80191f4:	4b0d      	ldr	r3, [pc, #52]	; (801922c <ip4_reass+0x324>)
 80191f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80191fa:	4910      	ldr	r1, [pc, #64]	; (801923c <ip4_reass+0x334>)
 80191fc:	480d      	ldr	r0, [pc, #52]	; (8019234 <ip4_reass+0x32c>)
 80191fe:	f000 fe21 	bl	8019e44 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8019202:	2100      	movs	r1, #0
 8019204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019206:	f7ff fce7 	bl	8018bd8 <ip_reass_dequeue_datagram>
 801920a:	e006      	b.n	801921a <ip4_reass+0x312>
    goto nullreturn;
 801920c:	bf00      	nop
 801920e:	e004      	b.n	801921a <ip4_reass+0x312>
    goto nullreturn;
 8019210:	bf00      	nop
 8019212:	e002      	b.n	801921a <ip4_reass+0x312>
      goto nullreturn;
 8019214:	bf00      	nop
 8019216:	e000      	b.n	801921a <ip4_reass+0x312>
  }

nullreturn:
 8019218:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f7f7 f866 	bl	80102ec <pbuf_free>
  return NULL;
 8019220:	2300      	movs	r3, #0
}
 8019222:	4618      	mov	r0, r3
 8019224:	3738      	adds	r7, #56	; 0x38
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}
 801922a:	bf00      	nop
 801922c:	0801df70 	.word	0x0801df70
 8019230:	0801e0fc 	.word	0x0801e0fc
 8019234:	0801dfb8 	.word	0x0801dfb8
 8019238:	2004f6d8 	.word	0x2004f6d8
 801923c:	0801e108 	.word	0x0801e108

08019240 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019244:	2005      	movs	r0, #5
 8019246:	f7f6 f937 	bl	800f4b8 <memp_malloc>
 801924a:	4603      	mov	r3, r0
}
 801924c:	4618      	mov	r0, r3
 801924e:	bd80      	pop	{r7, pc}

08019250 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b082      	sub	sp, #8
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d106      	bne.n	801926c <ip_frag_free_pbuf_custom_ref+0x1c>
 801925e:	4b07      	ldr	r3, [pc, #28]	; (801927c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019260:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019264:	4906      	ldr	r1, [pc, #24]	; (8019280 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019266:	4807      	ldr	r0, [pc, #28]	; (8019284 <ip_frag_free_pbuf_custom_ref+0x34>)
 8019268:	f000 fdec 	bl	8019e44 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801926c:	6879      	ldr	r1, [r7, #4]
 801926e:	2005      	movs	r0, #5
 8019270:	f7f6 f998 	bl	800f5a4 <memp_free>
}
 8019274:	bf00      	nop
 8019276:	3708      	adds	r7, #8
 8019278:	46bd      	mov	sp, r7
 801927a:	bd80      	pop	{r7, pc}
 801927c:	0801df70 	.word	0x0801df70
 8019280:	0801e128 	.word	0x0801e128
 8019284:	0801dfb8 	.word	0x0801dfb8

08019288 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b084      	sub	sp, #16
 801928c:	af00      	add	r7, sp, #0
 801928e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d106      	bne.n	80192a8 <ipfrag_free_pbuf_custom+0x20>
 801929a:	4b11      	ldr	r3, [pc, #68]	; (80192e0 <ipfrag_free_pbuf_custom+0x58>)
 801929c:	f240 22ce 	movw	r2, #718	; 0x2ce
 80192a0:	4910      	ldr	r1, [pc, #64]	; (80192e4 <ipfrag_free_pbuf_custom+0x5c>)
 80192a2:	4811      	ldr	r0, [pc, #68]	; (80192e8 <ipfrag_free_pbuf_custom+0x60>)
 80192a4:	f000 fdce 	bl	8019e44 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80192a8:	68fa      	ldr	r2, [r7, #12]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	429a      	cmp	r2, r3
 80192ae:	d006      	beq.n	80192be <ipfrag_free_pbuf_custom+0x36>
 80192b0:	4b0b      	ldr	r3, [pc, #44]	; (80192e0 <ipfrag_free_pbuf_custom+0x58>)
 80192b2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80192b6:	490d      	ldr	r1, [pc, #52]	; (80192ec <ipfrag_free_pbuf_custom+0x64>)
 80192b8:	480b      	ldr	r0, [pc, #44]	; (80192e8 <ipfrag_free_pbuf_custom+0x60>)
 80192ba:	f000 fdc3 	bl	8019e44 <iprintf>
  if (pcr->original != NULL) {
 80192be:	68fb      	ldr	r3, [r7, #12]
 80192c0:	695b      	ldr	r3, [r3, #20]
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d004      	beq.n	80192d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	695b      	ldr	r3, [r3, #20]
 80192ca:	4618      	mov	r0, r3
 80192cc:	f7f7 f80e 	bl	80102ec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80192d0:	68f8      	ldr	r0, [r7, #12]
 80192d2:	f7ff ffbd 	bl	8019250 <ip_frag_free_pbuf_custom_ref>
}
 80192d6:	bf00      	nop
 80192d8:	3710      	adds	r7, #16
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd80      	pop	{r7, pc}
 80192de:	bf00      	nop
 80192e0:	0801df70 	.word	0x0801df70
 80192e4:	0801e134 	.word	0x0801e134
 80192e8:	0801dfb8 	.word	0x0801dfb8
 80192ec:	0801e140 	.word	0x0801e140

080192f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80192f0:	b580      	push	{r7, lr}
 80192f2:	b094      	sub	sp, #80	; 0x50
 80192f4:	af02      	add	r7, sp, #8
 80192f6:	60f8      	str	r0, [r7, #12]
 80192f8:	60b9      	str	r1, [r7, #8]
 80192fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80192fc:	2300      	movs	r3, #0
 80192fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019306:	3b14      	subs	r3, #20
 8019308:	2b00      	cmp	r3, #0
 801930a:	da00      	bge.n	801930e <ip4_frag+0x1e>
 801930c:	3307      	adds	r3, #7
 801930e:	10db      	asrs	r3, r3, #3
 8019310:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019312:	2314      	movs	r3, #20
 8019314:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	685b      	ldr	r3, [r3, #4]
 801931a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801931c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801931e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019322:	781b      	ldrb	r3, [r3, #0]
 8019324:	f003 030f 	and.w	r3, r3, #15
 8019328:	b2db      	uxtb	r3, r3
 801932a:	009b      	lsls	r3, r3, #2
 801932c:	b2db      	uxtb	r3, r3
 801932e:	2b14      	cmp	r3, #20
 8019330:	d002      	beq.n	8019338 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019332:	f06f 0305 	mvn.w	r3, #5
 8019336:	e110      	b.n	801955a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	895b      	ldrh	r3, [r3, #10]
 801933c:	2b13      	cmp	r3, #19
 801933e:	d809      	bhi.n	8019354 <ip4_frag+0x64>
 8019340:	4b88      	ldr	r3, [pc, #544]	; (8019564 <ip4_frag+0x274>)
 8019342:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019346:	4988      	ldr	r1, [pc, #544]	; (8019568 <ip4_frag+0x278>)
 8019348:	4888      	ldr	r0, [pc, #544]	; (801956c <ip4_frag+0x27c>)
 801934a:	f000 fd7b 	bl	8019e44 <iprintf>
 801934e:	f06f 0305 	mvn.w	r3, #5
 8019352:	e102      	b.n	801955a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019356:	88db      	ldrh	r3, [r3, #6]
 8019358:	b29b      	uxth	r3, r3
 801935a:	4618      	mov	r0, r3
 801935c:	f7f5 fbd4 	bl	800eb08 <lwip_htons>
 8019360:	4603      	mov	r3, r0
 8019362:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019364:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801936a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801936e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019374:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	891b      	ldrh	r3, [r3, #8]
 801937a:	3b14      	subs	r3, #20
 801937c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019380:	e0e1      	b.n	8019546 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019382:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019384:	00db      	lsls	r3, r3, #3
 8019386:	b29b      	uxth	r3, r3
 8019388:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801938c:	4293      	cmp	r3, r2
 801938e:	bf28      	it	cs
 8019390:	4613      	movcs	r3, r2
 8019392:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019394:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019398:	2114      	movs	r1, #20
 801939a:	200e      	movs	r0, #14
 801939c:	f7f6 fcc2 	bl	800fd24 <pbuf_alloc>
 80193a0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80193a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	f000 80d5 	beq.w	8019554 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80193aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193ac:	895b      	ldrh	r3, [r3, #10]
 80193ae:	2b13      	cmp	r3, #19
 80193b0:	d806      	bhi.n	80193c0 <ip4_frag+0xd0>
 80193b2:	4b6c      	ldr	r3, [pc, #432]	; (8019564 <ip4_frag+0x274>)
 80193b4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80193b8:	496d      	ldr	r1, [pc, #436]	; (8019570 <ip4_frag+0x280>)
 80193ba:	486c      	ldr	r0, [pc, #432]	; (801956c <ip4_frag+0x27c>)
 80193bc:	f000 fd42 	bl	8019e44 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80193c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193c2:	685b      	ldr	r3, [r3, #4]
 80193c4:	2214      	movs	r2, #20
 80193c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80193c8:	4618      	mov	r0, r3
 80193ca:	f000 fc90 	bl	8019cee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80193ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80193d0:	685b      	ldr	r3, [r3, #4]
 80193d2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80193d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80193d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80193da:	e064      	b.n	80194a6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	895a      	ldrh	r2, [r3, #10]
 80193e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80193e2:	1ad3      	subs	r3, r2, r3
 80193e4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80193e6:	68fb      	ldr	r3, [r7, #12]
 80193e8:	895b      	ldrh	r3, [r3, #10]
 80193ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80193ec:	429a      	cmp	r2, r3
 80193ee:	d906      	bls.n	80193fe <ip4_frag+0x10e>
 80193f0:	4b5c      	ldr	r3, [pc, #368]	; (8019564 <ip4_frag+0x274>)
 80193f2:	f240 322d 	movw	r2, #813	; 0x32d
 80193f6:	495f      	ldr	r1, [pc, #380]	; (8019574 <ip4_frag+0x284>)
 80193f8:	485c      	ldr	r0, [pc, #368]	; (801956c <ip4_frag+0x27c>)
 80193fa:	f000 fd23 	bl	8019e44 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80193fe:	8bfa      	ldrh	r2, [r7, #30]
 8019400:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019404:	4293      	cmp	r3, r2
 8019406:	bf28      	it	cs
 8019408:	4613      	movcs	r3, r2
 801940a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801940e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019412:	2b00      	cmp	r3, #0
 8019414:	d105      	bne.n	8019422 <ip4_frag+0x132>
        poff = 0;
 8019416:	2300      	movs	r3, #0
 8019418:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	60fb      	str	r3, [r7, #12]
        continue;
 8019420:	e041      	b.n	80194a6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019422:	f7ff ff0d 	bl	8019240 <ip_frag_alloc_pbuf_custom_ref>
 8019426:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019428:	69bb      	ldr	r3, [r7, #24]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d103      	bne.n	8019436 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801942e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019430:	f7f6 ff5c 	bl	80102ec <pbuf_free>
        goto memerr;
 8019434:	e08f      	b.n	8019556 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019436:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801943c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801943e:	4413      	add	r3, r2
 8019440:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019444:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019448:	9201      	str	r2, [sp, #4]
 801944a:	9300      	str	r3, [sp, #0]
 801944c:	4603      	mov	r3, r0
 801944e:	2241      	movs	r2, #65	; 0x41
 8019450:	2000      	movs	r0, #0
 8019452:	f7f6 fd91 	bl	800ff78 <pbuf_alloced_custom>
 8019456:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019458:	697b      	ldr	r3, [r7, #20]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d106      	bne.n	801946c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801945e:	69b8      	ldr	r0, [r7, #24]
 8019460:	f7ff fef6 	bl	8019250 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019466:	f7f6 ff41 	bl	80102ec <pbuf_free>
        goto memerr;
 801946a:	e074      	b.n	8019556 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801946c:	68f8      	ldr	r0, [r7, #12]
 801946e:	f7f6 ffe3 	bl	8010438 <pbuf_ref>
      pcr->original = p;
 8019472:	69bb      	ldr	r3, [r7, #24]
 8019474:	68fa      	ldr	r2, [r7, #12]
 8019476:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019478:	69bb      	ldr	r3, [r7, #24]
 801947a:	4a3f      	ldr	r2, [pc, #252]	; (8019578 <ip4_frag+0x288>)
 801947c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801947e:	6979      	ldr	r1, [r7, #20]
 8019480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019482:	f7f7 f801 	bl	8010488 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019486:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801948a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801948e:	1ad3      	subs	r3, r2, r3
 8019490:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019494:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019498:	2b00      	cmp	r3, #0
 801949a:	d004      	beq.n	80194a6 <ip4_frag+0x1b6>
        poff = 0;
 801949c:	2300      	movs	r3, #0
 801949e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80194a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d196      	bne.n	80193dc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80194ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80194b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80194b4:	4413      	add	r3, r2
 80194b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80194b8:	68bb      	ldr	r3, [r7, #8]
 80194ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80194bc:	f1a3 0213 	sub.w	r2, r3, #19
 80194c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80194c4:	429a      	cmp	r2, r3
 80194c6:	bfcc      	ite	gt
 80194c8:	2301      	movgt	r3, #1
 80194ca:	2300      	movle	r3, #0
 80194cc:	b2db      	uxtb	r3, r3
 80194ce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80194d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80194d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80194d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80194da:	6a3b      	ldr	r3, [r7, #32]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d002      	beq.n	80194e6 <ip4_frag+0x1f6>
 80194e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d003      	beq.n	80194ee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80194e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80194e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80194ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80194ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80194f0:	4618      	mov	r0, r3
 80194f2:	f7f5 fb09 	bl	800eb08 <lwip_htons>
 80194f6:	4603      	mov	r3, r0
 80194f8:	461a      	mov	r2, r3
 80194fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194fc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80194fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019500:	3314      	adds	r3, #20
 8019502:	b29b      	uxth	r3, r3
 8019504:	4618      	mov	r0, r3
 8019506:	f7f5 faff 	bl	800eb08 <lwip_htons>
 801950a:	4603      	mov	r3, r0
 801950c:	461a      	mov	r2, r3
 801950e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019510:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019514:	2200      	movs	r2, #0
 8019516:	729a      	strb	r2, [r3, #10]
 8019518:	2200      	movs	r2, #0
 801951a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	695b      	ldr	r3, [r3, #20]
 8019520:	687a      	ldr	r2, [r7, #4]
 8019522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019524:	68b8      	ldr	r0, [r7, #8]
 8019526:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801952a:	f7f6 fedf 	bl	80102ec <pbuf_free>
    left = (u16_t)(left - fragsize);
 801952e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019532:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019534:	1ad3      	subs	r3, r2, r3
 8019536:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801953a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801953e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019540:	4413      	add	r3, r2
 8019542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801954a:	2b00      	cmp	r3, #0
 801954c:	f47f af19 	bne.w	8019382 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019550:	2300      	movs	r3, #0
 8019552:	e002      	b.n	801955a <ip4_frag+0x26a>
      goto memerr;
 8019554:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801955a:	4618      	mov	r0, r3
 801955c:	3748      	adds	r7, #72	; 0x48
 801955e:	46bd      	mov	sp, r7
 8019560:	bd80      	pop	{r7, pc}
 8019562:	bf00      	nop
 8019564:	0801df70 	.word	0x0801df70
 8019568:	0801e14c 	.word	0x0801e14c
 801956c:	0801dfb8 	.word	0x0801dfb8
 8019570:	0801e168 	.word	0x0801e168
 8019574:	0801e188 	.word	0x0801e188
 8019578:	08019289 	.word	0x08019289

0801957c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b086      	sub	sp, #24
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019586:	230e      	movs	r3, #14
 8019588:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801958a:	687b      	ldr	r3, [r7, #4]
 801958c:	895b      	ldrh	r3, [r3, #10]
 801958e:	2b0e      	cmp	r3, #14
 8019590:	d96e      	bls.n	8019670 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	7bdb      	ldrb	r3, [r3, #15]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d106      	bne.n	80195a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80195a0:	3301      	adds	r3, #1
 80195a2:	b2da      	uxtb	r2, r3
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	685b      	ldr	r3, [r3, #4]
 80195ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	7b1a      	ldrb	r2, [r3, #12]
 80195b2:	7b5b      	ldrb	r3, [r3, #13]
 80195b4:	021b      	lsls	r3, r3, #8
 80195b6:	4313      	orrs	r3, r2
 80195b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80195ba:	693b      	ldr	r3, [r7, #16]
 80195bc:	781b      	ldrb	r3, [r3, #0]
 80195be:	f003 0301 	and.w	r3, r3, #1
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d023      	beq.n	801960e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80195c6:	693b      	ldr	r3, [r7, #16]
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	2b01      	cmp	r3, #1
 80195cc:	d10f      	bne.n	80195ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	785b      	ldrb	r3, [r3, #1]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d11b      	bne.n	801960e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80195d6:	693b      	ldr	r3, [r7, #16]
 80195d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80195da:	2b5e      	cmp	r3, #94	; 0x5e
 80195dc:	d117      	bne.n	801960e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	7b5b      	ldrb	r3, [r3, #13]
 80195e2:	f043 0310 	orr.w	r3, r3, #16
 80195e6:	b2da      	uxtb	r2, r3
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	735a      	strb	r2, [r3, #13]
 80195ec:	e00f      	b.n	801960e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	2206      	movs	r2, #6
 80195f2:	4928      	ldr	r1, [pc, #160]	; (8019694 <ethernet_input+0x118>)
 80195f4:	4618      	mov	r0, r3
 80195f6:	f000 fb6a 	bl	8019cce <memcmp>
 80195fa:	4603      	mov	r3, r0
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d106      	bne.n	801960e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	7b5b      	ldrb	r3, [r3, #13]
 8019604:	f043 0308 	orr.w	r3, r3, #8
 8019608:	b2da      	uxtb	r2, r3
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801960e:	89fb      	ldrh	r3, [r7, #14]
 8019610:	2b08      	cmp	r3, #8
 8019612:	d003      	beq.n	801961c <ethernet_input+0xa0>
 8019614:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019618:	d014      	beq.n	8019644 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801961a:	e032      	b.n	8019682 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801961c:	683b      	ldr	r3, [r7, #0]
 801961e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019622:	f003 0308 	and.w	r3, r3, #8
 8019626:	2b00      	cmp	r3, #0
 8019628:	d024      	beq.n	8019674 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801962a:	8afb      	ldrh	r3, [r7, #22]
 801962c:	4619      	mov	r1, r3
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	f7f6 fdd6 	bl	80101e0 <pbuf_remove_header>
 8019634:	4603      	mov	r3, r0
 8019636:	2b00      	cmp	r3, #0
 8019638:	d11e      	bne.n	8019678 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801963a:	6839      	ldr	r1, [r7, #0]
 801963c:	6878      	ldr	r0, [r7, #4]
 801963e:	f7fe ff21 	bl	8018484 <ip4_input>
      break;
 8019642:	e013      	b.n	801966c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019644:	683b      	ldr	r3, [r7, #0]
 8019646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801964a:	f003 0308 	and.w	r3, r3, #8
 801964e:	2b00      	cmp	r3, #0
 8019650:	d014      	beq.n	801967c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019652:	8afb      	ldrh	r3, [r7, #22]
 8019654:	4619      	mov	r1, r3
 8019656:	6878      	ldr	r0, [r7, #4]
 8019658:	f7f6 fdc2 	bl	80101e0 <pbuf_remove_header>
 801965c:	4603      	mov	r3, r0
 801965e:	2b00      	cmp	r3, #0
 8019660:	d10e      	bne.n	8019680 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019662:	6839      	ldr	r1, [r7, #0]
 8019664:	6878      	ldr	r0, [r7, #4]
 8019666:	f7fe f8c1 	bl	80177ec <etharp_input>
      break;
 801966a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801966c:	2300      	movs	r3, #0
 801966e:	e00c      	b.n	801968a <ethernet_input+0x10e>
    goto free_and_return;
 8019670:	bf00      	nop
 8019672:	e006      	b.n	8019682 <ethernet_input+0x106>
        goto free_and_return;
 8019674:	bf00      	nop
 8019676:	e004      	b.n	8019682 <ethernet_input+0x106>
        goto free_and_return;
 8019678:	bf00      	nop
 801967a:	e002      	b.n	8019682 <ethernet_input+0x106>
        goto free_and_return;
 801967c:	bf00      	nop
 801967e:	e000      	b.n	8019682 <ethernet_input+0x106>
        goto free_and_return;
 8019680:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019682:	6878      	ldr	r0, [r7, #4]
 8019684:	f7f6 fe32 	bl	80102ec <pbuf_free>
  return ERR_OK;
 8019688:	2300      	movs	r3, #0
}
 801968a:	4618      	mov	r0, r3
 801968c:	3718      	adds	r7, #24
 801968e:	46bd      	mov	sp, r7
 8019690:	bd80      	pop	{r7, pc}
 8019692:	bf00      	nop
 8019694:	0801e384 	.word	0x0801e384

08019698 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019698:	b580      	push	{r7, lr}
 801969a:	b086      	sub	sp, #24
 801969c:	af00      	add	r7, sp, #0
 801969e:	60f8      	str	r0, [r7, #12]
 80196a0:	60b9      	str	r1, [r7, #8]
 80196a2:	607a      	str	r2, [r7, #4]
 80196a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80196a6:	8c3b      	ldrh	r3, [r7, #32]
 80196a8:	4618      	mov	r0, r3
 80196aa:	f7f5 fa2d 	bl	800eb08 <lwip_htons>
 80196ae:	4603      	mov	r3, r0
 80196b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80196b2:	210e      	movs	r1, #14
 80196b4:	68b8      	ldr	r0, [r7, #8]
 80196b6:	f7f6 fd83 	bl	80101c0 <pbuf_add_header>
 80196ba:	4603      	mov	r3, r0
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d125      	bne.n	801970c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	685b      	ldr	r3, [r3, #4]
 80196c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	8afa      	ldrh	r2, [r7, #22]
 80196ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80196cc:	693b      	ldr	r3, [r7, #16]
 80196ce:	2206      	movs	r2, #6
 80196d0:	6839      	ldr	r1, [r7, #0]
 80196d2:	4618      	mov	r0, r3
 80196d4:	f000 fb0b 	bl	8019cee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80196d8:	693b      	ldr	r3, [r7, #16]
 80196da:	3306      	adds	r3, #6
 80196dc:	2206      	movs	r2, #6
 80196de:	6879      	ldr	r1, [r7, #4]
 80196e0:	4618      	mov	r0, r3
 80196e2:	f000 fb04 	bl	8019cee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80196ec:	2b06      	cmp	r3, #6
 80196ee:	d006      	beq.n	80196fe <ethernet_output+0x66>
 80196f0:	4b0a      	ldr	r3, [pc, #40]	; (801971c <ethernet_output+0x84>)
 80196f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80196f6:	490a      	ldr	r1, [pc, #40]	; (8019720 <ethernet_output+0x88>)
 80196f8:	480a      	ldr	r0, [pc, #40]	; (8019724 <ethernet_output+0x8c>)
 80196fa:	f000 fba3 	bl	8019e44 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	699b      	ldr	r3, [r3, #24]
 8019702:	68b9      	ldr	r1, [r7, #8]
 8019704:	68f8      	ldr	r0, [r7, #12]
 8019706:	4798      	blx	r3
 8019708:	4603      	mov	r3, r0
 801970a:	e002      	b.n	8019712 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801970c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801970e:	f06f 0301 	mvn.w	r3, #1
}
 8019712:	4618      	mov	r0, r3
 8019714:	3718      	adds	r7, #24
 8019716:	46bd      	mov	sp, r7
 8019718:	bd80      	pop	{r7, pc}
 801971a:	bf00      	nop
 801971c:	0801e198 	.word	0x0801e198
 8019720:	0801e1d0 	.word	0x0801e1d0
 8019724:	0801e204 	.word	0x0801e204

08019728 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019728:	b580      	push	{r7, lr}
 801972a:	b082      	sub	sp, #8
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
 8019730:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	2200      	movs	r2, #0
 8019736:	2104      	movs	r1, #4
 8019738:	4618      	mov	r0, r3
 801973a:	f7ef fc57 	bl	8008fec <osMessageQueueNew>
 801973e:	4602      	mov	r2, r0
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d102      	bne.n	8019752 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801974c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019750:	e000      	b.n	8019754 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019752:	2300      	movs	r3, #0
}
 8019754:	4618      	mov	r0, r3
 8019756:	3708      	adds	r7, #8
 8019758:	46bd      	mov	sp, r7
 801975a:	bd80      	pop	{r7, pc}

0801975c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	4618      	mov	r0, r3
 801976a:	f7ef fdab 	bl	80092c4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	4618      	mov	r0, r3
 8019774:	f7ef fdd8 	bl	8009328 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019778:	bf00      	nop
 801977a:	3708      	adds	r7, #8
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}

08019780 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
 8019788:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6818      	ldr	r0, [r3, #0]
 801978e:	4639      	mov	r1, r7
 8019790:	2300      	movs	r3, #0
 8019792:	2200      	movs	r2, #0
 8019794:	f7ef fcb0 	bl	80090f8 <osMessageQueuePut>
 8019798:	4603      	mov	r3, r0
 801979a:	2b00      	cmp	r3, #0
 801979c:	d102      	bne.n	80197a4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801979e:	2300      	movs	r3, #0
 80197a0:	73fb      	strb	r3, [r7, #15]
 80197a2:	e001      	b.n	80197a8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80197a4:	23ff      	movs	r3, #255	; 0xff
 80197a6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80197a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80197ac:	4618      	mov	r0, r3
 80197ae:	3710      	adds	r7, #16
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}

080197b4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b086      	sub	sp, #24
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	60f8      	str	r0, [r7, #12]
 80197bc:	60b9      	str	r1, [r7, #8]
 80197be:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80197c0:	f7ef f836 	bl	8008830 <osKernelGetTickCount>
 80197c4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d013      	beq.n	80197f4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	6818      	ldr	r0, [r3, #0]
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	2200      	movs	r2, #0
 80197d4:	68b9      	ldr	r1, [r7, #8]
 80197d6:	f7ef fd03 	bl	80091e0 <osMessageQueueGet>
 80197da:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d105      	bne.n	80197ee <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80197e2:	f7ef f825 	bl	8008830 <osKernelGetTickCount>
 80197e6:	4602      	mov	r2, r0
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	1ad3      	subs	r3, r2, r3
 80197ec:	e00f      	b.n	801980e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80197ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197f2:	e00c      	b.n	801980e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	6818      	ldr	r0, [r3, #0]
 80197f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197fc:	2200      	movs	r2, #0
 80197fe:	68b9      	ldr	r1, [r7, #8]
 8019800:	f7ef fcee 	bl	80091e0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019804:	f7ef f814 	bl	8008830 <osKernelGetTickCount>
 8019808:	4602      	mov	r2, r0
 801980a:	697b      	ldr	r3, [r7, #20]
 801980c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801980e:	4618      	mov	r0, r3
 8019810:	3718      	adds	r7, #24
 8019812:	46bd      	mov	sp, r7
 8019814:	bd80      	pop	{r7, pc}

08019816 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019816:	b580      	push	{r7, lr}
 8019818:	b082      	sub	sp, #8
 801981a:	af00      	add	r7, sp, #0
 801981c:	6078      	str	r0, [r7, #4]
 801981e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6818      	ldr	r0, [r3, #0]
 8019824:	2300      	movs	r3, #0
 8019826:	2200      	movs	r2, #0
 8019828:	6839      	ldr	r1, [r7, #0]
 801982a:	f7ef fcd9 	bl	80091e0 <osMessageQueueGet>
 801982e:	4603      	mov	r3, r0
 8019830:	2b00      	cmp	r3, #0
 8019832:	d101      	bne.n	8019838 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8019834:	2300      	movs	r3, #0
 8019836:	e001      	b.n	801983c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801983c:	4618      	mov	r0, r3
 801983e:	3708      	adds	r7, #8
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019844:	b480      	push	{r7}
 8019846:	b083      	sub	sp, #12
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d101      	bne.n	8019858 <sys_mbox_valid+0x14>
    return 0;
 8019854:	2300      	movs	r3, #0
 8019856:	e000      	b.n	801985a <sys_mbox_valid+0x16>
  else
    return 1;
 8019858:	2301      	movs	r3, #1
}
 801985a:	4618      	mov	r0, r3
 801985c:	370c      	adds	r7, #12
 801985e:	46bd      	mov	sp, r7
 8019860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019864:	4770      	bx	lr

08019866 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019866:	b480      	push	{r7}
 8019868:	b083      	sub	sp, #12
 801986a:	af00      	add	r7, sp, #0
 801986c:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	2200      	movs	r2, #0
 8019872:	601a      	str	r2, [r3, #0]
}
 8019874:	bf00      	nop
 8019876:	370c      	adds	r7, #12
 8019878:	46bd      	mov	sp, r7
 801987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987e:	4770      	bx	lr

08019880 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019880:	b580      	push	{r7, lr}
 8019882:	b082      	sub	sp, #8
 8019884:	af00      	add	r7, sp, #0
 8019886:	6078      	str	r0, [r7, #4]
 8019888:	460b      	mov	r3, r1
 801988a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801988c:	78fb      	ldrb	r3, [r7, #3]
 801988e:	2200      	movs	r2, #0
 8019890:	4619      	mov	r1, r3
 8019892:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019896:	f7ef fa19 	bl	8008ccc <osSemaphoreNew>
 801989a:	4602      	mov	r2, r0
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d102      	bne.n	80198ae <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80198a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80198ac:	e009      	b.n	80198c2 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80198ae:	78fb      	ldrb	r3, [r7, #3]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d105      	bne.n	80198c0 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80198b4:	687b      	ldr	r3, [r7, #4]
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	2100      	movs	r1, #0
 80198ba:	4618      	mov	r0, r3
 80198bc:	f7ef faa2 	bl	8008e04 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80198c0:	2300      	movs	r3, #0
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	3708      	adds	r7, #8
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bd80      	pop	{r7, pc}

080198ca <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80198ca:	b580      	push	{r7, lr}
 80198cc:	b084      	sub	sp, #16
 80198ce:	af00      	add	r7, sp, #0
 80198d0:	6078      	str	r0, [r7, #4]
 80198d2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80198d4:	f7ee ffac 	bl	8008830 <osKernelGetTickCount>
 80198d8:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d011      	beq.n	8019904 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	6839      	ldr	r1, [r7, #0]
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7ef fa8c 	bl	8008e04 <osSemaphoreAcquire>
 80198ec:	4603      	mov	r3, r0
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d105      	bne.n	80198fe <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80198f2:	f7ee ff9d 	bl	8008830 <osKernelGetTickCount>
 80198f6:	4602      	mov	r2, r0
 80198f8:	68fb      	ldr	r3, [r7, #12]
 80198fa:	1ad3      	subs	r3, r2, r3
 80198fc:	e012      	b.n	8019924 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80198fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019902:	e00f      	b.n	8019924 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8019904:	bf00      	nop
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801990e:	4618      	mov	r0, r3
 8019910:	f7ef fa78 	bl	8008e04 <osSemaphoreAcquire>
 8019914:	4603      	mov	r3, r0
 8019916:	2b00      	cmp	r3, #0
 8019918:	d1f5      	bne.n	8019906 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801991a:	f7ee ff89 	bl	8008830 <osKernelGetTickCount>
 801991e:	4602      	mov	r2, r0
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019924:	4618      	mov	r0, r3
 8019926:	3710      	adds	r7, #16
 8019928:	46bd      	mov	sp, r7
 801992a:	bd80      	pop	{r7, pc}

0801992c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801992c:	b580      	push	{r7, lr}
 801992e:	b082      	sub	sp, #8
 8019930:	af00      	add	r7, sp, #0
 8019932:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019934:	687b      	ldr	r3, [r7, #4]
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4618      	mov	r0, r3
 801993a:	f7ef fac9 	bl	8008ed0 <osSemaphoreRelease>
}
 801993e:	bf00      	nop
 8019940:	3708      	adds	r7, #8
 8019942:	46bd      	mov	sp, r7
 8019944:	bd80      	pop	{r7, pc}

08019946 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019946:	b580      	push	{r7, lr}
 8019948:	b082      	sub	sp, #8
 801994a:	af00      	add	r7, sp, #0
 801994c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	4618      	mov	r0, r3
 8019954:	f7ef fb14 	bl	8008f80 <osSemaphoreDelete>
}
 8019958:	bf00      	nop
 801995a:	3708      	adds	r7, #8
 801995c:	46bd      	mov	sp, r7
 801995e:	bd80      	pop	{r7, pc}

08019960 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019960:	b480      	push	{r7}
 8019962:	b083      	sub	sp, #12
 8019964:	af00      	add	r7, sp, #0
 8019966:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d101      	bne.n	8019974 <sys_sem_valid+0x14>
    return 0;
 8019970:	2300      	movs	r3, #0
 8019972:	e000      	b.n	8019976 <sys_sem_valid+0x16>
  else
    return 1;
 8019974:	2301      	movs	r3, #1
}
 8019976:	4618      	mov	r0, r3
 8019978:	370c      	adds	r7, #12
 801997a:	46bd      	mov	sp, r7
 801997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019980:	4770      	bx	lr

08019982 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019982:	b480      	push	{r7}
 8019984:	b083      	sub	sp, #12
 8019986:	af00      	add	r7, sp, #0
 8019988:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	2200      	movs	r2, #0
 801998e:	601a      	str	r2, [r3, #0]
}
 8019990:	bf00      	nop
 8019992:	370c      	adds	r7, #12
 8019994:	46bd      	mov	sp, r7
 8019996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999a:	4770      	bx	lr

0801999c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801999c:	b580      	push	{r7, lr}
 801999e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80199a0:	2000      	movs	r0, #0
 80199a2:	f7ef f84b 	bl	8008a3c <osMutexNew>
 80199a6:	4603      	mov	r3, r0
 80199a8:	4a01      	ldr	r2, [pc, #4]	; (80199b0 <sys_init+0x14>)
 80199aa:	6013      	str	r3, [r2, #0]
#endif
}
 80199ac:	bf00      	nop
 80199ae:	bd80      	pop	{r7, pc}
 80199b0:	2004f6e0 	.word	0x2004f6e0

080199b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b082      	sub	sp, #8
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80199bc:	2000      	movs	r0, #0
 80199be:	f7ef f83d 	bl	8008a3c <osMutexNew>
 80199c2:	4602      	mov	r2, r0
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d102      	bne.n	80199d6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80199d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80199d4:	e000      	b.n	80199d8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80199d6:	2300      	movs	r3, #0
}
 80199d8:	4618      	mov	r0, r3
 80199da:	3708      	adds	r7, #8
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd80      	pop	{r7, pc}

080199e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b082      	sub	sp, #8
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80199f0:	4618      	mov	r0, r3
 80199f2:	f7ef f8bd 	bl	8008b70 <osMutexAcquire>
#endif
}
 80199f6:	bf00      	nop
 80199f8:	3708      	adds	r7, #8
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}

080199fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80199fe:	b580      	push	{r7, lr}
 8019a00:	b082      	sub	sp, #8
 8019a02:	af00      	add	r7, sp, #0
 8019a04:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7ef f90e 	bl	8008c2c <osMutexRelease>
}
 8019a10:	bf00      	nop
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}

08019a18 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b08e      	sub	sp, #56	; 0x38
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	60f8      	str	r0, [r7, #12]
 8019a20:	60b9      	str	r1, [r7, #8]
 8019a22:	607a      	str	r2, [r7, #4]
 8019a24:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019a26:	f107 0314 	add.w	r3, r7, #20
 8019a2a:	2224      	movs	r2, #36	; 0x24
 8019a2c:	2100      	movs	r1, #0
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f000 f96b 	bl	8019d0a <memset>
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	617b      	str	r3, [r7, #20]
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019a40:	f107 0314 	add.w	r3, r7, #20
 8019a44:	461a      	mov	r2, r3
 8019a46:	6879      	ldr	r1, [r7, #4]
 8019a48:	68b8      	ldr	r0, [r7, #8]
 8019a4a:	f7ee ff19 	bl	8008880 <osThreadNew>
 8019a4e:	4603      	mov	r3, r0
#endif
}
 8019a50:	4618      	mov	r0, r3
 8019a52:	3738      	adds	r7, #56	; 0x38
 8019a54:	46bd      	mov	sp, r7
 8019a56:	bd80      	pop	{r7, pc}

08019a58 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019a58:	b580      	push	{r7, lr}
 8019a5a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019a5c:	4b04      	ldr	r3, [pc, #16]	; (8019a70 <sys_arch_protect+0x18>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8019a64:	4618      	mov	r0, r3
 8019a66:	f7ef f883 	bl	8008b70 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019a6a:	2301      	movs	r3, #1
}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	bd80      	pop	{r7, pc}
 8019a70:	2004f6e0 	.word	0x2004f6e0

08019a74 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019a74:	b580      	push	{r7, lr}
 8019a76:	b082      	sub	sp, #8
 8019a78:	af00      	add	r7, sp, #0
 8019a7a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019a7c:	4b04      	ldr	r3, [pc, #16]	; (8019a90 <sys_arch_unprotect+0x1c>)
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	4618      	mov	r0, r3
 8019a82:	f7ef f8d3 	bl	8008c2c <osMutexRelease>
}
 8019a86:	bf00      	nop
 8019a88:	3708      	adds	r7, #8
 8019a8a:	46bd      	mov	sp, r7
 8019a8c:	bd80      	pop	{r7, pc}
 8019a8e:	bf00      	nop
 8019a90:	2004f6e0 	.word	0x2004f6e0

08019a94 <std>:
 8019a94:	2300      	movs	r3, #0
 8019a96:	b510      	push	{r4, lr}
 8019a98:	4604      	mov	r4, r0
 8019a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8019a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019aa2:	6083      	str	r3, [r0, #8]
 8019aa4:	8181      	strh	r1, [r0, #12]
 8019aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8019aa8:	81c2      	strh	r2, [r0, #14]
 8019aaa:	6183      	str	r3, [r0, #24]
 8019aac:	4619      	mov	r1, r3
 8019aae:	2208      	movs	r2, #8
 8019ab0:	305c      	adds	r0, #92	; 0x5c
 8019ab2:	f000 f92a 	bl	8019d0a <memset>
 8019ab6:	4b05      	ldr	r3, [pc, #20]	; (8019acc <std+0x38>)
 8019ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8019aba:	4b05      	ldr	r3, [pc, #20]	; (8019ad0 <std+0x3c>)
 8019abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8019abe:	4b05      	ldr	r3, [pc, #20]	; (8019ad4 <std+0x40>)
 8019ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ac2:	4b05      	ldr	r3, [pc, #20]	; (8019ad8 <std+0x44>)
 8019ac4:	6224      	str	r4, [r4, #32]
 8019ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8019ac8:	bd10      	pop	{r4, pc}
 8019aca:	bf00      	nop
 8019acc:	08019fe5 	.word	0x08019fe5
 8019ad0:	0801a007 	.word	0x0801a007
 8019ad4:	0801a03f 	.word	0x0801a03f
 8019ad8:	0801a063 	.word	0x0801a063

08019adc <_cleanup_r>:
 8019adc:	4901      	ldr	r1, [pc, #4]	; (8019ae4 <_cleanup_r+0x8>)
 8019ade:	f000 b8af 	b.w	8019c40 <_fwalk_reent>
 8019ae2:	bf00      	nop
 8019ae4:	0801a1f9 	.word	0x0801a1f9

08019ae8 <__sfmoreglue>:
 8019ae8:	b570      	push	{r4, r5, r6, lr}
 8019aea:	2268      	movs	r2, #104	; 0x68
 8019aec:	1e4d      	subs	r5, r1, #1
 8019aee:	4355      	muls	r5, r2
 8019af0:	460e      	mov	r6, r1
 8019af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019af6:	f000 f931 	bl	8019d5c <_malloc_r>
 8019afa:	4604      	mov	r4, r0
 8019afc:	b140      	cbz	r0, 8019b10 <__sfmoreglue+0x28>
 8019afe:	2100      	movs	r1, #0
 8019b00:	e9c0 1600 	strd	r1, r6, [r0]
 8019b04:	300c      	adds	r0, #12
 8019b06:	60a0      	str	r0, [r4, #8]
 8019b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b0c:	f000 f8fd 	bl	8019d0a <memset>
 8019b10:	4620      	mov	r0, r4
 8019b12:	bd70      	pop	{r4, r5, r6, pc}

08019b14 <__sfp_lock_acquire>:
 8019b14:	4801      	ldr	r0, [pc, #4]	; (8019b1c <__sfp_lock_acquire+0x8>)
 8019b16:	f000 b8d8 	b.w	8019cca <__retarget_lock_acquire_recursive>
 8019b1a:	bf00      	nop
 8019b1c:	2004f6e5 	.word	0x2004f6e5

08019b20 <__sfp_lock_release>:
 8019b20:	4801      	ldr	r0, [pc, #4]	; (8019b28 <__sfp_lock_release+0x8>)
 8019b22:	f000 b8d3 	b.w	8019ccc <__retarget_lock_release_recursive>
 8019b26:	bf00      	nop
 8019b28:	2004f6e5 	.word	0x2004f6e5

08019b2c <__sinit_lock_acquire>:
 8019b2c:	4801      	ldr	r0, [pc, #4]	; (8019b34 <__sinit_lock_acquire+0x8>)
 8019b2e:	f000 b8cc 	b.w	8019cca <__retarget_lock_acquire_recursive>
 8019b32:	bf00      	nop
 8019b34:	2004f6e6 	.word	0x2004f6e6

08019b38 <__sinit_lock_release>:
 8019b38:	4801      	ldr	r0, [pc, #4]	; (8019b40 <__sinit_lock_release+0x8>)
 8019b3a:	f000 b8c7 	b.w	8019ccc <__retarget_lock_release_recursive>
 8019b3e:	bf00      	nop
 8019b40:	2004f6e6 	.word	0x2004f6e6

08019b44 <__sinit>:
 8019b44:	b510      	push	{r4, lr}
 8019b46:	4604      	mov	r4, r0
 8019b48:	f7ff fff0 	bl	8019b2c <__sinit_lock_acquire>
 8019b4c:	69a3      	ldr	r3, [r4, #24]
 8019b4e:	b11b      	cbz	r3, 8019b58 <__sinit+0x14>
 8019b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019b54:	f7ff bff0 	b.w	8019b38 <__sinit_lock_release>
 8019b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8019b5e:	4b13      	ldr	r3, [pc, #76]	; (8019bac <__sinit+0x68>)
 8019b60:	4a13      	ldr	r2, [pc, #76]	; (8019bb0 <__sinit+0x6c>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8019b66:	42a3      	cmp	r3, r4
 8019b68:	bf04      	itt	eq
 8019b6a:	2301      	moveq	r3, #1
 8019b6c:	61a3      	streq	r3, [r4, #24]
 8019b6e:	4620      	mov	r0, r4
 8019b70:	f000 f820 	bl	8019bb4 <__sfp>
 8019b74:	6060      	str	r0, [r4, #4]
 8019b76:	4620      	mov	r0, r4
 8019b78:	f000 f81c 	bl	8019bb4 <__sfp>
 8019b7c:	60a0      	str	r0, [r4, #8]
 8019b7e:	4620      	mov	r0, r4
 8019b80:	f000 f818 	bl	8019bb4 <__sfp>
 8019b84:	2200      	movs	r2, #0
 8019b86:	60e0      	str	r0, [r4, #12]
 8019b88:	2104      	movs	r1, #4
 8019b8a:	6860      	ldr	r0, [r4, #4]
 8019b8c:	f7ff ff82 	bl	8019a94 <std>
 8019b90:	68a0      	ldr	r0, [r4, #8]
 8019b92:	2201      	movs	r2, #1
 8019b94:	2109      	movs	r1, #9
 8019b96:	f7ff ff7d 	bl	8019a94 <std>
 8019b9a:	68e0      	ldr	r0, [r4, #12]
 8019b9c:	2202      	movs	r2, #2
 8019b9e:	2112      	movs	r1, #18
 8019ba0:	f7ff ff78 	bl	8019a94 <std>
 8019ba4:	2301      	movs	r3, #1
 8019ba6:	61a3      	str	r3, [r4, #24]
 8019ba8:	e7d2      	b.n	8019b50 <__sinit+0xc>
 8019baa:	bf00      	nop
 8019bac:	0801e3f4 	.word	0x0801e3f4
 8019bb0:	08019add 	.word	0x08019add

08019bb4 <__sfp>:
 8019bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bb6:	4607      	mov	r7, r0
 8019bb8:	f7ff ffac 	bl	8019b14 <__sfp_lock_acquire>
 8019bbc:	4b1e      	ldr	r3, [pc, #120]	; (8019c38 <__sfp+0x84>)
 8019bbe:	681e      	ldr	r6, [r3, #0]
 8019bc0:	69b3      	ldr	r3, [r6, #24]
 8019bc2:	b913      	cbnz	r3, 8019bca <__sfp+0x16>
 8019bc4:	4630      	mov	r0, r6
 8019bc6:	f7ff ffbd 	bl	8019b44 <__sinit>
 8019bca:	3648      	adds	r6, #72	; 0x48
 8019bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019bd0:	3b01      	subs	r3, #1
 8019bd2:	d503      	bpl.n	8019bdc <__sfp+0x28>
 8019bd4:	6833      	ldr	r3, [r6, #0]
 8019bd6:	b30b      	cbz	r3, 8019c1c <__sfp+0x68>
 8019bd8:	6836      	ldr	r6, [r6, #0]
 8019bda:	e7f7      	b.n	8019bcc <__sfp+0x18>
 8019bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019be0:	b9d5      	cbnz	r5, 8019c18 <__sfp+0x64>
 8019be2:	4b16      	ldr	r3, [pc, #88]	; (8019c3c <__sfp+0x88>)
 8019be4:	60e3      	str	r3, [r4, #12]
 8019be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019bea:	6665      	str	r5, [r4, #100]	; 0x64
 8019bec:	f000 f86c 	bl	8019cc8 <__retarget_lock_init_recursive>
 8019bf0:	f7ff ff96 	bl	8019b20 <__sfp_lock_release>
 8019bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019bfc:	6025      	str	r5, [r4, #0]
 8019bfe:	61a5      	str	r5, [r4, #24]
 8019c00:	2208      	movs	r2, #8
 8019c02:	4629      	mov	r1, r5
 8019c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019c08:	f000 f87f 	bl	8019d0a <memset>
 8019c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c14:	4620      	mov	r0, r4
 8019c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c18:	3468      	adds	r4, #104	; 0x68
 8019c1a:	e7d9      	b.n	8019bd0 <__sfp+0x1c>
 8019c1c:	2104      	movs	r1, #4
 8019c1e:	4638      	mov	r0, r7
 8019c20:	f7ff ff62 	bl	8019ae8 <__sfmoreglue>
 8019c24:	4604      	mov	r4, r0
 8019c26:	6030      	str	r0, [r6, #0]
 8019c28:	2800      	cmp	r0, #0
 8019c2a:	d1d5      	bne.n	8019bd8 <__sfp+0x24>
 8019c2c:	f7ff ff78 	bl	8019b20 <__sfp_lock_release>
 8019c30:	230c      	movs	r3, #12
 8019c32:	603b      	str	r3, [r7, #0]
 8019c34:	e7ee      	b.n	8019c14 <__sfp+0x60>
 8019c36:	bf00      	nop
 8019c38:	0801e3f4 	.word	0x0801e3f4
 8019c3c:	ffff0001 	.word	0xffff0001

08019c40 <_fwalk_reent>:
 8019c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c44:	4606      	mov	r6, r0
 8019c46:	4688      	mov	r8, r1
 8019c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c4c:	2700      	movs	r7, #0
 8019c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019c52:	f1b9 0901 	subs.w	r9, r9, #1
 8019c56:	d505      	bpl.n	8019c64 <_fwalk_reent+0x24>
 8019c58:	6824      	ldr	r4, [r4, #0]
 8019c5a:	2c00      	cmp	r4, #0
 8019c5c:	d1f7      	bne.n	8019c4e <_fwalk_reent+0xe>
 8019c5e:	4638      	mov	r0, r7
 8019c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c64:	89ab      	ldrh	r3, [r5, #12]
 8019c66:	2b01      	cmp	r3, #1
 8019c68:	d907      	bls.n	8019c7a <_fwalk_reent+0x3a>
 8019c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c6e:	3301      	adds	r3, #1
 8019c70:	d003      	beq.n	8019c7a <_fwalk_reent+0x3a>
 8019c72:	4629      	mov	r1, r5
 8019c74:	4630      	mov	r0, r6
 8019c76:	47c0      	blx	r8
 8019c78:	4307      	orrs	r7, r0
 8019c7a:	3568      	adds	r5, #104	; 0x68
 8019c7c:	e7e9      	b.n	8019c52 <_fwalk_reent+0x12>
	...

08019c80 <__libc_init_array>:
 8019c80:	b570      	push	{r4, r5, r6, lr}
 8019c82:	4d0d      	ldr	r5, [pc, #52]	; (8019cb8 <__libc_init_array+0x38>)
 8019c84:	4c0d      	ldr	r4, [pc, #52]	; (8019cbc <__libc_init_array+0x3c>)
 8019c86:	1b64      	subs	r4, r4, r5
 8019c88:	10a4      	asrs	r4, r4, #2
 8019c8a:	2600      	movs	r6, #0
 8019c8c:	42a6      	cmp	r6, r4
 8019c8e:	d109      	bne.n	8019ca4 <__libc_init_array+0x24>
 8019c90:	4d0b      	ldr	r5, [pc, #44]	; (8019cc0 <__libc_init_array+0x40>)
 8019c92:	4c0c      	ldr	r4, [pc, #48]	; (8019cc4 <__libc_init_array+0x44>)
 8019c94:	f001 f802 	bl	801ac9c <_init>
 8019c98:	1b64      	subs	r4, r4, r5
 8019c9a:	10a4      	asrs	r4, r4, #2
 8019c9c:	2600      	movs	r6, #0
 8019c9e:	42a6      	cmp	r6, r4
 8019ca0:	d105      	bne.n	8019cae <__libc_init_array+0x2e>
 8019ca2:	bd70      	pop	{r4, r5, r6, pc}
 8019ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ca8:	4798      	blx	r3
 8019caa:	3601      	adds	r6, #1
 8019cac:	e7ee      	b.n	8019c8c <__libc_init_array+0xc>
 8019cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8019cb2:	4798      	blx	r3
 8019cb4:	3601      	adds	r6, #1
 8019cb6:	e7f2      	b.n	8019c9e <__libc_init_array+0x1e>
 8019cb8:	0801e4e4 	.word	0x0801e4e4
 8019cbc:	0801e4e4 	.word	0x0801e4e4
 8019cc0:	0801e4e4 	.word	0x0801e4e4
 8019cc4:	0801e4e8 	.word	0x0801e4e8

08019cc8 <__retarget_lock_init_recursive>:
 8019cc8:	4770      	bx	lr

08019cca <__retarget_lock_acquire_recursive>:
 8019cca:	4770      	bx	lr

08019ccc <__retarget_lock_release_recursive>:
 8019ccc:	4770      	bx	lr

08019cce <memcmp>:
 8019cce:	b510      	push	{r4, lr}
 8019cd0:	3901      	subs	r1, #1
 8019cd2:	4402      	add	r2, r0
 8019cd4:	4290      	cmp	r0, r2
 8019cd6:	d101      	bne.n	8019cdc <memcmp+0xe>
 8019cd8:	2000      	movs	r0, #0
 8019cda:	e005      	b.n	8019ce8 <memcmp+0x1a>
 8019cdc:	7803      	ldrb	r3, [r0, #0]
 8019cde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019ce2:	42a3      	cmp	r3, r4
 8019ce4:	d001      	beq.n	8019cea <memcmp+0x1c>
 8019ce6:	1b18      	subs	r0, r3, r4
 8019ce8:	bd10      	pop	{r4, pc}
 8019cea:	3001      	adds	r0, #1
 8019cec:	e7f2      	b.n	8019cd4 <memcmp+0x6>

08019cee <memcpy>:
 8019cee:	440a      	add	r2, r1
 8019cf0:	4291      	cmp	r1, r2
 8019cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019cf6:	d100      	bne.n	8019cfa <memcpy+0xc>
 8019cf8:	4770      	bx	lr
 8019cfa:	b510      	push	{r4, lr}
 8019cfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019d00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019d04:	4291      	cmp	r1, r2
 8019d06:	d1f9      	bne.n	8019cfc <memcpy+0xe>
 8019d08:	bd10      	pop	{r4, pc}

08019d0a <memset>:
 8019d0a:	4402      	add	r2, r0
 8019d0c:	4603      	mov	r3, r0
 8019d0e:	4293      	cmp	r3, r2
 8019d10:	d100      	bne.n	8019d14 <memset+0xa>
 8019d12:	4770      	bx	lr
 8019d14:	f803 1b01 	strb.w	r1, [r3], #1
 8019d18:	e7f9      	b.n	8019d0e <memset+0x4>
	...

08019d1c <sbrk_aligned>:
 8019d1c:	b570      	push	{r4, r5, r6, lr}
 8019d1e:	4e0e      	ldr	r6, [pc, #56]	; (8019d58 <sbrk_aligned+0x3c>)
 8019d20:	460c      	mov	r4, r1
 8019d22:	6831      	ldr	r1, [r6, #0]
 8019d24:	4605      	mov	r5, r0
 8019d26:	b911      	cbnz	r1, 8019d2e <sbrk_aligned+0x12>
 8019d28:	f000 f94c 	bl	8019fc4 <_sbrk_r>
 8019d2c:	6030      	str	r0, [r6, #0]
 8019d2e:	4621      	mov	r1, r4
 8019d30:	4628      	mov	r0, r5
 8019d32:	f000 f947 	bl	8019fc4 <_sbrk_r>
 8019d36:	1c43      	adds	r3, r0, #1
 8019d38:	d00a      	beq.n	8019d50 <sbrk_aligned+0x34>
 8019d3a:	1cc4      	adds	r4, r0, #3
 8019d3c:	f024 0403 	bic.w	r4, r4, #3
 8019d40:	42a0      	cmp	r0, r4
 8019d42:	d007      	beq.n	8019d54 <sbrk_aligned+0x38>
 8019d44:	1a21      	subs	r1, r4, r0
 8019d46:	4628      	mov	r0, r5
 8019d48:	f000 f93c 	bl	8019fc4 <_sbrk_r>
 8019d4c:	3001      	adds	r0, #1
 8019d4e:	d101      	bne.n	8019d54 <sbrk_aligned+0x38>
 8019d50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019d54:	4620      	mov	r0, r4
 8019d56:	bd70      	pop	{r4, r5, r6, pc}
 8019d58:	2004f6ec 	.word	0x2004f6ec

08019d5c <_malloc_r>:
 8019d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d60:	1ccd      	adds	r5, r1, #3
 8019d62:	f025 0503 	bic.w	r5, r5, #3
 8019d66:	3508      	adds	r5, #8
 8019d68:	2d0c      	cmp	r5, #12
 8019d6a:	bf38      	it	cc
 8019d6c:	250c      	movcc	r5, #12
 8019d6e:	2d00      	cmp	r5, #0
 8019d70:	4607      	mov	r7, r0
 8019d72:	db01      	blt.n	8019d78 <_malloc_r+0x1c>
 8019d74:	42a9      	cmp	r1, r5
 8019d76:	d905      	bls.n	8019d84 <_malloc_r+0x28>
 8019d78:	230c      	movs	r3, #12
 8019d7a:	603b      	str	r3, [r7, #0]
 8019d7c:	2600      	movs	r6, #0
 8019d7e:	4630      	mov	r0, r6
 8019d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d84:	4e2e      	ldr	r6, [pc, #184]	; (8019e40 <_malloc_r+0xe4>)
 8019d86:	f000 fa9f 	bl	801a2c8 <__malloc_lock>
 8019d8a:	6833      	ldr	r3, [r6, #0]
 8019d8c:	461c      	mov	r4, r3
 8019d8e:	bb34      	cbnz	r4, 8019dde <_malloc_r+0x82>
 8019d90:	4629      	mov	r1, r5
 8019d92:	4638      	mov	r0, r7
 8019d94:	f7ff ffc2 	bl	8019d1c <sbrk_aligned>
 8019d98:	1c43      	adds	r3, r0, #1
 8019d9a:	4604      	mov	r4, r0
 8019d9c:	d14d      	bne.n	8019e3a <_malloc_r+0xde>
 8019d9e:	6834      	ldr	r4, [r6, #0]
 8019da0:	4626      	mov	r6, r4
 8019da2:	2e00      	cmp	r6, #0
 8019da4:	d140      	bne.n	8019e28 <_malloc_r+0xcc>
 8019da6:	6823      	ldr	r3, [r4, #0]
 8019da8:	4631      	mov	r1, r6
 8019daa:	4638      	mov	r0, r7
 8019dac:	eb04 0803 	add.w	r8, r4, r3
 8019db0:	f000 f908 	bl	8019fc4 <_sbrk_r>
 8019db4:	4580      	cmp	r8, r0
 8019db6:	d13a      	bne.n	8019e2e <_malloc_r+0xd2>
 8019db8:	6821      	ldr	r1, [r4, #0]
 8019dba:	3503      	adds	r5, #3
 8019dbc:	1a6d      	subs	r5, r5, r1
 8019dbe:	f025 0503 	bic.w	r5, r5, #3
 8019dc2:	3508      	adds	r5, #8
 8019dc4:	2d0c      	cmp	r5, #12
 8019dc6:	bf38      	it	cc
 8019dc8:	250c      	movcc	r5, #12
 8019dca:	4629      	mov	r1, r5
 8019dcc:	4638      	mov	r0, r7
 8019dce:	f7ff ffa5 	bl	8019d1c <sbrk_aligned>
 8019dd2:	3001      	adds	r0, #1
 8019dd4:	d02b      	beq.n	8019e2e <_malloc_r+0xd2>
 8019dd6:	6823      	ldr	r3, [r4, #0]
 8019dd8:	442b      	add	r3, r5
 8019dda:	6023      	str	r3, [r4, #0]
 8019ddc:	e00e      	b.n	8019dfc <_malloc_r+0xa0>
 8019dde:	6822      	ldr	r2, [r4, #0]
 8019de0:	1b52      	subs	r2, r2, r5
 8019de2:	d41e      	bmi.n	8019e22 <_malloc_r+0xc6>
 8019de4:	2a0b      	cmp	r2, #11
 8019de6:	d916      	bls.n	8019e16 <_malloc_r+0xba>
 8019de8:	1961      	adds	r1, r4, r5
 8019dea:	42a3      	cmp	r3, r4
 8019dec:	6025      	str	r5, [r4, #0]
 8019dee:	bf18      	it	ne
 8019df0:	6059      	strne	r1, [r3, #4]
 8019df2:	6863      	ldr	r3, [r4, #4]
 8019df4:	bf08      	it	eq
 8019df6:	6031      	streq	r1, [r6, #0]
 8019df8:	5162      	str	r2, [r4, r5]
 8019dfa:	604b      	str	r3, [r1, #4]
 8019dfc:	4638      	mov	r0, r7
 8019dfe:	f104 060b 	add.w	r6, r4, #11
 8019e02:	f000 fa67 	bl	801a2d4 <__malloc_unlock>
 8019e06:	f026 0607 	bic.w	r6, r6, #7
 8019e0a:	1d23      	adds	r3, r4, #4
 8019e0c:	1af2      	subs	r2, r6, r3
 8019e0e:	d0b6      	beq.n	8019d7e <_malloc_r+0x22>
 8019e10:	1b9b      	subs	r3, r3, r6
 8019e12:	50a3      	str	r3, [r4, r2]
 8019e14:	e7b3      	b.n	8019d7e <_malloc_r+0x22>
 8019e16:	6862      	ldr	r2, [r4, #4]
 8019e18:	42a3      	cmp	r3, r4
 8019e1a:	bf0c      	ite	eq
 8019e1c:	6032      	streq	r2, [r6, #0]
 8019e1e:	605a      	strne	r2, [r3, #4]
 8019e20:	e7ec      	b.n	8019dfc <_malloc_r+0xa0>
 8019e22:	4623      	mov	r3, r4
 8019e24:	6864      	ldr	r4, [r4, #4]
 8019e26:	e7b2      	b.n	8019d8e <_malloc_r+0x32>
 8019e28:	4634      	mov	r4, r6
 8019e2a:	6876      	ldr	r6, [r6, #4]
 8019e2c:	e7b9      	b.n	8019da2 <_malloc_r+0x46>
 8019e2e:	230c      	movs	r3, #12
 8019e30:	603b      	str	r3, [r7, #0]
 8019e32:	4638      	mov	r0, r7
 8019e34:	f000 fa4e 	bl	801a2d4 <__malloc_unlock>
 8019e38:	e7a1      	b.n	8019d7e <_malloc_r+0x22>
 8019e3a:	6025      	str	r5, [r4, #0]
 8019e3c:	e7de      	b.n	8019dfc <_malloc_r+0xa0>
 8019e3e:	bf00      	nop
 8019e40:	2004f6e8 	.word	0x2004f6e8

08019e44 <iprintf>:
 8019e44:	b40f      	push	{r0, r1, r2, r3}
 8019e46:	4b0a      	ldr	r3, [pc, #40]	; (8019e70 <iprintf+0x2c>)
 8019e48:	b513      	push	{r0, r1, r4, lr}
 8019e4a:	681c      	ldr	r4, [r3, #0]
 8019e4c:	b124      	cbz	r4, 8019e58 <iprintf+0x14>
 8019e4e:	69a3      	ldr	r3, [r4, #24]
 8019e50:	b913      	cbnz	r3, 8019e58 <iprintf+0x14>
 8019e52:	4620      	mov	r0, r4
 8019e54:	f7ff fe76 	bl	8019b44 <__sinit>
 8019e58:	ab05      	add	r3, sp, #20
 8019e5a:	9a04      	ldr	r2, [sp, #16]
 8019e5c:	68a1      	ldr	r1, [r4, #8]
 8019e5e:	9301      	str	r3, [sp, #4]
 8019e60:	4620      	mov	r0, r4
 8019e62:	f000 fab3 	bl	801a3cc <_vfiprintf_r>
 8019e66:	b002      	add	sp, #8
 8019e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e6c:	b004      	add	sp, #16
 8019e6e:	4770      	bx	lr
 8019e70:	20001a5c 	.word	0x20001a5c

08019e74 <rand>:
 8019e74:	4b16      	ldr	r3, [pc, #88]	; (8019ed0 <rand+0x5c>)
 8019e76:	b510      	push	{r4, lr}
 8019e78:	681c      	ldr	r4, [r3, #0]
 8019e7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019e7c:	b9b3      	cbnz	r3, 8019eac <rand+0x38>
 8019e7e:	2018      	movs	r0, #24
 8019e80:	f000 fa1a 	bl	801a2b8 <malloc>
 8019e84:	63a0      	str	r0, [r4, #56]	; 0x38
 8019e86:	b928      	cbnz	r0, 8019e94 <rand+0x20>
 8019e88:	4602      	mov	r2, r0
 8019e8a:	4b12      	ldr	r3, [pc, #72]	; (8019ed4 <rand+0x60>)
 8019e8c:	4812      	ldr	r0, [pc, #72]	; (8019ed8 <rand+0x64>)
 8019e8e:	214e      	movs	r1, #78	; 0x4e
 8019e90:	f000 f8fe 	bl	801a090 <__assert_func>
 8019e94:	4a11      	ldr	r2, [pc, #68]	; (8019edc <rand+0x68>)
 8019e96:	4b12      	ldr	r3, [pc, #72]	; (8019ee0 <rand+0x6c>)
 8019e98:	e9c0 2300 	strd	r2, r3, [r0]
 8019e9c:	4b11      	ldr	r3, [pc, #68]	; (8019ee4 <rand+0x70>)
 8019e9e:	6083      	str	r3, [r0, #8]
 8019ea0:	230b      	movs	r3, #11
 8019ea2:	8183      	strh	r3, [r0, #12]
 8019ea4:	2201      	movs	r2, #1
 8019ea6:	2300      	movs	r3, #0
 8019ea8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019eac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8019eae:	4a0e      	ldr	r2, [pc, #56]	; (8019ee8 <rand+0x74>)
 8019eb0:	6920      	ldr	r0, [r4, #16]
 8019eb2:	6963      	ldr	r3, [r4, #20]
 8019eb4:	490d      	ldr	r1, [pc, #52]	; (8019eec <rand+0x78>)
 8019eb6:	4342      	muls	r2, r0
 8019eb8:	fb01 2203 	mla	r2, r1, r3, r2
 8019ebc:	fba0 0101 	umull	r0, r1, r0, r1
 8019ec0:	1c43      	adds	r3, r0, #1
 8019ec2:	eb42 0001 	adc.w	r0, r2, r1
 8019ec6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8019eca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019ece:	bd10      	pop	{r4, pc}
 8019ed0:	20001a5c 	.word	0x20001a5c
 8019ed4:	0801e3f8 	.word	0x0801e3f8
 8019ed8:	0801e40f 	.word	0x0801e40f
 8019edc:	abcd330e 	.word	0xabcd330e
 8019ee0:	e66d1234 	.word	0xe66d1234
 8019ee4:	0005deec 	.word	0x0005deec
 8019ee8:	5851f42d 	.word	0x5851f42d
 8019eec:	4c957f2d 	.word	0x4c957f2d

08019ef0 <cleanup_glue>:
 8019ef0:	b538      	push	{r3, r4, r5, lr}
 8019ef2:	460c      	mov	r4, r1
 8019ef4:	6809      	ldr	r1, [r1, #0]
 8019ef6:	4605      	mov	r5, r0
 8019ef8:	b109      	cbz	r1, 8019efe <cleanup_glue+0xe>
 8019efa:	f7ff fff9 	bl	8019ef0 <cleanup_glue>
 8019efe:	4621      	mov	r1, r4
 8019f00:	4628      	mov	r0, r5
 8019f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f06:	f000 b9eb 	b.w	801a2e0 <_free_r>
	...

08019f0c <_reclaim_reent>:
 8019f0c:	4b2c      	ldr	r3, [pc, #176]	; (8019fc0 <_reclaim_reent+0xb4>)
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	4283      	cmp	r3, r0
 8019f12:	b570      	push	{r4, r5, r6, lr}
 8019f14:	4604      	mov	r4, r0
 8019f16:	d051      	beq.n	8019fbc <_reclaim_reent+0xb0>
 8019f18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019f1a:	b143      	cbz	r3, 8019f2e <_reclaim_reent+0x22>
 8019f1c:	68db      	ldr	r3, [r3, #12]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d14a      	bne.n	8019fb8 <_reclaim_reent+0xac>
 8019f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f24:	6819      	ldr	r1, [r3, #0]
 8019f26:	b111      	cbz	r1, 8019f2e <_reclaim_reent+0x22>
 8019f28:	4620      	mov	r0, r4
 8019f2a:	f000 f9d9 	bl	801a2e0 <_free_r>
 8019f2e:	6961      	ldr	r1, [r4, #20]
 8019f30:	b111      	cbz	r1, 8019f38 <_reclaim_reent+0x2c>
 8019f32:	4620      	mov	r0, r4
 8019f34:	f000 f9d4 	bl	801a2e0 <_free_r>
 8019f38:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019f3a:	b111      	cbz	r1, 8019f42 <_reclaim_reent+0x36>
 8019f3c:	4620      	mov	r0, r4
 8019f3e:	f000 f9cf 	bl	801a2e0 <_free_r>
 8019f42:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019f44:	b111      	cbz	r1, 8019f4c <_reclaim_reent+0x40>
 8019f46:	4620      	mov	r0, r4
 8019f48:	f000 f9ca 	bl	801a2e0 <_free_r>
 8019f4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019f4e:	b111      	cbz	r1, 8019f56 <_reclaim_reent+0x4a>
 8019f50:	4620      	mov	r0, r4
 8019f52:	f000 f9c5 	bl	801a2e0 <_free_r>
 8019f56:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019f58:	b111      	cbz	r1, 8019f60 <_reclaim_reent+0x54>
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	f000 f9c0 	bl	801a2e0 <_free_r>
 8019f60:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019f62:	b111      	cbz	r1, 8019f6a <_reclaim_reent+0x5e>
 8019f64:	4620      	mov	r0, r4
 8019f66:	f000 f9bb 	bl	801a2e0 <_free_r>
 8019f6a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019f6c:	b111      	cbz	r1, 8019f74 <_reclaim_reent+0x68>
 8019f6e:	4620      	mov	r0, r4
 8019f70:	f000 f9b6 	bl	801a2e0 <_free_r>
 8019f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019f76:	b111      	cbz	r1, 8019f7e <_reclaim_reent+0x72>
 8019f78:	4620      	mov	r0, r4
 8019f7a:	f000 f9b1 	bl	801a2e0 <_free_r>
 8019f7e:	69a3      	ldr	r3, [r4, #24]
 8019f80:	b1e3      	cbz	r3, 8019fbc <_reclaim_reent+0xb0>
 8019f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019f84:	4620      	mov	r0, r4
 8019f86:	4798      	blx	r3
 8019f88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019f8a:	b1b9      	cbz	r1, 8019fbc <_reclaim_reent+0xb0>
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019f92:	f7ff bfad 	b.w	8019ef0 <cleanup_glue>
 8019f96:	5949      	ldr	r1, [r1, r5]
 8019f98:	b941      	cbnz	r1, 8019fac <_reclaim_reent+0xa0>
 8019f9a:	3504      	adds	r5, #4
 8019f9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019f9e:	2d80      	cmp	r5, #128	; 0x80
 8019fa0:	68d9      	ldr	r1, [r3, #12]
 8019fa2:	d1f8      	bne.n	8019f96 <_reclaim_reent+0x8a>
 8019fa4:	4620      	mov	r0, r4
 8019fa6:	f000 f99b 	bl	801a2e0 <_free_r>
 8019faa:	e7ba      	b.n	8019f22 <_reclaim_reent+0x16>
 8019fac:	680e      	ldr	r6, [r1, #0]
 8019fae:	4620      	mov	r0, r4
 8019fb0:	f000 f996 	bl	801a2e0 <_free_r>
 8019fb4:	4631      	mov	r1, r6
 8019fb6:	e7ef      	b.n	8019f98 <_reclaim_reent+0x8c>
 8019fb8:	2500      	movs	r5, #0
 8019fba:	e7ef      	b.n	8019f9c <_reclaim_reent+0x90>
 8019fbc:	bd70      	pop	{r4, r5, r6, pc}
 8019fbe:	bf00      	nop
 8019fc0:	20001a5c 	.word	0x20001a5c

08019fc4 <_sbrk_r>:
 8019fc4:	b538      	push	{r3, r4, r5, lr}
 8019fc6:	4d06      	ldr	r5, [pc, #24]	; (8019fe0 <_sbrk_r+0x1c>)
 8019fc8:	2300      	movs	r3, #0
 8019fca:	4604      	mov	r4, r0
 8019fcc:	4608      	mov	r0, r1
 8019fce:	602b      	str	r3, [r5, #0]
 8019fd0:	f7ea f9d6 	bl	8004380 <_sbrk>
 8019fd4:	1c43      	adds	r3, r0, #1
 8019fd6:	d102      	bne.n	8019fde <_sbrk_r+0x1a>
 8019fd8:	682b      	ldr	r3, [r5, #0]
 8019fda:	b103      	cbz	r3, 8019fde <_sbrk_r+0x1a>
 8019fdc:	6023      	str	r3, [r4, #0]
 8019fde:	bd38      	pop	{r3, r4, r5, pc}
 8019fe0:	2004f6f0 	.word	0x2004f6f0

08019fe4 <__sread>:
 8019fe4:	b510      	push	{r4, lr}
 8019fe6:	460c      	mov	r4, r1
 8019fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fec:	f000 fcb2 	bl	801a954 <_read_r>
 8019ff0:	2800      	cmp	r0, #0
 8019ff2:	bfab      	itete	ge
 8019ff4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8019ff8:	181b      	addge	r3, r3, r0
 8019ffa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019ffe:	bfac      	ite	ge
 801a000:	6563      	strge	r3, [r4, #84]	; 0x54
 801a002:	81a3      	strhlt	r3, [r4, #12]
 801a004:	bd10      	pop	{r4, pc}

0801a006 <__swrite>:
 801a006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a00a:	461f      	mov	r7, r3
 801a00c:	898b      	ldrh	r3, [r1, #12]
 801a00e:	05db      	lsls	r3, r3, #23
 801a010:	4605      	mov	r5, r0
 801a012:	460c      	mov	r4, r1
 801a014:	4616      	mov	r6, r2
 801a016:	d505      	bpl.n	801a024 <__swrite+0x1e>
 801a018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a01c:	2302      	movs	r3, #2
 801a01e:	2200      	movs	r2, #0
 801a020:	f000 f938 	bl	801a294 <_lseek_r>
 801a024:	89a3      	ldrh	r3, [r4, #12]
 801a026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a02a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a02e:	81a3      	strh	r3, [r4, #12]
 801a030:	4632      	mov	r2, r6
 801a032:	463b      	mov	r3, r7
 801a034:	4628      	mov	r0, r5
 801a036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a03a:	f000 b817 	b.w	801a06c <_write_r>

0801a03e <__sseek>:
 801a03e:	b510      	push	{r4, lr}
 801a040:	460c      	mov	r4, r1
 801a042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a046:	f000 f925 	bl	801a294 <_lseek_r>
 801a04a:	1c43      	adds	r3, r0, #1
 801a04c:	89a3      	ldrh	r3, [r4, #12]
 801a04e:	bf15      	itete	ne
 801a050:	6560      	strne	r0, [r4, #84]	; 0x54
 801a052:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a056:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a05a:	81a3      	strheq	r3, [r4, #12]
 801a05c:	bf18      	it	ne
 801a05e:	81a3      	strhne	r3, [r4, #12]
 801a060:	bd10      	pop	{r4, pc}

0801a062 <__sclose>:
 801a062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a066:	f000 b831 	b.w	801a0cc <_close_r>
	...

0801a06c <_write_r>:
 801a06c:	b538      	push	{r3, r4, r5, lr}
 801a06e:	4d07      	ldr	r5, [pc, #28]	; (801a08c <_write_r+0x20>)
 801a070:	4604      	mov	r4, r0
 801a072:	4608      	mov	r0, r1
 801a074:	4611      	mov	r1, r2
 801a076:	2200      	movs	r2, #0
 801a078:	602a      	str	r2, [r5, #0]
 801a07a:	461a      	mov	r2, r3
 801a07c:	f7ea f92f 	bl	80042de <_write>
 801a080:	1c43      	adds	r3, r0, #1
 801a082:	d102      	bne.n	801a08a <_write_r+0x1e>
 801a084:	682b      	ldr	r3, [r5, #0]
 801a086:	b103      	cbz	r3, 801a08a <_write_r+0x1e>
 801a088:	6023      	str	r3, [r4, #0]
 801a08a:	bd38      	pop	{r3, r4, r5, pc}
 801a08c:	2004f6f0 	.word	0x2004f6f0

0801a090 <__assert_func>:
 801a090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a092:	4614      	mov	r4, r2
 801a094:	461a      	mov	r2, r3
 801a096:	4b09      	ldr	r3, [pc, #36]	; (801a0bc <__assert_func+0x2c>)
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	4605      	mov	r5, r0
 801a09c:	68d8      	ldr	r0, [r3, #12]
 801a09e:	b14c      	cbz	r4, 801a0b4 <__assert_func+0x24>
 801a0a0:	4b07      	ldr	r3, [pc, #28]	; (801a0c0 <__assert_func+0x30>)
 801a0a2:	9100      	str	r1, [sp, #0]
 801a0a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a0a8:	4906      	ldr	r1, [pc, #24]	; (801a0c4 <__assert_func+0x34>)
 801a0aa:	462b      	mov	r3, r5
 801a0ac:	f000 f8e0 	bl	801a270 <fiprintf>
 801a0b0:	f000 fd22 	bl	801aaf8 <abort>
 801a0b4:	4b04      	ldr	r3, [pc, #16]	; (801a0c8 <__assert_func+0x38>)
 801a0b6:	461c      	mov	r4, r3
 801a0b8:	e7f3      	b.n	801a0a2 <__assert_func+0x12>
 801a0ba:	bf00      	nop
 801a0bc:	20001a5c 	.word	0x20001a5c
 801a0c0:	0801e46a 	.word	0x0801e46a
 801a0c4:	0801e477 	.word	0x0801e477
 801a0c8:	0801e4a5 	.word	0x0801e4a5

0801a0cc <_close_r>:
 801a0cc:	b538      	push	{r3, r4, r5, lr}
 801a0ce:	4d06      	ldr	r5, [pc, #24]	; (801a0e8 <_close_r+0x1c>)
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	4604      	mov	r4, r0
 801a0d4:	4608      	mov	r0, r1
 801a0d6:	602b      	str	r3, [r5, #0]
 801a0d8:	f7ea f91d 	bl	8004316 <_close>
 801a0dc:	1c43      	adds	r3, r0, #1
 801a0de:	d102      	bne.n	801a0e6 <_close_r+0x1a>
 801a0e0:	682b      	ldr	r3, [r5, #0]
 801a0e2:	b103      	cbz	r3, 801a0e6 <_close_r+0x1a>
 801a0e4:	6023      	str	r3, [r4, #0]
 801a0e6:	bd38      	pop	{r3, r4, r5, pc}
 801a0e8:	2004f6f0 	.word	0x2004f6f0

0801a0ec <__sflush_r>:
 801a0ec:	898a      	ldrh	r2, [r1, #12]
 801a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0f2:	4605      	mov	r5, r0
 801a0f4:	0710      	lsls	r0, r2, #28
 801a0f6:	460c      	mov	r4, r1
 801a0f8:	d458      	bmi.n	801a1ac <__sflush_r+0xc0>
 801a0fa:	684b      	ldr	r3, [r1, #4]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	dc05      	bgt.n	801a10c <__sflush_r+0x20>
 801a100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a102:	2b00      	cmp	r3, #0
 801a104:	dc02      	bgt.n	801a10c <__sflush_r+0x20>
 801a106:	2000      	movs	r0, #0
 801a108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a10e:	2e00      	cmp	r6, #0
 801a110:	d0f9      	beq.n	801a106 <__sflush_r+0x1a>
 801a112:	2300      	movs	r3, #0
 801a114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a118:	682f      	ldr	r7, [r5, #0]
 801a11a:	602b      	str	r3, [r5, #0]
 801a11c:	d032      	beq.n	801a184 <__sflush_r+0x98>
 801a11e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a120:	89a3      	ldrh	r3, [r4, #12]
 801a122:	075a      	lsls	r2, r3, #29
 801a124:	d505      	bpl.n	801a132 <__sflush_r+0x46>
 801a126:	6863      	ldr	r3, [r4, #4]
 801a128:	1ac0      	subs	r0, r0, r3
 801a12a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a12c:	b10b      	cbz	r3, 801a132 <__sflush_r+0x46>
 801a12e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a130:	1ac0      	subs	r0, r0, r3
 801a132:	2300      	movs	r3, #0
 801a134:	4602      	mov	r2, r0
 801a136:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a138:	6a21      	ldr	r1, [r4, #32]
 801a13a:	4628      	mov	r0, r5
 801a13c:	47b0      	blx	r6
 801a13e:	1c43      	adds	r3, r0, #1
 801a140:	89a3      	ldrh	r3, [r4, #12]
 801a142:	d106      	bne.n	801a152 <__sflush_r+0x66>
 801a144:	6829      	ldr	r1, [r5, #0]
 801a146:	291d      	cmp	r1, #29
 801a148:	d82c      	bhi.n	801a1a4 <__sflush_r+0xb8>
 801a14a:	4a2a      	ldr	r2, [pc, #168]	; (801a1f4 <__sflush_r+0x108>)
 801a14c:	40ca      	lsrs	r2, r1
 801a14e:	07d6      	lsls	r6, r2, #31
 801a150:	d528      	bpl.n	801a1a4 <__sflush_r+0xb8>
 801a152:	2200      	movs	r2, #0
 801a154:	6062      	str	r2, [r4, #4]
 801a156:	04d9      	lsls	r1, r3, #19
 801a158:	6922      	ldr	r2, [r4, #16]
 801a15a:	6022      	str	r2, [r4, #0]
 801a15c:	d504      	bpl.n	801a168 <__sflush_r+0x7c>
 801a15e:	1c42      	adds	r2, r0, #1
 801a160:	d101      	bne.n	801a166 <__sflush_r+0x7a>
 801a162:	682b      	ldr	r3, [r5, #0]
 801a164:	b903      	cbnz	r3, 801a168 <__sflush_r+0x7c>
 801a166:	6560      	str	r0, [r4, #84]	; 0x54
 801a168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a16a:	602f      	str	r7, [r5, #0]
 801a16c:	2900      	cmp	r1, #0
 801a16e:	d0ca      	beq.n	801a106 <__sflush_r+0x1a>
 801a170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a174:	4299      	cmp	r1, r3
 801a176:	d002      	beq.n	801a17e <__sflush_r+0x92>
 801a178:	4628      	mov	r0, r5
 801a17a:	f000 f8b1 	bl	801a2e0 <_free_r>
 801a17e:	2000      	movs	r0, #0
 801a180:	6360      	str	r0, [r4, #52]	; 0x34
 801a182:	e7c1      	b.n	801a108 <__sflush_r+0x1c>
 801a184:	6a21      	ldr	r1, [r4, #32]
 801a186:	2301      	movs	r3, #1
 801a188:	4628      	mov	r0, r5
 801a18a:	47b0      	blx	r6
 801a18c:	1c41      	adds	r1, r0, #1
 801a18e:	d1c7      	bne.n	801a120 <__sflush_r+0x34>
 801a190:	682b      	ldr	r3, [r5, #0]
 801a192:	2b00      	cmp	r3, #0
 801a194:	d0c4      	beq.n	801a120 <__sflush_r+0x34>
 801a196:	2b1d      	cmp	r3, #29
 801a198:	d001      	beq.n	801a19e <__sflush_r+0xb2>
 801a19a:	2b16      	cmp	r3, #22
 801a19c:	d101      	bne.n	801a1a2 <__sflush_r+0xb6>
 801a19e:	602f      	str	r7, [r5, #0]
 801a1a0:	e7b1      	b.n	801a106 <__sflush_r+0x1a>
 801a1a2:	89a3      	ldrh	r3, [r4, #12]
 801a1a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1a8:	81a3      	strh	r3, [r4, #12]
 801a1aa:	e7ad      	b.n	801a108 <__sflush_r+0x1c>
 801a1ac:	690f      	ldr	r7, [r1, #16]
 801a1ae:	2f00      	cmp	r7, #0
 801a1b0:	d0a9      	beq.n	801a106 <__sflush_r+0x1a>
 801a1b2:	0793      	lsls	r3, r2, #30
 801a1b4:	680e      	ldr	r6, [r1, #0]
 801a1b6:	bf08      	it	eq
 801a1b8:	694b      	ldreq	r3, [r1, #20]
 801a1ba:	600f      	str	r7, [r1, #0]
 801a1bc:	bf18      	it	ne
 801a1be:	2300      	movne	r3, #0
 801a1c0:	eba6 0807 	sub.w	r8, r6, r7
 801a1c4:	608b      	str	r3, [r1, #8]
 801a1c6:	f1b8 0f00 	cmp.w	r8, #0
 801a1ca:	dd9c      	ble.n	801a106 <__sflush_r+0x1a>
 801a1cc:	6a21      	ldr	r1, [r4, #32]
 801a1ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a1d0:	4643      	mov	r3, r8
 801a1d2:	463a      	mov	r2, r7
 801a1d4:	4628      	mov	r0, r5
 801a1d6:	47b0      	blx	r6
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	dc06      	bgt.n	801a1ea <__sflush_r+0xfe>
 801a1dc:	89a3      	ldrh	r3, [r4, #12]
 801a1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a1e2:	81a3      	strh	r3, [r4, #12]
 801a1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a1e8:	e78e      	b.n	801a108 <__sflush_r+0x1c>
 801a1ea:	4407      	add	r7, r0
 801a1ec:	eba8 0800 	sub.w	r8, r8, r0
 801a1f0:	e7e9      	b.n	801a1c6 <__sflush_r+0xda>
 801a1f2:	bf00      	nop
 801a1f4:	20400001 	.word	0x20400001

0801a1f8 <_fflush_r>:
 801a1f8:	b538      	push	{r3, r4, r5, lr}
 801a1fa:	690b      	ldr	r3, [r1, #16]
 801a1fc:	4605      	mov	r5, r0
 801a1fe:	460c      	mov	r4, r1
 801a200:	b913      	cbnz	r3, 801a208 <_fflush_r+0x10>
 801a202:	2500      	movs	r5, #0
 801a204:	4628      	mov	r0, r5
 801a206:	bd38      	pop	{r3, r4, r5, pc}
 801a208:	b118      	cbz	r0, 801a212 <_fflush_r+0x1a>
 801a20a:	6983      	ldr	r3, [r0, #24]
 801a20c:	b90b      	cbnz	r3, 801a212 <_fflush_r+0x1a>
 801a20e:	f7ff fc99 	bl	8019b44 <__sinit>
 801a212:	4b14      	ldr	r3, [pc, #80]	; (801a264 <_fflush_r+0x6c>)
 801a214:	429c      	cmp	r4, r3
 801a216:	d11b      	bne.n	801a250 <_fflush_r+0x58>
 801a218:	686c      	ldr	r4, [r5, #4]
 801a21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d0ef      	beq.n	801a202 <_fflush_r+0xa>
 801a222:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a224:	07d0      	lsls	r0, r2, #31
 801a226:	d404      	bmi.n	801a232 <_fflush_r+0x3a>
 801a228:	0599      	lsls	r1, r3, #22
 801a22a:	d402      	bmi.n	801a232 <_fflush_r+0x3a>
 801a22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a22e:	f7ff fd4c 	bl	8019cca <__retarget_lock_acquire_recursive>
 801a232:	4628      	mov	r0, r5
 801a234:	4621      	mov	r1, r4
 801a236:	f7ff ff59 	bl	801a0ec <__sflush_r>
 801a23a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a23c:	07da      	lsls	r2, r3, #31
 801a23e:	4605      	mov	r5, r0
 801a240:	d4e0      	bmi.n	801a204 <_fflush_r+0xc>
 801a242:	89a3      	ldrh	r3, [r4, #12]
 801a244:	059b      	lsls	r3, r3, #22
 801a246:	d4dd      	bmi.n	801a204 <_fflush_r+0xc>
 801a248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a24a:	f7ff fd3f 	bl	8019ccc <__retarget_lock_release_recursive>
 801a24e:	e7d9      	b.n	801a204 <_fflush_r+0xc>
 801a250:	4b05      	ldr	r3, [pc, #20]	; (801a268 <_fflush_r+0x70>)
 801a252:	429c      	cmp	r4, r3
 801a254:	d101      	bne.n	801a25a <_fflush_r+0x62>
 801a256:	68ac      	ldr	r4, [r5, #8]
 801a258:	e7df      	b.n	801a21a <_fflush_r+0x22>
 801a25a:	4b04      	ldr	r3, [pc, #16]	; (801a26c <_fflush_r+0x74>)
 801a25c:	429c      	cmp	r4, r3
 801a25e:	bf08      	it	eq
 801a260:	68ec      	ldreq	r4, [r5, #12]
 801a262:	e7da      	b.n	801a21a <_fflush_r+0x22>
 801a264:	0801e3b4 	.word	0x0801e3b4
 801a268:	0801e3d4 	.word	0x0801e3d4
 801a26c:	0801e394 	.word	0x0801e394

0801a270 <fiprintf>:
 801a270:	b40e      	push	{r1, r2, r3}
 801a272:	b503      	push	{r0, r1, lr}
 801a274:	4601      	mov	r1, r0
 801a276:	ab03      	add	r3, sp, #12
 801a278:	4805      	ldr	r0, [pc, #20]	; (801a290 <fiprintf+0x20>)
 801a27a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a27e:	6800      	ldr	r0, [r0, #0]
 801a280:	9301      	str	r3, [sp, #4]
 801a282:	f000 f8a3 	bl	801a3cc <_vfiprintf_r>
 801a286:	b002      	add	sp, #8
 801a288:	f85d eb04 	ldr.w	lr, [sp], #4
 801a28c:	b003      	add	sp, #12
 801a28e:	4770      	bx	lr
 801a290:	20001a5c 	.word	0x20001a5c

0801a294 <_lseek_r>:
 801a294:	b538      	push	{r3, r4, r5, lr}
 801a296:	4d07      	ldr	r5, [pc, #28]	; (801a2b4 <_lseek_r+0x20>)
 801a298:	4604      	mov	r4, r0
 801a29a:	4608      	mov	r0, r1
 801a29c:	4611      	mov	r1, r2
 801a29e:	2200      	movs	r2, #0
 801a2a0:	602a      	str	r2, [r5, #0]
 801a2a2:	461a      	mov	r2, r3
 801a2a4:	f7ea f85e 	bl	8004364 <_lseek>
 801a2a8:	1c43      	adds	r3, r0, #1
 801a2aa:	d102      	bne.n	801a2b2 <_lseek_r+0x1e>
 801a2ac:	682b      	ldr	r3, [r5, #0]
 801a2ae:	b103      	cbz	r3, 801a2b2 <_lseek_r+0x1e>
 801a2b0:	6023      	str	r3, [r4, #0]
 801a2b2:	bd38      	pop	{r3, r4, r5, pc}
 801a2b4:	2004f6f0 	.word	0x2004f6f0

0801a2b8 <malloc>:
 801a2b8:	4b02      	ldr	r3, [pc, #8]	; (801a2c4 <malloc+0xc>)
 801a2ba:	4601      	mov	r1, r0
 801a2bc:	6818      	ldr	r0, [r3, #0]
 801a2be:	f7ff bd4d 	b.w	8019d5c <_malloc_r>
 801a2c2:	bf00      	nop
 801a2c4:	20001a5c 	.word	0x20001a5c

0801a2c8 <__malloc_lock>:
 801a2c8:	4801      	ldr	r0, [pc, #4]	; (801a2d0 <__malloc_lock+0x8>)
 801a2ca:	f7ff bcfe 	b.w	8019cca <__retarget_lock_acquire_recursive>
 801a2ce:	bf00      	nop
 801a2d0:	2004f6e4 	.word	0x2004f6e4

0801a2d4 <__malloc_unlock>:
 801a2d4:	4801      	ldr	r0, [pc, #4]	; (801a2dc <__malloc_unlock+0x8>)
 801a2d6:	f7ff bcf9 	b.w	8019ccc <__retarget_lock_release_recursive>
 801a2da:	bf00      	nop
 801a2dc:	2004f6e4 	.word	0x2004f6e4

0801a2e0 <_free_r>:
 801a2e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a2e2:	2900      	cmp	r1, #0
 801a2e4:	d044      	beq.n	801a370 <_free_r+0x90>
 801a2e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a2ea:	9001      	str	r0, [sp, #4]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	f1a1 0404 	sub.w	r4, r1, #4
 801a2f2:	bfb8      	it	lt
 801a2f4:	18e4      	addlt	r4, r4, r3
 801a2f6:	f7ff ffe7 	bl	801a2c8 <__malloc_lock>
 801a2fa:	4a1e      	ldr	r2, [pc, #120]	; (801a374 <_free_r+0x94>)
 801a2fc:	9801      	ldr	r0, [sp, #4]
 801a2fe:	6813      	ldr	r3, [r2, #0]
 801a300:	b933      	cbnz	r3, 801a310 <_free_r+0x30>
 801a302:	6063      	str	r3, [r4, #4]
 801a304:	6014      	str	r4, [r2, #0]
 801a306:	b003      	add	sp, #12
 801a308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a30c:	f7ff bfe2 	b.w	801a2d4 <__malloc_unlock>
 801a310:	42a3      	cmp	r3, r4
 801a312:	d908      	bls.n	801a326 <_free_r+0x46>
 801a314:	6825      	ldr	r5, [r4, #0]
 801a316:	1961      	adds	r1, r4, r5
 801a318:	428b      	cmp	r3, r1
 801a31a:	bf01      	itttt	eq
 801a31c:	6819      	ldreq	r1, [r3, #0]
 801a31e:	685b      	ldreq	r3, [r3, #4]
 801a320:	1949      	addeq	r1, r1, r5
 801a322:	6021      	streq	r1, [r4, #0]
 801a324:	e7ed      	b.n	801a302 <_free_r+0x22>
 801a326:	461a      	mov	r2, r3
 801a328:	685b      	ldr	r3, [r3, #4]
 801a32a:	b10b      	cbz	r3, 801a330 <_free_r+0x50>
 801a32c:	42a3      	cmp	r3, r4
 801a32e:	d9fa      	bls.n	801a326 <_free_r+0x46>
 801a330:	6811      	ldr	r1, [r2, #0]
 801a332:	1855      	adds	r5, r2, r1
 801a334:	42a5      	cmp	r5, r4
 801a336:	d10b      	bne.n	801a350 <_free_r+0x70>
 801a338:	6824      	ldr	r4, [r4, #0]
 801a33a:	4421      	add	r1, r4
 801a33c:	1854      	adds	r4, r2, r1
 801a33e:	42a3      	cmp	r3, r4
 801a340:	6011      	str	r1, [r2, #0]
 801a342:	d1e0      	bne.n	801a306 <_free_r+0x26>
 801a344:	681c      	ldr	r4, [r3, #0]
 801a346:	685b      	ldr	r3, [r3, #4]
 801a348:	6053      	str	r3, [r2, #4]
 801a34a:	4421      	add	r1, r4
 801a34c:	6011      	str	r1, [r2, #0]
 801a34e:	e7da      	b.n	801a306 <_free_r+0x26>
 801a350:	d902      	bls.n	801a358 <_free_r+0x78>
 801a352:	230c      	movs	r3, #12
 801a354:	6003      	str	r3, [r0, #0]
 801a356:	e7d6      	b.n	801a306 <_free_r+0x26>
 801a358:	6825      	ldr	r5, [r4, #0]
 801a35a:	1961      	adds	r1, r4, r5
 801a35c:	428b      	cmp	r3, r1
 801a35e:	bf04      	itt	eq
 801a360:	6819      	ldreq	r1, [r3, #0]
 801a362:	685b      	ldreq	r3, [r3, #4]
 801a364:	6063      	str	r3, [r4, #4]
 801a366:	bf04      	itt	eq
 801a368:	1949      	addeq	r1, r1, r5
 801a36a:	6021      	streq	r1, [r4, #0]
 801a36c:	6054      	str	r4, [r2, #4]
 801a36e:	e7ca      	b.n	801a306 <_free_r+0x26>
 801a370:	b003      	add	sp, #12
 801a372:	bd30      	pop	{r4, r5, pc}
 801a374:	2004f6e8 	.word	0x2004f6e8

0801a378 <__sfputc_r>:
 801a378:	6893      	ldr	r3, [r2, #8]
 801a37a:	3b01      	subs	r3, #1
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	b410      	push	{r4}
 801a380:	6093      	str	r3, [r2, #8]
 801a382:	da08      	bge.n	801a396 <__sfputc_r+0x1e>
 801a384:	6994      	ldr	r4, [r2, #24]
 801a386:	42a3      	cmp	r3, r4
 801a388:	db01      	blt.n	801a38e <__sfputc_r+0x16>
 801a38a:	290a      	cmp	r1, #10
 801a38c:	d103      	bne.n	801a396 <__sfputc_r+0x1e>
 801a38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a392:	f000 baf1 	b.w	801a978 <__swbuf_r>
 801a396:	6813      	ldr	r3, [r2, #0]
 801a398:	1c58      	adds	r0, r3, #1
 801a39a:	6010      	str	r0, [r2, #0]
 801a39c:	7019      	strb	r1, [r3, #0]
 801a39e:	4608      	mov	r0, r1
 801a3a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a3a4:	4770      	bx	lr

0801a3a6 <__sfputs_r>:
 801a3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a8:	4606      	mov	r6, r0
 801a3aa:	460f      	mov	r7, r1
 801a3ac:	4614      	mov	r4, r2
 801a3ae:	18d5      	adds	r5, r2, r3
 801a3b0:	42ac      	cmp	r4, r5
 801a3b2:	d101      	bne.n	801a3b8 <__sfputs_r+0x12>
 801a3b4:	2000      	movs	r0, #0
 801a3b6:	e007      	b.n	801a3c8 <__sfputs_r+0x22>
 801a3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a3bc:	463a      	mov	r2, r7
 801a3be:	4630      	mov	r0, r6
 801a3c0:	f7ff ffda 	bl	801a378 <__sfputc_r>
 801a3c4:	1c43      	adds	r3, r0, #1
 801a3c6:	d1f3      	bne.n	801a3b0 <__sfputs_r+0xa>
 801a3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a3cc <_vfiprintf_r>:
 801a3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3d0:	460d      	mov	r5, r1
 801a3d2:	b09d      	sub	sp, #116	; 0x74
 801a3d4:	4614      	mov	r4, r2
 801a3d6:	4698      	mov	r8, r3
 801a3d8:	4606      	mov	r6, r0
 801a3da:	b118      	cbz	r0, 801a3e4 <_vfiprintf_r+0x18>
 801a3dc:	6983      	ldr	r3, [r0, #24]
 801a3de:	b90b      	cbnz	r3, 801a3e4 <_vfiprintf_r+0x18>
 801a3e0:	f7ff fbb0 	bl	8019b44 <__sinit>
 801a3e4:	4b89      	ldr	r3, [pc, #548]	; (801a60c <_vfiprintf_r+0x240>)
 801a3e6:	429d      	cmp	r5, r3
 801a3e8:	d11b      	bne.n	801a422 <_vfiprintf_r+0x56>
 801a3ea:	6875      	ldr	r5, [r6, #4]
 801a3ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3ee:	07d9      	lsls	r1, r3, #31
 801a3f0:	d405      	bmi.n	801a3fe <_vfiprintf_r+0x32>
 801a3f2:	89ab      	ldrh	r3, [r5, #12]
 801a3f4:	059a      	lsls	r2, r3, #22
 801a3f6:	d402      	bmi.n	801a3fe <_vfiprintf_r+0x32>
 801a3f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3fa:	f7ff fc66 	bl	8019cca <__retarget_lock_acquire_recursive>
 801a3fe:	89ab      	ldrh	r3, [r5, #12]
 801a400:	071b      	lsls	r3, r3, #28
 801a402:	d501      	bpl.n	801a408 <_vfiprintf_r+0x3c>
 801a404:	692b      	ldr	r3, [r5, #16]
 801a406:	b9eb      	cbnz	r3, 801a444 <_vfiprintf_r+0x78>
 801a408:	4629      	mov	r1, r5
 801a40a:	4630      	mov	r0, r6
 801a40c:	f000 fb06 	bl	801aa1c <__swsetup_r>
 801a410:	b1c0      	cbz	r0, 801a444 <_vfiprintf_r+0x78>
 801a412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a414:	07dc      	lsls	r4, r3, #31
 801a416:	d50e      	bpl.n	801a436 <_vfiprintf_r+0x6a>
 801a418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a41c:	b01d      	add	sp, #116	; 0x74
 801a41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a422:	4b7b      	ldr	r3, [pc, #492]	; (801a610 <_vfiprintf_r+0x244>)
 801a424:	429d      	cmp	r5, r3
 801a426:	d101      	bne.n	801a42c <_vfiprintf_r+0x60>
 801a428:	68b5      	ldr	r5, [r6, #8]
 801a42a:	e7df      	b.n	801a3ec <_vfiprintf_r+0x20>
 801a42c:	4b79      	ldr	r3, [pc, #484]	; (801a614 <_vfiprintf_r+0x248>)
 801a42e:	429d      	cmp	r5, r3
 801a430:	bf08      	it	eq
 801a432:	68f5      	ldreq	r5, [r6, #12]
 801a434:	e7da      	b.n	801a3ec <_vfiprintf_r+0x20>
 801a436:	89ab      	ldrh	r3, [r5, #12]
 801a438:	0598      	lsls	r0, r3, #22
 801a43a:	d4ed      	bmi.n	801a418 <_vfiprintf_r+0x4c>
 801a43c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a43e:	f7ff fc45 	bl	8019ccc <__retarget_lock_release_recursive>
 801a442:	e7e9      	b.n	801a418 <_vfiprintf_r+0x4c>
 801a444:	2300      	movs	r3, #0
 801a446:	9309      	str	r3, [sp, #36]	; 0x24
 801a448:	2320      	movs	r3, #32
 801a44a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a44e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a452:	2330      	movs	r3, #48	; 0x30
 801a454:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a618 <_vfiprintf_r+0x24c>
 801a458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a45c:	f04f 0901 	mov.w	r9, #1
 801a460:	4623      	mov	r3, r4
 801a462:	469a      	mov	sl, r3
 801a464:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a468:	b10a      	cbz	r2, 801a46e <_vfiprintf_r+0xa2>
 801a46a:	2a25      	cmp	r2, #37	; 0x25
 801a46c:	d1f9      	bne.n	801a462 <_vfiprintf_r+0x96>
 801a46e:	ebba 0b04 	subs.w	fp, sl, r4
 801a472:	d00b      	beq.n	801a48c <_vfiprintf_r+0xc0>
 801a474:	465b      	mov	r3, fp
 801a476:	4622      	mov	r2, r4
 801a478:	4629      	mov	r1, r5
 801a47a:	4630      	mov	r0, r6
 801a47c:	f7ff ff93 	bl	801a3a6 <__sfputs_r>
 801a480:	3001      	adds	r0, #1
 801a482:	f000 80aa 	beq.w	801a5da <_vfiprintf_r+0x20e>
 801a486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a488:	445a      	add	r2, fp
 801a48a:	9209      	str	r2, [sp, #36]	; 0x24
 801a48c:	f89a 3000 	ldrb.w	r3, [sl]
 801a490:	2b00      	cmp	r3, #0
 801a492:	f000 80a2 	beq.w	801a5da <_vfiprintf_r+0x20e>
 801a496:	2300      	movs	r3, #0
 801a498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a49c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4a0:	f10a 0a01 	add.w	sl, sl, #1
 801a4a4:	9304      	str	r3, [sp, #16]
 801a4a6:	9307      	str	r3, [sp, #28]
 801a4a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4ac:	931a      	str	r3, [sp, #104]	; 0x68
 801a4ae:	4654      	mov	r4, sl
 801a4b0:	2205      	movs	r2, #5
 801a4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4b6:	4858      	ldr	r0, [pc, #352]	; (801a618 <_vfiprintf_r+0x24c>)
 801a4b8:	f7e5 feb2 	bl	8000220 <memchr>
 801a4bc:	9a04      	ldr	r2, [sp, #16]
 801a4be:	b9d8      	cbnz	r0, 801a4f8 <_vfiprintf_r+0x12c>
 801a4c0:	06d1      	lsls	r1, r2, #27
 801a4c2:	bf44      	itt	mi
 801a4c4:	2320      	movmi	r3, #32
 801a4c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4ca:	0713      	lsls	r3, r2, #28
 801a4cc:	bf44      	itt	mi
 801a4ce:	232b      	movmi	r3, #43	; 0x2b
 801a4d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a4d4:	f89a 3000 	ldrb.w	r3, [sl]
 801a4d8:	2b2a      	cmp	r3, #42	; 0x2a
 801a4da:	d015      	beq.n	801a508 <_vfiprintf_r+0x13c>
 801a4dc:	9a07      	ldr	r2, [sp, #28]
 801a4de:	4654      	mov	r4, sl
 801a4e0:	2000      	movs	r0, #0
 801a4e2:	f04f 0c0a 	mov.w	ip, #10
 801a4e6:	4621      	mov	r1, r4
 801a4e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a4ec:	3b30      	subs	r3, #48	; 0x30
 801a4ee:	2b09      	cmp	r3, #9
 801a4f0:	d94e      	bls.n	801a590 <_vfiprintf_r+0x1c4>
 801a4f2:	b1b0      	cbz	r0, 801a522 <_vfiprintf_r+0x156>
 801a4f4:	9207      	str	r2, [sp, #28]
 801a4f6:	e014      	b.n	801a522 <_vfiprintf_r+0x156>
 801a4f8:	eba0 0308 	sub.w	r3, r0, r8
 801a4fc:	fa09 f303 	lsl.w	r3, r9, r3
 801a500:	4313      	orrs	r3, r2
 801a502:	9304      	str	r3, [sp, #16]
 801a504:	46a2      	mov	sl, r4
 801a506:	e7d2      	b.n	801a4ae <_vfiprintf_r+0xe2>
 801a508:	9b03      	ldr	r3, [sp, #12]
 801a50a:	1d19      	adds	r1, r3, #4
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	9103      	str	r1, [sp, #12]
 801a510:	2b00      	cmp	r3, #0
 801a512:	bfbb      	ittet	lt
 801a514:	425b      	neglt	r3, r3
 801a516:	f042 0202 	orrlt.w	r2, r2, #2
 801a51a:	9307      	strge	r3, [sp, #28]
 801a51c:	9307      	strlt	r3, [sp, #28]
 801a51e:	bfb8      	it	lt
 801a520:	9204      	strlt	r2, [sp, #16]
 801a522:	7823      	ldrb	r3, [r4, #0]
 801a524:	2b2e      	cmp	r3, #46	; 0x2e
 801a526:	d10c      	bne.n	801a542 <_vfiprintf_r+0x176>
 801a528:	7863      	ldrb	r3, [r4, #1]
 801a52a:	2b2a      	cmp	r3, #42	; 0x2a
 801a52c:	d135      	bne.n	801a59a <_vfiprintf_r+0x1ce>
 801a52e:	9b03      	ldr	r3, [sp, #12]
 801a530:	1d1a      	adds	r2, r3, #4
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	9203      	str	r2, [sp, #12]
 801a536:	2b00      	cmp	r3, #0
 801a538:	bfb8      	it	lt
 801a53a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a53e:	3402      	adds	r4, #2
 801a540:	9305      	str	r3, [sp, #20]
 801a542:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a628 <_vfiprintf_r+0x25c>
 801a546:	7821      	ldrb	r1, [r4, #0]
 801a548:	2203      	movs	r2, #3
 801a54a:	4650      	mov	r0, sl
 801a54c:	f7e5 fe68 	bl	8000220 <memchr>
 801a550:	b140      	cbz	r0, 801a564 <_vfiprintf_r+0x198>
 801a552:	2340      	movs	r3, #64	; 0x40
 801a554:	eba0 000a 	sub.w	r0, r0, sl
 801a558:	fa03 f000 	lsl.w	r0, r3, r0
 801a55c:	9b04      	ldr	r3, [sp, #16]
 801a55e:	4303      	orrs	r3, r0
 801a560:	3401      	adds	r4, #1
 801a562:	9304      	str	r3, [sp, #16]
 801a564:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a568:	482c      	ldr	r0, [pc, #176]	; (801a61c <_vfiprintf_r+0x250>)
 801a56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a56e:	2206      	movs	r2, #6
 801a570:	f7e5 fe56 	bl	8000220 <memchr>
 801a574:	2800      	cmp	r0, #0
 801a576:	d03f      	beq.n	801a5f8 <_vfiprintf_r+0x22c>
 801a578:	4b29      	ldr	r3, [pc, #164]	; (801a620 <_vfiprintf_r+0x254>)
 801a57a:	bb1b      	cbnz	r3, 801a5c4 <_vfiprintf_r+0x1f8>
 801a57c:	9b03      	ldr	r3, [sp, #12]
 801a57e:	3307      	adds	r3, #7
 801a580:	f023 0307 	bic.w	r3, r3, #7
 801a584:	3308      	adds	r3, #8
 801a586:	9303      	str	r3, [sp, #12]
 801a588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a58a:	443b      	add	r3, r7
 801a58c:	9309      	str	r3, [sp, #36]	; 0x24
 801a58e:	e767      	b.n	801a460 <_vfiprintf_r+0x94>
 801a590:	fb0c 3202 	mla	r2, ip, r2, r3
 801a594:	460c      	mov	r4, r1
 801a596:	2001      	movs	r0, #1
 801a598:	e7a5      	b.n	801a4e6 <_vfiprintf_r+0x11a>
 801a59a:	2300      	movs	r3, #0
 801a59c:	3401      	adds	r4, #1
 801a59e:	9305      	str	r3, [sp, #20]
 801a5a0:	4619      	mov	r1, r3
 801a5a2:	f04f 0c0a 	mov.w	ip, #10
 801a5a6:	4620      	mov	r0, r4
 801a5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5ac:	3a30      	subs	r2, #48	; 0x30
 801a5ae:	2a09      	cmp	r2, #9
 801a5b0:	d903      	bls.n	801a5ba <_vfiprintf_r+0x1ee>
 801a5b2:	2b00      	cmp	r3, #0
 801a5b4:	d0c5      	beq.n	801a542 <_vfiprintf_r+0x176>
 801a5b6:	9105      	str	r1, [sp, #20]
 801a5b8:	e7c3      	b.n	801a542 <_vfiprintf_r+0x176>
 801a5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 801a5be:	4604      	mov	r4, r0
 801a5c0:	2301      	movs	r3, #1
 801a5c2:	e7f0      	b.n	801a5a6 <_vfiprintf_r+0x1da>
 801a5c4:	ab03      	add	r3, sp, #12
 801a5c6:	9300      	str	r3, [sp, #0]
 801a5c8:	462a      	mov	r2, r5
 801a5ca:	4b16      	ldr	r3, [pc, #88]	; (801a624 <_vfiprintf_r+0x258>)
 801a5cc:	a904      	add	r1, sp, #16
 801a5ce:	4630      	mov	r0, r6
 801a5d0:	f3af 8000 	nop.w
 801a5d4:	4607      	mov	r7, r0
 801a5d6:	1c78      	adds	r0, r7, #1
 801a5d8:	d1d6      	bne.n	801a588 <_vfiprintf_r+0x1bc>
 801a5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a5dc:	07d9      	lsls	r1, r3, #31
 801a5de:	d405      	bmi.n	801a5ec <_vfiprintf_r+0x220>
 801a5e0:	89ab      	ldrh	r3, [r5, #12]
 801a5e2:	059a      	lsls	r2, r3, #22
 801a5e4:	d402      	bmi.n	801a5ec <_vfiprintf_r+0x220>
 801a5e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a5e8:	f7ff fb70 	bl	8019ccc <__retarget_lock_release_recursive>
 801a5ec:	89ab      	ldrh	r3, [r5, #12]
 801a5ee:	065b      	lsls	r3, r3, #25
 801a5f0:	f53f af12 	bmi.w	801a418 <_vfiprintf_r+0x4c>
 801a5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a5f6:	e711      	b.n	801a41c <_vfiprintf_r+0x50>
 801a5f8:	ab03      	add	r3, sp, #12
 801a5fa:	9300      	str	r3, [sp, #0]
 801a5fc:	462a      	mov	r2, r5
 801a5fe:	4b09      	ldr	r3, [pc, #36]	; (801a624 <_vfiprintf_r+0x258>)
 801a600:	a904      	add	r1, sp, #16
 801a602:	4630      	mov	r0, r6
 801a604:	f000 f880 	bl	801a708 <_printf_i>
 801a608:	e7e4      	b.n	801a5d4 <_vfiprintf_r+0x208>
 801a60a:	bf00      	nop
 801a60c:	0801e3b4 	.word	0x0801e3b4
 801a610:	0801e3d4 	.word	0x0801e3d4
 801a614:	0801e394 	.word	0x0801e394
 801a618:	0801e4a6 	.word	0x0801e4a6
 801a61c:	0801e4b0 	.word	0x0801e4b0
 801a620:	00000000 	.word	0x00000000
 801a624:	0801a3a7 	.word	0x0801a3a7
 801a628:	0801e4ac 	.word	0x0801e4ac

0801a62c <_printf_common>:
 801a62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a630:	4616      	mov	r6, r2
 801a632:	4699      	mov	r9, r3
 801a634:	688a      	ldr	r2, [r1, #8]
 801a636:	690b      	ldr	r3, [r1, #16]
 801a638:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a63c:	4293      	cmp	r3, r2
 801a63e:	bfb8      	it	lt
 801a640:	4613      	movlt	r3, r2
 801a642:	6033      	str	r3, [r6, #0]
 801a644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a648:	4607      	mov	r7, r0
 801a64a:	460c      	mov	r4, r1
 801a64c:	b10a      	cbz	r2, 801a652 <_printf_common+0x26>
 801a64e:	3301      	adds	r3, #1
 801a650:	6033      	str	r3, [r6, #0]
 801a652:	6823      	ldr	r3, [r4, #0]
 801a654:	0699      	lsls	r1, r3, #26
 801a656:	bf42      	ittt	mi
 801a658:	6833      	ldrmi	r3, [r6, #0]
 801a65a:	3302      	addmi	r3, #2
 801a65c:	6033      	strmi	r3, [r6, #0]
 801a65e:	6825      	ldr	r5, [r4, #0]
 801a660:	f015 0506 	ands.w	r5, r5, #6
 801a664:	d106      	bne.n	801a674 <_printf_common+0x48>
 801a666:	f104 0a19 	add.w	sl, r4, #25
 801a66a:	68e3      	ldr	r3, [r4, #12]
 801a66c:	6832      	ldr	r2, [r6, #0]
 801a66e:	1a9b      	subs	r3, r3, r2
 801a670:	42ab      	cmp	r3, r5
 801a672:	dc26      	bgt.n	801a6c2 <_printf_common+0x96>
 801a674:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a678:	1e13      	subs	r3, r2, #0
 801a67a:	6822      	ldr	r2, [r4, #0]
 801a67c:	bf18      	it	ne
 801a67e:	2301      	movne	r3, #1
 801a680:	0692      	lsls	r2, r2, #26
 801a682:	d42b      	bmi.n	801a6dc <_printf_common+0xb0>
 801a684:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a688:	4649      	mov	r1, r9
 801a68a:	4638      	mov	r0, r7
 801a68c:	47c0      	blx	r8
 801a68e:	3001      	adds	r0, #1
 801a690:	d01e      	beq.n	801a6d0 <_printf_common+0xa4>
 801a692:	6823      	ldr	r3, [r4, #0]
 801a694:	68e5      	ldr	r5, [r4, #12]
 801a696:	6832      	ldr	r2, [r6, #0]
 801a698:	f003 0306 	and.w	r3, r3, #6
 801a69c:	2b04      	cmp	r3, #4
 801a69e:	bf08      	it	eq
 801a6a0:	1aad      	subeq	r5, r5, r2
 801a6a2:	68a3      	ldr	r3, [r4, #8]
 801a6a4:	6922      	ldr	r2, [r4, #16]
 801a6a6:	bf0c      	ite	eq
 801a6a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a6ac:	2500      	movne	r5, #0
 801a6ae:	4293      	cmp	r3, r2
 801a6b0:	bfc4      	itt	gt
 801a6b2:	1a9b      	subgt	r3, r3, r2
 801a6b4:	18ed      	addgt	r5, r5, r3
 801a6b6:	2600      	movs	r6, #0
 801a6b8:	341a      	adds	r4, #26
 801a6ba:	42b5      	cmp	r5, r6
 801a6bc:	d11a      	bne.n	801a6f4 <_printf_common+0xc8>
 801a6be:	2000      	movs	r0, #0
 801a6c0:	e008      	b.n	801a6d4 <_printf_common+0xa8>
 801a6c2:	2301      	movs	r3, #1
 801a6c4:	4652      	mov	r2, sl
 801a6c6:	4649      	mov	r1, r9
 801a6c8:	4638      	mov	r0, r7
 801a6ca:	47c0      	blx	r8
 801a6cc:	3001      	adds	r0, #1
 801a6ce:	d103      	bne.n	801a6d8 <_printf_common+0xac>
 801a6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a6d8:	3501      	adds	r5, #1
 801a6da:	e7c6      	b.n	801a66a <_printf_common+0x3e>
 801a6dc:	18e1      	adds	r1, r4, r3
 801a6de:	1c5a      	adds	r2, r3, #1
 801a6e0:	2030      	movs	r0, #48	; 0x30
 801a6e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a6e6:	4422      	add	r2, r4
 801a6e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a6ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a6f0:	3302      	adds	r3, #2
 801a6f2:	e7c7      	b.n	801a684 <_printf_common+0x58>
 801a6f4:	2301      	movs	r3, #1
 801a6f6:	4622      	mov	r2, r4
 801a6f8:	4649      	mov	r1, r9
 801a6fa:	4638      	mov	r0, r7
 801a6fc:	47c0      	blx	r8
 801a6fe:	3001      	adds	r0, #1
 801a700:	d0e6      	beq.n	801a6d0 <_printf_common+0xa4>
 801a702:	3601      	adds	r6, #1
 801a704:	e7d9      	b.n	801a6ba <_printf_common+0x8e>
	...

0801a708 <_printf_i>:
 801a708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a70c:	7e0f      	ldrb	r7, [r1, #24]
 801a70e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a710:	2f78      	cmp	r7, #120	; 0x78
 801a712:	4691      	mov	r9, r2
 801a714:	4680      	mov	r8, r0
 801a716:	460c      	mov	r4, r1
 801a718:	469a      	mov	sl, r3
 801a71a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a71e:	d807      	bhi.n	801a730 <_printf_i+0x28>
 801a720:	2f62      	cmp	r7, #98	; 0x62
 801a722:	d80a      	bhi.n	801a73a <_printf_i+0x32>
 801a724:	2f00      	cmp	r7, #0
 801a726:	f000 80d8 	beq.w	801a8da <_printf_i+0x1d2>
 801a72a:	2f58      	cmp	r7, #88	; 0x58
 801a72c:	f000 80a3 	beq.w	801a876 <_printf_i+0x16e>
 801a730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a738:	e03a      	b.n	801a7b0 <_printf_i+0xa8>
 801a73a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a73e:	2b15      	cmp	r3, #21
 801a740:	d8f6      	bhi.n	801a730 <_printf_i+0x28>
 801a742:	a101      	add	r1, pc, #4	; (adr r1, 801a748 <_printf_i+0x40>)
 801a744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a748:	0801a7a1 	.word	0x0801a7a1
 801a74c:	0801a7b5 	.word	0x0801a7b5
 801a750:	0801a731 	.word	0x0801a731
 801a754:	0801a731 	.word	0x0801a731
 801a758:	0801a731 	.word	0x0801a731
 801a75c:	0801a731 	.word	0x0801a731
 801a760:	0801a7b5 	.word	0x0801a7b5
 801a764:	0801a731 	.word	0x0801a731
 801a768:	0801a731 	.word	0x0801a731
 801a76c:	0801a731 	.word	0x0801a731
 801a770:	0801a731 	.word	0x0801a731
 801a774:	0801a8c1 	.word	0x0801a8c1
 801a778:	0801a7e5 	.word	0x0801a7e5
 801a77c:	0801a8a3 	.word	0x0801a8a3
 801a780:	0801a731 	.word	0x0801a731
 801a784:	0801a731 	.word	0x0801a731
 801a788:	0801a8e3 	.word	0x0801a8e3
 801a78c:	0801a731 	.word	0x0801a731
 801a790:	0801a7e5 	.word	0x0801a7e5
 801a794:	0801a731 	.word	0x0801a731
 801a798:	0801a731 	.word	0x0801a731
 801a79c:	0801a8ab 	.word	0x0801a8ab
 801a7a0:	682b      	ldr	r3, [r5, #0]
 801a7a2:	1d1a      	adds	r2, r3, #4
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	602a      	str	r2, [r5, #0]
 801a7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a7ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a7b0:	2301      	movs	r3, #1
 801a7b2:	e0a3      	b.n	801a8fc <_printf_i+0x1f4>
 801a7b4:	6820      	ldr	r0, [r4, #0]
 801a7b6:	6829      	ldr	r1, [r5, #0]
 801a7b8:	0606      	lsls	r6, r0, #24
 801a7ba:	f101 0304 	add.w	r3, r1, #4
 801a7be:	d50a      	bpl.n	801a7d6 <_printf_i+0xce>
 801a7c0:	680e      	ldr	r6, [r1, #0]
 801a7c2:	602b      	str	r3, [r5, #0]
 801a7c4:	2e00      	cmp	r6, #0
 801a7c6:	da03      	bge.n	801a7d0 <_printf_i+0xc8>
 801a7c8:	232d      	movs	r3, #45	; 0x2d
 801a7ca:	4276      	negs	r6, r6
 801a7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a7d0:	485e      	ldr	r0, [pc, #376]	; (801a94c <_printf_i+0x244>)
 801a7d2:	230a      	movs	r3, #10
 801a7d4:	e019      	b.n	801a80a <_printf_i+0x102>
 801a7d6:	680e      	ldr	r6, [r1, #0]
 801a7d8:	602b      	str	r3, [r5, #0]
 801a7da:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a7de:	bf18      	it	ne
 801a7e0:	b236      	sxthne	r6, r6
 801a7e2:	e7ef      	b.n	801a7c4 <_printf_i+0xbc>
 801a7e4:	682b      	ldr	r3, [r5, #0]
 801a7e6:	6820      	ldr	r0, [r4, #0]
 801a7e8:	1d19      	adds	r1, r3, #4
 801a7ea:	6029      	str	r1, [r5, #0]
 801a7ec:	0601      	lsls	r1, r0, #24
 801a7ee:	d501      	bpl.n	801a7f4 <_printf_i+0xec>
 801a7f0:	681e      	ldr	r6, [r3, #0]
 801a7f2:	e002      	b.n	801a7fa <_printf_i+0xf2>
 801a7f4:	0646      	lsls	r6, r0, #25
 801a7f6:	d5fb      	bpl.n	801a7f0 <_printf_i+0xe8>
 801a7f8:	881e      	ldrh	r6, [r3, #0]
 801a7fa:	4854      	ldr	r0, [pc, #336]	; (801a94c <_printf_i+0x244>)
 801a7fc:	2f6f      	cmp	r7, #111	; 0x6f
 801a7fe:	bf0c      	ite	eq
 801a800:	2308      	moveq	r3, #8
 801a802:	230a      	movne	r3, #10
 801a804:	2100      	movs	r1, #0
 801a806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a80a:	6865      	ldr	r5, [r4, #4]
 801a80c:	60a5      	str	r5, [r4, #8]
 801a80e:	2d00      	cmp	r5, #0
 801a810:	bfa2      	ittt	ge
 801a812:	6821      	ldrge	r1, [r4, #0]
 801a814:	f021 0104 	bicge.w	r1, r1, #4
 801a818:	6021      	strge	r1, [r4, #0]
 801a81a:	b90e      	cbnz	r6, 801a820 <_printf_i+0x118>
 801a81c:	2d00      	cmp	r5, #0
 801a81e:	d04d      	beq.n	801a8bc <_printf_i+0x1b4>
 801a820:	4615      	mov	r5, r2
 801a822:	fbb6 f1f3 	udiv	r1, r6, r3
 801a826:	fb03 6711 	mls	r7, r3, r1, r6
 801a82a:	5dc7      	ldrb	r7, [r0, r7]
 801a82c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a830:	4637      	mov	r7, r6
 801a832:	42bb      	cmp	r3, r7
 801a834:	460e      	mov	r6, r1
 801a836:	d9f4      	bls.n	801a822 <_printf_i+0x11a>
 801a838:	2b08      	cmp	r3, #8
 801a83a:	d10b      	bne.n	801a854 <_printf_i+0x14c>
 801a83c:	6823      	ldr	r3, [r4, #0]
 801a83e:	07de      	lsls	r6, r3, #31
 801a840:	d508      	bpl.n	801a854 <_printf_i+0x14c>
 801a842:	6923      	ldr	r3, [r4, #16]
 801a844:	6861      	ldr	r1, [r4, #4]
 801a846:	4299      	cmp	r1, r3
 801a848:	bfde      	ittt	le
 801a84a:	2330      	movle	r3, #48	; 0x30
 801a84c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a850:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801a854:	1b52      	subs	r2, r2, r5
 801a856:	6122      	str	r2, [r4, #16]
 801a858:	f8cd a000 	str.w	sl, [sp]
 801a85c:	464b      	mov	r3, r9
 801a85e:	aa03      	add	r2, sp, #12
 801a860:	4621      	mov	r1, r4
 801a862:	4640      	mov	r0, r8
 801a864:	f7ff fee2 	bl	801a62c <_printf_common>
 801a868:	3001      	adds	r0, #1
 801a86a:	d14c      	bne.n	801a906 <_printf_i+0x1fe>
 801a86c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a870:	b004      	add	sp, #16
 801a872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a876:	4835      	ldr	r0, [pc, #212]	; (801a94c <_printf_i+0x244>)
 801a878:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a87c:	6829      	ldr	r1, [r5, #0]
 801a87e:	6823      	ldr	r3, [r4, #0]
 801a880:	f851 6b04 	ldr.w	r6, [r1], #4
 801a884:	6029      	str	r1, [r5, #0]
 801a886:	061d      	lsls	r5, r3, #24
 801a888:	d514      	bpl.n	801a8b4 <_printf_i+0x1ac>
 801a88a:	07df      	lsls	r7, r3, #31
 801a88c:	bf44      	itt	mi
 801a88e:	f043 0320 	orrmi.w	r3, r3, #32
 801a892:	6023      	strmi	r3, [r4, #0]
 801a894:	b91e      	cbnz	r6, 801a89e <_printf_i+0x196>
 801a896:	6823      	ldr	r3, [r4, #0]
 801a898:	f023 0320 	bic.w	r3, r3, #32
 801a89c:	6023      	str	r3, [r4, #0]
 801a89e:	2310      	movs	r3, #16
 801a8a0:	e7b0      	b.n	801a804 <_printf_i+0xfc>
 801a8a2:	6823      	ldr	r3, [r4, #0]
 801a8a4:	f043 0320 	orr.w	r3, r3, #32
 801a8a8:	6023      	str	r3, [r4, #0]
 801a8aa:	2378      	movs	r3, #120	; 0x78
 801a8ac:	4828      	ldr	r0, [pc, #160]	; (801a950 <_printf_i+0x248>)
 801a8ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a8b2:	e7e3      	b.n	801a87c <_printf_i+0x174>
 801a8b4:	0659      	lsls	r1, r3, #25
 801a8b6:	bf48      	it	mi
 801a8b8:	b2b6      	uxthmi	r6, r6
 801a8ba:	e7e6      	b.n	801a88a <_printf_i+0x182>
 801a8bc:	4615      	mov	r5, r2
 801a8be:	e7bb      	b.n	801a838 <_printf_i+0x130>
 801a8c0:	682b      	ldr	r3, [r5, #0]
 801a8c2:	6826      	ldr	r6, [r4, #0]
 801a8c4:	6961      	ldr	r1, [r4, #20]
 801a8c6:	1d18      	adds	r0, r3, #4
 801a8c8:	6028      	str	r0, [r5, #0]
 801a8ca:	0635      	lsls	r5, r6, #24
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	d501      	bpl.n	801a8d4 <_printf_i+0x1cc>
 801a8d0:	6019      	str	r1, [r3, #0]
 801a8d2:	e002      	b.n	801a8da <_printf_i+0x1d2>
 801a8d4:	0670      	lsls	r0, r6, #25
 801a8d6:	d5fb      	bpl.n	801a8d0 <_printf_i+0x1c8>
 801a8d8:	8019      	strh	r1, [r3, #0]
 801a8da:	2300      	movs	r3, #0
 801a8dc:	6123      	str	r3, [r4, #16]
 801a8de:	4615      	mov	r5, r2
 801a8e0:	e7ba      	b.n	801a858 <_printf_i+0x150>
 801a8e2:	682b      	ldr	r3, [r5, #0]
 801a8e4:	1d1a      	adds	r2, r3, #4
 801a8e6:	602a      	str	r2, [r5, #0]
 801a8e8:	681d      	ldr	r5, [r3, #0]
 801a8ea:	6862      	ldr	r2, [r4, #4]
 801a8ec:	2100      	movs	r1, #0
 801a8ee:	4628      	mov	r0, r5
 801a8f0:	f7e5 fc96 	bl	8000220 <memchr>
 801a8f4:	b108      	cbz	r0, 801a8fa <_printf_i+0x1f2>
 801a8f6:	1b40      	subs	r0, r0, r5
 801a8f8:	6060      	str	r0, [r4, #4]
 801a8fa:	6863      	ldr	r3, [r4, #4]
 801a8fc:	6123      	str	r3, [r4, #16]
 801a8fe:	2300      	movs	r3, #0
 801a900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a904:	e7a8      	b.n	801a858 <_printf_i+0x150>
 801a906:	6923      	ldr	r3, [r4, #16]
 801a908:	462a      	mov	r2, r5
 801a90a:	4649      	mov	r1, r9
 801a90c:	4640      	mov	r0, r8
 801a90e:	47d0      	blx	sl
 801a910:	3001      	adds	r0, #1
 801a912:	d0ab      	beq.n	801a86c <_printf_i+0x164>
 801a914:	6823      	ldr	r3, [r4, #0]
 801a916:	079b      	lsls	r3, r3, #30
 801a918:	d413      	bmi.n	801a942 <_printf_i+0x23a>
 801a91a:	68e0      	ldr	r0, [r4, #12]
 801a91c:	9b03      	ldr	r3, [sp, #12]
 801a91e:	4298      	cmp	r0, r3
 801a920:	bfb8      	it	lt
 801a922:	4618      	movlt	r0, r3
 801a924:	e7a4      	b.n	801a870 <_printf_i+0x168>
 801a926:	2301      	movs	r3, #1
 801a928:	4632      	mov	r2, r6
 801a92a:	4649      	mov	r1, r9
 801a92c:	4640      	mov	r0, r8
 801a92e:	47d0      	blx	sl
 801a930:	3001      	adds	r0, #1
 801a932:	d09b      	beq.n	801a86c <_printf_i+0x164>
 801a934:	3501      	adds	r5, #1
 801a936:	68e3      	ldr	r3, [r4, #12]
 801a938:	9903      	ldr	r1, [sp, #12]
 801a93a:	1a5b      	subs	r3, r3, r1
 801a93c:	42ab      	cmp	r3, r5
 801a93e:	dcf2      	bgt.n	801a926 <_printf_i+0x21e>
 801a940:	e7eb      	b.n	801a91a <_printf_i+0x212>
 801a942:	2500      	movs	r5, #0
 801a944:	f104 0619 	add.w	r6, r4, #25
 801a948:	e7f5      	b.n	801a936 <_printf_i+0x22e>
 801a94a:	bf00      	nop
 801a94c:	0801e4b7 	.word	0x0801e4b7
 801a950:	0801e4c8 	.word	0x0801e4c8

0801a954 <_read_r>:
 801a954:	b538      	push	{r3, r4, r5, lr}
 801a956:	4d07      	ldr	r5, [pc, #28]	; (801a974 <_read_r+0x20>)
 801a958:	4604      	mov	r4, r0
 801a95a:	4608      	mov	r0, r1
 801a95c:	4611      	mov	r1, r2
 801a95e:	2200      	movs	r2, #0
 801a960:	602a      	str	r2, [r5, #0]
 801a962:	461a      	mov	r2, r3
 801a964:	f7e9 fc9e 	bl	80042a4 <_read>
 801a968:	1c43      	adds	r3, r0, #1
 801a96a:	d102      	bne.n	801a972 <_read_r+0x1e>
 801a96c:	682b      	ldr	r3, [r5, #0]
 801a96e:	b103      	cbz	r3, 801a972 <_read_r+0x1e>
 801a970:	6023      	str	r3, [r4, #0]
 801a972:	bd38      	pop	{r3, r4, r5, pc}
 801a974:	2004f6f0 	.word	0x2004f6f0

0801a978 <__swbuf_r>:
 801a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a97a:	460e      	mov	r6, r1
 801a97c:	4614      	mov	r4, r2
 801a97e:	4605      	mov	r5, r0
 801a980:	b118      	cbz	r0, 801a98a <__swbuf_r+0x12>
 801a982:	6983      	ldr	r3, [r0, #24]
 801a984:	b90b      	cbnz	r3, 801a98a <__swbuf_r+0x12>
 801a986:	f7ff f8dd 	bl	8019b44 <__sinit>
 801a98a:	4b21      	ldr	r3, [pc, #132]	; (801aa10 <__swbuf_r+0x98>)
 801a98c:	429c      	cmp	r4, r3
 801a98e:	d12b      	bne.n	801a9e8 <__swbuf_r+0x70>
 801a990:	686c      	ldr	r4, [r5, #4]
 801a992:	69a3      	ldr	r3, [r4, #24]
 801a994:	60a3      	str	r3, [r4, #8]
 801a996:	89a3      	ldrh	r3, [r4, #12]
 801a998:	071a      	lsls	r2, r3, #28
 801a99a:	d52f      	bpl.n	801a9fc <__swbuf_r+0x84>
 801a99c:	6923      	ldr	r3, [r4, #16]
 801a99e:	b36b      	cbz	r3, 801a9fc <__swbuf_r+0x84>
 801a9a0:	6923      	ldr	r3, [r4, #16]
 801a9a2:	6820      	ldr	r0, [r4, #0]
 801a9a4:	1ac0      	subs	r0, r0, r3
 801a9a6:	6963      	ldr	r3, [r4, #20]
 801a9a8:	b2f6      	uxtb	r6, r6
 801a9aa:	4283      	cmp	r3, r0
 801a9ac:	4637      	mov	r7, r6
 801a9ae:	dc04      	bgt.n	801a9ba <__swbuf_r+0x42>
 801a9b0:	4621      	mov	r1, r4
 801a9b2:	4628      	mov	r0, r5
 801a9b4:	f7ff fc20 	bl	801a1f8 <_fflush_r>
 801a9b8:	bb30      	cbnz	r0, 801aa08 <__swbuf_r+0x90>
 801a9ba:	68a3      	ldr	r3, [r4, #8]
 801a9bc:	3b01      	subs	r3, #1
 801a9be:	60a3      	str	r3, [r4, #8]
 801a9c0:	6823      	ldr	r3, [r4, #0]
 801a9c2:	1c5a      	adds	r2, r3, #1
 801a9c4:	6022      	str	r2, [r4, #0]
 801a9c6:	701e      	strb	r6, [r3, #0]
 801a9c8:	6963      	ldr	r3, [r4, #20]
 801a9ca:	3001      	adds	r0, #1
 801a9cc:	4283      	cmp	r3, r0
 801a9ce:	d004      	beq.n	801a9da <__swbuf_r+0x62>
 801a9d0:	89a3      	ldrh	r3, [r4, #12]
 801a9d2:	07db      	lsls	r3, r3, #31
 801a9d4:	d506      	bpl.n	801a9e4 <__swbuf_r+0x6c>
 801a9d6:	2e0a      	cmp	r6, #10
 801a9d8:	d104      	bne.n	801a9e4 <__swbuf_r+0x6c>
 801a9da:	4621      	mov	r1, r4
 801a9dc:	4628      	mov	r0, r5
 801a9de:	f7ff fc0b 	bl	801a1f8 <_fflush_r>
 801a9e2:	b988      	cbnz	r0, 801aa08 <__swbuf_r+0x90>
 801a9e4:	4638      	mov	r0, r7
 801a9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9e8:	4b0a      	ldr	r3, [pc, #40]	; (801aa14 <__swbuf_r+0x9c>)
 801a9ea:	429c      	cmp	r4, r3
 801a9ec:	d101      	bne.n	801a9f2 <__swbuf_r+0x7a>
 801a9ee:	68ac      	ldr	r4, [r5, #8]
 801a9f0:	e7cf      	b.n	801a992 <__swbuf_r+0x1a>
 801a9f2:	4b09      	ldr	r3, [pc, #36]	; (801aa18 <__swbuf_r+0xa0>)
 801a9f4:	429c      	cmp	r4, r3
 801a9f6:	bf08      	it	eq
 801a9f8:	68ec      	ldreq	r4, [r5, #12]
 801a9fa:	e7ca      	b.n	801a992 <__swbuf_r+0x1a>
 801a9fc:	4621      	mov	r1, r4
 801a9fe:	4628      	mov	r0, r5
 801aa00:	f000 f80c 	bl	801aa1c <__swsetup_r>
 801aa04:	2800      	cmp	r0, #0
 801aa06:	d0cb      	beq.n	801a9a0 <__swbuf_r+0x28>
 801aa08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801aa0c:	e7ea      	b.n	801a9e4 <__swbuf_r+0x6c>
 801aa0e:	bf00      	nop
 801aa10:	0801e3b4 	.word	0x0801e3b4
 801aa14:	0801e3d4 	.word	0x0801e3d4
 801aa18:	0801e394 	.word	0x0801e394

0801aa1c <__swsetup_r>:
 801aa1c:	4b32      	ldr	r3, [pc, #200]	; (801aae8 <__swsetup_r+0xcc>)
 801aa1e:	b570      	push	{r4, r5, r6, lr}
 801aa20:	681d      	ldr	r5, [r3, #0]
 801aa22:	4606      	mov	r6, r0
 801aa24:	460c      	mov	r4, r1
 801aa26:	b125      	cbz	r5, 801aa32 <__swsetup_r+0x16>
 801aa28:	69ab      	ldr	r3, [r5, #24]
 801aa2a:	b913      	cbnz	r3, 801aa32 <__swsetup_r+0x16>
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	f7ff f889 	bl	8019b44 <__sinit>
 801aa32:	4b2e      	ldr	r3, [pc, #184]	; (801aaec <__swsetup_r+0xd0>)
 801aa34:	429c      	cmp	r4, r3
 801aa36:	d10f      	bne.n	801aa58 <__swsetup_r+0x3c>
 801aa38:	686c      	ldr	r4, [r5, #4]
 801aa3a:	89a3      	ldrh	r3, [r4, #12]
 801aa3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aa40:	0719      	lsls	r1, r3, #28
 801aa42:	d42c      	bmi.n	801aa9e <__swsetup_r+0x82>
 801aa44:	06dd      	lsls	r5, r3, #27
 801aa46:	d411      	bmi.n	801aa6c <__swsetup_r+0x50>
 801aa48:	2309      	movs	r3, #9
 801aa4a:	6033      	str	r3, [r6, #0]
 801aa4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801aa50:	81a3      	strh	r3, [r4, #12]
 801aa52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa56:	e03e      	b.n	801aad6 <__swsetup_r+0xba>
 801aa58:	4b25      	ldr	r3, [pc, #148]	; (801aaf0 <__swsetup_r+0xd4>)
 801aa5a:	429c      	cmp	r4, r3
 801aa5c:	d101      	bne.n	801aa62 <__swsetup_r+0x46>
 801aa5e:	68ac      	ldr	r4, [r5, #8]
 801aa60:	e7eb      	b.n	801aa3a <__swsetup_r+0x1e>
 801aa62:	4b24      	ldr	r3, [pc, #144]	; (801aaf4 <__swsetup_r+0xd8>)
 801aa64:	429c      	cmp	r4, r3
 801aa66:	bf08      	it	eq
 801aa68:	68ec      	ldreq	r4, [r5, #12]
 801aa6a:	e7e6      	b.n	801aa3a <__swsetup_r+0x1e>
 801aa6c:	0758      	lsls	r0, r3, #29
 801aa6e:	d512      	bpl.n	801aa96 <__swsetup_r+0x7a>
 801aa70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa72:	b141      	cbz	r1, 801aa86 <__swsetup_r+0x6a>
 801aa74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa78:	4299      	cmp	r1, r3
 801aa7a:	d002      	beq.n	801aa82 <__swsetup_r+0x66>
 801aa7c:	4630      	mov	r0, r6
 801aa7e:	f7ff fc2f 	bl	801a2e0 <_free_r>
 801aa82:	2300      	movs	r3, #0
 801aa84:	6363      	str	r3, [r4, #52]	; 0x34
 801aa86:	89a3      	ldrh	r3, [r4, #12]
 801aa88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aa8c:	81a3      	strh	r3, [r4, #12]
 801aa8e:	2300      	movs	r3, #0
 801aa90:	6063      	str	r3, [r4, #4]
 801aa92:	6923      	ldr	r3, [r4, #16]
 801aa94:	6023      	str	r3, [r4, #0]
 801aa96:	89a3      	ldrh	r3, [r4, #12]
 801aa98:	f043 0308 	orr.w	r3, r3, #8
 801aa9c:	81a3      	strh	r3, [r4, #12]
 801aa9e:	6923      	ldr	r3, [r4, #16]
 801aaa0:	b94b      	cbnz	r3, 801aab6 <__swsetup_r+0x9a>
 801aaa2:	89a3      	ldrh	r3, [r4, #12]
 801aaa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aaa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aaac:	d003      	beq.n	801aab6 <__swsetup_r+0x9a>
 801aaae:	4621      	mov	r1, r4
 801aab0:	4630      	mov	r0, r6
 801aab2:	f000 f84d 	bl	801ab50 <__smakebuf_r>
 801aab6:	89a0      	ldrh	r0, [r4, #12]
 801aab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aabc:	f010 0301 	ands.w	r3, r0, #1
 801aac0:	d00a      	beq.n	801aad8 <__swsetup_r+0xbc>
 801aac2:	2300      	movs	r3, #0
 801aac4:	60a3      	str	r3, [r4, #8]
 801aac6:	6963      	ldr	r3, [r4, #20]
 801aac8:	425b      	negs	r3, r3
 801aaca:	61a3      	str	r3, [r4, #24]
 801aacc:	6923      	ldr	r3, [r4, #16]
 801aace:	b943      	cbnz	r3, 801aae2 <__swsetup_r+0xc6>
 801aad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801aad4:	d1ba      	bne.n	801aa4c <__swsetup_r+0x30>
 801aad6:	bd70      	pop	{r4, r5, r6, pc}
 801aad8:	0781      	lsls	r1, r0, #30
 801aada:	bf58      	it	pl
 801aadc:	6963      	ldrpl	r3, [r4, #20]
 801aade:	60a3      	str	r3, [r4, #8]
 801aae0:	e7f4      	b.n	801aacc <__swsetup_r+0xb0>
 801aae2:	2000      	movs	r0, #0
 801aae4:	e7f7      	b.n	801aad6 <__swsetup_r+0xba>
 801aae6:	bf00      	nop
 801aae8:	20001a5c 	.word	0x20001a5c
 801aaec:	0801e3b4 	.word	0x0801e3b4
 801aaf0:	0801e3d4 	.word	0x0801e3d4
 801aaf4:	0801e394 	.word	0x0801e394

0801aaf8 <abort>:
 801aaf8:	b508      	push	{r3, lr}
 801aafa:	2006      	movs	r0, #6
 801aafc:	f000 f890 	bl	801ac20 <raise>
 801ab00:	2001      	movs	r0, #1
 801ab02:	f7e9 fbc5 	bl	8004290 <_exit>

0801ab06 <__swhatbuf_r>:
 801ab06:	b570      	push	{r4, r5, r6, lr}
 801ab08:	460e      	mov	r6, r1
 801ab0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ab0e:	2900      	cmp	r1, #0
 801ab10:	b096      	sub	sp, #88	; 0x58
 801ab12:	4614      	mov	r4, r2
 801ab14:	461d      	mov	r5, r3
 801ab16:	da08      	bge.n	801ab2a <__swhatbuf_r+0x24>
 801ab18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ab1c:	2200      	movs	r2, #0
 801ab1e:	602a      	str	r2, [r5, #0]
 801ab20:	061a      	lsls	r2, r3, #24
 801ab22:	d410      	bmi.n	801ab46 <__swhatbuf_r+0x40>
 801ab24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ab28:	e00e      	b.n	801ab48 <__swhatbuf_r+0x42>
 801ab2a:	466a      	mov	r2, sp
 801ab2c:	f000 f894 	bl	801ac58 <_fstat_r>
 801ab30:	2800      	cmp	r0, #0
 801ab32:	dbf1      	blt.n	801ab18 <__swhatbuf_r+0x12>
 801ab34:	9a01      	ldr	r2, [sp, #4]
 801ab36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ab3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ab3e:	425a      	negs	r2, r3
 801ab40:	415a      	adcs	r2, r3
 801ab42:	602a      	str	r2, [r5, #0]
 801ab44:	e7ee      	b.n	801ab24 <__swhatbuf_r+0x1e>
 801ab46:	2340      	movs	r3, #64	; 0x40
 801ab48:	2000      	movs	r0, #0
 801ab4a:	6023      	str	r3, [r4, #0]
 801ab4c:	b016      	add	sp, #88	; 0x58
 801ab4e:	bd70      	pop	{r4, r5, r6, pc}

0801ab50 <__smakebuf_r>:
 801ab50:	898b      	ldrh	r3, [r1, #12]
 801ab52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ab54:	079d      	lsls	r5, r3, #30
 801ab56:	4606      	mov	r6, r0
 801ab58:	460c      	mov	r4, r1
 801ab5a:	d507      	bpl.n	801ab6c <__smakebuf_r+0x1c>
 801ab5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ab60:	6023      	str	r3, [r4, #0]
 801ab62:	6123      	str	r3, [r4, #16]
 801ab64:	2301      	movs	r3, #1
 801ab66:	6163      	str	r3, [r4, #20]
 801ab68:	b002      	add	sp, #8
 801ab6a:	bd70      	pop	{r4, r5, r6, pc}
 801ab6c:	ab01      	add	r3, sp, #4
 801ab6e:	466a      	mov	r2, sp
 801ab70:	f7ff ffc9 	bl	801ab06 <__swhatbuf_r>
 801ab74:	9900      	ldr	r1, [sp, #0]
 801ab76:	4605      	mov	r5, r0
 801ab78:	4630      	mov	r0, r6
 801ab7a:	f7ff f8ef 	bl	8019d5c <_malloc_r>
 801ab7e:	b948      	cbnz	r0, 801ab94 <__smakebuf_r+0x44>
 801ab80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ab84:	059a      	lsls	r2, r3, #22
 801ab86:	d4ef      	bmi.n	801ab68 <__smakebuf_r+0x18>
 801ab88:	f023 0303 	bic.w	r3, r3, #3
 801ab8c:	f043 0302 	orr.w	r3, r3, #2
 801ab90:	81a3      	strh	r3, [r4, #12]
 801ab92:	e7e3      	b.n	801ab5c <__smakebuf_r+0xc>
 801ab94:	4b0d      	ldr	r3, [pc, #52]	; (801abcc <__smakebuf_r+0x7c>)
 801ab96:	62b3      	str	r3, [r6, #40]	; 0x28
 801ab98:	89a3      	ldrh	r3, [r4, #12]
 801ab9a:	6020      	str	r0, [r4, #0]
 801ab9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aba0:	81a3      	strh	r3, [r4, #12]
 801aba2:	9b00      	ldr	r3, [sp, #0]
 801aba4:	6163      	str	r3, [r4, #20]
 801aba6:	9b01      	ldr	r3, [sp, #4]
 801aba8:	6120      	str	r0, [r4, #16]
 801abaa:	b15b      	cbz	r3, 801abc4 <__smakebuf_r+0x74>
 801abac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801abb0:	4630      	mov	r0, r6
 801abb2:	f000 f863 	bl	801ac7c <_isatty_r>
 801abb6:	b128      	cbz	r0, 801abc4 <__smakebuf_r+0x74>
 801abb8:	89a3      	ldrh	r3, [r4, #12]
 801abba:	f023 0303 	bic.w	r3, r3, #3
 801abbe:	f043 0301 	orr.w	r3, r3, #1
 801abc2:	81a3      	strh	r3, [r4, #12]
 801abc4:	89a0      	ldrh	r0, [r4, #12]
 801abc6:	4305      	orrs	r5, r0
 801abc8:	81a5      	strh	r5, [r4, #12]
 801abca:	e7cd      	b.n	801ab68 <__smakebuf_r+0x18>
 801abcc:	08019add 	.word	0x08019add

0801abd0 <_raise_r>:
 801abd0:	291f      	cmp	r1, #31
 801abd2:	b538      	push	{r3, r4, r5, lr}
 801abd4:	4604      	mov	r4, r0
 801abd6:	460d      	mov	r5, r1
 801abd8:	d904      	bls.n	801abe4 <_raise_r+0x14>
 801abda:	2316      	movs	r3, #22
 801abdc:	6003      	str	r3, [r0, #0]
 801abde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801abe2:	bd38      	pop	{r3, r4, r5, pc}
 801abe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801abe6:	b112      	cbz	r2, 801abee <_raise_r+0x1e>
 801abe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801abec:	b94b      	cbnz	r3, 801ac02 <_raise_r+0x32>
 801abee:	4620      	mov	r0, r4
 801abf0:	f000 f830 	bl	801ac54 <_getpid_r>
 801abf4:	462a      	mov	r2, r5
 801abf6:	4601      	mov	r1, r0
 801abf8:	4620      	mov	r0, r4
 801abfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abfe:	f000 b817 	b.w	801ac30 <_kill_r>
 801ac02:	2b01      	cmp	r3, #1
 801ac04:	d00a      	beq.n	801ac1c <_raise_r+0x4c>
 801ac06:	1c59      	adds	r1, r3, #1
 801ac08:	d103      	bne.n	801ac12 <_raise_r+0x42>
 801ac0a:	2316      	movs	r3, #22
 801ac0c:	6003      	str	r3, [r0, #0]
 801ac0e:	2001      	movs	r0, #1
 801ac10:	e7e7      	b.n	801abe2 <_raise_r+0x12>
 801ac12:	2400      	movs	r4, #0
 801ac14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ac18:	4628      	mov	r0, r5
 801ac1a:	4798      	blx	r3
 801ac1c:	2000      	movs	r0, #0
 801ac1e:	e7e0      	b.n	801abe2 <_raise_r+0x12>

0801ac20 <raise>:
 801ac20:	4b02      	ldr	r3, [pc, #8]	; (801ac2c <raise+0xc>)
 801ac22:	4601      	mov	r1, r0
 801ac24:	6818      	ldr	r0, [r3, #0]
 801ac26:	f7ff bfd3 	b.w	801abd0 <_raise_r>
 801ac2a:	bf00      	nop
 801ac2c:	20001a5c 	.word	0x20001a5c

0801ac30 <_kill_r>:
 801ac30:	b538      	push	{r3, r4, r5, lr}
 801ac32:	4d07      	ldr	r5, [pc, #28]	; (801ac50 <_kill_r+0x20>)
 801ac34:	2300      	movs	r3, #0
 801ac36:	4604      	mov	r4, r0
 801ac38:	4608      	mov	r0, r1
 801ac3a:	4611      	mov	r1, r2
 801ac3c:	602b      	str	r3, [r5, #0]
 801ac3e:	f7e9 fb15 	bl	800426c <_kill>
 801ac42:	1c43      	adds	r3, r0, #1
 801ac44:	d102      	bne.n	801ac4c <_kill_r+0x1c>
 801ac46:	682b      	ldr	r3, [r5, #0]
 801ac48:	b103      	cbz	r3, 801ac4c <_kill_r+0x1c>
 801ac4a:	6023      	str	r3, [r4, #0]
 801ac4c:	bd38      	pop	{r3, r4, r5, pc}
 801ac4e:	bf00      	nop
 801ac50:	2004f6f0 	.word	0x2004f6f0

0801ac54 <_getpid_r>:
 801ac54:	f7e9 bb02 	b.w	800425c <_getpid>

0801ac58 <_fstat_r>:
 801ac58:	b538      	push	{r3, r4, r5, lr}
 801ac5a:	4d07      	ldr	r5, [pc, #28]	; (801ac78 <_fstat_r+0x20>)
 801ac5c:	2300      	movs	r3, #0
 801ac5e:	4604      	mov	r4, r0
 801ac60:	4608      	mov	r0, r1
 801ac62:	4611      	mov	r1, r2
 801ac64:	602b      	str	r3, [r5, #0]
 801ac66:	f7e9 fb62 	bl	800432e <_fstat>
 801ac6a:	1c43      	adds	r3, r0, #1
 801ac6c:	d102      	bne.n	801ac74 <_fstat_r+0x1c>
 801ac6e:	682b      	ldr	r3, [r5, #0]
 801ac70:	b103      	cbz	r3, 801ac74 <_fstat_r+0x1c>
 801ac72:	6023      	str	r3, [r4, #0]
 801ac74:	bd38      	pop	{r3, r4, r5, pc}
 801ac76:	bf00      	nop
 801ac78:	2004f6f0 	.word	0x2004f6f0

0801ac7c <_isatty_r>:
 801ac7c:	b538      	push	{r3, r4, r5, lr}
 801ac7e:	4d06      	ldr	r5, [pc, #24]	; (801ac98 <_isatty_r+0x1c>)
 801ac80:	2300      	movs	r3, #0
 801ac82:	4604      	mov	r4, r0
 801ac84:	4608      	mov	r0, r1
 801ac86:	602b      	str	r3, [r5, #0]
 801ac88:	f7e9 fb61 	bl	800434e <_isatty>
 801ac8c:	1c43      	adds	r3, r0, #1
 801ac8e:	d102      	bne.n	801ac96 <_isatty_r+0x1a>
 801ac90:	682b      	ldr	r3, [r5, #0]
 801ac92:	b103      	cbz	r3, 801ac96 <_isatty_r+0x1a>
 801ac94:	6023      	str	r3, [r4, #0]
 801ac96:	bd38      	pop	{r3, r4, r5, pc}
 801ac98:	2004f6f0 	.word	0x2004f6f0

0801ac9c <_init>:
 801ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac9e:	bf00      	nop
 801aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801aca2:	bc08      	pop	{r3}
 801aca4:	469e      	mov	lr, r3
 801aca6:	4770      	bx	lr

0801aca8 <_fini>:
 801aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acaa:	bf00      	nop
 801acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801acae:	bc08      	pop	{r3}
 801acb0:	469e      	mov	lr, r3
 801acb2:	4770      	bx	lr
